Graph(
	nodes = listOf(ForkJoinPool:findNonEmptyStealQueue(), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ChannelTrafficShapingHandler:<init>(long), SpdyFrameCodec:handlerAdded(ChannelHandlerContext), DefaultHeaders$HeaderEntry:<init>(DefaultHeaders), SSLEngine:getPeerPort(), OpenSslEngine:access$202(OpenSslEngine-Certificate[]), SSLEngine:getPeerHost(), SpdyStreamStatus:code(), DefaultTextHeaders:addObject(Object-Object[]), AbstractChannelHandlerContext:deregister(), Channel:newFailedFuture(Throwable), PlatformDependent:getObject(Object-long), ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), Channel:attr(AttributeKey), ByteBuf:compareTo(ByteBuf), SSLEngine:isInboundDone(), Socks5PasswordAuthRequestDecoder$State:<clinit>(), PerMessageDeflateDecoder:decode(ChannelHandlerContext-Object-List), ByteBufProcessor$4:<init>(), DeflateEncoder:cleanup(), EmptyBinaryHeaders:addObject(AsciiString-Object[]), Http2ConnectionHandler:<init>(Http2Connection-Http2FrameReader-Http2FrameWriter-Http2FrameListener), AsciiString:lastIndexOf(int-int), DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:access$000(), FileUpload:addContent(ByteBuf-boolean), StompHeaders:set(TextHeaders), GlobalChannelTrafficShapingHandler:handlerRemoved(ChannelHandlerContext), MqttDecoder$Result:<init>(Object-int), BinaryMemcacheResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), JdkSslEngine:unwrap(ByteBuffer-ByteBuffer[]), DiskFileUpload:getCharset(), RtspVersions:valueOf(String), DefaultHttp2Connection:access$1400(DefaultHttp2Connection), DefaultHttpContent:<init>(ByteBuf), MixedAttribute:duplicate(), StringDecoder:decode(ChannelHandlerContext-Object-List), AbstractEpollChannel:checkResolvable(InetSocketAddress), BinaryMemcacheResponse:extras(), DefaultPromise:setUncancellable(), PrimitiveCollections$UnmodifiableIntObjectMap$EntryImpl:value(), DiskFileUpload:toString(), JdkNpnApplicationProtocolNegotiator:<clinit>(), Unsafe:objectFieldOffset(Field), EmptyBinaryHeaders:addInt(AsciiString-int), ConcurrentSet:contains(Object), NioSocketChannel:eventLoop(), PrimitiveCollections$UnmodifiableIntObjectMap:containsValue(Object), ClientCookieEncoder:encode(String-String), DefaultHttp2Headers:setByte(AsciiString-byte), JZlibEncoder:close(ChannelPromise), IntObjectMap:clear(), HashedWheelTimer$Worker:<init>(HashedWheelTimer), Native:writeAddress(int-long-int-int), Socks4ClientEncoder:<init>(), ForkJoinPool:getSurplusQueuedTaskCount(), PooledUnsafeDirectByteBuf:_getUnsignedMedium(int), ConcurrentHashMapV8$ValuesView:iterator(), BinaryMemcacheResponse:dataType(), DefaultHttp2HeadersDecoder:access$100(DefaultHttp2HeadersDecoder), Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[]), DefaultHeaders:<clinit>(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long), MessageLite$Builder:mergeFrom(byte[]-int-int-ExtensionRegistryLite), DiskFileUpload:getName(), AbstractTrafficShapingHandler:toString(), DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), SSLEngine:setUseClientMode(boolean), FixedCompositeByteBuf:deallocate(), DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter), InternalAttribute:hashCode(), AsciiString:regionMatches(int-CharSequence-int-int), OioServerSocketChannel:doReadMessages(List), OpenSslX509Certificate:checkValidity(Date), FixedCompositeByteBuf:getBytes(int-ByteBuf-int-int), PausableChannelEventExecutor:channel(), MqttFixedHeader:isRetain(), DefaultHttp2ConnectionDecoder:access$1100(DefaultHttp2ConnectionDecoder), ByteBuf:retain(int), DefaultTextHeaders:<init>(), HttpContentDecoder:decode(ChannelHandlerContext-HttpObject-List), NetUtil:<clinit>(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToFloat(Object), AbstractBootstrap:clone(), PlatformDependent:newConcurrentHashMap(int-float-int), EpollDatagramChannel:access$102(EpollDatagramChannel-InetSocketAddress), WebSocketClientProtocolHandler:decode(ChannelHandlerContext-Object-List), SslHandler$2:run(), MultithreadEventExecutorGroup:access$500(MultithreadEventExecutorGroup), AdvancedLeakAwareByteBuf:readLong(), DefaultHttp2Headers:set(Object-Object[]), Http2Connection:goAwaySent(int), DnsQuestion:hashCode(), Http2OrHttpChooser$SelectedProtocol:ordinal(), SctpMessageToMessageDecoder:acceptInboundMessage(Object), ApplicationProtocolConfig$SelectorFailureBehavior:ordinal(), ScheduledFutureTask:access$002(ScheduledFutureTask-long), WrappedByteBuf:internalNioBuffer(int-int), UnsafeDirectSwappedByteBuf:setInt(int-int), RecyclableArrayList:clear(), EmptyByteBuf:getFloat(int), AbstractChannel:connect(SocketAddress), MultithreadEventExecutorGroup:access$400(MultithreadEventExecutorGroup), EmptyHttp2Headers:setChar(AsciiString-char), CorsHandler:setVaryHeader(HttpResponse), EmptyHttp2Headers:addChar(AsciiString-char), ServerCookieEncoder:encode(Iterable), AbstractEpollChannel$AbstractEpollUnsafe:epollOutReady(), PoolArena:isDirect(), Attribute:setContent(ByteBuf), Http2InboundFrameLogger$1:onPingRead(ChannelHandlerContext-ByteBuf), CertificateValidity:<init>(Date-Date), PendingWriteQueue$PendingWrite:<clinit>(), DefaultChannelGroup:add(Object), AbstractNioMessageChannel:newUnsafe(), GlobalEventExecutor:addTask(Runnable), Channel$Unsafe:bind(SocketAddress-ChannelPromise), ForkJoinTask:doInvoke(), JavassistTypeParameterMatcherGenerator:appendClassPath(String), ConcurrentHashMapV8$KeySetView:spliterator166(), DefaultSpdySettingsFrame:getSettings(), Http2Connection$Endpoint:maxStreams(int), PooledDirectByteBuf:_setShort(int-int), SystemPropertyUtil:get(String), ThreadLocalMarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), LocalChannel:doBind(SocketAddress), AbstractEventExecutorGroup:invokeAny(Collection-long-TimeUnit), SpdyHeaderBlockRawDecoder:decodeHeaderBlock(ByteBuf-SpdyHeadersFrame), StringUtil:toHexStringPadded(byte[]-int-int), Http2FrameListenerDecorator:onPingAckRead(ChannelHandlerContext-ByteBuf), DefaultHttp2ConnectionDecoder$FrameReadListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-List), AttributeKey:id(), NoopNameResolverGroup:<clinit>(), JsonObjectDecoder:<init>(boolean), ThreadDeathWatcher$Entry:hashCode(), DefaultHttp2LocalFlowController$1:streamActive(Http2Stream), ByteBuf:readSlice(int), Bzip2HuffmanStageEncoder:optimiseSelectorsAndHuffmanTables(boolean), SSLSession:getPeerCertificates(), IdleStateHandler:access$400(IdleStateHandler), AbstractByteBuf:ensureWritable(int), EmptyHttp2Headers:addObject(Object-Object[]), SpdySession$StreamState:setReceiveWindowSizeLowerBound(int), TypeParameterMatcher:fail(Class-String), DnsServerAddresses:<clinit>(), EncoderException:<init>(String-Throwable), DefaultHttpHeaders:addDouble(CharSequence-double), DefaultStompContentSubframe:copy(), Log4JLoggerFactory:<init>(), ChannelHandler:read(ChannelHandlerContext), HAProxyProxiedProtocol$AddressFamily:<init>(String-int-byte), OpenSslEngine:access$000(OpenSslEngine), NioUdtByteConnectorChannel:remoteAddress0(), CloseWebSocketFrame:reasonText(), AbstractMemoryHttpData:getString(), EmptyTextHeaders:addObject(Object-Object), NativeDatagramPacketArray:access$100(NativeDatagramPacketArray), UnpooledDirectByteBuf:writerIndex(), HttpContentDecoder:channelInactive(ChannelHandlerContext), ChannelOutboundBuffer$Entry:newInstance(Object-int-long-ChannelPromise), EmptyByteBuf:readUnsignedMedium(), SpdyProtocolException:setStackTrace(StackTraceElement[]), DefaultHttpResponse:toString(), EmptyByteBuf:writeLong(long), ChannelFlushPromiseNotifier:notifyPromises0(Throwable), FullBinaryMemcacheRequest:setExtrasLength(byte), ByteBufProcessor$10:<init>(), Channel$Unsafe:beginRead(), DnsHeader:setOpcode(int), SingleThreadEventExecutor:parent(), OioByteStreamChannel:activate(InputStream-OutputStream), MemoryFileUpload:toString(), EventLoop:terminationFuture(), EpollDomainSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), Http2OrHttpChooser$SelectedProtocol:values(), Http2Stream:setPriority(int-short-boolean), AbstractChannel$CloseFuture:isDone(), WrappedByteBuf:<init>(ByteBuf), JdkApplicationProtocolNegotiator$ProtocolSelectorFactory:newSelector(SSLEngine-Set), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), OioServerSocketChannel:<init>(ServerSocket), ByteBuf:slice(), Http2InboundFrameLogger$1:onPriorityRead(ChannelHandlerContext-int-int-short-boolean), HttpPostMultipartRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus), Utf8Validator:finish(), AsciiString:indexOf(int-int), LocalServerChannel:pipeline(), Bootstrap$1:operationComplete(Future), DefaultSpdyRstStreamFrame:toString(), AdvancedLeakAwareByteBuf:setBoolean(int-boolean), DefaultEventLoop:<init>(), MpscLinkedQueueNode:value(), BinaryMemcacheClientCodec$Decoder:<init>(BinaryMemcacheClientCodec-int), UnpooledDirectByteBuf:_setShort(int-int), OioSctpServerChannel:bindAddress(InetAddress), MarshallingDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), SSLContext:setSessionCacheSize(long-long), AbstractReferenceCountedByteBuf:touch(), DnsClass:<init>(int-String), SingleThreadEventLoop:<init>(EventLoopGroup-Executor-boolean), DiskFileUpload:isCompleted(), NioSctpServerChannel:newPromise(), HttpResponseStatus:parseLine(CharSequence), Socks5AddressDecoder:decodeAddress(Socks5AddressType-ByteBuf), WebSocketClientExtensionHandshaker:handshakeExtension(WebSocketExtensionData), OpenSslEngine$1:getValue(String), AbstractTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean), SwappedByteBuf:setBytes(int-byte[]), PausableChannelEventExecutor:invokeChannelUnregistered(ChannelHandlerContext), MqttDecoder:decodeString(ByteBuf), AbstractBinaryMemcacheDecoder:invalidChunk(Exception), Decoder:<init>(int-int), EmptyHttpHeaders:setAll(TextHeaders), JZlibEncoder:close(), BinaryMemcacheRequest:keyLength(), StringUtil:byteToHexStringPadded(Appendable-int), Http2Connection$Endpoint:lastStreamCreated(), PlatformDependent:hasJavassist(), AsciiHeadersEncoder$SeparatorType[]:clone(), BinaryMemcacheRequestEncoder:encode(ChannelHandlerContext-Object-List), AbstractEpollStreamChannel:fd(), ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), EpollServerDomainSocketChannel:remoteAddress(), HttpObjectAggregator:isLastContentMessage(ByteBufHolder), WrappedByteBuf:getMedium(int), OioByteStreamChannel:localAddress(), DefaultBinaryHeaders:setDouble(Object-double), InternalThreadLocalMap:<clinit>(), SelectedSelectionKeySet:add(SelectionKey), LoggingHandler:channelRead(ChannelHandlerContext-Object), DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress-InetSocketAddress), MqttSubAckMessage:fixedHeader(), AbstractByteBufAllocator:directBuffer(int-int), ReplayingDecoderBuffer:getMedium(int), VoidChannelPromise:await(), DefaultStompFrame:retain(), EmptyHeaders:addTimeMillis(Object-long), ByteToMessageDecoder$Cumulator:cumulate(ByteBufAllocator-ByteBuf-ByteBuf), HttpHeaders:getAll(Object), DiskFileUpload:setContentType(String), SslContext:newClientContext(SslProvider-File-TrustManagerFactory), DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator), DefaultChannelPipeline:generateName0(Class), DefaultOioSocketChannelConfig:setWriteBufferLowWaterMark(int), OioSctpServerChannel:localAddress(), InternalLoggerFactory:newInstance(String), Http2CodecUtil:writeUnsignedShort(int-ByteBuf), ConcurrentHashMapV8:searchEntries(long-ConcurrentHashMapV8$Fun), EpollDatagramChannelConfig:setConnectTimeoutMillis(int), HttpData:checkSize(long), WebSocket08FrameDecoder:<init>(boolean-boolean-int-boolean), StompConstants:<init>(), WebSocketServerHandshaker00:newWebsocketDecoder(), PendingWriteQueue:<clinit>(), CorsHandler:setOrigin(HttpResponse-CharSequence), DefaultChannelHandlerInvoker$16:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), MarshallingDecoder:<init>(UnmarshallerProvider-int), DefaultSocks4CommandResponse:decoderResult(), DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:<init>(), FixedCompositeByteBuf:setInt(int-int), AdvancedLeakAwareByteBuf:readByte(), Socks4ServerDecoder$State:<init>(String-int), HttpPostMultipartRequestDecoder:getBodyHttpData(String), MessageToMessageDecoder:decode(ChannelHandlerContext-Object-List), ReplayingDecoderBuffer:getBytes(int-OutputStream-int), MessageToMessageDecoder:acceptInboundMessage(Object), TrafficCounter:milliSecondFromNano(), ThreadPerTaskExecutor:<init>(ThreadFactory), DefaultTextHeaders$DefaultTextValueTypeConverter:convertByte(byte), ForkJoinTask:adapt(Runnable), ForkJoinTask$AdaptedRunnableAction:exec(), DefaultHttp2ConnectionEncoder:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise-boolean), AbstractChannel:writeAndFlush(Object-ChannelPromise), IovArrayThreadLocal:<clinit>(), ConcurrentHashMapV8$CollectionView:contains(Object), DefaultPromise$LateListeners:poll(), NioEventLoop:processSelectedKeysPlain(Set), DefaultUdtChannelConfig:setSendBufferSize(int), DnsResponse:retain(int), SwappedByteBuf:getBytes(int-byte[]-int-int), AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress), Inflater:inflateSetDictionary(byte[]-int), PooledUnsafeDirectByteBuf:maxCapacity(), ObjectDecoderInputStream:readFully(byte[]), HttpStatusClass$1:<init>(String-int-int-int-String), Lz4FrameEncoder:writeIntLE(int-byte[]-int), HttpContentEncoder:encodeContent(HttpContent-List), ProxyHandler:channelRead(ChannelHandlerContext-Object), VoidChannelPromise$1:<init>(VoidChannelPromise), Native:bind(int-byte[]-int-int), DefaultBinaryHeaders:setShort(Object-short), SslContext:newClientContext(TrustManagerFactory), Log4JLogger:info(String-Throwable), HttpUtil$2:<init>(Http2Headers), PendingWrite:<init>(Recycler$Handle), WebSocket08FrameEncoder:<clinit>(), Http2InboundFrameLogger:<init>(Http2FrameReader-Http2FrameLogger), ReplayingDecoderBuffer:getBoolean(int), CommonsLogger:trace(String-Object[]), EpollDatagramChannelConfig:setInterface(InetAddress), AttributeKey:<init>(int-String), DefaultHttp2Connection$LazyPropertyMap:remove(Object), DefaultBinaryHeaders$2:convertToFloat(Object), WebSocketServerHandshakerFactory:sendUnsupportedVersionResponse(Channel-ChannelPromise), ChannelMatchers:is(Channel), AbstractReferenceCountedByteBuf:touch(Object), MultithreadEventExecutorGroup:awaitTermination(long-TimeUnit), DefaultHttp2Connection$DefaultStream:removeChild(DefaultHttp2Connection$DefaultStream), CompactObjectInputStream:read(), MixedFileUpload:compareTo(Object), DnsClass:compareTo(Object), AbstractNioChannel:isActive(), DefaultServerSocketChannelConfig:getOptions(Map-ChannelOption[]), DefaultSocks5PasswordAuthRequest:decoderResult(), PendingWrite:newInstance(Object-Promise), AsciiHeadersEncoder$NewlineType:ordinal(), Native:ipv4MappedIpv6Address(byte[]), DefaultFutureListeners:progressiveSize(), PausableChannelEventExecutor:newSucceededFuture(Object), LocalChannel:access$500(LocalChannel), ReadOnlyByteBuf:discardReadBytes(), OpenSslX509Certificate:getPublicKey(), ForkJoinPool:invokeAll(Collection), FixedCompositeByteBuf:order(), Log4JLogger:isWarnEnabled(), AbstractOioMessageChannel:localAddress(), ForkJoinWorkerThread:<init>(ForkJoinPool), UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int), JdkSslSession:getSessionContext(), DefaultLastHttpContent:content(), AdvancedLeakAwareByteBuf:getUnsignedInt(int), Unsafe:freeMemory(long), AdvancedLeakAwareByteBuf:nioBuffers(int-int), OpenSslEngine:memoryAddress(ByteBuf), DefaultChannelPipeline:remove0(AbstractChannelHandlerContext), ChannelOutboundBuffer:addMessage(Object-int-ChannelPromise), Http2Settings:pushEnabled(), DefaultChannelHandlerInvoker$13:run(), DatagramChannel:close(), NoopNameResolver:doResolve(SocketAddress-Promise), WrappedByteBuf:getShort(int), Http2ConnectionEncoder:frameWriter(), WebSocket07FrameDecoder:<init>(boolean-boolean-int-boolean), AbstractChannel:id(), ConcurrentHashMapV8:merge(Object-Object-ConcurrentHashMapV8$BiFun), DeflateDecoder:decode(ChannelHandlerContext-WebSocketFrame-List), ByteBufOutputStream:writeBoolean(boolean), FingerprintTrustManagerFactory:toFingerprintArray(Iterable), ConcurrentHashMapV8$ForEachMappingTask:propagateCompletion(), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle), EpollServerSocketChannelConfig:setReusePort(boolean), OpenSslEngine$ClientAuthMode:<clinit>(), DefaultTextHeaders:addByte(Object-byte), DefaultEventLoopGroup:<init>(), MessageAggregator:handleOversizedMessage(ChannelHandlerContext-Object), DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:<init>(DefaultHttp2HeadersEncoder-DefaultHttp2HeadersEncoder$1), SniHandler:<clinit>(), ReplayingDecoderBuffer:writeBytes(ByteBuffer), Http2Connection:isGoAway(), Native:write0(int-ByteBuffer-int-int), AbstractScheduledEventExecutor:cancelScheduledTasks(), RxtxChannelConfig$Paritybit:valueOf(int), InboundHttp2ToHttpAdapter:newMessage(int-Http2Headers-boolean), DefaultChannelPipeline:connect(SocketAddress-SocketAddress), MemcacheContent:content(), DefaultRxtxChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), BinaryMemcacheResponseEncoder:<init>(), ReplayingDecoderBuffer:toString(Charset), DefaultHttp2RemoteFlowController$FlowState:hasFrame(), ByteBuf:getChar(int), SpdyHeaderBlockDecoder:<init>(), AbstractNioChannel:doRegister(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<clinit>(), Unpooled:copyShort(short[]), InternalAttribute:retain(int), LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline), JdkLogger:debug(String-Object[]), DefaultHttp2Headers:setFloat(AsciiString-float), SwappedByteBuf:writeChar(int), SniHandler:<init>(DomainNameMapping), UdtMessage:retain(), AbstractEpollChannel$AbstractEpollUnsafe:epollInReady(), DefaultChannelPipeline:deregister(), Native:isBroadcast(int), AdvancedLeakAwareByteBuf:getUnsignedMedium(int), EpollServerChannelConfig:setEpollMode(EpollMode), ConnectTimeoutException:<init>(String), ConcurrentHashMapV8$MapReduceValuesTask:advance(), DnsNameResolverContext:access$200(DnsNameResolverContext-Throwable), ConcurrentHashMapV8$MapReduceMappingsToLongTask:fork(), DefaultBinaryHeaders:setObject(Object-Iterable), HttpUtil$Http2ToHttpHeaderTranslator:<clinit>(), EmptyBinaryHeaders:add(AsciiString-AsciiString[]), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int-String), Crc32c:getValue(), EmbeddedChannelId:compareTo(Object), SctpServerChannel:getAllLocalAddresses(), AbstractEventExecutorGroup:invokeAny(Collection), UnpooledDirectByteBuf:checkIndex(int), SimpleLeakAwareByteBuf:slice(int-int), UnpooledDirectByteBuf:deallocate(), JZlibEncoder$2:operationComplete(ChannelFuture), AbstractOioByteChannel:<clinit>(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), DefaultTextHeaders$3:toUnconvertedType(String), AbstractByteBuf:writeLong(long), HttpObjectAggregator:isAggregated(Object), EmbeddedEventLoop:invokeClose(ChannelHandlerContext-ChannelPromise), AbstractScheduledEventExecutor:purgeCancelledScheduledTasks(), EmptyHttp2Headers:setObject(Object-Object[]), DefaultHeaders:addDouble(Object-double), HttpObjectAggregator:handleOversizedMessage(ChannelHandlerContext-Object), DefaultOioSocketChannelConfig:validate(ChannelOption-Object), SslHandler$1:run(), JZlibEncoder$1:<init>(JZlibEncoder-ChannelPromise-ChannelPromise), Http2Connection$Endpoint:allowPushTo(boolean), ByteToMessageCodec:decodeLast(ChannelHandlerContext-ByteBuf-List), DefaultHttp2LocalFlowController:unconsumedBytes(Http2Stream), CompressionException:<init>(), ProxyHandler:access$100(ProxyHandler-Throwable), DefaultPromise:isDone0(Object), DefaultUdtChannelConfig:getOption(ChannelOption), WrappedByteBuf:setFloat(int-float), EpollSocketChannel:checkResolvable(InetSocketAddress), ByteBufOutputStream:writtenBytes(), Socks4ServerEncoder:encode(ChannelHandlerContext-Socks4CommandResponse-ByteBuf), DefaultHeaders$HeaderDateFormat:get(), DnsServerAddresses:sanitize(InetSocketAddress[]), DefaultFileRegion:<clinit>(), Recycler$1:initialValue(), AbstractTrafficShapingHandler:userDefinedWritabilityIndex(), AbstractByteBuf:writeMedium(int), SingleThreadEventExecutor:cleanup(), Unmarshaller:finish(), SingleThreadEventExecutor:<init>(EventExecutorGroup-Executor-boolean), Slf4JLogger:warn(String-Object), EmptyTextHeaders:setObject(CharSequence-Object[]), EmptyHttp2Headers:addShort(AsciiString-short), HttpPostMultipartRequestDecoder:hasNext(), AbstractServerChannel:doDisconnect(), EpollDomainSocketChannelConfig:setWriteBufferLowWaterMark(int), SocketChannelUDT:finishConnect(), HttpPostBodyUtil$TransferEncodingMechanism:<clinit>(), JdkSslContext:sessionTimeout(), PooledHeapByteBuf:readBytes(GatheringByteChannel-int), DefaultHttpObject:equals(Object), Socks5ServerEncoder:<init>(), Snappy:decodeCopyWith4ByteOffset(byte-ByteBuf-ByteBuf-int), OioByteStreamChannel$2:<init>(), Bzip2Encoder:encode(ChannelHandlerContext-Object-ByteBuf), AbstractOioChannel$DefaultOioUnsafe:safeSetFailure(ChannelPromise-Throwable), MessageToMessageCodec:acceptInboundMessage(Object), DefaultSocks4CommandResponse:<init>(Socks4CommandStatus-String-int), SpdySession:removeStream(int-Throwable-boolean), CompactObjectOutputStream:write(int), SctpInboundByteStreamHandler:decode(ChannelHandlerContext-Object-List), ReplayingDecoderBuffer:setDouble(int-double), Bzip2DivSufSort$TRBudget:update(int-int), DefaultSpdyHeaders:addFloat(CharSequence-float), PooledByteBufAllocator$PoolThreadLocalCache:<init>(PooledByteBufAllocator), MqttPublishMessage:retain(), ConcurrentHashMapV8$ValueIterator:advance(), PooledUnsafeDirectByteBuf:ensureAccessible(), EpollDomainSocketChannel:pipeline(), DefaultTextHeaders:access$1001(DefaultTextHeaders-Object-Iterable), ProtocolFamilyConverter:<init>(), ChunkedWriteHandler$PendingWrite:<init>(Object-ChannelPromise), NioUdtMessageConnectorChannel:doBind(SocketAddress), HttpContent:retain(int), FingerprintTrustManagerFactory:<clinit>(), MqttPublishMessage:copy(), EmptyConvertibleHeaders:addLong(Object-long), DefaultChannelGroupFuture:access$008(DefaultChannelGroupFuture), CompositeByteBuf:setBytes(int-ScatteringByteChannel-int), RxtxChannelConfig$Paritybit:value(), EmbeddedChannel:doClose(), Http2Connection:goAwayReceived(), Cookie:rawValue(), Unsafe:getObject(Object-long), JdkSslSession:setApplicationProtocol(String), MixedFileUpload:release(), ForkJoinTask:complete(Object), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise), AbstractEpollChannel$1:run(), MemoryFileUpload:setFilename(String), EmptyBinaryHeaders:setLong(AsciiString-long), ByteToMessageCodec:decode(ChannelHandlerContext-ByteBuf-List), WebSocketClientHandshaker00:uri(), WrappedByteBuf:forEachByteDesc(int-int-ByteBufProcessor), AbstractDerivedByteBuf:touch(), DefaultAttributeMap$DefaultAttribute:<init>(DefaultAttributeMap$DefaultAttribute-AttributeKey), MixedAttribute:toString(), HttpPostStandardRequestDecoder:cleanFiles(), OpenSslContext:applicationProtocolNegotiator(), EmptyByteBuf:copy(int-int), Bzip2DivSufSort:ssBlockSwap(int[]-int-int[]-int-int), LoggingHandler:formatSimple(ChannelHandlerContext-String-Object), AsciiHeadersEncoder:visit(Map$Entry), SslHandler:setHandshakeSuccessIfStillHandshaking(), JcaX509CertificateConverter:setProvider(Provider), LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), JZlibEncoder:ctx(), HttpUtil$ExtensionHeaderNames:values(), Socks4CommandType:<clinit>(), DefaultEventLoop:run(), PoolThreadCache:cache(PoolThreadCache$MemoryRegionCache[]-int), DefaultFileRegion:transfered(), DefaultBinaryHeaders$2:convertFloat(float), ReadOnlyByteBufferBuf:checkIndex(int), WebSocket08FrameDecoder:unmask(ByteBuf), ChannelOutboundBuffer:setUserDefinedWritability(int-boolean), OioServerSocketChannel:doBind(SocketAddress), DefaultTextHeaders$SingleHeaderValuesComposer:objectEscaper(), EmptyHttpHeaders:addObject(CharSequence-Object), DefaultChannelPipeline:fireChannelReadComplete(), ChunkedWriteHandler:access$100(), ConcurrentHashMapV8$ForEachTransformedEntryTask:invoke(), Headers$ValueConverter:convertToDouble(Object), Base64:alphabet(Base64Dialect), EmptyByteBuf:writeBytes(byte[]-int-int), MqttConnectReturnCode:valueOf(String), OioSocketChannel:<init>(Channel-Socket), DefaultSpdyStreamFrame:<init>(int), MqttEncoder:<clinit>(), JdkNpnSslEngine$2:selectProtocol(List), Native:finishConnect(int), DefaultHeaders:getIntAndRemove(Object), JdkSslSession:unwrap(), EmptyHeaders:set(Object-Object[]), DefaultChannelGroup:compareTo(Object), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:advance(), PooledHeapByteBuf:internalNioBuffer(int-int), CompactObjectInputStream:readUTF(), ScheduledFutureTask:getDelay(TimeUnit), DefaultAttributeMap$DefaultAttribute:getAndRemove(), Deflater:deflateSetDictionary(byte[]-int), OpenSslClientContext:destroyPools(), ByteBuf:readBytes(GatheringByteChannel-int), DefaultChannelGroupFuture:access$000(DefaultChannelGroupFuture), HttpContentEncoder$1:<clinit>(), SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), AdvancedLeakAwareByteBuf:getUnsignedShort(int), AbstractChannel$AbstractUnsafe:disconnect(ChannelPromise), InterfaceHttpPostRequestDecoder:offer(HttpContent), ConcurrentHashMapV8$SearchKeysTask:invoke(), HttpPostStandardRequestDecoder:parseBody(), MultithreadEventLoopGroup:<clinit>(), UdtMessage:content(), DefaultChannelPipeline:access$500(Class), ReplayingDecoderBuffer:compareTo(ByteBuf), SupportedCipherSuiteFilter:<clinit>(), AbstractNioMessageChannel:isReadPending(), FastThreadLocal:onRemoval(Object), DnsNameResolverContext:buildAliasMap(DnsResponse), Http2Stream$State:<clinit>(), DefaultMessageSizeEstimator$HandleImpl:<init>(int-DefaultMessageSizeEstimator$1), EpollDomainSocketChannel:isFlagSet(int), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<init>(String-int), DefaultSpdyHeaders:addObject(CharSequence-Object[]), DefaultSocks5PasswordAuthRequest:<init>(String-String), ByteBufUtil$ThreadLocalDirectByteBuf$1:newObject(Recycler$Handle), FastLzFrameDecoder$1:<clinit>(), Logger:getName(), OpenSslContext:finalize(), MqttQoS[]:clone(), AbstractEpollChannel:isOpen(), AdvancedLeakAwareByteBuf:forEachByte(ByteBufProcessor), EmbeddedChannel:close(), DnsServerAddresses$3$1:next(), DefaultByteBufHolder:touch(), DefaultHeaders:set(Headers), IdleStateHandler:handlerRemoved(ChannelHandlerContext), Http2FrameListener:onSettingsRead(ChannelHandlerContext-Http2Settings), OpenSslServerContext:access$000(), ConcurrentHashMapV8$1:run(), PlatformDependent:freeMemory(long), DefaultProgressivePromise:addListeners(GenericFutureListener[]), OpenSslEngine$1:getProtocol(), WrappedByteBuf:readUnsignedShort(), ChannelHandlerInvoker:invokeFlush(ChannelHandlerContext), ChunkedNioFile:<init>(File), JdkNpnApplicationProtocolNegotiator:protocols(), GlobalEventExecutor$TaskRunner:<init>(GlobalEventExecutor), AsciiString:toString(), DefaultFullBinaryMemcacheResponse:refCnt(), Http2Settings:size(), HttpPostRequestDecoder:removeHttpDataFromClean(InterfaceHttpData), DefaultChannelHandlerInvoker$WriteTask:value(), MessageAggregator:<init>(int-Class), GlobalTrafficShapingHandler:sendAllValid(ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long), DefaultLastMemcacheContent:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent), SpdySession$StreamComparator:compare(Integer-Integer), MixedFileUpload:hashCode(), AbstractChannelHandlerContext:hasAttr(AttributeKey), PendingWriteQueue$PendingWrite:access$200(PendingWriteQueue$PendingWrite), LimitingByteInput:<clinit>(), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String), SingleThreadEventLoop:register(Channel), ApplicationProtocolConfig$Protocol:ordinal(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:advance(), ZlibCodecFactory:<init>(), FullBinaryMemcacheResponse:setOpaque(int), DefaultSpdyHeaders:addObject(CharSequence-Iterable), DefaultStompHeaders:add(CharSequence-CharSequence[]), Encoder:setMatchFinder(int), ByteBufUtil:swapShort(short), PingWebSocketFrame:retain(int), ConcurrentHashMapV8$MapReduceKeysToLongTask:invoke(), SpdyOrHttpChooser:initPipeline(ChannelHandlerContext), DefaultConvertibleHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-ConvertibleHeaders$TypeConverter-DefaultHeaders$NameConverter), RtspRequestDecoder:createInvalidMessage(), MultithreadEventExecutorGroup$1:<init>(MultithreadEventExecutorGroup-boolean-Executor), SslContext:newClientContext(SslProvider-TrustManagerFactory), OpenSslServerSessionContext:setSessionIdContext(byte[]), JdkSslContext:<init>(Iterable-CipherSuiteFilter-ApplicationProtocolConfig-boolean), ReadOnlyByteBufferBuf:_getByte(int), UdtMessage:touch(Object), NioUdtMessageConnectorChannel:doDisconnect(), AbstractByteBuf:hashCode(), HttpObjectDecoder$State:values(), ApplicationProtocolUtil:toList(String[]), EmptyByteBuf:readBytes(ByteBuf-int-int), OpenSslClientContext:<init>(File), ServerBootstrap$ServerBootstrapAcceptor$1:<init>(ServerBootstrap$ServerBootstrapAcceptor-Channel), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:newInstance(), SingleThreadEventExecutor:runAllTasks(long), ConcurrentHashMapV8$MapReduceValuesToIntTask:advance(), SSL:getLastErrorNumber(), Socks5PasswordAuthStatus:compareTo(Socks5PasswordAuthStatus), ProxyConnectException:<init>(), AbstractScheduledEventExecutor$RunnableToCallableAdapter:<init>(RunnableEventExecutorAdapter), AbstractOioByteChannel:doRead(), DefaultHttp2FrameReader$3:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-int), ProxyHandler:sendToProxyServer(Object), Signal:compareTo(Object), ApplicationProtocolConfig:<clinit>(), AdaptiveRecvByteBufAllocator$HandleImpl:<init>(int-int-int), Http2ConnectionHandler$1:<init>(Http2ConnectionHandler-Http2Stream), SpdySettingsFrame:isPersisted(int), RxtxChannel:eventLoop(), SingleThreadEventLoop:pollTask(), DnsResponseCode:compareTo(Object), OioSctpChannel:<clinit>(), EpollDatagramChannelConfig:getTrafficClass(), AsciiString:contentEquals(CharSequence), NetUtil:toAddressString(InetAddress-boolean), GlobalChannelTrafficShapingHandler:calculateSize(Object), SpdyHeaders:setObject(CharSequence-Object), WebSocketClientProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List), AsciiString:toUpperCase(), AbstractNioChannel:config(), WeakReferenceMap:<init>(Map), ConcurrentHashMapV8$Node:equals(Object), DnsHeader:setId(int), EmptyBinaryHeaders:addObject(AsciiString-Object), EpollDatagramChannel:clearEpollIn(), SpdyOrHttpChooser:createHttpRequestHandlerForSpdy(), SpdyProtocolException:<init>(), Native:sendToAddress0(int-long-int-int-byte[]-int-int), NioServerSocketChannel:doConnect(SocketAddress-SocketAddress), SSLEngine:getSSLParameters(), DnsServerAddresses:shuffled(InetSocketAddress[]), DeflateFrameClientExtensionHandshaker$DeflateFrameClientExtension:newExtensionEncoder(), JdkNpnSslEngine$2:unsupported(), AbstractBinaryMemcacheDecoder:<init>(int), AbstractReferenceCountedByteBuf:release(int), SSLEngine:getEnableSessionCreation(), JdkSslSession:isValid(), JZlibDecoder:<init>(ZlibWrapper), SslHandshakeCompletionEvent:<clinit>(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:invoke(), IntObjectHashMap$1$1:hasNext(), Socks5CommandRequest:dstAddrType(), IpFilterRuleType:values(), EpollEventLoop:isShuttingDown(), BinaryMemcacheRequestEncoder:encodeHeader(ByteBuf-BinaryMemcacheMessage), DefaultChannelPipeline:waitForFuture(Future), PendingWriteQueue$PendingWrite:access$300(PendingWriteQueue$PendingWrite), Unpooled:copiedBuffer(ByteBuffer), LocalChannel$1:<init>(LocalChannel), AbstractBootstrap:handler(ChannelHandler), IdleStateEvent:<init>(IdleState-boolean), DefaultChannelConfig:getRecvByteBufAllocator(), PooledByteBufAllocator$PoolThreadLocalCache:get(), HttpObjectAggregator$1:<init>(HttpObjectAggregator-ChannelHandlerContext), DefaultChannelHandlerInvoker$4:run(), DefaultBinaryHeaders:setChar(Object-char), MqttPublishMessage:release(), UnpooledHeapByteBuf:writerIndex(), CompositeByteBuf:ensureAccessible(), ForkJoinTask:invoke(), AbstractOioMessageChannel:read(), HttpPostRequestDecoder$MultiPartStatus:values(), PooledDirectByteBuf:_getByte(int), ReplayingDecoderBuffer:reject(), ConcurrentHashMapV8$KeySpliterator:advance(), WebSocketFrame:touch(Object), ForkJoinTask:completeExceptionally(Throwable), Socks4ClientDecoder:<init>(), DefaultFullHttpRequest:setProtocolVersion(HttpVersion), CompositeByteBuf:copy(int-int), SslProvider:valueOf(String), PendingWriteQueue:removeAndWriteAll(), IdleStateHandler:access$002(IdleStateHandler-boolean), PendingWriteQueue$PendingWrite:<init>(Recycler$Handle), OioSocketChannel:<init>(Socket), PendingWriteQueue:remove(), EmptyHttpHeaders:addObject(Object-Object[]), AbstractEpollServerChannel:eventLoop(), JdkNpnSslEngine:getWrappedEngine(), FullHttpMessage:headers(), HttpContentEncoder$Result:<init>(String-EmbeddedChannel), InternalLogger:debug(String-Object-Object), Http2Flags:paddingPresent(), ConcurrentHashMapV8$ReduceEntriesTask:invoke(), SpdySession:updateAllSendWindowSizes(int), ReplayingDecoderBuffer:writeBytes(ByteBuf), UnpooledHeapByteBuf:alloc(), EmptyByteBuf:getBytes(int-byte[]-int-int), DefaultLastMemcacheContent:touch(), EmptyConvertibleHeaders:addInt(Object-int), Http2Exception:<init>(Http2Error-String), Native:writevAddresses(int-long-int), DefaultOioServerSocketChannelConfig:autoReadCleared(), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode), OpenSslEngine:unwrap(ByteBuffer-ByteBuffer[]-int-int), DefaultHttp2LocalFlowController$FlowState:writeWindowUpdateIfNeeded(ChannelHandlerContext), EpollDomainSocketChannel$EpollDomainUnsafe:<init>(EpollDomainSocketChannel-EpollDomainSocketChannel$1), DefaultAttributeMap$DefaultAttribute:access$100(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap:hasAttr(AttributeKey), DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf[]), HttpToHttp2ConnectionHandler:<init>(Http2Connection-Http2FrameListener), HttpContentEncoder$State:ordinal(), OioSocketChannel:localAddress(), HashedWheelTimer$HashedWheelBucket:expireTimeouts(long), UnsafeDirectSwappedByteBuf:order(), Socks4ServerDecoder:setSingleDecode(boolean), Marshaller:start(ByteOutput), DnsServerAddresses:sanitize(Iterable), HttpObjectAggregator$AggregatedFullHttpResponse:headers(), AdvancedLeakAwareByteBuf:nioBufferCount(), SucceededFuture:<init>(EventExecutor-Object), HttpObjectAggregator:isStartMessage(Object), AbstractByteBuf:copy(), DefaultHttp2FrameReader$3:headersBlockBuilder(), CorsConfig$Builder:access$400(CorsConfig$Builder), WebSocket08FrameDecoder$State[]:clone(), ChunkedWriteHandler$3:operationComplete(Future), ThreadLocalRandom:<init>(), UnsafeDirectSwappedByteBuf:setShort(int-int), DefaultHttp2Connection$DefaultStream:closeLocalSide(), AbstractNioByteChannel$1:<init>(AbstractNioByteChannel), HttpObjectDecoder:reset(), CountedCompleter:recordExceptionalCompletion(Throwable), AbstractEventExecutor:shutdown(), AsciiString:toLowerCase(char), AbstractBinaryMemcacheMessage:<init>(String-ByteBuf), DefaultTextHeaders$DefaultTextValueTypeConverter:convertObject(Object), SctpNotificationHandler:<init>(SctpChannel), CompositeByteBuf:_setLong(int-long), AsciiString:startsWith(CharSequence-int), Socks5CommandResponseDecoder:state(), Http2Stream:closeRemoteSide(), CompatibleMarshallingDecoder:exceptionCaught(ChannelHandlerContext-Throwable), ByteBufInputStream:<init>(ByteBuf-int), Native:epollCtlMod(int-int-int), ForkJoinWorkerThread:setUncaughtExceptionHandler(Thread$UncaughtExceptionHandler), HttpHeaders:set(TextHeaders), ForkJoinTask:setExceptionalCompletion(Throwable), EmptyHttpHeaders:setInt(Object-int), JdkSslEngine:setEnableSessionCreation(boolean), OpenSslSessionStats:connectRenegotiate(), Http2NoMoreStreamIdsException:<init>(Throwable), DnsNameResolverContext:<clinit>(), UnpooledHeapByteBuf:nioBuffer(int-int), PrimitiveCollections$EmptyIntObjectMap:<init>(PrimitiveCollections$1), NameResolver:isSupported(SocketAddress), Recycler:access$500(), DnsQueryEncoder:encode(ChannelHandlerContext-DnsQuery-List), HttpContentEncoder:decode(ChannelHandlerContext-HttpRequest-List), DefaultFullHttpResponse:headers(), WebSocket07FrameEncoder:<init>(boolean), DefaultSpdyStreamFrame:setLast(boolean), HttpPostBodyUtil$TransferEncodingMechanism:name(), PoolArena$HeapArena:newChunk(int-int-int-int), ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask), SpdySessionHandler:access$000(SpdySessionHandler-ChannelHandlerContext-SpdySessionStatus), CookieEncoderUtil:stringBuilder(), EmptyTextHeaders:addShort(CharSequence-short), ConcurrentHashMapV8$CollectionView:containsAll(Collection), SSLContext:setSessionCacheMode(long-long), Native:errnoEAGAIN(), ReadOnlyIterator:remove(), ByteBufUtil:firstIndexOf(ByteBuf-int-int-byte), CompositeByteBuf:capacity(int), SctpMessage:touch(), ByteBufInputStream:readBoolean(), EmptyHeaders:iterator(), UnpooledDirectByteBuf:freeDirect(ByteBuffer), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), DefaultThreadFactory:<clinit>(), SpdyHeadersFrame:isInvalid(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8:equals(Object), NioUdtByteConnectorChannel$1:<clinit>(), SpdyHeaderBlockZlibDecoder:decodeHeaderBlock(ByteBuf-SpdyHeadersFrame), ReplayingDecoderBuffer:forEachByteDesc(ByteBufProcessor), EmptyHeaders:setInt(Object-int), Logger:warn(String-Object-Object), EmptyByteBuf:getShort(int), DefaultHttpHeaders:addObject(Object-Object), ByteBufUtil:access$100(), DefaultSpdySynStreamFrame:setStreamId(int), DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-InetSocketAddress), DefaultChannelPipeline:remove(ChannelHandler), AbstractBinaryMemcacheEncoder:encodeMessage(ChannelHandlerContext-MemcacheMessage), ByteBuf:readChar(), Future:syncUninterruptibly(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Http2Settings:maxHeaderListSize(int), DefaultFileRegion:retain(), AbstractChannel:isCompatible(EventLoop), DefaultRxtxChannelConfig:validate(ChannelOption-Object), AdvancedLeakAwareByteBuf:writeBytes(ByteBuf), DefaultFullHttpRequest:toString(), PooledDirectByteBuf:readBytes(ByteBuffer), ConcurrentHashMapV8$KeyIterator:advance(), JdkSslServerContext:<init>(File-File-String), CompositeByteBuf:iterator(), WebSocketFrameAggregator:contentLength(WebSocketFrame), ByteBuf:touch(Object), InternalThreadLocalMap:typeParameterMatcherFindCache(), ConcurrentHashMapV8$MapReduceEntriesTask:invoke(), Lz4FrameDecoder:<init>(), PlatformDependent:bitMode0(), Native:socketStream(), ForkJoinTask:expungeStaleExceptions(), ReplayingDecoderBuffer:setBytes(int-ByteBuf), UnsafeDirectSwappedByteBuf:addr(int), EventLoop:shutdownGracefully(long-long-TimeUnit), MessageInfo:payloadProtocolID(), CompositeByteBuf:checkSrcIndex(int-int-int-int), DefaultConvertibleHeaders:addTimeMillis(Object-long), DuplicatedByteBuf:_setByte(int-int), DefaultHttp2LocalFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int), DnsNameResolver:query(Iterable-DnsQuestion), ThreadLocalInsecureRandom:nextInt(), WrappedByteBuf:hashCode(), HttpProxyHandler:destinationAddress(), DefaultConvertibleHeaders:getAll(Object), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int), SecretKeyFactory:generateSecret(KeySpec), CertificateSubjectName:<init>(X500Name), ConcurrentHashMapV8$ValueSpliterator:trySplit(), XmlFrameDecoder:isCDATABlockStart(ByteBuf-int), ObjectDecoderInputStream:close(), MqttPublishVariableHeader:toString(), NioUdtByteRendezvousChannel:<init>(), ChannelPipeline:fireChannelReadComplete(), InterfaceHttpPostRequestDecoder:hasNext(), ChannelOutboundBuffer$Entry:<init>(Recycler$Handle), PoolArena:memoryCopy(Object-int-Object-int-int), PooledHeapByteBuf:_getByte(int), NioSctpChannel:bindAddress(InetAddress-ChannelPromise), ByteToMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List), EmptyConvertibleHeaders:add(Object-Object), IllegalReferenceCountException:<init>(String), PromiseTask:toCallable(Runnable-Object), Socks5AddressDecoder$1:decodeAddress(Socks5AddressType-ByteBuf), ChannelOutboundBuffer:setWritable(boolean), DefaultSocks5CommandRequest:decoderResult(), StompSubframeDecoder:skipNullCharacter(ByteBuf), SimpleNameResolver:doIsResolved(SocketAddress), SctpServerChannel:configureBlocking(boolean), HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit), AbstractNotificationHandler:<init>(), NioServerSocketChannel$NioServerSocketChannelConfig:<init>(NioServerSocketChannel-NioServerSocketChannel-ServerSocket-NioServerSocketChannel$1), AsciiString:array(), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), Snappy:bitsToEncode(int), DefaultDatagramChannelConfig:isLoopbackModeDisabled(), NioSctpServerChannel:bindAddress(InetAddress), ReplayingDecoder:internalBuffer(), MpscLinkedQueue$1:next(), DefaultHttp2ConnectionEncoder:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise), ChannelHandlerContext:isRemoved(), NioDatagramChannelConfig:getTimeToLive(), ServerBootstrap:group(EventLoopGroup-EventLoopGroup), UnpooledUnsafeDirectByteBuf:readerIndex(), AbstractByteBuf:duplicate(), ByteBuf:resetReaderIndex(), Socks5ClientEncoder:<init>(Socks5AddressEncoder), HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int), ChannelMatchers$CompositeMatcher:<init>(ChannelMatcher[]), Logger:info(String), ProxyHandler:setConnectFailure(Throwable), DiskAttribute:compareTo(Object), DefaultSpdyDataFrame:<init>(int-ByteBuf), SSLEngine:setEnableSessionCreation(boolean), ScheduledFutureTask:<init>(EventExecutor-Callable-long), MixedFileUpload:getContentType(), DefaultCookie:setPorts(int[]), ByteBufInputStream:read(), ReplayingDecoderBuffer:getChar(int), ReferenceMap:putAll(Map), DecoderException:<init>(Throwable), DeflateFrameClientExtensionHandshaker$DeflateFrameClientExtension:<init>(int), EpollSocketChannel$2:<init>(EpollSocketChannel-ChannelPromise), PooledHeapByteBuf:ensureAccessible(), EmptyByteBuf:getBytes(int-OutputStream-int), EmptyTextHeaders:setBoolean(Object-boolean), EmbeddedChannelId:asShortText(), IntObjectHashMap:remove(int), DnsQueryContext$3:run(), MixedFileUpload:checkSize(long), AbstractByteBuf:isWritable(), Socks4ClientDecoder:decode(ChannelHandlerContext-ByteBuf-List), DefaultHttp2Connection$DefaultStream:close(), SpdyFrameDecoderDelegate:readWindowUpdateFrame(int-int), MemoryAttribute:setContent(ByteBuf), AppendableCharSequence:append(CharSequence), DefaultCookie:<init>(String-String), SnappyFrameDecoder:<init>(), Bzip2HuffmanAllocator:findNodesToRelocate(int[]-int), AbstractChannelHandlerContext:channel(), SctpMessage:<init>(int-int-ByteBuf), SpdySettingsFrame:removeValue(int), HttpContent:retain(), FileRegion:transfered(), DefaultChannelPipeline$4:run(), DuplicatedByteBuf:_setInt(int-int), StompSubframeAggregator:beginAggregation(Object-ByteBuf), SslContext:newClientContext(File), SpdySynStreamFrame:isInvalid(), DefaultUdtChannelConfig:setAutoRead(boolean), DefaultStompHeaders:set(Object-Iterable), WebSocketClientHandshaker07:newWebSocketEncoder(), Http2NoMoreStreamIdsException:<init>(), MqttDecoder:decodeConnectionVariableHeader(ByteBuf), Future:get(), HttpPostRequestEncoder$WrappedHttpRequest:setDecoderResult(DecoderResult), AbstractInternalLogger:isTraceEnabled(), ConcurrentHashMapV8$SearchMappingsTask:addToPendingCount(int), DefaultSpdyHeaders:setChar(Object-char), DefaultHttp2RemoteFlowController$FlowState:newFrame(Http2RemoteFlowController$FlowControlled), ForkJoinPool:managedBlock(ForkJoinPool$ManagedBlocker), Unsafe:compareAndSwapInt(Object-long-int-int), FixedCompositeByteBuf:setLong(int-long), AsciiHeadersEncoder:<init>(ByteBuf-AsciiHeadersEncoder$SeparatorType-AsciiHeadersEncoder$NewlineType), DefaultConvertibleHeaders:setFloat(Object-float), UnsafeDirectSwappedByteBuf:writeChar(int), BouncyCastleSelfSignedCertGenerator:generate(String-KeyPair-SecureRandom), ReplayingDecoderBuffer:release(), NioEventLoop:processSelectedKey(SelectionKey-NioTask), DnsQuery:retain(), IovArrayThreadLocal:get(CompositeByteBuf), ResourceLeakDetector$Level:name(), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), PooledDirectByteBuf:_setLong(int-long), EmptyConvertibleHeaders:addDouble(Object-double), ServerBootstrap:childOption(ChannelOption-Object), AppendableCharSequence:<init>(int), TextWebSocketFrame:content(), LzfEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), ReadOnlyByteBufferBuf:capacity(int), ReplayingDecoderBuffer:duplicate(), SpdySynStreamFrame:headers(), Http2ConnectionEncoder:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise), AbstractChannel:bind(SocketAddress-ChannelPromise), DefaultLastStompContentSubframe:retain(int), EmptyTextHeaders:setByte(Object-byte), Bootstrap:handler(ChannelHandler), UnpooledHeapByteBuf:setBytes(int-byte[]-int-int), AbstractOioChannel$DefaultOioUnsafe:annotateConnectException(Throwable-SocketAddress), DefaultTextHeaders$SingleHeaderValuesComposer:add(CharSequence-CharSequence[]), BinaryMemcacheMessage:setExtras(ByteBuf), DefaultSpdyHeadersFrame:isLast(), HttpServerCodec:handlerAt(int), DnsServerAddresses$1:<init>(InetSocketAddress[]), EmbeddedChannelId:asLongText(), AbstractByteBufAllocator:heapBuffer(int), DefaultHttp2FrameReader:readPushPromiseFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), AbstractInternalLogger:isInfoEnabled(), EventExecutor:newProgressivePromise(), Bzip2Encoder:finishEncode(ChannelHandlerContext-ChannelPromise), ForkJoinPool:nextTaskFor(ForkJoinPool$WorkQueue), ObjectDecoderInputStream:available(), GenericProgressiveFutureListener:operationProgressed(ProgressiveFuture-long-long), DefaultStompHeaders:setLong(CharSequence-long), HttpRequestDecoder:<init>(), HttpContent:touch(Object), WebSocketClientHandshaker:handshake(Channel), ChannelHandlerAdapter:write(ChannelHandlerContext-Object-ChannelPromise), StringUtil:toHexString(byte[]), DefaultSocketChannelConfig:setSoLinger(int), Socks5InitialResponseDecoder$State:values(), DefaultSctpServerChannelConfig:getReceiveBufferSize(), NioUdtMessageConnectorChannel:remoteAddress(), InternetProtocolFamily:<init>(String-int), PendingWriteQueue:size(), DefaultHttp2Connection$DefaultStream:setPriority(int-short-boolean), DefaultHttp2HeadersEncoder:access$100(DefaultHttp2HeadersEncoder-AsciiString-AsciiString-OutputStream), CachingClassResolver:<init>(ClassResolver-Map), HttpUtil:parseStatus(AsciiString), SSLEngine:getHandshakeSession(), CountedCompleter:<clinit>(), DefaultBinaryHeaders:addTimeMillis(AsciiString-long), DefaultStompContentSubframe:release(), OpenSslEngine$1:getPeerPrincipal(), DefaultHttp2Headers:set(AsciiString-AsciiString), DefaultChannelPromise:<init>(Channel-EventExecutor), EpollServerChannelConfig:isReuseAddress(), AdvancedLeakAwareByteBuf:setBytes(int-ByteBuf-int-int), Http2Settings:get(int), CommonsLogger:info(String), OpenSslX509Certificate:getBasicConstraints(), DefaultChannelPromise:setSuccess(Void), ForkJoinTask:clearExceptionalCompletion(), IntObjectMap$Entry:value(), VoidChannelPromise:fail(), PooledDirectByteBuf:_setByte(int-int), DnsEntry:dnsClass(), CommPortIdentifier:open(String-int), MessageFormatter:intArrayAppend(StringBuffer-int[]), Headers$ValueConverter:convertToTimeMillis(Object), EmptyHeaders:add(Object-Iterable), DefaultChannelPipeline:callHandlerRemoved0(AbstractChannelHandlerContext), MqttMessageType:values(), DnsNameResolver$2:operationComplete(Future), ReadOnlyByteBufferBuf:checkDstIndex(int-int-int-int), Lz4FrameEncoder$2:operationComplete(Future), DefaultSpdyHeaders:set(CharSequence-CharSequence), DnsNameResolverContext:finishResolveWithIPv6(), AbstractScheduledEventExecutor:hasScheduledTasks(), WebSocketFrame:retain(), NioUdtAcceptorChannel:doClose(), Native:bind(int-SocketAddress), DefaultHttp2RemoteFlowController:streamableBytesForTree(Http2Stream), DnsHeader:type(), FastLz:decompress(byte[]-int-int-byte[]-int-int), AbstractByteBuf:_getShort(int), ConcurrentHashMapV8$MapReduceEntriesToIntTask:advance(), DefaultHttp2FrameReader:maxFrameSize(int), NioDatagramChannelConfig:setAutoRead(boolean), DefaultEventExecutor:updateLastExecutionTime(), ConcurrentHashMapV8$ObjectByObjectToInt:apply(Object-Object), ForkJoinTask:exec(), IovArray:add(ByteBuf), DefaultRxtxChannelConfig:setWaitTimeMillis(int), ByteBufUtil:swapMedium(int), SctpServerChannel:close(), EpollSocketChannelConfig:isKeepAlive(), AbstractByteBuf:_setByte(int-int), DefaultHttp2FrameWriter:verifyWeight(short), SpdySessionHandler$2:operationComplete(ChannelFuture), ReplayingDecoderBuffer:writeBytes(ByteBuf-int), HttpServerUpgradeHandler:decode(ChannelHandlerContext-Object-List), AbstractByteBufAllocator:compositeDirectBuffer(), Unpooled:copyDouble(double[]), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToLong(CharSequence), Native:setTcpNoDelay(int-int), EncoderException:<init>(String), MpscLinkedQueue:readObject(ObjectInputStream), ZlibUtil:inflaterException(Inflater-String-int), PlatformDependent0:freeMemory(long), ServerBootstrap:<init>(), HttpObjectAggregator:aggregate(ByteBufHolder-ByteBufHolder), AdvancedLeakAwareByteBuf:forEachByteDesc(ByteBufProcessor), NioSctpChannel:isActive(), HAProxyMessage:decodeHeader(String), SSLEngineResult$HandshakeStatus:ordinal(), MqttEncoder:encodeStringUtf8(String), DefaultStompContentSubframe:touch(Object), BinaryWebSocketFrame:touch(Object), GlobalChannelTrafficShapingHandler:setReadChannelLimit(long), AbstractEpollStreamChannel:doClose(), ChannelHandlerAdapter:isSharable(), AdvancedLeakAwareByteBuf:writeBytes(ScatteringByteChannel-int), AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise), NioDatagramChannel:localAddress0(), FullBinaryMemcacheRequest:setCas(long), WrappedByteBuf:getUnsignedShort(int), CtClass:getDeclaredMethod(String), PoolArena$DirectArena:<init>(PooledByteBufAllocator-int-int-int-int), SpdySession$StreamState:clearPendingWrites(Throwable), Base64:encode(ByteBuf-int-int-Base64Dialect), GlobalEventExecutor:execute(Runnable), HAProxyProtocolException:<init>(), DefaultHttpContent:release(int), AbstractOioMessageChannel:isActive(), DefaultStompContentSubframe:refCnt(), PooledDirectByteBuf:alloc(), Http2Flags:<init>(short), Unpooled:wrappedBuffer(int-ByteBuffer[]), EmptyHttpHeaders:addDouble(Object-double), HttpPostMultipartRequestDecoder:cleanFiles(), CompleteChannelFuture:removeListeners(GenericFutureListener[]), DefaultFullHttpResponse:copy(), SslContext:newClientContext(SslProvider-File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), StompContentSubframe:setDecoderResult(DecoderResult), CommonsLogger:error(String-Object-Object), AbstractChannel:newProgressivePromise(), Http2InboundFrameLogger$1:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), HttpContentEncoder$State:<init>(String-int), OioDatagramChannel:block(InetAddress-InetAddress), NioSocketChannel:<init>(SocketChannel), MqttMessage:toString(), AdvancedLeakAwareByteBuf:internalNioBuffer(int-int), AbstractChannel$AbstractUnsafe:invoker(), NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise), DefaultChannelPipeline$HeadContext:channelRegistered(ChannelHandlerContext), DefaultUdtServerChannelConfig:setSystemSendBufferSize(int), EmptyTextHeaders:add(Object-Object), DiskFileUpload:setContentTransferEncoding(String), ForkJoinPool:awaitTermination(long-TimeUnit), DefaultServerSocketChannelConfig:setReceiveBufferSize(int), EmptyHttp2Headers:setShort(AsciiString-short), ReplayingDecoderBuffer:setBytes(int-ByteBuf-int-int), ProtobufDecoder:<init>(MessageLite-ExtensionRegistry), CommonsLogger:debug(String-Object-Object), WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean-boolean), SwappedByteBuf:getUnsignedShort(int), ResourceLeak:record(), SSLEngine:setEnabledProtocols(String[]), ByteBuf:hasArray(), HttpObjectAggregator$AggregatedFullHttpRequest:touch(Object), ConcurrentHashMapV8$ForEachMappingTask:fork(), DnsNameResolver:access$200(), SpdyFrameDecoderDelegate:readSynReplyFrame(int-boolean), DefaultHttpContent:retain(), BinaryWebSocketFrame:isFinalFragment(), WebSocketClientHandshaker08:newWebsocketDecoder(), StompSubframeEncoder:encodeFrame(StompHeadersSubframe-ChannelHandlerContext), ChannelHandlerAppender:add(ChannelHandler[]), Socks5CommandStatus:<init>(int), Socks4ClientDecoder:checkpoint(Object), ReferenceCountUtil:touch(Object-Object), DefaultFullHttpRequest:setMethod(HttpMethod), ByteBufProcessor$1:<init>(), PooledDirectByteBuf:newInternalNioBuffer(ByteBuffer), SpdyOrHttpChooser:addSpdyHandlers(ChannelHandlerContext-SpdyVersion), DefaultStompHeaders:setObject(Object-Iterable), ReflectiveChannelFactory:<init>(Class), EpollDatagramChannelConfig:setReuseAddress(boolean), NioServerSocketChannel:javaChannel(), IntObjectHashMap:put(int-Object), AbstractByteBuf:resetReaderIndex(), Native:tcpInfo(int-EpollTcpInfo), ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask), SwappedByteBuf:getDouble(int), UnsupportedMessageTypeException:<init>(String-Throwable), AbstractChannelHandlerContext:fireChannelUnregistered(), OioByteStreamChannel:remoteAddress(), HttpPostRequestDecoder:splitHeaderContentType(String), JdkSslEngine:beginHandshake(), AdvancedLeakAwareByteBuf:readUnsignedByte(), DefaultHttp2ConnectionEncoder$FlowControlledBase:operationComplete(Future), DefaultHttpResponse:hashCode(), MemoryAttribute:setMaxSize(long), ChunkedInput:progress(), Http2OutboundFrameLogger:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), SpdyFrameDecoder:isValidFrameHeader(int-int-byte-int), ObjectDecoderInputStream:readDouble(), HttpPostRequestEncoder:cleanFiles(), Socks5AuthMethod:toString(), DiskAttribute:compareTo(InterfaceHttpData), AbstractInternalLogger:toString(), HttpHeaders:setInt(CharSequence-int), Socks5CommandStatus:<clinit>(), DefaultAttributeMap$DefaultAttribute:<init>(AttributeKey), ByteBuf:readableBytes(), MqttConnectVariableHeader:<init>(String-int-boolean-boolean-boolean-int-boolean-boolean-int), JsonObjectDecoder:extractObject(ChannelHandlerContext-ByteBuf-int-int), ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean), Socks5CommandStatus:byteValue(), IntObjectHashMap$IteratorImpl:<init>(IntObjectHashMap-IntObjectHashMap$1), SlicedByteBuf:readerIndex(), DefaultHeaders$1:visit(Map$Entry), DefaultHttp2Headers:add(Object-Iterable), ConcurrentHashMapV8$SearchEntriesTask:quietlyCompleteRoot(), DefaultHttpRequest:equals(Object), InternalAttribute:compareTo(Object), DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-InetSocketAddress), ReplayingDecoderBuffer:readBytes(byte[]), MultithreadEventExecutorGroup:access$300(MultithreadEventExecutorGroup), MessageToByteEncoder:allocateBuffer(ChannelHandlerContext-Object-boolean), SimpleNameResolver:resolve(String-int), DefaultHttp2FrameReader$HeadersBlockBuilder:<init>(DefaultHttp2FrameReader), ChannelHandlerAdapter:<init>(), OpenSslSessionStats:hits(), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String), ConcurrentHashMapV8$ForEachKeyTask:fork(), Bzip2BitReader:hasReadableBits(int), AsciiString:regionMatches(boolean-int-CharSequence-int-int), UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int), OioSctpChannel:doConnect(SocketAddress-SocketAddress), IpSubnetFilterRule$Ip4SubnetFilterRule:prefixToSubnetMask(int), Cookie:domain(), ByteBuf:order(), OioByteStreamChannel:doWriteFileRegion(FileRegion), AbstractEpollChannel:fd(), CommonsLogger:warn(String-Object), NioServerSocketChannel:doFinishConnect(), Socks5InitialRequestDecoder$State:valueOf(String), MixedAttribute:getName(), Utf8FrameValidator:checkUTF8String(ChannelHandlerContext-ByteBuf), ForkJoinTask$AdaptedCallable:run(), HttpContent:setDecoderResult(DecoderResult), SpdySessionHandler:channelInactive(ChannelHandlerContext), DnsClass:valueOf(int), Native:close0(int), ByteToMessageDecoder:isSingleDecode(), AbstractByteBuf:forEachByteDesc(int-int-ByteBufProcessor), PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int), OpenSslX509Certificate:toString(), BinaryMemcacheRequest:opcode(), NioDatagramChannelConfig:isLoopbackModeDisabled(), DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress), SwappedByteBuf:setLong(int-long), DefaultProgressivePromise:tryProgress(long-long), AbstractByteBufAllocator:compositeBuffer(int), ReplayingDecoderBuffer:readUnsignedInt(), DecoderResult:toString(), ChannelOutboundBuffer:size(), ZlibUtil:wrapperOverhead(ZlibWrapper), DefaultHttp2FrameWriter:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise), SslHandler:unwrapNonAppData(ChannelHandlerContext), ConcurrentHashMapV8$BiFun:apply(Object-Object), EmbeddedChannelId:hashCode(), SslHandler$1:<init>(SslHandler-ChannelHandlerContext-ChannelPromise), HttpRequestEncoder:encode(ChannelHandlerContext-Object-List), AbstractOioChannel:doBeginRead(), Lz4FrameEncoder:compressionLevel(int), DefaultHttp2FrameWriter:verifyWindowSizeIncrement(int), ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int), SslContext:newServerContext(File-File), Bzip2BitWriter:flush(ByteBuf), ResourceLeakDetector$DefaultResourceLeak:record(Object), ChannelHandlerAdapter:channelReadComplete(ChannelHandlerContext), ForkJoinTask$RunnableExecuteAction:getRawResult(), EpollChannelConfig:getConnectTimeoutMillis(), PlatformDependent:getShort(long), PendingWriteQueue$PendingWrite:access$002(PendingWriteQueue$PendingWrite-PendingWriteQueue$PendingWrite), AsciiString:toByteArray(int-int), ProxyHandler:addPendingWrite(ChannelHandlerContext-Object-ChannelPromise), PlatformDependent:tmpdir0(), AdvancedLeakAwareByteBuf:readChar(), Bootstrap:handler(), DefaultTextHeaders$SingleHeaderValuesComposer$2:escape(CharSequence), EpollSocketChannel$1:run(), ServerBootstrap$1:<init>(ServerBootstrap-EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), DefaultBinaryMemcacheResponse:touch(Object), AbstractMemcacheObjectAggregator:hasContentLength(MemcacheMessage), AbstractMemcacheObject:setDecoderResult(DecoderResult), DefaultChannelGroup:deregister(ChannelMatcher), InboundHttp2ToHttpAdapter:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean), Http2OrHttpChooser:createHttp1RequestHandler(), CipherSuiteConverter:toJava(String-String), DefaultTextHeaders$3:<init>(), HttpHeaders:addObject(CharSequence-Object), AbstractScheduledEventExecutor$RunnableToCallableAdapter:call(), ConcurrentHashMapV8$MapEntry:toString(), Http2StreamRemovalPolicy$Action:removeStream(Http2Stream), PooledUnsafeDirectByteBuf:_getByte(int), HttpObjectDecoder$LineParser:newException(int), ChannelOutboundBuffer:safeSuccess(ChannelPromise), InternalLogLevel:values(), ByteBufOutputStream:writeChar(int), Http2Stream$State:ordinal(), EventLoop:register(Channel), EpollSocketChannelConfig:setOption(ChannelOption-Object), OioSctpChannel:localAddress(), OioSocketChannel:isOutputShutdown(), DefaultHttp2Headers:setFloat(Object-float), Unsafe:putShort(long-short), LzmaFrameEncoder:maxOutputBufferLength(int), CipherSuiteConverter:toOpenSsl(Iterable), EmbeddedEventLoop:invokeRead(ChannelHandlerContext), RecyclableArrayList:<init>(Recycler$Handle-int), DnsResponseDecoder:decodeQuestion(ByteBuf), Http2Connection:activeStreams(), XXHashFactory:newStreamingHash32(int), ByteArrayDecoder:decode(ChannelHandlerContext-Object-List), EmptyTextHeaders:add(Object-Object[]), EpollDatagramChannel$EpollDatagramChannelUnsafe:clearEpollIn0(), MessageLite:getDefaultInstanceForType(), SctpMessageCompletionHandler:decode(ChannelHandlerContext-Object-List), Socks5InitialResponseDecoder:<init>(), AbstractScheduledEventExecutor$1:run(), DefaultChannelPipeline:addBefore(ChannelHandlerInvoker-String-String-ChannelHandler), EmptyHttpHeaders:setObject(CharSequence-Object), AsciiHeadersEncoder:writeCharSequence(ByteBuf-int-CharSequence-int), LoggingHandler:format(ChannelHandlerContext-String-Object), EpollDatagramChannelConfig:isBroadcast(), Snappy$State:<clinit>(), EmptyConvertibleHeaders:addBoolean(Object-boolean), HttpPostMultipartRequestDecoder:setMultipart(String), PlatformDependent:putInt(long-int), AbstractEpollStreamChannel:doConnect(SocketAddress-SocketAddress), DefaultHttp2FrameReader:verifyPayloadLength(int), DefaultHttp2RemoteFlowController$2:streamAdded(Http2Stream), DefaultRxtxChannelConfig:isDtr(), FixedCompositeByteBuf:findComponent(int), PooledHeapByteBuf:<init>(Recycler$Handle-int), MqttConnectMessage:variableHeader(), MqttConnAckVariableHeader:connectReturnCode(), VoidChannelPromise:setSuccess(Object), EpollServerSocketChannelConfig:setConnectTimeoutMillis(int), ByteBuf:discardReadBytes(), RxtxChannel:doDisconnect(), DefaultStompHeaders:set(Object-Object), ChannelOutboundBuffer:remove(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), WebSocketServerHandshaker:<clinit>(), DefaultHeaders:getBoolean(Object-boolean), Unpooled:unmodifiableBuffer(ByteBuf), NioSocketChannel:doWrite(ChannelOutboundBuffer), EpollServerDomainSocketChannel:config(), FileUpload:getChunk(int), Lz4FrameDecoder$State:ordinal(), ThreadLocalRandom:access$100(), DiskAttribute:duplicate(), WrappedByteBuf:setLong(int-long), EmptyBinaryHeaders:addLong(AsciiString-long), SslContext:newServerContext(File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), InternalLogger:isErrorEnabled(), SpdyProtocolException:<init>(String-Throwable), DefaultChannelPipeline:addAfter(EventExecutorGroup-String-String-ChannelHandler), ReferenceMap:size(), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), MqttTopicSubscription:qualityOfService(), ByteBuf:writeShort(int), CompatibleMarshallingDecoder:<init>(UnmarshallerProvider-int), CompatibleObjectEncoder:<init>(), AsciiString:toString(int-int), Bzip2Encoder$2:operationComplete(ChannelFuture), ByteBuf:readBytes(ByteBuffer), ChannelOutboundBuffer:current(), DefaultBinaryHeaders:clear(), HttpPostBodyUtil:findNonWhitespace(String-int), CompositeByteBuf:isDirect(), DefaultHttp2Connection$DefaultProperyMap:put(Object-Object), DefaultSpdyHeaders:addBoolean(Object-boolean), Http2ConnectionHandler:onHttpClientUpgrade(), CompositeByteBuf:capacity(), SpdyFrameDecoder:getNextState(int-int), AbstractEpollStreamChannel$EpollStreamUnsafe:doFinishConnect(), NioUdtByteConnectorChannel:localAddress0(), HashedWheelTimer$HashedWheelTimeout$1:run(), Channel:deregister(), WebSocket13FrameDecoder:<init>(boolean-boolean-int), SimpleNameResolver:isSupported(SocketAddress), ConcurrentHashMapV8:reduceEntriesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), HttpStatusClass:<init>(String-int-int-int-String-HttpStatusClass$1), ReplayingDecoderBuffer:nioBuffer(), AbstractSocks4Message:<init>(), DefaultChannelPipeline:deregister(ChannelPromise), ConcurrentHashMapV8$SearchMappingsTask:propagateCompletion(), AsciiString:access$200(char), DefaultChannelGroupFuture:setFailure(Throwable), PrimitiveCollections$EmptyIntObjectMap:remove(int), MessageInfo:isComplete(), InternetProtocolFamily:values(), Bzip2Rand:<init>(), ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), PlatformDependent0:getShort(long), ChannelHandlerContext:flush(), NioUdtMessageConnectorChannel:remoteAddress0(), JdkSslClientContext:toNegotiator(ApplicationProtocolConfig-boolean), AbstractInternalLogger:trace(String-Object), X509CertImpl:sign(PrivateKey-String), DefaultHttp2Connection$DefaultEndpoint:allowPushTo(boolean), JdkLogger:<clinit>(), DefaultPromise:access$200(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), AbstractByteBuf:newSwappedByteBuf(), BinaryMemcacheObjectAggregator:toFullRequest(BinaryMemcacheRequest-ByteBuf), ProxyHandler$LazyChannelPromise:<init>(ProxyHandler), CompleteChannelFuture:await(), Recycler$WeakOrderQueue:<init>(Recycler$Stack-Thread), Cipher:getInstance(String), SelectedSelectionKeySet:iterator(), NioUdtMessageConnectorChannel:selectionKey(), DefaultTextHeaders:addFloat(CharSequence-float), EmptyHttp2Headers:get(Object), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), ResourceLeakDetector$DefaultResourceLeak:access$002(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak), HttpHeaders:get(Object), EpollServerChannelConfig:getReceiveBufferSize(), EmptyTextHeaders:add(CharSequence-CharSequence), NoopNameResolverGroup:<init>(), FixedCompositeByteBuf:_setInt(int-int), CompositeByteBuf:setShort(int-int), SpdyHeaders:add(CharSequence-CharSequence), AbstractChannel:disconnect(), EventExecutor:submit(Callable), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<clinit>(), AsciiString:checkNull(Object), PoolChunk:subpageIdx(int), PooledDirectByteBuf:array(), ChannelOutboundBuffer$2:run(), SwappedByteBuf:ensureWritable(int-boolean), MemoryFileUpload:isCompleted(), WrappedByteBuf:nioBuffers(), AsciiString$4:compare(CharSequence-CharSequence), AbstractReferenceCounted:retain(), CodedOutputStream:computeRawVarint32Size(int), NoopNameResolver:<init>(EventExecutor), NioUdtMessageRendezvousChannel:<init>(), AbstractReferenceCountedByteBuf:resetReaderIndex(), EmptyBinaryHeaders:set(AsciiString-Iterable), MqttDecoder$Result:access$100(MqttDecoder$Result), CompositeByteBuf:setChar(int-int), CloseWebSocketFrame:<init>(boolean-int), ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), UnpooledDirectByteBuf:setBytes(int-InputStream-int), DefaultHttpHeaders:addByte(CharSequence-byte), Http2Stream:isRoot(), AbstractTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long), int[]:clone(), OpenSslX509Certificate:unwrap(), ProxyHandler:safeRemoveEncoder(), PooledUnsafeDirectByteBuf$1:newObject(Recycler$Handle), EpollDomainSocketChannel:eventLoop(), WrappedByteBuf:discardReadBytes(), ConcurrentHashMapV8$ForEachTransformedEntryTask:propagateCompletion(), PendingWriteQueue:removeAndWrite(), DefaultHttp2RemoteFlowController$FlowState:window(), Native:epollCtlAdd(int-int-int), Slf4JLogger:debug(String-Throwable), SwappedByteBuf:readMedium(), EpollDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress), AdvancedLeakAwareByteBuf:ensureWritable(int), JdkSslContext:buildKeyManagerFactory(File-String-File-String-KeyManagerFactory), RxtxChannel$RxtxUnsafe:<init>(RxtxChannel-RxtxChannel$1), ThreadDeathWatcher:<clinit>(), SpdyHeaderBlockDecoder:end(), DefaultHttp2Headers:addLong(AsciiString-long), HttpServerUpgradeHandler$UpgradeEvent:<init>(String-FullHttpRequest-HttpServerUpgradeHandler$1), ChunkedWriteHandler:<init>(int), OpenSslX509Certificate:getNotBefore(), FingerprintTrustManagerFactory:<init>(String[]), PlatformDependent0:getLong(long), PlatformDependent:putShort(long-short), DefaultStompFrame:duplicate(), NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT), SSLContext:sessionMisses(long), AbstractByteBuf:setByte(int-int), DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:<init>(DefaultHttp2HeadersDecoder), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), DeflateDecoder:decode(ChannelHandlerContext-Object-List), JsonObjectDecoder:<init>(int), SSL:setVerify(long-int-int), HashedWheelTimer:access$1000(HashedWheelTimer), PlatformDependent0$2:<init>(), Unsafe:addressSize(), DefaultMemcacheContent:refCnt(), Socks5CommandResponseDecoder$State:<init>(String-int), AbstractHttpData:<init>(String-Charset-long), ByteBuf:setBoolean(int-boolean), ReplayingDecoderBuffer:getUnsignedMedium(int), Attribute:retain(), Socks4CommandType:<init>(int-String), Http2CodecUtil$1:markForRemoval(Http2Stream), ChannelOutboundBuffer$Entry:recycle(), AbstractEventExecutor:schedule(Callable-long-TimeUnit), DnsResponse:<init>(int-InetSocketAddress), WrappedByteBuf:readBytes(byte[]-int-int), DefaultHttpDataFactory:createAttribute(HttpRequest-String), ConcurrentHashMapV8$ReduceKeysTask:fork(), DefaultHttp2Connection$DefaultStream:open(boolean), DatagramPacket:recipient(), Encoder:setLcLpPb(int-int-int), ChannelInitializer:<init>(), EpollServerDomainSocketChannel:newChildChannel(int-byte[]-int-int), PooledHeapByteBuf:_setMedium(int-int), ConcurrentSet:remove(Object), AbstractByteBuf:setBytes(int-ScatteringByteChannel-int), DefaultHttp2Headers:scheme(), Log4JLogger:isInfoEnabled(), AbstractNioChannel$AbstractNioUnsafe:fulfillConnectPromise(ChannelPromise-Throwable), AbstractEpollChannel:unsafe(), NameResolverGroup:close(), FullBinaryMemcacheResponse:setCas(long), LastStompContentSubframe$1:copy(), Http2FrameWriter$Configuration:frameSizePolicy(), HttpPostStandardRequestDecoder:parseBodyAttributes(), DefaultChannelConfig:getWriteSpinCount(), InternalLoggerFactory:setDefaultFactory(InternalLoggerFactory), AdvancedLeakAwareByteBuf:setZero(int-int), AbstractByteBuf:readDouble(), HttpObjectDecoder:skipControlCharacters(ByteBuf), DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator), ReadOnlyByteBuf:getBytes(int-byte[]-int-int), ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun), AbstractChannel:isWritable(), ChannelHandlerInvokerUtil:invokeDisconnectNow(ChannelHandlerContext-ChannelPromise), CompositeByteBuf:readBytes(ByteBuf), CompositeByteBuf:release(), DefaultTextHeaders$MultipleFieldsValueComposer:set(CharSequence-Iterable), EmptyHeaders:addObject(Object-Iterable), ReferenceMap:containsKey(Object), ConcurrentHashMapV8$ReduceValuesTask:firstComplete(), DefaultHttpDataFactory:cleanRequestHttpData(HttpRequest), SSLEngineResult:bytesProduced(), ImmediateEventExecutor$ImmediatePromise:<init>(EventExecutor), SSLEngine:unwrap(ByteBuffer-ByteBuffer), EpollServerSocketChannelConfig:getOptions(), AbstractNioChannel:alloc(), DefaultSpdySynStreamFrame:appendHeaders(StringBuilder), Native:socketStreamFd(), SnappyFrameDecoder$ChunkType:<init>(String-int), Http2ConnectionEncoder$Builder:lifecycleManager(Http2LifecycleManager), SingleThreadEventExecutor:next(), DomainNameMapping:map(Object), DefaultChannelPipeline:access$100(DefaultChannelPipeline-AbstractChannelHandlerContext), ConcurrentHashMapV8:entrySet(), NioEventLoop:<init>(NioEventLoopGroup-Executor-SelectorProvider), ReplayingDecoderBuffer:writeZero(int), DefaultHeaders$KeyValueHeaderIterator:<init>(DefaultHeaders), LocalChannelRegistry:<clinit>(), UnpooledDirectByteBuf:setByte(int-int), SupportedCipherSuiteFilter:filterCipherSuites(Iterable-List-Set), LineBasedFrameDecoder:<init>(int), EmptyTextHeaders:addLong(Object-long), DefaultHttp2LocalFlowController$FlowState:endOfStream(boolean), ConcurrentHashMapV8$ForEachKeyTask:addToPendingCount(int), Http2Connection$Listener:onWeightChanged(Http2Stream-short), DnsServerAddresses:sequential0(InetSocketAddress[]), ThreadDeathWatcher:unwatch(Thread-Runnable), DefaultTextHeaders$SingleHeaderValuesComposer:addObject(CharSequence-Iterable), ConcurrentHashMapV8$ValuesView:forEach(ConcurrentHashMapV8$Action), DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int), ByteInput:read(byte[]-int-int), MemoryAttribute:getValue(), QueryStringDecoder:decodeComponent(String-Charset), DnsQueryContext$1:<init>(DnsQueryContext-DnsQuery-InetSocketAddress), AbstractByteBuf:setLong(int-long), ByteBuf:readUnsignedShort(), SctpMessage:copy(), AbstractInternalLogger:readResolve(), EmbeddedChannel:localAddress0(), DefaultBinaryMemcacheResponse:<init>(ByteBuf), HttpUtil:<init>(), DefaultTextHeaders$ValuesComposer:set(CharSequence-CharSequence[]), DefaultChannelHandlerInvoker$1:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), BinaryMemcacheResponse:opcode(), SpdySession$StreamState:updateReceiveWindowSize(int), DefaultChannelGroup:write(Object), AbstractChannelHandlerContext:connect(SocketAddress), EmbeddedChannel$DefaultUnsafe:safeSetSuccess(ChannelPromise), JdkAlpnSslEngine$2:<init>(JdkAlpnSslEngine-JdkApplicationProtocolNegotiator-JdkApplicationProtocolNegotiator$ProtocolSelectionListener), SpdyHeaderBlockZlibDecoder:<init>(SpdyVersion-int), WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders), HttpObjectAggregator$AggregatedFullHttpResponse:retain(int), HttpContentDecompressor:<init>(), CloseWebSocketFrame:statusCode(), Socks4CommandRequest:dstPort(), NioSctpServerChannel:localAddress(), DefaultHttp2RemoteFlowController$FlowState$Frame:writeError(Http2Exception), TextWebSocketFrame:fromText(String), SlicedByteBuf:_setMedium(int-int), PoolThreadCache:allocateTiny(PoolArena-PooledByteBuf-int-int), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), HttpClientUpgradeHandler:setUpgradeRequestHeaders(ChannelHandlerContext-HttpRequest), ChannelFlushPromiseNotifier:<init>(), AbstractNioChannel$AbstractNioUnsafe:finishConnect(), Bzip2Encoder$4:<clinit>(), PemReader:<init>(), Base64Dialect:<init>(String-int-byte[]-byte[]-boolean), DiskFileUpload:getDiskFilename(), PlatformDependent:directBufferPreferred(), MqttMessageType:valueOf(int), MultithreadEventLoopGroup:newChild(Executor-Object[]), MemoryFileUpload:duplicate(), ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter), UnreleasableByteBuf:order(ByteOrder), Native:address(byte[]-int-int), DefaultStompHeaders:setObject(Object-Object), ServerSocketChannelUDT:configureBlocking(boolean), AbstractChannel$AbstractUnsafe:bind(SocketAddress-ChannelPromise), DefaultHttp2Connection$DefaultStream:removeProperty(Object), DefaultHttp2Headers:setBoolean(AsciiString-boolean), ContinuationWebSocketFrame:retain(), SpdySession$StreamState:updateSendWindowSize(int), SlicedByteBuf:getBytes(int-ByteBuf-int-int), MemcacheContent:setDecoderResult(DecoderResult), DefaultSpdyHeaders:<init>(), NioSctpChannel$1:run(), AttributeKey$1:<init>(), WrappedByteBuf:writeByte(int), ChunkedFile:readChunk(ChannelHandlerContext), DnsNameResolver$1:initChannel(DatagramChannel), BinaryMemcacheResponseEncoder:encodeHeader(ByteBuf-BinaryMemcacheMessage), PoolChunk:allocateNode(int), Bzip2DivSufSort:ssMergeBackward(int-int[]-int-int-int-int-int), SctpMessage:streamIdentifier(), DefaultFullBinaryMemcacheResponse:content(), Http2FrameLogger:logSettings(Http2FrameLogger$Direction-Http2Settings), DefaultBinaryHeaders:setTimeMillis(AsciiString-long), AbstractDiskHttpData:getByteBuf(), ForkJoinPool:getCommonPoolParallelism(), AbstractByteBuf:getBytes(int-byte[]), JdkBaseApplicationProtocolNegotiator$3:newListener(SSLEngine-List), ProxyConnectException:<init>(Throwable), SpdyFrameEncoder:encodeDataFrame(ByteBufAllocator-int-boolean-ByteBuf), DefaultLastHttpContent:retain(), Slf4JLogger:info(String-Throwable), HttpPostBodyUtil:findWhitespace(String-int), ContinuationWebSocketFrame:retain(int), ForkJoinPool$WorkQueue:nextLocalTask(), SwappedByteBuf:slice(int-int), PooledUnsafeDirectByteBuf:nioBuffers(int-int), DefaultMemcacheContent:retain(int), PrimitiveCollections$UnmodifiableIntObjectMap:isEmpty(), MessageToMessageCodec$2:acceptInboundMessage(Object), DefaultSctpChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), AbstractChannel$PausableChannelEventLoop:register(Channel), HttpObjectAggregator$AggregatedFullHttpMessage:decoderResult(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<init>(Recycler$Handle-ThreadLocalPooledDirectByteBuf$1), Socks5AddressType:compareTo(Socks5AddressType), ConcurrentHashMapV8$ForEachTransformedKeyTask:propagateCompletion(), MqttDecoder:decodeMessageId(ByteBuf), MarshallerFactory:createMarshaller(MarshallingConfiguration), FastThreadLocal:remove(), Native:sendmmsg(int-NativeDatagramPacketArray$NativeDatagramPacket[]-int-int), HttpObjectAggregator:aggregate(FullHttpMessage-HttpContent), SpdyHttpDecoder:decode(ChannelHandlerContext-Object-List), Base64Encoder:<init>(boolean-Base64Dialect), DefaultHeaders:containsObject(Object-Object-Comparator-Comparator), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:compute(), Http2Connection$Listener:streamInactive(Http2Stream), ByteBuf:setMedium(int-int), UnsupportedMessageTypeException:<init>(String), MqttConnectVariableHeader:keepAliveTimeSeconds(), SSLEngine:closeOutbound(), WebSocketServerHandshaker$2:exceptionCaught(ChannelHandlerContext-Throwable), DefaultChannelGroupFuture:<init>(ChannelGroup-Collection-EventExecutor), ForkJoinPool$WorkQueue:<clinit>(), DefaultBinaryHeaders:setBoolean(Object-boolean), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf$1:newObject(Recycler$Handle), HttpPostRequestEncoder$EncoderMode:valueOf(String), ChannelOutboundBuffer:clearUserDefinedWritability(int), CipherSuiteConverter:toJavaBulkCipher(String-boolean), DomainNameMapping:<init>(Object), ReplayingDecoderBuffer:isReadable(int), LoggingHandler:<init>(), DefaultHeaders:getByte(Object-byte), SpdySynReplyFrame:isInvalid(), PlatformDependent:isWindows(), Http2Connection:createRemoteStream(int), OpenSslSessionContext:<init>(long), LocalChannel:eventLoop(), CompositeByteBuf:<clinit>(), UnpooledHeapByteBuf:getShort(int), Recycler$Stack:access$300(Recycler$Stack), AbstractNioByteChannel:config(), FixedCompositeByteBuf:capacity(), AttributeKey:exists(String), DefaultHeaders:containsShort(Object-short), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:clear(), ByteBufUtil$ThreadLocalDirectByteBuf:capacity(), Logger:info(String-Object), DefaultBinaryHeaders:set(AsciiString-AsciiString[]), DefaultChannelGroupFuture:isPartialSuccess(), HttpMessage:decoderResult(), EpollSocketChannelConfig:setTrafficClass(int), ForkJoinPool$WorkQueue:peek(), Log:error(Object), MqttDecoder:decodeMessageIdVariableHeader(ByteBuf), ReplayingDecoderBuffer:bytesBefore(byte), NioDatagramChannel:joinGroup(InetAddress-ChannelPromise), HttpResponseDecoder:<init>(int-int-int-boolean), ThreadPerChannelEventLoopGroup:register(Channel), ByteBufUtil$ThreadLocalDirectByteBuf:<init>(Recycler$Handle-ByteBufUtil$1), DefaultCookie:setCommentUrl(String), CorsConfig:isCredentialsAllowed(), MqttConnectVariableHeader:version(), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:compute(), SSLContext:make(long-int-int), EpollDomainSocketChannel$1:<clinit>(), CloseWebSocketFrame:retain(int), EpollMode:valueOf(String), PooledDirectByteBuf:newInternalNioBuffer(Object), DefaultBinaryHeaders$2:convertTimeMillis(long), DefaultHeaders:getLongAndRemove(Object-long), Http2Connection:isServer(), Http2ConnectionHandler:handlerRemoved0(ChannelHandlerContext), FullBinaryMemcacheRequest:setMagic(byte), DefaultByteBufHolder:content(), InternalLoggerFactory:<clinit>(), DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int), DnsNameResolver:setMaxQueriesPerResolve(int), ConcurrentHashMapV8$ForEachTransformedEntryTask:addToPendingCount(int), Native:getTcpKeepCnt(int), DefaultStompHeaders:addChar(Object-char), GlobalEventExecutor:awaitInactivity(long-TimeUnit), Bootstrap:toString(), DefaultHttp2RemoteFlowController:access$500(DefaultHttp2RemoteFlowController), OioByteStreamChannel:parent(), ByteBuf:setShort(int-int), Http2Flags:ack(), Unpooled:copyShort(int), PooledHeapByteBuf:getBytes(int-ByteBuf-int-int), DefaultBinaryHeaders:set(BinaryHeaders), HttpHeaders:getAndConvert(Object), DiskAttribute:hashCode(), DefaultUdtChannelConfig:getOptions(), FastThreadLocal:addToVariablesToRemove(InternalThreadLocalMap-FastThreadLocal), PooledHeapByteBuf:newInternalNioBuffer(byte[]), JdkAlpnSslEngine:closeInbound(), UnsafeAtomicIntegerFieldUpdater:weakCompareAndSet(Object-int-int), ConcurrentHashMapV8$MapEntry:hashCode(), SSLContext:setNextProtos(long-String), SSLEngineResult:getStatus(), FingerprintTrustManagerFactory:<init>(byte[][]), HttpPostMultipartRequestDecoder:skipControlCharacters(), DefaultChannelProgressivePromise:syncUninterruptibly(), SslHandler:runDelegatedTasks(), DefaultPromise:syncUninterruptibly(), AbstractEventExecutor:close(), DefaultSocks5CommandResponse:bndAddr(), PromiseTask:trySuccessInternal(Object), DefaultHttpContent:refCnt(), SpdySession:receivedReply(int), DefaultHttp2FrameReader$2:close(), DefaultHeaders:equals(List-List-Comparator), ConcurrentHashMapV8$ForEachValueTask:advance(), AbstractEpollServerChannel:remoteAddress0(), SpdyOrHttpChooser:addHttpHandlers(ChannelHandlerContext), FastThreadLocal:size(), DefaultHttp2StreamRemovalPolicy$Garbage:access$100(DefaultHttp2StreamRemovalPolicy$Garbage), ConcurrentHashMapV8$SearchKeysTask:addToPendingCount(int), AbstractInternalLogger:warn(String-Object-Object), EpollDatagramChannel$EpollDatagramChannelUnsafe:<init>(EpollDatagramChannel), EmptyHttp2Headers:setBoolean(AsciiString-boolean), DnsEntry:name(), HttpPostRequestEncoder:addBodyFileUpload(String-File-String-boolean), ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Action), DefaultHttpDataFactory:<init>(long), WrappedByteBuf:getBytes(int-byte[]-int-int), WeakReferenceMap:fold(Object), AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel), HttpObjectAggregator$AggregatedFullHttpResponse:copy(boolean-ByteBuf), ForkJoinPool$WorkQueue:internalPopAndExecCC(CountedCompleter), OpenSslEngine$1:notifyUnbound(Object-String), EmptyHttp2Headers:addShort(Object-short), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToTimeMillis(Object), NioSctpChannel:doWriteMessage(Object-ChannelOutboundBuffer), DecoderResult:failure(Throwable), RecyclableArrayList:isEmpty(), SwappedByteBuf:setInt(int-int), DefaultHttp2RemoteFlowController$2:priorityTreeParentChanging(Http2Stream-Http2Stream), Http2ServerUpgradeCodec:<clinit>(), StompCommand:<init>(String-int), AsciiString:parseFloat(), DefaultHttp2LocalFlowController$FlowState:<clinit>(), DefaultChannelPipeline$TailContext:disconnect(ChannelHandlerContext-ChannelPromise), PoolSubpage:<init>(int), WebSocketClientHandshaker13:newWebSocketEncoder(), PoolThreadCache$MemoryRegionCache$Entry:<init>(), DefaultFullHttpRequest:protocolVersion(), MpscLinkedQueueHeadRef:lazySetHeadRef(MpscLinkedQueueNode), ReplayingDecoderBuffer:array(), DefaultBinaryHeaders:setObject(AsciiString-Iterable), HttpServerUpgradeHandler$UpgradeEvent:refCnt(), ReplayingDecoderBuffer:setIndex(int-int), PooledByteBuf:<clinit>(), DefaultMessageSizeEstimator:<clinit>(), DnsQueryContext:query(), Http2FrameListener:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf), ReplayingDecoderBuffer:discardSomeReadBytes(), Base64:encode(ByteBuf-int-int), DefaultChannelPipeline:destroy(), DuplicatedByteBuf:_getLong(int), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), ConcurrentSet:iterator(), HttpObjectDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), SpdyHeadersFrame:setLast(boolean), Attribute:refCnt(), DefaultHeaders:add0(int-int-Object-Object), AbstractChannel:doRegister(), GlobalEventExecutor:<init>(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:deallocate(), SctpChannel:pipeline(), LzfDecoder$State[]:clone(), HttpHeaders:add(CharSequence-CharSequence), ByteToMessageDecoder:internalBuffer(), UnpooledDirectByteBuf:getBytes(int-ByteBuffer-boolean), AbstractChannelHandlerContext:fireExceptionCaught(Throwable), PromiseTask:<init>(EventExecutor-Runnable-Object), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), DeflateFrameServerExtensionHandshaker:<init>(int), HttpPostStandardRequestDecoder:<init>(HttpRequest), Unpooled:<init>(), ByteToMessageCodec:encode(ChannelHandlerContext-Object-ByteBuf), LastHttpContent$1:retain(), NioEventLoop:hasTasks(), Unsafe:compareAndSwapObject(Object-long-Object-Object), ReplayingDecoderBuffer:indexOf(int-int-byte), MessageToMessageEncoder:<init>(), DefaultTextHeaders$SingleHeaderValuesComposer:setObject(CharSequence-Iterable), DefaultBinaryHeaders:add(Object-Object[]), Http2Connection$Listener:priorityTreeParentChanging(Http2Stream-Http2Stream), DefaultHttp2Connection$DefaultStream:setProperty(Object-Object), DefaultSpdyHeaders:setAll(TextHeaders), HttpContentDecoder:decode(ChannelHandlerContext-Object-List), LoggingHandler:<init>(Class), OpenSsl:<init>(), UnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), PlatformDependent:isWindows0(), DefaultHttp2ConnectionEncoder:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToBoolean(CharSequence), DefaultHeaders:toString(), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), Recycler$2:initialValue(), LoggingHandler:<init>(LogLevel), MultithreadEventExecutorGroup$GenericEventExecutorChooser:<init>(MultithreadEventExecutorGroup), HAProxyProtocolException:<init>(String-Throwable), Native:setSoLinger(int-int), HttpObjectAggregator:<clinit>(), EmptyTextHeaders:setObject(CharSequence-Object), ThreadLocalInsecureRandom:nextBytes(byte[]), UniqueIpFilter:access$000(UniqueIpFilter), ForkJoinTask:access$000(), Logger:isDebugEnabled(), DefaultHeaders:setFloat(Object-float), DefaultChannelGroup:find(ChannelId), GlobalChannelTrafficShapingHandler:toString(), LocalChannel:remoteAddress(), ConcurrentHashMapV8$MapReduceEntriesTask:compute(), EmptyHttp2Headers:method(AsciiString), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToDouble(Object), StompSubframeAggregator:hasContentLength(Object), Native:sendmmsg0(int-NativeDatagramPacketArray$NativeDatagramPacket[]-int-int), HAProxyProxiedProtocol$AddressFamily:ordinal(), IntObjectHashMap$IteratorImpl:setValue(Object), AbstractEpollStreamChannel:newUnsafe(), ConcurrentHashMapV8$KeySetView:getMap(), EventExecutor:newSucceededFuture(Object), HttpResponseDecoder:isSingleDecode(), DnsServerAddresses$ShuffledAddressIterator:remove(), Unsafe:getInt(long), AbstractEventExecutor:newSucceededFuture(Object), ConcurrentHashMapV8$SearchValuesTask:fork(), DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int), EventLoop:unwrap(), DnsType:compareTo(DnsType), AdvancedLeakAwareByteBuf:setByte(int-int), AbstractBootstrap:bind(SocketAddress), SSLContext:sessionAccept(long), UnsafeAtomicIntegerFieldUpdater:compareAndSet(Object-int-int), SslHandler:engine(), DefaultHeaders:getByte(Object), ByteBuf:getBytes(int-ByteBuf), MqttUnacceptableProtocolVersionException:<init>(String), SSL:shutdownSSL(long), SslHandler:<init>(SSLEngine), InternalLogger:debug(String-Throwable), JdkSslSession:<init>(SSLEngine), AbstractEpollStreamChannel$EpollStreamUnsafe:epollOutReady(), AdvancedLeakAwareByteBuf:skipBytes(int), X509Certificate:getInstance(byte[]), PromiseTask$RunnableAdapter:call(), PooledDirectByteBuf:newInstance(int), HttpObjectAggregator$AggregatedFullHttpMessage:protocolVersion(), GlobalChannelTrafficShapingHandler:sendAllValid(ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long), EpollSocketChannelConfig:setReceiveBufferSize(int), MessageFormatter:shortArrayAppend(StringBuffer-short[]), DefaultHttpDataFactory:<init>(boolean-Charset), EventLoop:schedule(Runnable-long-TimeUnit), EmptyTextHeaders:set(CharSequence-CharSequence[]), DnsNameResolver:resolveAddressTypes(), ReadOnlyByteBuf:_setShort(int-int), ContinuationWebSocketFrame:content(), StompSubframeAggregator:isContentMessage(StompSubframe), Socks5CommandResponseDecoder:checkpoint(Object), CommonsLogger:isTraceEnabled(), DnsServerAddresses:rotational(InetSocketAddress[]), FastThreadLocalAccess:threadLocalMap(), EmptyBinaryHeaders:setBoolean(AsciiString-boolean), FileUpload:setContent(InputStream), StompCommand:valueOf(String), HttpUtil$ExtensionHeaderNames:<init>(String-int-String), DefaultTextHeaders:addLong(Object-long), UnpooledDirectByteBuf:getUnsignedMedium(int), AdvancedLeakAwareByteBuf:getUnsignedByte(int), JdkZlibDecoder$GzipState:valueOf(String), Http2Connection$Endpoint:flowController(Http2FlowController), DefaultTextHeaders:comparator(boolean), AbstractBinaryMemcacheEncoder:encodeExtras(ByteBuf-ByteBuf), LastHttpContent$1:copy(), NioSocketChannel:localAddress(), PlatformDependent0:objectFieldOffset(Field), DnsNameResolver:query(DnsQuestion-Promise), DefaultConvertibleHeaders$ConvertedIterator:<init>(DefaultConvertibleHeaders-DefaultConvertibleHeaders$1), HttpPostMultipartRequestDecoder:checkDestroyed(), HttpObjectAggregator$AggregatedFullHttpResponse:protocolVersion(), HttpMethod:hashCode(), HttpPostRequestEncoder:encodeNextChunkMultipart(int), ProxyHandler:write(ChannelHandlerContext-Object-ChannelPromise), Bzip2Encoder:<init>(int), HttpClientCodec:<init>(), ConcurrentHashMapV8:reduceToInt(long-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), EmptyHttpHeaders:add(CharSequence-CharSequence), SpdyStreamStatus:compareTo(Object), JdkZlibEncoder:deflate(ByteBuf), ConcurrentHashMapV8$MapReduceValuesTask:compute(), OpenSslSessionContext:<clinit>(), DefaultHttp2ConnectionEncoder$1:<clinit>(), DefaultHttp2Headers:setShort(AsciiString-short), SpdySynStreamFrame:priority(), Socks5PasswordAuthResponseDecoder$1:<clinit>(), AdaptiveRecvByteBufAllocator:access$100(), NativeDatagramPacketArray:<init>(), SingleThreadEventExecutor$2:<init>(SingleThreadEventExecutor), AbstractRemoteAddressFilter:channelRejected(ChannelHandlerContext-SocketAddress), DefaultChannelGroup:<clinit>(), DefaultHttp2FrameReader:verifyRstStreamFrame(), AbstractChannel$AbstractUnsafe:close(ChannelPromise), NioSocketChannel:doClose(), MixedAttribute:setValue(String), DefaultHttp2Headers:scheme(AsciiString), SwappedByteBuf:order(ByteOrder), DefaultRxtxChannelConfig:setRts(boolean), LocalServerChannel:<init>(), DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), HashedWheelTimer$HashedWheelTimeout:<clinit>(), AdvancedLeakAwareByteBuf:bytesBefore(int-byte), ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), Http2FrameWriter:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), Bzip2HuffmanStageEncoder:assignHuffmanCodeSymbols(), DefaultHeaders:hashCode(), JdkZlibDecoder:readGZIPFooter(ByteBuf), ReplayingDecoder:state(Object), MemoryAttribute:touch(Object), SingleThreadEventExecutor$3:<init>(SingleThreadEventExecutor-Runnable), HttpStatusClass:contains(int), AdvancedLeakAwareByteBuf:touch(), MqttMessage:fixedHeader(), PoolThreadCache$MemoryRegionCache:add(PoolChunk-long), JdkZlibDecoder$1:<clinit>(), DefaultHttp2RemoteFlowController$FlowState:allocated(), DefaultUdtServerChannelConfig:getBacklog(), AbstractScheduledEventExecutor:pollScheduledTask(), SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:engineInit(KeyStore), DefaultHttpContent:decoderResult(), DefaultHttp2Connection$DefaultEndpoint:createdStreamId(int), DefaultHttp2ConnectionDecoder:newBuilder(), HAProxyMessageDecoder:channelRead(ChannelHandlerContext-Object), EpollSocketChannel:tcpInfo(EpollTcpInfo), CorsConfig$DateValueGenerator:call(), DnsServerAddresses:shuffled0(InetSocketAddress[]), CorsConfig:allowedRequestHeaders(), JdkNpnApplicationProtocolNegotiator:<init>(String[]), MqttConnAckMessage:<init>(MqttFixedHeader-MqttConnAckVariableHeader), Native:decodeInt(byte[]-int), AbstractChannelHandlerContext$PausableChannelEventExecutor0:channel(), AbstractChannel$AbstractUnsafe:access$600(AbstractChannel$AbstractUnsafe-ChannelOutboundBuffer-boolean-ChannelPromise-Throwable), CompatibleMarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf), InternalThreadLocalMap:counterHashCode(), DefaultHttp2ConnectionEncoder$FlowControlledData:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean-ChannelPromise), HttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), DnsQueryHeader:<init>(DnsMessage-int), ReplayingDecoderBuffer:writeBytes(byte[]-int-int), Lz4FrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), DefaultStompHeaders:addInt(CharSequence-int), SpdyHttpCodec:<init>(SpdyVersion-int-boolean), NioUdtByteConnectorChannel:localAddress(), ReplayingDecoderBuffer:setBytes(int-ByteBuf-int), EmptyBinaryHeaders:add(AsciiString-Iterable), LzmaFrameEncoder:<init>(int-int-int), GlobalTrafficShapingHandler:release(), EpollDatagramChannel:newDirectBuffer(ByteBuf), AsciiString:parseInt(int-int-int-boolean), NioSocketChannel:<clinit>(), AbstractConstant:hashCode(), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-boolean-Iterable), Native:offsetofEpollData(), ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask), DefaultChannelPipeline:fireChannelUnregistered(), ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object), AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf), DuplicatedByteBuf:setInt(int-int), LocalServerChannel:access$000(LocalServerChannel-LocalChannel), ZlibWrapper:<clinit>(), Unsafe:putLongVolatile(Object-long-long), NioSctpServerChannel:localAddress0(), JdkLogger:error(String), NioDatagramChannel:newSocket(SelectorProvider), SpdyHeaderBlockZlibDecoder:<clinit>(), EncryptedPrivateKeyInfo:getKeySpec(Cipher), ContinuationWebSocketFrame:text(), DefaultHttp2Connection$2:<clinit>(), DefaultSocks5CommandResponse:<init>(Socks5CommandStatus-Socks5AddressType), ReadTimeoutHandler:initialize(ChannelHandlerContext), SlicedByteBuf:_setInt(int-int), WebSocketClientHandshaker$2:messageReceived(ChannelHandlerContext-Object), ObjectDecoderInputStream:readFloat(), DefaultMemcacheContent:retain(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), ConcurrentHashMapV8$ForEachTransformedKeyTask:fork(), ByteBuf:readBytes(byte[]), AbstractBootstrap$1:<init>(AbstractBootstrap-AbstractBootstrap$PendingRegistrationPromise-Channel-ChannelFuture-SocketAddress), DefaultSpdyHeaders:setFloat(CharSequence-float), EpollDatagramChannelConfig:setLoopbackModeDisabled(boolean), OioDatagramChannel:isRegistered(), SelfSignedCertificate:<init>(String), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean), SingleThreadEventLoop:unwrap(), AbstractByteBuf:toString(int-int-Charset), OpenSslSessionStats:connectGood(), AbstractChannel:isRegistered(), CorsHandler:setAllowCredentials(HttpResponse), TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long), AbstractEventExecutorGroup:shutdownGracefully(), UnpooledUnsafeDirectByteBuf:_setByte(int-int), DnsClass:valueOf(int-String), DefaultHttpMessage:headers(), JdkSslEngine:getDelegatedTask(), DefaultChannelGroupFuture:access$108(DefaultChannelGroupFuture), MixedFileUpload:toString(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertFloat(float), SSLEngine:wrap(ByteBuffer[]-ByteBuffer), DefaultMessageSizeEstimator:<init>(int), ConcurrentHashMapV8:getUnsafe(), AbstractByteBuf:readUnsignedInt(), EmbeddedChannel:writeInbound(Object[]), JdkLogger:trace(String-Object-Object), MessageToByteEncoder:encode(ChannelHandlerContext-Object-ByteBuf), AbstractReferenceCountedByteBuf:writeChar(int), HttpObjectAggregator$AggregatedFullHttpResponse:content(), MixedAttribute:getFile(), ThreadLocalRandom$2:<init>(), EmptyTextHeaders:setFloat(CharSequence-float), AbstractChannelHandlerContext:read(), DnsNameResolver$1:initChannel(Channel), IntObjectMap:size(), AbstractEventExecutor:newTaskFor(Callable), LengthFieldPrepender:<init>(int-int), ConcurrentHashMapV8$ReduceEntriesTask:advance(), FixedCompositeByteBuf:_setShort(int-int), DefaultSocks5CommandRequest:dstAddr(), CookieEncoderUtil:stripTrailingSeparator(StringBuilder), DefaultChannelHandlerInvoker:invokeChannelActive(ChannelHandlerContext), LocalChannel:access$202(LocalChannel-boolean), AbstractByteBuf:indexOf(int-int-byte), InternalThreadLocalMap:setLocalChannelReaderStackDepth(int), EpollServerDomainSocketChannel:localAddress(), DuplicatedByteBuf:getLong(int), SslHandler$7:<init>(SslHandler-ScheduledFuture-ChannelHandlerContext-ChannelPromise), MqttPubAckMessage:variableHeader(), PendingWriteQueue:current(), HttpPostMultipartRequestDecoder:isMultipart(), NioUdtMessageAcceptorChannel:doReadMessages(List), Http2FrameListenerDecorator:onRstStreamRead(ChannelHandlerContext-int-long), DnsNameResolverGroup:<init>(Class-InetSocketAddress), WrappedByteBuf:getDouble(int), AbstractDiskHttpData:retain(int), PoolThreadCache$SubPageMemoryRegionCache:initBuf(PoolChunk-long-PooledByteBuf-int), DnsResponseHeader:setRecursionDesired(boolean), JdkLogger:error(String-Object), PBEKeySpec:<init>(char[]), ChannelFutureListener$1:operationComplete(ChannelFuture), AbstractMemcacheObjectAggregator:newContinueResponse(MemcacheMessage), SpdySessionHandler$3:operationComplete(Future), FileUpload:setContent(ByteBuf), MqttSubscribeMessage:payload(), DefaultHttp2Connection:requireStream(int), AbstractTrafficShapingHandler:setMaxWriteDelay(long), JdkSslContext:wrapEngine(SSLEngine), ReplayingDecoderBuffer:setBoolean(int-boolean), SerialPort:getInputStream(), ReadOnlyByteBuf:_setByte(int-int), OpenSslClientContext:<init>(), CloseWebSocketFrame:retain(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), DefaultUdtChannelConfig:setSoLinger(int), DiskAttribute:<init>(String-String-Charset), DefaultChannelPipeline:getContextOrDie(Class), ChannelHandlerAdapter:channelRead(ChannelHandlerContext-Object), DuplicatedByteBuf:hasMemoryAddress(), HttpHeaderUtil:<init>(), EpollServerChannelConfig:setAllocator(ByteBufAllocator), ChannelPromiseAggregator:<init>(ChannelPromise), Native:<init>(), WrappedByteBuf:discardSomeReadBytes(), MqttFixedHeader:messageType(), IntObjectHashMap:<init>(), ReplayingDecoderBuffer:ensureWritable(int-boolean), ChunkDecoderFactory:optimalInstance(), HttpPostRequestEncoder$WrappedHttpRequest:method(), CorsConfig$Builder:preflightResponseHeader(CharSequence-Iterable), ForkJoinWorkerThread:onTermination(Throwable), NioUdtByteConnectorChannel:<init>(), ClientCookieDecoder$CookieBuilder:cookie(), ChunkedStream:<init>(InputStream-int), Native:remoteAddress(int), ConcurrentHashMapV8$MapReduceKeysToIntTask:addToPendingCount(int), HttpVersion:equals(Object), OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise), AsciiHeadersEncoder:<init>(ByteBuf), DefaultSpdyDataFrame:toString(), ReplayingDecoderBuffer:setInt(int-int), HttpPostMultipartRequestDecoder:removeHttpDataFromClean(InterfaceHttpData), JdkSslEngine:getPeerHost(), DnsNameResolverContext:access$100(DnsNameResolverContext), AsciiHeadersEncoder:writeAsciiString(ByteBuf-int-AsciiString-int), SwappedByteBuf:bytesBefore(byte), DefaultChannelPipeline$TailContext:skipFlags0(Class), DefaultHttp2FrameReader$3:processFragment(boolean-ByteBuf-Http2FrameListener), DefaultHttp2ConnectionEncoder$FlowControlledHeaders:write(int), ByteBuf:<init>(), EpollSocketChannelConfig:setMaxMessagesPerRead(int), ConcurrentHashMapV8$ReduceEntriesTask:fork(), HttpPostRequestEncoder$WrappedFullHttpRequest:method(), DefaultOioServerSocketChannelConfig:getOptions(Map-ChannelOption[]), MqttPublishMessage:<init>(MqttFixedHeader-MqttPublishVariableHeader-ByteBuf), RtspResponseDecoder:createInvalidMessage(), PooledHeapByteBuf:nioBuffers(int-int), NioUdtProvider$1:<clinit>(), DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:<init>(DefaultHttp2HeadersEncoder), EventLoop:newPromise(), ConcurrentHashMapV8$MapReduceMappingsTask:advance(), DefaultTextHeaders$SingleHeaderValuesComposer$1:<init>(DefaultTextHeaders$SingleHeaderValuesComposer), DefaultOioSocketChannelConfig:setSoTimeout(int), AbstractEventExecutor:submit(Runnable-Object), HttpPostRequestEncoder:readChunk(ChannelHandlerContext), DefaultHttpHeaders:add(TextHeaders), DefaultChannelHandlerInvoker:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), ChannelFlushPromiseNotifier:notifyFlushFutures(Throwable-Throwable), HttpClientCodec:access$102(HttpClientCodec-boolean), HttpResponseStatus:newStatus(int-String), DelegatingDecompressorFrameListener:getTargetContentEncoding(AsciiString), DelegatingDecompressorFrameListener:<clinit>(), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest), OpenSslContext:sessionContext(), AbstractChannelHandlerContext:fireChannelWritabilityChanged(), DefaultHeaders:equals(Object), GlobalTrafficShapingHandler:handlerAdded(ChannelHandlerContext), MqttConnAckMessage:variableHeader(), NioUdtMessageConnectorChannel:doClose(), CompositeByteBuf:memoryAddress(), MemoryAttribute:<init>(String-String), JdkSslClientContext:<init>(TrustManagerFactory), Native:errnoEINPROGRESS(), CompactObjectInputStream:readByte(), DefaultHttpHeaders:set(Object-Object), DeflateFrameClientExtensionHandshaker$DeflateFrameClientExtension:newExtensionDecoder(), AbstractEpollStreamChannel:<clinit>(), CompositeByteBuf:component(int), ReplayingDecoderBuffer:markReaderIndex(), DeflateEncoder:<init>(int-int-boolean), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), PoolSubpage:getNextAvail(), Slf4JLogger:isInfoEnabled(), DnsServerAddresses:sequential(InetSocketAddress[]), MqttPublishMessage:touch(), HttpResponse:protocolVersion(), HttpObjectAggregator:isContentMessage(HttpObject), JdkSslSession:getCipherSuite(), NioDatagramChannel:joinGroup(InetAddress), ConcurrentHashMapV8$EntrySetView:spliterator166(), HttpObjectDecoder$State:<init>(String-int), IntObjectHashMap:keyToString(int), AbstractNioByteChannel:newUnsafe(), PooledDirectByteBuf$1:newObject(Recycler$Handle), AlgorithmId:<init>(ObjectIdentifier), AbstractByteBuf:setIndex(int-int), NioSctpChannel:localAddress0(), DefaultChannelHandlerInvoker:invokeFlush(ChannelHandlerContext), DefaultHttpHeaders:set(CharSequence-Iterable), Logger:isTraceEnabled(), OioDatagramChannel:newFailedFuture(Throwable), Slf4JLogger:info(String-Object-Object), SocketUDT:setOption(OptionUDT-Object), Bzip2Encoder$1:run(), LocalChannel$LocalUnsafe:voidPromise(), Native:listen(int-int), ReplayingDecoderBuffer:resetReaderIndex(), PlatformDependent0:getObjectVolatile(Object-long), DiskFileUpload:setMaxSize(long), DefaultTextHeaders$SingleHeaderValuesComposer:<init>(DefaultTextHeaders-DefaultTextHeaders$1), MqttPublishMessage:payload(), SocksPortUnificationServerHandler$1:<clinit>(), MqttDecoder:<init>(), NioServerSocketChannel:doClose(), StringUtil:toHexString(Appendable-byte[]), DefaultHttp2Connection$DefaultEndpoint:nextStreamId(), BinaryMemcacheRequest:setDataType(byte), ChunkedWriteHandler$4:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite-ChunkedInput-Channel), InternalThreadLocalMap:nextVariableIndex(), ConcurrentHashMapV8:computeIfAbsent(Object-ConcurrentHashMapV8$Fun), IpFilterRuleType:<init>(String-int), FileRegion:count(), ChannelOutboundBuffer:addFlush(), EmptyHeaders:setLong(Object-long), SwappedByteBuf:readBytes(ByteBuf-int-int), SslContext:newClientContext(SslProvider-File), BinaryMemcacheObjectAggregator:isStartMessage(Object), Channel:pipeline(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener), AbstractChannel:connect(SocketAddress-SocketAddress), Channel$Unsafe:voidPromise(), SingleThreadEventExecutor:isShutdown(), DefaultSocketChannelConfig:setReuseAddress(boolean), HttpHeaderNames:<clinit>(), DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), WrappedByteBuf:getLong(int), AbstractMemoryHttpData:setContent(ByteBuf), AbstractNioByteChannel:doWriteFileRegion(FileRegion), DiskFileUpload:compareTo(InterfaceHttpData), Log4JLogger:trace(String), ConcurrentHashMapV8$MapReduceEntriesTask:firstComplete(), MqttEncoder:encodeSubscribeMessage(ByteBufAllocator-MqttSubscribeMessage), Http2HeaderTable:maxHeaderTableSize(), EmptyHttp2Headers:<clinit>(), EpollChannelConfig:setEpollMode(EpollMode), WebSocketClientProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable), HashedWheelTimer$HashedWheelBucket:clearTimeouts(Set), DefaultChannelGroupFuture$1:<init>(DefaultChannelGroupFuture), ChannelOutboundBuffer:fillBufferArray(ByteBuffer[]-ByteBuffer[]-int), ObjectUtil:<init>(), DefaultConvertibleHeaders:setDouble(Object-double), DefaultSocketChannelConfig:isTcpNoDelay(), DefaultPromise:addListeners(GenericFutureListener[]), RtspResponseStatuses:valueOf(int), OioSctpChannel:setReadPending(boolean), SwappedByteBuf:readShort(), ForkJoinPool$Submitter:<init>(int), DefaultHttp2Connection:goAwayReceived(), Http2Headers:method(), DefaultRxtxChannelConfig:setWriteBufferLowWaterMark(int), AbstractDerivedByteBuf:internalNioBuffer(int-int), DefaultSpdyWindowUpdateFrame:setDeltaWindowSize(int), SingleThreadEventExecutor:pollTask(), AbstractEpollChannel$1:<init>(AbstractEpollChannel-AbstractEpollChannel$AbstractEpollUnsafe), HttpUtil:access$000(), MpscLinkedQueueNode:<clinit>(), AbstractNioChannel$NioUnsafe:read(), SwappedByteBuf:slice(), FastLzFrameEncoder:<init>(), DefaultAttributeMap$DefaultAttribute:setIfAbsent(Object), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToInt(Object), DefaultCookie:setSecure(boolean), Slf4JLogger:isWarnEnabled(), MultithreadEventLoopGroup:register(Channel-ChannelPromise), EpollSocketChannelConfig:getReceiveBufferSize(), ConcurrentHashMapV8$MapEntry:setValue(Object), WebSocket08FrameDecoder:toFrameLength(long), DefaultSctpChannelConfig:validate(ChannelOption-Object), AbstractMemoryHttpData:retain(int), DefaultHttp2LocalFlowController:access$300(DefaultHttp2LocalFlowController), BinaryMemcacheMessage:key(), ConcurrentHashMapV8$MapReduceKeysTask:compute(), ThreadLocalInsecureRandom:current(), AbstractNioByteChannel:parent(), StompHeadersSubframe:headers(), NativeDatagramPacketArray:packets(), DnsClass:intValue(), MessageSizeEstimator$Handle:size(Object), AbstractOioByteChannel:doWrite(ChannelOutboundBuffer), Inflater:<init>(), Recycler$WeakOrderQueue$Link:access$1002(Recycler$WeakOrderQueue$Link-Recycler$WeakOrderQueue$Link), PooledDirectByteBuf$1:<init>(), Http2Exception:error(), LastHttpContent$1:retain(int), Socks5ProxyHandler:authScheme(), DefaultSpdyHeadersFrame:setInvalid(), QueryStringEncoder:toUri(), EmptyTextHeaders:setObject(Object-Object[]), DefaultPromise:awaitUninterruptibly(long-TimeUnit), DefaultChannelId:compareTo(ChannelId), DefaultTextHeaders:access$901(DefaultTextHeaders-Object-Object[]), MultithreadEventExecutorGroup:<init>(int-Executor-boolean-Object[]), InternalThreadLocalMap:charsetEncoderCache(), DefaultRxtxChannelConfig:getWaitTimeMillis(), UnpooledHeapByteBuf:nioBuffers(int-int), PoolThreadCache:access$000(PoolThreadCache), ClientCookieEncoder:encode(StringBuilder-Cookie), IpSubnetFilterRule$Ip4SubnetFilterRule:ipToInt(Inet4Address), DefaultRxtxChannelConfig:getStopbits(), ChannelException:<init>(String), DefaultSctpChannelConfig:setMaxMessagesPerRead(int), RtspObjectDecoder:isContentAlwaysEmpty(HttpMessage), ThreadPerChannelEventLoopGroup$1:operationComplete(Future), DefaultSctpServerChannelConfig:setWriteSpinCount(int), SimpleLeakAwareByteBuf:order(), DefaultUdtServerChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), HttpMessage:headers(), CipherSuiteConverter:toJavaUncached(String), AbstractOioChannel:<init>(Channel), DefaultStompHeaders:<init>(), ScheduledFutureTask:needsLaterExecution(), SSLContext:setCertVerifyCallback(long-CertificateVerifier), ConcurrentHashMapV8$SearchValuesTask:invoke(), SSLSessionContext:setSessionTimeout(int), CountedCompleter$1:run(), Bzip2BitReader:isReadable(), DefaultHttpRequest:setMethod(HttpMethod), HttpClientCodec:<init>(int-int-int-boolean), PoolArena:tinyIdx(int), DefaultSocketChannelConfig:getReceiveBufferSize(), ChunkEncoderFactory:optimalNonAllocatingInstance(int), Promise:isCancelled(), ByteToMessageCodec:<init>(Class-boolean), UnpooledHeapByteBuf:ensureAccessible(), DefaultHttpHeaders:setObject(Object-Object[]), MixedAttribute:getCharset(), Channel:writeAndFlush(Object), ChannelOutboundBuffer:expandNioBufferArray(ByteBuffer[]-int-int), SpdySynStreamFrame:setUnidirectional(boolean), RecyclableArrayList:checkNullElements(Collection), HttpResponseDecoder:<init>(), NioServerSocketChannel:<init>(), AbstractServerChannel:doWrite(ChannelOutboundBuffer), ChannelHandlerInvokerUtil:invokeChannelReadNow(ChannelHandlerContext-Object), Bzip2DivSufSort$TRBudget:<init>(int-int), Native:eventFd(), ChannelHandlerInvokerUtil:invokeUserEventTriggeredNow(ChannelHandlerContext-Object), Lz4FrameEncoder:ctx(), DefaultBinaryHeaders:set(Object-Object), HttpContentDecoder:getTargetContentEncoding(String), EmptyHttpHeaders:addObject(CharSequence-Object[]), MqttDecoder$DecoderState:ordinal(), PoolArena$HeapArena:memoryCopy(Object-int-Object-int-int), EpollServerSocketChannelConfig:setBacklog(int), MessageAggregator:isStartMessage(Object), WebSocket13FrameDecoder:<init>(boolean-boolean-int-boolean), SimpleChannelInboundHandler:messageReceived(ChannelHandlerContext-Object), EpollDomainSocketChannel:localAddress0(), AbstractEpollChannel:<init>(Channel-int-int-boolean), Attribute:duplicate(), HttpPostRequestEncoder:initMixedMultipart(), DelegatingDecompressorFrameListener$Http2Decompressor:decompressor(), DefaultTextHeaders:add(CharSequence-CharSequence), PausableChannelEventExecutor:execute(Runnable), ReplayingDecoderBuffer:writeMedium(int), DefaultProgressivePromise:executor(), SSLSession:removeValue(String), GlobalChannelTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext), WebSocketServerProtocolHandler$1:channelRead(ChannelHandlerContext-Object), DnsNameResolverGroup:<init>(Class-Iterable), ServerBootstrap$ServerBootstrapAcceptor$1:operationComplete(ChannelFuture), DnsType:valueOf(int), Native:setTcpKeepIntvl(int-int), ChannelHandlerContext:fireChannelActive(), IdleStateHandler:getAllIdleTimeInMillis(), Bootstrap:connect(SocketAddress), ChannelPromise:setSuccess(), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:setTimeZone(TimeZone), MemoryAttribute:<init>(String-String-Charset), DefaultTextHeaders:set(Object-Iterable), HttpPostRequestEncoder$WrappedFullHttpRequest:setMethod(HttpMethod), Socks5AuthMethod:<init>(int-String), AbstractBootstrap:localAddress(int), Utf8FrameValidator:channelRead(ChannelHandlerContext-Object), DnsResponseHeader:setType(int), DefaultChannelHandlerInvoker:<init>(EventExecutor), DefaultSpdyHeaders:setInt(Object-int), DefaultBinaryMemcacheRequest:setMagic(byte), DnsQueryHeader:setOpcode(int), UnpooledHeapByteBuf:array(), OioSocketChannel:newPromise(), PrimitiveCollections$UnmodifiableIntObjectMap:iterator(), DelegatingDecompressorFrameListener$Http2Decompressor:<init>(DelegatingDecompressorFrameListener$Http2Decompressor), SctpServerChannel:unbindAddress(InetAddress), MpscLinkedQueue:containsAll(Collection), DefaultCookie:toString(), LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), AsciiString:indexOf(CharSequence), HttpClientCodec:access$100(HttpClientCodec), SslHandler:setHandshakeFailure(ChannelHandlerContext-Throwable), EpollDatagramChannelConfig:getWriteSpinCount(), DefaultDatagramChannelConfig:setOption(ChannelOption-Object), ResourceLeakDetector$Level:<clinit>(), InboundHttp2ToHttpAdapter:onRstStreamRead(ChannelHandlerContext-int-long), NioUdtAcceptorChannel:filterOutboundMessage(Object), SpdyFrameEncoder:encodeSynReplyFrame(ByteBufAllocator-int-boolean-ByteBuf), OpenSslContext:toNegotiator(ApplicationProtocolConfig-boolean), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise-Object), DefaultConvertibleHeaders:getAndConvert(Object), Http2FrameWriter:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), DefaultTextHeaders:setInt(Object-int), WrappedByteBuf:equals(Object), MqttSubAckPayload:<init>(int[]), ChannelHandlerAppender:<init>(boolean-ChannelHandler[]), DefaultEventLoopGroup:<init>(int), StompSubframeDecoder:state(), EpollServerChannelConfig:setWriteBufferHighWaterMark(int), ReadOnlyByteBuf:memoryAddress(), SpdySession$StreamState:putPendingWrite(SpdySession$PendingWrite), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:clear(), MqttCodecUtil$1:<clinit>(), SctpChannel:getOption(SctpSocketOption), DefaultChannelConfig:getMessageSizeEstimator(), Socks5PasswordAuthRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List), NioUdtByteConnectorChannel:doClose(), GlobalChannelTrafficShapingHandler:channelTrafficCounters(), DefaultSpdyHeaders:add(Object-Iterable), DefaultChannelPipeline:addBefore0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext), MqttUnsubscribeMessage:fixedHeader(), AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel), EpollChannelConfig:setWriteBufferHighWaterMark(int), JdkSslSession:getValue(String), HttpHeadersEncoder:c2b(char), DefaultSpdySynStreamFrame:setAssociatedStreamId(int), AbstractTrafficShapingHandler$ReopenReadTimerTask:run(), ConcurrentHashMapV8$MapReduceValuesTask:firstComplete(), ReadTimeoutException:<init>(), UnpooledDirectByteBuf:getBytes(int-OutputStream-int), OpenSslEngine$1:getSessionContext(), Lz4FrameDecoder$1:<clinit>(), OioSocketChannel$1:run(), DefaultCookie:isSecure(), CompositeByteBuf:readBytes(OutputStream-int), DefaultSpdySynStreamFrame:setInvalid(), DefaultHttp2Headers:path(), AbstractServerChannel:<clinit>(), JcaContentSignerBuilder:build(PrivateKey), ByteBuf:markReaderIndex(), DefaultHeaders:get(Object), DefaultUdtChannelConfig:getSystemSendBufferSize(), UnpooledUnsafeDirectByteBuf:ensureAccessible(), OpenSslClientContext$OpenSslClientSessionContext:setSessionTimeout(int), NioDatagramChannelConfig:getNetworkInterface(), Unsafe:getLongVolatile(Object-long), AbstractNioByteChannel:newDirectBuffer(ByteBuf), DefaultSctpServerChannelConfig:setOption(ChannelOption-Object), Http2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), WebSocketServerHandshaker13:newWebSocketEncoder(), UnpooledUnsafeDirectByteBuf:readBytes(ByteBuffer), ForkJoinPool$EmptyTask:setRawResult(Object), DefaultHeaders:containsBoolean(Object-boolean), RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage), WebSocketFrameAggregator:isStartMessage(WebSocketFrame), OpenSslSessionContext:stats(), EpollServerDomainSocketChannel:<init>(), DnsNameResolverContext:onResponseCNAME(DnsQuestion-DnsResponse), Unpooled:copiedBuffer(CharSequence-int-int-Charset), AbstractEpollServerChannel:config(), ProtocolFamilyConverter:convert(InternetProtocolFamily), FixedCompositeByteBuf:nioBufferCount(), MqttEncoder:encodeConnectMessage(ByteBufAllocator-MqttConnectMessage), UnpooledHeapByteBuf:_getInt(int), MqttVersion[]:clone(), EmptyByteBuf:nioBuffers(int-int), Socks5CommandType:toString(), CompositeByteBuf:checkComponentIndex(int-int), Native:setTcpCork(int-int), AbstractOioMessageChannel:setReadPending(boolean), OpenSslX509Certificate:getNonCriticalExtensionOIDs(), GlobalEventExecutor:purgeCancelledScheduledTasks(), HttpClientUpgradeHandler$UpgradeCodec:protocol(), OioDatagramChannel:doDisconnect(), SctpMessage:toString(), ForkJoinTask$ExceptionNode:<init>(ForkJoinTask-Throwable-ForkJoinTask$ExceptionNode), AbstractNioChannel$AbstractNioUnsafe:isFlushPending(), CompositeByteBuf:setZero(int-int), DefaultHttp2ConnectionDecoder$FrameReadListener:<init>(DefaultHttp2ConnectionDecoder), PausableChannelEventExecutor$ChannelRunnableEventExecutor:<init>(Channel-Runnable), DefaultTextHeaders$DefaultTextValueTypeConverter:convertBoolean(boolean), ByteBuf:writeBytes(byte[]-int-int), WebSocket07FrameDecoder:<init>(boolean-boolean-int), Bootstrap:connect(String-int), SingleThreadEventExecutor:removeShutdownHook(Runnable), AbstractNioChannel:<init>(Channel-SelectableChannel-int), DefaultChannelPipeline:access$000(DefaultChannelPipeline-AbstractChannelHandlerContext-String-AbstractChannelHandlerContext), BinaryMemcacheRequest:setTotalBodyLength(int), WrappedByteBuf:isWritable(), MessageAggregator:isContentMessage(Object), AbstractByteBuf:compareTo(ByteBuf), SpdyCodecUtil:validateHeaderValue(CharSequence), LocalServerChannel:serve(LocalChannel), Recycler:access$000(Recycler), SwappedByteBuf:getMedium(int), OioByteStreamChannel$2:write(int), EmptyByteBuf:setBytes(int-byte[]-int-int), DefaultChannelConfig:getConnectTimeoutMillis(), Future:cause(), AbstractInternalLogger:debug(String-Object[]), PlatformDependent:<init>(), AbstractEpollStreamChannel$EpollStreamUnsafe$1:<init>(AbstractEpollStreamChannel$EpollStreamUnsafe-SocketAddress), AbstractNioChannel:newDirectBuffer(ByteBuf), ByteBuf:setBytes(int-ByteBuf), WebSocketServerHandshaker08:newHandshakeResponse(FullHttpRequest-HttpHeaders), PendingWriteQueue:removeAndFailAll(Throwable), ChannelFutureListener$2:<init>(), EmptyHeaders:addShort(Object-short), GlobalTrafficShapingHandler:setTrafficCounter(TrafficCounter), DefaultHeaders:setByte(Object-byte), NioUdtMessageConnectorChannel:isActive(), WebSocketServerHandshaker00:selectSubprotocol(String), TextWebSocketFrame:text(), SslHandler:isEncrypted(ByteBuf), DefaultSpdyPingFrame:setId(int), AbstractByteBufAllocator:ioBuffer(int), EmptyTextHeaders:addByte(CharSequence-byte), SpdyHeaderBlockRawEncoder:<init>(SpdyVersion), PoolThreadCache$NormalMemoryRegionCache:initBuf(PoolChunk-long-PooledByteBuf-int), AbstractNioMessageChannel$NioMessageUnsafe:removeReadOp(), HttpObjectDecoder:readTrailingHeaders(ByteBuf), DefaultProgressivePromise:checkDeadLock(), JdkSslEngine:getSession(), CompositeByteBuf:_getShort(int), DefaultHttp2FrameReader:processHeaderState(ByteBuf), EmptyTextHeaders:set(TextHeaders), DefaultFutureListeners:size(), EmptyBinaryHeaders:setByte(Object-byte), DefaultSpdyPingFrame:<init>(int), DefaultTextHeaders:addDouble(Object-double), SpdyHeaderBlockRawDecoder$State:<clinit>(), DnsQuestion:type(), NameResolverGroup:getResolver0(EventExecutor), Http2Headers:set(AsciiString-AsciiString), SpdySynStreamFrame:isTruncated(), ConcurrentHashMapV8:batchFor(long), HttpRequestEncoder:<init>(), NioSctpChannel:alloc(), ByteBufUtil:hashCode(ByteBuf), FixedCompositeByteBuf:getByte(int), MpscLinkedQueue:remove(), InboundHttp2ToHttpAdapter$Builder:<init>(Http2Connection), DefaultHttp2FrameWriter:<init>(), ByteBuf:getDouble(int), AbstractEpollStreamChannel:writeBytes(ChannelOutboundBuffer-ByteBuf-int), DiskAttribute:getName(), SpdyHttpHeaders$Names:<init>(), Socks5CommandResponse:bndAddr(), DefaultChannelHandlerInvoker$6:run(), NioDatagramChannel:<init>(InternetProtocolFamily), InterfaceHttpPostRequestDecoder:getBodyHttpData(String), StompHeaders:add(CharSequence-CharSequence), QueryStringEncoder:<init>(String-Charset), DefaultChannelPipeline:destroyUp(AbstractChannelHandlerContext), GlobalChannelTrafficShapingHandler:setMaxGlobalWriteSize(long), HttpRequest:setUri(String), EventExecutor:shutdownGracefully(), DefaultSocks5InitialRequest:toString(), ChannelHandlerContext:fireExceptionCaught(Throwable), Unpooled:unreleasableBuffer(ByteBuf), ChannelTrafficShapingHandler:<init>(long-long-long-long), AbstractInternalLogger:error(String-Throwable), DefaultHttp2ConnectionDecoder$Builder:encoder(Http2ConnectionEncoder), AbstractChannelHandlerContext:invoker(), ByteBuf:readerIndex(int), AbstractByteBufAllocator:directBuffer(int), DefaultBinaryHeaders$2:convertInt(int), MqttPublishMessage:touch(Object), JdkSslContext:isServer(), SpdyHeaders:setInt(CharSequence-int), InternalThreadLocalMap:localChannelReaderStackDepth(), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), OpenSslEngine:setNeedClientAuth(boolean), ReplayingDecoderBuffer:bytesBefore(int-byte), ChannelOutboundBuffer:nioBufferSize(), MpscLinkedQueue:<init>(), EmptyBinaryHeaders:setDouble(Object-double), HttpChunkedInput:isEndOfInput(), DnsQueryEncoder:encodeHeader(DnsHeader-ByteBuf), MessageLite$Builder:mergeFrom(byte[]-int-int), DnsServerAddresses$SequentialAddressIterator:remove(), DefaultHeaders:getBoolean(Object), EmptyBinaryHeaders:addFloat(Object-float), DefaultTextHeaders:setChar(CharSequence-char), ConcurrentHashMapV8$MapReduceMappingsToIntTask:addToPendingCount(int), AbstractDerivedByteBuf:<init>(int), AdvancedLeakAwareByteBuf:getBytes(int-ByteBuffer), PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int), WebSocketClientHandshaker:newWebsocketDecoder(), NioSctpServerChannel$NioSctpServerChannelConfig:<init>(NioSctpServerChannel-NioSctpServerChannel-SctpServerChannel-NioSctpServerChannel$1), EpollEventLoop:delayNanos(long), SwappedByteBuf:readDouble(), DefaultProgressivePromise:removeListener(GenericFutureListener), CompositeByteBuf:consolidateIfNeeded(), Http2Connection:addListener(Http2Connection$Listener), DefaultHttp2LocalFlowController:access$400(DefaultHttp2LocalFlowController), EmptyHttpHeaders:set(CharSequence-Iterable), Socks5PasswordAuthResponseDecoder$State:values(), PausableChannelEventExecutor:inEventLoop(), Socks5AuthMethod:<init>(int), ConcurrentHashMapV8$ObjectToInt:apply(Object), DiskFileUpload:length(), PlatformDependent:<clinit>(), PoolChunk:allocateSubpage(int), Http2ServerUpgradeCodec:decodeSettingsHeader(ChannelHandlerContext-CharSequence), DefaultSctpChannelConfig:getOption(ChannelOption), AbstractReferenceCountedByteBuf:writeFloat(float), Http2Settings:keyToString(int), Deflater:<init>(), PingWebSocketFrame:<init>(boolean-int-ByteBuf), PausableChannelEventExecutor:shutdownNow(), AbstractTrafficShapingHandler:<init>(long-long), ScheduledFutureTask:isCancelled(), ChannelUDT:socketUDT(), BufferRecycler:instance(), EventExecutor:invokeAny(Collection), HttpClientUpgradeHandler$SourceCodec:upgradeFrom(ChannelHandlerContext), InternalLogLevel:<init>(String-int), CommonsLogger:error(String-Object[]), DefaultFullHttpRequest:retain(int), DefaultStompHeaders:set(CharSequence-CharSequence[]), EmptyByteBuf:setBytes(int-byte[]), DnsServerAddresses$ShuffledAddressIterator:<init>(InetSocketAddress[]), WrappedByteBuf:readBytes(ByteBuf-int-int), ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf), DefaultOioServerSocketChannelConfig:validate(ChannelOption-Object), BinaryMemcacheResponse:totalBodyLength(), AbstractDiskHttpData:renameTo(File), InternalThreadLocalMap:setIndexedVariable(int-Object), AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), MpscLinkedQueue:headRef(), WrappedByteBuf:forEachByteDesc(ByteBufProcessor), SlicedByteBuf:_getShort(int), DefaultHttp2FrameReader:readSettingsFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttpDataFactory:getList(HttpRequest), ChunkedStream:<init>(InputStream), EpollServerSocketChannelConfig:setWriteBufferHighWaterMark(int), SslHandler$7:operationComplete(ChannelFuture), EmptyBinaryHeaders:setFloat(Object-float), MixedAttribute:get(), UnpooledUnsafeDirectByteBuf:addr(int), ForkJoinPool:incrementActiveCount(), ChannelPipelineException:<init>(String-Throwable), ThreadLocalUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), DefaultChannelHandlerInvoker$15:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), SingleThreadEventLoop:next(), ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Action), DefaultRxtxChannelConfig:getOptions(), LocalChannel$State[]:clone(), AbstractByteBuf:readBytes(ByteBuf), Http2ConnectionDecoder:connection(), DefaultHeaders:clear(), ByteBuf:readShort(), ApplicationProtocolConfig$SelectorFailureBehavior[]:clone(), ObjectDecoder:<init>(ClassResolver), DefaultChannelPipeline:fireChannelRegistered(), AbstractChannel$AbstractUnsafe:write(Object-ChannelPromise), DefaultChannelPipeline:addFirst(EventExecutorGroup-String-ChannelHandler), SwappedByteBuf:getByte(int), AbstractOioByteChannel:checkInputShutdown(), MqttEncoder:encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(ByteBufAllocator-MqttMessage), WebSocketServerHandshaker08:newWebSocketEncoder(), Headers$ValueConverter:convertToFloat(Object), OioSctpServerChannel:doWrite(ChannelOutboundBuffer), PausableChannelEventExecutor$ChannelCallableEventExecutor:executor(), DefaultSctpChannelConfig:setSctpNoDelay(boolean), IdleState:values(), PooledByteBufAllocator:newDirectBuffer(int-int), DefaultTextHeaders$2:generateHashCode(Object), DefaultHeaders$HeaderEntry:remove(), EmptyHttpHeaders:setTimeMillis(Object-long), Promise:setFailure(Throwable), ChannelHandlerInvokerUtil:<init>(), DefaultHttpHeaders:add(Object-Object), ForkJoinTask:reportException(int), Socks5PasswordAuthResponseDecoder:state(), HashedWheelTimer$Worker:unprocessedTimeouts(), UnsafeDirectSwappedByteBuf:getShort(int), SpdyOrHttpChooser:getProtocol(SSLEngine), DefaultHttpDataFactory:createAttribute(HttpRequest-String-String), OioSctpChannel:doBind(SocketAddress), AbstractChannel$AbstractUnsafe:access$100(AbstractChannel$AbstractUnsafe-ChannelPromise), CompleteFuture:addListeners(GenericFutureListener[]), DefaultLastMemcacheContent:retain(), ChannelOption:valueOf(String), ForkJoinPool:execute(ForkJoinTask), DnsResponse:header(), EmptyHttpHeaders:setShort(CharSequence-short), SpdyHttpDecoder:<init>(SpdyVersion-int-boolean), UnpooledUnsafeDirectByteBuf:alloc(), UnpaddedInternalThreadLocalMap:<clinit>(), WebSocketServerExtensionHandler:write(ChannelHandlerContext-Object-ChannelPromise), EventLoop:isShutdown(), EmptyByteBuf:getLong(int), AbstractByteBuf:slice(int-int), BinaryMemcacheMessage:totalBodyLength(), ConcurrentHashMapV8$MapReduceKeysToLongTask:firstComplete(), AbstractFuture:await(long-TimeUnit), LocalServerChannel:doRegister(), DefaultFullBinaryMemcacheResponse:copy(), BinaryMemcacheObjectAggregator:isStartMessage(MemcacheObject), Socks4CommandType:compareTo(Socks4CommandType), MpscLinkedQueueHeadRef:<init>(), IntObjectHashMap$IteratorImpl:hasNext(), DefaultFullBinaryMemcacheRequest:extras(), BinaryWebSocketFrame:touch(), LocalChannel:doRegister(), AbstractByteBuf:writeBytes(ScatteringByteChannel-int), DefaultTextHeaders:set(TextHeaders), DefaultBinaryHeaders$2:convertToDouble(Object), Attribute:isCompleted(), DelegatingDecompressorFrameListener:nextReadableBuf(EmbeddedChannel), SSL:writeToBIO(long-long-int), ChannelPipeline:remove(ChannelHandler), ObjectEncoderOutputStream:writeChar(int), Log:isErrorEnabled(), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), WebSocketExtensionData:<init>(String-Map), JdkBaseApplicationProtocolNegotiator$2:<init>(), DefaultTextHeaders$SingleHeaderValuesComposer:charSequenceEscaper(), HttpResponseDecoder:createMessage(String[]), JdkSslSession:getPeerPrincipal(), ReplayingDecoderBuffer:isDirect(), SimpleTrustManagerFactory:engineGetTrustManagers(), DefaultChannelGroupFuture:sync(), LocalChannel$3:run(), NioDatagramChannel:isRegistered(), AbstractEpollStreamChannel$EpollStreamUnsafe:ensureOpen(ChannelPromise), PooledUnsafeDirectByteBuf:array(), HttpServerCodec:upgradeFrom(ChannelHandlerContext), AbstractOioByteChannel:filterOutboundMessage(Object), OioSctpChannel$OioSctpChannelConfig:<init>(OioSctpChannel-OioSctpChannel-SctpChannel), AbstractDiskHttpData:get(), ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int), BouncyCastleSelfSignedCertGenerator:<init>(), EpollEventLoopGroup:newChild(Executor-Object[]), AbstractScheduledEventExecutor:isNullOrEmpty(Queue), HttpResponse:setStatus(HttpResponseStatus), LastMemcacheContent$1:<init>(), AbstractBinaryMemcacheDecoder$State:<init>(String-int), InboundHttp2ToHttpPriorityAdapter:getActiveHeaders(FullHttpMessage), PingWebSocketFrame:copy(), Socks4ServerDecoder$State:ordinal(), ConcurrentHashMapV8$ForEachKeyTask:advance(), DefaultSocks5PasswordAuthRequest:toString(), BinaryMemcacheRequest:setKeyLength(short), NioDatagramChannel:<clinit>(), CompositeByteBuf:internalComponentAtOffset(int), Http2Headers:authority(AsciiString), EventExecutor:next(), DefaultSctpChannelConfig:setWriteBufferLowWaterMark(int), SctpServerChannelConfig:getBacklog(), HAProxyProxiedProtocol$AddressFamily[]:clone(), JdkLogger:error(String-Throwable), DefaultHttp2FrameReader:readWindowUpdateFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), WebSocketClientHandshaker13:expectedSubprotocol(), MqttMessageIdVariableHeader:<init>(int), AbstractChannel$AbstractUnsafe$4:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), NioEventLoop:rebuildSelector(), ReplayingDecoderBuffer:setChar(int-int), ByteBuf:getBytes(int-ByteBuffer), EpollDatagramChannelConfig:setWriteSpinCount(int), DefaultChannelPromise:setFailure(Throwable), PendingWriteQueue$PendingWrite:access$100(PendingWriteQueue$PendingWrite), DefaultSocks4CommandRequest:decoderResult(), DecompressionException:<init>(String), JdkNpnApplicationProtocolNegotiator:wrapperFactory(), TrafficCounter:start(), SctpMessage:content(), LocalChannel:doWrite(ChannelOutboundBuffer), InternalThreadLocalMap:expandIndexedVariableTableAndSet(int-Object), WebSocketServerHandshaker$2:channelInactive(ChannelHandlerContext), DefaultHeaders:addObject(Object-Object[]), SpdyDataFrame:setLast(boolean), ProxyHandler$LazyChannelPromise:isDone(), SystemPropertyUtil$1:<init>(String), ThreadDeathWatcher:access$100(), JdkSslServerContext:buildTrustManagerFactory(File-TrustManagerFactory), SwappedByteBuf:writeBytes(ScatteringByteChannel-int), CompatibleObjectEncoder:<init>(int), DefaultProgressivePromise:await(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf-boolean), EpollChannelConfig$1:<clinit>(), MessageLite:newBuilderForType(), NioEventLoop:processSelectedKeysOptimized(SelectionKey[]), CompleteFuture:<init>(EventExecutor), Native:writev0(int-ByteBuffer[]-int-int), AbstractChannel$AbstractUnsafe$4:run(), DefaultHttp2FrameWriter:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), AbstractEpollStreamChannel:doWriteMultiple(ChannelOutboundBuffer-int), ChannelHandlerInvokerUtil:invokeExceptionCaughtNow(ChannelHandlerContext-Throwable), SwappedByteBuf:getLong(int), EpollServerSocketChannel:newChildChannel(int-byte[]-int-int), DefaultTextHeaders:addObject(CharSequence-Iterable), Attribute:getChunk(int), SwappedByteBuf:bytesBefore(int-int-byte), AbstractEpollServerChannel:filterOutboundMessage(Object), PooledHeapByteBuf:setRefCnt(int), ChannelOutboundHandlerAdapter:<init>(), DefaultConvertibleHeaders:access$100(DefaultConvertibleHeaders), SctpChannel:receive(ByteBuffer-Object-NotificationHandler), NioServerSocketChannel:doWriteMessage(Object-ChannelOutboundBuffer), DefaultProgressivePromise:sync(), FileUpload:release(int), StringUtil:<clinit>(), EmptyByteBuf:ensureWritable(int-boolean), HttpServerUpgradeHandler$UpgradeCodec:prepareUpgradeResponse(ChannelHandlerContext-FullHttpRequest-FullHttpResponse), ForkJoinPool$WorkQueue:push(ForkJoinTask), Native:epollout(), InternalThreadLocalMap:isIndexedVariableSet(int), EmptyByteBuf:bytesBefore(int-int-byte), FileUpload:getString(), AsciiString:parseInt(int), PausableChannelEventExecutor:parent(), DefaultHttp2Headers:addTimeMillis(Object-long), CompositeByteBuf:addComponent(int-ByteBuf), ChannelConfig:getConnectTimeoutMillis(), DefaultChannelGroupFuture:tryFailure(Throwable), WrappedByteBuf:setInt(int-int), EpollDomainSocketChannelConfig:setAllocator(ByteBufAllocator), Socks4CommandRequest:version(), InternalThreadLocalMap:removeIndexedVariable(int), NioEventLoopGroup:setIoRatio(int), HAProxyMessage:checkPort(int), WebSocketClientCompressionHandler:<init>(), ConstantPool:<init>(), MultithreadEventExecutorGroup:next(), DefaultStompFrame:touch(), CommonsLogger:warn(String-Object[]), MpscLinkedQueueNode:unlink(), HttpPostRequestEncoder$WrappedFullHttpRequest:content(), AdvancedLeakAwareByteBuf:setBytes(int-byte[]-int-int), AbstractNioChannel:<clinit>(), AbstractByteBuf:maxCapacity(), HttpContentEncoder:ensureContent(HttpObject), Http2OrHttpChooser$1:<clinit>(), JdkZlibEncoder$2:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), OpenSslEngine$1:putValue(String-Object), ChannelFuture:removeListener(GenericFutureListener), LocalChannelRegistry:<init>(), HttpObjectDecoder:isDecodingRequest(), MemoryFileUpload:retain(int), HttpPostBodyUtil$TransferEncodingMechanism:valueOf(String), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<clinit>(), Lz4FrameDecoder$State:values(), ConcurrentHashMapV8:<init>(int-float-int), EmptyBinaryHeaders:addObject(Object-Object), PooledByteBuf:readerIndex(), AdvancedLeakAwareByteBuf:writeBytes(ByteBuf-int-int), ChunkedStream:close(), ByteBufUtil$ThreadLocalDirectByteBuf$1:<init>(), ReplayingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), OioSocketChannel:doReadBytes(ByteBuf), CompositeByteBuf:_setShort(int-int), Http2ConnectionEncoder:remoteSettings(Http2Settings), PerMessageDeflateEncoder:encode(ChannelHandlerContext-Object-List), ConcurrentHashMapV8:replace(Object-Object-Object), AbstractChannel:bind(SocketAddress), EventLoop:next(), SwappedByteBuf:alloc(), TrafficCounter:configure(long), DefaultChannelPipeline$6:run(), HttpObjectAggregator$AggregatedFullHttpRequest:protocolVersion(), Http2LifecycleManager:closeRemoteSide(Http2Stream-ChannelFuture), JsonObjectDecoder:<init>(int-boolean), CtClass:getModifiers(), AttributeKey:valueOf(String), Socks5InitialRequestDecoder$State[]:clone(), IntObjectHashMap:hashIndex(int), ThreadLocalRandom:access$002(long), TrafficCounter:writeTimeToWait(long-long-long-long), DefaultHeaders:getDouble(Object-double), ObjectDecoderInputStream:readBoolean(), ChannelMatchers:compose(ChannelMatcher[]), OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise), WebSocketServerHandshakerFactory:sendUnsupportedVersionResponse(Channel), InternalThreadLocalMap:setFutureListenerStackDepth(int), ConcurrentHashMapV8$TreeNode:find(int-Object), UnsupportedMessageTypeException:<init>(Throwable), WrappedByteBuf:getByte(int), FormattingTuple:getThrowable(), DefaultBinaryMemcacheResponse:retain(), StompSubframeAggregator:newContinueResponse(StompHeadersSubframe), Socks4CommandType:<init>(int), HttpPostRequestEncoder$WrappedHttpRequest:uri(), JdkSslEngine:getHandshakeSession(), LoggingHandler:flush(ChannelHandlerContext), SwappedByteBuf:writeInt(int), ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise), SwappedByteBuf:writeBytes(byte[]-int-int), PrimitiveCollections$UnmodifiableIntObjectMap:keys(), CorsConfig:withAnyOrigin(), ThreadDeathWatcher:<init>(), SwappedByteBuf:getUnsignedByte(int), CompositeByteBuf:discardSomeReadBytes(), ChannelOutboundBuffer:<clinit>(), DefaultPromise:incWaiters(), PausableChannelEventExecutor:invokeChannelRegistered(ChannelHandlerContext), RtspResponseDecoder:createMessage(String[]), SpdyDataFrame:release(), HttpClientCodec$Decoder:channelInactive(ChannelHandlerContext), AbstractNioChannel:newDirectBuffer(ReferenceCounted-ByteBuf), WebSocketServerHandshaker:newHandshakeResponse(FullHttpRequest-HttpHeaders), DefaultChannelGroupFuture$1:operationComplete(ChannelFuture), Base64:decode(ByteBuf-Base64Dialect), DefaultHttp2Connection$DefaultStream:access$1200(DefaultHttp2Connection$DefaultStream), Http2ConnectionHandler:onStreamError(ChannelHandlerContext-Throwable-Http2Exception$StreamException), DefaultExecutorServiceFactory$DefaultForkJoinWorkerThreadFactory:<init>(String), ReadOnlyByteBuf:_getShort(int), Http2OrHttpChooser$SelectedProtocol:valueOf(String), AbstractEpollStreamChannel:isActive(), UnpooledUnsafeDirectByteBuf:memoryAddress(), CorsHandler:<init>(CorsConfig), AbstractBootstrap:attr(AttributeKey-Object), EpollDatagramChannel:access$202(EpollDatagramChannel-boolean), RxtxChannelConfig$Paritybit:values(), DefaultBinaryMemcacheResponse:release(), PoolArena$DirectArena:memoryCopy(Object-int-Object-int-int), Attribute:setIfAbsent(Object), RxtxChannel:newUnsafe(), Channel:isRegistered(), DefaultDatagramChannelConfig:isBroadcast(), AsciiString:indexOf(CharSequence-int), DatagramChannelConfig:getMaxMessagesPerRead(), StompHeaders:getLong(Object-long), WriteTimeoutException:<init>(), DefaultStompFrame:release(int), Http2Flags:paddingPresent(boolean), Http2FrameListener:onRstStreamRead(ChannelHandlerContext-int-long), VoidChannelPromise:<init>(Channel-boolean), EpollDatagramChannel:joinGroup(InetAddress), EpollSocketChannel:newPromise(), TextWebSocketFrame:<init>(boolean-int-String), EmptyHttpHeaders:setByte(Object-byte), LocalChannel$LocalUnsafe:close(ChannelPromise), JdkZlibEncoder:<init>(ZlibWrapper-int), Socks5PasswordAuthStatus:toString(), FailedFuture:syncUninterruptibly(), EmptyConvertibleHeaders:getAllAndRemoveAndConvert(Object), DefaultHttpHeaders:add(Object-Iterable), DefaultStompHeaders:addTimeMillis(CharSequence-long), Native:sendfile0(int-DefaultFileRegion-long-long-long), MqttSubAckPayload:<init>(Iterable), SslHandler:read(ChannelHandlerContext), DefaultHttp2RemoteFlowController$FlowState$Frame:decrementPendingBytes(int), UnpooledDirectByteBuf:readBytes(OutputStream-int), FixedCompositeByteBuf:checkIndex(int-int), DnsQueryEncoder:<init>(), JdkZlibEncoder$1:<init>(JdkZlibEncoder-ChannelPromise-ChannelPromise), SpdySession:noActiveStreams(), Socks4CommandResponse:setDecoderResult(DecoderResult), DefaultSctpChannelConfig:getInitMaxStreams(), EmbeddedEventLoop:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), EpollDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress), AbstractDiskHttpData:getChunk(int), NioSctpServerChannel:doFinishConnect(), Bzip2MoveToFrontTable:valueToFront(byte), WrappedByteBuf:setBytes(int-ByteBuf-int-int), PongWebSocketFrame:touch(Object), ObjectDecoderInputStream:mark(int), BinaryMemcacheResponseDecoder:<init>(int), PoolSubpage:findNextAvail0(int-long), SpdyStreamStatus:<init>(int-String), ImmediateEventExecutor:newPromise(), AdvancedLeakAwareByteBuf:readBytes(OutputStream-int), AbstractByteBuf:setBytes(int-InputStream-int), DefaultBinaryHeaders:setChar(AsciiString-char), HttpContent:touch(), IdleStateHandler:access$302(IdleStateHandler-boolean), Slf4JLogger:trace(String), Headers$ValueConverter:convertObject(Object), ByteBuf:setIndex(int-int), EpollDatagramChannel:joinGroup(InetAddress-ChannelPromise), ReadOnlyByteBufferBuf:setBytes(int-InputStream-int), MqttConnectVariableHeader:hasUserName(), AbstractReferenceCounted:touch(Object), PoolThreadCache:free0(), DefaultTextHeaders:addChar(Object-char), MemoryAttribute:equals(Object), SpdySessionStatus:<clinit>(), DefaultChannelHandlerInvoker:invokeChannelRead(ChannelHandlerContext-Object), EventLoopException:<init>(Throwable), EmptyHttpHeaders:addObject(Object-Object), Log4JLoggerFactory:newInstance(String), ForkJoinPool$WorkQueue:growArray(), DnsResponseDecoder:decode(ChannelHandlerContext-DatagramPacket-List), EmptyByteBuf:getChar(int), DefaultMemcacheContent:touch(), OioSctpChannel:isOpen(), DnsNameResolverContext$1:operationComplete(Future), AbstractEventExecutor:newProgressivePromise(), AbstractByteBuf:bytesBefore(byte), PooledDirectByteBuf:checkReadableBytes(int), PooledByteBufAllocator:newArenaArray(int), PendingWriteQueue$PendingWrite:access$000(PendingWriteQueue$PendingWrite), HttpChunkedInput:<init>(ChunkedInput-LastHttpContent), DefaultHttp2ConnectionEncoder$FlowControlledBase:error(Throwable), NioSocketChannel:newUnsafe(), Http2RemoteFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int), Http2OrHttpChooser$SelectedProtocol[]:clone(), HashedWheelTimer$HashedWheelBucket:<init>(), UnsafeAtomicIntegerFieldUpdater:set(Object-int), NioSctpServerChannel:javaChannel(), Inflater:init(JZlib$WrapperType), Http2ConnectionHandler:readClientPrefaceString(ByteBuf), DefaultHeaders$HeaderEntry:addBefore(DefaultHeaders$HeaderEntry), LastStompContentSubframe$1:retain(), ChunkedNioStream:readChunk(ChannelHandlerContext), Channel$Unsafe:deregister(ChannelPromise), ClientCookieEncoder:encode(Cookie), OioSctpServerChannel:filterOutboundMessage(Object), EmptyTextHeaders:setFloat(Object-float), WrappedByteBuf:release(int), ChannelTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), ImmediateExecutor:<clinit>(), DefaultBinaryHeaders:setInt(Object-int), SpdyFrameDecoderDelegate:readDataFrame(int-boolean-ByteBuf), DefaultHttp2RemoteFlowController:<clinit>(), MixedFileUpload:length(), ByteBuf:array(), DnsMessage:touch(), SocketChannelUDT:isConnectFinished(), Attribute:content(), WrappedByteBuf:readShort(), SlicedByteBuf:getBytes(int-GatheringByteChannel-int), ReadOnlyByteBuf:setBytes(int-ByteBuf-int-int), ReadOnlyByteBuf:_getByte(int), AbstractByteBuf:readBytes(ByteBuf-int-int), Http2ConnectionHandler:channelActive(ChannelHandlerContext), DefaultSctpChannelConfig:setAutoRead(boolean), Http2Settings:initialWindowSize(int), DefaultHttp2Headers:status(AsciiString), DefaultUdtChannelConfig:setMaxMessagesPerRead(int), Http2Stream$State[]:clone(), WebSocketFrameAggregator:beginAggregation(WebSocketFrame-ByteBuf), NioDatagramChannel:config(), ByteBuf:bytesBefore(int-int-byte), Socks5InitialRequestDecoder:state(), IntObjectHashMap:containsKey(int), Http2FrameReader$Configuration:frameSizePolicy(), Bootstrap:bind(SocketAddress), ReplayingDecoderBuffer:copy(), Socks5InitialResponseDecoder:actualReadableBytes(), ClientCookieEncoder:<init>(), ForkJoinTask:recordExceptionalCompletion(Throwable), MemoryAttribute:setValue(String), DefaultPromise:access$500(DefaultPromise), ReplayingDecoderBuffer:maxCapacity(), ByteToMessageDecoder:channelInactive(ChannelHandlerContext), ReplayingDecoderBuffer:order(), DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator), Http2FrameWriter:writeSettingsAck(ChannelHandlerContext-ChannelPromise), HttpHeaderValues:<init>(), AbstractDerivedByteBuf:refCnt(), DefaultLastHttpContent:copy(), HAProxyProxiedProtocol:valueOf(byte), MqttVersion:values(), DefaultHttp2HeadersEncoder:encodeHeaders(Http2Headers-ByteBuf), PooledByteBufAllocator:<init>(boolean-int-int-int-int-int-int-int), ConcurrentHashMapV8:tableSizeFor(int), BinaryMemcacheRequest:setCas(long), DefaultConvertibleHeaders$ConvertedEntry:toString(), UnpooledByteBufAllocator:newHeapBuffer(int-int), DefaultSpdyDataFrame:copy(), HttpObjectAggregator:beginAggregation(HttpMessage-ByteBuf), BinaryMemcacheResponseEncoder:encodeHeader(ByteBuf-BinaryMemcacheResponse), WrappedByteBuf:getBytes(int-byte[]), ObjectDecoderInputStream:readShort(), EmptyHttp2Headers:setChar(Object-char), DefaultHttpResponse:equals(Object), FastLzFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ConcurrentHashMapV8$ForEachEntryTask:propagateCompletion(), SwappedByteBuf:readInt(), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), DefaultSpdyHeaders:setFloat(Object-float), OioSctpServerChannel:allLocalAddresses(), UnsafeDirectSwappedByteBuf:getFloat(int), DefaultSpdyRstStreamFrame:streamId(), DefaultHeaders$HeaderEntry:toString(), EpollSocketChannel:<init>(Channel-int-InetSocketAddress), MixedFileUpload:renameTo(File), LineBasedFrameDecoder:findEndOfLine(ByteBuf), JdkAlpnSslEngine:<init>(SSLEngine-JdkApplicationProtocolNegotiator-boolean), OioDatagramChannel:config(), ConcurrentHashMapV8$ObjectByObjectToLong:apply(Object-Object), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8:keys(), JsonObjectDecoder:decodeByte(byte-ByteBuf-int), ThreadDeathWatcher$Watcher:notifyWatchees(), UnsafeDirectSwappedByteBuf:writeShort(int), DefaultTextHeaders:setFloat(Object-float), DefaultSpdyHeaders:setInt(CharSequence-int), OpenSslEngine$1:getLastAccessedTime(), DefaultConvertibleHeaders:addShort(Object-short), WebSocketServerHandshaker00:newWebSocketEncoder(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToFloat(CharSequence), OioSctpChannel:unsafe(), AbstractChannel:parent(), HttpPostStandardRequestDecoder:getBodyHttpDatas(String), DefaultCookie:setValue(String), InternalAttribute:compareTo(InterfaceHttpData), Inflater:inflateInit(JZlib$WrapperType), InternalLogger:log(InternalLogLevel-String-Throwable), ReplayingDecoderBuffer:readBytes(GatheringByteChannel-int), InternalThreadLocalMap:fastGet(FastThreadLocalAccess), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), DefaultCookie:path(), EncoderException:<init>(), AbstractMemoryHttpData:addContent(ByteBuf-boolean), DefaultServerSocketChannelConfig:setBacklog(int), HttpUtil$ExtensionHeaderNames:valueOf(String), DiskFileUpload:retain(), NativeDatagramPacketArray$1:initialValue(), Native:read(int-ByteBuffer-int-int), DelimiterBasedFrameDecoder:indexOf(ByteBuf-ByteBuf), OioSctpChannel:eventLoop(), EmptyConvertibleHeaders:setFloat(Object-float), OioDatagramChannel:unsafe(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:getRawResult(), NioDatagramChannel:newDirectBuffer(ReferenceCounted-ByteBuf), DnsServerAddresses:rotational0(InetSocketAddress[]), DefaultHttp2Connection$DefaultEndpoint:access$200(DefaultHttp2Connection$DefaultEndpoint-int), Bzip2HuffmanAllocator:<init>(), DefaultHeaders:set(Object-Iterable), CompactObjectOutputStream:writeClassDescriptor(ObjectStreamClass), ChannelHandlerAdapter:deregister(ChannelHandlerContext-ChannelPromise), ByteBuf:getShort(int), AbstractByteBuf:_getInt(int), PlatformDependent:getInt(Object-long), IntObjectHashMap:get(int), DefaultHttp2FrameReader$4:<clinit>(), ServerBootstrap:access$000(), AbstractEpollStreamChannel$EpollStreamUnsafe:fulfillConnectPromise(ChannelPromise-boolean), PrimitiveCollections$EmptyIntObjectMap:entries(), SpdyHeaderBlockEncoder:end(), IdentityCipherSuiteFilter:<init>(), ForkJoinTask:<clinit>(), SwappedByteBuf:arrayOffset(), Utf8Validator:<init>(), WebSocketExtensionData:parameters(), DefaultOioServerSocketChannelConfig:setWriteSpinCount(int), HttpContentEncoder:<init>(), FullHttpRequest:retain(int), FileUpload:getCharset(), EmptyConvertibleHeaders:setDouble(Object-double), SwappedByteBuf:writeBytes(ByteBuffer), ThreadLocalRandom:newSeed(), MqttIdentifierRejectedException:<init>(String-Throwable), ReplayingDecoderBuffer:getBytes(int-ByteBuffer), SocketChannelUDT:write(ByteBuffer[]), OioServerSocketChannelConfig:getBacklog(), DomainSocketAddress:<init>(File), IovArray:<clinit>(), Bootstrap:options(), ConcurrentHashMapV8$ForEachKeyTask:compute(), DefaultChannelPipeline$TailContext:write(ChannelHandlerContext-Object-ChannelPromise), IdleStateHandler:channelRegistered(ChannelHandlerContext), HttpContentEncoder$Result:contentEncoder(), DefaultBinaryHeaders$4:convertName(Object), NioServerSocketUDT:isBound(), SpdyWindowUpdateFrame:deltaWindowSize(), Socks5ProxyHandler:removeDecoder(ChannelHandlerContext), SpdyRstStreamFrame:status(), InternalLoggerFactory:getDefaultFactory(), Attribute:release(), NioSctpChannel:doClose(), HttpResponseStatus:codeClass(), DefaultFullBinaryMemcacheRequest:duplicate(), Channel$Unsafe:remoteAddress(), AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise), ThreadLocalRandom:access$200(), Http2Exception:streamError(int-Http2Error-String-Object[]), ReadOnlyByteBufferBuf:getBytes(int-ByteBuffer), AbstractByteBuf:<clinit>(), EmbeddedChannel:ensureOpen(), Native:eventFdRead(int), AbstractNioChannel$NioUnsafe:recvBufAllocHandle(), BinaryMemcacheRequest:magic(), MqttConnectReturnCode:<clinit>(), DefaultStompHeaders:addChar(CharSequence-char), DefaultFullBinaryMemcacheRequest:retain(), PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:hasNext(), HAProxyProtocolVersion:values(), WebSocketServerExtensionHandler:<init>(WebSocketServerExtensionHandshaker[]), JZlibEncoder:<init>(ZlibWrapper), SpdySessionHandler$2:<init>(SpdySessionHandler-ChannelHandlerContext), HttpPostMultipartRequestDecoder:cleanMixedAttributes(), StompSubframeDecoder$State:<init>(String-int), ChannelPipeline:fireChannelWritabilityChanged(), PlatformDependent:newAtomicLongFieldUpdater(Class-String), SpdyFrameCodec:readDataFrame(int-boolean-ByteBuf), RtspResponseDecoder:<init>(int-int-int), DnsEntry:equals(Object), DefaultPromise:isDone(), FastLzFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), CommonsLogger:debug(String-Object), CorsConfig:origins(), Http2ConnectionHandler:handlerAdded(ChannelHandlerContext), EpollServerChannelConfig:setWriteBufferLowWaterMark(int), DnsClass:name(), SpdyFrameDecoderDelegate:readHeaderBlock(ByteBuf), MarshallingDecoder:decode(ChannelHandlerContext-ByteBuf), SctpInboundByteStreamHandler:acceptInboundMessage(SctpMessage), EpollSocketChannel:shutdownOutput(ChannelPromise), ThreadLocalRandom:nextLong(long), DefaultHttpHeaders:<init>(), ProxyHandler:setConnectSuccess(), ResourceLeakDetector:newRecord(Object-int), HttpObjectDecoder:<init>(int-int-int-boolean), WrappedByteBuf:toString(int-int-Charset), DefaultSpdyHeaders:addDouble(CharSequence-double), NioEventLoop:confirmShutdown(), Native:setSendBufferSize(int-int), Channel:connect(SocketAddress-SocketAddress-ChannelPromise), AbstractChannelHandlerContext$PausableChannelEventExecutor0:unwrap(), NioSocketChannel:<init>(SelectorProvider), ClientCookieDecoder$CookieBuilder:mergeMaxAgeAndExpire(long-String), AsciiString:trim(), AbstractByteBuf:getBytes(int-ByteBuf-int-int), CorsHandler:forbidden(ChannelHandlerContext-HttpRequest), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:firstComplete(), InternalAttribute:toString(), NioServerSocketUDT:getLocalSocketAddress(), ConcurrentHashMapV8$ForEachTransformedMappingTask:compute(), Unpooled:copyInt(int[]), WebSocketFrameAggregator:isLastContentMessage(ByteBufHolder), PooledByteBuf:capacity(int), EmptyConvertibleHeaders:<init>(), EmptyHeaders:setTimeMillis(Object-long), OpenSsl:isAvailable(), WrappedByteBuf:writableBytes(), ForkJoinTask$RunnableExecuteAction:setRawResult(Void), DiskFileUpload:setContent(ByteBuf), PlatformDependent:getClassLoader(Class), OpenSsl:<clinit>(), DefaultTextHeaders$3:toUnconvertedType(Object), ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), SelfSignedCertificate:<clinit>(), Recycler$WeakOrderQueue$Link:get(), DefaultHttp2Headers:set(Object-Object), ByteBuf:getMedium(int), SpdyHttpEncoder:encode(ChannelHandlerContext-Object-List), EmptyByteBuf:<clinit>(), ReplayingDecoderBuffer:writeByte(int), ObjectEncoderOutputStream:writeUTF(String), Unsafe:allocateMemory(long), EpollChannelConfig:setAllocator(ByteBufAllocator), HttpServerUpgradeHandler:createUpgradeResponse(HttpServerUpgradeHandler$UpgradeCodec), AdvancedLeakAwareByteBuf:setFloat(int-float), DnsHeader:authorityResourceCount(), StompSubframeAggregator:isContentMessage(Object), DefaultHeaders:getShortAndRemove(Object), DefaultPromise$5:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener-long-long), ThreadLocalInsecureRandom:nextLong(), SwappedByteBuf:isReadable(), HttpRequestEncoder:acceptOutboundMessage(Object), ByteBufOutputStream:<init>(ByteBuf), EmptyHttpHeaders:addObject(Object-Iterable), BinaryMemcacheRequestDecoder:<init>(), DefaultSpdySettingsFrame:<init>(), SwappedByteBuf:setBytes(int-ByteBuf-int-int), WrappedByteBuf:writeBytes(ByteBuf), MarshallerFactory:createUnmarshaller(MarshallingConfiguration), CorsConfig$Builder:<init>(String[]), NativeDatagramPacketArray$NativeDatagramPacket:init(ByteBuf-InetSocketAddress), RxtxChannel:activate(InputStream-OutputStream), TrafficCounter:resetAccounting(long), Channel$Unsafe:register(EventLoop-ChannelPromise), LocalChannel:localAddress(), FormattingTuple:<init>(String), NioUdtAcceptorChannel:doFinishConnect(), IntegerHolder:<init>(), ConcurrentHashMapV8$ForwardingNode:find(int-Object), HttpContentEncoder:encode(ByteBuf-List), AdvancedLeakAwareByteBuf:writeBytes(ByteBuf-int), Bzip2Decoder$State:values(), ForkJoinTask:uncheckedThrow(Throwable), PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]), DefaultChannelPipeline:fireUserEventTriggered(Object), ChannelFlushPromiseNotifier:notifyPromises(Throwable-Throwable), AbstractConstant:compareTo(Object), PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:remove(), HttpChunkedInput:length(), EmbeddedChannel:pipeline(), DefaultHttpHeaders:add(CharSequence-Iterable), ChannelHandlerContext:fireUserEventTriggered(Object), EmbeddedChannel:isActive(), LastStompContentSubframe$1:setDecoderResult(DecoderResult), EmptyTextHeaders:addFloat(Object-float), OioSctpServerChannel:doClose(), HttpPostBodyUtil$TransferEncodingMechanism:values(), Http2InboundFrameLogger$1:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf), DefaultHeaders$HeaderDateFormat:<clinit>(), DefaultSpdyHeaders:addLong(CharSequence-long), JdkSslServerContext:<init>(File-File), HashedWheelTimer:start(), AbstractEpollChannel$AbstractEpollUnsafe:clearEpollIn0(), PlatformDependent:addressSize0(), ReferenceMap:entrySet(), IntObjectMap:entries(), AdvancedLeakAwareByteBuf:readBytes(ByteBuf), HttpPostRequestDecoder:isMultipart(), MqttFixedHeader:qosLevel(), DefaultStompHeaders:setDouble(CharSequence-double), AbstractReferenceCountedByteBuf:writeBoolean(boolean), LzmaFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf), DefaultFullHttpResponse:content(), NioDatagramChannel:<init>(DatagramChannel), ConcurrentHashMapV8$MapEntry:equals(Object), DefaultTextHeaders:setByte(Object-byte), DefaultBinaryHeaders$4:convertName(AsciiString), IovArrayThreadLocal$1:onRemoval(Object), Http2Exception:<init>(Http2Error-String-Throwable), UnpooledUnsafeDirectByteBuf:checkIndex(int), GlobalEventExecutor$PurgeTask:run(), HttpResponseStatus:compareTo(Object), JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener:<init>(JdkSslEngine-List), DefaultStompHeaders:setObject(CharSequence-Object), OioSocketChannel:doConnect(SocketAddress-SocketAddress), ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), IdleState:valueOf(String), ConcurrentHashMapV8$MapReduceMappingsToIntTask:getRawResult(), JdkNpnSslEngine$1:protocols(), DefaultPromise:access$102(DefaultPromise-Object), CodecUtil:<init>(), EmptyHeaders:getAll(Object), PooledUnsafeDirectByteBuf:nioBuffer(int-int), AbstractEpollStreamChannel:newDirectBuffer(ByteBuf), HttpObjectDecoder$State:ordinal(), OpenSslEngine:setWantClientAuth(boolean), HashedWheelTimer$HashedWheelTimeout:isCancelled(), ForkJoinPool$WorkQueue:runTask(ForkJoinTask), AbstractByteBuf:readerIndex(int), Base64:encode(ByteBuf-boolean-Base64Dialect), DnsQuery:additionalResources(), Log4JLogger:warn(String-Object[]), CompleteChannelFuture:<init>(Channel-EventExecutor), AdvancedLeakAwareByteBuf:setInt(int-int), OioSctpServerChannel$OioSctpServerChannelConfig:autoReadCleared(), SpdyHeaderBlockRawDecoder$State:values(), SpdySessionHandler:updateInitialReceiveWindowSize(int), AbstractByteBuf:nioBuffer(), ByteBuf:slice(int-int), DatagramPacket:content(), SpdyHttpDecoder:createHttpResponse(ChannelHandlerContext-SpdyHeadersFrame-boolean), ConcurrentHashMapV8$Node:hashCode(), JdkBaseApplicationProtocolNegotiator:wrapperFactory(), Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-boolean), OpenSslEngine:setEnableSessionCreation(boolean), DefaultUdtChannelConfig:setSystemSendBufferSize(int), WrappedByteBuf:writeBytes(ByteBuffer), SwappedByteBuf:getInt(int), FingerprintTrustManagerFactory$2:checkClientTrusted(X509Certificate[]-String), Lz4FrameDecoder$State[]:clone(), AbstractNioMessageChannel:doWrite(ChannelOutboundBuffer), ConcurrentHashMapV8$EntryIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), LocalChannel:access$602(LocalChannel-LocalChannel), InboundHttp2ToHttpPriorityAdapter$1:visit(Map$Entry), EpollChannelOption:<init>(), ChannelFuture:addListener(GenericFutureListener), DefaultCookie:hashCode(), DefaultHeaders$KeyValueHeaderIterator:hasNext(), OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress), DefaultHttp2Connection$DefaultStream:<init>(DefaultHttp2Connection-int), Http2FrameLogger$Direction:values(), DefaultSocketChannelConfig:isReuseAddress(), EmptyByteBuf:nioBuffer(), DuplicatedByteBuf:setLong(int-long), HttpPostRequestDecoder:offer(HttpContent), NioUdtProvider:<clinit>(), Attribute:getCharset(), DefaultHttp2ConnectionEncoder:newBuilder(), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(Object), EpollSocketChannelConfig:setSendBufferSize(int), ServerBootstrap:childHandler(ChannelHandler), MixedFileUpload:content(), DefaultChannelProgressivePromise:<init>(Channel), EmptyTextHeaders:setObject(CharSequence-Iterable), DefaultHttp2ConnectionDecoder$Builder:build(), ApplicationProtocolUtil:toList(int-Iterable), MultithreadEventExecutorGroup$1:operationComplete(Future), Cookie:isHttpOnly(), DefaultChannelPipeline$HeadContext:channelWritabilityChanged(ChannelHandlerContext), DefaultHttp2Connection:goAwayReceived(int), EpollChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), WebSocketClientHandshaker$1:<init>(WebSocketClientHandshaker-ChannelPromise), DefaultHttp2Headers:addByte(Object-byte), ConcurrentHashMapV8$KeySetView:addAll(Collection), PoolArena:<clinit>(), FixedCompositeByteBuf:arrayOffset(), AbstractBootstrap:<init>(), AbstractNioChannel:doConnect(SocketAddress-SocketAddress), DefaultConvertibleHeaders:getAllAndConvert(Object), HttpRequest:protocolVersion(), SwappedByteBuf:bytesBefore(int-byte), JdkSslContext$1:<clinit>(), HttpClientCodec:handlerAt(int), OpenSslEngine:access$400(), ReadOnlyByteBuf:order(ByteOrder), RecyclableArrayList:recycle(), LoggingHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), AbstractTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext), OioSctpChannel:closeSelector(String-Selector), AbstractChannel:access$300(AbstractChannel), ScheduledFutureTask:delayNanos(), ConcurrentHashMapV8$ValuesView:<init>(ConcurrentHashMapV8), DefaultChannelId:<clinit>(), DefaultChannelHandlerInvoker$WriteTask:<clinit>(), Socks5ServerEncoder:encodeCommandResponse(Socks5CommandResponse-ByteBuf), NioDatagramChannel:doConnect(SocketAddress-SocketAddress), JdkLogger:isErrorEnabled(), Http2Connection:goAwaySent(), DefaultFullBinaryMemcacheResponse:extras(), DefaultHttpObject:<init>(), ForkJoinPool$1:run(), ResourceLeakDetector$DefaultResourceLeak:record(), DefaultTextHeaders:add(TextHeaders), Socks5CommandRequestDecoder:fail(List-Throwable), ByteBufHolder:duplicate(), PausableChannelEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), Promise:setUncancellable(), EmptyConvertibleHeaders:addByte(Object-byte), AbstractByteBuf:checkReadableBytes(int), Socks5ClientEncoder:encodePasswordAuthRequest(Socks5PasswordAuthRequest-ByteBuf), DefaultSpdySynReplyFrame:setInvalid(), Slf4JLogger:error(String), SingleThreadEventExecutor:<clinit>(), DiskFileUpload:compareTo(FileUpload), Unpooled:copyBoolean(boolean[]), ReadOnlyByteBuf:array(), SSL:getPeerCertChain(long), EmptyTextHeaders:addInt(Object-int), IpSubnetFilterRule$Ip6SubnetFilterRule:<init>(Inet6Address-int-IpFilterRuleType), LocalServerChannel:serve0(LocalChannel), DefaultDatagramChannelConfig:setWriteBufferLowWaterMark(int), UniqueIpFilter:<init>(), DelegatingDecompressorFrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), WebSocketServerHandshaker:handshake(Channel-HttpRequest), Socks4CommandStatus:<clinit>(), DefaultHttpMessage:hashCode(), EpollSocketChannelConfig:setWriteBufferHighWaterMark(int), AbstractScheduledEventExecutor:toCallable(Runnable), ForkJoinPool:submit(Runnable-Object), WrappedByteBuf:skipBytes(int), ForkJoinPool:commonSubmitterQueue(), ConcurrentHashMapV8$ForEachTransformedMappingTask:fork(), MemoryFileUpload:getContentType(), DefaultHeaders:setChar(Object-char), SingleThreadEventExecutor$3:run(), Bzip2Decoder:decode(ChannelHandlerContext-ByteBuf-List), GlobalChannelTrafficCounter:<init>(GlobalChannelTrafficShapingHandler-ScheduledExecutorService-String-long), HttpPostRequestDecoder:getDiscardThreshold(), AbstractRemoteAddressFilter:accept(ChannelHandlerContext-SocketAddress), DefaultHeaders:add(Object-Object[]), LoggingHandler:close(ChannelHandlerContext-ChannelPromise), AbstractInternalLogger:info(String-Object), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), JZlibDecoder:decode(ChannelHandlerContext-ByteBuf-List), VoidChannelPromise:trySuccess(Void), Http2Flags:endOfHeaders(), DefaultHttp2StreamRemovalPolicy$Garbage:access$000(DefaultHttp2StreamRemovalPolicy$Garbage), JZlibEncoder:close(ChannelHandlerContext-ChannelPromise), DefaultSctpChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), ClassPool:<init>(boolean), Slf4JLogger:debug(String-Object[]), HttpObjectDecoder:invalidChunk(Exception), DefaultSocks5InitialRequest:decoderResult(), ClientCookieDecoder$CookieBuilder:setMaxAge(String), DefaultHttp2Connection:access$700(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream), NativeDatagramPacketArray$NativeDatagramPacket:release(), CompleteChannelFuture:removeListener(GenericFutureListener), AbstractByteBuf:readerIndex(), DefaultUdtServerChannelConfig:apply(ChannelUDT), Http2FrameListenerDecorator:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), AbstractEpollChannel:<init>(int-int), ConcurrentHashMapV8:reduceValuesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ChannelTrafficShapingHandler:handlerRemoved(ChannelHandlerContext), ByteToMessageCodec$Encoder:<init>(ByteToMessageCodec-boolean), DefaultChannelPipeline:addLast(ChannelHandler[]), MpscLinkedQueue:offer(Object), DefaultHttp2ConnectionDecoder$Builder:access$300(DefaultHttp2ConnectionDecoder$Builder), EmptyHeaders:add(Object-Object[]), SwappedByteBuf:writeBytes(ByteBuf), ChannelOutboundBuffer:removeBytes(long), StompCommand:<clinit>(), DuplicatedByteBuf:getBytes(int-ByteBuf-int-int), HttpContentDecompressor:<init>(boolean), Log4JLogger:debug(String-Object), AbstractBinaryMemcacheMessage:retain(int), DefaultStompHeaders:setLong(Object-long), WrappedByteBuf:alloc(), Lz4FrameDecoder:<init>(LZ4Factory-Checksum), WebSocketClientHandshaker$1:operationComplete(Future), NativeDatagramPacketArray:processMessage(Object), AbstractByteBuf:_getByte(int), DefaultChannelConfig:isAutoRead(), DefaultStompHeaders:setChar(CharSequence-char), EpollSocketChannel:config(), Slf4JLogger:trace(String-Object-Object), AdvancedLeakAwareByteBuf:capacity(int), ByteInput:read(), UnsafeDirectSwappedByteBuf:_setInt(int-int), ChannelMatchers$ClassMatcher:<init>(Class), AbstractOioMessageChannel:doReadMessages(List), Bootstrap:connect(InetAddress-int), HttpObjectAggregator$AggregatedFullHttpResponse:touch(Object), EmbeddedEventLoop:invokeWrite(ChannelHandlerContext-Object-ChannelPromise), Recycler:<clinit>(), EmptyConvertibleHeaders:addObject(Object-Iterable), SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor-SingleThreadEventExecutor$1), SSLEngine:getSession(), SingleThreadEventExecutor$4:run(), PooledDirectByteBuf:<init>(Recycler$Handle-int-PooledDirectByteBuf$1), AbstractBootstrap:group(EventLoopGroup), EpollDomainSocketChannelConfig:setReadMode(DomainSocketReadMode), ChannelPipeline:fireChannelActive(), DnsServerAddresses$SequentialAddressIterator:<init>(InetSocketAddress[]-int), DefaultHttp2FrameReader$2:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-Http2Flags), SpdySessionStatus:<init>(int-String), SslProvider[]:clone(), EpollSocketChannel:isInputShutdown0(), MpscLinkedQueue:writeObject(ObjectOutputStream), Slf4JLogger:error(String-Object), Http2Stream:resetSent(), Socks5CommandType:valueOf(byte), Socks5AuthMethod:compareTo(Object), LoggingHandler:format(ChannelHandlerContext-String-Object-Object), PooledUnsafeDirectByteBuf:readBytes(ByteBuffer), InternalAttribute:compareTo(InternalAttribute), ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), IntObjectHashMap:toString(), EmptyBinaryHeaders:setObject(Object-Object), Cookie:path(), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), ByteBuf:nioBufferCount(), DnsQuestion:<init>(String-DnsType-DnsClass), AbstractNioByteChannel:selectionKey(), ScheduledFutureTask:cancel(boolean), ByteBuf:writeZero(int), NioEventLoop:execute(Runnable), LocalChannel$1:run(), AbstractReferenceCountedByteBuf:retain(), UnsupportedMessageTypeException:<init>(Object-Class[]), ProxyHandler:removeDecoder(ChannelHandlerContext), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), SpdySessionHandler:isRemoteInitiatedId(int), WrappedByteBuf:setBytes(int-ScatteringByteChannel-int), BufferRecycler:releaseInputBuffer(byte[]), Logger:trace(String-Object[]), DefaultServerSocketChannelConfig:setWriteSpinCount(int), DefaultHttp2Headers:authority(), FullBinaryMemcacheRequest:setDataType(byte), ConcurrentHashMapV8:remove(Object-Object), DefaultHttpRequest:setProtocolVersion(HttpVersion), ProtobufEncoder:encode(ChannelHandlerContext-MessageLiteOrBuilder-List), Bzip2HuffmanStageEncoder:writeSelectorsAndHuffmanTables(ByteBuf), SpdyHttpDecoder:<init>(SpdyVersion-int-Map), DnsResponseHeader:setId(int), CommonsLoggerFactory:<init>(), SwappedByteBuf:readUnsignedByte(), DefaultHttp2Connection:access$000(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream), MqttEncoder:writeVariableLengthInt(ByteBuf-int), AbstractByteBuf:getMedium(int), AdvancedLeakAwareByteBuf:release(), LocalChannel$LocalUnsafe:safeSetFailure(ChannelPromise-Throwable), DnsQuery:newHeader(int), DefaultFullBinaryMemcacheRequest:release(), DefaultRxtxChannelConfig:setDtr(boolean), ConcurrentHashMapV8$ObjectToDouble:apply(Object), DefaultFullHttpRequest:release(int), OioDatagramChannel:isOpen(), UdtMessage:<init>(ByteBuf), ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), Socks5CommandStatus:compareTo(Object), DefaultOioServerSocketChannelConfig:setSoTimeout(int), LocalAddress:compareTo(Object), Log4JLogger:error(String-Object), SctpChannel:open(), Http2LifecycleManager:closeStream(Http2Stream-ChannelFuture), DefaultSpdyHeaders:addDouble(Object-double), DefaultHttp2FrameWriter:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise), FormattingTuple:getMessage(), PoolArena:toString(), ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), EmptyByteBuf:writeMedium(int), DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:newExtensionDecoder(), WebSocketVersion[]:clone(), SSLException:<init>(String-Throwable), SslContext:defaultProvider(), MessageInfo:payloadProtocolID(int), AdvancedLeakAwareByteBuf:readDouble(), EventExecutor:inEventLoop(), LastMemcacheContent$1:duplicate(), JdkNpnApplicationProtocolNegotiator$1:<init>(), ConcurrentHashMapV8$SearchMappingsTask:fork(), JZlibEncoder:<init>(int), JdkApplicationProtocolNegotiator:protocols(), SslHandler$3:operationComplete(Future), DefaultTextHeaders:access$501(DefaultTextHeaders-Object-Iterable), DnsQueryEncoder:encodeQuestion(DnsQuestion-Charset-ByteBuf), AbstractChannelHandlerContext:newProgressivePromise(), WebSocket08FrameDecoder$1:<clinit>(), AbstractChannelHandlerContext$PausableChannelEventExecutor0:acceptNewTasks(), SystemPropertyUtil:<init>(), ChunkedNioFile:<init>(File-int), AbstractChannel:flush(), HttpPostStandardRequestDecoder:setDiscardThreshold(int), HttpPostRequestDecoder:getBodyHttpData(String), PoolThreadCache$1:run(), HttpProxyHandler:removeDecoder(ChannelHandlerContext), TimeoutException:<init>(), LineBasedFrameDecoder:fail(ChannelHandlerContext-String), BinaryMemcacheResponse:keyLength(), AbstractByteBuf:getBytes(int-GatheringByteChannel-int), DefaultServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), PerMessageDeflateClientExtensionHandshaker:handshakeExtension(WebSocketExtensionData), ReplayingDecoder:decode(ChannelHandlerContext-ByteBuf-List), AdvancedLeakAwareByteBuf:writeZero(int), UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int), DefaultHttp2Connection:goAwaySent(), AbstractEpollStreamChannel$EpollStreamUnsafe:voidPromise(), AsciiString:parseDouble(int-int), UnpooledHeapByteBuf:setIndex(int-int), DefaultHttp2ConnectionDecoder:unconsumedBytes(Http2Stream), ProxyHandler:handleResponse(ChannelHandlerContext-Object), TrustManagerFactory:getDefaultAlgorithm(), DatagramChannel:eventLoop(), AbstractNioChannel$AbstractNioUnsafe$2:<init>(AbstractNioChannel$AbstractNioUnsafe), AppendableCharSequence:append(CharSequence-int-int), NioSocketChannel:shutdownOutput(), Socks5ProxyHandler:newInitialMessage(ChannelHandlerContext), PooledDirectByteBuf:memoryAddress(), JdkZlibEncoder:<init>(), Socks5PasswordAuthResponseDecoder:checkpoint(Object), EmptyTextHeaders:setObject(Object-Object), HttpMethod:compareTo(HttpMethod), ByteBuf:readInt(), PooledDirectByteBuf:setBytes(int-byte[]-int-int), Http2OrHttpChooser:addHttpHandlers(ChannelHandlerContext), StompHeaders:contains(Object), ByteBufInputStream:<init>(ByteBuf), DefaultFullHttpRequest:method(), JdkAlpnSslEngine:closeOutbound(), CompleteFuture:addListener(GenericFutureListener), Native:finishConnect0(int), EmptyHeaders:set(Object-Object), DefaultOioSocketChannelConfig:setAutoRead(boolean), HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ThreadPerChannelEventLoopGroup:<init>(int-Executor-Object[]), DefaultUdtServerChannelConfig:setWriteBufferLowWaterMark(int), EmptyHttp2Headers:authority(), DefaultHttpHeaders$HttpHeadersValidationConverter:<init>(boolean), DefaultOioSocketChannelConfig:<init>(SocketChannel-Socket), ServerSocketChannelUDT:socket(), DefaultSocks5CommandRequest:toString(), ChannelConfig:setOption(ChannelOption-Object), ChunkedWriteHandler:channelInactive(ChannelHandlerContext), HttpPostRequestDecoder:getBodyHttpDatas(String), HttpHeaderDateFormat:parse(String-ParsePosition), MemoryAttribute:getHttpDataType(), OpenSslEngine$1:getId(), Socks5PasswordAuthRequestDecoder$State[]:clone(), MqttConnectReturnCode:byteValue(), ReplayingDecoder:exceptionCaught(ChannelHandlerContext-Throwable), AbstractTrafficShapingHandler:channelRead(ChannelHandlerContext-Object), AbstractNioByteChannel:clearOpWrite(), SpdyStreamStatus:equals(Object), WebSocketFrame:duplicate(), DnsNameResolverContext:decodeDomainName(ByteBuf), PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int), Unmarshaller:close(), Unsafe:putOrderedInt(Object-long-int), ForkJoinPool:scan(ForkJoinPool$WorkQueue-int), AttributeKey:valueOf(Class-String), ChunkDecoder:decodeChunk(byte[]-int-byte[]-int-int), BinaryMemcacheResponse:setStatus(short), ConcurrentHashMapV8$KeySetView:forEach(ConcurrentHashMapV8$Action), DefaultChannelProgressivePromise:promise(), ConcurrentHashMapV8:replaceAll(ConcurrentHashMapV8$BiFun), FixedCompositeByteBuf:setBytes(int-ByteBuf-int-int), IntObjectHashMap$1$1:next(), DnsNameResolver:newChannel(ChannelFactory-InetSocketAddress), SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-Object-List), ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction), DefaultSpdyGoAwayFrame:<init>(int), ThreadLocalInsecureRandom:<clinit>(), AbstractEpollStreamChannel$EpollStreamUnsafe$3:<init>(AbstractEpollStreamChannel$EpollStreamUnsafe), UnpooledUnsafeDirectByteBuf:_setMedium(int-int), SwappedByteBuf:readerIndex(), HttpObjectDecoder$LineParser:reset(), IdleStateHandler:access$200(IdleStateHandler), ThreadLocalRandom:nextLong(), CorsConfig$Builder:<init>(), DefaultUdtChannelConfig:setProtocolReceiveBufferSize(int), DefaultTextHeaders$ValuesComposer:addObject(CharSequence-Iterable), InternalLogLevel:ordinal(), SwappedByteBuf:markReaderIndex(), DefaultChannelGroup:hashCode(), WebSocketClientHandshaker13:newHandshakeRequest(), SpdySettingsFrame:ids(), DefaultSocketChannelConfig:<init>(SocketChannel-Socket), Native:tcpInfo0(int-int[]), ProxyHandler:sendInitialMessage(ChannelHandlerContext), RxtxChannelConfig$Paritybit:valueOf(String), AbstractChannelHandlerContext:connect(SocketAddress-ChannelPromise), DelimiterBasedFrameDecoder:validateDelimiter(ByteBuf), CorsHandler:write(ChannelHandlerContext-Object-ChannelPromise), AbstractInternalLogger:isEnabled(InternalLogLevel), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), WrappedByteBuf:compareTo(Object), EmptyByteBuf:getBytes(int-byte[]), DefaultHttp2FrameReader:verifyPushPromiseFrame(), DefaultChannelGroup:writeAndFlush(Object), JdkAlpnSslEngine:isAvailable(), NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface), SlicedByteBuf:forEachByteDesc(int-int-ByteBufProcessor), Unpooled:directBuffer(int-int), DelegatingDecompressorFrameListener$1:<init>(), Recycler$Stack:push(Recycler$DefaultHandle), PooledByteBuf:internalNioBuffer(), CharsetUtil:getDecoder(Charset), Socks5CommandType:compareTo(Object), ConcurrentHashMapV8$Node:toString(), DefaultSpdySynStreamFrame:isUnidirectional(), DefaultSpdyHeaders:setLong(Object-long), UnpooledHeapByteBuf:internalNioBuffer(int-int), EventLoopException:<init>(), MessageAggregator:setMaxCumulationBufferComponents(int), WebSocketClientHandshaker00:<clinit>(), DefaultChannelGroup:toString(), DefaultHttp2ConnectionDecoder$Builder:listener(Http2FrameListener), Http2Settings:clear(), SpdyOrHttpChooser:decode(ChannelHandlerContext-ByteBuf-List), ConstantPool:newConstant(int-String), Unpooled:copyShort(int[]), SlicedByteBuf:forEachByte(int-int-ByteBufProcessor), HttpPostRequestEncoder$WrappedHttpRequest:setMethod(HttpMethod), Snappy:encode(ByteBuf-ByteBuf-int), Bzip2BitReader:<init>(), EmptyHttpHeaders:setBoolean(CharSequence-boolean), DefaultChannelConfig:getOption(ChannelOption), EpollServerDomainSocketChannel:doBind(SocketAddress), EpollDatagramChannel:access$002(EpollDatagramChannel-InetSocketAddress), PemReader:readPrivateKey(File), ProxyHandler:flush(ChannelHandlerContext), ChunkedNioFile:isEndOfInput(), DefaultStompHeaders:addObject(CharSequence-Object), SslContext:<init>(), Recycler$WeakOrderQueue:hasFinalData(), ByteBuf:setLong(int-long), DefaultTextHeaders:setFloat(CharSequence-float), AbstractMemoryHttpData:retain(), ConcurrentHashMapV8$MapReduceValuesToLongTask:getRawResult(), CompositeByteBuf:retain(), SSL:getVersion(long), MqttVersion:protocolLevel(), DefaultSocketChannelConfig:setConnectTimeoutMillis(int), IpFilterRuleType:valueOf(String), PooledHeapByteBuf:maxCapacity(int), HttpObjectDecoder$LineParser:<init>(AppendableCharSequence-int), AbstractEpollStreamChannel:config(), XmlFrameDecoder:isValidStartCharForXmlElement(byte), HAProxyCommand:<clinit>(), MqttPublishMessage:duplicate(), ChannelMetadata:<init>(boolean), DefaultRxtxChannelConfig:setParitybit(RxtxChannelConfig$Paritybit), ForkJoinPool$WorkQueue:queueSize(), SwappedByteBuf:readLong(), SimpleNameResolver:resolve(SocketAddress-Promise), SerialPort:setSerialPortParams(int-int-int-int), AbstractByteBufAllocator:compositeHeapBuffer(int), Native:isTcpCork(int), AbstractChannelHandlerContext:writeAndFlush(Object-ChannelPromise), AbstractEventExecutorGroup:shutdownNow(), NioSocketChannel$NioSocketChannelConfig:autoReadCleared(), Http2FrameLogger:<init>(InternalLogLevel), HttpObjectAggregator$AggregatedFullHttpMessage:retain(), AbstractEpollStreamChannel$EpollStreamUnsafe:<init>(AbstractEpollStreamChannel), CodedInputStream:newInstance(byte[]-int-int), HttpResponseDecoder:<clinit>(), AbstractByteBuf:readableBytes(), ReplayingDecoderBuffer:writeBytes(InputStream-int), AbstractNioByteChannel:isOpen(), DefaultHttp2RemoteFlowController:access$100(Http2Stream), Base64Decoder:<init>(Base64Dialect), HttpPostMultipartRequestDecoder:offer(HttpContent), ResourceLeakHint:toHintString(), AdvancedLeakAwareByteBuf:discardReadBytes(), SingleThreadEventExecutor:scheduleExecution(), BinaryMemcacheRequestEncoder:<init>(), OpenSslEngine:wrap(ByteBuffer[]-int-int-ByteBuffer), DefaultChannelGroupFuture:addListener(GenericFutureListener), JavassistTypeParameterMatcherGenerator:typeName(Class), DefaultChannelHandlerContext:skipFlags(ChannelHandler), AbstractScheduledEventExecutor:<clinit>(), UnpooledHeapByteBuf:setBytes(int-ByteBuffer), DefaultEventExecutor:confirmShutdown(), HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol), OpenSslContext:<clinit>(), SelectedSelectionKeySet:<init>(), PooledUnsafeDirectByteBuf:_getLong(int), MemoryFileUpload:touch(), DefaultTextHeaders$SingleHeaderValuesComposer:addObject(CharSequence-Object[]), ChannelConfig:isAutoRead(), ByteBuf:internalNioBuffer(int-int), PooledHeapByteBuf$1:newObject(Recycler$Handle), PooledDirectByteBuf:checkDstIndex(int-int-int-int), Socks4CommandStatus:byteValue(), JdkLogger:info(String-Object), CompositeByteBuf:_getByte(int), HttpPostMultipartRequestDecoder:loadFieldMultipartStandard(String), DefaultChannelPipeline$HeadContext:deregister(ChannelHandlerContext-ChannelPromise), CompositeByteBuf:getBytes(int-byte[]-int-int), ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), SpdyHttpResponseStreamIdHandler:<init>(), SslContext:newEngine(ByteBufAllocator-String-int), HttpHeaderNames:<init>(), Native:recvFromAddress(int-long-int-int), AbstractReferenceCountedByteBuf:setMedium(int-int), QueryStringDecoder:<init>(URI-Charset-int), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:valueOf(String), AbstractChannelHandlerContext$1:<init>(), IdleState[]:clone(), ReplayingDecoderBuffer:setBytes(int-ByteBuffer), NioSocketChannel:parent(), ReferenceCounted:touch(Object), OpenSslSessionContext$EmptyEnumeration:<init>(), DefaultHeaders$2:visit(Map$Entry), IovArray:clear(), AsciiString:parseShort(int-int-int), IllegalReferenceCountException:<init>(Throwable), HttpObjectAggregator$AggregatedFullHttpRequest:retain(int), DefaultChannelProgressivePromise:sync(), ChannelMatchers:isNotInstanceOf(Class), DefaultChannelId:<init>(), ClassResolvers:weakCachingResolver(ClassLoader), HttpHeaders:contains(CharSequence-CharSequence-boolean), ChunkedNioStream:isEndOfInput(), PooledUnsafeDirectByteBuf:capacity(), DeflateFrameClientExtensionHandshaker:newRequestData(), DefaultHttp2Headers:setTimeMillis(AsciiString-long), ReadOnlyUnsafeDirectByteBuf:_getShort(int), Http2ConnectionHandler:onException(ChannelHandlerContext-Throwable), AbstractChannel:localAddress0(), DefaultHttp2Headers:setChar(Object-char), MixedAttribute:setContent(ByteBuf), MqttDecoder:decodeUnsubscribePayload(ByteBuf-int), DefaultHttp2Headers:addFloat(Object-float), DefaultChannelGroup:toArray(Object[]), ByteBuf:copy(), ReadOnlyByteBuf:setBytes(int-ByteBuffer), AbstractEpollStreamChannel$EpollStreamUnsafe:close(ChannelPromise), DefaultTextHeaders:add(CharSequence-Iterable), DefaultTextHeaders:setLong(Object-long), PemReader:readCertificates(File), DefaultConvertibleHeaders:iterator(), ThreadPerChannelEventLoopGroup$1:<init>(ThreadPerChannelEventLoopGroup), ConcurrentHashMapV8:<init>(int), CipherSuiteConverter:toOpenSslUncached(String), DefaultHttp2Connection$DefaultStream:children(), LastHttpContent:<clinit>(), ChannelOutboundBuffer:isEmpty(), ContextBoundUnmarshallerProvider:<clinit>(), DefaultChannelProgressivePromise:<init>(Channel-EventExecutor), Logger:debug(String), MixedAttribute:retain(), ResourceLeakDetector:setLevel(ResourceLeakDetector$Level), ForkJoinPool:externalHelpComplete(CountedCompleter), HttpPostMultipartRequestDecoder:skipControlCharactersStandard(), EmptyBinaryHeaders:clear(), Headers$ValueConverter:convertToShort(Object), EpollDatagramChannel:isRegistered(), Native:setReuseAddress(int-int), JdkApplicationProtocolNegotiator:wrapperFactory(), IdleStateHandler:write(ChannelHandlerContext-Object-ChannelPromise), HashedWheelTimer$HashedWheelTimeout:compareAndSetState(int-int), ForkJoinTask:pollNextLocalTask(), ThreadPerChannelEventLoopGroup:awaitTermination(long-TimeUnit), PoolThreadCache:<clinit>(), EmptyByteBuf:readShort(), CompositeByteBuf:adjustMarkers(int), PoolThreadCache:cacheForSmall(PoolArena-int), DefaultStompFrame:retain(int), WebSocketClientHandshaker07:verify(FullHttpResponse), EpollSocketChannel:isInputShutdown(), AbstractBootstrap:option(ChannelOption-Object), MqttUnacceptableProtocolVersionException:<init>(Throwable), PooledUnsafeDirectByteBuf:init(PoolChunk-long-int-int-int), DefaultHttp2RemoteFlowController:writeChildNode(DefaultHttp2RemoteFlowController$FlowState), Epoll:<clinit>(), Log:info(Object-Throwable), Base64Dialect:values(), PerMessageDeflateEncoder:<init>(int-int-boolean), AdvancedLeakAwareByteBuf:discardSomeReadBytes(), Bzip2BlockDecompressor:decodeNextBWTByte(), DefaultChannelGroupFuture$1:operationComplete(Future), GlobalEventExecutor:access$100(), CorsConfig:exposedHeaders(), DnsQueryContext$3:<init>(DnsQueryContext-InetSocketAddress-long), EmptyBinaryHeaders:setInt(Object-int), EmptyBinaryHeaders:addBoolean(Object-boolean), DefaultPromise$3:run(), ThreadLocalRandom:nextDouble(double), SpdyHeaderBlockZlibDecoder:decode(ByteBufAllocator-ByteBuf-SpdyHeadersFrame), EmptyHttpHeaders:setTimeMillis(CharSequence-long), ByteBufInputStream:readChar(), CombinedIterator:<init>(Iterator-Iterator), CorruptedFrameException:<init>(), Recycler$Stack:increaseCapacity(int), EpollEventLoop:setIoRatio(int), SpdySettingsFrame:clearPreviouslyPersistedSettings(), MqttPublishVariableHeader:messageId(), Http2Error[]:clone(), SpdyFrameCodec:access$100(SpdyFrameCodec), ConcurrentHashMapV8$ReduceValuesTask:compute(), AbstractByteBuf:setBytes(int-ByteBuffer), PooledUnsafeDirectByteBuf:newInstance(int), AbstractInternalLogger:info(String-Throwable), DefaultEventLoop:takeTask(), DefaultChannelConfig:getWriteBufferHighWaterMark(), DefaultSpdySynStreamFrame:priority(), LogLevel:<init>(String-int-InternalLogLevel), MemoryAttribute:copy(), MessageToMessageCodec:handlerRemoved(ChannelHandlerContext), DefaultEventLoop:scheduleExecution(), DefaultHttp2FrameReader:readRstStreamFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), PendingWriteQueue$PendingWrite$1:<init>(), MqttEncoder:encodePublishMessage(ByteBufAllocator-MqttPublishMessage), AbstractChannelHandlerContext:toString(), Socks5AddressDecoder$1:<init>(), PoolThreadCache:free(PoolThreadCache$MemoryRegionCache), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), PromiseTask:tryFailureInternal(Throwable), PlatformDependent0:newAtomicLongFieldUpdater(Class-String), Snappy:readPreamble(ByteBuf), PlatformDependent:addressSize(), SwappedByteBuf:writeZero(int), DefaultChannelHandlerInvoker:invokeWrite(ChannelHandlerContext-Object-ChannelPromise), ChannelOutboundBuffer:decrementPendingOutboundBytes(long-boolean), DefaultHttp2ConnectionDecoder$FrameReadListener:applyLocalSettings(Http2Settings), LastStompContentSubframe$1:touch(), ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Action), ObjectEncoderOutputStream:writeDouble(double), MessageSizeEstimator:newHandle(), ByteBuf:hashCode(), DefaultUdtChannelConfig:getSystemReceiveBufferSize(), CompositeByteBuf:arrayOffset(), AbstractEpollChannel:isFlagSet(int), WebSocket08FrameDecoder:<clinit>(), DefaultHttp2Connection:access$900(DefaultHttp2Connection), SslProvider:<clinit>(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), AbstractReferenceCountedByteBuf:toString(), DefaultOioSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultSpdyHeaders:setObject(CharSequence-Object), ReferenceMap:get(Object), SslHandler$8:<clinit>(), DefaultSctpChannelConfig:isSctpNoDelay(), MultithreadEventLoopGroup:next(), Lz4FrameEncoder:<init>(boolean), EpollDatagramChannelConfig:getOption(ChannelOption), WebSocketFrameAggregator:isLastContentMessage(ContinuationWebSocketFrame), Socks4CommandStatus:toString(), Slf4JLogger:warn(String-Object[]), DefaultHttpHeaders:addBoolean(CharSequence-boolean), EmptyHeaders:<init>(), DefaultChannelProgressivePromise:checkDeadLock(), Logger:log(String-Priority-Object-Throwable), PooledUnsafeDirectByteBuf:alloc(), ApplicationProtocolConfig$SelectorFailureBehavior:<clinit>(), DefaultHeaders$2:<init>(DefaultHeaders), GlobalChannelTrafficCounter:milliSecondFromNano(), DefaultSpdySynReplyFrame:streamId(), InternalLogger:isWarnEnabled(), OpenSslEngine$ClientAuthMode:<init>(String-int), ConcurrentHashMapV8$MapReduceEntriesToLongTask:firstComplete(), AbstractChannel$AbstractUnsafe$6:<init>(AbstractChannel$AbstractUnsafe-ChannelOutboundBuffer-boolean-ChannelPromise), DefaultLastHttpContent:duplicate(), GlobalTrafficShapingHandler:<init>(EventExecutor), DnsNameResolver$DnsCacheEntry:<init>(DnsResponse), HashedWheelTimer$Worker:transferTimeoutsToBuckets(), EmbeddedChannel$State:valueOf(String), RecyclableArrayList:<clinit>(), DefaultFutureListeners:add(GenericFutureListener), DefaultChannelPipeline:addFirst(ChannelHandlerInvoker-String-ChannelHandler), UnpooledHeapByteBuf:getLong(int), Bzip2BlockDecompressor:checkCRC(), Http2Stream:id(), DomainSocketAddress:<init>(String), DefaultTextHeaders$3:toConvertedType(Object), ByteBuf:readLong(), DefaultChannelPipeline:write(Object-ChannelPromise), NativeDatagramPacketArray:count(), PausableChannelEventExecutor:invokeAny(Collection), EmptyHttp2Headers:add(AsciiString-Iterable), OioSocketChannel:doClose(), EmptyHttpHeaders:<init>(), HttpMessage:setDecoderResult(DecoderResult), WebSocketServerExtension:newExtensionDecoder(), DefaultHttp2Headers:setLong(Object-long), MultithreadEventExecutorGroup:isShuttingDown(), DefaultStompHeaders:addInt(Object-int), InterfaceHttpPostRequestDecoder:getBodyHttpDatas(String), ServerBootstrap:newOptionArray(int), CompositeByteBuf:addComponents0(int-ByteBuf[]), DefaultLastHttpContent:<init>(ByteBuf-boolean), WebSocketClientHandshaker13:newWebsocketDecoder(), HttpContentDecoder:<init>(), SingleThreadEventExecutor:pendingTasks(), PooledDirectByteBuf:setRefCnt(int), DefaultHttp2ConnectionDecoder$FrameReadListener:onWindowUpdateRead(ChannelHandlerContext-int-int), DatagramChannelConfig:isAutoRead(), EpollDatagramChannelConfig:setReceiveBufferSize(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean), DnsEntry:type(), DnsNameResolverContext:addTrace(InetSocketAddress-String), AbstractReferenceCountedByteBuf:release(), ReadOnlyByteBuf:_getUnsignedMedium(int), DnsHeader:answerCount(), PooledDirectByteBuf:setBytes(int-ByteBuffer), PooledByteBufAllocator:<init>(int-int-int-int), DefaultSocks5CommandRequest:type(), DefaultStompHeaders:addDouble(CharSequence-double), PoolSubpage:init(int), JdkApplicationProtocolNegotiator$ProtocolSelector:unsupported(), EpollServerSocketChannelConfig:getOption(ChannelOption), DefaultMessageSizeEstimator$HandleImpl:size(Object), FixedCompositeByteBuf:setByte(int-int), ConcurrentHashMapV8$SearchEntriesTask:advance(), ServerBootstrap$ServerBootstrapAcceptor$2:run(), PooledDirectByteBuf:setBytes(int-InputStream-int), DefaultSocks5InitialResponse:authMethod(), AbstractBinaryMemcacheEncoder:<init>(), Bootstrap:connect(), EmbeddedEventLoop:nextScheduledTaskNano(), EventLoop:register(Channel-ChannelPromise), EmptyBinaryHeaders:setByte(AsciiString-byte), WebSocketExtensionUtil:<init>(), AbstractByteBuf:discardSomeReadBytes(), Snappy:validateChecksum(int-ByteBuf-int-int), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), HttpPostMultipartRequestDecoder:findMultipartDisposition(), DefaultEventExecutor:takeTask(), ConstantPool:valueOf(String), BinaryMemcacheObjectAggregator:toFullResponse(BinaryMemcacheResponse-ByteBuf), StompContentSubframe:content(), DefaultBinaryHeaders:setBoolean(AsciiString-boolean), EpollServerChannelConfig:setAutoRead(boolean), ConcurrentHashMapV8$KeySpliterator:trySplit(), NioSctpServerChannel:newSocket(), UnpooledDirectByteBuf:checkReadableBytes(int), Bzip2Encoder:close(), GlobalChannelTrafficShapingHandler:channelRead(ChannelHandlerContext-Object), HttpResponseStatus:equals(Object), Native:accept(int-byte[]), AsciiString:of(CharSequence), Unpooled:compositeBuffer(), MqttMessage:variableHeader(), NioUdtProvider:channelUDT(Channel), DefaultChannelPipeline:getContextOrDie(String), AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel), Http2ConnectionDecoder$Builder:encoder(Http2ConnectionEncoder), AbstractDiskHttpData:getPostfix(), UnpooledUnsafeDirectByteBuf:_getInt(int), MessageLite$Builder:build(), Unpooled:copyLong(long), RtspHeaderValues:<clinit>(), TrafficCounter:toString(), StompSubframeDecoder$State:<clinit>(), DefaultHttpHeaders:addDouble(Object-double), DefaultChannelId:compareAddresses(InetAddress-InetAddress), DefaultProgressivePromise:notifyProgressiveListeners(long-long), PoolArena:newChunk(int-int-int-int), ForkJoinTask$AdaptedRunnable:invoke(), DefaultHeaders:getFloat(Object), FastThreadLocalThread:<init>(Runnable-String), ByteBufInputStream:available(), EpollServerSocketChannelConfig:getOptions(Map-ChannelOption[]), ThreadPerChannelEventLoop:isShuttingDown(), OioEventLoopGroup:<init>(), DefaultHttpHeaders:addShort(Object-short), Http2Connection:requireStream(int), Decoder:decode(InputStream-HeaderListener), DefaultChannelGroupFuture:syncUninterruptibly(), NioDatagramChannel:isConnected(), Bzip2DivSufSort:ssSubstringPartition(int-int-int-int), JdkBaseApplicationProtocolNegotiator$1:newSelector(SSLEngine-Set), Http2Flags:endOfHeaders(boolean), DnsNameResolverContext:query(Iterable-DnsQuestion), EmptyByteBuf:getBytes(int-ByteBuf), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:noSelectedMatchFound(String), DefaultPromise:toStringBuilder(), SslHandshakeCompletionEvent:<init>(Throwable), AbstractChannel$AbstractUnsafe$1:run(), ForkJoinTask:cancel(boolean), Base64Dialect:valueOf(String), PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[]), Logger:warn(String-Object), Http2Exception$StreamException:<init>(int-Http2Error-String-Throwable), ReadOnlyUnsafeDirectByteBuf:internalNioBuffer(), ReplayingDecoderBuffer:writeBytes(byte[]), OioDatagramChannel:localAddress(), ByteToMessageCodec$Encoder:encode(ChannelHandlerContext-Object-ByteBuf), DomainNameMapping:toString(), ReadOnlyByteBuf:getBytes(int-OutputStream-int), Attribute:get(), SpdyFrameCodec:access$000(SpdyFrameCodec), DefaultTextHeaders:<clinit>(), DefaultStompHeaders:addObject(Object-Object), Http2ConnectionDecoder:localSettings(), JdkSslEngine:getNeedClientAuth(), AbstractTrafficShapingHandler:setWriteLimit(long), DefaultChannelId:asLongText(), RxtxChannel$RxtxUnsafe$1:<init>(RxtxChannel$RxtxUnsafe-ChannelPromise-boolean), ForkJoinPool:access$100(), MixedFileUpload:touch(Object), JdkLogger:info(String-Throwable), ChunkedWriteHandler$PendingWrite:fail(Throwable), SwappedByteBuf:nioBufferCount(), DefaultStompHeaders:addLong(CharSequence-long), IpSubnetFilterRule$Ip4SubnetFilterRule:<init>(Inet4Address-int-IpFilterRuleType-IpSubnetFilterRule$1), JdkNpnApplicationProtocolNegotiator:<init>(boolean-String[]), DefaultHeaders:containsFloat(Object-float), OioSctpServerChannel$1:run(), SpdyCodecUtil:isServerId(int), PongWebSocketFrame:isFinalFragment(), CompositeByteBuf:setDouble(int-double), ChannelFlushPromiseNotifier:increaseWriteCounter(long), ByteBuf:setBytes(int-ByteBuf-int-int), DefaultHttp2FrameReader:readUnknownFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), BinaryMemcacheServerCodec:<init>(), DefaultDatagramChannelConfig:getReceiveBufferSize(), EmptyTextHeaders:setDouble(Object-double), HttpServerUpgradeHandler$UpgradeEvent:touch(), HashedWheelTimer:access$700(HashedWheelTimer), RecyclableArrayList:<init>(Recycler$Handle-RecyclableArrayList$1), AbstractByteBuf:writeChar(int), AdvancedLeakAwareByteBuf:nioBuffer(), Bzip2DivSufSort:ssMedian3(int-int-int-int-int), AsciiString:c2b(char), Encoder:setNumFastBytes(int), AbstractBinaryMemcacheDecoder:decode(ChannelHandlerContext-ByteBuf-List), Signal:<init>(int-String), AbstractDiskHttpData:setContent(InputStream), JdkNpnSslEngine$1:<init>(JdkNpnSslEngine-JdkApplicationProtocolNegotiator$ProtocolSelectionListener-JdkApplicationProtocolNegotiator), TooLongFrameException:<init>(), SSLEngine:unwrap(ByteBuffer-ByteBuffer[]), LoggingHandler:formatByteBuf(ChannelHandlerContext-String-ByteBuf), ByteBuf:capacity(int), CommonsLogger:info(String-Object), ByteBuf:hasMemoryAddress(), AbstractByteBuf:readBytes(ByteBuf-int), HttpVersion:isKeepAliveDefault(), DiskAttribute:copy(), AbstractBootstrap:register(), MessageFormatter:isDoubleEscaped(String-int), DefaultOioSocketChannelConfig:setKeepAlive(boolean), FixedCompositeByteBuf:setBytes(int-byte[]-int-int), AdvancedLeakAwareByteBuf:getBytes(int-byte[]-int-int), CompositeByteBuf:ensureWritable(int), WrappedByteBuf:clear(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToChar(Object), AbstractByteBuf:ensureAccessible(), HttpUtil$ExtensionHeaderNames:text(), EmptyByteBuf:writeBytes(ByteBuf-int-int), DefaultHeaders:getAndRemove(Object-Object), DefaultDatagramChannelConfig:getInterface(), ConcurrentHashMapV8:reduceEntriesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), CompositeByteBuf:order(), Http2Settings:putAll(IntObjectMap), HttpHeaderUtil:set100ContinueExpected(HttpMessage-boolean), JcaX509CertificateConverter:getCertificate(X509CertificateHolder), Recycler:newObject(Recycler$Handle), BinaryMemcacheClientCodec:access$100(BinaryMemcacheClientCodec), CompositeByteBuf:getBytes(int-ByteBuf), ConcurrentHashMapV8:access$000(), HttpContentCompressor:determineWrapper(CharSequence), DefaultHttpObject:decoderResult(), AbstractEpollStreamChannel$EpollStreamUnsafe:access$100(AbstractEpollStreamChannel$EpollStreamUnsafe), Bzip2BitReader:hasReadableBytes(int), ScheduledFutureTask$1:<init>(ScheduledFutureTask-Queue), WebSocketExtensionEncoder:<init>(), DnsResource:content(), SpdyFrameDecoder$State:values(), AsciiString:caseInsensitiveHashCode(CharSequence), SpdyHttpDecoder:putMessage(int-FullHttpMessage), HashedWheelTimer$HashedWheelTimeout:access$800(HashedWheelTimer$HashedWheelTimeout), ClientCookieDecoder$CookieBuilder:parse6(String-int-String), GlobalEventExecutor:fetchFromScheduledTaskQueue(), ByteBufInputStream:readShort(), DefaultStompFrame:<init>(StompCommand), SSLSession:getPeerPrincipal(), MqttPublishMessage:refCnt(), ByteInput:available(), DefaultHttp2Headers:setObject(Object-Object[]), EpollSocketChannelConfig:validate(ChannelOption-Object), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), Http2Settings:pushEnabled(boolean), EmptyByteBuf:getBytes(int-ByteBuf-int), ReadTimeoutHandler:handlerAdded(ChannelHandlerContext), DefaultFullHttpRequest:touch(), CountedCompleter:quietlyCompleteRoot(), ReadOnlyByteBuf:setByte(int-int), ObjectEncoderOutputStream:close(), AbstractReferenceCounted:release(int), HttpServerCodec:<init>(int-int-int-boolean), WrappedByteBuf:setChar(int-int), SslHandler$4:run(), LzmaFrameEncoder:<init>(), ChannelConfig:getOption(ChannelOption), ReferenceCounted:refCnt(), DiskFileUpload:<init>(String-String-String-String-Charset-long), HttpContentDecoder:decode(ByteBuf-List), ProxyHandler:channelInactive(ChannelHandlerContext), SwappedByteBuf:equals(Object), AbstractHttpData:checkSize(long), DefaultLastHttpContent$TrailingHttpHeaders:<init>(boolean), SSLSession:getLastAccessedTime(), Http2FrameLogger$Direction[]:clone(), JdkZlibEncoder:allocateBuffer(ChannelHandlerContext-ByteBuf-boolean), DefaultPromise$3:<init>(Future-GenericFutureListener), AbstractBinaryMemcacheDecoder:invalidMessage(Exception), WrappedByteBuf:getBytes(int-ByteBuf), DnsNameResolver:clearCache(DnsQuestion), AbstractByteBuf:getUnsignedMedium(int), HashedWheelTimer$HashedWheelTimeout:isExpired(), ByteBuf:writerIndex(), DefaultHttp2LocalFlowController:windowUpdateRatio(float), OioSctpServerChannel:config(), TextWebSocketFrame:touch(Object), DefaultFullHttpResponse:copy(boolean-ByteBuf), DnsQueryEncoder:encode(ChannelHandlerContext-Object-List), Bootstrap$2:operationComplete(ChannelFuture), FastThreadLocal:initialize(InternalThreadLocalMap), DefaultOioSocketChannelConfig:setWriteBufferHighWaterMark(int), ConcurrentHashMapV8:elements(), EmptyTextHeaders:addTimeMillis(Object-long), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:clear(), AbstractByteBuf:forEachByte(int-int-ByteBufProcessor), LocalChannel:<init>(LocalServerChannel-LocalChannel), Http2ServerUpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpRequest-FullHttpResponse), UnpooledHeapByteBuf:setLong(int-long), PooledByteBufAllocator$PoolThreadLocalCache:initialValue(), EpollServerChannelConfig:validate(ChannelOption-Object), UnpooledHeapByteBuf:getUnsignedMedium(int), DefaultSpdySettingsFrame$Setting:setPersist(boolean), JdkSslSession:getLastAccessedTime(), Http2LifecycleManager:onException(ChannelHandlerContext-Throwable), MqttConnectReturnCode[]:clone(), DefaultHttp2Connection$DefaultStream:weight(short), OioDatagramChannel:newSocket(), WebSocketServerProtocolHandler:<init>(String-String-boolean-int), DefaultBinaryHeaders:addShort(AsciiString-short), SwappedByteBuf:readBytes(OutputStream-int), CompositeByteBuf:writeZero(int), PooledDirectByteBuf:_setInt(int-int), PoolChunk:log2(int), Slf4JLogger:warn(String-Throwable), Http2CodecUtil$SimpleChannelPromiseAggregator:<clinit>(), Lz4FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), Http2FrameLogger:<init>(InternalLogLevel-InternalLogger), OioByteStreamChannel:available(), EmptyTextHeaders:set(Object-Iterable), GlobalEventExecutor:pendingTasks(), PoolArena:free(PoolChunk-long-int-boolean), SlicedByteBuf:_setLong(int-long), Bzip2Constants:<init>(), ByteToMessageCodec:acceptOutboundMessage(Object), NioSctpChannel:filterOutboundMessage(Object), EmptyByteBuf:setBytes(int-ByteBuffer), DefaultHeaders$HeaderDateFormat$1:initialValue(), EmptyHttpHeaders:addByte(Object-byte), WebSocketServerHandshaker:selectSubprotocol(String), Socks5CommandResponseDecoder$State[]:clone(), Unpooled:copiedBuffer(ByteBuf), DefaultHttp2Connection$PropertyMap:remove(Object), DefaultChannelPipeline:close(ChannelPromise), DefaultEventExecutor:scheduleExecution(), DefaultHttp2ConnectionDecoder$FrameReadListener:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int), DefaultLastMemcacheContent:<init>(ByteBuf), MqttMessage:<init>(MqttFixedHeader-Object), ByteToMessageDecoder:expandCumulation(ByteBufAllocator-ByteBuf-int), DefaultHttp2RemoteFlowController$1:<init>(), ReadOnlyUnsafeDirectByteBuf:addr(int), ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean), ComposedLastHttpContent:<init>(HttpHeaders), ConcurrentHashMapV8:put(Object-Object), DefaultHttp2Connection:deactivateInternal(DefaultHttp2Connection$DefaultStream), DefaultHeaders:add(Headers), AbstractDiskHttpData:getString(), DefaultChannelPipeline:writeAndFlush(Object), Http2Flags:priorityPresent(), ThreadLocalInsecureRandom:nextGaussian(), AsciiString:split(char), DefaultServerSocketChannelConfig:setWriteBufferLowWaterMark(int), AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(ChannelFuture), Http2OutboundFrameLogger:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise), Logger:trace(String-Throwable), DefaultHeaders$HeaderDateFormat:<init>(DefaultHeaders$1), Bzip2BlockCompressor:isEmpty(), DnsResource:copy(), HttpObjectDecoder:findEndOfString(CharSequence), HttpPostRequestDecoder:destroy(), ByteBuf:memoryAddress(), Channel:write(Object), ChannelBufferByteOutput:write(byte[]), WebSocket08FrameDecoder$State:valueOf(String), PausableChannelEventExecutor:invokeExceptionCaught(ChannelHandlerContext-Throwable), Recycler$WeakOrderQueue:transfer(Recycler$Stack), OpenSslDefaultApplicationProtocolNegotiator:protocols(), WriteTimeoutHandler$2:operationComplete(Future), ConcurrentHashMapV8$EntryIterator:advance(), WrappedByteBuf:writeChar(int), AdvancedLeakAwareByteBuf:getShort(int), DefaultHttp2FrameReader:readPingFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), AsciiString$3:compare(Object-Object), InternalAttribute:size(), NioDatagramChannel:setReadPending(boolean), DefaultFullHttpResponse:retain(), EpollMode:values(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:getRawResult(), DefaultHttp2FrameReader:verifyDataFrame(), NioEventLoop:register(SelectableChannel-int-NioTask), ForkJoinPool:<init>(int), IovArrayThreadLocal:<init>(), UnpooledDirectByteBuf:readBytes(ByteBuffer), DefaultSpdyGoAwayFrame:setStatus(SpdySessionStatus), WebSocketClientExtensionHandler:<init>(WebSocketClientExtensionHandshaker[]), PrematureChannelClosureException:<init>(String-Throwable), WebSocketFrameAggregator:contentLength(Object), Bzip2DivSufSort:sortTypeBstar(int[]-int[]), SpdyHeaderBlockZlibDecoder:ensureBuffer(ByteBufAllocator), NioSocketChannel:selectionKey(), PoolArena$DirectArena:destroyChunk(PoolChunk), Socks5CommandResponse:bndAddrType(), Version:identify(ClassLoader), ReplayingDecoderBuffer:getBytes(int-ByteBuf-int-int), DefaultEventExecutor:<init>(Executor), Logger:isEnabledFor(Priority), SimpleTrustManagerFactory$1:<init>(String-double-String), OpenSslX509Certificate:getSigAlgOID(), PausableChannelEventExecutor:unwrapInvoker(), SpdyOrHttpChooser$SelectedProtocol:<clinit>(), Signal$SignalConstant:compareTo(AbstractConstant), FileUpload:getHttpDataType(), DefaultRxtxChannelConfig:getParitybit(), ByteBufUtil:encodeString(ByteBufAllocator-CharBuffer-Charset), DefaultChannelPromise:addListeners(GenericFutureListener[]), DiskFileUpload:isInMemory(), SpdySessionHandler$4:operationComplete(ChannelFuture), RxtxChannel$RxtxUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), BinaryMemcacheRequest:setOpaque(int), WebSocketHandshakeException:<init>(String), CorsConfig:toString(), DefaultHttp2Headers:add(AsciiString-AsciiString), EmbeddedChannel:runPendingTasks(), ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object), DefaultChannelPipeline$TailContext:flush(ChannelHandlerContext), DefaultHttp2FrameReader:headerTable(), MemoryFileUpload:isInMemory(), JdkSslSession:getLocalPrincipal(), MpscLinkedQueue:lazySetHeadRef(MpscLinkedQueueNode), ChannelHandler:channelRegistered(ChannelHandlerContext), InternalThreadLocalMap:getIfSet(), Http2FrameWriter:configuration(), Slf4JLogger:trace(String-Throwable), ChannelPromise:trySuccess(Object), Unpooled:copyMedium(int), DefaultTextHeaders$SingleHeaderValuesComposer:addEscapedValue(CharSequence-CharSequence), Bzip2DivSufSort:trInsertionSort(int-int-int-int-int), Channel:metadata(), AbstractBootstrap:initAndRegister(), AdvancedLeakAwareByteBuf:writeLong(long), ThreadLocalRandom:nextInt(), CipherSuiteConverter:toOpenSslHmacAlgo(String), OioSocketChannel:doDisconnect(), DefaultAttributeMap$DefaultAttribute:remove0(), SSLContext:setCertificateChainFile(long-String-boolean), ByteBuf:setByte(int-int), CompositeByteBuf:addComponent0(int-ByteBuf), FullHttpMessage:content(), FixedCompositeByteBuf:setMedium(int-int), DefaultHttp2LocalFlowController:checkValidRatio(float), WebSocketFrameAggregator:isContentMessage(Object), DefaultPromise$LateListeners:<init>(DefaultPromise), FastLzFrameDecoder$State:<clinit>(), HttpProxyHandler:addCodec(ChannelHandlerContext), SpdyHeadersFrame:setInvalid(), Channel:close(), WebSocketServerHandshaker:version(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), EpollSocketChannel:<init>(FileDescriptor), WebSocketClientHandshaker07:maxFramePayloadLength(), DefaultStompHeaders:add(CharSequence-CharSequence), ChunkedNioStream:close(), JdkSslClientContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long), WrappedByteBuf:readSlice(int), Http2Headers$PseudoHeaderName[]:clone(), ReadOnlyUnsafeDirectByteBuf:<clinit>(), Cipher:init(int-Key-AlgorithmParameters), DefaultCookie:setPath(String), ConcurrentHashMapV8$Traverser:advance(), ByteBuf:bytesBefore(byte), SimpleChannelInboundHandler:<init>(Class-boolean), DefaultHttp2Connection$DefaultProperyMap:get(Object), Http2Settings:copyFrom(Http2Settings), DefaultHttpMessage:setProtocolVersion(HttpVersion), DnsQueryHeader:setZ(int), DefaultFullBinaryMemcacheResponse:retain(int), CorsConfig$Builder:access$600(CorsConfig$Builder), DefaultHttp2Headers:addShort(AsciiString-short), ByteBuf:nioBuffers(int-int), HttpPostMultipartRequestDecoder:setDiscardThreshold(int), Native:errnoEWOULDBLOCK(), SpdyProtocolException:<init>(String), SctpInboundByteStreamHandler:decode(ChannelHandlerContext-SctpMessage-List), SpdyHeaders:contains(Object), DnsNameResolverContext$2:operationComplete(Future), HashedWheelTimer$HashedWheelTimeout:cancel(), CompositeByteBuf:setIndex(int-int), HttpPostRequestEncoder:addBodyAttribute(String-String), EpollServerSocketChannel:doBind(SocketAddress), ReplayingDecoderBuffer:getByte(int), FileRegion:retain(), NioEventLoop:isShuttingDown(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:compute(), CompressorHttp2ConnectionEncoder:access$000(Http2Stream-EmbeddedChannel), NioUdtByteAcceptorChannel:javaChannel(), DefaultHttpMessage:<init>(HttpVersion), SimpleChannelInboundHandler:<init>(Class), SslHandler:handshake(Promise), DefaultStompContentSubframe:touch(), CommonsLogger:<init>(Log-String), AbstractByteBuf:getUnsignedInt(int), DefaultHeaders:size(), DefaultFullBinaryMemcacheResponse:retain(), DefaultSpdySynReplyFrame:setLast(boolean), ProxyHandler$LazyChannelPromise:executor(), Socks5InitialResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), DatagramPacket:copy(), PlatformDependent:newConcurrentHashMap(int), SctpServerChannel:setOption(SctpSocketOption-Object), DuplicatedByteBuf:capacity(int), NioEventLoop:processSelectedKeys(), MessageAggregationException:<init>(), Http2FrameListenerDecorator:onPriorityRead(ChannelHandlerContext-int-int-short-boolean), IovArrayThreadLocal$1:onRemoval(IovArray), DuplicatedByteBuf:getBytes(int-byte[]-int-int), DefaultChannelHandlerInvoker:invokeChannelReadComplete(ChannelHandlerContext), ByteBuf:maxCapacity(), EmptyHttpHeaders:setChar(Object-char), AbstractTrafficShapingHandler:channelRegistered(ChannelHandlerContext), EmbeddedEventLoop:nextScheduledTask(), ChannelTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise), Unsafe:putObjectVolatile(Object-long-Object), UnsafeDirectSwappedByteBuf:getInt(int), AbstractChannel:hashCode(), Log4JLogger:info(String-Object[]), Socks5AddressDecoder:<clinit>(), EpollSocketChannel:remoteAddress0(), DefaultDatagramChannelConfig:setAllocator(ByteBufAllocator), DefaultHttpHeaders:clear(), WebSocketServerHandshaker$2:<init>(WebSocketServerHandshaker-Channel-HttpHeaders-ChannelPromise), UniqueIpFilter$1:operationComplete(ChannelFuture), LzmaFrameEncoder:allocateBuffer(ChannelHandlerContext-Object-boolean), CompleteFuture:removeListener(GenericFutureListener), Promise:tryFailure(Throwable), DefaultMemcacheContent:decoderResult(), PausableChannelEventExecutor:next(), DefaultHttp2StreamRemovalPolicy$Garbage:<init>(Http2Stream), EmptyBinaryHeaders:addByte(AsciiString-byte), NioSctpChannel:setReadPending(boolean), ForkJoinPool$DefaultForkJoinWorkerThreadFactory:<init>(), DnsResponse:additionalResources(), EpollServerChannelConfig:getOption(ChannelOption), DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:maxHeaderTableSize(int), DefaultChannelHandlerInvoker$WriteTask:<init>(Recycler$Handle-DefaultChannelHandlerInvoker$1), DefaultChannelHandlerInvoker$2:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), AbstractNioChannel:doFinishConnect(), WebSocketClientHandshaker07:newWebsocketDecoder(), JdkApplicationProtocolNegotiator$ProtocolSelectionListener:selected(String), ResourceLeakDetector:<init>(String), MqttConnectPayload:willMessage(), DefaultHttp2ConnectionEncoder$Builder:lifecycleManager(Http2LifecycleManager), OioByteStreamChannel:isInputShutdown(), ReplayingDecoderBuffer:isReadable(), NameResolverGroup:<init>(), SpdySessionHandler:<init>(SpdyVersion-boolean), UdtChannelOption:<init>(), SSL:getNextProtoNegotiated(long), ThreadPerChannelEventLoopGroup:access$000(ThreadPerChannelEventLoopGroup), DefaultBinaryHeaders$2:convertToShort(Object), DnsResource:release(int), SSLEngineResult:bytesConsumed(), SSLContext:getSessionCacheSize(long), DiskAttribute:<init>(String-Charset), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), MpscLinkedQueueHeadRef:<clinit>(), MessageAggregator:beginAggregation(Object-ByteBuf), EmptyByteBuf:writeBoolean(boolean), AsciiHeadersEncoder$SeparatorType:<init>(String-int), NioEventLoop:inEventLoop(), SSLSession:getPeerHost(), IntObjectHashMap$IteratorImpl:next(), AbstractChannel:access$200(), IntObjectHashMap$IteratorImpl:scanNext(), MqttTopicSubscription:<init>(String-MqttQoS), JdkDefaultApplicationProtocolNegotiator:<init>(), HttpToHttp2ConnectionHandler:<init>(boolean-Http2FrameListener), ByteBuf:writeBytes(ByteBuf-int-int), DnsNameResolver$DnsCacheEntry:<init>(Throwable), DeflateEncoder:channelInactive(ChannelHandlerContext), Unpooled:copyDouble(double), AbstractTrafficShapingHandler:checkWaitReadTime(ChannelHandlerContext-long-long), CountedCompleter:internalPropagateException(Throwable), CorsConfig$Builder:access$200(CorsConfig$Builder), Lz4FrameEncoder:close(ChannelHandlerContext-ChannelPromise), MqttFixedHeader:<init>(MqttMessageType-boolean-MqttQoS-boolean-int), JdkNpnSslEngine$1:protocolSelected(String), JdkZlibEncoder$3:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), ReadOnlyByteBufferBuf:internalNioBuffer(int-int), OioSctpChannel$OioSctpChannelConfig:autoReadCleared(), ScheduledFutureTask:compareTo(Delayed), HttpObjectAggregator$AggregatedFullHttpResponse:trailingHeaders(), AsciiString:parseInt(), DnsHeader:isRecursionDesired(), NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise), AbstractChannelHandlerContext$PausableChannelEventExecutor0:unwrapInvoker(), MqttMessageFactory:newMessage(MqttFixedHeader-Object-Object), AsciiString:access$100(byte), DefaultConvertibleHeaders:set(Headers), FingerprintTrustManagerFactory$2:<init>(FingerprintTrustManagerFactory), DnsNameResolverContext$2:<init>(DnsNameResolverContext-DnsQuestion), ForkJoinTask$AdaptedRunnableAction:getRawResult(), EmptyHttp2Headers:setByte(AsciiString-byte), Lz4FrameEncoder$2:<init>(Lz4FrameEncoder-ChannelHandlerContext-ChannelPromise), SpdyHeadersFrame:isLast(), SpdyHttpEncoder:encode(ChannelHandlerContext-HttpObject-List), DuplicatedByteBuf:memoryAddress(), HttpToHttp2ConnectionHandler:write(ChannelHandlerContext-Object-ChannelPromise), SnappyFrameDecoder:<init>(boolean), ForkJoinTask$AdaptedRunnableAction:setRawResult(Object), ForkJoinTask:adapt(Callable), ByteBuf:setDouble(int-double), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:capacity(), DefaultHeaders:getAllAndRemove(Object), ByteBufProcessor:<clinit>(), HttpPostStandardRequestDecoder:skipControlCharacters(), MqttMessageFactory$1:<clinit>(), SSL:setOptions(long-int), PausableEventExecutor:isAcceptingNewTasks(), HttpRequest:setDecoderResult(DecoderResult), MpscLinkedQueueNode:clearMaybe(), AbstractNioChannel$NioUnsafe:finishConnect(), DefaultOioSocketChannelConfig:setTrafficClass(int), ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask), ByteBuf:getUnsignedInt(int), AbstractScheduledEventExecutor$RunnableToCallableAdapter:executor(), WebSocketClientHandshaker:<clinit>(), DefaultSpdyHeaders:addChar(CharSequence-char), Http2CodecUtil$1:<init>(), ChannelHandlerContext:disconnect(ChannelPromise), AbstractReferenceCountedByteBuf:writeDouble(double), StompSubframeDecoder:getContentLength(StompHeaders-long), HttpPostStandardRequestDecoder:isMultipart(), SSLSession:getApplicationBufferSize(), MqttPublishMessage:variableHeader(), InternalThreadLocalMap:setCounterHashCode(IntegerHolder), EpollDomainSocketChannel:config(), ReplayingDecoderBuffer:getBytes(int-ByteBuf), EmptyConvertibleHeaders:namesAndConvert(Comparator), IntObjectHashMap$IteratorImpl:key(), ByteBufOutputStream:writeInt(int), DefaultHeaders:add(Object-Object), DefaultHttpHeaders$HttpHeadersNameConverter:convertName(Object), DefaultOioSocketChannelConfig:getOptions(), FileUpload:touch(), DefaultChannelPipeline:fireChannelRead(Object), WrappedByteBuf:getChar(int), Lz4FrameEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), DefaultHttpHeaders:setInt(CharSequence-int), MqttMessageIdVariableHeader:toString(), JdkSslClientContext:<init>(File-TrustManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long), AbstractScheduledEventExecutor:parent(), MqttMessageFactory:newInvalidMessage(Throwable), AbstractNioByteChannel:<init>(Channel-SelectableChannel), HttpResponseDecoder:createInvalidMessage(), NetUtil:convertToBytes(String-byte[]-int), Bzip2DivSufSort:ssMedian5(int-int-int-int-int-int-int), ByteBuf:setBytes(int-ScatteringByteChannel-int), ReadOnlyByteBuf:alloc(), OpenSslSessionStats:misses(), DefaultSpdyStreamFrame:setStreamId(int), DefaultHttp2LocalFlowController$FlowState:windowUpdateRatio(float), WebSocket00FrameDecoder:<init>(), Socks5ClientEncoder:<clinit>(), DefaultSocks5InitialRequest:<init>(Socks5AuthMethod[]), CorsConfig:isCorsSupportEnabled(), DefaultHeaders:getFloat(Object-float), Bootstrap:doResolveAndConnect(SocketAddress-SocketAddress), ChannelHandlerContext:fireChannelRegistered(), DefaultSpdySettingsFrame$Setting:getValue(), Http2ConnectionDecoder$Builder:lifecycleManager(), MqttCodecUtil:validateFixedHeader(MqttFixedHeader), WrappedByteBuf:readBytes(ByteBuf-int), DefaultChannelPipeline:bind(SocketAddress-ChannelPromise), SSLSessionBindingListener:valueUnbound(SSLSessionBindingEvent), Log:warn(Object), NioEventLoop:runAllTasks(long), BinaryMemcacheObjectAggregator:<init>(int), LocalAddress:<init>(Channel), DnsNameResolverContext:addTrace(Throwable), DefaultTextHeaders:add(Object-Iterable), Bzip2Encoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), GlobalChannelTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long), DefaultHttp2LocalFlowController$FlowState:window(), SpdySession:closeLocalSide(int-boolean), CompactObjectInputStream:<init>(InputStream-ClassResolver), WrappedByteBuf:capacity(int), PoolChunk:usage(), Slf4JLogger:trace(String-Object[]), HttpPostStandardRequestDecoder:parseBodyAttributesStandard(), AbstractTrafficShapingHandler:doAccounting(TrafficCounter), OpenSslEngine$1:getPeerCertificateChain(), DefaultConvertibleHeaders:setAll(Headers), ByteBuf:toString(int-int-Charset), HAProxyMessageDecoder:findEndOfHeader(ByteBuf), MqttUnsubAckMessage:variableHeader(), NioServerSocketChannel:isActive(), DnsNameResolver:cache(DnsQuestion-DnsNameResolver$DnsCacheEntry-long), SwappedByteBuf:readBoolean(), AbstractByteBuf:capacity(), EpollDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), IovArray:processWritten(int-long), DefaultCookie:setRawValue(String), InterfaceHttpPostRequestDecoder:isMultipart(), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), SctpChannel:bindAddress(InetAddress), AbstractChannelHandlerContext$PausableChannelEventExecutor0:<init>(AbstractChannelHandlerContext-AbstractChannelHandlerContext$1), LastStompContentSubframe:<clinit>(), EmptyConvertibleHeaders:addChar(Object-char), SSLContext:getSessionCacheMode(long), Http2Exception$StreamException:error(), DefaultHttp2Headers:addObject(Object-Object), SlicedByteBuf:setBytes(int-ScatteringByteChannel-int), VoidChannelPromise:removeListeners(GenericFutureListener[]), MemoryAttribute:retain(int), DefaultBinaryHeaders:setLong(Object-long), FileDescriptor:close(), DefaultRxtxChannelConfig:getOptions(Map-ChannelOption[]), PingWebSocketFrame:duplicate(), DefaultHttp2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), PooledHeapByteBuf:_getInt(int), SSLContext:sessionConnectGood(long), DefaultSpdyPingFrame:toString(), Http2FrameLogger:logSettingsAck(Http2FrameLogger$Direction), Http2ConnectionEncoder:flowController(), Native:isReuseAddress(int), PoolArena:allocateHuge(PooledByteBuf-int), AbstractByteBuf:_setShort(int-int), TrafficCounter:resetCumulativeTime(), VoidChannelPromise:setFailure(Throwable), JdkLogger:name(), ConcurrentHashMapV8$ValueSpliterator:forEachRemaining(ConcurrentHashMapV8$Action), IntObjectHashMap:<init>(int-float), DefaultHttp2Connection:access$600(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream), DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:maxHeaderTableSize(int), DefaultHttp2Connection$ConnectionStream:open(boolean), HttpObjectAggregator:finishAggregation(FullHttpMessage), OioDatagramChannel:filterOutboundMessage(Object), Promise:addListener(GenericFutureListener), ChannelPromiseNotifier:<init>(ChannelPromise[]), AbstractNioByteChannel:setOpWrite(), NioSctpServerChannel:doBind(SocketAddress), DefaultBinaryMemcacheResponse:retain(int), DiskAttribute:addContent(ByteBuf-boolean), SpdyGoAwayFrame:lastGoodStreamId(), ReplayingDecoderBuffer:toString(int-int-Charset), Socks5ServerEncoder:<clinit>(), HttpObjectDecoder:findWhitespace(CharSequence-int), WebSocket08FrameEncoder:<init>(boolean), OioSctpChannel:allLocalAddresses(), AbstractEpollStreamChannel:setFlag(int), GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long), ImmediateEventExecutor:terminationFuture(), DefaultLastHttpContent:touch(), AbstractByteBuf:setBytes(int-ByteBuf-int-int), ObjectUtil:checkNotNull(Object-String), SwappedByteBuf:setDouble(int-double), Bzip2DivSufSort:lsUpdateGroup(int-int-int), Native:epollCreate(), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int), JdkSslEngine:<init>(SSLEngine), PooledHeapByteBuf:getBytes(int-byte[]-int-int), DefaultFullBinaryMemcacheResponse:touch(), WebSocketClientHandshaker08:newHandshakeRequest(), CompressorHttp2ConnectionEncoder:newCompressionChannel(ZlibWrapper), MessageAggregator:isLastContentMessage(ByteBufHolder), Http2Stream:totalChildWeights(), CloseWebSocketFrame:<init>(), ChannelHandlerContext:fireChannelRead(Object), StompSubframeDecoder:actualReadableBytes(), ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-Iterable), UniqueIpFilter$1:<init>(UniqueIpFilter-InetAddress), VoidChannelPromise$1:operationComplete(Future), ThreadLocalRandom:nextLong(long-long), AdvancedLeakAwareByteBuf:slice(), CompositeByteBuf:nioBuffer(int-int), ByteBuf:setBytes(int-InputStream-int), ByteBufUtil$ThreadLocalDirectByteBuf:clear(), SwappedByteBuf:resetWriterIndex(), DeflateDecoder:channelInactive(ChannelHandlerContext), GlobalEventExecutor:hasScheduledTasks(), HttpPostMultipartRequestDecoder:getFileUpload(String), OpenSslSessionStats:<init>(long), AbstractEpollStreamChannel$EpollStreamUnsafe:access$102(AbstractEpollStreamChannel$EpollStreamUnsafe-ChannelPromise), OpenSslX509Certificate:getTBSCertificate(), ForkJoinTask$1:<init>(), WebSocketServerProtocolHandshakeHandler$1:operationComplete(ChannelFuture), ByteBuf:writeMedium(int), Delimiters:lineDelimiter(), AbstractNioChannel:unsafe(), DefaultPromise:access$100(DefaultPromise), MqttConnectPayload:password(), ConcurrentHashMapV8$KeyIterator:nextElement(), MessageToMessageCodec:<init>(Class-Class), DefaultBinaryHeaders$2:convertToShort(AsciiString), Socks4ProxyHandler:newInitialMessage(ChannelHandlerContext), Slf4JLoggerFactory$1:write(int), Http2ConnectionHandler:exceptionCaught(ChannelHandlerContext-Throwable), SSL:getErrorString(long), ForkJoinPool$WorkQueue:cancelAll(), Unsafe:putObject(Object-long-Object), AbstractEpollChannel:doWriteBytes(ByteBuf-int), PlatformDependent:putOrderedObject(Object-long-Object), WrappedByteBuf:writeDouble(double), PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int-PooledUnsafeDirectByteBuf$1), ByteBufAllocator:compositeBuffer(), AbstractChannel:newPromise(), AbstractReferenceCounted:retain(int), NativeDatagramPacketArray$1:onRemoval(Object), JdkLogger:fillCallerData(String-LogRecord), WebSocketFrame:rsv(), ForkJoinTask:doExec(), SlicedByteBuf:nioBufferCount(), ThreadLocalRandom$1:run(), SpdySessionHandler:setSessionReceiveWindowSize(int), ForkJoinTask$RunnableExecuteAction:rethrow(Throwable), Channel:connect(SocketAddress-ChannelPromise), IdleState:<clinit>(), SingleThreadEventExecutor:run(), ConcurrentHashMapV8$EntrySpliterator:advance(), WebSocketClientHandshaker08:newWebSocketEncoder(), Http2Headers:scheme(AsciiString), HttpObjectAggregator$AggregatedFullHttpResponse:copy(ByteBuf), DefaultSctpServerChannelConfig:setReceiveBufferSize(int), ReferenceCountUtil:touch(Object), AbstractEpollStreamChannel$EpollStreamUnsafe$3:run(), PrimitiveCollections$UnmodifiableIntObjectMap$EntryImpl:setValue(Object), DefaultServerSocketChannelConfig:getReceiveBufferSize(), Http2Exception$StreamException:<init>(int-Http2Error-String), ChannelHandlerInvoker:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise), FixedRecvByteBufAllocator$HandleImpl:<init>(int), DefaultOioSocketChannelConfig:setPerformancePreferences(int-int-int), DnsNameResolver:doIsResolved(SocketAddress), AsciiString:isEmpty(), HttpMessageUtil:appendFullRequest(StringBuilder-FullHttpRequest), DefaultSpdyGoAwayFrame:<init>(int-int), OpenSsl:isCipherSuiteAvailable(String), DefaultHttp2FrameWriter:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise), DefaultSctpChannelConfig:setOption(ChannelOption-Object), Socks4ProxyHandler:destinationAddress(), DefaultChannelConfig:<init>(Channel), EmptyBinaryHeaders:set(Object-Object[]), ChannelOption:validate(Object), OioSocketChannel:isOpen(), AbstractOioChannel:eventLoop(), EmptyByteBuf:writerIndex(int), ByteBufUtil:hexDump(byte[]-int-int), AbstractMemoryHttpData:setContent(InputStream), ByteArrayEncoder:encode(ChannelHandlerContext-Object-List), AbstractChannel:isActive(), ForkJoinTask$1:run(), DefaultSpdySettingsFrame:isPersistValue(int), AbstractChannelHandlerContext:disconnect(ChannelPromise), WebSocketServerHandshaker08:selectSubprotocol(String), SctpMessage:protocolIdentifier(), PoolArena:allocateNormal(PooledByteBuf-int-int), SpdySession$StreamState:getPendingWrite(), DefaultHeaders:containsObject(Object-Object), EmptyByteBuf:setChar(int-int), SctpChannel:finishConnect(), AsciiString:toCharArray(int-int), ConcurrentHashMapV8$EntrySetView:addAll(Collection), AbstractReferenceCounted:<init>(), Base64:decodabet(Base64Dialect), DefaultHttp2Connection$DefaultStream:isDescendantOf(Http2Stream), DefaultBinaryHeaders$2:convertLong(long), HttpClientUpgradeHandler$UpgradeCodec:setUpgradeHeaders(ChannelHandlerContext-HttpRequest), ChannelHandlerAppender:<init>(boolean-Iterable), ReplayingDecoderBuffer:forEachByteDesc(int-int-ByteBufProcessor), UnsafeAtomicLongFieldUpdater:get(Object), SwappedByteBuf:getBytes(int-ByteBuffer), CompositeByteBuf:getBytes(int-ByteBuffer), DefaultHttp2Headers:set(Object-Iterable), PoolSubpage:<init>(PoolChunk-int-int-int-int), EmptyHeaders:setByte(Object-byte), ClientCookieDecoder$CookieBuilder:appendAttribute(String-int-int-String), PongWebSocketFrame:touch(), AsciiString:compareTo(CharSequence), NioSctpServerChannel:isActive(), EpollDomainSocketChannelConfig:setWriteBufferHighWaterMark(int), EmptyByteBuf:touch(Object), DiskAttribute:checkSize(long), GlobalTrafficShapingHandler:queuesSize(), Socks5PasswordAuthRequestDecoder:checkpoint(Object), Socks4ClientDecoder$State:<clinit>(), HttpHeaders:addObject(CharSequence-Iterable), SslContext:newHandler(ByteBufAllocator-String-int), IovArray:size(), HttpPostMultipartRequestDecoder:readFileUploadByteMultipart(String), ConcurrentHashMapV8$EntrySetView:forEach(ConcurrentHashMapV8$Action), DefaultTextHeaders$SingleHeaderValuesComposer:<init>(DefaultTextHeaders), DefaultHttp2FrameReader:processPayloadState(ChannelHandlerContext-ByteBuf-Http2FrameListener), DnsResource:touch(), MpscLinkedQueue:retainAll(Collection), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:newInstance(), ReplayingDecoderBuffer:resetWriterIndex(), WebSocketVersion:toHttpHeaderValue(), ThreadPerChannelEventLoop:takeTask(), AbstractByteBuf:writeFloat(float), DefaultPromise:await(long-TimeUnit), JdkSslEngine:getEnableSessionCreation(), NioSctpChannel$NioSctpChannelConfig:<init>(NioSctpChannel-NioSctpChannel-SctpChannel), DnsResource:refCnt(), AsciiString:getBytes(CharSequence-Charset), ChunkedWriteHandler:resumeTransfer(), DefaultPromise:removeListener(GenericFutureListener), LocalChannel:access$300(LocalChannel), MpscLinkedQueue:iterator(), UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int), EmptyTextHeaders:setLong(Object-long), DefaultHttp2Connection$DefaultEndpoint:<init>(DefaultHttp2Connection-boolean), DefaultChannelConfig:validate(ChannelOption-Object), SpdyHttpEncoder:isLast(HttpMessage), QueryStringDecoder:<init>(String-Charset-boolean), ChunkedWriteHandler:access$000(ChunkedWriteHandler-ChannelHandlerContext), EmptyHttp2Headers:setBoolean(Object-boolean), DnsServerAddresses$ShuffledAddressIterator:next(), SctpChannel:getAllLocalAddresses(), AbstractBinaryMemcacheMessage:touch(Object), CorsConfig:preflightResponseHeaders(), PerMessageDeflateClientExtensionHandshaker$PermessageDeflateExtension:newExtensionDecoder(), HttpObjectDecoder:contentLength(), HttpVersion:valueOf(String), Headers$ValueConverter:convertToBoolean(Object), ByteBufAllocator:calculateNewCapacity(int-int), DefaultBinaryHeaders:addObject(Object-Object[]), EmptyArrays:<init>(), IdleStateHandler:access$300(IdleStateHandler), EventExecutor:close(), ForkJoinTask$RunnableExecuteAction:setRawResult(Object), UnpooledDirectByteBuf:_setLong(int-long), NioServerSocketChannel:newSocket(SelectorProvider), AbstractEpollServerChannel$EpollServerSocketUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), ReadOnlyByteBufferBuf:setBytes(int-ByteBuffer), OpenSslEngine:toJavaCipherSuite(String), EmptyHttpHeaders:addBoolean(CharSequence-boolean), ConcurrentHashMapV8$ObjectToLong:apply(Object), PoolThreadCache:<init>(PoolArena-PoolArena-int-int-int-int-int), OioDatagramChannel:doClose(), ByteBuf:writeBytes(ByteBuf), UnsafeDirectSwappedByteBuf:writeLong(long), SSLContext:setSessionTicketKeys(long-byte[]), HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest), RecyclableArrayList:add(Object), OpenSslEngine:getHandshakeStatus(), EpollEventLoop:cleanup(), ReplayingDecoderBuffer:setBytes(int-byte[]-int-int), EmbeddedEventLoop:invokeChannelWritabilityChanged(ChannelHandlerContext), OpenSslServerContext:<clinit>(), MixedFileUpload:duplicate(), EmptyConvertibleHeaders:setInt(Object-int), DefaultSpdyGoAwayFrame:status(), HttpObjectAggregator$AggregatedFullHttpMessage:headers(), PendingWriteQueue:add(Object-ChannelPromise), ChannelFuture:channel(), FixedCompositeByteBuf:_getLong(int), ChannelMatchers:<init>(), SSLSession:getCipherSuite(), DefaultHttp2Connection:createLocalStream(int), UnpooledDirectByteBuf:getBytes(int-ByteBuf-int-int), DefaultHttp2FrameReader:readDataFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), HttpObjectAggregator$AggregatedFullHttpMessage:retain(int), AbstractChannel$AbstractUnsafe:recvBufAllocHandle(), MqttFixedHeader:isDup(), DefaultEventExecutor:<init>(EventExecutorGroup-Executor), DefaultStompHeaders:addBoolean(CharSequence-boolean), ReadOnlyByteBuf:getUnsignedMedium(int), MqttConnectVariableHeader:toString(), DefaultBinaryHeaders:addChar(Object-char), LocalChannel:access$400(LocalChannel-ChannelPipeline), AbstractChannel:doDisconnect(), OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise), ByteBufAllocator:isDirectBufferPooled(), Socks5PasswordAuthResponseDecoder:fail(List-Throwable), DnsNameResolverContext$3:<clinit>(), MessageFormatter:isEscapedDelimeter(String-int), AsciiString:copy(int-ByteBuf-int), DefaultPromise:access$300(ProgressiveFuture-GenericProgressiveFutureListener-long-long), SpdyFrameCodec:<init>(SpdyVersion-int-SpdyHeaderBlockDecoder-SpdyHeaderBlockEncoder), Http2InboundFrameLogger$1:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean), SpdySession:removePendingWrite(int), InternalAttribute:touch(), AbstractChannel:doWrite(ChannelOutboundBuffer), ReferenceCountUtil:<init>(), AbstractTrafficShapingHandler:configure(long-long-long), HttpServerCodec:<init>(int-int-int), DefaultBinaryHeaders:setObject(AsciiString-Object[]), ScheduledFutureTask:deadlineNanos(long), ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long), EmbeddedChannel:writeOutbound(Object[]), ChunkedWriteHandler$PendingWrite:success(long), Bzip2Encoder$State:valueOf(String), DefaultEventLoop:<init>(Executor), DefaultHttp2RemoteFlowController$FlowState:access$600(DefaultHttp2RemoteFlowController$FlowState), LZ4Compressor:compress(byte[]-int-int-byte[]-int), DeflateDecoder:newRsv(WebSocketFrame), SwappedByteBuf:getFloat(int), SpdyHeaderBlockZlibDecoder:endHeaderBlock(SpdyHeadersFrame), DiskAttribute:setMaxSize(long), AbstractNioChannel$AbstractNioUnsafe:<clinit>(), MqttSubAckPayload:grantedQoSLevels(), Socks5ProxyHandler:addCodec(ChannelHandlerContext), CompositeByteBuf:readBytes(byte[]), DefaultStompContentSubframe:toString(), PoolChunk:runOffset(int), ZlibCodecFactory:newZlibEncoder(int-int-int-byte[]), EpollDomainSocketChannel:<init>(Channel-int), InboundHttp2ToHttpPriorityAdapter$Builder:<init>(Http2Connection), DefaultChannelPipeline:replace(ChannelHandler-String-ChannelHandler), Http2LocalFlowController:initialWindowSize(), OpenSslEngine:setClientAuth(OpenSslEngine$ClientAuthMode), DefaultTextHeaders$DefaultTextValueTypeConverter:convertLong(long), DefaultStompHeaders:setShort(CharSequence-short), PooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int), Native:recvFd(int), ConcurrentHashMapV8$MapReduceValuesToLongTask:firstComplete(), Unpooled:copyInt(int), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToShort(Object), DefaultSpdySynReplyFrame:setStreamId(int), EpollDatagramChannel:leaveGroup(InetAddress), ByteBuf:writeInt(int), HttpProxyHandler:<init>(SocketAddress-String-String), CompleteChannelFuture:sync(), DefaultChannelGroup:writeAndFlush(Object-ChannelMatcher), DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter-int-int), WrappedByteBuf:readUnsignedByte(), ReadOnlyByteBufferBuf:_setByte(int-int), CommonsLogger:isDebugEnabled(), DuplicatedByteBuf:nioBuffers(int-int), JdkSslContext:newEngine(ByteBufAllocator-String-int), ChannelPromise:setSuccess(Void), ByteBuf:equals(Object), RtspRequestDecoder:createMessage(String[]), EpollDomainSocketChannelConfig:validate(ChannelOption-Object), DefaultBinaryHeaders:set(AsciiString-AsciiString), ByteBufAllocator:heapBuffer(int-int), HashedWheelTimer:access$500(HashedWheelTimer), Utf8Validator:process(byte), AbstractChannel:voidPromise(), HttpRequestDecoder:<init>(int-int-int), AbstractInternalLogger:trace(String-Object[]), CompositeByteBuf:getBytes(int-GatheringByteChannel-int), Native:sendfile(int-DefaultFileRegion-long-long-long), Slf4JLogger:warn(String-Object-Object), DefaultHttp2LocalFlowController$FlowState:incrementFlowControlWindows(int), DefaultBinaryHeaders:addLong(Object-long), DefaultHttp2Headers:addInt(AsciiString-int), Native:epollWait(int-EpollEventArray-int), AsciiString:parseDouble(), WebSocket00FrameDecoder:actualReadableBytes(), ProtobufDecoder:<init>(MessageLite), DefaultChannelPipeline$1:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), JdkSslServerContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), JdkSslSession:getPeerHost(), DatagramPacket:duplicate(), DefaultBinaryHeaders$2:convertToByte(AsciiString), FileDescriptor:intValue(), EpollDatagramChannel:isOpen(), HttpMethod:<init>(String), EmptyHttp2Headers:setObject(Object-Iterable), DefaultHttp2FrameReader:verifyNotProcessingHeaders(), EmptyByteBuf:readDouble(), ForkJoinTask:getQueuedTaskCount(), ConcurrentHashMapV8$SearchValuesTask:getRawResult(), DefaultUdtChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), NativeLibraryLoader:isOSX(), HttpToHttp2ConnectionHandler:<init>(Http2ConnectionDecoder$Builder-Http2ConnectionEncoder$Builder), MixedFileUpload:getHttpDataType(), AbstractChannel$AbstractUnsafe:voidPromise(), EpollEventLoop:<clinit>(), HttpPostRequestEncoder:encodeAttribute(String-Charset), DefaultHttp2FrameWriter:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), AbstractByteBuf:_setMedium(int-int), HttpStatusClass[]:clone(), EmptyByteBuf:touch(), ChannelHandlerAdapter:read(ChannelHandlerContext), JdkAlpnApplicationProtocolNegotiator:protocolListenerFactory(), ChannelHandlerInvoker:invokeChannelRegistered(ChannelHandlerContext), DefaultTextHeaders$MultipleFieldsValueComposer:set(CharSequence-CharSequence[]), ChannelOutboundBuffer$2:<init>(ChannelOutboundBuffer-ChannelPipeline), MixedAttribute:touch(), EmptyHttp2Headers:addChar(Object-char), GlobalChannelTrafficShapingHandler:doAccounting(TrafficCounter), Log4JLogger:info(String), Bootstrap:init(Channel), MqttEncoder:<init>(), AbstractEventExecutor:next(), NextProtoNego:remove(SSLEngine), MqttMessageType:name(), Socks5InitialResponseDecoder:state(), MqttEncoder:encodeConnAckMessage(ByteBufAllocator-MqttConnAckMessage), EmptyHeaders:entries(), Snappy$State[]:clone(), FileUpload:setCharset(Charset), DefaultHttpDataFactory:<init>(long-Charset), DnsMessage:questions(), NioDatagramChannel:javaChannel(), NioDatagramChannel:leaveGroup(InetAddress), HashedWheelTimer:<init>(ThreadFactory), AbstractNioChannel:pipeline(), CommonsLogger:debug(String-Object[]), EmptyByteBuf:setZero(int-int), AbstractReferenceCountedByteBuf:writeShort(int), MessageToMessageEncoder:write(ChannelHandlerContext-Object-ChannelPromise), DefaultHttp2LocalFlowController:receiveFlowControlledFrame(ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean), Http2Headers$PseudoHeaderName:valueOf(String), PongWebSocketFrame:<init>(ByteBuf), DefaultChannelHandlerInvoker$9:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EmptyTextHeaders:addBoolean(CharSequence-boolean), ChannelFlushPromiseNotifier$DefaultFlushCheckpoint:<init>(long-ChannelPromise), AbstractChannelHandlerContext:executor(), LocalServerChannel:localAddress(), MultithreadEventExecutorGroup:shutdownGracefully(long-long-TimeUnit), LZFEncoder:appendEncoded(ChunkEncoder-byte[]-int-int-byte[]-int), EmptyByteBuf:toString(Charset), AbstractByteBuf:equals(Object), DefaultEventLoopGroup:<init>(int-ExecutorServiceFactory), Socks5PasswordAuthResponseDecoder$State:<init>(String-int), WrappedByteBuf:slice(int-int), SwappedByteBuf:readBytes(int), DefaultHeaders:getIntAndRemove(Object-int), Http2Settings:headerTableSize(), MqttPublishMessage:fixedHeader(), DuplicatedByteBuf:_setMedium(int-int), BinaryMemcacheClientCodec:add(ChannelHandler), SpdySessionStatus:code(), Logger:isWarnEnabled(), ConcurrentHashMapV8$MapReduceValuesToIntTask:addToPendingCount(int), ChannelMatchers$1:<init>(), SpdyHttpEncoder:<init>(SpdyVersion), DefaultChannelConfig:setAllocator(ByteBufAllocator), ChannelHandlerInvoker:invokeChannelUnregistered(ChannelHandlerContext), UnreleasableByteBuf:<init>(ByteBuf), EpollSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), Unsafe:getLong(Object-long), HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-int), DefaultUdtChannelConfig:setReuseAddress(boolean), AbstractNioByteChannel:isReadPending(), ReplayingDecoderBuffer:getDouble(int), SslHandler:close(ChannelHandlerContext-ChannelPromise), JdkZlibDecoder$GzipState:ordinal(), NioSocketChannel:clearOpWrite(), ChannelTrafficShapingHandler:<init>(long-long), Bzip2DivSufSort:lsIntroSort(int-int-int-int-int), HttpPostMultipartRequestDecoder:readLineStandard(), RunnableEventExecutorAdapter:run(), FullBinaryMemcacheResponse:setDataType(byte), ForkJoinTask$RunnableExecuteAction:internalPropagateException(Throwable), JdkAlpnSslEngine$2:selected(String), SwappedByteBuf:writeDouble(double), DefaultHeaders:getShortAndRemove(Object-short), DefaultHttp2FrameReader:readPadding(ByteBuf), InterfaceHttpData$HttpDataType:values(), SpdyHeaderBlockRawDecoder:<init>(SpdyVersion-int), SSLSession:getSessionContext(), DnsQuery:retain(int), DefaultHeaders:getChar(Object), GlobalTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long), EmptyTextHeaders:addObject(CharSequence-Object), EpollServerSocketChannel:<init>(), AbstractByteBuf:nioBufferCount(), AbstractServerChannel$DefaultServerUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), ConcurrentHashMapV8:putVal(Object-Object-boolean), ChannelPromise:channel(), PooledDirectByteBuf:readBytes(GatheringByteChannel-int), MqttMessageIdVariableHeader:messageId(), NetUtil:<init>(), DefaultBinaryHeaders:addFloat(AsciiString-float), JdkLogger:<init>(Logger), HttpObjectAggregator$AggregatedFullHttpRequest:setUri(String), SingleThreadEventExecutor:inEventLoop(), AbstractByteBuf:checkDstIndex(int-int-int-int), DefaultHeaders:remove0(int-int-Object), PausableChannelEventExecutor:isShuttingDown(), SpdyVersion:<init>(String-int-int-int), HttpPostRequestEncoder$WrappedFullHttpRequest:setUri(String), DefaultChannelPipeline$TailContext:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), EmbeddedChannel$LastInboundHandler:exceptionCaught(ChannelHandlerContext-Throwable), CorruptedFrameException:<init>(String), HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion), DefaultSpdySettingsFrame:setValue(int-int-boolean-boolean), DiskAttribute:<init>(String), DefaultHttp2FrameWriter:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise), DiskAttribute:setContent(ByteBuf), DnsQueryHeader:setType(int), Bootstrap:<init>(), ConcurrentHashMapV8$ReduceKeysTask:invoke(), WebSocketServerHandshaker07:maxFramePayloadLength(), DuplicatedByteBuf:forEachByteDesc(int-int-ByteBufProcessor), DefaultHttp2HeadersEncoder:access$200(DefaultHttp2HeadersEncoder), ChannelTrafficShapingHandler$1:run(), Base64:encode(ByteBuf-int-int-boolean), CorsHandler:setAnyOrigin(HttpResponse), MqttQoS:valueOf(String), Socks5PasswordAuthRequestDecoder$State:<init>(String-int), Bzip2Encoder$3:<init>(Bzip2Encoder-ChannelHandlerContext-ChannelPromise), ForkJoinPool:tryAddWorker(), EmptyByteBuf:writeDouble(double), PausableChannelEventExecutor:invokeFlush(ChannelHandlerContext), DnsQuestion:name(), AbstractByteBuf:readChar(), DefaultSpdyPingFrame:id(), AbstractEpollStreamChannel$EpollStreamUnsafe$2:operationComplete(Future), ProxyHandler:access$300(ProxyHandler), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), CompositeByteBuf:nioBuffers(int-int), StringUtil:split(String-char-int), WebSocketFrame:<init>(boolean-int-ByteBuf), MixedFileUpload:retain(), UnreleasableByteBuf:order(), SSLContext:sessionCacheFull(long), DefaultStompHeaders:setObject(CharSequence-Iterable), DefaultHttp2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise), ThreadLocalInsecureRandom:nextBoolean(), DefaultChannelPipeline:callHandlerRemoved(AbstractChannelHandlerContext), SctpMessage:hashCode(), WrappedByteBuf:resetReaderIndex(), ReadOnlyByteBuf:isDirect(), DefaultHttp2RemoteFlowController:flush(), HAProxyProxiedProtocol:values(), HashedWheelTimer:createWheel(int), PlatformDependent:hasUnsafe(), EmptyHttpHeaders:setInt(CharSequence-int), ChannelBufferByteInput:read(), DefaultHeaders:getByteAndRemove(Object-byte), SpdySessionHandler$1:<init>(SpdySessionHandler-ChannelHandlerContext), FullHttpRequest:trailingHeaders(), EmptyTextHeaders:add(Object-Iterable), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:<init>(), EmptyHttp2Headers:set(Object-Object), ThreadPerChannelEventLoop:confirmShutdown(), DelegatingDecompressorFrameListener$ConsumedBytesConverter:windowSize(Http2Stream), Bzip2HuffmanAllocator:first(int[]-int-int), ForkJoinTask:peekNextLocalTask(), ChannelGroupException:iterator(), CountedCompleter$1:<init>(), JsonObjectDecoder:<init>(), SwappedByteBuf:readUnsignedShort(), HttpObjectEncoder:<init>(), EmptyByteBuf:writeBytes(ByteBuf), Bzip2DivSufSort:ssInsertionSort(int-int-int-int), SpdySession$StreamState:isRemoteSideClosed(), AbstractByteBufAllocator:heapBuffer(), WrappedByteBuf:refCnt(), MixedAttribute:getString(Charset), SpdySession:numActiveStreams(boolean), ChannelConfig:getWriteSpinCount(), DuplicatedByteBuf:_setLong(int-long), DefaultConvertibleHeaders:addChar(Object-char), PendingWriteQueue:isEmpty(), PlatformDependent0:copyMemory(long-long-long), EpollSocketChannel$2:run(), ReadOnlyByteBuf:capacity(int), X509TrustManager:checkServerTrusted(X509Certificate[]-String), DnsNameResolver:maxPayloadSizeClass(), SwappedByteBuf:setZero(int-int), Http2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise), ChunkedInput:isEndOfInput(), BinaryWebSocketFrame:<init>(ByteBuf), HashedWheelTimer$HashedWheelTimeout:expire(), DefaultHeaders:getByteAndRemove(Object), SwappedByteBuf:getBytes(int-GatheringByteChannel-int), ReadOnlyByteBufferBuf:setBytes(int-byte[]-int-int), FixedCompositeByteBuf:_setMedium(int-int), EpollChannelConfig:getOptions(Map-ChannelOption[]), ForkJoinTask:readObject(ObjectInputStream), DefaultHttp2LocalFlowController$1:<init>(DefaultHttp2LocalFlowController), SslContext:newClientContext(SslProvider), JdkSslEngine:wrap(ByteBuffer[]-ByteBuffer), PooledUnsafeDirectByteBuf:checkIndex(int), DefaultConvertibleHeaders:setObject(Object-Object), PoolChunkList:free(PoolChunk-long), EpollSocketChannelConfig:getTcpKeepIntvl(), AbstractByteBuf:setChar(int-int), UnpooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean), EmptyHttpHeaders:set(Object-Iterable), ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-int-String), LengthFieldBasedFrameDecoder:failIfNecessary(boolean), EmptyHeaders:addByte(Object-byte), SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-Object-List), Http2OrHttpChooser:initPipeline(ChannelHandlerContext), NameResolverGroup:<clinit>(), NetUtil:isValidNumericChar(char), WebSocketClientProtocolHandler:handlerAdded(ChannelHandlerContext), ForkJoinWorkerThread:onStart(), DnsResponse:addAnswer(DnsResource), SwappedByteBuf:readBytes(ByteBuffer), EmbeddedChannel:<init>(ChannelHandler[]), UnpooledUnsafeDirectByteBuf:_setInt(int-int), ChannelOutboundBuffer:incrementPendingOutboundBytes(long-boolean), HttpPostMultipartRequestDecoder:cleanString(String), EmptyByteBuf:setBytes(int-ScatteringByteChannel-int), Http2ConnectionDecoder$Builder:lifecycleManager(Http2LifecycleManager), CompositeByteBuf:addComponents(int-Iterable), EmbeddedEventLoop:invokeChannelUnregistered(ChannelHandlerContext), DefaultHttpMessage:equals(Object), SpdyHeaderBlockRawDecoder:endHeaderBlock(SpdyHeadersFrame), UnsafeDirectSwappedByteBuf:writeDouble(double), HttpHeaders:getInt(Object-int), Socks5PasswordAuthResponseDecoder$State[]:clone(), AbstractEpollStreamChannel:<init>(FileDescriptor), RxtxChannelConfig$Paritybit[]:clone(), Http2FrameListenerDecorator:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf), SslHandler:wrap(ByteBufAllocator-SSLEngine-ByteBuf-ByteBuf), DnsQuery:header(), CompositeByteBuf:readerIndex(int), BinaryMemcacheResponse:setDataType(byte), HttpObjectDecoder:splitHeader(AppendableCharSequence), Unpooled:copiedBuffer(ByteBuf[]), EmptyBinaryHeaders:addChar(Object-char), ReadOnlyByteBuf:<init>(ByteBuf), AbstractEpollChannel:doDeregister(), Socks5InitialRequestDecoder$State:ordinal(), NioSocketChannel:access$300(NioSocketChannel-boolean), ReadOnlyByteBufferBuf:getBytes(int-OutputStream-int), EmptyTextHeaders:setBoolean(CharSequence-boolean), StompSubframeAggregator:isAggregated(Object), RtspResponseDecoder:<init>(int-int-int-boolean), HttpHeaders:add(TextHeaders), Signal:expect(Signal), NioUdtAcceptorChannel:<init>(TypeUDT), InternalAttribute:setValue(String-int), HttpObjectDecoder:<init>(), ByteBufHolder:content(), DnsNameResolver$2:operationComplete(ChannelFuture), WebSocketClientHandshaker00:expectedSubprotocol(), DefaultMemcacheContent:<init>(ByteBuf), JdkLogger:info(String), EpollSocketChannelConfig:setReuseAddress(boolean), CorsHandler:isPreflightRequest(HttpRequest), DnsNameResolver:setResolveAddressTypes(Iterable), DefaultChannelPipeline$HeadContext:disconnect(ChannelHandlerContext-ChannelPromise), DnsResource:name(), ReadOnlyByteBufferBuf:copy(int-int), DefaultStompFrame:release(), SingleThreadEventExecutor:access$200(), ByteBuf:readDouble(), Buffer:address(ByteBuffer), GlobalChannelTrafficShapingHandler:informReadOperation(ChannelHandlerContext-long), FastThreadLocal:isSet(), DefaultAddressedEnvelope:release(), DefaultSocketChannelConfig:getOptions(Map-ChannelOption[]), JavassistTypeParameterMatcherGenerator:<clinit>(), DefaultHeaders:addObject(Object-Iterable), AbstractEpollServerChannel:metadata(), MultithreadEventLoopGroup:register(Channel), PlatformDependent0:arrayBaseOffset(), ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object), ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), DefaultDatagramChannelConfig:setSendBufferSize(int), EmptyByteBuf:checkIndex(int-int), JdkBaseApplicationProtocolNegotiator:protocolListenerFactory(), DelegatingDecompressorFrameListener$ConsumedBytesConverter:unconsumedBytes(Http2Stream), EpollDomainSocketChannelConfig:<init>(AbstractEpollChannel), DefaultChannelPipeline:addFirst0(String-AbstractChannelHandlerContext), DnsServerAddresses$2:<init>(InetSocketAddress[]), FastThreadLocal:get(InternalThreadLocalMap), CompositeByteBuf:writerIndex(), WrappedByteBuf:readBytes(OutputStream-int), CompositeByteBuf:setBytes(int-byte[]), CipherSuiteConverter:cacheFromJava(String), ForkJoinPool:quiesceCommonPool(), SimpleNameResolver:<init>(EventExecutor), AbstractByteBuf:checkIndex(int), MixedAttribute:getHttpDataType(), ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]), Base64Encoder:encode(ChannelHandlerContext-Object-List), DeflateEncoder:encode(ChannelHandlerContext-WebSocketFrame-List), DefaultConvertibleHeaders$ConvertedIterator:next(), JdkSslClientContext:<init>(File), WebSocket13FrameEncoder:<init>(boolean), SingleThreadEventExecutor:confirmShutdown(), DefaultChannelPromise:trySuccess(Object), DefaultLastHttpContent:appendHeaders(StringBuilder), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(boolean-ByteBuf), JdkSslContext:isClient(), Unsafe:arrayIndexScale(Class), EmptyTextHeaders:addObject(Object-Iterable), SSL:getSessionId(long), ChannelHandler:channelReadComplete(ChannelHandlerContext), Native:strError(int), Promise:trySuccess(Object), MixedFileUpload:equals(Object), SslHandler$LazyChannelPromise:isDone(), ConcurrentHashMapV8$MapReduceMappingsTask:compute(), HttpClientUpgradeHandler$UpgradeEvent:<init>(String-int), PoolArena:allocate(PoolThreadCache-PooledByteBuf-int), IdleStateHandler:access$500(IdleStateHandler), ChannelTrafficShapingHandler:access$100(ChannelTrafficShapingHandler-ChannelHandlerContext-long), Socks5CommandRequestDecoder$State:<clinit>(), SwappedByteBuf:toString(int-int-Charset), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf), HttpMessage:setProtocolVersion(HttpVersion), MqttDecoder:decodeVariableHeader(ByteBuf-MqttFixedHeader), ReadOnlyByteBufferBuf:hasArray(), PoolChunk:updateParentsAlloc(int), DefaultHttp2FrameReader:readHeadersFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), FastLz:compress(byte[]-int-int-byte[]-int-int), EmptyByteBuf:equals(Object), Logger:error(String), PooledUnsafeDirectByteBuf:newSwappedByteBuf(), AbstractByteBufAllocator:calculateNewCapacity(int-int), DefaultHttp2LocalFlowController$FlowState:writeWindowUpdate(ChannelHandlerContext), HttpMessageUtil:appendInitialLine(StringBuilder-HttpResponse), MixedFileUpload:getFilename(), SpdySessionHandler$3:operationComplete(ChannelFuture), Socks5CommandType:<init>(int), UnpooledHeapByteBuf:setBytes(int-ByteBuf-int-int), DefaultDatagramChannelConfig:validate(ChannelOption-Object), Http2Connection$Listener:priorityTreeParentChanged(Http2Stream-Http2Stream), ByteBufInputStream:readLong(), Http2Settings:getIntValue(int), MixedFileUpload:setCharset(Charset), DefaultHttp2FrameReader$HeadersContinuation:getStreamId(), BinaryMemcacheRequest:key(), ByteToMessageDecoder$1:cumulate(ByteBufAllocator-ByteBuf-ByteBuf), DnsResponseHeader:responseCode(), DiskFileUpload:retain(int), MemoryAttribute:compareTo(InterfaceHttpData), MpscLinkedQueue:setTailRef(MpscLinkedQueueNode), ByteBufInputStream:reset(), SimpleChannelInboundHandler:<init>(boolean), WebSocket00FrameDecoder:decodeTextFrame(ChannelHandlerContext-ByteBuf), MqttConnectReturnCode:valueOf(byte), EmptyHttp2Headers:addObject(Object-Iterable), ForkJoinPool:helpJoinOnce(ForkJoinPool$WorkQueue-ForkJoinTask), DomainSocketReadMode:valueOf(String), SpdyPingFrame:id(), MixedAttribute:getByteBuf(), DnsNameResolver:setMaxPayloadSize(int), ChunkedWriteHandler$2:<init>(ChunkedWriteHandler-ChunkedWriteHandler$PendingWrite-ChunkedInput), AbstractNioChannel:access$200(AbstractNioChannel), DefaultHeaders$NameConverter:convertName(Object), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-boolean), AdvancedLeakAwareByteBuf:setBytes(int-ScatteringByteChannel-int), SimpleLeakAwareByteBuf:duplicate(), DefaultChannelPipeline:addLast(ChannelHandlerInvoker-ChannelHandler[]), DefaultEventExecutorGroup:<init>(int), ForkJoinPool:tryExternalUnpush(ForkJoinTask), DefaultChannelHandlerInvoker$5:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Throwable), FailedChannelFuture:sync(), ByteBufInputStream:readUnsignedByte(), SpdyFrameEncoder:encodeSettingsFrame(ByteBufAllocator-SpdySettingsFrame), EmptyHttp2Headers:clear(), AbstractChannel:doClose(), ThreadDeathWatcher:watch(Thread-Runnable), ScheduledFutureTask:deadlineNanos(), HttpMessageUtil:appendFullCommon(StringBuilder-FullHttpMessage), ReadOnlyByteBuf:getInt(int), DnsResource:dnsClass(), LoggingHandler:<init>(String-LogLevel), EmbeddedChannelId:compareTo(ChannelId), DiskAttribute:getValue(), InboundHttp2ToHttpPriorityAdapter$1:<init>(Http2Headers), DefaultChannelConfig:getOptions(Map-ChannelOption[]), ConcurrentHashMapV8:searchValues(long-ConcurrentHashMapV8$Fun), EmptyByteBuf:readBytes(int), DefaultHttpObject:hashCode(), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), CompositeByteBuf:internalComponent(int), LZ4Factory:fastCompressor(), DefaultUdtChannelConfig:getSendBufferSize(), DefaultHttp2ConnectionDecoder$1:<clinit>(), BinaryMemcacheResponse:cas(), Encoder:setEndMarkerMode(boolean), DefaultTextHeaders$MultipleFieldsValueComposer:add(CharSequence-CharSequence[]), AbstractEventExecutorGroup:next(), ReplayingDecoderBuffer:refCnt(), GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long), PoolThreadCache$MemoryRegionCache:access$100(PoolThreadCache$MemoryRegionCache), Unpooled:unmodifiableBuffer(ByteBuf[]), DefaultHttp2Headers:setObject(AsciiString-Iterable), InboundHttp2ToHttpAdapter$Builder:access$300(InboundHttp2ToHttpAdapter$Builder), HttpResponseStatus:<init>(int-String), OpenSslX509Certificate:getExtensionValue(String), ChannelHandlerInvokerUtil:inExceptionCaught(Throwable), HttpStatusClass:<init>(String-int-int-int-String), MixedFileUpload:setMaxSize(long), DefaultAttributeMap:index(AttributeKey), CompositeByteBuf:readBytes(byte[]-int-int), Socks5ClientEncoder:encode(ChannelHandlerContext-Object-ByteBuf), MqttIdentifierRejectedException:<init>(), DnsQueryEncoder:encodeResource(DnsResource-Charset-ByteBuf), ConcurrentHashMapV8:reduce(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), PooledDirectByteBuf:setBytes(int-ByteBuf-int-int), PromiseTask:setFailure(Throwable), DnsNameResolverContext:onResponse(DnsQuestion-DnsResponse), HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent-HttpPostRequestEncoder$1), NetUtil:getByName(CharSequence-boolean), MemoryAttribute:checkSize(long), DefaultSpdyGoAwayFrame:lastGoodStreamId(), PooledHeapByteBuf:capacity(), NioServerSocketChannel$NioServerSocketChannelConfig:autoReadCleared(), HttpMessageUtil:appendResponse(StringBuilder-HttpResponse), DefaultExecutorServiceFactory:access$100(), WrappedByteBuf:resetWriterIndex(), CompositeByteBuf:allocBuffer(int), EmptyByteBuf:retain(), AbstractChannel$PausableChannelEventLoop:rejectNewTasks(), DefaultChannelPipeline:read(), DefaultTextHeaders:access$1501(DefaultTextHeaders-Object-Object), DefaultSpdyRstStreamFrame:status(), Bzip2DivSufSort:getIDX(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), DecoderResult:isSuccess(), HashedWheelTimer$Worker:processCancelledTasks(), JdkSslSession:getProtocol(), SpdyHeaderBlockEncoder:newInstance(SpdyVersion-int-int-int), DefaultHeaders:namesList(), JdkLogger:isWarnEnabled(), SwappedByteBuf:readBytes(GatheringByteChannel-int), DnsResponseCode:equals(Object), DefaultHttp2Headers:addObject(Object-Object[]), AbstractNioByteChannel:setInputShutdown(), EpollDatagramChannel:block(InetAddress-InetAddress-ChannelPromise), DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel), ObjectEncoderOutputStream:writeInt(int), Socks5InitialRequest:version(), EmbeddedEventLoop:execute(Runnable), MqttUnsubscribeMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttUnsubscribePayload), EpollDatagramChannelConfig:setBroadcast(boolean), ForkJoinTask$AdaptedCallable:exec(), DefaultSpdySynStreamFrame:isLast(), ProtobufDecoder:<clinit>(), DnsMessage:retain(List), DefaultTextHeaders:addChar(CharSequence-char), DefaultHttpHeaders:setChar(Object-char), Socks5CommandRequest:dstPort(), ConvertibleHeaders$TypeConverter:toConvertedType(Object), ChannelMatchers$InvertMatcher:matches(Channel), Recycler$WeakOrderQueue:access$1502(Recycler$WeakOrderQueue-Recycler$WeakOrderQueue), Unsafe:getInt(Object-long), Attribute:compareTo(Object), ConcurrentHashMapV8:keySet(), DuplicatedByteBuf:_getShort(int), HttpVersion:majorVersion(), NioSocketChannel:newPromise(), Socks5CommandResponse:version(), OioSctpChannel$OioSctpChannelConfig:<init>(OioSctpChannel-OioSctpChannel-SctpChannel-OioSctpChannel$1), ObjectDecoderInputStream:<init>(InputStream-int), DefaultExecutorServiceFactory:<clinit>(), HttpServerUpgradeHandler$UpgradeCodec:requiredUpgradeHeaders(), EmptyTextHeaders:addTimeMillis(CharSequence-long), FileUpload:delete(), PendingWrite:<clinit>(), SpdyVersion[]:clone(), UnpooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int), LastHttpContent$1:<init>(), ConcurrentHashMapV8:size(), Recycler$WeakOrderQueue$Link:<init>(), TrustManagerFactorySpi:<init>(), ConcurrentHashMapV8$MapReduceValuesToLongTask:compute(), SpdyHeaderBlockRawDecoder$1:<clinit>(), LocalChannel$5:run(), Version:parseIso8601(String), ByteBufOutputStream:writeUTF(String), SnappyFrameDecoder$ChunkType:valueOf(String), PausableChannelEventExecutor:shutdownGracefully(), PlatformDependent:getLong(long), DatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), DefaultSocketChannelConfig:setOption(ChannelOption-Object), MqttEncoder:getConnVariableHeaderFlag(MqttConnectVariableHeader), HAProxyProtocolVersion:<init>(String-int-byte), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:addToPendingCount(int), SpdyFrameCodec:readHeaderBlockEnd(), OpenSslClientContext:initTrustManagerFactory(File-TrustManagerFactory), DefaultChannelHandlerInvoker$10:run(), UnpooledDirectByteBuf:internalNioBuffer(int-int), DnsType:<clinit>(), DefaultStompHeaders:addByte(CharSequence-byte), NameResolverGroup:access$000(NameResolverGroup), ConcurrentHashMapV8$MapReduceEntriesToLongTask:invoke(), SimpleLeakAwareByteBuf:slice(), DefaultHttp2Connection:access$500(DefaultHttp2Connection-List), Http2FrameWriter:close(), FastLz:hashFunction(byte[]-int), AbstractOioMessageChannel:<init>(Channel), EventLoop:newFailedFuture(Throwable), DefaultHttp2FrameReader:readContinuationFrame(ByteBuf-Http2FrameListener), DefaultHttp2RemoteFlowController$FlowState:resetAllocated(), DnsResponse:answers(), UnsafeAtomicReferenceFieldUpdater:get(Object), AbstractEpollStreamChannel$EpollStreamUnsafe$2:operationComplete(ChannelFuture), DnsNameResolver:maxTtl(), Http2Headers:path(), DefaultSpdySettingsFrame:getValue(int), NioSocketChannel:remoteAddress0(), ConcurrentHashMapV8$KeySetView:containsAll(Collection), DefaultChannelId:init(), Socks5CommandResponseDecoder:actualReadableBytes(), UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer), BinaryMemcacheClientCodec:<init>(), AbstractEpollStreamChannel:isFlagSet(int), OpenSslEngine:toJavaCipherSuitePrefix(String), Http2CodecUtil:immediateRemovalPolicy(), PooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int), NioEventLoop:cleanupAndTerminate(boolean), PendingWrite:<init>(Recycler$Handle-PendingWrite$1), InsecureTrustManagerFactory:access$000(), UdtChannelConfig:getReceiveBufferSize(), CompatibleMarshallingDecoder:decode(ChannelHandlerContext-ByteBuf-List), Http2Headers:remove(Object), ChannelOutboundBuffer:fireChannelWritabilityChanged(boolean), DefaultHttp2FrameWriter:verifyPayloadLength(int), FixedCompositeByteBuf:_setLong(int-long), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), DefaultHttp2Connection$DefaultEndpoint:opposite(), DefaultTextHeaders$MultipleFieldsValueComposer:add(CharSequence-Iterable), Http2ServerUpgradeCodec$1:onSettingsRead(ChannelHandlerContext-Http2Settings), Http2ClientUpgradeCodec:getSettingsHeaderValue(ChannelHandlerContext), DefaultSctpServerChannelConfig:setWriteBufferHighWaterMark(int), DefaultMessageSizeEstimator$HandleImpl:<init>(int), PerMessageDeflateEncoder:acceptOutboundMessage(Object), DefaultSocks5CommandResponse:decoderResult(), ChannelConfig:getMaxMessagesPerRead(), HttpContentEncoder:<clinit>(), SwappedByteBuf:release(), ThreadPerChannelEventLoopGroup:nextChild(), TextWebSocketFrame:touch(), NioServerSocketChannel:doBind(SocketAddress), DnsQueryContext$1:operationComplete(ChannelFuture), AbstractTrafficShapingHandler:<init>(long), SlicedByteBuf:capacity(int), SwappedByteBuf:writeFloat(float), CompositeByteBuf:writeBytes(ByteBuffer), IdleStateHandler$AllIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), ReadOnlyByteBufferBuf:_setShort(int-int), ReferenceCountUtil:retain(Object-int), ByteBufOutputStream:buffer(), GlobalChannelTrafficShapingHandler:computeBalancedWait(float-float-long), SctpChannel:getRemoteAddresses(), DefaultHttp2FrameReader$HeadersContinuation:processFragment(boolean-ByteBuf-Http2FrameListener), SpdySession:activeStreams(), OpenSslEngine$ClientAuthMode[]:clone(), LocalChannel$State:<init>(String-int), AbstractNioChannel:isOpen(), Signal:<init>(int-String-Signal$1), MpscLinkedQueue:getAndSetTailRef(MpscLinkedQueueNode), DefaultHttp2ConnectionDecoder$Builder:frameReader(Http2FrameReader), SpdySettingsFrame:setClearPreviouslyPersistedSettings(boolean), DefaultConvertibleHeaders:addLong(Object-long), DnsResponseDecoder:<init>(), UdtChannelOption:<clinit>(), DefaultHeaders$IdentityNameConverter:<init>(), LogLevel:<clinit>(), HttpObjectAggregator$AggregatedFullHttpRequest:method(), DefaultHttpHeaders$HttpHeadersValidationConverter:convertObject(Object), HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HAProxyMessage:ipBytestoString(ByteBuf-int), AbstractNioByteChannel$NioByteUnsafe:recvBufAllocHandle(), EmptyTextHeaders:set(Object-Object[]), DefaultHttp2Connection$DefaultEndpoint:access$310(DefaultHttp2Connection$DefaultEndpoint), MemoryFileUpload:hashCode(), DnsResource:type(), WrappedByteBuf:hasMemoryAddress(), DefaultPromise:notifyListeners(), Socks4ServerDecoder$State:<clinit>(), LoggingHandler:channelRegistered(ChannelHandlerContext), SocksVersion:byteValue(), AbstractNioMessageChannel:setReadPending(boolean), JdkZlibEncoder:<init>(byte[]), DefaultBinaryHeaders:addByte(AsciiString-byte), ForkJoinPool:externalPush(ForkJoinTask), PlatformDependent0:putOrderedObject(Object-long-Object), AbstractChannelHandlerContext$PausableChannelEventExecutor0:isAcceptingNewTasks(), EpollSocketChannel$EpollSocketChannelUnsafe:<init>(EpollSocketChannel), Bootstrap:doConnect(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), VoidChannelPromise:removeListener(GenericFutureListener), DefaultChannelId:writeInt(int-int), DefaultSocketChannelConfig:getSendBufferSize(), JdkZlibEncoder:allocateBuffer(ChannelHandlerContext-Object-boolean), EmptyHttp2Headers:add(AsciiString-AsciiString), CorsConfig$Builder:access$300(CorsConfig$Builder), DefaultSpdySynStreamFrame:associatedStreamId(), HttpPostStandardRequestDecoder:addHttpData(InterfaceHttpData), AbstractEventExecutor:inEventLoop(Thread), NioSocketChannel:doFinishConnect(), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:addToPendingCount(int), Http2FrameListenerDecorator:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf), RxtxChannelConfig$Paritybit:<init>(String-int-int), AbstractByteBuf:_getUnsignedMedium(int), CipherSuiteConverter:toJavaHmacAlgo(String), DefaultChannelPipeline$TailContext:deregister(ChannelHandlerContext-ChannelPromise), DefaultBinaryHeaders:addTimeMillis(Object-long), AsciiString:length(), SctpMessageCompletionHandler:<init>(), DefaultTextHeaders$SingleHeaderValuesComposer$2:<init>(DefaultTextHeaders$SingleHeaderValuesComposer), WrappedByteBuf:order(ByteOrder), MessageAggregationException:<init>(Throwable), AbstractNioMessageChannel$NioMessageUnsafe:<clinit>(), HttpPostMultipartRequestDecoder:getBodyHttpDatas(String), DefaultStompContentSubframe:content(), Http2ServerUpgradeCodec$1:<init>(Http2ServerUpgradeCodec-Http2Settings), HttpObjectEncoder:encodeInitialLine(ByteBuf-HttpMessage), JdkZlibEncoder$2:operationComplete(ChannelFuture), HttpObjectAggregator:handleOversizedMessage(ChannelHandlerContext-HttpMessage), DefaultHttp2Connection:newChildMap(), WebSocket00FrameEncoder:encode(ChannelHandlerContext-Object-List), HttpHeaderDateFormat$1:<init>(), Bzip2BlockDecompressor:initialiseInverseBWT(), PoolSubpage:toHandle(int), SpdySessionHandler$ClosingChannelFutureListener:operationComplete(Future), SelfSignedCertificate:delete(), WrappedByteBuf:writeBytes(InputStream-int), ReplayingDecoderBuffer:readerIndex(), AbstractByteBuf:readBytes(byte[]), Unpooled:wrappedBuffer(ByteBuffer), DelegatingDecompressorFrameListener:newContentDecompressor(AsciiString), SpdyHttpDecoder:<init>(SpdyVersion-int-Map-boolean), SwappedByteBuf:retain(), OioSctpServerChannel:doConnect(SocketAddress-SocketAddress), PoolThreadCache$MemoryRegionCache:powerOfTwo(int), WrappedByteBuf:readBytes(ByteBuf), SpdySessionHandler:write(ChannelHandlerContext-Object-ChannelPromise), EventExecutor:schedule(Callable-long-TimeUnit), ChunkedNioStream:<init>(ReadableByteChannel-int), DefaultStompHeadersSubframe:toString(), WebSocketFrameAggregator:newContinueResponse(WebSocketFrame), DefaultUdtServerChannelConfig:setOption(ChannelOption-Object), Lz4FrameDecoder$State:valueOf(String), BinaryMemcacheRequestDecoder:decodeHeader(ByteBuf), DefaultTextHeaders:setAll(TextHeaders), OioSctpChannel:filterOutboundMessage(Object), DefaultHttpRequest:setUri(String), DefaultConvertibleHeaders$ConvertedEntry:<init>(DefaultConvertibleHeaders-Map$Entry), DefaultSocketChannelConfig:getOption(ChannelOption), Socks5ClientEncoder:encode(ChannelHandlerContext-Socks5Message-ByteBuf), NioSocketChannel:javaChannel(), Log4JLogger:trace(String-Object), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise), DnsServerAddresses:rotational(Iterable), EmptyHttpHeaders:add(Object-Iterable), SSLEngine:getSupportedProtocols(), UnpooledUnsafeDirectByteBuf:setBytes(int-InputStream-int), DnsType:valueOf(int-String), AbstractByteBuf:writeBytes(byte[]), X509CertImpl:verify(PublicKey), AdvancedLeakAwareByteBuf:getBytes(int-ByteBuf-int), SpdySessionStatus:compareTo(Object), ContextBoundUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), ForkJoinTask:quietlyJoin(), LocalServerChannel:unsafe(), PlatformDependent0:throwException(Throwable), JdkZlibEncoder:<init>(ZlibWrapper), DnsNameResolver:doResolve(InetSocketAddress-Promise), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), Unpooled:wrappedBuffer(byte[][]), DefaultEventLoop:cleanupAndTerminate(boolean), SwappedByteBuf:readUnsignedInt(), Snappy:encodeCopyWithOffset(ByteBuf-int-int), DnsMessage:release(List), LocalChannel:<clinit>(), AbstractByteBuf:writeBytes(ByteBuffer), SpdyCodecUtil:getSignedInt(ByteBuf-int), ReplayingDecoderBuffer:release(int), EmbeddedEventLoop:invokeChannelRead(ChannelHandlerContext-Object), OioSctpServerChannel$2:run(), ChannelBufferByteOutput:write(int), AbstractDiskHttpData:addContent(ByteBuf-boolean), EmptyTextHeaders:<init>(), LocalAddress:equals(Object), Bzip2Encoder:closeBlock(ByteBuf), AbstractFuture:get(), NioEventLoop:newTaskQueue(), EpollDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ReadOnlyByteBuf:slice(int-int), SocksVersion:<init>(String-int-byte), CloseWebSocketFrame:duplicate(), ChannelHandlerAdapter:channelUnregistered(ChannelHandlerContext), JZlibEncoder:<init>(int-byte[]), NioSctpServerChannel:config(), AbstractByteBuf:getChar(int), ReplayingDecoderBuffer:nioBuffers(int-int), UnpooledDirectByteBuf:_setByte(int-int), Native:isTcpNoDelay(int), Http2ConnectionDecoder:decodeFrame(ChannelHandlerContext-ByteBuf-List), HttpChunkedInput:progress(), PausableChannelEventExecutor:invokeWrite(ChannelHandlerContext-Object-ChannelPromise), GlobalChannelTrafficShapingHandler:setTrafficCounter(TrafficCounter), SocksPortUnificationServerHandler:decode(ChannelHandlerContext-ByteBuf-List), Http2ConnectionHandler:<init>(Http2ConnectionDecoder$Builder-Http2ConnectionEncoder$Builder), NativeDatagramPacketArray:<init>(NativeDatagramPacketArray$1), AbstractEpollStreamChannel$EpollStreamUnsafe:finishConnect(), IdleStateHandler$ReaderIdleTimeoutTask:run(), AbstractBootstrap$PendingRegistrationPromise:setFailure(Throwable), CommonsLogger:trace(String-Object), FixedCompositeByteBuf$Component:access$200(FixedCompositeByteBuf$Component), FixedCompositeByteBuf:_setByte(int-int), SwappedByteBuf:retain(int), AbstractServerChannel:remoteAddress(), Socks5CommandRequest:dstAddr(), ServerBootstrap:options(), ConcurrentHashMapV8$MapReduceValuesTask:invoke(), LoggingHandler:channelActive(ChannelHandlerContext), RuleBasedIpFilter:accept(ChannelHandlerContext-InetSocketAddress), PooledHeapByteBuf:setBytes(int-InputStream-int), WrappedByteBuf:setShort(int-int), ConcurrentHashMapV8$MapReduceKeysToIntTask:fork(), ReadOnlyByteBufferBuf:_getShort(int), EmptyBinaryHeaders:add(BinaryHeaders), ThreadPerChannelEventLoop:updateLastExecutionTime(), EmptyHttp2Headers:addInt(Object-int), StompSubframeDecoder$1:<clinit>(), DefaultBinaryHeaders$2:convertToDouble(AsciiString), EpollDatagramChannelConfig:setWriteBufferHighWaterMark(int), DefaultHttp2RemoteFlowController:access$476(DefaultHttp2RemoteFlowController-int), OpenSslEngine:unwrap(ByteBuffer[]-int-int-ByteBuffer[]-int-int), DefaultDatagramChannelConfig:setTrafficClass(int), DefaultConvertibleHeaders:set(Object-Object), AbstractOioByteChannel:isActive(), WrappedByteBuf:readBytes(GatheringByteChannel-int), LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), AbstractReferenceCountedByteBuf:readBytes(byte[]-int-int), DefaultBinaryMemcacheRequest:retain(), Native:getTcpKeepIdle(int), MqttSubscribePayload:toString(), RtspObjectDecoder:<init>(int-int-int-boolean), ChannelConfig:getMessageSizeEstimator(), JdkSslContext:applicationProtocolNegotiator(), DefaultChannelProgressivePromise:addListener(GenericFutureListener), ChannelHandlerInvoker:executor(), Native:isReusePort(int), DnsQueryContext:cache(DnsQuestion-Throwable), SpdyHttpDecoder:getMessage(int), RecvByteBufAllocator$Handle:record(int), AbstractNioChannel$NioUnsafe:voidPromise(), DnsResponseCode:<init>(int-String), InternalAttribute:<init>(Charset), HttpClientCodec:<init>(int-int-int), DefaultSpdyHeaders:setObject(Object-Object), MixedAttribute:getChunk(int), MixedFileUpload:touch(), PoolChunkList:remove(PoolChunk), SSLEngine:setEnabledCipherSuites(String[]), CompositeByteBuf:consolidate(int-int), Http2Headers:add(AsciiString-AsciiString), Headers$ValueConverter:convertDouble(double), PlatformDependent:hasJavassist0(), ForkJoinPool$2:<init>(), EventExecutor:newPromise(), DefaultRxtxChannelConfig:getDatabits(), PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:newReponseData(), NioSocketChannel$1:run(), CipherSuiteConverter:<init>(), DefaultChannelPromise:setSuccess(Object), MemoryAttribute:compareTo(Object), DefaultConvertibleHeaders:setLong(Object-long), IpFilterRuleType[]:clone(), VoidChannelPromise:awaitUninterruptibly(long), MqttConnectPayload:userName(), ComposedLastHttpContent:duplicate(), DefaultServerSocketChannelConfig:setAutoRead(boolean), EpollServerSocketChannelConfig:setReceiveBufferSize(int), MpscLinkedQueueTailRef:<init>(), DefaultHttp2LocalFlowController:access$000(DefaultHttp2LocalFlowController), SnappyFrameEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), UnpooledDirectByteBuf:maxCapacity(), SlicedByteBuf:getBytes(int-byte[]-int-int), ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8), ChannelHandlerInvoker:invokeChannelActive(ChannelHandlerContext), DefaultConvertibleHeaders:addByte(Object-byte), SpdyVersion:getVersion(), AdvancedLeakAwareByteBuf:setLong(int-long), HttpVersion:<clinit>(), SpdyFrameCodec:readGoAwayFrame(int-int), ReadOnlyByteBuf:duplicate(), CompositeByteBuf:addComponents(ByteBuf[]), SingleThreadEventExecutor:shutdown(), Socks5CommandType:compareTo(Socks5CommandType), DefaultSpdyDataFrame:validate(ByteBuf), HttpContent:content(), EpollEventArray:<clinit>(), X509v3CertificateBuilder:build(ContentSigner), HAProxyMessage:portStringToInt(String), Native:setReusePort(int-int), EpollDomainSocketChannelConfig:setEpollMode(EpollMode), MqttEncoder:encode(ChannelHandlerContext-Object-List), Snappy:decodeCopyWith2ByteOffset(byte-ByteBuf-ByteBuf-int), HttpMessageUtil:removeLastNewLine(StringBuilder), DefaultChannelConfig:setOptions(Map), UnpooledHeapByteBuf:setShort(int-int), AbstractBinaryMemcacheEncoder:encodeMessage(ChannelHandlerContext-BinaryMemcacheMessage), WebSocketClientHandshaker13:uri(), EventExecutor:isShuttingDown(), FullHttpResponse:release(), MessageToMessageCodec:channelRead(ChannelHandlerContext-Object), DefaultRxtxChannelConfig:setWriteBufferHighWaterMark(int), DnsNameResolver:<clinit>(), PoolThreadCache$1:<init>(PoolThreadCache), AbstractReferenceCountedByteBuf:writerIndex(int), Socks5PasswordAuthResponseDecoder:<init>(), FastLzFrameDecoder:<init>(), HttpObjectAggregator:<init>(int), CompleteFuture:removeListeners(GenericFutureListener[]), HAProxyMessage:<clinit>(), JZlibEncoder:<init>(ZlibWrapper-int-int-int), EmptyByteBuf:readUnsignedInt(), DefaultTextHeaders:setInt(CharSequence-int), AbstractByteBuf:readSlice(int), ChannelOutboundBuffer$Entry:recycleAndGetNext(), SpdyFrameCodec:<init>(SpdyVersion), QueryStringEncoder:addParam(String-String), DnsMessage:retain(), PerFrameDeflateDecoder:newRsv(WebSocketFrame), IntObjectHashMap:toExternal(Object), SelectedSelectionKeySet:flip(), PoolChunk:setValue(int-byte), ReplayingDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), DefaultSpdySettingsFrame:ids(), Log:debug(Object-Throwable), Version:toString(), OpenSslEngine:<init>(long-ByteBufAllocator-String-boolean-OpenSslSessionContext), EpollChannelConfig:getOptions(), DefaultHttp2Headers:addObject(AsciiString-Object[]), PromiseTask:run(), DomainSocketReadMode:<clinit>(), CombinedIterator:remove(), SwappedByteBuf:discardReadBytes(), DefaultHttp2ConnectionEncoder:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise), AsciiString:startsWith(CharSequence), DuplicatedByteBuf:setBytes(int-ByteBuf-int-int), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Iterable), DefaultPromise$LateListenerNotifier:run(), HttpServerUpgradeHandler:decode(ChannelHandlerContext-HttpObject-List), EmptyConvertibleHeaders:setObject(Object-Object[]), DefaultConvertibleHeaders:namesAndConvert(Comparator), ByteToMessageDecoder$1:<init>(), DefaultFileRegion:position(), ConcurrentHashMapV8$ForEachValueTask:compute(), PoolSubpage:addToPool(), OioByteStreamChannel:<clinit>(), SpdyHeaders:iterator(), DefaultAttributeMap$DefaultAttribute:access$200(DefaultAttributeMap$DefaultAttribute), InboundHttp2ToHttpAdapter:onSettingsRead(ChannelHandlerContext-Http2Settings), ConcurrentHashMapV8$ForEachTransformedKeyTask:advance(), HttpPostRequestEncoder:<init>(HttpRequest-boolean), DefaultOioServerSocketChannelConfig:<init>(OioServerSocketChannel-ServerSocket), ForkJoinTask$AdaptedRunnableAction:<init>(Runnable), PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:newExtensionDecoder(), EmptyHttpHeaders:setDouble(Object-double), Recycler:threadLocalSize(), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:unsupported(), ReplayingDecoderBuffer:unwrap(), ChannelTrafficShapingHandler$1:<init>(ChannelTrafficShapingHandler-ChannelHandlerContext-long), ServerBootstrap$ServerBootstrapAcceptor:forceClose(Channel-Throwable), DefaultStompContentSubframe:release(int), EmptyHttp2Headers:status(AsciiString), DefaultSocks4CommandRequest:userId(), SwappedByteBuf:setBytes(int-byte[]-int-int), ByteBufOutputStream:writeDouble(double), SpdyHeaders:get(Object), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:fork(), MarshallingDecoder:<init>(UnmarshallerProvider), AsciiHeadersEncoder$NewlineType:values(), AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf), Bzip2DivSufSort:ssCompareLast(int-int-int-int-int), SystemPropertyUtil$1:run(), DefaultHttp2RemoteFlowController$FlowState:incrementStreamableBytesForTree(int), PongWebSocketFrame:<init>(), DefaultHeaders:remove(Object), HttpPostRequestDecoder:isMultipart(HttpRequest), DefaultChannelPipeline:close(), LocalChannel:doBeginRead(), UdtMessage:touch(), TextWebSocketFrame:<init>(), MixedFileUpload:compareTo(InterfaceHttpData), NioUdtMessageRendezvousChannel:javaChannel(), ChannelHandlerInvoker:invokeChannelWritabilityChanged(ChannelHandlerContext), Recycler$Stack:access$800(Recycler$Stack), DefaultSpdyHeaders:setObject(Object-Object[]), HttpObjectAggregator$AggregatedFullHttpRequest:copy(ByteBuf), GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long), Bzip2Rand:rNums(int), DnsClass:compareTo(DnsClass), DefaultSocks5InitialResponse:decoderResult(), EmptyHttp2Headers:setShort(Object-short), EpollDatagramChannelConfig:setWriteBufferLowWaterMark(int), DefaultBinaryHeaders:<init>(), AbstractOioChannel$DefaultOioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), ReferenceCounted:release(int), DefaultEventExecutor:<init>(), ByteBuf:clear(), HAProxyProxiedProtocol$AddressFamily:valueOf(byte), AbstractOioMessageChannel:pipeline(), CompositeByteBuf:numComponents(), Slf4JLogger:error(String-Object[]), SwappedByteBuf:setBoolean(int-boolean), DiskFileUpload:equals(Object), AsciiString:lastIndexOf(int), SctpMessage:isComplete(), DnsQueryContext:retry(InetSocketAddress-String), NioSctpChannel:<clinit>(), DefaultChannelPipeline:remove(Class), ScheduledFutureTask:run(), ByteBufAllocator:buffer(), DefaultHttp2FrameReader:close(), DefaultSpdyDataFrame:release(int), Http2CodecUtil:getEmbeddedHttp2Exception(Throwable), CommonsLogger:warn(String), SSLEngine:setSSLParameters(SSLParameters), NioEventLoopGroup:<init>(int-ExecutorServiceFactory), MpscLinkedQueue:tailRef(), AbstractScheduledEventExecutor:execute(Runnable), DefaultSpdySettingsFrame:setPersisted(int-boolean), Http2CodecUtil$SimpleChannelPromiseAggregator:setSuccess(Object), AbstractReferenceCounted:<clinit>(), AbstractChannelHandlerContext:voidPromise(), ZlibCodecFactory:newZlibEncoder(ZlibWrapper), CorsHandler:setAllowMethods(HttpResponse), DefaultChannelGroupFuture:access$400(DefaultChannelGroupFuture), WebSocketClientExtension:newExtensionEncoder(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), DefaultHttp2StreamRemovalPolicy:<init>(), DefaultOioServerSocketChannelConfig:setBacklog(int), DefaultChannelPipeline$TailContext:<init>(DefaultChannelPipeline), ThreadDeathWatcher$Watcher:run(), ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int), SpdySettingsFrame:setValue(int-int-boolean-boolean), PromiseAggregator:<init>(Promise-boolean), PausableChannelEventExecutor:schedule(Callable-long-TimeUnit), GlobalChannelTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), ReferenceMap:<init>(Map), JdkLogger:log(String-Level-String-Throwable), DefaultHttp2FrameWriter:writeContinuationFrames(ChannelHandlerContext-int-ByteBuf-int-Http2CodecUtil$SimpleChannelPromiseAggregator), AbstractRemoteAddressFilter:<init>(), MqttDecoder:checkpoint(Object), ChannelOutboundBuffer:incrementPendingOutboundBytes(long), Lz4FrameEncoder:close(ChannelPromise), EmbeddedEventLoop:next(), AbstractOioMessageChannel:config(), CompressorHttp2ConnectionEncoder:initCompressor(int-Http2Headers-boolean), KeyManagerFactory:init(KeyStore-char[]), SpdySessionHandler$4:operationComplete(Future), AbstractChannel$AbstractUnsafe$8:<init>(AbstractChannel$AbstractUnsafe), AbstractOioChannel:setReadPending(boolean), Http2ConnectionAdapter:<init>(), DefaultSctpServerChannelConfig:setWriteBufferLowWaterMark(int), HttpPostRequestEncoder:getNewMultipartDelimiter(), ConcurrentHashMapV8$CollectionView:isEmpty(), AbstractChannel:remoteAddress0(), JdkLogger:error(String-Object[]), DefaultHttpHeaders:setTimeMillis(CharSequence-long), DelegatingDecompressorFrameListener:<init>(Http2Connection-Http2FrameListener-boolean), SpdyFrameDecoder$State[]:clone(), DnsNameResolverContext:<init>(DnsNameResolver-String-int-Promise), CountedCompleter:compareAndSetPendingCount(int-int), AbstractReferenceCountedByteBuf:retain(int), ConcurrentHashMapV8:putIfAbsent(Object-Object), Unsafe:putOrderedLong(Object-long-long), BinaryMemcacheServerCodec:<init>(int), DefaultThreadFactory:<init>(Class-int), DefaultFullHttpRequest:equals(Object), OioSctpChannel:remoteAddress(), StringEncoder:encode(ChannelHandlerContext-CharSequence-List), AsciiString$1:<init>(), ChannelHandlerAdapter:channelWritabilityChanged(ChannelHandlerContext), HashedWheelTimer:newTimeout(TimerTask-long-TimeUnit), Attribute:getString(Charset), JavassistTypeParameterMatcherGenerator:appendClassPath(ClassPath), ProxyHandler$2:<init>(ProxyHandler), JdkApplicationProtocolNegotiator$ProtocolSelectionListener:unsupported(), MessageFormatter:charArrayAppend(StringBuffer-char[]), DefaultHeaders:set(Object-Object[]), UnpooledHeapByteBuf:setBytes(int-InputStream-int), OioSocketChannel:config(), LocalServerChannel:eventLoop(), PooledUnsafeDirectByteBuf:_getShort(int), DefaultHttpResponse:setProtocolVersion(HttpVersion), SpdyHttpEncoder:createSynStreamFrame(HttpRequest), OpenSslServerContext:chooseTrustManager(TrustManager[]), MqttDecoder$Result:access$000(MqttDecoder$Result), ChunkedWriteHandler:discard(Throwable), DefaultChannelPipeline:connect(SocketAddress-SocketAddress-ChannelPromise), AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int), HttpObjectDecoder$1:<clinit>(), DefaultChannelHandlerInvoker$16:run(), DnsNameResolverContext:onResponseAorAAAA(DnsType-DnsQuestion-DnsResponse), DefaultChannelPipeline:callHandlerAdded0(AbstractChannelHandlerContext), SlicedByteBuf:writerIndex(int), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:newInstance(), RecyclableArrayList:size(), ObjectDecoderInputStream:<init>(InputStream), IntObjectHashMap$IteratorImpl:<init>(IntObjectHashMap), DefaultPromise:isCancelled(), Signal$SignalConstant:<init>(int-String), PooledByteBuf:ensureAccessible(), DeflateFrameServerExtensionHandshaker:<init>(), ReplayingDecoderBuffer:readByte(), AbstractDiskHttpData:readFrom(File), DefaultSpdyHeaders:addInt(Object-int), HttpPostRequestEncoder$EncoderMode:<init>(String-int), FastThreadLocal:set(InternalThreadLocalMap-Object), DefaultChannelHandlerInvoker$14:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise), MixedFileUpload:setContentTransferEncoding(String), PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean), IntObjectHashMap:rehash(int), AbstractReferenceCountedByteBuf:readBytes(ByteBuffer), ReadTimeoutHandler:channelRead(ChannelHandlerContext-Object), LoggerFactory:getILoggerFactory(), EmptyByteBuf:getUnsignedInt(int), OioSctpServerChannel$1:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), DefaultHttpHeaders:setChar(CharSequence-char), AbstractMemcacheObjectAggregator:<init>(int), AbstractOioByteChannel:doWriteFileRegion(FileRegion), PoolArena$HeapArena:<init>(PooledByteBufAllocator-int-int-int-int), Http2ConnectionDecoder:prefaceReceived(), OioSctpServerChannel:<init>(SctpServerChannel), SingleThreadEventExecutor:access$000(SingleThreadEventExecutor-Thread), LastMemcacheContent$1:retain(), Headers$ValueConverter:convertLong(long), Slf4JLogger:trace(String-Object), AbstractChannelHandlerContext:deregister(ChannelPromise), EmptyBinaryHeaders:setObject(AsciiString-Object), ChannelException:setStackTrace(StackTraceElement[]), DefaultMemcacheContent:toString(), RtspMethods:valueOf(String), ReplayingDecoderBuffer:getBytes(int-byte[]-int-int), Bzip2BitReader:setByteBuf(ByteBuf), DefaultTextHeaders:addObject(CharSequence-Object), DiskFileUpload:getContentType(), CorsHandler:setPreflightHeaders(HttpResponse), EmptyTextHeaders:setDouble(CharSequence-double), HttpObjectAggregator:newContinueResponse(HttpMessage), MqttDecoder:actualReadableBytes(), HttpObjectAggregator$AggregatedFullHttpMessage:setDecoderResult(DecoderResult), OpenSslServerContext$1:<init>(OpenSslServerContext-X509TrustManager), DefaultFileRegion:isOpen(), HAProxyMessage$1:<clinit>(), EmptyHttpHeaders:addTimeMillis(Object-long), ReplayingDecoderBuffer:internalNioBuffer(int-int), ByteBuf:writeBytes(ByteBuffer), CountedCompleter:<init>(CountedCompleter-int), NioServerSocketChannel:localAddress0(), DefaultSpdyRstStreamFrame:setStreamId(int), AsciiString:lastIndexOf(CharSequence-int), HttpServerUpgradeHandler$1:<init>(HttpServerUpgradeHandler-ChannelHandlerContext-HttpServerUpgradeHandler$UpgradeCodec-FullHttpRequest-FullHttpResponse-HttpServerUpgradeHandler$UpgradeEvent), ForkJoinPool$ManagedBlocker:block(), ConcurrentHashMapV8$MapReduceMappingsTask:addToPendingCount(int), InterfaceHttpPostRequestDecoder:getBodyHttpDatas(), DefaultHttp2ConnectionEncoder:frameWriter(), AbstractInternalLogger:warn(String-Object[]), RtspObjectDecoder:<init>(int-int-int), HAProxyProxiedProtocol:addressFamily(), HttpPostMultipartRequestDecoder:readFileUploadByteMultipartStandard(String), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable), Lz4FrameEncoder$2:operationComplete(ChannelFuture), InboundHttp2ToHttpAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean), DeflateDecoder:<init>(boolean), Http2CodecUtil:emptyPingBuf(), ByteBufUtil$ThreadLocalDirectByteBuf:deallocate(), ByteBufAllocator:compositeBuffer(int), AbstractNioMessageChannel:parent(), AbstractEpollStreamChannel:writeFileRegion(ChannelOutboundBuffer-DefaultFileRegion-int), Logger:debug(String-Throwable), ApplicationProtocolConfig$Protocol[]:clone(), DefaultHttp2ConnectionDecoder$FrameReadListener:onSettingsAckRead(ChannelHandlerContext), SctpOutboundByteStreamHandler:<init>(int-int), MqttDecoder:decodeConnAckVariableHeader(ByteBuf), AbstractChannel:access$500(AbstractChannel), PausableChannelEventExecutor:newProgressivePromise(), InternalLogger:error(String-Object[]), Logger:info(String-Throwable), WrappedByteBuf:writerIndex(int), SwappedByteBuf:readChar(), NioSocketChannel:incompleteWrite(boolean), DefaultHttp2Connection$DefaultEndpoint:access$308(DefaultHttp2Connection$DefaultEndpoint), InternalLogger:warn(String-Object-Object), ChunkedNioStream:<init>(ReadableByteChannel), AbstractInternalLogger:debug(Throwable), NioSctpChannel:<init>(SctpChannel), AdvancedLeakAwareByteBuf:setBytes(int-ByteBuffer), CompositeByteBuf:internalNioBuffer(int-int), CompositeByteBuf:consolidate(), QueryStringDecoder:<init>(URI-Charset), CompleteChannelFuture:addListeners(GenericFutureListener[]), LoggingHandler:<init>(Class-LogLevel), InboundHttp2ToHttpAdapter$1:copyIfNeeded(FullHttpMessage), SSLContext:createSSLEngine(), WebSocketProtocolHandler:decode(ChannelHandlerContext-Object-List), AbstractEventExecutorGroup:invokeAll(Collection-long-TimeUnit), DefaultHttp2FrameReader$State:<init>(String-int), OioSctpServerChannel:localAddress0(), CompositeByteBuf:writeInt(int), WebSocketUtil:base64(byte[]), AbstractDiskHttpData:touch(), ReplayingDecoderBuffer:readBytes(ByteBuf-int), DefaultPromise:setFailure(Throwable), Http2Error:code(), Base64Decoder:decode(ChannelHandlerContext-ByteBuf-List), ReferenceMap:values(), LastMemcacheContent$1:copy(), ThreadPerChannelEventLoop$1:<init>(ThreadPerChannelEventLoop), NetUtil:getIntValue(char), Slf4JLogger:warn(String), Http2StreamRemovalPolicy:markForRemoval(Http2Stream), InboundHttp2ToHttpAdapter$Builder:access$000(InboundHttp2ToHttpAdapter$Builder), OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface), WrappedByteBuf:maxCapacity(), DefaultChannelId:appendHexDumpField(StringBuilder-int-int), FastLzFrameEncoder:<init>(int-Checksum), Log4JLogger:error(String), ReadOnlyByteBufferBuf:maxCapacity(), DefaultLastMemcacheContent:content(), PausableChannelEventExecutor:shutdown(), Http2Exception$CompositeStreamException:add(Http2Exception$StreamException), ChunkedWriteHandler$3:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite-ChunkedInput), HttpStatusClass:values(), ChannelConfig:setAutoRead(boolean), AbstractNioMessageChannel:javaChannel(), ByteBufProcessor:process(byte), AbstractByteBuf:refCnt(), ObjectEncoderOutputStream:<init>(OutputStream), InternalLogLevel:<clinit>(), DefaultChannelHandlerInvoker:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise), ForkJoinTask:join(), HttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData), DefaultChannelPromise:checkDeadLock(), NioDatagramChannel:doFinishConnect(), NioServerSocketChannel:doDisconnect(), ChannelMatchers:all(), HttpObjectAggregator$AggregatedFullHttpRequest:duplicate(), AbstractOioChannel:newUnsafe(), EpollSocketChannel:doBind(SocketAddress), DefaultHttpHeaders$HttpHeadersValidationConverter:validateValue(CharSequence), ReadOnlyByteBuf:_setInt(int-int), DefaultHttp2ConnectionDecoder:decodeFrame(ChannelHandlerContext-ByteBuf-List), DefaultHttp2FrameWriter:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise), OpenSslEngine:readEncryptedData(ByteBuffer-int), PlatformDependent0$1:run(), HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-String-String), HashedWheelTimer:access$300(HashedWheelTimer), JdkAlpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable), Socks5InitialRequest:authMethods(), DefaultSpdyHeaders:add(CharSequence-CharSequence), StringUtil:isDoubleQuote(char), DnsResource:retain(int), Socks5CommandResponseDecoder$State:valueOf(String), ThreadLocalPooledDirectByteBuf:<clinit>(), HttpUtil$2:visit(Map$Entry), SslHandler$6:<init>(SslHandler-ChannelHandlerContext-ChannelPromise), DefaultOioSocketChannelConfig:getOption(ChannelOption), DefaultHttp2Connection$ParentChangedEvent:notifyListener(Http2Connection$Listener), DefaultHttp2Connection$DefaultEndpoint:lastKnownStream(int), WebSocketServerHandshaker08:<init>(String-String-boolean-int-boolean), Socks4CommandRequest:type(), DefaultHttp2Headers:add(AsciiString-Iterable), DefaultHttp2RemoteFlowController:<init>(Http2Connection), DefaultHttp2RemoteFlowController:connectionWindow(), SSL:readFromSSL(long-long-int), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:advance(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:fork(), HashedWheelTimer$HashedWheelBucket:remove(HashedWheelTimer$HashedWheelTimeout), PromiseTask:setSuccess(Object), CharsetUtil:<clinit>(), SwappedByteBuf:forEachByteDesc(int-int-ByteBufProcessor), EmptyConvertibleHeaders:add(Object-Object[]), HttpContentDecompressor:newContentDecoder(String), SctpNotificationHandler:handleNotification(ShutdownNotification-Object), OioSocketChannel:<init>(), SingleThreadEventExecutor:newTaskQueue(), JdkSslServerContext:<init>(File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), EpollEventLoop:runAllTasks(), SSLSession:getCreationTime(), DefaultHeaders$HeaderEntry:<init>(DefaultHeaders-int-Object-Object), DefaultHttp2ConnectionEncoder:access$200(DefaultHttp2ConnectionEncoder), ProtobufDecoder:decode(ChannelHandlerContext-Object-List), SpdyVersion:<clinit>(), EpollDatagramChannel:pipeline(), SimpleLeakAwareByteBuf:release(int), IovArray:add(CompositeByteBuf), HAProxyProxiedProtocol$TransportProtocol:<clinit>(), DefaultUdtChannelConfig:isReuseAddress(), UnpooledUnsafeDirectByteBuf:deallocate(), DnsNameResolverGroup:<init>(ChannelFactory-Iterable), SctpServerChannel:register(Selector-int), OpenSslEngine$2:<clinit>(), ForkJoinTask:get(long-TimeUnit), DefaultChannelGroup:isEmpty(), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:invoke(), Slf4JLogger:info(String-Object[]), ProtobufDecoder:<init>(MessageLite-ExtensionRegistryLite), DelegatingDecompressorFrameListener$1:streamRemoved(Http2Stream), JZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), DefaultAttributeMap$DefaultAttribute:set(Object), SlicedByteBuf:_setShort(int-int), DefaultBinaryHeaders$2:convertToInt(Object), Recycler$WeakOrderQueue$Link:lazySet(int), PrimitiveCollections$UnmodifiableIntObjectMap:get(int), HttpMethod:toString(), ObjectDecoderInputStream:readUnsignedShort(), CommonsLogger:warn(String-Throwable), NioDatagramChannelConfig:getOption0(Object), StompSubframeAggregator:isLastContentMessage(ByteBufHolder), NioSocketUDT:getLocalSocketAddress(), DefaultConvertibleHeaders$ConvertedIterator:hasNext(), MixedFileUpload:isInMemory(), NioSctpChannel$NioSctpChannelConfig:autoReadCleared(), ByteBufInputStream:readFully(byte[]-int-int), EpollSocketChannel:parent(), MixedAttribute:checkSize(long), SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean), DefaultPromise:removeListeners(GenericFutureListener[]), AbstractHttpData:getByteBuf(), JdkSslContext:buildTrustManagerFactory(File-TrustManagerFactory), AbstractEpollStreamChannel:doWriteBytes(ByteBuf-int), DefaultChannelHandlerInvoker$10:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-SocketAddress-ChannelPromise), JdkZlibDecoder$GzipState[]:clone(), HttpStatusClass:<clinit>(), ReadOnlyByteBufferBuf:getBytes(int-GatheringByteChannel-int), DefaultHttp2Headers:addInt(Object-int), ReplayingDecoderBuffer:nioBuffers(), GlobalChannelTrafficShapingHandler:setMaxDeviation(float-float-float), AdvancedLeakAwareByteBuf:readSlice(int), AbstractEpollStreamChannel$EpollStreamUnsafe$2:<init>(AbstractEpollStreamChannel$EpollStreamUnsafe), SwappedByteBuf:readBytes(ByteBuf-int), DomainSocketReadMode:values(), AbstractEpollStreamChannel:doReadBytes(ByteBuf), EmptyBinaryHeaders:set(Object-Object), FixedCompositeByteBuf:internalNioBuffer(int-int), DefaultRxtxChannelConfig:setAutoRead(boolean), ReadOnlyByteBuf:setInt(int-int), AbstractByteBuf:writeInt(int), EventExecutor:shutdownNow(), OioSocketChannel:shutdownOutput(ChannelPromise), AbstractChannel$CloseFuture:setClosed(), LastStompContentSubframe$1:<init>(), Native:getTcpKeepIntvl(int), OioSctpServerChannel:isOpen(), DefaultThreadFactory:toPoolName(Class), DefaultStompHeaders:setByte(CharSequence-byte), AdvancedLeakAwareByteBuf:touch(Object), ScheduledFutureTask:<init>(EventExecutor-Callable-long-long), Http2Flags:<init>(), SpdyHeaderBlockZlibEncoder:<init>(SpdyVersion-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int), SpdyFrameCodec:readHeadersFrame(int-boolean), UnpooledHeapByteBuf:readBytes(GatheringByteChannel-int), ConcurrentHashMapV8$ReduceEntriesTask:getRawResult(), MessageAggregator:<init>(int), Bzip2Encoder$State:<init>(String-int), EpollDomainSocketChannel$EpollDomainUnsafe:epollInReadFd(), Bzip2BlockDecompressor:decodeHuffmanData(Bzip2HuffmanStageDecoder), AsciiString:subSequence(int), Bzip2DivSufSort:ssMergeForward(int-int[]-int-int-int-int-int), WebSocketClientHandshaker:verify(FullHttpResponse), Unpooled:copiedBuffer(ByteBuffer[]), Http2SecurityUtil:<init>(), DefaultSocks5PasswordAuthResponse:status(), Attribute:getValue(), CloseWebSocketFrame:touch(), MpscLinkedQueue$1:remove(), DefaultHttpHeaders$HttpHeadersValidationConverter:validateValueChar(CharSequence-int-char), MemoryFileUpload:setContentType(String), FixedCompositeByteBuf$Component:access$300(FixedCompositeByteBuf$Component), EmptyHttp2Headers:addInt(AsciiString-int), MessageAggregationException:<init>(String-Throwable), Http2Stream:parent(), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), JdkLogger:info(String-Object[]), DefaultChannelPromise:channel(), SslContext:<clinit>(), EventLoopException:<init>(String), Http2Stream$State:values(), MessageAggregator$1:operationComplete(Future), Http2HeadersDecoder:configuration(), EmptyByteBuf:retain(int), DefaultHttp2ConnectionEncoder:<init>(DefaultHttp2ConnectionEncoder$Builder), ReplayingDecoderBuffer:getUnsignedInt(int), LoggingHandler:disconnect(ChannelHandlerContext-ChannelPromise), NioSctpChannel:newSctpChannel(), Socks4ServerDecoder:fail(List-Throwable), IntObjectHashMap:access$100(IntObjectHashMap), DefaultSpdyHeadersFrame:streamId(), DefaultStompHeaders:setTimeMillis(CharSequence-long), Http2Connection:goAwayReceived(int), UnsafeAtomicReferenceFieldUpdater:weakCompareAndSet(Object-Object-Object), ByteBuf:getFloat(int), DuplicatedByteBuf:isDirect(), NioSocketChannel$1:<init>(NioSocketChannel-ChannelPromise), EpollDatagramChannelConfig:getReceiveBufferSize(), Bzip2DivSufSort:trSort(int-int-int), SSLContext:setSessionIdContext(long-byte[]), DuplicatedByteBuf:getInt(int), EmptyHttpHeaders:add(TextHeaders), StatusUDT:values(), ReplayingDecoderBuffer:readBytes(int), WriteTimeoutHandler:scheduleTimeout(ChannelHandlerContext-ChannelPromise), SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor), EmptyByteBuf:order(), DefaultHttp2ConnectionEncoder$FlowControlledBase:operationComplete(ChannelFuture), SpdyFrameDecoderDelegate:readGoAwayFrame(int-int), CipherSuiteConverter:<clinit>(), NioDatagramChannel:doClose(), OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress), DefaultChannelGroupFuture:awaitUninterruptibly(), DefaultUdtChannelConfig:setOption(ChannelOption-Object), SSL:getOptions(long), PromiseAggregator:add(Promise[]), EmptyByteBuf:getBytes(int-ByteBuf-int-int), SSL:newSSL(long-boolean), NativeDatagramPacketArray$NativeDatagramPacket:access$200(NativeDatagramPacketArray$NativeDatagramPacket), DefaultHttpHeaders:addByte(Object-byte), DefaultBinaryHeaders:addObject(Object-Object), OioSocketChannelConfig:getSoTimeout(), VoidChannelPromise:setSuccess(), ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8:remove(Object), DefaultChannelPipeline$HeadContext:channelActive(ChannelHandlerContext), LzfEncoder:<init>(boolean-int), ReadOnlyByteBufferBuf:isDirect(), DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[]), ApplicationProtocolConfig$SelectedListenerFailureBehavior:<init>(String-int), AbstractScheduledEventExecutor:schedule(Callable-long-TimeUnit), Log4JLogger:<init>(Logger), Native:shutdown0(int-boolean-boolean), ConcurrentHashMapV8$SearchEntriesTask:compute(), MpscLinkedQueue:peek(), EmptyByteBuf:readBytes(GatheringByteChannel-int), AbstractMemoryHttpData:getFile(), AsciiString:equalsIgnoreCase(CharSequence-CharSequence), WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), QueryStringDecoder:decodeHexNibble(char), DefaultHeaders:setLong(Object-long), JsonObjectDecoder:initDecoding(byte), AbstractChannel$AbstractUnsafe$8:run(), RxtxChannel:remoteAddress(), NioDatagramChannel:leaveGroup(InetAddress-ChannelPromise), DefaultSctpServerChannelConfig:getOptions(Map-ChannelOption[]), DefaultMemcacheContent:content(), OioSctpChannel:parent(), AbstractEpollServerChannel:fd(), NioDatagramChannel:<init>(), ProxyHandler:channelReadComplete(ChannelHandlerContext), DefaultFullBinaryMemcacheResponse:release(int), OpenSslClientContext$1:verify(long-byte[][]-String), EmptyConvertibleHeaders:addObject(Object-Object), PemReader:readContent(File), AdvancedLeakAwareByteBuf:readUnsignedInt(), Channel:read(), DefaultTextHeaders$ValuesComposer:add(CharSequence-Iterable), ForkJoinTask$ExceptionNode:get(), WebSocketClientProtocolHandshakeHandler$1:operationComplete(ChannelFuture), DefaultStompHeaders:add(Object-Iterable), PooledByteBuf:newInternalNioBuffer(Object), ReadTimeoutHandler:<init>(long-TimeUnit), DuplicatedByteBuf:<init>(ByteBuf), Socks5ProxyHandler:handleResponse(ChannelHandlerContext-Object), PoolArena:findSubpagePoolHead(int), ChannelInputShutdownEvent:<clinit>(), WebSocketVersion:valueOf(String), EpollDatagramChannel:isFlagSet(int), AdvancedLeakAwareByteBuf:order(ByteOrder), Http2OrHttpChooser:addHttp2Handlers(ChannelHandlerContext), Socks5ClientEncoder:encodeAuthMethodRequest(Socks5InitialRequest-ByteBuf), IllegalReferenceCountException:<init>(), Bzip2HuffmanStageEncoder:writeBlockData(ByteBuf), MessageAggregator:ctx(), JdkSslContext:buildKeyManagerFactory(File-File-String-KeyManagerFactory), DefaultSocketChannelConfig:setWriteBufferHighWaterMark(int), PendingWriteQueue$PendingWrite$1:newObject(Recycler$Handle), DefaultHttp2Connection$ConnectionStream:<init>(DefaultHttp2Connection), SpdyFrameCodec:decode(ChannelHandlerContext-ByteBuf-List), DnsResource:retain(), DefaultChannelHandlerInvoker:invokeDeregister(ChannelHandlerContext-ChannelPromise), DefaultChannelProgressivePromise:channel(), EpollSocketChannelConfig:getSoLinger(), DefaultOioServerSocketChannelConfig:setWriteBufferHighWaterMark(int), AdvancedLeakAwareByteBuf:getChar(int), UnpooledHeapByteBuf:capacity(), AbstractNioByteChannel$NioByteUnsafe:handleReadException(ChannelPipeline-ByteBuf-Throwable-boolean), MqttVersion:protocolName(), DefaultChannelProgressivePromise:await(), AbstractEventLoop:<init>(), WebSocketClientExtensionHandshaker:newRequestData(), DefaultHttp2Headers:addDouble(Object-double), CompatibleObjectEncoder:<clinit>(), PerMessageDeflateDecoder:newRsv(WebSocketFrame), AbstractChannel$AbstractUnsafe:annotateConnectException(Throwable-SocketAddress), OpenSslEngine:closeInbound(), AbstractOioByteChannel:doReadBytes(ByteBuf), AbstractByteBuf:readMedium(), DefaultFullHttpResponse:equals(Object), WebSocketExtensionDecoder:handlerRemoved(ChannelHandlerContext), HttpHeaderDateFormat$1:initialValue(), ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter), DefaultChannelProgressivePromise:trySuccess(), DefaultChannelProgressivePromise:unvoid(), SelectorProviderUDT:from(TypeUDT), JdkNpnApplicationProtocolNegotiator:<init>(boolean-boolean-Iterable), DefaultSpdyHeaders:setTimeMillis(Object-long), SpdySession:getSendWindowSize(int), PausableChannelEventExecutor:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), RxtxChannelConfig$Stopbits:values(), RecyclableArrayList:newInstance(int), NioSocketChannel:<init>(Channel-SocketChannel), EmptyConvertibleHeaders:addFloat(Object-float), ConcurrentSet:<init>(), DefaultHttpHeaders:<init>(boolean-boolean), DefaultChannelPipeline:addBefore(String-String-ChannelHandler), HttpProxyHandler:handleResponse(ChannelHandlerContext-Object), JdkSslEngine:setNeedClientAuth(boolean), DefaultChannelHandlerInvoker:invokeRead(ChannelHandlerContext), PooledByteBufAllocator:access$500(), DefaultHeaders:setObject(Object-Iterable), DefaultHttp2Connection$DefaultEndpoint:verifyStreamId(int), DefaultPromise:await0(long-boolean), DefaultEventLoop:<init>(EventLoopGroup), SctpChannel:connect(SocketAddress), PoolChunk:free(long), Socks4ServerEncoder:<init>(), LoggingHandler:format(ChannelHandlerContext-String), ComposedLastHttpContent:retain(int), ReferenceMap:unfold(Reference), HttpHeaders:getInt(Object), NameResolverGroup:newResolver(EventExecutor), DefaultSctpServerChannelConfig:setAllocator(ByteBufAllocator), DefaultHttp2Headers:add(BinaryHeaders), HttpClientCodec$Decoder:actualReadableBytes(), DefaultChannelPipeline:findInvoker(EventExecutorGroup), NioSctpChannel$NioSctpChannelConfig:<init>(NioSctpChannel-NioSctpChannel-SctpChannel-NioSctpChannel$1), AbstractBootstrap$PendingRegistrationPromise:<init>(Channel-AbstractBootstrap$1), AbstractScheduledEventExecutor:schedule(Runnable-long-TimeUnit), PoolThreadCache:add(PoolArena-PoolChunk-long-int), ChannelFuture:cause(), EpollEventLoop:<init>(EventLoopGroup-Executor-int), WebSocketFrame:isFinalFragment(), PausableChannelEventExecutor:awaitTermination(long-TimeUnit), WrappedByteBuf:setBytes(int-InputStream-int), OpenSslServerSessionContext:<init>(long), OpenSslServerContext:destroyPools(), RtspVersions:<init>(), OpenSslEngine$1:getCreationTime(), DefaultChannelProgressivePromise:trySuccess(Object), NioServerSocketUDT:bind(SocketAddress-int), DefaultOioServerSocketChannelConfig:setReceiveBufferSize(int), UnsafeAtomicLongFieldUpdater:lazySet(Object-long), CompositeByteBuf:writeLong(long), FullHttpRequest:refCnt(), SpdySettingsFrame:isPersistValue(int), AbstractFuture:<init>(), Recycler$DefaultHandle:recycle(Object), SocksPortUnificationServerHandler:<clinit>(), DnsResponse:newHeader(int), CompositeByteBuf:readableBytes(), ChannelOutboundBuffer:decrementPendingOutboundBytes(long), OioDatagramChannel:doWrite(ChannelOutboundBuffer), PoolChunkList:<clinit>(), Lz4FrameEncoder$3:run(), HttpObjectDecoder:splitInitialLine(AppendableCharSequence), DefaultChannelHandlerInvoker:invokeChannelWritabilityChanged(ChannelHandlerContext), PlatformDependent0$1:<init>(Class), ReplayingDecoderBuffer:capacity(), ClassLoaderClassResolver:resolve(String), MixedFileUpload:getChunk(int), SSLContext:setOptions(long-int), Bzip2BitWriter:writeInt(ByteBuf-int), Snappy:findMatchingLength(ByteBuf-int-int-int), DefaultTextHeaders$1:<init>(), DefaultUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), HttpContentCompressor$1:<clinit>(), DefaultNameResolver:doIsResolved(SocketAddress), SSLContext:setSessionCacheTimeout(long-long), EmptyByteBuf:readSlice(int), UnpooledUnsafeDirectByteBuf:_setShort(int-int), HttpUtil:toHttpRequest(int-Http2Headers-boolean), FileUpload:retain(), Bzip2BitWriter:writeBoolean(ByteBuf-boolean), SimpleChannelInboundHandler:acceptInboundMessage(Object), ServerBootstrap:newAttrArray(int), AbstractEpollServerChannel:isActive(), AbstractInternalLogger:debug(String), UnpooledUnsafeDirectByteBuf:checkIndex(int-int), DefaultSpdyDataFrame:touch(), CountedCompleter:addToPendingCount(int), OpenSslEngine:access$200(OpenSslEngine), Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-short-boolean-int-boolean), ConcurrentHashMapV8:replaceNode(Object-Object-Object), ByteBuf:ensureWritable(int-boolean), DefaultChannelPipeline$5:run(), AbstractOioChannel$DefaultOioUnsafe:safeSetSuccess(ChannelPromise), Native:bindDomainSocket(int-String), ByteBuf:getBytes(int-OutputStream-int), PoolThreadCache$MemoryRegionCache$Entry:<init>(PoolThreadCache$1), MemoryFileUpload:touch(Object), DefaultHttp2RemoteFlowController$FlowState$Frame:incrementPendingBytes(int), EmptyByteBuf:readBytes(ByteBuffer), EmptyBinaryHeaders:setTimeMillis(Object-long), SSL:initialize(String), HttpPostMultipartRequestDecoder:parseBodyMultipart(), VoidChannelPromise:fireException(Throwable), ComposedLastHttpContent:touch(), DefaultBinaryHeaders:addDouble(AsciiString-double), HttpPostBodyUtil$SeekAheadNoBackArrayException:<init>(), Socks4ClientEncoder:encode(ChannelHandlerContext-Object-ByteBuf), AbstractEventExecutor:shutdownNow(), MpscLinkedQueue:peekNode(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), ChannelOutboundBuffer:safeFail(ChannelPromise-Throwable), CodecException:<init>(String-Throwable), Http2Stream$State:<init>(String-int), OioServerSocketChannel:doConnect(SocketAddress-SocketAddress), StompSubframeAggregator:newContinueResponse(Object), ForkJoinTask:trySetSignal(), SwappedByteBuf:capacity(int), Http2FrameListenerDecorator:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), DefaultBinaryHeaders:addFloat(Object-float), MqttMessageType:ordinal(), InternetProtocolFamily:<clinit>(), CompositeByteBuf:hasMemoryAddress(), EmptyConvertibleHeaders:set(Object-Object), DefaultAttributeMap$DefaultAttribute:access$302(DefaultAttributeMap$DefaultAttribute-DefaultAttributeMap$DefaultAttribute), EmptyConvertibleHeaders:add(Headers), Native:socketDgram(), DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), MqttDecoder:decodeMsbLsb(ByteBuf-int-int), AsciiString:parseShort(), MixedAttribute:hashCode(), PromiseTask$RunnableAdapter:toString(), ConcurrentHashMapV8$MapReduceMappingsTask:fork(), FastThreadLocalThread:<init>(Runnable), CommonsLogger:isWarnEnabled(), EmptyHttpHeaders:clear(), EmptyHeaders:addBoolean(Object-boolean), DefaultStompHeaders:addObject(CharSequence-Object[]), ByteBufUtil:swapLong(long), WebSocket00FrameEncoder:<init>(), DefaultProgressivePromise:awaitUninterruptibly(), NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface), ScheduledFutureTask:executor(), ByteBufOutputStream:writeLong(long), ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), Http2InboundFrameLogger$1:onPingAckRead(ChannelHandlerContext-ByteBuf), DefaultBinaryHeaders:add(AsciiString-Iterable), MqttConnectMessage:payload(), PlatformDependent:putLong(long-long), EmptyHttp2Headers:setFloat(AsciiString-float), SpdyFrameEncoder:encodeRstStreamFrame(ByteBufAllocator-int-int), EventLoop:isTerminated(), SctpChannel:configureBlocking(boolean), Recycler$WeakOrderQueue$Link:access$1202(Recycler$WeakOrderQueue$Link-int), DeflateFrameClientExtensionHandshaker:<init>(boolean), AbstractByteBuf:writeBoolean(boolean), UnpooledDirectByteBuf:copy(int-int), PooledHeapByteBuf:_setLong(int-long), EmptyHttp2Headers:setObject(Object-Object), Lz4FrameEncoder$1:<init>(Lz4FrameEncoder-ChannelPromise), ReplayingDecoderBuffer:touch(), EmptyTextHeaders:addInt(CharSequence-int), HttpContentEncoder$State[]:clone(), EpollEventArray:allocate(int), OioDatagramChannel:leaveGroup(InetAddress-ChannelPromise), AbstractEpollStreamChannel$EpollStreamUnsafe:closeOnRead(ChannelPipeline), CountedCompleter:doExec(), SwappedByteBuf:getBytes(int-ByteBuf-int), AbstractReferenceCountedByteBuf:markReaderIndex(), EpollDatagramChannel:<init>(), AdvancedLeakAwareByteBuf:nioBuffers(), EmptyHttp2Headers:addTimeMillis(AsciiString-long), Native:recvFrom(int-ByteBuffer-int-int), DuplicatedByteBuf:getShort(int), DefaultPromise$2:<init>(DefaultPromise-GenericFutureListener), JdkSslEngine:getUseClientMode(), AbstractNioChannel:access$100(AbstractNioChannel), NioSctpChannel:<init>(), CodecException:<init>(), WebSocketUtil:sha1(byte[]), HttpObjectDecoder$State:valueOf(String), DnsNameResolver:negativeTtl(), RxtxChannel:<clinit>(), UnpooledDirectByteBuf:setMedium(int-int), DefaultExecutorServiceFactory$DefaultForkJoinWorkerThread:<init>(ForkJoinPool), InternalLogger:error(String-Throwable), Http2FrameReader:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultLastStompContentSubframe:duplicate(), AbstractChannelHandlerContext:bind(SocketAddress-ChannelPromise), DnsNameResolver:maxTriesPerQuery(), DefaultSpdyDataFrame:content(), OpenSslX509Certificate:getCriticalExtensionOIDs(), BinaryWebSocketFrame:content(), EncryptedPrivateKeyInfo:getAlgName(), AdvancedLeakAwareByteBuf:setBytes(int-ByteBuf), DefaultHttpContent:retain(int), NioEventLoop$1:<init>(NioEventLoop), ThreadLocalPooledDirectByteBuf:<init>(), ChannelHandlerAppender:add(String-ChannelHandler), ChannelHandlerAdapter:channelRegistered(ChannelHandlerContext), ChannelHandler:exceptionCaught(ChannelHandlerContext-Throwable), NioEventLoopGroup:rebuildSelectors(), DefaultSpdyHeaders$1:convertObject(Object), DiskAttribute:setCharset(Charset), EpollEventArray:free(), DefaultEventLoopGroup:newChild(Executor-Object[]), DefaultHttp2ConnectionEncoder$Builder:<init>(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertChar(char), CipherSuiteConverter:isO2JCached(String-String-String), DefaultSpdyHeaders:addObject(Object-Object[]), ResourceLeakDetector$Level:ordinal(), WebSocketClientHandshaker00:newWebsocketDecoder(), AbstractEpollChannel:remoteAddress(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), ClassResolvers:softCachingResolver(ClassLoader), CompositeByteBuf:readerIndex(), WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int), CorsConfig$Builder:preflightResponseHeader(CharSequence-Object[]), ReferenceCountUtil:release(Object), DiskAttribute:retain(), ChannelOption:<init>(int-String), EmptyByteBuf:getByte(int), Http2CodecUtil$SimpleChannelPromiseAggregator:setSuccess(Void), MqttDecoder$DecoderState:values(), Http2InboundFrameLogger$1:<init>(Http2InboundFrameLogger-Http2FrameListener), StompHeadersSubframe:setDecoderResult(DecoderResult), LocalChannel:access$302(LocalChannel-ChannelPromise), Bootstrap:access$100(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), TypeParameterMatcher:find(Object-Class-String), SwappedByteBuf:readFloat(), AbstractByteBufAllocator:newHeapBuffer(int-int), Socks4ClientDecoder$State[]:clone(), WebSocketServerProtocolHandshakeHandler:<init>(String-String-boolean-int-boolean), CountedCompleter:quietlyComplete(), ByteBuf:setZero(int-int), NioSctpServerChannel:doReadMessages(List), Logger:isErrorEnabled(), ChannelHandlerInvoker:invokeClose(ChannelHandlerContext-ChannelPromise), CorsConfig:isAnyOriginSupported(), UnpooledUnsafeDirectByteBuf:writerIndex(), DuplicatedByteBuf:internalNioBuffer(int-int), ClientCookieDecoder$CookieBuilder:parse4(String-int-String), InternalLoggerFactory:getInstance(String), Unpooled:wrappedBuffer(int-byte[][]), WrappedByteBuf:isReadable(), SpdyFrameDecoderDelegate:readSynStreamFrame(int-int-byte-boolean-boolean), AbstractReferenceCountedByteBuf:setBoolean(int-boolean), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToByte(Object), DefaultLastStompContentSubframe:touch(), EmptyHttp2Headers:addBoolean(AsciiString-boolean), EmptyByteBuf:getDouble(int), AbstractBinaryMemcacheDecoder:resetDecoder(), SpdyFrameEncoder:encodeHeadersFrame(ByteBufAllocator-int-boolean-ByteBuf), StringUtil:toHexStringPadded(byte[]), ApplicationProtocolUtil:<init>(), Socks4CommandStatus:<init>(int-String), ResourceLeakDetector:access$300(ResourceLeakDetector), DefaultBinaryHeaders$2:convertToBoolean(AsciiString), CloseWebSocketFrame:<init>(int-String), DefaultHttp2FrameWriter:maxFrameSize(int), Socks5AuthMethod:compareTo(Socks5AuthMethod), ChannelHandlerAppender:<init>(), Bzip2Encoder$State:ordinal(), WrappedByteBuf:touch(), UnsafeDirectSwappedByteBuf:writeInt(int), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:invoke(), ReplayingDecoderBuffer:writeInt(int), AbstractReferenceCountedByteBuf:writeBytes(ByteBuf), MessageAggregator:handlerRemoved(ChannelHandlerContext), Decoder:endHeaderBlock(), DnsQuery:<init>(int-InetSocketAddress), DefaultBinaryHeaders$2:convertDouble(double), EmptyByteBuf:readBoolean(), ForkJoinPool:tryTerminate(boolean-boolean), Socks5CommandRequestDecoder$State:<init>(String-int), ReadOnlyByteBufferBuf:_getLong(int), Log4JLogger:info(String-Object-Object), EpollDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface), EpollServerSocketChannel:localAddress(), DefaultPromise:notifyListeners0(Future-DefaultFutureListeners), PausableChannelEventExecutor:terminationFuture(), CompactObjectOutputStream:writeUTF(String), DuplicatedByteBuf:setIndex(int-int), PooledByteBuf:writerIndex(), NioSctpServerChannel:doClose(), PooledHeapByteBuf:setBytes(int-byte[]-int-int), DefaultPromise:progressiveListeners(), HttpUtil:<clinit>(), AdaptiveRecvByteBufAllocator:getSizeTableIndex(int), AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int), EmptyHeaders:setChar(Object-char), PingWebSocketFrame:<init>(), EmptyTextHeaders:setChar(Object-char), ObjectEncoderOutputStream:writeFloat(float), ThreadPerChannelEventLoopGroup:<init>(), Bzip2Encoder:<init>(), SimpleChannelInboundHandler:channelRead(ChannelHandlerContext-Object), Log4JLogger:warn(String-Object-Object), MemoryAttribute:duplicate(), Logger:warn(String-Object[]), MpscLinkedQueue$DefaultNode:<init>(Object), ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), SctpMessage:touch(Object), ChunkedStream:readChunk(ChannelHandlerContext), AbstractChannel$AbstractUnsafe$5:operationComplete(Future), ChannelConfig:getAllocator(), UnsafeAtomicLongFieldUpdater:set(Object-long), DefaultHttp2ConnectionEncoder:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise), DefaultConvertibleHeaders:addBoolean(Object-boolean), SSLEngine:unwrap(ByteBuffer-ByteBuffer[]-int-int), IntObjectHashMap:<init>(int), ReadOnlyByteBuf:setIndex(int-int), CompositeByteBuf:alloc(), Socks5PasswordAuthStatus:valueOf(byte), MarshallerProvider:getMarshaller(ChannelHandlerContext), HttpMethod:<clinit>(), EpollChannelConfig:getEpollMode(), GlobalTrafficShapingHandler:access$200(GlobalTrafficShapingHandler-ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long), SwappedByteBuf:release(int), AbstractByteBuf:checkIndex(int-int), EmptyBinaryHeaders:setObject(Object-Object[]), SlicedByteBuf:hasMemoryAddress(), DefaultHttp2HeaderTableListSize:maxHeaderListSize(int), DefaultRxtxChannelConfig:getReadTimeout(), CodedOutputStream:writeRawVarint32(int), Socks4CommandStatus:valueOf(byte), EventExecutor:parent(), ThreadLocalRandom:<clinit>(), HttpPostStandardRequestDecoder:next(), PoolChunk:value(int), AbstractReferenceCountedByteBuf:writeMedium(int), ProxyHandler:access$200(ProxyHandler), ChannelHandler:disconnect(ChannelHandlerContext-ChannelPromise), PromiseTask:toStringBuilder(), Socks5PasswordAuthRequestDecoder:<init>(), DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket), ConcurrentHashMapV8$SearchMappingsTask:invoke(), AbstractEpollStreamChannel$EpollStreamUnsafe:epollInReady(), Recycler$Stack:access$402(Recycler$Stack-int), DefaultSpdyHeaders$2:<init>(), DiskAttribute:equals(Object), ConcurrentHashMapV8$CollectionView:removeAll(Collection), PooledDirectByteBuf:readBytes(OutputStream-int), DnsResponseHeader:<init>(DnsMessage-int), AbstractTrafficShapingHandler:<init>(), EmptyTextHeaders:addObject(CharSequence-Object[]), DefaultChannelPipeline$HeadContext:channelInactive(ChannelHandlerContext), AsciiString:parseLong(), TrafficCounter:bytesRealWriteFlowControl(long), ConcurrentHashMapV8$ForEachValueTask:invoke(), SslHandler:<init>(SSLEngine-boolean), NioSctpChannel$2:<init>(NioSctpChannel-InetAddress-ChannelPromise), DomainSocketReadMode:ordinal(), MultithreadEventExecutorGroup$EventExecutorChooser:next(), EmptyHttp2Headers:set(AsciiString-AsciiString), SingleThreadEventExecutor:isShuttingDown(), DefaultTextHeaders:setDouble(CharSequence-double), Recycler:access$1700(), AbstractEpollChannel:newDirectBuffer(Object-ByteBuf), Unsafe:unpark(Object), ConcurrentHashMapV8$MapReduceEntriesToIntTask:invoke(), WrappedByteBuf:setBytes(int-ByteBuf-int), AbstractNioMessageChannel:continueOnWriteError(), ReplayingDecoderBuffer:skipBytes(int), WrappedByteBuf:bytesBefore(int-int-byte), ResourceLeakDetector$DefaultResourceLeak:record0(Object-int), AbstractDiskHttpData:getDiskFilename(), Http2OutboundFrameLogger:<init>(Http2FrameWriter-Http2FrameLogger), EpollDatagramChannelConfig:setReusePort(boolean), ByteBufUtil:writeUtf8(ByteBuf-CharSequence), AbstractBinaryMemcacheDecoder$State:ordinal(), ByteBuf:getUnsignedByte(int), FailedFuture:<init>(EventExecutor-Throwable), BinaryMemcacheMessage:setKey(String), ChannelTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext), PooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int), EpollServerSocketChannelConfig:setOption(ChannelOption-Object), AbstractByteBuf:ensureWritable(int-boolean), DefaultHttp2HeadersDecoder:<init>(), SslProvider:values(), Socks4CommandStatus:compareTo(Object), OpenSslServerSessionContext:setSessionCacheEnabled(boolean), ConcurrentHashMapV8$MapReduceValuesToIntTask:invoke(), DefaultHttp2Connection$ConnectionStream:id(), DefaultHttpHeaders:addBoolean(Object-boolean), DefaultHttp2StreamRemovalPolicy:run(), DefaultHttp2Connection$DefaultStream:createdBy(), CompositeByteBuf:addComponents0(int-Iterable), SimpleNameResolver:doResolve(SocketAddress-Promise), ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8:reduceToDouble(long-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), DefaultTextHeaders$DefaultTextValueTypeConverter:convertInt(int), CorsConfig$Builder:access$700(CorsConfig$Builder), PooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int), AbstractMemcacheObjectEncoder:encodeAndRetain(Object), SpdyFrameCodec:readHeaderBlock(ByteBuf), Http2CodecUtil$SimpleChannelPromiseAggregator:trySuccess(Void), SslHandler:setHandshakeSuccess(), EventLoop:awaitTermination(long-TimeUnit), SwappedByteBuf:readerIndex(int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer), DefaultSctpChannelConfig:getOptions(Map-ChannelOption[]), JdkZlibEncoder$3:run(), WebSocketServerHandshaker13:newWebsocketDecoder(), DefaultChannelHandlerInvoker:safeExecuteInbound(Runnable-Object), ChannelProgressivePromise:tryProgress(long-long), SwappedByteBuf:forEachByteDesc(ByteBufProcessor), DefaultHttpHeaders:add(CharSequence-CharSequence[]), AbstractEpollStreamChannel:<init>(Channel-int), OioSctpChannel:doClose(), Http2ConnectionEncoder:writeSettingsAck(ChannelHandlerContext-ChannelPromise), DefaultBinaryHeaders$3:<init>(), JdkSslContext:sessionContext(), Http2ConnectionHandler:closeLocalSide(Http2Stream-ChannelFuture), EmptyHeaders:setAll(Headers), Http2LocalFlowController:initialWindowSize(int), DefaultSpdyRstStreamFrame:setLast(boolean), EmptyHttpHeaders:setFloat(Object-float), PoolSubpage:allocate(), FastThreadLocal:set(Object), DefaultByteBufHolder:<init>(ByteBuf), HttpClientCodec$Decoder:<init>(HttpClientCodec-int-int-int-boolean), ChannelFactory:newChannel(), ByteBuf:writeDouble(double), AbstractOioByteChannel:pipeline(), FastLzFrameDecoder$State:ordinal(), ReplayingDecoderBuffer:setShort(int-int), HttpObjectAggregator$AggregatedFullHttpMessage:setTrailingHeaders(HttpHeaders), SSLEngineResult$Status:values(), NioUdtByteConnectorChannel:<clinit>(), AbstractScheduledEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), AbstractConstant:toString(), Bzip2HuffmanStageEncoder:<init>(Bzip2BitWriter-char[]-int-int-int[]), SwappedByteBuf:getBoolean(int), Http2FrameWriter:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise), DefaultRxtxChannelConfig:getOption(ChannelOption), FullHttpRequest:retain(), JdkSslSession:getPacketBufferSize(), SlicedByteBuf:alloc(), AbstractNioByteChannel:<clinit>(), AdvancedLeakAwareByteBuf:nioBuffer(int-int), CompositeByteBuf:getByte(int), Recycler$WeakOrderQueue$Link:<init>(Recycler$1), CompositeByteBuf:readBytes(ByteBuf-int-int), MqttQoS:values(), SpdyDataFrame:content(), DnsQuery:questions(), DefaultHttpHeaders:setObject(CharSequence-Object), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:advance(), EpollDatagramChannelConfig:getOptions(Map-ChannelOption[]), Bootstrap:group(EventLoopGroup), ByteBuf:getBytes(int-byte[]-int-int), SpdyOrHttpChooser$1:<clinit>(), AbstractChannel$AbstractUnsafe$2:run(), DefaultCookie:compareTo(Cookie), ChannelMatchers$InstanceMatcher:<init>(Channel), Socks5ProxyHandler:removeEncoder(ChannelHandlerContext), Socks4CommandType:byteValue(), ForkJoinPool$DefaultForkJoinWorkerThreadFactory:newThread(ForkJoinPool), CodecException:<init>(Throwable), SucceededChannelFuture:<init>(Channel-EventExecutor), OpenSslClientContext$OpenSslClientSessionContext:<init>(long-OpenSslClientContext$1), SslHandler:setHandshakeTimeoutMillis(long), OioSctpServerChannel:remoteAddress(), AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise), Channel:eventLoop(), LoggingHandler:<clinit>(), NioUdtByteConnectorChannel:remoteAddress(), Http2FrameTypes:<init>(), GlobalTrafficShapingHandler$1:<init>(GlobalTrafficShapingHandler-ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long), InternalLogger:error(String-Object-Object), AsciiString:indexOf(int), CipherSuiteConverter:toOpenSslBulkCipher(String), DefaultLastStompContentSubframe:toString(), ForkJoinPool:getQueuedTaskCount(), AbstractEpollStreamChannel$EpollStreamUnsafe:epollRdHupReady(), AbstractBinaryMemcacheDecoder:decodeHeader(ByteBuf), HttpObjectDecoder$HeaderParser:parse(ByteBuf), AbstractChannel$AbstractUnsafe$9:run(), NioSctpChannel:doConnect(SocketAddress-SocketAddress), DefaultHttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData), DefaultSpdyHeadersFrame:toString(), WebSocketVersion:values(), PooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int), PlatformDependent0:getByte(long), IntObjectMap:get(int), AbstractInternalLogger:log(InternalLogLevel-String-Throwable), Http2Connection$Endpoint:flowController(), DefaultPromise:sync(), PlatformDependent:getInt(long), HttpContentDecoder:finishDecode(List), HttpVersion:compareTo(HttpVersion), DefaultRxtxChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), UnpooledHeapByteBuf:checkReadableBytes(int), AbstractNioByteChannel:remoteAddress(), DefaultTextHeaders$2:<init>(), ConcurrentHashMapV8$ForEachTransformedMappingTask:addToPendingCount(int), BinaryMemcacheClientCodec$Encoder:<init>(BinaryMemcacheClientCodec), Socks5InitialResponseDecoder$State[]:clone(), SwappedByteBuf:writeMedium(int), PerFrameDeflateEncoder:rsv(WebSocketFrame), ChannelOutboundBuffer$1:<init>(), Bzip2BitReader:readInt(), HAProxyProtocolVersion[]:clone(), Recycler$WeakOrderQueue:access$1600(Recycler$WeakOrderQueue), DefaultHttp2Connection:remote(), DefaultDatagramChannelConfig:setWriteSpinCount(int), HttpClientCodec$Decoder:decode(ChannelHandlerContext-ByteBuf-List), EmptyHttp2Headers:addObject(AsciiString-Object[]), LzfDecoder$State:<clinit>(), SpdySynStreamFrame:associatedStreamId(), HttpContentEncoder$Result:targetContentEncoding(), SslHandler$6:run(), DefaultSctpServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), Native:remoteAddress0(int), OioServerSocketChannel:config(), AbstractEventExecutorGroup:shutdown(), ForkJoinPool:runWorker(ForkJoinPool$WorkQueue), ByteBufUtil$ThreadLocalDirectByteBuf:<init>(Recycler$Handle), DnsHeader:additionalResourceCount(), DefaultChannelConfig:setMaxMessagesPerRead(int), AbstractBinaryMemcacheDecoder$State:values(), ForkJoinPool:getRunningThreadCount(), DefaultTextHeaders:add(Object-Object), Http2ConnectionHandler:decode(ChannelHandlerContext-ByteBuf-List), ConcurrentHashMapV8$MapReduceEntriesToLongTask:compute(), DefaultHttp2HeadersDecoder:<init>(int-int), ByteBufUtil$ThreadLocalDirectByteBuf:setRefCnt(int), UnpooledDirectByteBuf:getInt(int), Bzip2Encoder$State:<clinit>(), AbstractReferenceCountedByteBuf:readBytes(OutputStream-int), Channel:disconnect(), DefaultSpdySettingsFrame$Setting:setValue(int), Http2ConnectionEncoder:connection(), DefaultSctpChannelConfig:getSendBufferSize(), DefaultFullHttpResponse:protocolVersion(), Http2Stream:numChildren(), EmptyByteBuf:setMedium(int-int), SpdyHttpEncoder:createHeadersFrame(HttpResponse), SslContext:newServerContext(SslProvider-File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), SwappedByteBuf:skipBytes(int), Socks4ClientDecoder$State:values(), AbstractTrafficShapingHandler:write(ChannelHandlerContext-Object-ChannelPromise), DefaultHttp2Headers:setShort(Object-short), Deflater:deflate(int), DefaultHttpHeaders:add(CharSequence-CharSequence), SslContext:newServerContext(SslProvider-File-File-String), PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int), SocketUDT:status(), DefaultHeaders:getTimeMillisAndRemove(Object-long), DefaultHttp2ConnectionDecoder$FrameReadListener:onSettingsRead(ChannelHandlerContext-Http2Settings), AbstractSocksMessage:<init>(), MemoryFileUpload:getContentTransferEncoding(), DefaultHttp2Headers:setInt(AsciiString-int), MessageFormatter:<init>(), DelimiterBasedFrameDecoder:isSubclass(), RxtxChannel$RxtxUnsafe:access$300(RxtxChannel$RxtxUnsafe), AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel-AbstractOioChannel$1), CompositeByteBuf:writeChar(int), ForkJoinPool:checkPermission(), DefaultOioServerSocketChannelConfig:setAutoRead(boolean), JdkLogger:warn(String-Throwable), PoolArena$DirectArena:newByteBuf(int), DefaultChannelHandlerInvoker$11:run(), DefaultUdtChannelConfig:setConnectTimeoutMillis(int), DefaultTextHeaders:addByte(CharSequence-byte), Slf4JLogger:isErrorEnabled(), JZlibEncoder$3:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), DefaultTextHeaders:addBoolean(Object-boolean), Attribute:retain(int), NioSctpServerChannel:isOpen(), NioSocketChannel:doBind(SocketAddress), AbstractBootstrap:init(Channel), InsecureTrustManagerFactory:<clinit>(), Native:isSupportingSendmmsg(), MixedFileUpload:delete(), AbstractChannelHandlerContext:fireUserEventTriggered(Object), AbstractChannel$AbstractUnsafe:closeAndDeregister(ChannelOutboundBuffer-boolean-ChannelPromise-Throwable), EpollDatagramChannelConfig:setMaxMessagesPerRead(int), Socks4ClientEncoder:<clinit>(), ImmediateEventExecutor:<clinit>(), AbstractChannel:access$000(AbstractChannel), HttpObjectDecoder:getChunkSize(String), WebSocketServerHandshaker$1:<init>(WebSocketServerHandshaker-String-ChannelPromise), UnsafeDirectSwappedByteBuf:getUnsignedShort(int), OpenSslEngine:access$602(OpenSslEngine-String), AbstractBootstrap:group(), ConcurrentHashMapV8:reduceKeysToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), AbstractReferenceCountedByteBuf:setBytes(int-byte[]), PoolThreadCache:cacheForTiny(PoolArena-int), AbstractEpollStreamChannel:localAddress(), NioSctpChannel:access$100(NioSctpChannel-boolean), DnsHeader:setRecursionDesired(boolean), Unpooled:copiedBuffer(char[]-Charset), Http2OutboundFrameLogger:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:deallocate(), AbstractEpollServerChannel:isOpen(), Bootstrap$3:run(), UnsafeDirectSwappedByteBuf:setDouble(int-double), ChannelOutboundBuffer:nioBuffers(), FixedCompositeByteBuf:_getInt(int), DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int), EpollServerChannelConfig:getOptions(Map-ChannelOption[]), ChannelOutboundBuffer$MessageProcessor:processMessage(Object), NioDatagramChannel:newDirectBuffer(ByteBuf), WebSocketClientHandshaker00:<init>(URI-WebSocketVersion-String-HttpHeaders-int), AbstractBootstrap$PendingRegistrationPromise:access$102(AbstractBootstrap$PendingRegistrationPromise-EventExecutor), ByteToMessageCodec:<init>(Class), CipherSuiteConverter:toOpenSsl(String), DefaultTextHeaders:addDouble(CharSequence-double), JdkAlpnSslEngine$1:<init>(JdkAlpnSslEngine-JdkApplicationProtocolNegotiator$ProtocolSelector), DefaultChannelPipeline:addLast(EventExecutorGroup-ChannelHandler[]), Bzip2Encoder$2:operationComplete(Future), PlatformDependent:newMpscQueue(), ConcurrentHashMapV8:writeObject(ObjectOutputStream), ChannelHandlerContext:pipeline(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToLong(Object), JdkAlpnSslEngine$1:select(List), AbstractOioMessageChannel:remoteAddress(), AbstractNioChannel$NioUnsafe:forceFlush(), DnsNameResolverGroup:<init>(Class-InetSocketAddress-InetSocketAddress), EpollDomainSocketChannelConfig:setOption(ChannelOption-Object), GlobalEventExecutor:terminationFuture(), FormattingTuple:<clinit>(), OpenSslX509Certificate:getEncoded(), AbstractOioByteChannel:config(), EpollDatagramChannel:<clinit>(), Recycler:<init>(int), Socks4CommandStatus:<init>(int), DefaultChannelPipeline$HeadContext$1:run(), IntObjectHashMap:values(Class), Native:setTrafficClass(int-int), Log4JLogger:warn(String-Object), EmptyTextHeaders:addObject(CharSequence-Iterable), NioUdtMessageConnectorChannel:<init>(SocketChannelUDT), EmptyHeaders:equals(Object), InboundHttp2ToHttpPriorityAdapter:addHttpHeadersToHttp2Headers(HttpHeaders-Http2Headers), Promise:setSuccess(Object), GlobalChannelTrafficShapingHandler$1$1:hasNext(), DefaultSctpServerChannelConfig:setBacklog(int), UnsafeAtomicReferenceFieldUpdater:compareAndSet(Object-Object-Object), Attribute:getString(), DefaultBinaryHeaders:setObject(AsciiString-Object), HttpPostRequestEncoder$WrappedFullHttpRequest:release(int), DefaultSpdyHeaders:setDouble(Object-double), ChunkedFile:close(), PendingWrite$1:<init>(), EpollChannelConfig:setOption(ChannelOption-Object), Http2Flags:priorityPresent(boolean), ByteBufInputStream:readFully(byte[]), EmptyByteBuf:setLong(int-long), WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise), DefaultHttpHeaders:setTimeMillis(Object-long), EpollDomainSocketChannel:<init>(), SpdyFrameEncoder:encodePingFrame(ByteBufAllocator-int), MultithreadEventExecutorGroup:isPowerOfTwo(int), SpdySession:<init>(int-int), DefaultHttp2LocalFlowController:<init>(Http2Connection-Http2FrameWriter-float), SpdySessionHandler:close(ChannelHandlerContext-ChannelPromise), ByteBufAllocator:buffer(int), UdtMessage:copy(), PausableChannelEventExecutor:invokeChannelWritabilityChanged(ChannelHandlerContext), ByteToMessageDecoder:handlerRemoved(ChannelHandlerContext), ChannelPipeline:remove(String), NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise), GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:run(), DefaultChannelPipeline:fireChannelActive(), EmptyByteBuf:writeZero(int), MpscLinkedQueueNode:setNext(MpscLinkedQueueNode), StreamingXXHash32:asChecksum(), DefaultNameResolverGroup:<init>(), AsciiHeadersEncoder$NewlineType:valueOf(String), NioUdtProvider:<init>(TypeUDT-KindUDT), OpenSslContext$1:<clinit>(), PausableEventExecutor:rejectNewTasks(), CompatibleMarshallingEncoder:<init>(MarshallerProvider), PooledDirectByteBuf:<clinit>(), UnsafeAtomicReferenceFieldUpdater:set(Object-Object), OpenSslClientContext:sessionContext(), ReplayingDecoderBuffer:readerIndex(int), ConcurrentHashMapV8$TreeBin:unlockRoot(), AbstractEpollStreamChannel$EpollStreamUnsafe:closeIfClosed(), DnsQueryContext:access$100(DnsQueryContext), NetUtil:isValidIp4Word(String), ForkJoinTask:get(), DefaultRxtxChannelConfig:isRts(), ConcurrentHashMapV8$ForEachTransformedEntryTask:fork(), SpdyFrameDecoderDelegate:readHeadersFrame(int-boolean), DefaultFullBinaryMemcacheRequest:retain(int), DefaultChannelPipeline:disconnect(ChannelPromise), EmptyHttp2Headers:addFloat(Object-float), HashedWheelTimer$Worker:<init>(HashedWheelTimer-HashedWheelTimer$1), EmptyBinaryHeaders:<init>(), AbstractScheduledEventExecutor$1:<init>(AbstractScheduledEventExecutor-ScheduledFutureTask), BinaryMemcacheResponse:setCas(long), SpdySession$StreamState:getReceiveWindowSizeLowerBound(), DefaultUdtServerChannelConfig:setBacklog(int), DefaultUdtServerChannelConfig:setReceiveBufferSize(int), OioDatagramChannel:doConnect(SocketAddress-SocketAddress), ReadOnlyByteBufferBuf:nioBuffer(int-int), PoolThreadCache$MemoryRegionCache:free(), JdkAlpnSslEngine:getWrappedEngine(), PlatformDependent:getByte(long), LocalChannelRegistry:unregister(LocalAddress), SpdyOrHttpChooser$SelectedProtocol:ordinal(), ReferenceCountUtil$ReleasingTask:toString(), Log4JLogger:<clinit>(), DuplicatedByteBuf:getByte(int), AppendableCharSequence:length(), EmbeddedChannel:<clinit>(), JdkApplicationProtocolNegotiator$SslEngineWrapperFactory:wrapSslEngine(SSLEngine-JdkApplicationProtocolNegotiator-boolean), Http2Error:<clinit>(), ChannelHandlerInvokerUtil:invokeConnectNow(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), AdvancedLeakAwareByteBuf:setChar(int-int), OioSctpServerChannel$OioSctpServerChannelConfig:<init>(OioSctpServerChannel-OioSctpServerChannel-SctpServerChannel-OioSctpServerChannel$1), MessageToByteEncoder:<init>(boolean), SocksPortUnificationServerHandler:<init>(), LzfDecoder$State:values(), SslHandler:unwrap(ChannelHandlerContext-ByteBuf-int-int), CertificateX509Key:<init>(PublicKey), EpollSocketChannelConfig:setWriteBufferLowWaterMark(int), WrappedByteBuf:hasArray(), EmptyHttpHeaders:setLong(CharSequence-long), Socks5PasswordAuthRequestDecoder$State:valueOf(String), Socks5AddressEncoder$1:<init>(), AsciiString$1:compare(Object-Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), DefaultHeaders:getLong(Object-long), SslHandler:wrapNonAppData(ChannelHandlerContext-boolean), ScheduledFutureTask:compareTo(Object), Http2HeaderTable:maxHeaderListSize(int), Http2LocalFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int), ChannelPipelineException:<init>(), SpdySessionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture), WebSocketServerHandshaker13:<init>(String-String-boolean-int-boolean), MqttDecoder:invalidMessage(Throwable), DefaultRxtxChannelConfig:setConnectTimeoutMillis(int), AsciiHeadersEncoder$SeparatorType:<clinit>(), EpollDatagramChannelConfig:setTrafficClass(int), AbstractByteBuf:readUnsignedShort(), SslContext:newHandler(SSLEngine), AbstractEventLoopGroup:<init>(), MessageFormatter:booleanArrayAppend(StringBuffer-boolean[]), Http2Settings:entries(), Socks5AddressEncoder:<clinit>(), Http2Connection$Endpoint:reservePushStream(int-Http2Stream), EpollServerSocketChannelConfig:getBacklog(), NioSctpServerChannel$1:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), AbstractChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-int), DefaultHttp2RemoteFlowController$2:streamInactive(Http2Stream), ReplayingDecoderBuffer:writeBytes(ScatteringByteChannel-int), SpdyOrHttpChooser:<init>(int-int), PongWebSocketFrame:rsv(), NioSocketChannel$2:<init>(NioSocketChannel-ChannelPromise), DefaultNameResolver:doIsResolved(InetSocketAddress), JdkSslContext:<init>(Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator), DefaultChannelPipeline:removeFirst(), FastThreadLocal:<init>(), EpollEventLoop:run(), HAProxyProxiedProtocol$TransportProtocol:<init>(String-int-byte), JZlibEncoder:<init>(int-int-int-byte[]), AbstractInternalLogger:error(String), SslHandler:access$500(SslHandler-Throwable), HttpObjectEncoder:contentLength(Object), Http2Stream:closeLocalSide(), AbstractOioByteChannel:unsafe(), Socks4ServerDecoder$1:<clinit>(), PooledByteBufAllocator:access$000(PooledByteBufAllocator), UnsafeAtomicReferenceFieldUpdater:<init>(Unsafe-Class-String), InboundHttp2ToHttpPriorityAdapter:initializePseudoHeaders(Http2Headers), ByteBufOutputStream:writeFloat(float), AbstractByteBuf:getBytes(int-ByteBuffer), DefaultHttp2Connection$DefaultStream:getProperty(Object), ReadOnlyUnsafeDirectByteBuf:alloc(), WebSocketClientExtensionHandler:channelRead(ChannelHandlerContext-Object), AbstractTrafficShapingHandler:<init>(long-long-long), DefaultHttp2ConnectionDecoder$FrameReadListener:onRstStreamRead(ChannelHandlerContext-int-long), EmptyTextHeaders:set(CharSequence-Iterable), WebSocketServerHandshakerFactory:<init>(String-String-boolean), Http2Connection:remote(), DnsNameResolver:maxQueriesPerResolve(), AbstractEpollStreamChannel$EpollStreamUnsafe:fulfillConnectPromise(ChannelPromise-Throwable), DefaultHttp2Headers:addTimeMillis(AsciiString-long), EmptyBinaryHeaders:setChar(AsciiString-char), FastLz:readU16(byte[]-int), AbstractMemcacheObjectEncoder:<init>(), SslHandler$2:<init>(SslHandler-Promise), JZlibDecoder:<init>(byte[]), Http2Headers$PseudoHeaderName:values(), DnsQueryContext:timeoutFuture(), HttpProxyHandler:newInitialMessage(ChannelHandlerContext), EmbeddedEventLoop:parent(), FullHttpMessage:release(), EpollSocketChannelConfig:isTcpCork(), DefaultHttp2Connection$ConnectionStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List), ConcurrentHashMapV8:reduceKeysToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), Attribute:touch(Object), ForkJoinTask:externalInterruptibleAwaitDone(), MixedFileUpload:retain(int), DnsQuery:addAuthorityResource(DnsResource), NioUdtProvider:newConnectorChannelUDT(TypeUDT), DefaultHeaders:addFloat(Object-float), DnsNameResolver$3:<init>(DnsNameResolver-DnsQuestion), WrappedByteBuf:array(), OpenSslClientContext:<init>(File-TrustManagerFactory), ForkJoinPool:isQuiescent(), ConcurrentHashMapV8:fullAddCount(InternalThreadLocalMap-long-IntegerHolder-boolean), Socks5PasswordAuthStatus:<init>(int), ReadOnlyByteBuf:capacity(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:advance(), UnpooledDirectByteBuf:readBytes(GatheringByteChannel-int), HashedWheelTimer$HashedWheelBucket:<init>(HashedWheelTimer$1), ReadTimeoutHandler:access$000(ReadTimeoutHandler), AbstractNioByteChannel:filterOutboundMessage(Object), ResourceLeakDetector$DefaultResourceLeak:close(), ApplicationProtocolConfig:<init>(), MemoryAttribute:addContent(ByteBuf-boolean), PerMessageDeflateEncoder:removeFrameTail(WebSocketFrame), HttpObjectAggregator$1:operationComplete(ChannelFuture), ChannelOutboundBuffer:isWritable(), ChannelHandlerContext:handler(), DefaultHttp2LocalFlowController:initialWindowSize(int), ProxyHandler:safeRemoveDecoder(), JdkAlpnApplicationProtocolNegotiator$1:wrapSslEngine(SSLEngine-JdkApplicationProtocolNegotiator-boolean), AbstractEpollStreamChannel:doWriteSingle(ChannelOutboundBuffer-int), WebSocket08FrameEncoder:encode(ChannelHandlerContext-Object-List), DefaultAddressedEnvelope:refCnt(), CountedCompleter:complete(Object), ConcurrentHashMapV8$ForEachTransformedValueTask:invoke(), ChannelHandlerContext:bind(SocketAddress-ChannelPromise), IpFilterRule:matches(InetSocketAddress), WrappedByteBuf:readBytes(byte[]), DefaultBinaryHeaders:setInt(AsciiString-int), DefaultHttpHeaders:addChar(Object-char), SSLContext:sessionHits(long), AbstractChannel$PausableChannelEventLoop:register(Channel-ChannelPromise), Bzip2Decoder$State:<init>(String-int), MixedAttribute:<init>(String-long), DefaultHttp2Connection$DefaultEndpoint:checkNewStreamAllowed(int), EpollMode[]:clone(), DeflateDecoder:appendFrameTail(WebSocketFrame), Deflater:init(int-int-int-JZlib$WrapperType), DefaultHeaders:setShort(Object-short), DomainSocketAddress:equals(Object), ReadOnlyByteBuf:setShort(int-int), Bzip2DivSufSort:ssPivot(int-int-int-int), ChannelHandler:channelUnregistered(ChannelHandlerContext), CompressorHttp2ConnectionEncoder:getTargetContentEncoding(AsciiString), DefaultHttp2RemoteFlowController$FlowState:writeBytes(int), ChannelHandlerInvokerUtil:invokeChannelActiveNow(ChannelHandlerContext), DefaultPromise:decWaiters(), LzfDecoder$State:valueOf(String), SpdyCodecUtil:validateHeaderName(CharSequence), SelectorProviderUDT:openRendezvousChannel(), EpollChannelConfig:setMaxMessagesPerRead(int), EmptyByteBuf:indexOf(int-int-byte), ProxyHandler:addCodec(ChannelHandlerContext), FullBinaryMemcacheRequest:setOpcode(byte), ReferenceMap:keySet(), DefaultChannelPipeline:write(Object), Channel$Unsafe:localAddress(), NioDatagramChannelConfig:getInterface(), Http2Error:<init>(String-int-long), DefaultEventLoopGroup:<init>(int-Executor), DnsType:compareTo(Object), DefaultChannelGroup:deregister(), AbstractScheduledEventExecutor:nextScheduledTaskNano(), NoOpTypeParameterMatcher:<init>(), MessageToMessageDecoder:handlerRemoved(ChannelHandlerContext), HttpContentEncoder:finishEncode(List), HttpHeaders:isEmpty(), ConcurrentHashMapV8$ForEachMappingTask:compute(), DefaultThreadFactory:newThread(Runnable-String), DefaultHttp2ConnectionEncoder:remoteSettings(Http2Settings), DefaultHttp2FrameWriter:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise), DefaultAttributeMap:<clinit>(), Http2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), CompositeByteBuf:clear(), Http2Settings:initialWindowSize(), DefaultMarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), SocketChannelUDT:bind(SocketAddress), AdvancedLeakAwareByteBuf:readBytes(GatheringByteChannel-int), DefaultFullHttpRequest:refCnt(), JdkBaseApplicationProtocolNegotiator$4:<init>(), DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:<init>(int-String), SslHandler:access$400(), ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), DefaultHttp2RemoteFlowController$FlowState:streamableBytesForTree(), ByteBuf:readUnsignedByte(), EmptyHttpHeaders:addObject(CharSequence-Iterable), WrappedByteBuf:retain(int), EmptyByteBuf:writeBytes(ByteBuffer), AbstractReferenceCountedByteBuf:getBytes(int-byte[]), DnsNameResolverContext:onResponseCNAME(DnsQuestion-DnsResponse-Map-boolean), EmptyHeaders:add(Object-Object), MqttMessageType:valueOf(String), DefaultChannelPromise:sync(), DefaultHttp2LocalFlowController$1:streamAdded(Http2Stream), EmbeddedEventLoop:register(Channel), UnsafeAtomicIntegerFieldUpdater:lazySet(Object-int), JdkZlibEncoder:ctx(), OpenSslX509Certificate:getIssuerDN(), SslContext:newClientContext(File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), Http2RemoteFlowController$FlowControlled:size(), WebSocketClientHandshaker08:uri(), ReplayingDecoderBuffer:terminate(), EmbeddedChannel:outboundMessages(), DefaultCookie:compareTo(Object), DefaultPromise$5:run(), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:setRefCnt(int), Bzip2BitWriter:writeUnary(ByteBuf-int), FileUpload:getFile(), AbstractOioMessageChannel:doRead(), SpdyProtocolException:<init>(Throwable), FullHttpRequest:release(), AbstractEpollChannel:access$000(AbstractEpollChannel), SwappedByteBuf:writeByte(int), BinaryMemcacheRequest:setOpcode(byte), PooledByteBuf:maxCapacity(), InternalThreadLocalMap:slowGet(), Socks5ServerEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ReplayingDecoderBuffer:setBytes(int-ScatteringByteChannel-int), NameResolver:isResolved(SocketAddress), DefaultSctpChannelConfig:setConnectTimeoutMillis(int), AbstractBootstrap:toString(), EpollSocketChannel:isOutputShutdown(), SpdyHttpDecoder:decode(ChannelHandlerContext-SpdyFrame-List), ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), HttpContentDecoder:handlerRemoved(ChannelHandlerContext), AbstractChannelHandlerContext:wrappedEventLoop(), FullHttpResponse:trailingHeaders(), DelegatingDecompressorFrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean), DefaultMemcacheContent:copy(), AttributeKey:newInstance(String), AbstractEventExecutor:submit(Runnable), HashedWheelTimer:access$600(), JZlibEncoder$3:run(), EmptyConvertibleHeaders:set(Headers), DefaultLastHttpContent:toString(), HttpPostStandardRequestDecoder:decodeAttribute(String-Charset), ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), DefaultSocks4CommandResponse:<init>(Socks4CommandStatus), HttpHeaders:setAll(TextHeaders), EmptyBinaryHeaders:setObject(Object-Iterable), ClassClassPath:<init>(Class), DefaultHttpHeaders:setObject(CharSequence-Iterable), ChunkedWriteHandler$4:operationComplete(Future), ConcurrentHashMapV8$ForEachEntryTask:compute(), OpenSslX509Certificate:getSerialNumber(), DnsResponseHeader:setOpcode(int), DiskFileUpload:content(), OpenSslX509Certificate:checkValidity(), DefaultProgressivePromise:removeListeners(GenericFutureListener[]), Socks4ServerDecoder:<init>(), DefaultHttp2Headers:method(), WrappedByteBuf:copy(), AdvancedLeakAwareByteBuf:getLong(int), HashedWheelTimer:access$900(HashedWheelTimer), UnsafeDirectSwappedByteBuf:_setShort(int-int), EmptyByteBuf:bytesBefore(int-byte), DatagramChannelConfig:getOption(ChannelOption), ChannelDuplexHandler:<init>(), AbstractEpollStreamChannel:shutdownOutput0(ChannelPromise), UnpooledDirectByteBuf:setBytes(int-ByteBuffer), ChunkedWriteHandler$PendingWrite:progress(long-long), MqttSubscribePayload:topicSubscriptions(), Http2ConnectionHandler:closeStream(Http2Stream-ChannelFuture), AdvancedLeakAwareByteBuf:writeInt(int), AsciiString:matches(String), ReplayingDecoderBuffer:readFloat(), EpollEventLoop:add(AbstractEpollChannel), EmptyTextHeaders:add(TextHeaders), WebSocket08FrameDecoder$State:values(), Socks5PasswordAuthResponseDecoder:actualReadableBytes(), WrappedByteBuf:readerIndex(), DefaultHttp2Headers:path(AsciiString), PooledHeapByteBuf:checkReadableBytes(int), EmptyTextHeaders:addDouble(CharSequence-double), Native:listen0(int-int), HttpServerUpgradeHandler$UpgradeEvent:retain(), DefaultTextHeaders:addInt(Object-int), SpdySession:getPendingWrite(int), NioUdtAcceptorChannel:localAddress0(), AdvancedLeakAwareByteBuf:readMedium(), Base64:<init>(), DefaultSpdyHeaders:add(CharSequence-CharSequence[]), DefaultSpdyHeadersFrame:appendHeaders(StringBuilder), WrappedByteBuf:readFloat(), Http2Headers:forEachEntry(Headers$EntryVisitor), ProxyHandler$1:operationComplete(Future), SwappedByteBuf:setBytes(int-InputStream-int), DefaultTextHeaders:access$601(DefaultTextHeaders-Object-Object[]), Marshaller:close(), DefaultStompContentSubframe:retain(int), ReadOnlyByteBufferBuf:arrayOffset(), ObjectDecoderInputStream:readUnsignedByte(), DefaultFullHttpRequest:copy(ByteBuf), DnsResponseDecoder:releaseDnsResources(List), LocalChannel$State:values(), EmbeddedChannel:readOutbound(), Socks5ServerEncoder:encodePasswordAuthResponse(Socks5PasswordAuthResponse-ByteBuf), NioUdtByteConnectorChannel:isActive(), PoolChunk:updateParentsFree(int), MqttUnsubscribeMessage:payload(), DefaultHttp2RemoteFlowController:writeChildren(Http2Stream-int), ForkJoinPool:checkFactory(ForkJoinPool$ForkJoinWorkerThreadFactory), AbstractOioChannel:config(), ConcurrentHashMapV8$ObjectByObjectToDouble:apply(Object-Object), MqttSubscribePayload:<init>(List), DefaultFileRegion:<init>(FileChannel-long-long), WebSocketFrameAggregator:isContentMessage(WebSocketFrame), ByteBuf:readBytes(byte[]-int-int), DefaultHttp2Connection:notifyParentChanging(Http2Stream-Http2Stream), SSLContext:setCipherSuite(long-String), DefaultEventLoop:updateLastExecutionTime(), NativeLibraryLoader:isWindows(), Http2ConnectionDecoder$Builder:build(), MqttEncoder$1:<clinit>(), FastThreadLocal:removeFromVariablesToRemove(InternalThreadLocalMap-FastThreadLocal), OpenSslX509Certificate:getSigAlgParams(), WrappedByteBuf:arrayOffset(), PooledDirectByteBuf:maxCapacity(int), PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache), ClientCookieEncoder:encode(Iterable), SystemPropertyUtil:log(String), MultithreadEventExecutorGroup:access$200(MultithreadEventExecutorGroup), JdkSslEngine:getSupportedCipherSuites(), PausableChannelEventExecutor:invokeAll(Collection-long-TimeUnit), AdvancedLeakAwareByteBuf:writeDouble(double), AbstractEventLoop:parent(), MixedAttribute:equals(Object), InboundHttp2ToHttpPriorityAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int), Channel:remoteAddress(), EpollDomainSocketChannel:<init>(FileDescriptor), JdkZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:getRawResult(), AdvancedLeakAwareByteBuf:bytesBefore(int-int-byte), SingleThreadEventExecutor:peekTask(), Bzip2DivSufSort:trPivot(int-int-int-int-int), StompCommand[]:clone(), AbstractChannel$AbstractUnsafe$2:<init>(AbstractChannel$AbstractUnsafe), WrappedByteBuf:bytesBefore(int-byte), SocksVersion:valueOf(byte), DefaultTextHeaders$MultipleFieldsValueComposer:setObject(CharSequence-Iterable), ThreadLocalPooledDirectByteBuf:newInstance(), ProxyHandler:authScheme(), Socks5PasswordAuthStatus:byteValue(), DnsNameResolver:doIsResolved(InetSocketAddress), Http2Stream:localSideOpen(), DefaultChannelGroup:write(Object-ChannelMatcher), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-String[]), EpollSocketChannel:doConnect(SocketAddress-SocketAddress), XmlFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), DefaultSpdyHeaders:setChar(CharSequence-char), EpollDatagramChannel:remoteAddress(), HttpHeadersEncoder:visit(Map$Entry), AbstractChannel$AbstractUnsafe:deregister(ChannelPromise), FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf), HttpObjectAggregator$AggregatedFullHttpRequest:retain(), Recycler$WeakOrderQueue$Link:access$1000(Recycler$WeakOrderQueue$Link), ByteBufAllocator:directBuffer(int-int), OioDatagramChannel:isActive(), FileUpload:setContentType(String), AsciiString:<init>(CharSequence-int-int), Socks4CommandType:toString(), PlatformDependent0:directBufferAddress(ByteBuffer), FullBinaryMemcacheResponse:setTotalBodyLength(int), InboundHttp2ToHttpPriorityAdapter:exportOutOfMessageFlowHeaders(int-HttpHeaders), DefaultSpdyHeaders:addLong(Object-long), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<init>(String-int), InternalThreadLocalMap:handlerSharableCache(), AbstractOioChannel:isActive(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:firstComplete(), DefaultChannelPipeline$HeadContext:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), MqttCodecUtil:<init>(), CommonsLogger:debug(String-Throwable), CompressionException:<init>(Throwable), SslHandler$3:<init>(SslHandler-Promise), AbstractEpollStreamChannel:isOutputShutdown0(), Encoder:getMaxHeaderTableSize(), MixedAttribute:refCnt(), WebSocketServerHandshakerFactory:<init>(String-String-boolean-int), DelimiterBasedFrameDecoder:fail(long), Http2Settings:maxFrameSize(), HttpPostRequestDecoder:getMultipartDataBoundary(String), EpollServerDomainSocketChannel:localAddress0(), SSLEngine:getNeedClientAuth(), Socks5CommandType:<clinit>(), ConcurrentHashMapV8$CounterCell:<init>(long), IdleStateHandler$1:operationComplete(Future), LzfDecoder:<init>(), Log:isDebugEnabled(), DefaultHttp2Headers:set(AsciiString-Iterable), SpdyStreamStatus:valueOf(int), VoidChannelPromise:syncUninterruptibly(), Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), AbstractEventExecutorGroup:scheduleAtFixedRate(Runnable-long-long-TimeUnit), EmptyBinaryHeaders:add(Object-Iterable), HttpPostMultipartRequestDecoder:<init>(HttpRequest), ConcurrentHashMapV8$SearchValuesTask:advance(), AbstractOioByteChannel:isOpen(), EpollSocketChannelConfig:getOptions(Map-ChannelOption[]), DefaultFullHttpRequest:uri(), DefaultChannelGroup:close(), ConcurrentHashMapV8:forEach(ConcurrentHashMapV8$BiAction), DefaultSocks4CommandRequest:dstAddr(), HAProxyMessageDecoder:<init>(), CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel), EventExecutor:children(), AbstractNioMessageChannel:config(), MqttConnectReturnCode:<init>(String-int-byte), MessageAggregator:decode(ChannelHandlerContext-Object-List), ByteBufInputStream:skip(long), PooledByteBuf:setIndex(int-int), ConcurrentHashMapV8$KeySetView:contains(Object), GlobalEventExecutor:peekScheduledTask(), CombinedIterator:hasNext(), EmptyConvertibleHeaders:addObject(Object-Object[]), ForkJoinTask$AdaptedRunnableAction:run(), FingerprintTrustManagerFactory:access$000(FingerprintTrustManagerFactory), Http2OutboundFrameLogger:close(), ChannelHandlerAppender:handlerAt(int), NioUdtByteAcceptorChannel:<clinit>(), ChannelPipeline:addLast(ChannelHandler[]), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean), EmptyHttp2Headers:set(Object-Object[]), PlatformDependent:directBufferAddress(ByteBuffer), ChannelHandlerInvoker:invokeDisconnect(ChannelHandlerContext-ChannelPromise), ConcurrentHashMapV8:comparableClassFor(Object), DefaultBinaryHeaders:addBoolean(AsciiString-boolean), AsciiString:compareTo(Object), ServerCookieEncoder:encode(Cookie[]), SimpleTrustManagerFactory:<init>(String), NioUdtByteConnectorChannel:selectionKey(), RxtxChannelOption:<clinit>(), SpdySession$PendingWrite:<init>(SpdyDataFrame-ChannelPromise), HttpClientCodec:access$200(HttpClientCodec), ForkJoinPool:execute(Runnable), PausableChannelEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), Epoll:<init>(), PoolChunk:depth(int), Http2Connection$Listener:streamActive(Http2Stream), ObjectEncoderOutputStream:size(), WebSocketUtil:randomNumber(int-int), ZlibWrapper[]:clone(), CompositeByteBuf:updateComponentOffsets(int), ProxyHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), HttpObjectDecoder:<init>(int-int-int-boolean-boolean), JcaX509v3CertificateBuilder:<init>(X500Name-BigInteger-Date-Date-X500Name-PublicKey), OpenSslEngine:getEnabledCipherSuites(), DefaultSctpServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSctpChannelConfig:getOptions(), OioSocketChannel:setReadPending(boolean), NioDatagramChannelConfig:setInterface(InetAddress), DefaultChannelGroupFuture:trySuccess(Object), InternalLogger:debug(String-Object[]), EmptyBinaryHeaders:setInt(AsciiString-int), ConcurrentHashMapV8$MapReduceEntriesTask:fork(), JdkBaseApplicationProtocolNegotiator$2:newSelector(SSLEngine-Set), SslHandler:setCloseNotifyTimeoutMillis(long), LocalAddress:<init>(String), UnsafeDirectSwappedByteBuf:setFloat(int-float), DefaultHeaders:setObject(Object-Object), Http2Settings:maxConcurrentStreams(long), InternalAttribute:getHttpDataType(), StompSubframeAggregator:<init>(int), AppendableCharSequence:expand(char[]-int-int), IdleStateHandler:channelRead(ChannelHandlerContext-Object), CorsConfig$Builder:access$800(CorsConfig$Builder), StringUtil:toHexString(byte[]-int-int), IovArray:count(), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:select(List), OioSctpChannel:localAddress0(), JdkLogger:trace(String-Throwable), EmptyHeaders:addInt(Object-int), EpollSocketChannelConfig:getOptions(), TextWebSocketFrame:<init>(String), DefaultHttp2RemoteFlowController:sendFlowControlled(ChannelHandlerContext-Http2Stream-Http2RemoteFlowController$FlowControlled), DefaultChannelId:compareAddresses(byte[]-byte[]), StringEncoder:<init>(), Native:connect(int-byte[]-int-int), SingleThreadEventExecutor:terminationFuture(), OioSctpServerChannel:setReadPending(boolean), Logger:getLogger(String), MqttDecoder:decodeSubscribePayload(ByteBuf-int), DnsType:name(), ByteBuf:indexOf(int-int-byte), ConcurrentHashMapV8$BaseIterator:remove(), DefaultFullHttpResponse:touch(), AbstractOioChannel:pipeline(), AbstractByteBuf:nioBuffers(), ReadOnlyByteBuf:_setMedium(int-int), DefaultChannelHandlerInvoker$13:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise), HttpObjectAggregator$1:operationComplete(Future), EmptyConvertibleHeaders:setAll(Headers), DefaultHttp2HeadersEncoder:<init>(), SimpleTrustManagerFactory:engineInit(KeyStore), DefaultFutureListeners:remove(GenericFutureListener), SpdySynStreamFrame:setLast(boolean), BinaryMemcacheClientCodec$Encoder:<init>(BinaryMemcacheClientCodec-BinaryMemcacheClientCodec$1), SwappedByteBuf:getBytes(int-byte[]), InsecureTrustManagerFactory$1:<init>(), ReadTimeoutException:<clinit>(), SwappedByteBuf:discardSomeReadBytes(), PlatformDependent:allocateMemory(long), FullHttpRequest:touch(), Http2Error:values(), MemoryFileUpload:getCharset(), Attribute:isInMemory(), InterfaceHttpData:getName(), WebSocket00FrameDecoder:decodeBinaryFrame(ChannelHandlerContext-byte-ByteBuf), Bzip2BlockCompressor:isFull(), ForkJoinTask:quietlyComplete(), DefaultHttp2Headers:setObject(AsciiString-Object[]), UnpooledUnsafeDirectByteBuf:freeDirect(ByteBuffer), ReadTimeoutHandler:destroy(), HttpContentDecoder:<clinit>(), OioSctpChannel:isActive(), Http2ConnectionHandler:connection(), CorsHandler:<clinit>(), JdkLogger:debug(String-Object), Logger:error(String-Throwable), CompositeByteBuf:_getInt(int), JdkAlpnSslEngine$2:unsupported(), DefaultAddressedEnvelope:retain(int), DefaultChannelPipeline:getContextOrDie(ChannelHandler), Http2FrameWriter:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise), ByteToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise), PoolThreadCache:allocate(PoolThreadCache$MemoryRegionCache-PooledByteBuf-int), DnsResponseDecoder:decodeResource(ByteBuf), ForkJoinPool:<init>(), AbstractBootstrap:channelFactory(), Bzip2BitReader:readBits(int), DnsResource:<init>(String-DnsType-DnsClass-long-ByteBuf), CompositeByteBuf:writerIndex(int), DefaultSocks4CommandResponse:dstPort(), CipherSuiteConverter:clearCache(), DefaultChannelPipeline$1:run(), CountedCompleter:propagateCompletion(), PlatformDependent0:getSystemClassLoader(), AbstractFuture:getNow(), AdvancedLeakAwareByteBuf:setBytes(int-byte[]), DefaultBinaryHeaders$1:<init>(), HAProxyProxiedProtocol:<clinit>(), WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), DefaultHttp2FrameReader:access$100(DefaultHttp2FrameReader), IovArrayThreadLocal:get(ChannelOutboundBuffer), AppendableCharSequence:subSequence(int-int), DefaultBinaryHeaders:addShort(Object-short), SSLEngine:beginHandshake(), DefaultChannelPipeline:writeAndFlush(Object-ChannelPromise), EpollEventArray:length(), ChannelHandlerAdapter:userEventTriggered(ChannelHandlerContext-Object), InternalLogger:warn(String), SimpleNameResolver:<init>(EventExecutor-Class), ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), DnsQuery:addAnswer(DnsResource), ProxyHandler$LazyChannelPromise:isSuccess(), AbstractEpollChannel:config(), KindUDT:values(), JdkSslEngine:getSSLParameters(), HttpStatusClass:defaultReasonPhrase(), MixedAttribute:release(int), ConcurrentHashMapV8:computeIfPresent(Object-ConcurrentHashMapV8$BiFun), Native:sendToAddresses(int-long-int-InetAddress-int), OpenSslServerSessionContext:setSessionCacheSize(int), DefaultSpdyDataFrame:isLast(), MixedFileUpload:refCnt(), DefaultHttp2FrameReader$HeadersBlockBuilder:close(), Http2ConnectionHandler:closeRemoteSide(Http2Stream-ChannelFuture), DnsResponseCode:hashCode(), CtClass:toBytecode(), DefaultHttp2ConnectionEncoder:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise), AbstractChannel$AbstractUnsafe$6$1:run(), DefaultThreadFactory:<init>(Class-boolean-int), FileUpload:setContent(File), ChunkedWriteHandler$2:operationComplete(ChannelFuture), ThreadDeathWatcher:access$200(), ReplayingDecoderBuffer:readLong(), PooledHeapByteBuf:memoryAddress(), BinaryMemcacheRequest:cas(), MessageToMessageEncoder:<init>(Class), SSLEngine:wrap(ByteBuffer-ByteBuffer), MemoryFileUpload:setContentTransferEncoding(String), DefaultBinaryMemcacheResponse:touch(), PooledHeapByteBuf:alloc(), DefaultHttp2Headers:add(Object-Object[]), EmptyHeaders:addObject(Object-Object), MqttMessageType[]:clone(), ClientCookieDecoder$CookieBuilder:parse7(String-int-String), RecyclableArrayList:toArray(Object[]), Bzip2BlockCompressor:<init>(Bzip2BitWriter-int), Recycler$1:<init>(Recycler), PlatformDependent0:getInt(Object-long), Snappy:calculateChecksum(ByteBuf), SimpleLeakAwareByteBuf:release(), DefaultHttpHeaders:setObject(Object-Iterable), HttpPostRequestEncoder$WrappedHttpRequest:headers(), CorsConfig$Builder:access$000(CorsConfig$Builder), HttpHeaders:set(CharSequence-CharSequence), BinaryMemcacheResponse:extrasLength(), WebSocket00FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-List), ReferenceCountUtil:safeRelease(Object), ApplicationProtocolUtil:toList(Iterable), ConcurrentHashMapV8:tryPresize(int), SwappedByteBuf:order(), ByteBuf:readBytes(ByteBuf-int), PingWebSocketFrame:touch(Object), SwappedByteBuf:writeBytes(ByteBuf-int), PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:newExtensionEncoder(), BinaryMemcacheResponseDecoder:buildInvalidMessage(), ByteBufAllocator:ioBuffer(), AbstractEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:maxHeaderTableSize(), UnpooledDirectByteBuf:writerIndex(int), AbstractChannelHandlerContext:newPromise(), SSLContext:getClientSessionContext(), HttpPostRequestDecoder:getBodyHttpDatas(), IpSubnetFilterRule:<init>(String-int-IpFilterRuleType), HashedWheelTimer$Worker:waitForNextTick(), PongWebSocketFrame:content(), OpenSslSessionStats:acceptGood(), DefaultBinaryHeaders:add(Object-Iterable), EpollDatagramChannelConfig:setTimeToLive(int), EncryptedPrivateKeyInfo:<init>(byte[]), AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel-AbstractNioMessageChannel$1), AppendableCharSequence:charAt(int), Bootstrap:localAddress(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService), DefaultStompHeaders:set(CharSequence-CharSequence), MqttEncoder:doEncode(ByteBufAllocator-MqttMessage), NotSslRecordException:<init>(String-Throwable), UnpooledHeapByteBuf:setMedium(int-int), AbstractByteBufAllocator:heapBuffer(int-int), DefaultHeaders:setDouble(Object-double), SSLEngine:getEnabledProtocols(), WrappedByteBuf:setBytes(int-byte[]), SslHandler:close(ChannelPromise), PoolArena:isTinyOrSmall(int), SSLEngineResult$Status:ordinal(), Unpooled:copiedBuffer(byte[][]), DefaultTextHeaders$1:generateHashCode(CharSequence), Http2ConnectionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), DefaultHttp2FrameReader:verifyPriorityFrame(), WrappedByteBuf:setByte(int-int), EpollSocketChannelConfig:<init>(EpollSocketChannel), WebSocketExtensionUtil:extractExtensions(String), AsciiString:<init>(byte[]-int-int), DefaultHttp2RemoteFlowController:initialWindowSize(int), ConcurrentHashMapV8$CollectionView:toString(), SSLContext:free(long), AbstractReferenceCountedByteBuf:markWriterIndex(), EpollSocketChannelConfig:setTcpKeepIntvl(int), IntObjectHashMap:removeAt(int), HttpData:getChunk(int), AbstractBinaryMemcacheMessage:release(), MqttMessage:<init>(MqttFixedHeader-Object-Object), ChannelHandlerInvokerUtil:invokeFlushNow(ChannelHandlerContext), SwappedByteBuf:writeBytes(byte[]), ReplayingDecoderBuffer:setBytes(int-InputStream-int), HttpMessageUtil:appendFullResponse(StringBuilder-FullHttpResponse), StompSubframeEncoder:<init>(), ChunkedFile:<init>(RandomAccessFile-long-long-int), EmptyHeaders:names(), EpollServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), QueryStringDecoder:addParam(Map-String-String), DefaultHttp2FrameWriter:verifyPadding(int), DnsResponseHeader:id(), HttpObjectAggregator$AggregatedFullHttpRequest:copy(boolean-ByteBuf), DefaultChannelPipeline:last(), AbstractChannelHandlerContext:flush(), UnpooledUnsafeDirectByteBuf:newSwappedByteBuf(), EmptyHttp2Headers:method(), IdleStateHandler:channelInactive(ChannelHandlerContext), DefaultChannelGroup:close(ChannelMatcher), AttributeKey:<clinit>(), InternalLogger:debug(String), SpdySessionHandler:updateInitialSendWindowSize(int), MessageFormatter:floatArrayAppend(StringBuffer-float[]), AdvancedLeakAwareByteBuf:slice(int-int), SpdyHeaderBlockRawDecoder$State:valueOf(String), DefaultThreadFactory$DefaultRunnableDecorator:run(), AbstractByteBuf:getInt(int), MessageAggregator:channelInactive(ChannelHandlerContext), AbstractByteBuf:toString(), DefaultHttp2FrameReader:access$202(DefaultHttp2FrameReader-DefaultHttp2FrameReader$HeadersContinuation), DefaultSpdyDataFrame:retain(), EpollEventArray:memoryAddress(), OpenSslEngine$1:<init>(OpenSslEngine), ConcurrentHashMapV8$MapReduceValuesTask:fork(), EpollSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), RxtxChannelConfig$Databits:<init>(String-int-int), HttpContentCompressor:<init>(int-int-int), AbstractNioChannel:access$000(AbstractNioChannel), DnsResponseHeader:setRecursionAvailable(boolean), DefaultDatagramChannelConfig:setActiveOnOpen(boolean), AbstractByteBuf:setZero(int-int), DefaultSpdyHeaders:setObject(CharSequence-Iterable), DefaultHttp2Connection$DefaultEndpoint:access$100(DefaultHttp2Connection$DefaultEndpoint), Cleaner0:<init>(), DefaultSpdyHeaders:setShort(CharSequence-short), AbstractOioByteChannel:available(), SSLSessionBindingEvent:<init>(SSLSession-String), Headers$ValueConverter:convertTimeMillis(long), EpollDatagramChannel:leaveGroup(InetAddress-ChannelPromise), DefaultHeaders:set(Object-Object), DefaultByteBufHolder:toString(), HttpPostStandardRequestDecoder:offer(HttpContent), Http2Flags:endOfStream(), SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:engineGetTrustManagers(), Snappy$State:values(), UnpooledHeapByteBuf:getBytes(int-OutputStream-int), EmptyHttpHeaders:addShort(CharSequence-short), Socks5PasswordAuthStatus:<init>(int-String), AbstractTrafficShapingHandler:handlerRemoved(ChannelHandlerContext), MessageToMessageCodec:encode(ChannelHandlerContext-Object-List), ByteBuf:writeBytes(ByteBuf-int), DefaultHeaders:addShort(Object-short), AbstractEpollChannel:newDirectBuffer0(Object-ByteBuf-ByteBufAllocator-int), Slf4JLogger:isTraceEnabled(), NetUtil:isValidIpV4Address(String), DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:newExtensionEncoder(), TypeParameterMatcher$ReflectiveMatcher:<init>(Class), ByteToMessageCodec$1:decode(ChannelHandlerContext-ByteBuf-List), DefaultHttp2Headers:addChar(Object-char), HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage), TrafficCounter:readTimeToWait(long-long-long-long), FileUpload:copy(), DefaultHttpObject:setDecoderResult(DecoderResult), HAProxyProxiedProtocol[]:clone(), EmptyByteBuf:readBytes(ByteBuf), DefaultFullHttpResponse:trailingHeaders(), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), SpdyFrameCodec:readSynStreamFrame(int-int-byte-boolean-boolean), EpollEventLoopGroup:<init>(int), DefaultTextHeaders:access$1201(DefaultTextHeaders-Object-Object), DefaultCookie:ports(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), TrustManagerFactory:init(KeyStore), EmptyByteBuf:compareTo(Object), PerMessageDeflateDecoder:acceptInboundMessage(Object), StompHeaders:forEachEntry(Headers$EntryVisitor), MqttDecoder$DecoderState[]:clone(), Delimiters:nulDelimiter(), DefaultUdtServerChannelConfig:getOption(ChannelOption), ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue), EmptyHttp2Headers:setTimeMillis(Object-long), SSLContext:sessionTimeouts(long), GlobalChannelTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise), WebSocketServerProtocolHandler:<clinit>(), NioUdtMessageAcceptorChannel:<clinit>(), Http2SecurityUtil:<clinit>(), OioSocketChannel:checkInputShutdown(), SctpMessageToMessageDecoder:<init>(), KindUDT:ordinal(), AbstractByteBuf:readBytes(byte[]-int-int), HttpContentEncoder:cleanup(), SelfSignedCertificate:newSelfSignedCertificate(String-PrivateKey-X509Certificate), HAProxyMessageDecoder:findVersion(ByteBuf), MixedAttribute:compareTo(InterfaceHttpData), EpollSocketChannel:localAddress(), JdkZlibEncoder:close(), OioSocketChannel:isActive(), AbstractEpollServerChannel:newUnsafe(), AbstractByteBuf:toString(Charset), ChannelOutboundBuffer:<init>(AbstractChannel), AsciiString:parseLong(int-int-int), ConcurrentHashMapV8$MapReduceEntriesToIntTask:compute(), BinaryMemcacheResponse:setOpcode(byte), MixedAttribute:setMaxSize(long), OioSctpChannel:access$100(OioSctpChannel-boolean), HttpContentDecoder:fetchDecoderOutput(List), ByteBuf:setInt(int-int), UnpooledUnsafeDirectByteBuf:capacity(), CompositeByteBuf:setBytes(int-ByteBuf), DnsQuestion:dnsClass(), ZlibUtil:convertWrapperType(ZlibWrapper), AbstractChannel:eventLoop(), Signal:id(), ReadOnlyByteBufferBuf:nioBuffers(int-int), CompositeByteBuf:nioBuffers(), MqttConnectMessage:<init>(MqttFixedHeader-MqttConnectVariableHeader-MqttConnectPayload), SslHandler:channelInactive(ChannelHandlerContext), FingerprintTrustManagerFactory$1:initialValue(), WriteTimeoutHandler:<init>(int), RxtxChannelConfig$Stopbits:<clinit>(), DefaultFullBinaryMemcacheRequest:touch(), SpdyFrameDecoder:<init>(SpdyVersion-SpdyFrameDecoderDelegate-int), DefaultOioSocketChannelConfig:autoReadCleared(), EmbeddedChannel:finish(), AbstractEventExecutor:parent(), AdvancedLeakAwareByteBuf:writeByte(int), HAProxyConstants:<init>(), Base64:encode(ByteBuf-boolean), DefaultHttp2ConnectionDecoder:<init>(DefaultHttp2ConnectionDecoder$Builder), EpollEventLoop:cleanupAndTerminate(boolean), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<init>(Recycler$Handle), BinaryMemcacheServerCodec:add(ChannelHandler), NioSocketChannel:shutdownOutput(ChannelPromise), ForkJoinPool$EmptyTask:setRawResult(Void), DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int), HttpServerUpgradeHandler$UpgradeEvent:release(), EpollMode:ordinal(), FastThreadLocalThread:<init>(String), EmptyByteBuf:setBoolean(int-boolean), DuplicatedByteBuf:setBytes(int-InputStream-int), ChannelHandlerInvokerUtil:invokeDeregisterNow(ChannelHandlerContext-ChannelPromise), DuplicatedByteBuf:_getUnsignedMedium(int), DefaultConvertibleHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-ConvertibleHeaders$TypeConverter), DnsResource:timeToLive(), EmptyByteBuf:setBytes(int-ByteBuf), AdvancedLeakAwareByteBuf:toString(int-int-Charset), LastStompContentSubframe$1:touch(Object), DefaultHttp2FrameReader$State:<clinit>(), ClassLoaderClassResolver:<init>(ClassLoader), LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress), EmptyTextHeaders:setInt(CharSequence-int), EpollEventLoop:confirmShutdown(), Recycler$Stack:newHandle(), NioSctpChannel:newDirectBuffer(ReferenceCounted-ByteBuf), EpollDatagramChannel:checkResolvable(InetSocketAddress), Recycler$DefaultHandle:access$102(Recycler$DefaultHandle-Object), RtspResponseDecoder:<clinit>(), LoggingHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), DefaultStompHeaders:setFloat(CharSequence-float), DefaultTextHeaders:addShort(Object-short), NioEventLoop:cancel(SelectionKey), OioSocketChannel:<clinit>(), FileUpload:retain(int), DefaultLastStompContentSubframe:retain(), HttpObjectAggregator:hasContentLength(HttpMessage), AbstractReferenceCounted:release(), ByteBuf:readerIndex(), DefaultHttp2Headers:addBoolean(AsciiString-boolean), OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-OpenSslApplicationProtocolNegotiator-long-long), LocalChannel$LocalUnsafe:<init>(LocalChannel-LocalChannel$1), OioSctpChannel:doWrite(ChannelOutboundBuffer), Http2FrameListenerDecorator:onSettingsAckRead(ChannelHandlerContext), ChannelPipeline:fireExceptionCaught(Throwable), ForkJoinWorkerThread:start(), MqttCodecUtil:isValidMessageId(int), UnpooledUnsafeDirectByteBuf:_getLong(int), DefaultConvertibleHeaders:getAndConvert(Object-Object), SSLHandshakeException:<init>(String), AbstractByteBuf:nioBuffers(int-int), AbstractScheduledEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), RxtxChannel:doInit(), MpscLinkedQueue:size(), Future:getNow(), CorsConfig$Builder:exposeHeaders(String[]), SpdySession$StreamState:getSendWindowSize(), SSLPeerUnverifiedException:<init>(String), JdkNpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[]), Bzip2Decoder$State:<clinit>(), WriteTimeoutHandler$1:<init>(WriteTimeoutHandler-ChannelPromise-ChannelHandlerContext), EmbeddedEventLoop:invokeUserEventTriggered(ChannelHandlerContext-Object), HttpPostMultipartRequestDecoder:readDelimiterStandard(String), WebSocketHandshakeException:<init>(String-Throwable), OpenSslEngine$1:getValueNames(), OpenSslEngine:access$100(OpenSslEngine), Native:socketDgramFd(), Socks5CommandRequestDecoder:<init>(Socks5AddressDecoder), SingleThreadEventExecutor:addShutdownHook(Runnable), WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), EmptyBinaryHeaders:addByte(Object-byte), NioDatagramChannel:remoteAddress0(), WebSocketServerHandshaker07:newWebSocketEncoder(), DefaultStompHeaders:add(Object-Object), DefaultProgressivePromise:setSuccess(Object), DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int), SlicedByteBuf:order(), ResourceLeakDetector:<init>(Class), LzmaFrameEncoder:<init>(int-int-int-int), DefaultUdtServerChannelConfig:setProtocolReceiveBufferSize(int), DefaultSpdySettingsFrame:appendSettings(StringBuilder), UnsafeDirectSwappedByteBuf:<init>(AbstractByteBuf), AbstractChannelHandlerContext:alloc(), ScheduledFutureTask:setFailureInternal(Throwable), Http2Flags:equals(Object), ConcurrentHashMapV8$ReduceKeysTask:compute(), AbstractChannelHandlerContext:toHintString(), WrappedByteBuf:forEachByte(ByteBufProcessor), WebSocketServerHandshaker13:newHandshakeResponse(FullHttpRequest-HttpHeaders), ThreadPerChannelEventLoopGroup:next(), OioServerSocketChannel:setReadPending(boolean), HttpContentEncoder$State:valueOf(String), Socks5InitialRequestDecoder$State:<clinit>(), DefaultSocks5InitialRequest:authMethods(), StringEncoder:<init>(Charset), X509CertInfo:set(String-Object), AbstractOioChannel$DefaultOioUnsafe:ensureOpen(ChannelPromise), BlockingOperationException:<init>(String), ReplayingDecoderBuffer:arrayOffset(), Native:<clinit>(), OioSctpServerChannel:newPromise(), ForkJoinPool:shutdownNow(), ByteBuf:writeBytes(InputStream-int), RxtxChannel$RxtxUnsafe:safeSetFailure(ChannelPromise-Throwable), SpdySession$StreamState:isLocalSideClosed(), AdvancedLeakAwareByteBuf:readBytes(ByteBuffer), SslHandler$LazyChannelPromise:trySuccess(Object), OpenSslContext:newEngine(ByteBufAllocator), DefaultUdtChannelConfig:setSystemReceiveBufferSize(int), AsciiString:copy(int-byte[]-int-int), ConcurrentHashMapV8$MapReduceEntriesTask:addToPendingCount(int), FingerprintTrustManagerFactory:<init>(Iterable), SpdyHttpDecoder:createHttpRequest(int-SpdyHeadersFrame), ReadOnlyByteBufferBuf:getShort(int), JZlibEncoder$2:operationComplete(Future), SingleThreadEventExecutor:reject(), DefaultHttp2HeadersDecoder$1:<init>(DefaultHttp2HeadersDecoder-Http2Headers), DefaultChannelHandlerInvoker$WriteTask:access$000(ChannelHandlerContext-Object-int-ChannelPromise), InternalLogger:isDebugEnabled(), LzfDecoder:decode(ChannelHandlerContext-ByteBuf-List), Http2Headers$PseudoHeaderName:value(), CompleteFuture:await(), FixedCompositeByteBuf:array(), DefaultPromise:awaitUninterruptibly(), Log4JLogger:debug(String-Throwable), AbstractTrafficShapingHandler:read(ChannelHandlerContext), IdentityCipherSuiteFilter:filterCipherSuites(Iterable-List-Set), ForkJoinPool:pollSubmission(), WebSocketServerExtensionHandler$1:<init>(WebSocketServerExtensionHandler-ChannelHandlerContext), Native:writevAddresses0(int-long-int), ConcurrentHashMapV8$MapReduceEntriesToLongTask:addToPendingCount(int), AsciiString:copy(int-ByteBuf-int-int), DefaultOioServerSocketChannelConfig:setReuseAddress(boolean), PooledDirectByteBuf:_setMedium(int-int), AbstractNioChannel$NioUnsafe:close(ChannelPromise), SSLContext:sessionCbHits(long), UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean), Http2FrameWriter:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise), RecyclableArrayList:ensureCapacity(int), Http2LifecycleManager:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise), Socks5ProxyHandler:sendConnectCommand(ChannelHandlerContext), HttpClientCodec:access$400(HttpClientCodec), EmptyBinaryHeaders:setDouble(AsciiString-double), DefaultHeaders:entries(), SslContext:newServerContext(SslProvider-File-File), AbstractChannel$PausableChannelEventLoop:acceptNewTasks(), ConcurrentHashMapV8$Fun:apply(Object), Http2EventAdapter:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), DelimiterBasedFrameDecoder:isLineBased(ByteBuf[]), DefaultTextHeaders:add(Object-Object[]), NetUtil:createByteArrayFromIpAddressString(String), EpollServerDomainSocketChannel:fd(), DefaultNameResolver:doResolve(SocketAddress-Promise), OpenSslDefaultApplicationProtocolNegotiator:<init>(), WrappedByteBuf:setBoolean(int-boolean), DefaultBinaryHeaders$2:convertToLong(AsciiString), ByteBufAllocator:heapBuffer(int), JdkZlibEncoder$2:operationComplete(Future), ObjectDecoderInputStream:readUTF(), WebSocketServerProtocolHandler:<init>(String-String-boolean-int-boolean), AdvancedLeakAwareByteBuf:retain(int), VoidChannelPromise:sync(), ZlibUtil$1:<clinit>(), SctpChannel:send(ByteBuffer-MessageInfo), DefaultConvertibleHeaders:add(Headers), MessageFormatter:byteArrayAppend(StringBuffer-byte[]), EpollEventLoopGroup:<init>(int-Executor), WebSocketServerProtocolHandler:<init>(String-String), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), DelegatingDecompressorFrameListener$Http2Decompressor:incrementProcessedBytes(int), WrappedByteBuf:writeInt(int), SystemPropertyUtil:getLong(String-long), UnpooledUnsafeDirectByteBuf:_getShort(int), UniqueIpFilter$1:operationComplete(Future), DnsMessage:release(int), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), InboundHttp2ToHttpPriorityAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean), DefaultHttpHeaders:addFloat(CharSequence-float), PendingWriteQueue$PendingWrite:recycle(), DefaultChannelPipeline:addFirst(EventExecutorGroup-ChannelHandler[]), ChannelInitializer:initChannel(Channel), DefaultTextHeaders:setTimeMillis(Object-long), ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachValueTask:propagateCompletion(), IpSubnetFilterRule:selectFilterRule(InetAddress-int-IpFilterRuleType), DefaultFullHttpResponse:retain(int), AbstractByteBuf:memoryAddress(), PendingWriteQueue$PendingWrite:<init>(Recycler$Handle-PendingWriteQueue$1), ClassPool:getAndRename(String-String), LoggingHandler:channelUnregistered(ChannelHandlerContext), HttpUtil:toHttpResponse(int-Http2Headers-boolean), AbstractBootstrap$1:operationComplete(Future), DefaultAddressedEnvelope:<init>(Object-SocketAddress-SocketAddress), AbstractEpollChannel:doClose(), DefaultSocketChannelConfig:setTcpNoDelay(boolean), EmptyByteBuf:readBytes(OutputStream-int), EmptyByteBuf:getBytes(int-ByteBuffer), FullHttpMessage:protocolVersion(), LocalChannel$State:ordinal(), ChunkedFile:isEndOfInput(), PoolChunk:toString(), Http2OrHttpChooser$SelectedProtocol:<init>(String-int-String), DefaultHttp2ConnectionEncoder$Builder:frameWriter(Http2FrameWriter), RxtxDeviceAddress:<init>(String), WebSocketVersion:<init>(String-int), Log4JLogger:warn(String-Throwable), ByteBuf:forEachByte(ByteBufProcessor), HttpObjectAggregator$AggregatedFullHttpResponse:<init>(HttpResponse-ByteBuf-HttpHeaders), DefaultStompFrame:refCnt(), IntObjectHashMap:probeNext(int), ChannelId:asLongText(), DefaultHttp2RemoteFlowController$FlowState:incrementStreamWindow(int), DefaultBinaryHeaders$2:convertToBoolean(Object), ConcurrentHashMapV8:newKeySet(), SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1), WebSocketFrameAggregator:isAggregated(WebSocketFrame), RecvByteBufAllocator$Handle:guess(), UnpooledHeapByteBuf:_setShort(int-int), Http2Settings:<init>(int), ReplayingDecoderBuffer:readInt(), DefaultChannelPipeline:fireChannelWritabilityChanged(), IovArrayThreadLocal$1:<init>(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:setRefCnt(int), ForkJoinTask$RunnableExecuteAction:exec(), Snappy:hash(ByteBuf-int-int), Bzip2MTFAndRLE2StageEncoder:encode(), Http2OrHttpChooser:getProtocol(SSLEngine), Headers$ValueConverter:convertBoolean(boolean), ServerBootstrap:handler(), DefaultBinaryHeaders:setShort(AsciiString-short), MqttDecoder$1:<clinit>(), AbstractTrafficShapingHandler:<clinit>(), EventLoop:newSucceededFuture(Object), SpdySessionHandler:updateSendWindowSize(ChannelHandlerContext-int-int), CompositeByteBuf:setBytes(int-ByteBuffer), VoidChannelPromise:addListeners(GenericFutureListener[]), NioEventLoop:scheduleExecution(), ReferenceMap:clear(), LengthFieldBasedFrameDecoder:fail(long), PlatformDependent:newConcurrentHashMap(Map), MessageAggregator$1:operationComplete(ChannelFuture), AbstractDiskHttpData:delete(), ApplicationProtocolConfig:selectedListenerFailureBehavior(), DnsNameResolverContext:gotPreferredAddress(), PausableChannelEventExecutor:invokeChannelReadComplete(ChannelHandlerContext), HttpDataFactory:createAttribute(HttpRequest-String-String), ResourceLeakDetector:getLevel(), IntObjectMap$Entry:key(), ChannelMatchers$ClassMatcher:matches(Channel), WrappedByteBuf:writeBytes(ByteBuf-int-int), SelectorProviderUDT:openServerSocketChannel(), SSLContext:setCertificate(long-String-String-String-int), RxtxChannelConfig$Databits:<clinit>(), UnsafeDirectSwappedByteBuf:<clinit>(), DefaultDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), AbstractByteBuf:readShort(), DefaultSctpChannelConfig:setAllocator(ByteBufAllocator), RxtxChannel:config(), ByteBuf:writerIndex(int), CountedCompleter:tryComplete(), HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean), EmptyTextHeaders:setTimeMillis(CharSequence-long), FullBinaryMemcacheRequest:setOpaque(int), OpenSslClientContext:<init>(File-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long), DefaultCookie:setComment(String), LocalServerChannel:remoteAddress(), Crc32:getCRC(), OpenSslContext:stats(), DefaultHeaders:containsChar(Object-char), Log:trace(Object), DefaultHttp2ConnectionEncoder$FlowControlledData:size(), Native:errnoECONNRESET(), ReferenceCountUtil:releaseLater(Object-int), BinaryMemcacheObjectAggregator:beginAggregation(BinaryMemcacheMessage-ByteBuf), OioDatagramChannel:localAddress0(), HttpContentCompressor:beginEncode(HttpResponse-CharSequence), AttributeKey$1:newConstant(int-String), ForkJoinTask:setCompletion(int), Bzip2BitReader:readBoolean(), HttpHeaderUtil:setContentLength(HttpMessage-long), SingleThreadEventExecutor:delayNanos(long), PoolSubpage:<clinit>(), RtspRequestDecoder:<init>(), HttpPostRequestDecoder$EndOfDataDecoderException:<init>(), OioSocketChannel:parent(), AbstractBootstrap$2:<init>(ChannelFuture-Channel-SocketAddress-ChannelPromise), DefaultHttp2ConnectionEncoder$FlowControlledHeaders:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-Http2Headers-int-short-boolean-int-boolean-ChannelPromise-DefaultHttp2ConnectionEncoder$1), SnappyFrameEncoder:<init>(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:firstComplete(), AdvancedLeakAwareByteBuf:getBytes(int-ByteBuf-int-int), WebSocketServerExtensionHandshaker:handshakeExtension(WebSocketExtensionData), NioEventLoop:<clinit>(), DefaultChannelConfig:setWriteBufferHighWaterMark(int), X500Name:<init>(String), DefaultHttp2Connection:removeStream(DefaultHttp2Connection$DefaultStream), FastThreadLocalThread:<init>(ThreadGroup-Runnable-String-long), JdkDefaultApplicationProtocolNegotiator:protocolSelectorFactory(), SingleThreadEventExecutor:fetchFromScheduledTaskQueue(), StringUtil:simpleClassName(Class), NetUtil:intToIpAddress(int), AbstractByteBufAllocator$1:<clinit>(), BinaryMemcacheResponse:opaque(), HttpObjectDecoder$HeaderParser:process(byte), Socks5ProxyHandler:socksAuthMethod(), JdkSslEngine:setUseClientMode(boolean), SpdySessionHandler$3:<init>(SpdySessionHandler-ChannelHandlerContext), Recycler$WeakOrderQueue$Link:access$1100(Recycler$WeakOrderQueue$Link), DefaultTextHeaders:access$301(DefaultTextHeaders-Object-Object[]), Http2CodecUtil:writeUnsignedInt(long-ByteBuf), DefaultFullHttpResponse:release(), ByteBuf:readBytes(ByteBuf), PausableChannelEventExecutor:invokeChannelActive(ChannelHandlerContext), IdleStateHandler:destroy(), IntObjectHashMap:access$600(Object), ChannelPromise:setFailure(Throwable), ObjectEncoderOutputStream:write(byte[]), GlobalTrafficShapingHandler:handlerRemoved(ChannelHandlerContext), DnsNameResolver$DnsCacheEntry:release(), EmptyHeaders:setShort(Object-short), ReplayingDecoderBuffer:checkIndex(int-int), UnpooledDirectByteBuf:setIndex(int-int), ByteBufUtil:hexDump(ByteBuf), DefaultFullBinaryMemcacheRequest:refCnt(), DefaultChannelHandlerInvoker:invokeChannelRegistered(ChannelHandlerContext), Http2ConnectionHandler$1:operationComplete(Future), ServerCookieDecoder:decode(String), AbstractChannel:<clinit>(), ObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf), ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ByteBufUtil:lastIndexOf(ByteBuf-int-int-byte), NioDatagramChannel:checkJavaVersion(), WrappedByteBuf:nioBuffers(int-int), DefaultHttp2Connection:removeListener(Http2Connection$Listener), HttpRequest:setMethod(HttpMethod), ConcurrentHashMapV8$MapReduceKeysToLongTask:fork(), HttpObjectAggregator:isAggregated(HttpObject), MultithreadEventExecutorGroup:<init>(int-Executor-Object[]), ReplayingDecoderBuffer:getBytes(int-byte[]), ReadOnlyByteBuf:getBytes(int-ByteBuf-int-int), ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int), XmlFrameDecoder:fail(long), EmbeddedChannel:inboundMessages(), PooledUnsafeDirectByteBuf:_setLong(int-long), Channel$Unsafe:closeForcibly(), HttpObjectAggregator:contentLength(Object), DefaultHeaders:get(Object-Object), TrafficCounter:writeTimeToWait(long-long-long), FixedRecvByteBufAllocator:<init>(int), Http2ConnectionHandler:<init>(Http2Connection-Http2FrameListener), SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-HttpMessage-List), Http2FrameLogger$Direction:valueOf(String), DiskAttribute:get(), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:<init>(), DnsMessage:retain(List-int), DefaultStompHeaders:set(TextHeaders), ChunkedWriteHandler$3:operationComplete(ChannelFuture), JdkAlpnApplicationProtocolNegotiator:<init>(Iterable), EpollDomainSocketChannel:doConnect(SocketAddress-SocketAddress), EmptyByteBuf:setIndex(int-int), ResourceLeakDetector$Level:<init>(String-int), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ServerBootstrap:group(), Parser:parseFrom(byte[]-int-int), DefaultHeaders:add0(Headers), OpenSslSessionContext:getSession(byte[]), AbstractChannel$CloseFuture:setSuccess(), DefaultSocketChannelConfig:validate(ChannelOption-Object), DiskAttribute:touch(), JdkSslEngine:closeInbound(), CompactObjectInputStream:readStreamHeader(), Http2Settings:maxConcurrentStreams(), DefaultTextHeaders$MultipleFieldsValueComposer:addObject(CharSequence-Object[]), ForkJoinPool:acquirePlock(), AdvancedLeakAwareByteBuf:writeBytes(ByteBuffer), OpenSslClientContext:<clinit>(), AbstractEventExecutorGroup:<init>(), DefaultHttp2Connection:activateInternal(DefaultHttp2Connection$DefaultStream), DefaultHttp2Headers:get(Object), SpdyVersion:valueOf(String), HAProxyCommand:values(), DefaultBinaryHeaders:add(AsciiString-AsciiString), ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long), HttpHeaders:remove(Object), JdkSslClientContext:<init>(), HttpClientCodec:<init>(int-int-int-boolean-boolean), DefaultChannelPipeline:connect(SocketAddress), AbstractEpollServerChannel:<init>(int), AbstractChannel:close(ChannelPromise), AbstractMemoryHttpData:setContent(File), MqttMessageFactory:<init>(), Bzip2DivSufSort:trGetC(int-int-int-int), Socks4ServerDecoder:checkpoint(Object), SslHandler:channelActive(ChannelHandlerContext), GlobalTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext), ChannelHandlerAdapter:close(ChannelHandlerContext-ChannelPromise), AbstractChannel:<init>(Channel), EpollDatagramChannelConfig:setAutoRead(boolean), AbstractEpollChannel:doRegister(), DefaultPromise$LateListeners:add(Object), SwappedByteBuf:unwrap(), CompatibleObjectEncoder:newObjectOutputStream(OutputStream), AbstractChannelHandlerContext:close(ChannelPromise), SpdyHeadersFrame:headers(), ChannelFuture:isSuccess(), DefaultTextHeaders$ValuesComposer:setObject(CharSequence-Object[]), ReplayingDecoderBuffer:readBytes(ByteBuffer), MixedFileUpload:addContent(ByteBuf-boolean), Socks5CommandType:byteValue(), NioDatagramChannel:<init>(SelectorProvider), ThreadPerChannelEventLoopGroup:<init>(int), ChannelOutboundBuffer$3:run(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToChar(CharSequence), AbstractChannel:remoteAddress(), NioDatagramChannel:filterOutboundMessage(Object), HashedWheelTimer:access$400(HashedWheelTimer), AbstractChannel:<init>(Channel-ChannelId), UnpooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int), ConcurrentHashMapV8:newKeySet(int), IdleStateHandler:access$102(IdleStateHandler-boolean), HttpToHttp2ConnectionHandler:encoder(), DefaultHttp2FrameReader$State:ordinal(), AsciiString:<init>(CharSequence), MessageAggregator:maxContentLength(), ForkJoinPool:invoke(ForkJoinTask), UnpooledHeapByteBuf:writerIndex(int), AdvancedLeakAwareByteBuf:ensureWritable(int-boolean), Http2CodecUtil:<init>(), DelegatingDecompressorFrameListener$Http2Decompressor:incrementDecompressedByes(int), RxtxChannelConfig$Stopbits:valueOf(String), WebSocketClientHandshaker:setActualSubprotocol(String), MixedFileUpload:<init>(String-String-String-String-Charset-long-long), ServerSocketChannelUDT:accept(), WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ImmediateExecutor:<init>(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:invoke(), ReadOnlyIterator:hasNext(), HttpClientCodec:upgradeFrom(ChannelHandlerContext), EpollServerSocketChannelConfig:setWriteBufferLowWaterMark(int), RxtxChannel:doClose(), LzfDecoder$State:ordinal(), AsciiString:parseInt(int-int), ScheduledFutureTask:setSuccessInternal(Object), SSL:getCipherForSSL(long), DefaultHttp2Headers:setByte(Object-byte), FileUpload:get(), ServerCookieEncoder:encode(Cookie), DnsServerAddresses$1:iterator(), AbstractOioByteChannel:voidPromise(), DefaultStompHeaders:addObject(CharSequence-Iterable), DefaultHttpDataFactory:<init>(), WrappedByteBuf:bytesBefore(byte), ByteBuf:writeChar(int), DefaultHttp2ConnectionDecoder$Builder:access$400(DefaultHttp2ConnectionDecoder$Builder), LimitingByteInput:available(), DefaultHttp2LocalFlowController:windowUpdateRatio(Http2Stream), HttpMessageUtil:appendRequest(StringBuilder-HttpRequest), AbstractTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), EmptyHttpHeaders:addDouble(CharSequence-double), DnsResponseCode:code(), AbstractByteBuf:readBytes(int), DefaultThreadFactory:<init>(String-boolean), JcaX509CertificateConverter:<init>(), DefaultSpdyDataFrame:release(), AbstractChannelHandlerContext:write(Object), Http2HeadersEncoder:configuration(), DefaultHttp2ConnectionDecoder$FrameReadListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean), DnsMessage:release(List-int), AbstractEventLoopGroup:next(), EmptyHeaders:addLong(Object-long), Http2CodecUtil:toByteBuf(ChannelHandlerContext-Throwable), DefaultConvertibleHeaders:setShort(Object-short), DefaultHeaders:addLong(Object-long), Bzip2HuffmanAllocator:allocateNodeLengths(int[]), MixedAttribute:<init>(String-String-long-Charset), FileUpload:isCompleted(), CaseIgnoringComparator:compare(Object-Object), EmbeddedEventLoop:invokeChannelInactive(ChannelHandlerContext), HashedWheelTimer$HashedWheelTimeout$1:<init>(HashedWheelTimer$HashedWheelTimeout), UnpooledDirectByteBuf:_getLong(int), EmptyTextHeaders:addLong(CharSequence-long), EmptyByteBuf:alloc(), QueryStringEncoder$Param:<init>(String-String), OioDatagramChannel:leaveGroup(InetAddress), HttpHeaderDateFormat:format(Date), SSLContext:sessionNumber(long), StringUtil:toHexStringPadded(Appendable-byte[]), JdkSslContext:sessionCacheSize(), PooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean), AbstractBinaryMemcacheDecoder:<init>(), HttpClientCodec$Decoder:decrement(Object), WebSocketServerExtensionHandler$1:operationComplete(ChannelFuture), AdaptiveRecvByteBufAllocator:newHandle(), AdvancedLeakAwareByteBuf:readBytes(ByteBuf-int), Http2Flags:setFlag(boolean-short), ChannelHandlerContext:read(), NioDatagramChannelConfig:setLoopbackModeDisabled(boolean), GlobalChannelTrafficShapingHandler$1:size(), ReplayingDecoderBuffer:setLong(int-long), SpdyHeaderBlockRawEncoder:setLengthField(ByteBuf-int-int), SslHandler:renegotiate(), OpenSslClientContext$1:<init>(OpenSslClientContext-X509TrustManager), ObjectDecoderInputStream:readLine(), DefaultHttp2Connection$ConnectionStream:close(), ConstantPool:valueOf(Class-String), DefaultHttp2ConnectionDecoder:access$1002(DefaultHttp2ConnectionDecoder-boolean), DefaultHttp2Connection$DefaultEndpoint:addStream(DefaultHttp2Connection$DefaultStream), EmptyHeaders:add(Headers), LocalServerChannel$1:<init>(LocalServerChannel), WebSocketClientHandshaker:newHandshakeRequest(), AbstractInternalLogger:info(String-Object-Object), SslHandler:decode(ChannelHandlerContext-ByteBuf-List), DefaultChannelGroup:flush(), PooledByteBuf:init(PoolChunk-long-int-int-int), DelegatingDecompressorFrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), WrappedByteBuf:writeBytes(ByteBuf-int), CompositeByteBuf:setFloat(int-float), X509CertImpl:<init>(X509CertInfo), WrappedByteBuf:forEachByte(int-int-ByteBufProcessor), RtspObjectDecoder:<init>(), AbstractChannelHandlerContext$PausableChannelEventExecutor0:<init>(AbstractChannelHandlerContext), AbstractReferenceCountedByteBuf:setInt(int-int), EmptyTextHeaders:add(CharSequence-Iterable), ByteBufAllocator:heapBuffer(), Socks5ServerEncoder:<init>(Socks5AddressEncoder), DnsNameResolver$1:<init>(DnsNameResolver), MessageAggregator:contentLength(Object), AdvancedLeakAwareByteBuf:setDouble(int-double), Native:recvFd0(int), NioSocketChannel$2:run(), DefaultChannelId:writeLong(int-long), Unpooled:copiedBuffer(byte[]-int-int), AbstractNioChannel:doDeregister(), EmptyHttpHeaders:setObject(Object-Object[]), DefaultChannelPipeline$HeadContext:exceptionCaught(ChannelHandlerContext-Throwable), NioSctpChannel:config(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:valueOf(String), CodedInputStream:readRawVarint32(), ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), AbstractReferenceCountedByteBuf:writeByte(int), WebSocketClientHandshaker:processHandshake(Channel-HttpResponse-ChannelPromise), CompatibleMarshallingDecoder:checkpoint(), Socks4ServerDecoder:state(), DefaultChannelGroupFuture:removeListener(GenericFutureListener), MpscLinkedQueueNode:<init>(), DefaultHttp2ConnectionEncoder$FlowControlledData:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean-ChannelPromise-DefaultHttp2ConnectionEncoder$1), BinaryMemcacheResponse:setOpaque(int), SpdySession$StreamComparator:compare(Object-Object), GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:<init>(GlobalChannelTrafficShapingHandler-TrafficCounter), UnpooledByteBufAllocator:toLeakAwareBuffer(ByteBuf), ConcurrentHashMapV8$ForEachTransformedMappingTask:invoke(), HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion), CompositeByteBuf:resetReaderIndex(), WrappedByteBuf:getInt(int), SwappedByteBuf:readBytes(byte[]), OioByteStreamChannel:<init>(Channel), Http2Stream:close(), OpenSslEngine:access$700(OpenSslEngine-String), QueryStringDecoder:<init>(String-Charset-boolean-int), EmptyByteBuf:setBytes(int-ByteBuf-int), Socks5AuthMethod:byteValue(), WebSocketServerExtensionHandler$1:operationComplete(Future), SslHandler:setHandshakeTimeout(long-TimeUnit), Socks4ClientDecoder$State:ordinal(), SslHandler:getEncryptedPacketLength(ByteBuf-int), ByteBuf:release(), SerialPort:setDTR(boolean), ResourceLeakDetector:access$410(ResourceLeakDetector), JdkLogger:debug(String), AbstractRemoteAddressFilter:channelActive(ChannelHandlerContext), DefaultChannelPipeline:addBefore(EventExecutorGroup-String-String-ChannelHandler), MessageFormatter:doubleArrayAppend(StringBuffer-double[]), Unpooled:<clinit>(), LoggingHandler:deregister(ChannelHandlerContext-ChannelPromise), WebSocketServerProtocolHandler$ServerHandshakeStateEvent[]:clone(), AbstractNioChannel$AbstractNioUnsafe:fulfillConnectPromise(ChannelPromise-boolean), EpollDatagramChannelConfig:getSendBufferSize(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:addToPendingCount(int), DefaultSpdyHeaders:add(CharSequence-Iterable), DefaultHeaders:index(int), CommonsLogger:warn(String-Object-Object), CountedCompleter:exec(), FileUpload:duplicate(), Http2FrameWriter:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise), ConcurrentHashMapV8:reduceKeysToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), EmbeddedEventLoop:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise), SslHandler:setCloseNotifyTimeout(long-TimeUnit), AbstractReferenceCountedByteBuf:writeInt(int), ForkJoinPool:awaitQuiescence(long-TimeUnit), OpenJdkSelfSignedCertGenerator:generate(String-KeyPair-SecureRandom), EmptyByteBuf:readChar(), AdvancedLeakAwareByteBuf:readBytes(byte[]-int-int), DefaultHttp2LocalFlowController:access$100(DefaultHttp2LocalFlowController-Http2Stream), DefaultSocketChannelConfig:setSendBufferSize(int), SpdyHeaderBlockJZlibEncoder:<init>(SpdyVersion-int-int-int), Unmarshaller:start(ByteInput), Http2ConnectionHandler:dispose(), OioByteStreamChannel:doClose(), DefaultHttp2HeadersEncoder:access$300(DefaultHttp2HeadersEncoder), MqttEncoder:encodeUnsubscribeMessage(ByteBufAllocator-MqttUnsubscribeMessage), JdkNpnSslEngine:isAvailable(), PlatformDependent:javaVersion0(), Bzip2MTFAndRLE2StageEncoder:mtfAlphabetSize(), AbstractEventExecutorGroup:schedule(Callable-long-TimeUnit), AbstractNioByteChannel$NioByteUnsafe:read(), PausableChannelEventExecutor:schedule(Runnable-long-TimeUnit), DnsResponse:addAdditionalResource(DnsResource), DefaultChannelHandlerInvoker$8:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), DefaultSocks4CommandResponse:toString(), PerMessageDeflateDecoder:decode(ChannelHandlerContext-WebSocketFrame-List), DefaultHttpRequest:hashCode(), EmptyHttpHeaders:setBoolean(Object-boolean), DefaultHttp2HeadersEncoder:<init>(int-Set), AbstractNioChannel:access$102(AbstractNioChannel-SocketAddress), TrafficCounter:currentWrittenBytes(), ConcurrentHashMapV8$1:<init>(), Lz4FrameDecoder:<init>(LZ4Factory-boolean), ForkJoinPool$ForkJoinWorkerThreadFactory:newThread(ForkJoinPool), X509TrustManager:checkClientTrusted(X509Certificate[]-String), EventExecutor:invokeAny(Collection-long-TimeUnit), DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter), DefaultConvertibleHeaders:entries(), DefaultHttp2ConnectionEncoder:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), SslHandler:disconnect(ChannelHandlerContext-ChannelPromise), AbstractConstant:compareTo(AbstractConstant), IllegalReferenceCountException:<init>(int), ReadOnlyByteBufferBuf:setBytes(int-ByteBuf-int-int), Bzip2BlockCompressor:writeRun(int-int), SpdyFrameCodec$1:<init>(SpdyFrameCodec), EmptyHttpHeaders:addFloat(Object-float), DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter-boolean), DefaultSocks5PasswordAuthResponse:<init>(Socks5PasswordAuthStatus), ConcurrentHashMapV8$SearchKeysTask:advance(), DefaultSpdyHeaders:setByte(Object-byte), AbstractEpollStreamChannel:eventLoop(), QueryStringDecoder:<init>(String-boolean), Http2OrHttpChooser$SelectedProtocol:<clinit>(), ByteBufUtil$ThreadLocalDirectByteBuf:newInstance(), DefaultBinaryHeaders$2:convertToTimeMillis(AsciiString), SpdyHeaders:remove(Object), MqttQoS:<init>(String-int-int), CountedCompleter:<init>(CountedCompleter), StringUtil:byteToHexStringPadded(int), GlobalTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise-GlobalTrafficShapingHandler$1), AdvancedLeakAwareByteBuf:getBytes(int-ByteBuf), DnsQueryContext:<init>(DnsNameResolver-Iterable-DnsQuestion-Promise), NioSctpServerChannel$2:run(), PoolThreadCache:createNormalCaches(int-int-PoolArena), WrappedByteBuf:getBytes(int-OutputStream-int), EmbeddedEventLoop:cancelScheduledTasks(), FullHttpRequest:touch(Object), EpollServerSocketChannelConfig:setMaxMessagesPerRead(int), IntObjectMap:keys(), DefaultUdtChannelConfig:setAllocator(ByteBufAllocator), DefaultDatagramChannelConfig:setBroadcast(boolean), SwappedByteBuf:touch(), ThreadDeathWatcher$Entry:value(), MixedAttribute:setCharset(Charset), Native:sendFd0(int-int), Utf8FrameValidator:<init>(), LineBasedFrameDecoder:<init>(int-boolean-boolean), RecyclableArrayList:newInstance(), ForkJoinTask:internalPropagateException(Throwable), ReferenceCountUtil$ReleasingTask:run(), CompactObjectOutputStream:writeByte(int), AbstractNioChannel$AbstractNioUnsafe:annotateConnectException(Throwable-SocketAddress), PooledByteBuf:deallocate(), LZ4Factory:fastestInstance(), WebSocketServerHandshaker07:newWebsocketDecoder(), SingleThreadEventExecutor:runShutdownHooks(), FormattingTuple:trimmedCopy(Object[]), OpenSslX509Certificate:verify(PublicKey), OioSctpChannel:remoteAddress0(), DnsNameResolver:access$100(), FixedCompositeByteBuf:checkDstIndex(int-int-int-int), ThreadPerChannelEventLoop:<init>(ThreadPerChannelEventLoopGroup), CompositeByteBuf:resetWriterIndex(), SSLSession:getPacketBufferSize(), ByteBuf:writeByte(int), AbstractChannel:doBeginRead(), IntObjectHashMap:indexOf(int), DelegatingDecompressorFrameListener$Http2Decompressor:consumeProcessedBytes(int), AbstractByteBuf:skipBytes(int), ChannelPipeline:get(Class), DefaultFileRegion:deallocate(), PendingWrite:successAndRecycle(), Http2ConnectionHandler:decoder(), PooledUnsafeDirectByteBuf:arrayOffset(), HttpPostRequestEncoder$WrappedFullHttpRequest:refCnt(), DefaultHttp2LocalFlowController:connectionState(), ForkJoinTask$RunnableExecuteAction:<init>(Runnable), ByteBufInputStream:readLine(), AbstractTrafficShapingHandler:informReadOperation(ChannelHandlerContext-long), PausableChannelEventExecutor:newFailedFuture(Throwable), ChannelFuture:isCancelled(), AbstractHttpData:retain(int), ConnectTimeoutException:<init>(), InboundHttp2ToHttpAdapter:<clinit>(), AdvancedLeakAwareByteBuf:writeMedium(int), PoolThreadCache$MemoryRegionCache:allocate(PooledByteBuf-int), ByteToMessageDecoder:<clinit>(), UnreleasableByteBuf:slice(int-int), SerialPort:setRTS(boolean), ForkJoinTask:helpExpungeStaleExceptions(), ChannelMatchers:isInstanceOf(Class), SingleThreadEventExecutor:cancelScheduledTasks(), AbstractEpollChannel:newUnsafe(), Unpooled:copiedBuffer(CharBuffer-Charset), Http2FrameLogger:logPing(Http2FrameLogger$Direction-ByteBuf), DefaultHttp2FrameReader:verifyPingFrame(), DefaultBinaryHeaders:setByte(Object-byte), Socks5AddressType:compareTo(Object), DefaultHeaders:add(Object-Iterable), ChannelOutboundBuffer$Entry:<clinit>(), SingleThreadEventExecutor:takeTask(), EmptyHttpHeaders:setObject(Object-Object), Unsafe:park(boolean-long), DefaultSpdySynReplyFrame:isLast(), MqttPubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader), RecyclableArrayList:add(int-Object), PoolChunk:newSubpageArray(int), WebSocketServerHandshaker08:newWebsocketDecoder(), HttpPostMultipartRequestDecoder:next(), SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:<init>(), HAProxyCommand:valueOf(byte), WebSocketExtensionUtil:appendExtension(String-String-Map), ChannelHandlerAppender:<init>(boolean), PausableChannelEventExecutor:invokeUserEventTriggered(ChannelHandlerContext-Object), AbstractEpollStreamChannel$EpollStreamUnsafe:handleReadException(ChannelPipeline-ByteBuf-Throwable-boolean), AbstractChannelHandlerContext:newFailedFuture(Throwable), EmptyHttp2Headers:addDouble(AsciiString-double), IntObjectMap:values(Class), ServerBootstrap:group(EventLoopGroup), DefaultChannelPromise:removeListeners(GenericFutureListener[]), FastLzFrameDecoder$State[]:clone(), ConcurrentHashMapV8$ForEachTransformedValueTask:addToPendingCount(int), SslHandler:access$100(SslHandler), EpollChannelConfig:getOption(ChannelOption), WrappedByteBuf:nioBuffer(int-int), DefaultHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise), NioDatagramChannelConfig:autoReadCleared(), DefaultHttp2Connection:access$800(DefaultHttp2Connection), DnsServerAddresses:shuffled(Iterable), AbstractChannelHandlerContext:fireChannelRead(Object), AbstractByteBuf:capacity(int), StompSubframeAggregator:contentLength(StompHeadersSubframe), Socks4ServerDecoder:decode(ChannelHandlerContext-ByteBuf-List), HttpServerUpgradeHandler$UpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpRequest-FullHttpResponse), Unsafe:getUnsafe(), JZlibEncoder:access$000(JZlibEncoder), ByteBuf:writeLong(long), ConcurrentHashMapV8:<clinit>(), AbstractInternalLogger:isErrorEnabled(), WebSocketServerProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List), ServerBootstrap$ServerBootstrapAcceptor:access$100(Channel-Throwable), DefaultAddressedEnvelope:touch(Object), IntObjectHashMap:growSize(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), DefaultChannelGroupFuture:setSuccess(Void), SwappedByteBuf:setFloat(int-float), PerMessageDeflateDecoder:<init>(boolean), DefaultHttp2LocalFlowController:windowSize(Http2Stream), AbstractChannel$AbstractUnsafe:register0(ChannelPromise), PemReader:safeClose(OutputStream), MpscLinkedQueueTailRef:getAndSetTailRef(MpscLinkedQueueNode), DefaultHttp2Connection:numActiveStreams(), SslHandler:allocateOutNetBuf(ChannelHandlerContext-int), JdkLogger:isTraceEnabled(), EpollDomainSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), PooledHeapByteBuf:array(), FullHttpRequest:copy(ByteBuf), LzfDecoder$1:<clinit>(), UnpooledDirectByteBuf:getBytes(int-OutputStream-int-boolean), HttpPostStandardRequestDecoder:skipControlCharactersStandard(), Bootstrap:remoteAddress(InetAddress-int), OpenSslX509Certificate:getSignature(), Log:warn(Object-Throwable), DiskFileUpload:setFilename(String), EpollDomainSocketChannelConfig:getOptions(), CorsConfig$ConstantValueGenerator:<init>(Object-CorsConfig$1), MqttConnectVariableHeader:hasPassword(), XmlFrameDecoder:<init>(int), OpenSslEngine$1:principal(Certificate[]), TrafficCounter$TrafficMonitoringTask:run(), SctpServerChannel:bindAddress(InetAddress), DefaultTextHeaders:access$801(DefaultTextHeaders-Object-Iterable), DnsNameResolver:hostname(InetSocketAddress), EpollEventLoop:modify(AbstractEpollChannel), EmptyHttp2Headers:setInt(AsciiString-int), PendingWriteQueue:removeAndFail(Throwable), LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int-boolean), EmbeddedChannel:newUnsafe(), AbstractByteBufAllocator:compositeBuffer(), LastStompContentSubframe$1:duplicate(), Native:getSendBufferSize(int), HAProxyMessageDecoder:<init>(int), Bzip2DivSufSort:trCopy(int-int-int-int-int-int-int), BinaryWebSocketFrame:copy(), MqttVersion:protocolNameBytes(), DomainSocketReadMode:<init>(String-int), FullHttpResponse:retain(), HashedWheelTimer$Worker:run(), ForkJoinTask:getPool(), Http2Settings:maxHeaderListSize(), Decoder:setMaxHeaderTableSize(int), EpollDomainSocketChannelConfig:getOptions(Map-ChannelOption[]), OioSctpChannel:openChannel(), EmptyHttpHeaders:addShort(Object-short), AbstractByteBufAllocator:toString(), Http2Settings:maxFrameSize(int), WebSocketFrame:toString(), Http2ConnectionHandler:frameWriter(), DefaultStompHeaders:add(Object-Object[]), JdkSslContext:newEngine(ByteBufAllocator), ReplayingDecoderBuffer:setCumulation(ByteBuf), DefaultTextHeaders:access$201(DefaultTextHeaders-Object-Object), BinaryMemcacheRequestDecoder:<init>(int), ThreadLocalRandom:nextBytes(byte[]), OioDatagramChannel:remoteAddress(), DefaultHttp2RemoteFlowController$FlowState:window(int), DnsHeader:questionCount(), IpFilterRule:ruleType(), EpollEventLoopGroup:<init>(int-ExecutorServiceFactory-int), ConcurrentHashMapV8$ReduceValuesTask:fork(), SwappedByteBuf:writeBytes(InputStream-int), DnsQueryContext:question(), MixedFileUpload:release(int), EmptyHttpHeaders:addInt(CharSequence-int), DefaultHttpHeaders:<init>(boolean-DefaultHeaders$NameConverter-boolean), HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse), EmbeddedChannel:remoteAddress0(), OpenSslServerContext$1:verify(long-byte[][]-String), AbstractOioMessageChannel:unsafe(), SingleThreadEventExecutor$PurgeTask:run(), MessageToByteEncoder:acceptOutboundMessage(Object), JdkZlibDecoder$GzipState:<init>(String-int), EpollEventLoop:closeAll(), ConstantPool:newInstance(String), DefaultBinaryHeaders$1:generateHashCode(Object), DefaultSpdyHeaders:add(Object-Object[]), AbstractMemoryHttpData:setCompleted(), Socks5AddressType:<init>(int-String), PrimitiveCollections$UnmodifiableIntObjectMap$EntryImpl:key(), HashedWheelTimer$HashedWheelTimeout:<init>(HashedWheelTimer-TimerTask-long), EmptyByteBuf:checkLength(int), SslContext:newEngine(ByteBufAllocator), DefaultChannelGroup:clear(), PooledDirectByteBuf:getBytes(int-OutputStream-int), SlicedByteBuf:setBytes(int-byte[]-int-int), AbstractEpollStreamChannel$EpollStreamUnsafe:<clinit>(), FixedCompositeByteBuf:setBytes(int-ByteBuffer), HttpChunkedInput:readChunk(ChannelHandlerContext), MessageToMessageCodec:<init>(), Socks4ClientDecoder$1:<clinit>(), DnsNameResolverGroup:<init>(Class-InetSocketAddress-Iterable), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:addToPendingCount(int), HttpClientUpgradeHandler$UpgradeEvent[]:clone(), Bzip2DivSufSort:ssMerge(int-int-int-int-int[]-int-int-int), DeflateEncoder:encode(ChannelHandlerContext-Object-List), DefaultHeaders:getInt(Object-int), EmptyHttpHeaders:set(CharSequence-CharSequence[]), Encoder:code(InputStream-OutputStream-long-long-ICodeProgress), HttpClientCodec:encoder(), Channel:id(), Http2OutboundFrameLogger:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise), AbstractByteBuf:bytesBefore(int-int-byte), SpdyFrameEncoder:<init>(SpdyVersion), WebSocketServerCompressionHandler:<init>(), CachingClassResolver:resolve(String), NioUdtProvider:newAcceptorChannelUDT(TypeUDT), DefaultChannelProgressivePromise:setSuccess(Object), JdkLogger:isDebugEnabled(), InboundHttp2ToHttpAdapter:<init>(InboundHttp2ToHttpAdapter$Builder), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]), SpdySessionStatus:statusPhrase(), Signal:valueOf(Class-String), ForkJoinPool:<clinit>(), DefaultHttpHeaders$HttpHeadersNameConverter:validateName(CharSequence), StompSubframeAggregator:isAggregated(StompSubframe), ConcurrentHashMapV8$ReduceValuesTask:addToPendingCount(int), WebSocketClientHandshakerFactory:<init>(), HttpObjectAggregator$AggregatedFullHttpRequest:touch(), FileUpload:getContentType(), SctpServerChannel:getOption(SctpSocketOption), PausableChannelEventExecutor:children(), PooledByteBuf:<init>(Recycler$Handle-int), DefaultServerSocketChannelConfig:setWriteBufferHighWaterMark(int), DnsServerAddresses$3:<init>(InetSocketAddress), SwappedByteBuf:setChar(int-int), ChannelFuture:isDone(), DeflateDecoder:cleanup(), Native:epollin(), MqttPublishMessage:release(int), DefaultChannelPipeline:filterName(String-ChannelHandler), ResourceLeakDetector:reportLeak(ResourceLeakDetector$Level), AdvancedLeakAwareByteBuf:readBytes(int), PooledHeapByteBuf:_getUnsignedMedium(int), DuplicatedByteBuf:setBytes(int-ScatteringByteChannel-int), NioEventLoopGroup:<init>(int-ExecutorServiceFactory-SelectorProvider), HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-String), PendingWriteQueue$PendingWrite:newInstance(Object-int-ChannelPromise), DefaultSpdyRstStreamFrame:setStatus(SpdyStreamStatus), DefaultPromise:notifyListener0(Future-GenericFutureListener), HttpObjectAggregator$AggregatedFullHttpRequest:copy(), PoolArena:isTiny(int), LocalAddress:compareTo(LocalAddress), AsciiString:arrayOffset(), Socks5CommandResponseDecoder:<init>(Socks5AddressDecoder), EpollDomainSocketChannel:<init>(Channel-FileDescriptor), DnsHeader:<init>(DnsMessage), AbstractEventExecutorGroup:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), IpSubnetFilterRule:<init>(InetAddress-int-IpFilterRuleType), GlobalTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise), OioSctpServerChannel$OioSctpServerChannelConfig:<init>(OioSctpServerChannel-OioSctpServerChannel-SctpServerChannel), PendingWriteQueue:assertEmpty(), AsciiString:equalsIgnoreCase(CharSequence), NioEventLoopGroup:newChild(Executor-Object[]), HttpVersion:hashCode(), DefaultChannelId:toString(), ReadOnlyByteBufferBuf:alloc(), DefaultChannelHandlerInvoker$5:run(), Http2CodecUtil$SimpleChannelPromiseAggregator:allowNotificationEvent(), BinaryMemcacheRequestEncoder:encodeHeader(ByteBuf-BinaryMemcacheRequest), EmptyTextHeaders:addShort(Object-short), BinaryMemcacheRequest:setExtrasLength(byte), SpdyGoAwayFrame:status(), EmptyByteBuf:readBytes(byte[]-int-int), DelegatingDecompressorFrameListener$Http2Decompressor:<init>(EmbeddedChannel), WebSocketFrame:<init>(ByteBuf), CompositeByteBuf:setLong(int-long), LastHttpContent:trailingHeaders(), SocketChannelUDT:socketUDT(), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor), JdkApplicationProtocolNegotiator:protocolSelectorFactory(), DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf-ByteBuf), EpollDatagramChannel:localAddress(), SctpServerChannel:open(), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:newObject(Recycler$Handle), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), DefaultFullHttpResponse:release(int), DefaultHttp2Headers:addShort(Object-short), MemoryFileUpload:compareTo(Object), AbstractBootstrap:doBind(SocketAddress), CompositeByteBuf:writeBoolean(boolean), MqttUnsubscribePayload:topics(), BinaryMemcacheOpcodes:<init>(), EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel-EmbeddedChannel$1), DefaultNameResolver:doResolve(InetSocketAddress-Promise), EpollDatagramChannel:isActive(), SpdyFrameDecoder:hasFlag(byte-byte), Snappy:validateChecksum(int-ByteBuf), DefaultAddressedEnvelope:content(), HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), InternalThreadLocalMap:stringBuilder(), DnsServerAddresses$RotationalAddresses:<clinit>(), DefaultSctpChannelConfig:setWriteBufferHighWaterMark(int), EmptyByteBuf:memoryAddress(), SpdySession$PendingWrite:fail(Throwable), JdkSslSession:putValue(String-Object), SingleThreadEventExecutor:wakeup(boolean), ZlibWrapper:values(), EpollServerChannelConfig:setBacklog(int), ByteBuf:getByte(int), AbstractInternalLogger:trace(String-Object-Object), DefaultUdtServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), MessageToMessageCodec$1:encode(ChannelHandlerContext-Object-List), HttpObjectEncoder:encode(ChannelHandlerContext-Object-List), DefaultUdtServerChannelConfig:setAutoRead(boolean), NioUdtAcceptorChannel:doDisconnect(), DefaultOioSocketChannelConfig:<init>(OioSocketChannel-Socket), PlatformDependent0:putLong(long-long), ConcurrentHashMapV8$ForEachTransformedKeyTask:compute(), DefaultBinaryMemcacheRequest:retain(int), InternalLoggerFactory:<init>(), OioByteStreamChannel:doReadBytes(ByteBuf), MessageToByteEncoder:<init>(Class), DefaultDatagramChannelConfig:isReuseAddress(), HttpObjectDecoder:invalidMessage(Exception), PrematureChannelClosureException:<init>(Throwable), DefaultBinaryHeaders:addInt(AsciiString-int), MemoryAttribute:compareTo(Attribute), ConcurrentHashMapV8$MapReduceValuesTask:addToPendingCount(int), DefaultProgressivePromise:isDone(), FixedCompositeByteBuf:buffer(int), DefaultSocks5CommandResponse:status(), ConcurrentHashMapV8$ReduceKeysTask:addToPendingCount(int), SSL:pendingReadableBytesInSSL(long), SwappedByteBuf:getChar(int), BinaryMemcacheClientCodec$Decoder:channelInactive(ChannelHandlerContext), PooledHeapByteBuf:internalNioBuffer(), DefaultHttp2FrameReader$2:headersBlockBuilder(), DefaultChannelConfig:setAutoRead(boolean), ConcurrentHashMapV8$MapReduceValuesToLongTask:invoke(), DuplicatedByteBuf:_getInt(int), DefaultTextHeaders$SingleHeaderValuesComposer$2:escape(Object), SpdySession:putPendingWrite(int-SpdySession$PendingWrite), MqttVersion:fromProtocolNameAndLevel(String-byte), SSLSessionBindingListener:valueBound(SSLSessionBindingEvent), WrappedByteBuf:readableBytes(), DuplicatedByteBuf:setMedium(int-int), Socks4ServerDecoder:actualReadableBytes(), MqttDecoder:decode(ChannelHandlerContext-ByteBuf-List), InsecureTrustManagerFactory:<init>(), HttpHeaderUtil:encodeAscii0(CharSequence-ByteBuf), DefaultUdtChannelConfig:getProtocolSendBufferSize(), NioUdtByteConnectorChannel:<init>(SocketChannelUDT), IntObjectMap:remove(int), MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser:<init>(MultithreadEventExecutorGroup), ConcurrentHashMapV8$ForEachValueTask:fork(), Signal$SignalConstant:name(), CodecException:<init>(String), StompSubframeDecoder:readLine(ByteBuf-int), AbstractDiskHttpData:tempFile(), ThreadLocalMarshallerProvider:getMarshaller(ChannelHandlerContext), AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int-int), TrafficCounter:currentReadBytes(), NioUdtProvider:newChannel(), ChannelHandlerContext:channel(), HttpObjectDecoder:readHeaders(ByteBuf), OpenSslX509Certificate:getNotAfter(), EmbeddedEventLoop:invokeChannelReadComplete(ChannelHandlerContext), ByteBuf:ensureWritable(int), HAProxyMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List), CorsConfig$Builder:access$500(CorsConfig$Builder), ByteBufUtil:<clinit>(), DefaultHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), DefaultSocks5CommandResponse:bndAddrType(), BinaryMemcacheRequest:opaque(), DefaultThreadFactory:<init>(String), ThreadPerChannelEventLoop:access$002(ThreadPerChannelEventLoop-Channel), ConcurrentHashMapV8$TreeBin:<clinit>(), HttpContentEncoder$State:<clinit>(), PooledHeapByteBuf:idx(int), DefaultPromise:isCancelled0(Object), AbstractTrafficShapingHandler:handlerAdded(ChannelHandlerContext), AbstractChannel$AbstractUnsafe:closeExecutor(), EpollChannelConfig:<init>(AbstractEpollChannel), PausableChannelEventExecutor:isShutdown(), DefaultHttp2Connection$DefaultProperyMap:remove(Object), DefaultPromise:<init>(EventExecutor), DefaultHttp2Connection:deactivate(Http2Stream), DuplicatedByteBuf:capacity(), PlatformDependent:getObjectVolatile(Object-long), StompSubframeEncoder:encode(ChannelHandlerContext-StompSubframe-List), DefaultDatagramChannelConfig:<clinit>(), ThreadLocalRandom$1:<init>(String), CompositeByteBuf:removeComponent(int), TrafficCounter$TrafficMonitoringTask:<init>(AbstractTrafficShapingHandler-TrafficCounter), Http2CodecUtil$SimpleChannelPromiseAggregator:trySuccess(Object), EmptyConvertibleHeaders:setTimeMillis(Object-long), SpdyStreamStatus:statusPhrase(), AbstractChannel$CloseFuture:addListener(GenericFutureListener), VoidChannelPromise:access$000(VoidChannelPromise-Throwable), WebSocketServerHandshaker07:newHandshakeResponse(FullHttpRequest-HttpHeaders), Socks4ProxyHandler:handleResponse(ChannelHandlerContext-Object), DefaultChannelGroup:flush(ChannelMatcher), AbstractNioByteChannel$NioByteUnsafe:close(ChannelPromise), OpenSslServerContext:<init>(File-File-String-Iterable-ApplicationProtocolConfig-long-long), LocalAddress:hashCode(), ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), DatagramPacket:retain(int), MessageAggregator$1:<init>(MessageAggregator-ChannelHandlerContext), JdkLogger:trace(String-Object[]), Bzip2HuffmanStageEncoder:generateHuffmanOptimisationSeeds(), PerMessageDeflateDecoder:appendFrameTail(WebSocketFrame), AbstractByteBuf:writeBytes(ByteBuf), RtspObjectEncoder:<init>(), PooledByteBufAllocator:<init>(boolean-int-int-int-int), ChannelHandlerInvokerUtil:invokeChannelInactiveNow(ChannelHandlerContext), DefaultPromise$2:run(), BinaryWebSocketFrame:retain(int), DefaultHttp2Connection$DefaultStream:parent(), DefaultLastMemcacheContent:touch(Object), ChannelId:asShortText(), DefaultHttpHeaders:access$000(), AbstractBootstrap:validate(), SingleThreadEventExecutor:execute(Runnable), MqttConnectVariableHeader:willQos(), DefaultHttp2Connection$DefaultStream:access$1302(DefaultHttp2Connection$DefaultStream-Http2Stream$State), OpenSslX509Certificate:verify(PublicKey-String), PausableChannelEventExecutor:unwrap(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable), DefaultChannelPipeline$3:run(), IllegalReferenceCountException:<init>(int-int), Attribute:release(int), DefaultChannelGroupFuture:setSuccess0(), ServerSocketChannelConfig:getBacklog(), DefaultChannelPipeline:addAfter0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext), CompressorHttp2ConnectionEncoder:connection(), Bzip2Encoder:ctx(), DefaultHeaders:getTimeMillis(Object-long), StringUtil:simpleClassName(Object), ChannelFlushPromiseNotifier:<init>(boolean), Log4JLogger:debug(String-Object-Object), Recycler$DefaultHandle:access$202(Recycler$DefaultHandle-Recycler$Stack), Http2FrameListener:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf$1:newObject(Recycler$Handle), ConcurrentHashMapV8$SearchKeysTask:compute(), SwappedByteBuf:writerIndex(), AbstractByteBuf:getDouble(int), AbstractByteBuf:readBytes(ByteBuffer), PooledUnsafeDirectByteBuf:_setByte(int-int), Slf4JLogger:info(String), Channel:bind(SocketAddress-ChannelPromise), AsciiHeadersEncoder$SeparatorType:valueOf(String), MpscLinkedQueue:element(), DefaultSpdySynReplyFrame:toString(), ChannelHandlerInvoker:invokeRead(ChannelHandlerContext), EpollSocketChannelConfig:setTcpKeepIdle(int), DefaultProgressivePromise:syncUninterruptibly(), UnpooledDirectByteBuf:_setMedium(int-int), DnsNameResolver:close(), ChannelHandlerInvoker:invokeChannelReadComplete(ChannelHandlerContext), AbstractEpollServerChannel:remoteAddress(), HttpPostRequestEncoder$WrappedHttpRequest:<init>(HttpRequest), InboundHttp2ToHttpAdapter:removeMessage(int), ByteBuf:writeBytes(ScatteringByteChannel-int), ConcurrentHashMapV8$KeyIterator:next(), ByteArrayDecoder:<init>(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean-boolean), DefaultHttp2RemoteFlowController$FlowState:writableWindow(), PooledHeapByteBuf:copy(int-int), DefaultConvertibleHeaders:addDouble(Object-double), JdkZlibDecoder:<init>(ZlibWrapper), Http2FrameLogger:logData(Http2FrameLogger$Direction-int-ByteBuf-int-boolean), Socks4ClientDecoder:fail(List-Throwable), MqttQoS:<clinit>(), OpenSsl:isError(long), ByteBuf:getUnsignedShort(int), ByteBuf:copy(int-int), ChannelPipeline:addLast(String-ChannelHandler), PrematureChannelClosureException:<init>(String), JdkAlpnApplicationProtocolNegotiator:<clinit>(), NioUdtAcceptorChannel:localAddress(), SslHandler:handlerAdded(ChannelHandlerContext), HttpObjectAggregator:beginAggregation(Object-ByteBuf), AbstractByteBuf:setBytes(int-byte[]), DomainNameMapping:<init>(int-Object), ReadOnlyByteBuf:nioBuffer(int-int), Cookie:name(), SnappyFrameEncoder:setChunkLength(ByteBuf-int), AbstractChannel$AbstractUnsafe:flush(), Native:newConnectionResetException(String-int), SlicedByteBuf:_setByte(int-int), PerMessageDeflateClientExtensionHandshaker:<init>(int-boolean-int-boolean-boolean), EpollSocketChannelConfig:getTcpKeepIdle(), ReadOnlyUnsafeDirectByteBuf:copy(int-int), Socks5InitialRequestDecoder$State:<init>(String-int), EmbeddedChannel:doDisconnect(), Logger:isInfoEnabled(), EmptyBinaryHeaders:addBoolean(AsciiString-boolean), AbstractInternalLogger:isDebugEnabled(), PlatformDependent:newAtomicIntegerFieldUpdater(Class-String), DefaultHeaders:containsObject(Object-Object-Comparator), Bzip2DivSufSort:subStringSort(int-int-int-int[]-int-int-int-boolean-int), ImmediateEventExecutor:newProgressivePromise(), ConcurrentHashMapV8:containsKey(Object), SpdyHeaderBlockEncoder:<init>(), FixedCompositeByteBuf:setBytes(int-InputStream-int), Http2ConnectionHandler:channelInactive(ChannelHandlerContext), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ChannelHandlerAdapter:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), FullBinaryMemcacheResponse:setMagic(byte), CompleteChannelFuture:executor(), EmptyConvertibleHeaders:iteratorConverted(), Http2Flags:isFlagSet(short), DefaultHttp2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int), JdkDefaultApplicationProtocolNegotiator:<clinit>(), HttpContentDecoder:decodeContent(HttpContent-List), DefaultHttp2ConnectionDecoder$Builder:access$500(DefaultHttp2ConnectionDecoder$Builder), AbstractRemoteAddressFilter:channelAccepted(ChannelHandlerContext-SocketAddress), DefaultChannelHandlerInvoker$6:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Object), ChannelTrafficShapingHandler:sendAllValid(ChannelHandlerContext-long), AbstractChannel$AbstractUnsafe$9:<init>(AbstractChannel$AbstractUnsafe-Exception), DnsServerAddresses$RotationalAddresses:<init>(InetSocketAddress[]), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int), EmptyHttpHeaders:addBoolean(Object-boolean), NioDatagramChannelConfig:setOption0(Object-Object), ConcurrentHashMapV8$EntrySetView:add(Object), DefaultBinaryHeaders:addObject(AsciiString-Object), Bzip2DivSufSort:ssHeapSort(int-int-int-int), BinaryMemcacheObjectAggregator:beginAggregation(Object-ByteBuf), ForkJoinPool$WorkQueue:poll(), CookieHeaderNames:<init>(), DefaultHeaders$HeaderDateFormat$1:<init>(), EmptyHttp2Headers:addByte(Object-byte), EmptyByteBuf:skipBytes(int), SpdySession$StreamState:hasReceivedReply(), ObjectEncoderOutputStream:<init>(OutputStream-int), CookieEncoderUtil:stripTrailingSeparatorOrNull(StringBuilder), HttpHeaderDateFormat:<init>(), Native$NativeInetAddress:<init>(byte[]), EventExecutor:unwrap(), PooledUnsafeDirectByteBuf:_getInt(int), ChannelTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long), AbstractNioChannel$AbstractNioUnsafe:voidPromise(), PooledByteBufAllocator:access$600(), PlatformDependent0:newAtomicIntegerFieldUpdater(Class-String), ChannelPipeline:remove(Class), DefaultUdtServerChannelConfig:setSoLinger(int), WrappedByteBuf:slice(), CompressorHttp2ConnectionEncoder$1:streamRemoved(Http2Stream), Bootstrap$2:<init>(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), Log4JLogger:isErrorEnabled(), NioUdtMessageConnectorChannel:doWriteMessage(Object-ChannelOutboundBuffer), AdvancedLeakAwareByteBuf:forEachByteDesc(int-int-ByteBufProcessor), OioSctpChannel:allRemoteAddresses(), HAProxyProxiedProtocol$TransportProtocol:valueOf(String), ConcurrentHashMapV8$EntrySetView:hashCode(), WrappedByteBuf:setZero(int-int), ByteBuf:setChar(int-int), AbstractByteBuf:writerIndex(int), ReadTimeoutHandler:<init>(int), DefaultFutureListeners:<init>(GenericFutureListener-GenericFutureListener), EmptyBinaryHeaders:addObject(Object-Iterable), GlobalChannelTrafficShapingHandler$1$1:<init>(GlobalChannelTrafficShapingHandler$1), ConcurrentHashMapV8$ReduceEntriesTask:firstComplete(), EmptyTextHeaders:addObject(Object-Object[]), Headers$ValueConverter:convertChar(char), InternalLoggerFactory:getInstance(Class), GlobalTrafficShapingHandler$PerChannel:<init>(), EmptyConvertibleHeaders:getAllAndConvert(Object), ConcurrentHashMapV8:containsValue(Object), JdkSslEngine:getPeerPort(), ChannelPromise:addListener(GenericFutureListener), OioServerSocketChannel:isActive(), ChannelHandler:channelWritabilityChanged(ChannelHandlerContext), HttpContentEncoder:beginEncode(HttpResponse-CharSequence), AbstractEventExecutor:<init>(EventExecutorGroup), DefaultStompHeaders:setTimeMillis(Object-long), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-boolean-String[]), CommonsLogger:trace(String-Throwable), RxtxChannelConfig$Databits:valueOf(int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), Unpooled:buffer(int-int), GlobalEventExecutor:inEventLoop(), SSLException:<init>(String), AdaptiveRecvByteBufAllocator$HandleImpl:record(int), DiskAttribute:toString(), Socks5ProxyHandler:<clinit>(), SingleThreadEventExecutor:addTask(Runnable), IntObjectHashMap:access$500(Object), DnsClass:<clinit>(), AdvancedLeakAwareByteBuf:setBytes(int-ByteBuf-int), DefaultHttpHeaders:addObject(Object-Object[]), ConcurrentHashMapV8$EntrySpliterator:trySplit(), NioUdtMessageConnectorChannel:javaChannel(), EpollMode:<init>(String-int), CommonsLogger:isInfoEnabled(), OpenSslX509Certificate:getIssuerUniqueID(), DefaultStompHeaders:set(Object-Object[]), NioEventLoop:run(), Signal$1:newConstant(int-String), PooledUnsafeDirectByteBuf:internalNioBuffer(int-int), ChannelHandlerContext:name(), AbstractEpollChannel:eventLoop(), MessageAggregator:validateMaxContentLength(int), EmptyHeaders:setObject(Object-Iterable), EventLoop:parent(), MixedFileUpload:setContent(ByteBuf), ReadTimeoutHandler:channelActive(ChannelHandlerContext), LocalChannel:unsafe(), ByteBuf:forEachByteDesc(int-int-ByteBufProcessor), PooledUnsafeDirectByteBuf:newInternalNioBuffer(Object), CompositeByteBuf:readBytes(ByteBuf-int), HttpData:length(), PausableChannelEventExecutor:isTerminated(), AdvancedLeakAwareByteBuf:getBytes(int-GatheringByteChannel-int), RxtxChannel:doBind(SocketAddress), SpdySession$StreamState:<init>(byte-boolean-boolean-int-int), MpscLinkedQueue:remove(Object), DnsResponseCode:toString(), EventLoopException:<init>(String-Throwable), WrappedByteBuf:ensureWritable(int-boolean), PingWebSocketFrame:content(), AsciiString:contains(CharSequence), Http2ConnectionHandler:onConnectionError(ChannelHandlerContext-Throwable-Http2Exception), MixedFileUpload:getByteBuf(), WrappedByteBuf:writeZero(int), SpdyCodecUtil:getUnsignedMedium(ByteBuf-int), PooledUnsafeDirectByteBuf:_setMedium(int-int), AsciiHeadersEncoder$SeparatorType:values(), PausableEventExecutor:acceptNewTasks(), EmptyByteBuf:setShort(int-int), AdvancedLeakAwareByteBuf:getFloat(int), DefaultPromise$4:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), ProtobufVarint32LengthFieldPrepender:<init>(), HAProxyProtocolVersion:valueOf(String), OioSocketChannel:shutdownOutput(), WebSocket08FrameDecoder$State:<clinit>(), OioSocketChannel:doBind(SocketAddress), EventExecutor:terminationFuture(), DefaultHeaders:iterator(), PoolChunkList:allocate(PooledByteBuf-int-int), Http2LocalFlowController:unconsumedBytes(Http2Stream), LocalChannel$6:<clinit>(), ReplayingDecoderBuffer:readSlice(int), DefaultSpdySynReplyFrame:<init>(int), DnsResponseCode:compareTo(DnsResponseCode), AbstractEpollStreamChannel:metadata(), ConcurrentHashMapV8$ForEachKeyTask:invoke(), IdleStateHandler:getWriterIdleTimeInMillis(), WebSocketServerHandshaker00:maxFramePayloadLength(), AbstractEpollServerChannel:doWrite(ChannelOutboundBuffer), Http2Connection:deactivate(Http2Stream), AdvancedLeakAwareByteBuf:setMedium(int-int), WrappedByteBuf:toString(Charset), HttpObjectAggregator$AggregatedFullHttpMessage:copy(), ForkJoinPool:makeCommonPool(), Socks5CommandRequestDecoder:actualReadableBytes(), ReplayingDecoderBuffer:readBytes(OutputStream-int), DnsResource:release(), SSLSessionContext:getSessionTimeout(), UnpooledHeapByteBuf:setInt(int-int), SSL:readFromBIO(long-long-int), UnpooledByteBufAllocator:newDirectBuffer(int-int), OioSctpServerChannel:eventLoop(), PooledUnsafeDirectByteBuf:maxCapacity(int), NioSctpServerChannel:setReadPending(boolean), WriteTimeoutHandler:writeTimedOut(ChannelHandlerContext), Http2Stream:getProperty(Object), CompressorHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise), EpollDomainSocketChannel:doWriteSingle(ChannelOutboundBuffer-int), Bootstrap$1:<init>(Bootstrap-Channel-ChannelPromise-SocketAddress-ChannelFuture), WrappedByteBuf:readMedium(), Http2ConnectionHandler:access$000(Http2ConnectionHandler), HttpClientUpgradeHandler$UpgradeEvent:valueOf(String), NetUtil:bytesToIpAddress(byte[]-int-int), SimpleTrustManagerFactory:<clinit>(), DefaultChannelPromise:<init>(Channel), DelegatingDecompressorFrameListener$Http2Decompressor:incrementCompressedBytes(int), DefaultHeaders:getTimeMillis(Object), StompFrame:headers(), LocalServerChannel$2:<init>(LocalServerChannel-LocalChannel), JdkSslEngine:setEnabledProtocols(String[]), ChannelOutboundBuffer$3:<init>(ChannelOutboundBuffer-ClosedChannelException), SoftReferenceMap:fold(Object), ForkJoinTask:reinitialize(), ConcurrentHashMapV8$MapReduceEntriesTask:advance(), SpdyHeaders$HttpNames:<init>(), DefaultTextHeaders:contains(Object-Object-Comparator), DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-Iterable), DefaultHttp2ConnectionEncoder:close(), EmptyHttp2Headers:addObject(AsciiString-Iterable), DefaultSctpServerChannelConfig:getSendBufferSize(), SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:init(SimpleTrustManagerFactory), ReadTimeoutHandler:channelInactive(ChannelHandlerContext), DefaultSpdySettingsFrame:toString(), OioEventLoopGroup:<init>(int-ThreadFactory), ConcurrentHashMapV8$ValueSpliterator:tryAdvance(ConcurrentHashMapV8$Action), ChannelHandlerContext:voidPromise(), MpscLinkedQueue$1:<init>(MpscLinkedQueue), Marshaller:finish(), ComposedLastHttpContent:trailingHeaders(), DefaultChannelPipeline:addFirst(String-ChannelHandler), DefaultHttp2ConnectionDecoder$FrameReadListener:<init>(DefaultHttp2ConnectionDecoder-DefaultHttp2ConnectionDecoder$1), Socks4CommandRequest:dstAddr(), ApplicationProtocolUtil:toList(int-String[]), LineBasedFrameDecoder:fail(ChannelHandlerContext-int), DefaultTextHeaders:access$701(DefaultTextHeaders-Object-Object[]), DuplicatedByteBuf:getBytes(int-GatheringByteChannel-int), HttpResponseStatus:code(), DefaultHttpHeaders:addChar(CharSequence-char), Http2FrameAdapter:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), DefaultHttpDataFactory:cleanAllHttpData(), Recycler$DefaultHandle:access$1302(Recycler$DefaultHandle-int), ForkJoinTask:invokeAll(ForkJoinTask-ForkJoinTask), WebSocketClientHandshaker:setHandshakeComplete(), JdkZlibEncoder:access$100(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), EpollSocketChannel:fd(), NioSctpServerChannel:doWriteMessage(Object-ChannelOutboundBuffer), DefaultLastStompContentSubframe:copy(), DefaultChannelHandlerInvoker$WriteTask:newInstance(ChannelHandlerContext-Object-int-ChannelPromise), ByteBuf:readBytes(ByteBuf-int-int), LocalChannel:access$000(LocalChannel), AsciiString$3:<init>(), AbstractHttpData:<clinit>(), AbstractChannel:estimatorHandle(), Recycler$Stack:scavenge(), UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean), Http2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), Bzip2DivSufSort:ssMultiKeyIntroSort(int-int-int-int), WriteTimeoutHandler$1:run(), ByteBufUtil:hexDump(ByteBuf-int-int), LengthFieldPrepender:<init>(int-int-boolean), EpollDomainSocketChannel$EpollDomainUnsafe:<init>(EpollDomainSocketChannel), IdleStateHandler:channelActive(ChannelHandlerContext), SctpMessage:duplicate(), NioUdtMessageConnectorChannel:<clinit>(), DefaultChannelConfig:autoReadCleared(), SpdySession$StreamState:closeLocalSide(), DefaultDatagramChannelConfig:getNetworkInterface(), ServerBootstrap:clone(), DefaultTextHeaders:setLong(CharSequence-long), WrappedByteBuf:nioBuffer(), ByteBuf:readBytes(OutputStream-int), CtMethod:setBody(String), SimpleTrustManagerFactory$2:<init>(), FixedCompositeByteBuf:alloc(), SpdyHttpDecoder:removeMessage(int), Socks5CommandResponseDecoder$1:<clinit>(), ReplayingDecoder:<init>(Object), DnsResponseHeader:setAuthoritativeAnswer(boolean), OioSctpChannel$1:<init>(OioSctpChannel-InetAddress-ChannelPromise), RxtxDeviceAddress:value(), PromiseTask:setUncancellableInternal(), Http2ClientUpgradeCodec:<init>(Http2ConnectionHandler), OioServerSocketChannel:doWrite(ChannelOutboundBuffer), ConcurrentHashMapV8$ForEachTransformedValueTask:propagateCompletion(), SpdySessionStatus:hashCode(), DuplicatedByteBuf:arrayOffset(), RtspHeaderValues:<init>(), DefaultHttp2FrameReader$1:processFragment(boolean-ByteBuf-Http2FrameListener), FullHttpRequest:content(), PoolChunk:allocate(int), ByteBuf:touch(), DeflateDecoder:handlerRemoved(ChannelHandlerContext), Http2OrHttpChooser:createHttp2RequestHandler(), PrimitiveCollections$UnmodifiableIntObjectMap:values(Class), ReadOnlyByteBuf:internalNioBuffer(int-int), DefaultHttpHeaders:setShort(CharSequence-short), DefaultHeaders:getBooleanAndRemove(Object), HttpHeaderUtil:setTransferEncodingChunked(HttpMessage-boolean), JdkSslContext:generateKeySpec(char[]-byte[]), JavassistTypeParameterMatcherGenerator:<init>(), PrimitiveCollections$EmptyIntObjectMap:<init>(), GlobalTrafficShapingHandler$PerChannel:<init>(GlobalTrafficShapingHandler$1), AbstractChannel:newUnsafe(), MixedAttribute:<init>(String-String-long), CompositeByteBuf:writeShort(int), ChunkedInput:readChunk(ChannelHandlerContext), OpenSslX509Certificate:getSigAlgName(), ObjectEncoderOutputStream:writeObject(Object), DefaultHttpResponse:status(), InternalLoggerFactory:newDefaultFactory(String), FixedCompositeByteBuf:getBytes(int-ByteBuffer), WebSocketUtil:<init>(), DefaultBinaryHeaders:setAll(BinaryHeaders), DnsNameResolver:clearCache(), AbstractByteBuf:getBytes(int-OutputStream-int), OpenSslEngine:getSupportedProtocols(), HttpObjectAggregator:isContentMessage(Object), DefaultMemcacheContent:release(), ConcurrentSet:add(Object), AdvancedLeakAwareByteBuf:writeBytes(byte[]-int-int), GlobalEventExecutor$TaskRunner:<clinit>(), ObjectEncoderOutputStream:writeLong(long), DefaultSocks4CommandRequest:dstPort(), Socks5CommandRequestDecoder:checkpoint(Object), DefaultChannelPipeline:addAfter(String-String-ChannelHandler), Logger:error(String-Object-Object), Snappy:encodeLiteral(ByteBuf-ByteBuf-int), ProxyHandler:exceptionCaught(ChannelHandlerContext-Throwable), EmptyHttp2Headers:setByte(Object-byte), ReplayingDecoderBuffer:toString(), WebSocketClientHandshaker08:verify(FullHttpResponse), GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService), JdkLogger:info(String-Object-Object), DefaultNameResolverGroup:<clinit>(), Bzip2DivSufSort:ssFixdown(int-int-int-int-int), DefaultHttp2FrameWriter:verifyStreamOrConnectionId(int-String), DefaultByteBufHolder:retain(), SSLEngine:getHandshakeStatus(), OpenSslX509Certificate:getVersion(), DefaultSpdySynStreamFrame:setLast(boolean), DefaultUdtServerChannelConfig:setSendBufferSize(int), ChannelHandlerContext:alloc(), ChannelGroupException:<init>(Collection), SingleThreadEventExecutor:pollScheduledTask(long), PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:<init>(int-boolean-int-boolean-int), PrimitiveCollections$UnmodifiableIntObjectMap:<init>(IntObjectMap), Crc32:updateCRC(int), PausableChannelEventExecutor:invokeDisconnect(ChannelHandlerContext-ChannelPromise), AbstractBinaryMemcacheMessage:release(int), EmptyHttp2Headers:setFloat(Object-float), DefaultMemcacheContent:release(int), ConcurrentHashMapV8$KeySetView:remove(Object), UnpooledDirectByteBuf:memoryAddress(), DefaultBinaryHeaders$2:convertToChar(AsciiString), ForkJoinTask:doJoin(), EmbeddedChannelId:equals(Object), HttpObjectDecoder$LineParser:parse(ByteBuf), SecretKeyFactory:getInstance(String), AbstractTrafficShapingHandler:configure(long-long), ChannelHandlerContext:fireChannelUnregistered(), DefaultDatagramChannelConfig:setReceiveBufferSize(int), CompressorHttp2ConnectionEncoder$Builder:<init>(), HttpObjectDecoder$State[]:clone(), EpollDatagramChannel:doBind(SocketAddress), NioUdtByteRendezvousChannel:javaChannel(), DuplicatedByteBuf:setByte(int-int), ConcurrentHashMapV8:<init>(Map), NioSctpChannel:remoteAddress0(), SpdySession:isActiveStream(int), Socks4CommandResponse:dstAddr(), ChannelHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), UnsafeDirectSwappedByteBuf:_setLong(int-long), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), DefaultFullBinaryMemcacheRequest:content(), Http2OutboundFrameLogger:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise), MqttConnectPayload:<init>(String-String-String-String-String), MultithreadEventExecutorGroup:isShutdown(), ProxyConnectException:initCause(Throwable), DefaultChannelId:defaultMachineId(), DnsResponse:release(), SimpleNameResolver:executor(), Recycler$WeakOrderQueue:add(Recycler$DefaultHandle), SingleThreadEventExecutor:peekScheduledTask(), DefaultChannelConfig:getOptions(), ByteBuf:forEachByte(int-int-ByteBufProcessor), ProxyConnectionEvent:toString(), SslConstants:<init>(), CompositeByteBuf:writeByte(int), DefaultFullBinaryMemcacheRequest:copy(), EpollDatagramChannel:newUnsafe(), FullHttpResponse:status(), ChannelHandlerAppender:<init>(ChannelHandler[]), PromiseTask$RunnableAdapter:<init>(Runnable-Object), ThreadLocalInsecureRandom:nextFloat(), NioSctpServerChannel:doConnect(SocketAddress-SocketAddress), DomainNameMapping:add(String-Object), DefaultBinaryMemcacheRequest:<init>(String-ByteBuf), ClientCookieDecoder$CookieBuilder:parse8(String-int-String), AbstractTrafficShapingHandler:access$000(), BinaryMemcacheResponse:setExtrasLength(byte), ChannelHandlerContext:close(ChannelPromise), Socks5AuthMethod:valueOf(byte), DefaultBinaryHeaders$4:<init>(), HttpMessage:protocolVersion(), DnsHeader:setType(int), HttpResponseStatus:<init>(int), OpenSslEngine:writePlaintextData(ByteBuffer), JdkDefaultApplicationProtocolNegotiator:protocolListenerFactory(), NioEventLoop:delayNanos(long), InboundHttp2ToHttpAdapter:processHeadersEnd(ChannelHandlerContext-int-FullHttpMessage-boolean), CommonsLogger:trace(String-Object-Object), WebSocketServerHandshaker$1:operationComplete(Future), ByteBufInputStream:readDouble(), UnreleasableByteBuf:retain(), DelegatingDecompressorFrameListener$ConsumedBytesConverter:consumeBytes(ChannelHandlerContext-Http2Stream-int), DuplicatedByteBuf:slice(int-int), ApplicationProtocolConfig$SelectedListenerFailureBehavior:values(), ZlibUtil:fail(Deflater-String-int), SpdyHeaderBlockRawDecoder:decode(ByteBufAllocator-ByteBuf-SpdyHeadersFrame), StatusUDT:ordinal(), EmptyByteBuf:writeByte(int), CompositeByteBuf:checkIndex(int-int), ByteToMessageDecoder$2:cumulate(ByteBufAllocator-ByteBuf-ByteBuf), Http2Headers$PseudoHeaderName:<clinit>(), DefaultPromise:<clinit>(), SctpChannel:unbindAddress(InetAddress), ConcurrentHashMapV8$SearchKeysTask:getRawResult(), DefaultSpdyHeaders:set(Object-Object[]), ReadOnlyByteBufferBuf:getByte(int), SocketChannelConfig:getWriteSpinCount(), NativeLibraryLoader:load(String-ClassLoader), DefaultBinaryHeaders$2:convertChar(char), HttpPostBodyUtil:<clinit>(), DefaultAddressedEnvelope:retain(), TrafficCounter:checkInterval(), AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel), CaseIgnoringComparator:compare(CharSequence-CharSequence), DefaultSctpServerChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), EmptyBinaryHeaders:addShort(AsciiString-short), EmptyHttp2Headers:set(AsciiString-AsciiString[]), DnsQuery:addAdditionalResource(DnsResource), AdaptiveRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator), AbstractByteBuf:writeDouble(double), WebSocketClientHandshaker$2:exceptionCaught(ChannelHandlerContext-Throwable), Http2Connection:numActiveStreams(), DuplicatedByteBuf:hasArray(), DefaultHttp2Connection$ParentChangedEvent:<init>(Http2Stream-Http2Stream), ChannelHandlerAdapter:flush(ChannelHandlerContext), AbstractEventExecutorGroup:close(), JdkNpnApplicationProtocolNegotiator$1:wrapSslEngine(SSLEngine-JdkApplicationProtocolNegotiator-boolean), DnsType:<init>(int-String), MqttConnectPayload:toString(), SslHandler:channelReadComplete(ChannelHandlerContext), PoolThreadCache$MemoryRegionCache:freeEntry(PoolThreadCache$MemoryRegionCache$Entry), WebSocketClientHandshaker13:maxFramePayloadLength(), SnappyFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), Signal:name(), DnsQuestion:<init>(String-DnsType), WriteTimeoutHandler:<init>(long-TimeUnit), ChannelHandlerContext:attr(AttributeKey), EpollSocketChannelConfig:setWriteSpinCount(int), AbstractInternalLogger:debug(String-Object-Object), Bzip2DivSufSort:BUCKET_B(int-int), ChannelTrafficShapingHandler:calculateSize(Object), Encoder:encodeHeader(OutputStream-byte[]-byte[]-boolean), ImmediateEventExecutor$ImmediateProgressivePromise:<init>(EventExecutor), StompSubframeAggregator:isStartMessage(Object), Snappy:encodeCopy(ByteBuf-int-int), ProxyHandler:<clinit>(), ReplayingDecoder:<clinit>(), Socks5InitialRequestDecoder:checkpoint(Object), EpollServerChannelConfig:setReceiveBufferSize(int), NativeDatagramPacketArray$1:<init>(), ServerBootstrap:validate(), HttpPostRequestEncoder$WrappedHttpRequest:setUri(String), NetUtil:getByName(CharSequence), ConcurrentHashMapV8$BaseIterator:advance(), WebSocketServerHandshaker$1:operationComplete(ChannelFuture), HttpObjectAggregator$AggregatedFullHttpRequest:setProtocolVersion(HttpVersion), MixedFileUpload:getString(), AsciiHeadersEncoder$NewlineType:<clinit>(), AbstractByteBuf:compareTo(Object), DefaultChannelId:formatAddress(byte[]), Log4JLogger:error(String-Throwable), FullHttpRequest:headers(), MqttSubAckMessage:variableHeader(), AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf-int), DefaultHeaders:setTimeMillis(Object-long), HttpContentEncoder$State:values(), DefaultChannelProgressivePromise:setFailure(Throwable), UnpooledDirectByteBuf:readBytes(byte[]-int-int), DefaultHttp2FrameWriter:headerTable(), AbstractByteBufAllocator:toLeakAwareBuffer(ByteBuf), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:fork(), DefaultChannelGroup$1:operationComplete(ChannelFuture), AbstractEpollChannel:newDirectBuffer(ByteBuf), EmptyBinaryHeaders:set(BinaryHeaders), IdleStateHandler:<init>(long-long-long-TimeUnit), DefaultSpdySynReplyFrame:appendHeaders(StringBuilder), DefaultChannelPipeline:fireChannelInactive(), NioEventLoopGroup:<init>(int-Executor), Bzip2Encoder$State[]:clone(), SpdyOrHttpChooser$SelectedProtocol:valueOf(String), ALPN:put(SSLEngine-ALPN$Provider), ContinuationWebSocketFrame:<init>(ByteBuf), EpollDomainSocketChannel$EpollDomainUnsafe:epollInReady(), Http2ConnectionHandler:writeGoAway(ChannelHandlerContext-Http2Exception), NioDatagramChannel:newSocket(SelectorProvider-InternetProtocolFamily), EmbeddedEventLoop:invokeDeregister(ChannelHandlerContext-ChannelPromise), NioDatagramChannel:doBind(SocketAddress), AbstractByteBuf:setShort(int-int), ConcurrentHashMapV8:values(), SpdyFrameDecoderDelegate:readRstStreamFrame(int-int), EmbeddedChannel$State:values(), UnpooledUnsafeDirectByteBuf:copy(int-int), DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader-DefaultHttp2FrameReader$1), IpSubnetFilterRule$Ip4SubnetFilterRule:matches(InetSocketAddress), DefaultChannelPipeline:iterator(), SslHandshakeCompletionEvent:<init>(), PoolThreadCache$MemoryRegionCache:nextIdx(int), DefaultFullBinaryMemcacheRequest:key(), Http2Exception:connectionError(Http2Error-String-Object[]), SpdyFrameDecoder$State:<init>(String-int), DefaultTextHeaders:set(CharSequence-Iterable), AbstractBootstrap$1:operationComplete(ChannelFuture), EpollSocketChannelConfig:setEpollMode(EpollMode), PooledHeapByteBuf:maxCapacity(), EpollEventLoopGroup:setIoRatio(int), SpdyCodecUtil:getUnsignedShort(ByteBuf-int), ByteBufProcessor$9:<init>(), BinaryMemcacheRequest:dataType(), SslHandler:write(ChannelHandlerContext-Object-ChannelPromise), DnsQuery:touch(), EpollServerSocketChannel:config(), DefaultChannelHandlerInvoker$WriteTask$1:<init>(), ByteBuf:setBytes(int-byte[]-int-int), Bootstrap:validate(), AbstractEventExecutor:newPromise(), ForkJoinTask:getThrowableException(), DefaultRxtxChannelConfig:setStopbits(RxtxChannelConfig$Stopbits), ConcurrentHashMapV8$ForEachKeyTask:propagateCompletion(), MpscLinkedQueue:add(Object), ReadOnlyUnsafeDirectByteBuf:getBytes(int-byte[]-int-int), AbstractReferenceCountedByteBuf:<init>(int), Bzip2MTFAndRLE2StageEncoder:mtfSymbolFrequencies(), EmptyTextHeaders:clear(), PoolArena$HeapArena:memoryCopy(byte[]-int-byte[]-int-int), SelectorProviderUDT:openSocketChannel(), EpollDatagramChannelConfig:isReusePort(), WebSocketServerHandshaker00:<clinit>(), Channel:flush(), PongWebSocketFrame:<init>(boolean-int-ByteBuf), EmptyHeaders:addObject(Object-Object[]), DefaultHttp2LocalFlowController:windowUpdateRatio(ChannelHandlerContext-Http2Stream-float), SpdyHeaderBlockEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), DefaultHeaders$KeyValueHeaderIterator:remove(), SslHandler$5:operationComplete(Future), DefaultHeaders:getDoubleAndRemove(Object-double), DefaultBinaryHeaders$2:convertBoolean(boolean), AbstractEpollStreamChannel:clearFlag(int), ConcurrentHashMapV8$EntrySetView:remove(Object), InternalThreadLocalMap:newIndexedVariableTable(), Http2Flags:value(), UnpooledHeapByteBuf:copy(int-int), UnpooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int), AbstractEpollChannel$AbstractEpollUnsafe:<init>(AbstractEpollChannel), PoolArena$DirectArena:<clinit>(), HttpPostRequestDecoder:next(), ChannelHandlerInvokerUtil:invokeReadNow(ChannelHandlerContext), ChannelOutboundBuffer:failFlushed(Throwable), AbstractConstant:equals(Object), DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:<clinit>(), CompositeByteBuf:hasArray(), WrappedByteBuf:readBytes(int), Socks5ClientEncoder:encodeCommandRequest(Socks5CommandRequest-ByteBuf), DefaultChannelGroupFuture$DefaultEntry:setValue(Object), Http2LocalFlowController:receiveFlowControlledFrame(ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean), OneTimeTask:value(), ByteBuf:isReadable(int), OioSctpChannel:doDisconnect(), WebSocketClientHandshaker$2:channelInactive(ChannelHandlerContext), AbstractEpollChannel:doReadBytes(ByteBuf), AbstractEpollChannel$AbstractEpollUnsafe:flush0(), DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), SwappedByteBuf:writeLong(long), AbstractNioMessageChannel:eventLoop(), EmptyHttp2Headers:path(AsciiString), DefaultTextHeaders$MultipleFieldsValueComposer:setObject(CharSequence-Object[]), SpdyHeaderBlockRawDecoder:end(), AbstractReferenceCountedByteBuf:skipBytes(int), MessageToMessageCodec$1:acceptOutboundMessage(Object), SpdySession:updateReceiveWindowSize(int-int), DefaultCookie:setPorts(Iterable), RxtxChannel$RxtxUnsafe:safeSetSuccess(ChannelPromise), AttributeKey:<init>(int-String-AttributeKey$1), HttpPostMultipartRequestDecoder:splitMultipartHeader(String), DefaultStompHeaders:addObject(Object-Object[]), GlobalChannelTrafficShapingHandler:getReadLimit(), HttpVersion:protocolName(), NioSocketChannel:access$100(NioSocketChannel-ChannelPromise), Library:initialize(String), ReadTimeoutHandler:channelRegistered(ChannelHandlerContext), NioUdtByteConnectorChannel:<init>(TypeUDT), AbstractEpollStreamChannel:writeBytesMultiple(ChannelOutboundBuffer-ByteBuffer[]-int-long-int), HashedWheelTimer$HashedWheelTimeout:state(), InterfaceHttpData:release(), WebSocket00FrameEncoder:<clinit>(), OpenSslEngine:shutdown(), EmptyByteBuf:setByte(int-int), EpollDatagramChannelConfig:setOption(ChannelOption-Object), ReferenceCountUtil:access$000(), AdvancedLeakAwareByteBuf:getBoolean(int), MessageAggregator:acceptInboundMessage(Object), MultithreadEventLoopGroup:<init>(int-Executor-Object[]), XmlFrameDecoder:isCommentBlockStart(ByteBuf-int), CorsConfig:origin(), StringUtil:split(String-char), ChunkedNioFile:close(), PoolThreadCache$MemoryRegionCache:trim(), JdkZlibDecoder$GzipState:values(), ReferenceCounted:retain(int), UnreleasableByteBuf:retain(int), PooledHeapByteBuf:_getLong(int), HttpObjectDecoder$HeaderParser:<init>(AppendableCharSequence-int), ConcurrentHashMapV8$ReduceKeysTask:advance(), SslContext:newServerContext(File-File-String), ConcurrentHashMapV8$SearchMappingsTask:compute(), MixedAttribute:isInMemory(), ReplayingDecoderBuffer:getFloat(int), AbstractBinaryMemcacheMessage:retain(), OioSocketChannel:remoteAddress0(), Http2OutboundFrameLogger:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), OioServerSocketChannel:<clinit>(), DatagramPacket:sender(), UnpooledHeapByteBuf:setArray(byte[]), StompSubframeAggregator:contentLength(Object), HttpHeaderDateFormat:setTimeZone(TimeZone), MqttConnectPayload:clientIdentifier(), EventExecutor:isTerminated(), ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuffer), ChannelHandlerAdapter:channelActive(ChannelHandlerContext), DefaultHttpHeaders:setObject(CharSequence-Object[]), HttpProxyHandler:<init>(SocketAddress), ClientCookieDecoder$CookieBuilder:setCookieAttribute(String-int-int-String), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToBoolean(Object), SpdyHeaderBlockRawEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), WebSocketServerProtocolHandshakeHandler$1:operationComplete(Future), BlockingOperationException:<init>(), ByteToMessageDecoder:handlerAdded(ChannelHandlerContext), HttpClientUpgradeHandler$UpgradeEvent:values(), PingWebSocketFrame:isFinalFragment(), MixedAttribute:addContent(ByteBuf-boolean), HttpPostBodyUtil:<init>(), ObjectEncoderOutputStream:writeBytes(String), Http2FrameListener:onPriorityRead(ChannelHandlerContext-int-int-short-boolean), EmptyHttpHeaders:addByte(CharSequence-byte), NioDatagramChannel:doReadMessages(List), WrappedByteBuf:readInt(), HAProxyProxiedProtocol$AddressFamily:<clinit>(), DefaultSocks4CommandResponse:dstAddr(), ChannelPromise:isDone(), DefaultFileRegion:<init>(File-long-long), ResourceLeakDetector$DefaultResourceLeak:clear(), AsciiString:compareToIgnoreCase(CharSequence), MixedAttribute:length(), EmbeddedSocketAddress:<init>(), ByteBufOutputStream:writeBytes(String), Headers$ValueConverter:convertByte(byte), HttpContentDecoder:newContentDecoder(String), WebSocketFrame:retain(int), GlobalEventExecutor$TaskRunner:run(), ThreadPerTaskExecutor:execute(Runnable), ConcurrentHashMapV8$MapReduceMappingsToIntTask:compute(), Signal$1:<init>(), GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long), OpenSslDefaultApplicationProtocolNegotiator:<clinit>(), DiskAttribute:compareTo(Attribute), DefaultHttpHeaders:setDouble(CharSequence-double), AbstractNioByteChannel:doWriteBytes(ByteBuf), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:firstComplete(), GlobalEventExecutor:scheduledTaskQueue(), PausableChannelEventExecutor:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise), DeflateFrameServerExtensionHandshaker:handshakeExtension(WebSocketExtensionData), FullBinaryMemcacheResponse:setKeyLength(short), EmbeddedChannel:isOpen(), AbstractReferenceCountedByteBuf:writeBytes(byte[]-int-int), ReplayingDecoder:checkpoint(Object), DefaultHttp2FrameReader$State:valueOf(String), DefaultHttp2ConnectionDecoder$Builder:access$200(DefaultHttp2ConnectionDecoder$Builder), DefaultTextHeaders:access$401(DefaultTextHeaders-Object-Iterable), Http2Exception:streamId(Http2Exception), IdleStateHandler$WriterIdleTimeoutTask:run(), EpollDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), WebSocketServerHandshaker:newWebsocketDecoder(), DefaultBinaryMemcacheRequest:touch(Object), AbstractChannel$AbstractUnsafe$3:<init>(AbstractChannel$AbstractUnsafe), RxtxChannel$RxtxUnsafe:closeIfClosed(), EmptyBinaryHeaders:setObject(AsciiString-Iterable), JZlibDecoder:<init>(), NioDatagramChannelConfig:<init>(NioDatagramChannel-DatagramChannel), LoggingHandler:write(ChannelHandlerContext-Object-ChannelPromise), DefaultTextHeaders:valueConverter(), SpdyFrameDecoder$State:<clinit>(), DefaultChannelHandlerInvoker:invokeChannelInactive(ChannelHandlerContext), EventExecutor:newFailedFuture(Throwable), Recycler$WeakOrderQueue:access$1500(Recycler$WeakOrderQueue), AbstractMemcacheObjectEncoder:encode(ChannelHandlerContext-Object-List), SocksPortUnificationServerHandler:logUnknownVersion(ChannelHandlerContext-byte), SpdyHeaders:getAndConvert(Object), ByteBuf:getBytes(int-GatheringByteChannel-int), DefaultAttributeMap$DefaultAttribute:get(), HttpObjectEncoder:encodeAndRetain(Object), DefaultSpdySettingsFrame$Setting:setPersisted(boolean), ThreadLocalRandom$2:uncaughtException(Thread-Throwable), SwappedByteBuf:getBytes(int-OutputStream-int), Snappy:validateOffset(int-int), MessageInfo:streamNumber(), Unpooled:wrappedBuffer(byte[]), NioSctpChannel:localAddress(), ReferenceCounted:retain(), UnsafeDirectSwappedByteBuf:writeFloat(float), EmptyHeaders:setDouble(Object-double), DefaultStompHeaders:addTimeMillis(Object-long), OioSocketChannelConfig:getConnectTimeoutMillis(), FileDescriptor:toString(), HttpServerCodec:decoder(), DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:<init>(DefaultHttp2HeadersDecoder-DefaultHttp2HeadersDecoder$1), JdkAlpnApplicationProtocolNegotiator:<init>(String[]), EmptyHttpHeaders:setObject(CharSequence-Iterable), DefaultHttp2Connection$ConnectionStream:closeRemoteSide(), ChannelOutboundBuffer:forEachFlushedMessage(ChannelOutboundBuffer$MessageProcessor), ForkJoinPool$1:<init>(), CloseWebSocketFrame:touch(Object), FastLzFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), DefaultSpdyHeaders:add(TextHeaders), ScheduledFutureTask:isMigrationPending(), MessageToMessageDecoder:<init>(Class), DefaultChannelPipeline:channel(), Http2FrameListener:onSettingsAckRead(ChannelHandlerContext), Http2Exception:streamError(int-Http2Error-Throwable-String-Object[]), JdkSslClientContext:<init>(File-TrustManagerFactory), ConcurrentHashMapV8$SearchValuesTask:compute(), ConcurrentHashMapV8:toString(), ConcurrentHashMapV8:readObject(ObjectInputStream), DefaultHttp2ConnectionDecoder:localSettings(), DefaultCookie:setHttpOnly(boolean), SpdySynReplyFrame:headers(), ByteBufUtil:equals(ByteBuf-ByteBuf), ByteBufUtil$ThreadLocalDirectByteBuf:<clinit>(), InboundHttp2ToHttpPriorityAdapter:removeMessage(int), Slf4JLogger:debug(String-Object), HttpPostRequestEncoder:addBodyFileUploads(String-File[]-String[]-boolean[]), DefaultServerSocketChannelConfig:setOption(ChannelOption-Object), DnsNameResolverContext:resolve(), DefaultTextHeaders$SingleHeaderValuesComposer$1:escape(Object), ForkJoinPool:awaitWork(ForkJoinPool$WorkQueue-long-int), HttpObjectAggregator:isStartMessage(HttpObject), PromiseAggregator:<init>(Promise), PooledUnsafeDirectByteBuf:memoryAddress(), CompositeByteBuf:addComponents(Iterable), OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress), Bzip2DivSufSort:trLog(int), DefaultHttp2LocalFlowController$FlowState:incrementInitialStreamWindow(int), Socks5ProxyHandler:exceptionMessage(String), HttpResponseStatus:<init>(int-String-boolean), WebSocketProtocolHandler:<init>(), AbstractChannel:access$402(AbstractChannel-boolean), ByteToMessageCodec$Encoder:acceptOutboundMessage(Object), DefaultHttp2Headers:authority(AsciiString), ByteBuf:isWritable(), NetUtil:isValidIpV6Address(String), DefaultHttp2ConnectionEncoder$Builder:connection(Http2Connection), AbstractNioMessageChannel:doReadMessages(List), Socks4ClientDecoder$State:valueOf(String), BlockingOperationException:<init>(Throwable), WebSocketServerHandshaker07:selectSubprotocol(String), DefaultPromise:await(), SpdyStreamStatus:toString(), DnsNameResolver:isRecursionDesired(), EmptyHttpHeaders:set(Object-Object[]), CountedCompleter:onExceptionalCompletion(Throwable-CountedCompleter), CorsConfig$Builder:access$900(CorsConfig$Builder), JdkSslSession:getApplicationBufferSize(), DefaultChannelGroupFuture:addListeners(GenericFutureListener[]), Http2Connection:local(), EmptyTextHeaders:addBoolean(Object-boolean), HttpPostStandardRequestDecoder:getBodyHttpDatas(), DefaultChannelPipeline$HeadContext:skipFlags0(Class), SpdyFrameCodec:readPingFrame(int), SpdyFrameDecoder$1:<clinit>(), ConcurrentHashMapV8$EntrySetView:iterator(), UnpooledDirectByteBuf:checkIndex(int-int), ChannelOption:newInstance(String), DefaultConvertibleHeaders:setByte(Object-byte), HttpClientUpgradeHandler:<init>(HttpClientUpgradeHandler$SourceCodec-HttpClientUpgradeHandler$UpgradeCodec-int), InterfaceHttpData$HttpDataType:<clinit>(), SpdyHttpHeaders:<init>(), AbstractMemoryHttpData:<init>(String-Charset-long), EpollSocketChannel:shutdownOutput0(ChannelPromise), DefaultEventLoop:<init>(EventLoopGroup-Executor), SpdyFrameDecoderDelegate:readSetting(int-int-boolean-boolean), LzfEncoder:<init>(boolean), HttpContentCompressor:<init>(int), Http2Connection:createLocalStream(int), UnpooledUnsafeDirectByteBuf:_setLong(int-long), SwappedByteBuf:nioBuffer(int-int), DefaultSpdyHeaders:setShort(Object-short), DefaultConvertibleHeaders:setBoolean(Object-boolean), DefaultUdtChannelConfig:getSoLinger(), NioSctpServerChannel$NioSctpServerChannelConfig:autoReadCleared(), DelegatingDecompressorFrameListener$ConsumedBytesConverter:<init>(Http2LocalFlowController), SSLEngineResult:getHandshakeStatus(), DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long), ReadOnlyByteBuf:getBytes(int-ByteBuffer), BinaryMemcacheClientCodec:access$200(BinaryMemcacheClientCodec), Bzip2HuffmanStageDecoder:createHuffmanDecodingTables(), DefaultBinaryHeaders:setByte(AsciiString-byte), AbstractMemoryHttpData:get(), Snappy:maskChecksum(int), SwappedByteBuf:resetReaderIndex(), AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int-int), AbstractByteBuf:getShort(int), DefaultSpdyHeaders:setBoolean(CharSequence-boolean), DomainNameMapping:map(String), DefaultHeaders:forEachName(Headers$NameVisitor), Socks5AddressEncoder:encodeAddress(Socks5AddressType-String-ByteBuf), DefaultChannelProgressivePromise:setSuccess(), DefaultRxtxChannelConfig:setWriteSpinCount(int), ForkJoinTask:rethrow(Throwable), ReadOnlyByteBuf:order(), ByteBufInputStream:readInt(), ObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf), DefaultHttp2ConnectionDecoder$FrameReadListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), Http2Headers:size(), EpollDatagramChannel:block(InetAddress-InetAddress), RxtxChannelOption:<init>(), DefaultBinaryHeaders:add(AsciiString-AsciiString[]), HttpPostRequestEncoder:initDataMultipart(), DefaultHttp2ConnectionEncoder:flowController(), ContinuationWebSocketFrame:rsv(), OpenSsl:ensureAvailability(), ReplayingDecoderBuffer:readMedium(), KeyManagerFactory:getInstance(String), ForkJoinPool:fullExternalPush(ForkJoinTask), SpdyFrameCodec:readRstStreamFrame(int-int), AdvancedLeakAwareByteBuf:readFloat(), DnsNameResolver:queryTimeoutMillis(), GlobalEventExecutor:<clinit>(), SwappedByteBuf:getBytes(int-ByteBuf-int-int), ChannelPromise:setUncancellable(), OioDatagramChannel:doReadMessages(List), ThreadLocalRandom:nextInt(int), ChannelHandlerContext:fireChannelWritabilityChanged(), Recycler$Handle:recycle(Object), ReplayingDecoderBuffer:order(ByteOrder), ChunkedFile:<init>(File), NioSocketUDT:getRemoteSocketAddress(), DnsQueryContext:access$000(DnsQueryContext-DnsQuery-InetSocketAddress), HAProxyProtocolVersion:valueOf(byte), AbstractByteBuf:writeBytes(byte[]-int-int), AbstractByteBuf:writeBytes(ByteBuf-int-int), Bzip2MTFAndRLE2StageEncoder:mtfLength(), VoidChannelPromise:awaitUninterruptibly(), DefaultAttributeMap$DefaultAttribute:getAndSet(Object), JdkLoggerFactory:newInstance(String), MqttConnAckVariableHeader:toString(), ConstantPool:exists(String), PendingWriteQueue:recycle(PendingWriteQueue$PendingWrite-boolean), EpollServerSocketChannelConfig:setPerformancePreferences(int-int-int), ChannelOutboundBuffer:progress(long), EventExecutor:schedule(Runnable-long-TimeUnit), DefaultTextHeaders:contains(CharSequence-CharSequence-boolean), MqttMessageIdVariableHeader:from(int), TrustManagerFactory:getInstance(String), EmptyBinaryHeaders:addTimeMillis(Object-long), DefaultHttp2ConnectionEncoder$FlowControlledHeaders:error(Throwable), Logger:trace(String-Object-Object), OpenSslEngine:<init>(long-ByteBufAllocator-String), EpollDatagramChannelConfig:setEpollMode(EpollMode), HttpContentDecoder:cleanup(), UnreleasableByteBuf:readSlice(int), DefaultFullHttpRequest:trailingHeaders(), EmptyHeaders:set(Object-Iterable), Channel$Unsafe:close(ChannelPromise), PromiseNotifier:<init>(Promise[]), LocalChannel:pipeline(), ByteBuf:setFloat(int-float), CompositeByteBuf:writeMedium(int), AbstractInternalLogger:error(String-Object), Unpooled:copyBoolean(boolean), EmptyHttp2Headers:<init>(), Lz4FrameEncoder:access$100(Lz4FrameEncoder-ChannelHandlerContext-ChannelPromise), DnsResponse:touch(), SpdyHttpResponseStreamIdHandler:decode(ChannelHandlerContext-Object-List), SpdySession:getReceiveWindowSizeLowerBound(int), HAProxyMessage:decodeHeader(ByteBuf), DefaultHttp2RemoteFlowController:connectionState(), ReplayingDecoderBuffer:readBytes(ByteBuf), SniHandler:sniHostNameFromHandshakeInfo(ByteBuf), HttpContent:refCnt(), AbstractNioByteChannel:doReadBytes(ByteBuf), DuplicatedByteBuf:_setShort(int-int), DefaultSocks5CommandResponse:toString(), ReplayingDecoderBuffer:getUnsignedByte(int), SctpMessage:refCnt(), ConcurrentHashMapV8$SearchKeysTask:quietlyCompleteRoot(), ReplayingDecoderBuffer:readUnsignedShort(), DnsServerAddresses:singleton(InetSocketAddress), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-ByteBuf[]), AbstractScheduledEventExecutor:nanoTime(), SpdySession:updateSendWindowSize(int-int), DuplicatedByteBuf:alloc(), DefaultHttp2LocalFlowController$FlowState:<init>(DefaultHttp2LocalFlowController-Http2Stream-int), ByteBufInputStream:readBytes(), BinaryWebSocketFrame:duplicate(), GlobalChannelTrafficShapingHandler:write(ChannelHandlerContext-Object-ChannelPromise), ThreadLocalRandom:setSeed(long), DefaultHttpContent:toString(), EmbeddedChannel$State:<init>(String-int), CountedCompleter:onCompletion(CountedCompleter), AbstractByteBuf:checkSrcIndex(int-int-int-int), PausableChannelEventExecutor$ChannelRunnableEventExecutor:executor(), WebSocketServerProtocolHandler:decode(ChannelHandlerContext-Object-List), ConcurrentHashMapV8$KeySetView:hashCode(), AdvancedLeakAwareByteBuf:getBytes(int-byte[]), DefaultTextHeaders:setObject(CharSequence-Object), DefaultChannelPromise:awaitUninterruptibly(), DefaultCookie:validateValue(String-String), Deflater:deflateInit(int-int-int-JZlib$WrapperType), ProxyHandler$1:operationComplete(ChannelFuture), DnsNameResolverContext:finishResolveWithIPv4(), CompactObjectOutputStream:writeStreamHeader(), DefaultHttp2ConnectionDecoder$FrameReadListener:onPingAckRead(ChannelHandlerContext-ByteBuf), DefaultChannelPipeline:get(String), DefaultOioSocketChannelConfig:setTcpNoDelay(boolean), NioUdtByteAcceptorChannel:<init>(), EmptyTextHeaders:setTimeMillis(Object-long), DefaultStompContentSubframe:duplicate(), DnsServerAddresses$SequentialAddressIterator:next(), DecoderResultProvider:setDecoderResult(DecoderResult), HttpData:delete(), Socks5AddressType:<clinit>(), DefaultHttp2Headers:<init>(), LengthFieldBasedFrameDecoder:getUnadjustedFrameLength(ByteBuf-int-int-ByteOrder), Log:isTraceEnabled(), ConcurrentHashMapV8$MapReduceValuesToIntTask:getRawResult(), AbstractReferenceCountedByteBuf:ensureWritable(int), ByteBufOutputStream:close(), AbstractInternalLogger:warn(String), SpdyHeaderBlockZlibDecoder:decompress(ByteBufAllocator-SpdyHeadersFrame), Http2ConnectionHandler:<init>(boolean-Http2FrameListener), DefaultTextHeaders:<init>(boolean), IpSubnetFilterRule$Ip6SubnetFilterRule:<clinit>(), SSLContext:createSSLEngine(String-int), OpenSslSessionStats:cacheFull(), Http2FrameListener:onPingAckRead(ChannelHandlerContext-ByteBuf), SctpNotificationHandler:handleNotification(AssociationChangeNotification-Object), CompositeByteBuf:writeFloat(float), DefaultChannelPipeline:addLast(EventExecutorGroup-String-ChannelHandler), AbstractEventExecutor:submit(Callable), OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise), CompositeByteBuf:writeBytes(ByteBuf-int-int), DefaultPromise:setFailure0(Throwable), JdkSslEngine:isInboundDone(), DefaultSpdyHeaders:addChar(Object-char), DefaultTextHeaders:<init>(boolean-boolean), EpollServerChannelConfig:setReuseAddress(boolean), InternalLogLevel:valueOf(String), ChannelHandlerInvokerUtil:invokeChannelWritabilityChangedNow(ChannelHandlerContext), WrappedByteBuf:setIndex(int-int), DefaultHttpHeaders$HttpHeadersNameConverter:validateName(AsciiString), PoolChunk:<init>(PoolArena-Object-int-int-int-int), DefaultSocks5PasswordAuthRequest:username(), RxtxChannel$RxtxUnsafe:access$200(RxtxChannel$RxtxUnsafe-ChannelPromise-Throwable), SlicedByteBuf:hasArray(), Native:setTcpKeepCnt(int-int), SystemPropertyUtil:contains(String), ByteBufUtil:writeAscii(ByteBuf-CharSequence), AbstractOioMessageChannel:isOpen(), Unpooled:wrappedBuffer(ByteBuf[]), DefaultEventExecutor:run(), ReadOnlyByteBuf:setLong(int-long), Http2CodecUtil$SimpleChannelPromiseAggregator:tryFailure(Throwable), DefaultHttp2LocalFlowController$FlowState:returnProcessedBytes(int), SSL:getCiphers(long), NativeDatagramPacketArray:add(DatagramPacket), UnsafeDirectSwappedByteBuf:setChar(int-int), UnpooledUnsafeDirectByteBuf:capacity(int), AbstractByteBuf:readByte(), AbstractChannel:deregister(ChannelPromise), AbstractNioMessageChannel:pipeline(), Http2Error:valueOf(String), MixedAttribute:delete(), Http2FrameListener:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf), SSLEngine:getDelegatedTask(), EncryptedPrivateKeyInfo:getAlgParameters(), Log4JLogger:trace(String-Throwable), UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer), WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), GlobalChannelTrafficShapingHandler:release(), ReferenceCountUtil:release(Object-int), DefaultUdtChannelConfig:setProtocolSendBufferSize(int), AbstractChannelHandlerContext:skipFlags(ChannelHandler), EmptyByteBuf:capacity(int), AbstractBinaryMemcacheDecoder$State:<clinit>(), PooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int), Http2Stream:removeProperty(Object), ByteToMessageCodec$1:<init>(ByteToMessageCodec), NioUdtAcceptorChannel:<clinit>(), AbstractChannelHandlerContext:bind(SocketAddress), AbstractNioChannel$AbstractNioUnsafe:removeReadOp(), DefaultOioSocketChannelConfig:setWriteSpinCount(int), ReplayingDecoderBuffer:nioBufferCount(), BinaryMemcacheResponseDecoder:channelInactive(ChannelHandlerContext), AsciiString:parseShort(int-int), PerMessageDeflateClientExtensionHandshaker:<init>(), ImmediateEventExecutor:execute(Runnable), DefaultBinaryHeaders:add(BinaryHeaders), DefaultLastHttpContent:retain(int), FileUpload:compareTo(Object), Socks5CommandRequest:type(), JdkZlibDecoder:handlerRemoved0(ChannelHandlerContext), SpdyHeaderBlockZlibEncoder:setInput(ByteBuf), PooledUnsafeDirectByteBuf:initUnpooled(PoolChunk-int), OpenSslEngine:setEnabledProtocols(String[]), SwappedByteBuf:forEachByte(ByteBufProcessor), UnpooledHeapByteBuf:_setLong(int-long), InternalAttribute:addValue(String-int), AbstractTrafficShapingHandler:setReadLimit(long), DefaultHttp2RemoteFlowController$FlowState:clear(), DefaultUdtChannelConfig:getOptions(Map-ChannelOption[]), DefaultSocketChannelConfig:setMaxMessagesPerRead(int), DefaultConvertibleHeaders:setChar(Object-char), NioSctpServerChannel:eventLoop(), SpdyVersion:getMinorVersion(), DefaultHttp2LocalFlowController$FlowState:consumeBytes(ChannelHandlerContext-int), ForkJoinPool:getUnsafe(), Unpooled:copiedBuffer(CharSequence-Charset), SpdySessionHandler:exceptionCaught(ChannelHandlerContext-Throwable), DefaultTextHeaders$SingleHeaderValuesComposer:setObject(CharSequence-Object[]), AbstractChannelHandlerContext:write(Object-ChannelPromise), AbstractChannelHandlerContext:handler(), DefaultChannelPipeline:generateName(ChannelHandler), DefaultHttp2RemoteFlowController:windowSize(Http2Stream), WrappedByteBuf:writeShort(int), DefaultSpdyHeaders:clear(), ChannelOutboundBuffer:getUserDefinedWritability(int), AbstractEventLoop:<init>(EventLoopGroup), Socks5InitialResponse:version(), RxtxChannelConfig$Stopbits:value(), PausableChannelEventExecutor:invokeClose(ChannelHandlerContext-ChannelPromise), ServerBootstrap$ServerBootstrapAcceptor:<init>(EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), SwappedByteBuf:memoryAddress(), OpenSslX509Certificate:getSubjectDN(), DefaultChannelPipeline$6:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), DefaultChannelPipeline$HeadContext:write(ChannelHandlerContext-Object-ChannelPromise), NioServerSocketChannel:<init>(ServerSocketChannel), NioServerSocketChannel:<init>(SelectorProvider), AbstractReferenceCountedByteBuf:resetWriterIndex(), ConcurrentHashMapV8$KeySetView:equals(Object), PooledHeapByteBuf:checkSrcIndex(int-int-int-int), DefaultFullHttpResponse:copy(ByteBuf), ScheduledFutureTask$1:run(), DefaultStompHeadersSubframe:<init>(StompCommand), DefaultTextHeaders:setObject(Object-Iterable), AbstractInternalLogger:<init>(String), CommonsLogger:debug(String), RxtxChannelConfig:getOption(ChannelOption), InternalThreadLocalMap:random(), EmptyByteBuf:setBytes(int-InputStream-int), RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse), RtspResponseStatuses:<init>(), DefaultHttp2LocalFlowController:consumeBytes(ChannelHandlerContext-Http2Stream-int), MemoryAttribute:retain(), DuplicatedByteBuf:setBytes(int-byte[]-int-int), ChannelHandlerAppender:<init>(Iterable), Lz4FrameDecoder$State:<init>(String-int), DefaultChannelConfig:setWriteBufferLowWaterMark(int), MqttFixedHeader:remainingLength(), Native:epollrdhup(), RtspHeaderNames:<clinit>(), Slf4JLogger:isDebugEnabled(), EmptyByteBuf:readBytes(byte[]), SpdyOrHttpChooser$SelectedProtocol:protocol(String), Lz4FrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ProxyHandler:handlerAdded(ChannelHandlerContext), Recycler$DefaultHandle:access$100(Recycler$DefaultHandle), HttpPostRequestDecoder:cleanFiles(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:addToPendingCount(int), BinaryWebSocketFrame:rsv(), JZlibEncoder:access$100(JZlibEncoder-ChannelHandlerContext-ChannelPromise), SpdyHeaderBlockDecoder:newInstance(SpdyVersion-int), MixedFileUpload:get(), DefaultUdtChannelConfig:getReceiveBufferSize(), SwappedByteBuf:setBytes(int-ByteBuffer), InternalAttribute:toByteBuf(), DelimiterBasedFrameDecoder:<init>(int-ByteBuf), LZ4Factory:fastDecompressor(), SingleThreadEventExecutor:schedule(ScheduledFutureTask), AbstractDerivedByteBuf:release(int), SpdyHeaders:set(CharSequence-CharSequence), OioSctpChannel$1:run(), ConcurrentHashMapV8$TreeBin:find(int-Object), PoolSubpage:findNextAvail(), Signal:<clinit>(), FastThreadLocal:initialValue(), ThreadLocalRandom:nextDouble(), AdvancedLeakAwareByteBuf:readBytes(ByteBuf-int-int), WebSocketServerProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable), DefaultConvertibleHeaders$ConvertedEntry:setValue(Object), DnsNameResolver:executor(), AbstractChannel:newFailedFuture(Throwable), DefaultByteBufHolder:release(int), ZlibUtil:fail(Inflater-String-int), StringUtil:toHexStringPadded(Appendable-byte[]-int-int), Log4JLogger:info(String-Object), FullHttpResponse:content(), ChannelHandlerAppender:handlerAdded(ChannelHandlerContext), MultithreadEventExecutorGroup:terminationFuture(), OioSctpServerChannel:<clinit>(), ClassResolvers:weakCachingConcurrentResolver(ClassLoader), SSLSession:isValid(), DefaultOioServerSocketChannelConfig:getOptions(), ServerBootstrap$ServerBootstrapAcceptor:channelRead(ChannelHandlerContext-Object), OioSctpChannel:config(), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(ByteBuf), DefaultEventLoop:confirmShutdown(), AbstractChannelHandlerContext:writeAndFlush(Object), ByteBuf:capacity(), ConcurrentHashMapV8$ReduceEntriesTask:compute(), SlicedByteBuf:_getUnsignedMedium(int), Channel$Unsafe:disconnect(ChannelPromise), Native:connect(int-SocketAddress), EpollSocketChannelConfig:setKeepAlive(boolean), DefaultChannelPromise:syncUninterruptibly(), DefaultAddressedEnvelope:<init>(Object-SocketAddress), CompositeByteBuf:getBytes(int-ByteBuf-int-int), Native:getSoLinger(int), PlatformDependent0:<init>(), EmptyBinaryHeaders:setBoolean(Object-boolean), DefaultHttp2Connection$DefaultProperyMap:<init>(int), ContinuationWebSocketFrame:copy(), DefaultHttp2Connection$DefaultStream:notifyHalfClosed(Http2Stream), DefaultPromise:rethrowIfFailed(), ReadOnlyByteBufferBuf:ensureAccessible(), DefaultChannelId:defaultProcessId(), OpenSslServerContext:<init>(File-File), DefaultHeaders:addInt(Object-int), ByteBuf:unwrap(), DefaultConvertibleHeaders:get(Object), EventExecutor:submit(Runnable), DefaultSctpServerChannelConfig:setSendBufferSize(int), DefaultConvertibleHeaders$ConvertedEntry:getValue(), EpollDatagramChannelConfig:setAllocator(ByteBufAllocator), LocalChannel$State:valueOf(String), DefaultHttp2Headers:<init>(boolean), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String), HttpClientUpgradeHandler:decode(ChannelHandlerContext-Object-List), ContextBoundUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), NioSctpServerChannel:<init>(), ConcurrentHashMapV8$MapReduceValuesToLongTask:advance(), SSLEngine:getEnabledCipherSuites(), EmbeddedChannel$State[]:clone(), DefaultLastMemcacheContent:duplicate(), SctpChannel:association(), RunnableEventExecutorAdapter:executor(), DefaultSpdyHeadersFrame:setLast(boolean), DefaultHttp2Connection:isServer(), JcaContentSignerBuilder:<init>(String), SctpMessage:retain(), SwappedByteBuf:touch(Object), DefaultHttp2FrameReader:readGoAwayFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultBinaryHeaders:addBoolean(Object-boolean), LocalChannel$LocalUnsafe:<init>(LocalChannel), DefaultHttp2RemoteFlowController$1:compare(Object-Object), PoolThreadCache:cacheForNormal(PoolArena-int), Lz4FrameDecoder$State:<clinit>(), DefaultSpdyHeaders:set(Object-Object), AbstractReferenceCountedByteBuf:readBytes(ByteBuf), SpdySynStreamFrame:streamId(), InboundHttp2ToHttpPriorityAdapter$Builder:build(), DefaultHttpResponse:setStatus(HttpResponseStatus), FullBinaryMemcacheResponse:setExtrasLength(byte), TextWebSocketFrame:isFinalFragment(), DefaultHeaders:getLong(Object), DnsServerAddresses:<init>(), UnpooledDirectByteBuf:getShort(int), Socks5CommandStatus:compareTo(Socks5CommandStatus), PlatformDependent:newConcurrentHashMap(int-float), SlicedByteBuf:isDirect(), ForkJoinTask:setRawResult(Object), HttpResponseEncoder:acceptOutboundMessage(Object), OioByteStreamChannel:setReadPending(boolean), DefaultChannelHandlerInvoker:invokeUserEventTriggered(ChannelHandlerContext-Object), PlatformDependent:canEnableTcpNoDelayByDefault(), RecyclableArrayList:addAll(int-Collection), Unsafe:arrayBaseOffset(Class), ByteBufUtil:swapInt(int), DiskFileUpload:getHttpDataType(), AbstractEventExecutor:newFailedFuture(Throwable), PooledDirectByteBuf:internalNioBuffer(int-int), FixedCompositeByteBuf:setShort(int-int), ProxyHandler:protocol(), CorsHandler:setAllowHeaders(HttpResponse), NioDatagramChannel:unsafe(), WrappedByteBuf:readUnsignedInt(), MqttDecoder:decodePublishVariableHeader(ByteBuf-MqttFixedHeader), AdvancedLeakAwareByteBuf:release(int), NioUdtMessageConnectorChannel:<init>(TypeUDT), Http2FrameLogger:logWindowsUpdate(Http2FrameLogger$Direction-int-int), SslHandler:allocate(ChannelHandlerContext-int), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), IntObjectMap:containsValue(Object), OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), Http2ConnectionHandler:encoder(), RxtxChannelConfig$Databits[]:clone(), Socks5InitialResponseDecoder$State:<clinit>(), PooledDirectByteBuf:internalNioBuffer(), EncoderException:<init>(Throwable), Bzip2HuffmanStageDecoder:<init>(Bzip2BitReader-int-int), ReferenceMap:isEmpty(), SingleThreadEventExecutor:runAllTasks(), DefaultSocketChannelConfig:setAllocator(ByteBufAllocator), EmptyConvertibleHeaders:setBoolean(Object-boolean), SctpChannelOption:<clinit>(), OioSocketChannel:localAddress0(), ChannelFutureListener$3:operationComplete(Future), JdkZlibDecoder:<init>(), DefaultTextHeaders:setBoolean(CharSequence-boolean), SpdyHttpResponseStreamIdHandler:<clinit>(), DefaultStompHeaders:setInt(CharSequence-int), TextWebSocketFrame:retain(int), DefaultSocketChannelConfig:isKeepAlive(), WebSocketClientHandshaker:isHandshakeComplete(), AdaptiveRecvByteBufAllocator:<clinit>(), ReadOnlyUnsafeDirectByteBuf:_getByte(int), ChannelTrafficShapingHandler:<init>(long-long-long), CloseWebSocketFrame:isFinalFragment(), OioSocketChannel:activate(InputStream-OutputStream), MessageAggregationException:<init>(String), ConcurrentHashMapV8$ForEachEntryTask:advance(), InternalLogLevel[]:clone(), EpollSocketChannelConfig:setTcpCork(boolean), Http2FrameListenerDecorator:onPingRead(ChannelHandlerContext-ByteBuf), AbstractNioChannel:javaChannel(), DefaultDatagramChannelConfig:setAutoRead(boolean), ChannelTrafficShapingHandler:handlerAdded(ChannelHandlerContext), Socks5CommandResponse:status(), NioEventLoop:wakeup(boolean), PlatformDependent0:getContextClassLoader(), DefaultHeaders:containsLong(Object-long), Native:setBroadcast(int-int), Socks5InitialResponseDecoder$1:<clinit>(), CipherSuiteConverter:cacheFromOpenSsl(String), DefaultHttp2Connection$LazyPropertyMap:put(Object-Object), AsciiString:lastIndexOf(CharSequence), DefaultHttpHeaders:addInt(Object-int), ZlibDecoder:<init>(), DefaultUdtServerChannelConfig:validate(ChannelOption-Object), ByteBufInputStream:skipBytes(int), AbstractDiskHttpData:setCompleted(), Unpooled:buffer(int), PausableChannelEventExecutor:invokeAll(Collection), ByteArrayEncoder:<init>(), DnsNameResolver:access$300(DnsNameResolver), EpollSocketChannelConfig:setPerformancePreferences(int-int-int), NioUdtProvider:newRendezvousChannelUDT(TypeUDT), PerFrameDeflateDecoder:acceptInboundMessage(Object), InternalThreadLocalMap:futureListenerStackDepth(), EpollDomainSocketChannel$EpollDomainUnsafe:voidPromise(), UnpooledUnsafeDirectByteBuf:setIndex(int-int), MqttEncoder:getVariableLengthInt(int), DefaultBinaryHeaders$2:convertToChar(Object), ByteToMessageCodec:channelRead(ChannelHandlerContext-Object), SslHandler:access$600(SslHandler), Inflater:inflate(int), InternalLogger:warn(String-Throwable), HttpClientUpgradeHandler:decode(ChannelHandlerContext-HttpObject-List), HttpPostRequestDecoder$MultiPartStatus[]:clone(), GlobalEventExecutor:access$200(GlobalEventExecutor), Signal:valueOf(String), EpollDatagramChannel:filterOutboundMessage(Object), UnpooledHeapByteBuf:_setInt(int-int), FixedCompositeByteBuf:<init>(ByteBufAllocator-ByteBuf[]), AbstractMemcacheObjectAggregator:isContentMessage(MemcacheObject), Logger:warn(String-Throwable), Bzip2HuffmanStageEncoder:encode(ByteBuf), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:fork(), GlobalChannelTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService), PoolArena:newSubpagePoolArray(int), AbstractMemcacheObjectAggregator:contentLength(MemcacheMessage), DefaultChannelHandlerInvoker$9:run(), ChannelFlushPromiseNotifier:notifyPromises(Throwable), ObjectEncoderOutputStream:writeChars(String), Lz4Constants:<init>(), DnsQueryHeader:setRecursionDesired(boolean), AbstractByteBuf:bytesBefore(int-byte), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int), Http2Settings:headerTableSize(int), OioSctpServerChannel:isActive(), LengthFieldPrepender:<init>(int), FastThreadLocal:removeAll(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), AbstractBootstrap:bind(InetAddress-int), AbstractBinaryMemcacheDecoder:actualReadableBytes(), DefaultHttp2Connection$PropertyMap:get(Object), ConcurrentHashMapV8$EntrySetView:containsAll(Collection), ReplayingDecoderBuffer:writeShort(int), PerMessageDeflateServerExtensionHandshaker:<init>(), Log:isWarnEnabled(), SerialPort:close(), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress), NioDatagramChannel:block(InetAddress-InetAddress), UnpooledUnsafeDirectByteBuf:_getByte(int), DefaultEventExecutor:cleanupAndTerminate(boolean), EmbeddedEventLoop:pollScheduledTask(long), DefaultHttp2ConnectionDecoder$FrameReadListener:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf), InsecureTrustManagerFactory$1:checkServerTrusted(X509Certificate[]-String), DnsQueryContext:onQueryWriteCompletion(ChannelFuture-InetSocketAddress), MessageFormatter:longArrayAppend(StringBuffer-long[]), Headers$ValueConverter:convertShort(short), DefaultSocketChannelConfig:getSoLinger(), AbstractByteBuf:discardReadBytes(), Socks5InitialResponseDecoder:fail(List-Throwable), AbstractMemoryHttpData:getChunk(int), ChannelOutboundBuffer$1:initialValue(), ChannelMetadata:hasDisconnect(), FileUpload:isInMemory(), QueryStringDecoder:<init>(URI), PooledUnsafeDirectByteBuf:checkIndex(int-int), LzfDecoder$State:<init>(String-int), ProxyConnectException:<init>(String-Throwable), DuplicatedByteBuf:forEachByte(int-int-ByteBufProcessor), JdkZlibDecoder:decode(ChannelHandlerContext-ByteBuf-List), QueryStringDecoder:decodeParams(String), EpollSocketChannelConfig:setAllocator(ByteBufAllocator), NioSctpServerChannel$2:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), PooledHeapByteBuf:_getShort(int), Inflater:inflateEnd(), Delimiters:<init>(), CompressorHttp2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), DefaultBinaryHeaders:addInt(Object-int), BinaryMemcacheResponseDecoder:decodeHeader(ByteBuf), CompleteChannelFuture:getNow(), ReadOnlyByteBuf:forEachByteDesc(int-int-ByteBufProcessor), SocketUDT:setSendBufferSize(int), JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), AsciiString:parseShort(int), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToDouble(CharSequence), ChunkedWriteHandler:write(ChannelHandlerContext-Object-ChannelPromise), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), ThreadPerChannelEventLoopGroup:isTerminated(), AbstractEpollChannel:<init>(Channel-FileDescriptor-int-boolean), AbstractNioByteChannel:doWrite(ChannelOutboundBuffer), DefaultHttp2Connection$DefaultStream:weight(), InternetProtocolFamily:valueOf(String), AdvancedLeakAwareByteBuf:readUnsignedShort(), Unpooled:copyFloat(float[]), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:compute(), ZlibCodecFactory:newZlibEncoder(int-byte[]), AbstractMemcacheObjectEncoder:contentLength(Object), ScheduledFutureTask:<clinit>(), FileUpload:touch(Object), Bzip2Encoder$1:<init>(Bzip2Encoder-ChannelPromise), ConcurrentHashMapV8$TreeBin:lockRoot(), DefaultHeaders$KeyValueHeaderIterator:next(), CompositeByteBuf:array(), Bzip2Decoder$State:ordinal(), HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int), OioServerSocketChannel:newServerSocket(), AsciiString:<init>(byte[]), JdkBaseApplicationProtocolNegotiator:protocols(), SSLSession:getValue(String), DefaultHttp2Headers:set(AsciiString-AsciiString[]), AbstractNioByteChannel$NioByteUnsafe:voidPromise(), ReplayingDecoderBuffer:bytesBefore(int-int-byte), UnpooledDirectByteBuf:_getInt(int), DefaultServerSocketChannelConfig:setReuseAddress(boolean), PooledHeapByteBuf:<clinit>(), JdkNpnSslEngine$2:<init>(JdkNpnSslEngine-JdkApplicationProtocolNegotiator$ProtocolSelector), IdleStateHandler:initialize(ChannelHandlerContext), TrafficCounter:readTimeToWait(long-long-long), ChannelHandler:write(ChannelHandlerContext-Object-ChannelPromise), DefaultChannelId:parseMachineId(String), AbstractNioChannel:doBeginRead(), ConcurrentHashMapV8$MapReduceValuesToIntTask:firstComplete(), NioUdtMessageConnectorChannel:doReadMessages(List), CompositeByteBuf:toString(), GlobalChannelTrafficShapingHandler$1$1:next(), ByteBuf:skipBytes(int), AbstractByteBuf:nioBuffer(int-int), SctpMessage:equals(Object), HttpResponseEncoder:<init>(), DefaultTextHeaders$MultipleFieldsValueComposer:<init>(DefaultTextHeaders), DefaultTextHeaders:setBoolean(Object-boolean), DiskAttribute:content(), DefaultUdtServerChannelConfig:setReuseAddress(boolean), Socks5AddressEncoder$1:encodeAddress(Socks5AddressType-String-ByteBuf), DefaultHeaders:contains(Object-Object-Comparator), ByteBuf:maxWritableBytes(), Http2FrameLogger:logRstStream(Http2FrameLogger$Direction-int-long), CertificateVersion:<init>(int), ConcurrentHashMapV8:keySet(Object), ReplayingDecoderBuffer:<clinit>(), UnpooledHeapByteBuf:checkIndex(int-int), DefaultFileRegion:open(), MixedAttribute:renameTo(File), Native:localAddress(int), EpollSocketChannel:tcpInfo(), ForkJoinPool:newTaskFor(Callable), XXHashFactory:fastestInstance(), Http2OrHttpChooser$SelectedProtocol:protocolName(), Base64Dialect[]:clone(), DefaultTextHeaders$SingleHeaderValuesComposer:set(CharSequence-Iterable), WrappedByteBuf:indexOf(int-int-byte), Unsafe:getIntVolatile(Object-long), Native:write(int-ByteBuffer-int-int), UnsafeDirectSwappedByteBuf:setLong(int-long), ProxyHandler:channelActive(ChannelHandlerContext), DefaultBinaryMemcacheRequest:touch(), ByteBufUtil:indexOf(ByteBuf-int-int-byte), DelegatingDecompressorFrameListener$ConsumedBytesConverter:incrementWindowSize(ChannelHandlerContext-Http2Stream-int), UnsafeDirectSwappedByteBuf:getLong(int), Unsafe:getShort(long), CompositeByteBuf:_getLong(int), Socks5CommandRequestDecoder$State:values(), DefaultBinaryHeaders:setFloat(Object-float), UnpooledHeapByteBuf:_getUnsignedMedium(int), LocalChannel:doClose(), SwappedByteBuf:duplicate(), ReplayingDecoderBuffer:touch(Object), AbstractByteBuf:adjustMarkers(int), AbstractEpollStreamChannel:writeBytesMultiple(ChannelOutboundBuffer-IovArray-int), LzmaFrameEncoder:<init>(int-int-int-int-boolean-int), Base64Encoder:encode(ChannelHandlerContext-ByteBuf-List), LocalChannel$2:run(), DefaultSpdyGoAwayFrame:toString(), DnsServerAddresses$ShuffledAddressIterator:shuffle(), DnsResponseCode:<clinit>(), WebSocketFrameAggregator:beginAggregation(Object-ByteBuf), EmptyBinaryHeaders:addTimeMillis(AsciiString-long), LimitingByteInput:<init>(ByteInput-long), SocksPortUnificationServerHandler:logKnownVersion(ChannelHandlerContext-SocksVersion), ReadOnlyByteBufferBuf:_setMedium(int-int), MqttEncoder:encodeSubAckMessage(ByteBufAllocator-MqttSubAckMessage), MixedAttribute:isCompleted(), TrafficCounter:stop(), ConcurrentHashMapV8$CollectionView:size(), DefaultHttp2Connection$1:removeStream(Http2Stream), ChannelHandler:userEventTriggered(ChannelHandlerContext-Object), Socks5PasswordAuthStatus:compareTo(Object), ReplayingDecoderBuffer:retain(), AsciiString$2:compare(AsciiString-AsciiString), LogLevel:valueOf(String), DefaultHttp2Connection$DefaultStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List), ByteArrayEncoder:encode(ChannelHandlerContext-byte[]-List), DefaultChannelPipeline$HeadContext:read(ChannelHandlerContext), EpollDomainSocketChannel:newUnsafe(), SwappedByteBuf:maxCapacity(), AdvancedLeakAwareByteBuf:toString(Charset), HttpObjectAggregator:access$000(), TypeUDT:ordinal(), DefaultUdtServerChannelConfig:setWriteBufferHighWaterMark(int), MqttIdentifierRejectedException:<init>(Throwable), DefaultChannelPipeline:first(), EmptyByteBuf:compareTo(ByteBuf), BinaryMemcacheClientCodec$Decoder:decode(ChannelHandlerContext-ByteBuf-List), Socks4ProxyHandler:<init>(SocketAddress-String), FileDescriptor:<init>(int), SlicedByteBuf:internalNioBuffer(int-int), HttpServerUpgradeHandler$UpgradeCodec:protocol(), HttpServerUpgradeHandler$1:operationComplete(ChannelFuture), ProxyHandler:newInitialMessage(ChannelHandlerContext), Socks4CommandType:valueOf(byte), AbstractMemcacheObjectAggregator:isLastContentMessage(MemcacheContent), JdkSslEngine:getEnabledProtocols(), AbstractMemcacheObjectAggregator:contentLength(Object), OioSctpServerChannel:newServerSocket(), AbstractByteBufAllocator:compositeHeapBuffer(), DefaultHeaders:containsDouble(Object-double), SSLEngine:closeInbound(), LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), PoolThreadCache:trim(), AbstractChannel:attr(AttributeKey), NioServerSocketChannel:access$100(NioServerSocketChannel-boolean), CompositeByteBuf:discardReadBytes(), Http2ConnectionEncoder:pollSentSettings(), DefaultHttp2Headers:add(AsciiString-AsciiString[]), Bzip2DivSufSort:trMedian3(int-int-int-int-int-int), IdleStateHandler$WriterIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), JdkSslSession:getPeerCertificates(), DefaultHttp2RemoteFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int), Socks5PasswordAuthStatus:<clinit>(), ChannelMatchers:<clinit>(), EpollDomainSocketChannel$EpollDomainUnsafe:clearEpollIn0(), LastMemcacheContent$1:touch(), NioSocketChannel:isInputShutdown(), Decoder:getMaxHeaderTableSize(), PingWebSocketFrame:rsv(), ByteToMessageDecoder:<init>(), DefaultSocks5CommandResponse:<init>(Socks5CommandStatus-Socks5AddressType-String-int), DefaultFullHttpRequest:hashCode(), CompositeByteBuf:setByte(int-int), GlobalTrafficShapingHandler$1:run(), HttpServerCodec:encoder(), BinaryMemcacheRequest:reserved(), LastMemcacheContent$1:setDecoderResult(DecoderResult), Attribute:setCharset(Charset), AbstractReferenceCounted:touch(), DefaultSctpChannelConfig:getReceiveBufferSize(), OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), SwappedByteBuf:copy(int-int), HttpUtil$1:<init>(), AbstractRemoteAddressFilter:handleNewChannel(ChannelHandlerContext), ForkJoinPool:tryCompensate(long), ReadOnlyByteBuf:nioBufferCount(), MessageToMessageCodec$2:decode(ChannelHandlerContext-Object-List), DefaultLastHttpContent:<init>(), FailedFuture:sync(), DefaultChannelGroupFuture:trySuccess(Void), PlatformDependent0:hasUnsafe(), Socks5CommandStatus:<init>(int-String), ForkJoinPool:submit(ForkJoinTask), AsciiString:parseLong(int-int-int-boolean), Recycler:access$1400(), WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List), FixedCompositeByteBuf:_getUnsignedMedium(int), ByteBufOutputStream:writeByte(int), PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean), Http2Settings:<init>(int-float), AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf-int), MessageToMessageCodec:acceptOutboundMessage(Object), DefaultBinaryHeaders:addObject(Object-Iterable), CookieEncoderUtil:<init>(), DefaultHeaders:convertName(Object), ChannelOption:<init>(int-String-ChannelOption$1), NioDatagramChannel:doDisconnect(), AsciiString:<init>(char[]-int-int), AbstractInternalLogger:error(Throwable), WebSocket00FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), OpenSslContext:isClient(), ChannelOption:exists(String), DefaultChannelPipeline$HeadContext:close(ChannelHandlerContext-ChannelPromise), ObjectEncoderOutputStream:writeByte(int), Cookie:value(), SingleThreadEventExecutor:cleanupAndTerminate(boolean), SpdyHeaderBlockZlibEncoder:end(), SpdySession:acceptStream(int-byte-boolean-boolean-int-int-boolean), WebSocketFrame:copy(), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf$1:<init>(), LocalChannel$State:<clinit>(), Bootstrap:attrs(), NioServerSocketChannel:setReadPending(boolean), FastThreadLocalThread:<init>(ThreadGroup-Runnable), SingleThreadEventExecutor:startExecution(), Bzip2HuffmanAllocator:allocateNodeLengthsWithRelocation(int[]-int-int), SimpleTrustManagerFactory$2:initialValue(), NotSslRecordException:<init>(Throwable), JdkNpnApplicationProtocolNegotiator:protocolListenerFactory(), LocalChannel$LocalUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), DnsNameResolver$DnsResponseHandler:channelRead(ChannelHandlerContext-Object), DefaultHttp2RemoteFlowController$FlowState:access$312(DefaultHttp2RemoteFlowController$FlowState-int), DefaultHttp2Connection$DefaultStream:isLeaf(), UnpooledUnsafeDirectByteBuf:maxCapacity(), WebSocketServerProtocolHandler:forbiddenHttpRequestResponder(), WrappedByteBuf:writeFloat(float), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), AdaptiveRecvByteBufAllocator:<init>(int-int-int), HttpClientUpgradeHandler:removeThisHandler(ChannelHandlerContext), MqttDecoder:decodeAsciiString(ByteBuf), Socks5InitialRequestDecoder:actualReadableBytes(), EpollDatagramChannel$EpollDatagramChannelUnsafe:<clinit>(), AbstractInternalLogger:trace(String), DelegatingDecompressorFrameListener:initDecompressor(int-Http2Headers-boolean), AbstractBinaryMemcacheDecoder:buildInvalidMessage(), SSLContext:setVerify(long-int-int), GlobalChannelTrafficShapingHandler:configureChannel(long-long), DefaultHttp2FrameWriter:verifyStreamId(int-String), SpdyFrameDecoderDelegate:readSettingsFrame(boolean), Http2Exception:isStreamError(Http2Exception), EmptyHeaders:setObject(Object-Object), AbstractChannelHandlerContext:skipFlags0(Class), Bzip2DivSufSort:trMedian5(int-int-int-int-int-int-int-int), DnsServerAddresses$3$1:remove(), DefaultHttp2Headers:addObject(AsciiString-Object), AbstractChannel$PausableChannelEventLoop:next(), OioSctpServerChannel:doDisconnect(), EmbeddedChannel:flush(), DefaultHttp2FrameReader$HeadersContinuation:close(), CharsetUtil:<init>(), ConcurrentHashMapV8$ValuesView:remove(Object), ConcurrentHashMapV8$Segment:<init>(float), ConcurrentHashMapV8$ForEachTransformedValueTask:compute(), DefaultTextHeaders:setObject(Object-Object[]), DefaultStompHeaders:set(CharSequence-Iterable), LoggingHandler:formatByteBufHolder(ChannelHandlerContext-String-ByteBufHolder), ClientCookieDecoder$CookieBuilder:setExpire(String), IntObjectHashMap:putAll(IntObjectMap), DefaultStompHeaders:add(TextHeaders), EmptyHttp2Headers:scheme(AsciiString), DiskFileUpload:duplicate(), FullBinaryMemcacheResponse:setOpcode(byte), RtspResponseDecoder:<init>(), JdkAlpnApplicationProtocolNegotiator:protocols(), JdkBaseApplicationProtocolNegotiator$1:<init>(), NioEventLoop:openSelector(), ScheduledFutureTask:scheduleWithNewExecutor(), AbstractByteBuf:getBytes(int-byte[]-int-int), HttpClientCodec:add(ChannelHandler), ApplicationProtocolConfig$Protocol:<clinit>(), Headers$ValueConverter:convertToChar(Object), AbstractBootstrap$PendingRegistrationPromise:<init>(Channel), GlobalEventExecutor:takeTask(), WriteTimeoutHandler$2:operationComplete(ChannelFuture), ConcurrentHashMapV8$KeySpliterator:tryAdvance(ConcurrentHashMapV8$Action), DefaultHttp2Connection:stream(int), EpollDatagramChannel:fd(), RxtxChannel:localAddress(), WebSocketFrameAggregator:hasContentLength(Object), ServerBootstrap$ServerBootstrapAcceptor$1:operationComplete(Future), DatagramChannel:writeAndFlush(Object), MqttDecoder:decodeFixedHeader(ByteBuf), AbstractByteBuf:getBytes(int-ByteBuf-int), DefaultLastStompContentSubframe:decoderResult(), ByteBufProcessor$7:<init>(), DefaultHttp2Connection:local(), HttpContentEncoder:encode(ChannelHandlerContext-Object-List), DefaultChannelPipeline:remove(String), EpollEventArray:events(int), EmptyHttp2Headers:add(AsciiString-AsciiString[]), AbstractByteBuf:readBytes(OutputStream-int), ReplayingDecoder:checkpoint(), SctpInboundByteStreamHandler:acceptInboundMessage(Object), MessageToByteEncoder:write(ChannelHandlerContext-Object-ChannelPromise), Http2FrameReader:configuration(), IntObjectHashMap$IteratorImpl:remove(), Http2Headers:get(Object), EmptyBinaryHeaders:add(Object-Object), AbstractByteBuf:readBoolean(), DefaultByteBufHolder:duplicate(), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean), LzmaFrameEncoder:<init>(int), SSL:getShutdown(long), SctpChannelOption:<init>(), EventLoop:isShuttingDown(), AbstractEpollChannel:doDisconnect(), PoolArena:smallIdx(int), ChannelBufferByteInput:<init>(ByteBuf), DefaultUdtServerChannelConfig:getOptions(Map-ChannelOption[]), AsciiString:charAt(int), ResourceLeakDetector:<init>(String-int-long), ProxyHandler$LazyChannelPromise:tryFailure(Throwable), DefaultConvertibleHeaders:getAllAndRemoveAndConvert(Object), DefaultBinaryMemcacheRequest:release(int), DefaultConvertibleHeaders:setInt(Object-int), CompositeByteBuf:skipBytes(int), SpdyHeaderBlockZlibDecoder:setInput(ByteBuf), ChannelPipeline:replace(String-String-ChannelHandler), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int), ObjectDecoderInputStream:reset(), PooledDirectByteBuf:_getUnsignedMedium(int), CompactObjectInputStream:readObject(), DnsQueryContext$1:operationComplete(Future), CompositeByteBuf:_setInt(int-int), GlobalChannelTrafficShapingHandler:computeDeviationCumulativeBytes(), DefaultHttp2Connection$DefaultEndpoint:acceptingNewStreams(), DatagramChannel:pipeline(), Http2ClientUpgradeCodec:<init>(String-Http2ConnectionHandler), DefaultHttp2FrameReader:readPriorityFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), ReflectiveChannelFactory:newChannel(), AdvancedLeakAwareByteBuf:writeShort(int), DefaultChannelPipeline$TailContext:<clinit>(), JdkNpnSslEngine:closeOutbound(), ConcurrentHashMapV8:sumCount(), FastThreadLocal:get(), AbstractEpollServerChannel:isFlagSet(int), AbstractByteBuf:order(ByteOrder), JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-List), WrappedByteBuf:duplicate(), DefaultStompHeaders:addObject(Object-Iterable), IpSubnetFilterRule$Ip6SubnetFilterRule:matches(InetSocketAddress), DefaultSpdyDataFrame:retain(int), JdkSslServerContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long), PlatformDependent:hasUnsafe0(), PrimitiveCollections$UnmodifiableIntObjectMap:containsKey(int), WebSocketClientHandshaker08:<clinit>(), GenericFutureListener:operationComplete(Future), MemoryFileUpload:getName(), ChannelBufferByteOutput:<init>(ByteBuf), ScheduledFuture:cancel(boolean), EpollEventLoop:inEventLoop(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultSpdyHeaders:set(Object-Iterable), DefaultHttp2RemoteFlowController:writePendingBytes(), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<clinit>(), IpSubnetFilterRule$Ip4SubnetFilterRule:<clinit>(), AbstractNioMessageChannel:doWriteMessage(Object-ChannelOutboundBuffer), DefaultBinaryMemcacheResponse:<init>(String-ByteBuf), DefaultBinaryHeaders$1:generateHashCode(AsciiString), DefaultSpdySettingsFrame:setValue(int-int), AbstractEventExecutor:shutdownGracefully(), WrappedByteBuf:maxWritableBytes(), Socks5AddressType:toString(), WebSocketServerProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object), EmptyHttpHeaders:set(Object-Object), CorsConfig:getValue(Callable), UdtMessage:retain(int), MqttDecoder:state(), UniqueIpFilter:accept(ChannelHandlerContext-InetSocketAddress), DefaultBinaryMemcacheRequest:<init>(ByteBuf), HttpServerUpgradeHandler$UpgradeEvent:release(int), Bzip2DivSufSort:constructBWT(int[]-int[]), WebSocketClientHandshaker:access$000(), NioEventLoop:isShutdown(), HttpUtil$1:add(Object), ByteBuf:markWriterIndex(), CompositeByteBuf:checkComponentIndex(int), BinaryMemcacheResponse:setMagic(byte), SnappyFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle-ThreadLocalPooledDirectByteBuf$1), CodecUtil:ensureNotSharable(ChannelHandlerAdapter), OioSctpChannel:newPromise(), SpdyHeaderBlockRawEncoder:end(), EventExecutor:awaitTermination(long-TimeUnit), AbstractChannel:access$002(AbstractChannel-AbstractChannel$PausableChannelEventLoop), ConcurrentHashMapV8$SearchValuesTask:propagateCompletion(), SwappedByteBuf:writeBytes(ByteBuf-int-int), DefaultHttpHeaders:addLong(CharSequence-long), SSLEngine:isOutboundDone(), DatagramChannel:config(), PoolChunkList:add(PoolChunk), AsciiString:toUpperCase(byte), AbstractNioChannel:selectionKey(), Http2InboundFrameLogger$1:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int), JdkNpnSslEngine$1:unsupported(), ChannelOutboundBuffer$Entry:<init>(Recycler$Handle-ChannelOutboundBuffer$1), IpSubnetFilterRule:matches(InetSocketAddress), Socks5ServerEncoder:encodeAuthMethodResponse(Socks5InitialResponse-ByteBuf), AsciiString:byteAt(int), LoggingHandler:<init>(String), ResourceLeakDetector:<clinit>(), PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean), BinaryMemcacheRequest:extras(), DelegatingDecompressorFrameListener:decompressor(Http2Stream), AbstractEpollChannel$AbstractEpollUnsafe:epollRdHupReady(), CorsConfig$Builder:access$1000(CorsConfig$Builder), Socks5PasswordAuthResponseDecoder$State:valueOf(String), DefaultSctpServerChannelConfig:validate(ChannelOption-Object), PooledDirectByteBuf:_getLong(int), ForkJoinTask:fork(), DefaultHttp2FrameReader$1:close(), Attribute:setContent(File), MqttSubscribeMessage:variableHeader(), WebSocketServerHandshaker08:<init>(String-String-boolean-int), CorsHandler:handlePreflight(ChannelHandlerContext-HttpRequest), DefaultTextHeaders:containsObject(CharSequence-Object-boolean), OpenSslClientContext:access$000(), DnsQueryContext$2:<init>(DnsQueryContext-ChannelFuture-InetSocketAddress), DecoderResult:cause(), AbstractEpollStreamChannel:pipeline(), WebSocketServerHandshaker08:maxFramePayloadLength(), EmptyByteBuf:readerIndex(int), DefaultExecutorServiceFactory$DefaultForkJoinWorkerThreadFactory:newThread(ForkJoinPool), InternalThreadLocalMap:lastVariableIndex(), EventExecutor:execute(Runnable), DefaultLastHttpContent:<init>(ByteBuf), AbstractChannel$AbstractUnsafe:closeForcibly(), PrimitiveCollections$EmptyIntObjectMap:putAll(IntObjectMap), DefaultBinaryHeaders:<init>(boolean), DefaultTextHeaders$SingleHeaderValuesComposer:add(CharSequence-CharSequence), OpenSslEngine:unwrap(ByteBuffer[]-ByteBuffer[]), DefaultChannelPipeline$3:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), Unsafe:throwException(Throwable), JdkLogger:debug(String-Throwable), PooledByteBufAllocator:validateAndCalculateChunkSize(int-int), ChannelFutureListener$1:operationComplete(Future), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable), CompressionException:<init>(String-Throwable), Http2FrameLogger:logPriority(Http2FrameLogger$Direction-int-int-short-boolean), DefaultHttp2Connection:access$1500(DefaultHttp2Connection), HttpObjectAggregator:finishAggregation(ByteBufHolder), EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel), Recycler$Stack:scavengeSome(), OpenSslEngine$ClientAuthMode:ordinal(), HttpPostMultipartRequestDecoder:addHttpData(InterfaceHttpData), AbstractChannel$PausableChannelEventLoop:parent(), EmptyBinaryHeaders:addChar(AsciiString-char), HttpServerUpgradeHandler:<init>(HttpServerUpgradeHandler$SourceCodec-Collection-int), ThreadPerChannelEventLoop:cleanupAndTerminate(boolean), DefaultChannelProgressivePromise:executor(), FixedCompositeByteBuf:getBytes(int-byte[]-int-int), LastMemcacheContent:<clinit>(), AbstractDerivedByteBuf:touch(Object), ByteToMessageDecoder:setCumulator(ByteToMessageDecoder$Cumulator), HttpMethod:equals(Object), PooledByteBufAllocator:access$300(PooledByteBufAllocator), DefaultHttp2ConnectionDecoder$FrameReadListener:onPingRead(ChannelHandlerContext-ByteBuf), GlobalChannelTrafficShapingHandler:maximumCumulativeReadBytes(), Channel$Unsafe:write(Object-ChannelPromise), AbstractReferenceCountedByteBuf:<clinit>(), GlobalChannelTrafficCounter:stop(), TimerTask:run(Timeout), DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress), WebSocketClientHandshaker08:expectedSubprotocol(), DefaultBinaryMemcacheRequest:<init>(String), Bzip2DivSufSort:ssLog(int), DefaultSpdySynStreamFrame:<init>(int-int-byte), DefaultSpdySettingsFrame:isPersisted(int), AsciiString:<init>(byte[]-boolean), EpollDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise), Http2ConnectionHandler:clientPrefaceString(Http2Connection), ChannelOption:valueOf(Class-String), EpollDatagramChannel:doWriteMessage(Object), SpdyHeaderBlockZlibEncoder:encode(ByteBufAllocator-int), DefaultChannelPipeline:callHandlerAdded(AbstractChannelHandlerContext), JsonObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:deallocate(), MpscLinkedQueue:isEmpty(), ConcurrentHashMapV8$ValuesView:contains(Object), AbstractTrafficShapingHandler$ReopenReadTimerTask:<init>(ChannelHandlerContext), MqttSubscribeMessage:fixedHeader(), AbstractChannel:deregister(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:fork(), NativeDatagramPacketArray$NativeDatagramPacket:access$300(NativeDatagramPacketArray$NativeDatagramPacket-ByteBuf-InetSocketAddress), ForkJoinTask:adapt(Runnable-Object), HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode), ClientCookieEncoder:encode(Cookie[]), AbstractHttpData:content(), ThreadDeathWatcher$Entry:<init>(Thread-Runnable-boolean), EmptyTextHeaders:addFloat(CharSequence-float), MqttVersion:<clinit>(), Bzip2Encoder$3:run(), DefaultHttpMessage:<init>(HttpVersion-boolean-boolean), JdkZlibDecoder:readGZIPHeader(ByteBuf), PoolThreadCache:allocateNormal(PoolArena-PooledByteBuf-int-int), DefaultBinaryHeaders:addDouble(Object-double), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Object[]), ReadOnlyByteBufferBuf:internalNioBuffer(), EmptyHttpHeaders:addLong(Object-long), Cookie:maxAge(), Snappy$State:<init>(String-int), MixedAttribute:setContent(InputStream), WebSocketServerHandshaker13:selectSubprotocol(String), DefaultChannelGroup:remove(Object), EventExecutor:shutdown(), Headers$ValueConverter:convertToLong(Object), EpollDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), IllegalReferenceCountException:<init>(String-Throwable), ObjectDecoderInputStream:skip(long), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:clear(), PoolArena:normalizeCapacity(int), Http2ConnectionHandler$1:operationComplete(ChannelFuture), Http2Stream:remoteSideOpen(), EmptyTextHeaders:setChar(CharSequence-char), CipherSuiteFilter:filterCipherSuites(Iterable-List-Set), DiskFileUpload:hashCode(), Http2OutboundFrameLogger:configuration(), WebSocketFrame:content(), DefaultServerSocketChannelConfig:getOptions(), ComposedLastHttpContent:retain(), DefaultSpdyHeaders:set(CharSequence-Iterable), ConcurrentHashMapV8$MapReduceMappingsToLongTask:advance(), JdkSslEngine:setEnabledCipherSuites(String[]), DefaultHttpHeaders:addShort(CharSequence-short), ChannelPromise:isCancelled(), Http2ClientUpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpResponse), UnsafeAtomicLongFieldUpdater:<init>(Unsafe-Class-String), BinaryMemcacheClientCodec:<init>(int), AbstractReferenceCountedByteBuf:readBytes(byte[]), ReadOnlyByteBufferBuf:getInt(int), InternalAttribute:equals(Object), ByteBufInputStream:readUnsignedShort(), Base64:encode(ByteBuf-Base64Dialect), UnpooledDirectByteBuf:checkDstIndex(int-int-int-int), CloseWebSocketFrame:copy(), PooledByteBufAllocator$PoolThreadLocalCache:onRemoval(Object), CompositeByteBuf:_getUnsignedMedium(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), LocalServerChannel:doDeregister(), UnpooledHeapByteBuf:internalNioBuffer(), HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage), NioSctpServerChannel:filterOutboundMessage(Object), OpenSslContext:destroyPools(), Http2Flags:getNumPriorityBytes(), Bzip2BlockDecompressor:read(), Native:shutdown(int-boolean-boolean), ChannelHandler:flush(ChannelHandlerContext), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect), HttpMessageUtil:<init>(), FixedCompositeByteBuf:_getByte(int), EmptyHttpHeaders:addTimeMillis(CharSequence-long), OioDatagramChannel:<init>(), HttpObjectDecoder$State:<clinit>(), Encoder:setDictionarySize(int), AbstractHttpData:setCharset(Charset), Channel:isOpen(), PlatformDependent:getContextClassLoader(), Http2ConnectionHandler$2:<clinit>(), SwappedByteBuf:nioBuffer(), AbstractByteBuf:_setInt(int-int), MixedFileUpload:copy(), EventLoop:inEventLoop(), LoggerFactory:getLogger(String), DefaultHttp2HeadersDecoder:decodeHeaders(ByteBuf), FixedCompositeByteBuf:getBytes(int-GatheringByteChannel-int), ByteBuf:refCnt(), HttpVersion:compareTo(Object), HttpPostRequestEncoder$WrappedFullHttpRequest:protocolVersion(), CompressorHttp2ConnectionEncoder:<init>(CompressorHttp2ConnectionEncoder$Builder), FileUpload:refCnt(), StompSubframeDecoder:readHeaders(ByteBuf-StompHeaders), DnsQuery:addQuestion(DnsQuestion), GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor), IntObjectHashMap$IteratorImpl:value(), ForkJoinPool:drainTasksTo(Collection), DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus), DefaultHttp2FrameWriter:writeSettingsAck(ChannelHandlerContext-ChannelPromise), CompositeByteBuf:writeBytes(byte[]), OioSctpServerChannel:<init>(), Headers$ValueConverter:convertToByte(Object), SSLException:getMessage(), NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT), DnsQueryContext$2:operationComplete(ChannelFuture), UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean), FullHttpMessage:decoderResult(), WrappedByteBuf:writeLong(long), AbstractByteBuf:setInt(int-int), HttpContentCompressor:<init>(), ConcurrentSet:clear(), WrappedByteBuf:setBytes(int-byte[]-int-int), LocalChannel$5:<init>(LocalChannel-LocalChannel-Object[]-ChannelPipeline), DnsServerAddresses$2:iterator(), NioSocketChannel$NioSocketChannelConfig:<init>(NioSocketChannel-NioSocketChannel-Socket-NioSocketChannel$1), EmbeddedChannel$LastInboundHandler:channelRead(ChannelHandlerContext-Object), RecyclableArrayList:addAll(Collection), EmptyHttp2Headers:addFloat(AsciiString-float), PooledByteBufAllocator:access$100(PooledByteBufAllocator), ReferenceMap:containsValue(Object), DnsType:intValue(), DefaultFullHttpResponse:refCnt(), DefaultHttpHeaders:setInt(Object-int), ThreadLocalRandom:getInitialSeedUniquifier(), ReadOnlyIterator:next(), DnsQueryContext:sendQuery(DnsQuery-InetSocketAddress), ClientCookieDecoder:decode(String), ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ChannelPromise:trySuccess(), DefaultChannelPipeline:removeLast(), OpenSslEngine:beginHandshakeImplicitly(), PooledUnsafeDirectByteBuf:<clinit>(), JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable), SingleThreadEventExecutor:isTerminated(), Http2OrHttpChooser$SelectedProtocol:protocol(String), DefaultHttp2Headers:setLong(AsciiString-long), RtspRequestDecoder:<init>(int-int-int-boolean), SpdyFrameDecoderDelegate:readFrameError(String), EpollServerSocketChannelConfig:setWriteSpinCount(int), PerMessageDeflateEncoder:rsv(WebSocketFrame), DefaultPromise:access$502(DefaultPromise-DefaultPromise$LateListeners), DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:uncaughtException(Thread-Throwable), ChannelOutboundBuffer$Entry:cancel(), SslHandler$LazyChannelPromise:executor(), AbstractDiskHttpData:setContent(File), DefaultLastHttpContent$TrailingHttpHeaders:<clinit>(), AbstractBinaryMemcacheDecoder$State[]:clone(), Socks5CommandRequestDecoder:<init>(), DefaultSpdyHeaders:addTimeMillis(CharSequence-long), MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser:<init>(MultithreadEventExecutorGroup-MultithreadEventExecutorGroup$1), ConcurrentHashMapV8$MapReduceKeysTask:firstComplete(), Http2ServerUpgradeCodec:createSettingsFrame(ChannelHandlerContext-ByteBuf), AbstractBinaryMemcacheDecoder$1:<clinit>(), ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise), SSLSession:putValue(String-Object), DefaultHttp2Headers:addFloat(AsciiString-float), DefaultChannelGroupFuture:setFailure0(ChannelGroupException), ReferenceMap:remove(Object), Logger:debug(String-Object-Object), AbstractScheduledEventExecutor:next(), AbstractNioChannel$AbstractNioUnsafe:closeIfClosed(), Unsafe:compareAndSwapLong(Object-long-long-long), DefaultChannelPipeline:access$200(DefaultChannelPipeline-AbstractChannelHandlerContext), Logger:info(String-Object[]), AbstractServerChannel:localAddress(), ChunkedInput:close(), DefaultSocks5CommandRequest:dstAddrType(), ChunkedWriteHandler$4:operationComplete(ChannelFuture), ChannelOption$1:newConstant(int-String), DefaultBinaryHeaders:setObject(Object-Object[]), Logger:error(String-Object[]), ReplayingDecoderBuffer:copy(int-int), ServerCookieEncoder:<init>(), DefaultFullHttpRequest:release(), SwappedByteBuf:toString(Charset), Http2Exception:getMessage(), EpollDomainSocketChannelConfig:setMaxMessagesPerRead(int), JdkApplicationProtocolNegotiator$ProtocolSelector:select(List), DefaultHttp2Connection$DefaultEndpoint:notifyGoingAway(), NioDatagramChannel:isActive(), Bzip2BlockCompressor:writeSymbolMap(ByteBuf), AppendableCharSequence:substring(int-int), IdleStateHandler:access$100(IdleStateHandler), DefaultOioServerSocketChannelConfig:getOption(ChannelOption), ConcurrentHashMapV8$SearchMappingsTask:getRawResult(), EpollServerChannelConfig:getOptions(), ObjectEncoderOutputStream:write(byte[]-int-int), AbstractChannel$AbstractUnsafe$1:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), AbstractByteBufAllocator:buffer(int-int), PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:next(), DefaultTextHeaders:access$1301(DefaultTextHeaders-Object-Object), JdkSslEngine:unwrap(ByteBuffer-ByteBuffer), OpenSslEngine:access$802(OpenSslEngine-String), ThreadLocalRandom:next(int), Http2Stream:isResetSent(), ZlibCodecFactory:<clinit>(), EmptyHttpHeaders:set(TextHeaders), DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-Iterable), JdkAlpnApplicationProtocolNegotiator:protocolSelectorFactory(), ForkJoinPool$WorkQueue:externalPopAndExecCC(CountedCompleter), SSLSessionContext:getSessionCacheSize(), AbstractByteBufAllocator:directBuffer(), IpSubnetFilterRule$Ip4SubnetFilterRule:<init>(Inet4Address-int-IpFilterRuleType), NioUdtAcceptorChannel:javaChannel(), PoolArena$HeapArena:newByteBuf(int), DefaultLastHttpContent:trailingHeaders(), PromiseTask:hashCode(), CompositeByteBuf:getBytes(int-OutputStream-int), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), EpollDatagramChannel:newPromise(), NioUdtAcceptorChannel:isActive(), PendingWriteQueue$PendingWrite:access$400(PendingWriteQueue$PendingWrite), WebSocketServerExtensionHandler:access$000(WebSocketServerExtensionHandler), PausableChannelEventExecutor$ChannelCallableEventExecutor:<init>(Channel-Callable), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToTimeMillis(CharSequence), HttpPostStandardRequestDecoder:hasNext(), DefaultHeaders:getFloatAndRemove(Object-float), EmbeddedChannel:doWrite(ChannelOutboundBuffer), SslContext:newClientContext(), TypeParameterMatcher$ReflectiveMatcher:match(Object), ByteBuf:getUnsignedMedium(int), AbstractConstant:name(), UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int), Socks5CommandRequestDecoder$State[]:clone(), CommonsLogger:info(String-Object[]), SctpServerChannel:bind(SocketAddress-int), ThreadPerChannelEventLoop:register(Channel-ChannelPromise), ByteBufUtil:threadLocalDirectBuffer(), EmptyHttp2Headers:addObject(AsciiString-Object), UnpooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int), WrappedByteBuf:setDouble(int-double), MqttConnAckVariableHeader:<init>(MqttConnectReturnCode), ThreadPerChannelEventLoopGroup:isShutdown(), TrafficCounter:<clinit>(), ProxyHandler$LazyChannelPromise:<init>(ProxyHandler-ProxyHandler$1), HttpClientUpgradeHandler$UpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpResponse), ReferenceCountUtil:releaseLater(Object), PoolArena$DirectArena:newUnpooledChunk(int), GlobalTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean), GlobalChannelTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), EmptyByteBuf:writeBytes(InputStream-int), SpdyHeaders$HttpNames:<clinit>(), PoolArena$DirectArena:newChunk(int-int-int-int), EventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), ChannelHandlerAdapter:disconnect(ChannelHandlerContext-ChannelPromise), DefaultUdtChannelConfig:validate(ChannelOption-Object), AsciiString:<init>(byte[]-int-int-boolean), ChannelOutboundBuffer:nioBufferCount(), ImmediateEventExecutor:<init>(), ChannelHandlerInvokerUtil:invokeWriteNow(ChannelHandlerContext-Object-ChannelPromise), HttpHeaders:getAllAndConvert(Object), AddressedEnvelope:recipient(), SslHandler:setCumulator(ByteToMessageDecoder$Cumulator), Recycler$DefaultHandle:access$902(Recycler$DefaultHandle-int), AbstractEpollChannel:isActive(), ClassResolvers:softCachingConcurrentResolver(ClassLoader), IovArray:add(long-int-int), Socks5ProxyHandler:sendToProxyServer(Object), DatagramPacket:touch(), DefaultChannelHandlerInvoker$3:run(), EventLoop:shutdown(), CompatibleMarshallingDecoder:actualReadableBytes(), DefaultFullHttpResponse:setStatus(HttpResponseStatus), DefaultCookie:value(), DefaultChannelId:asShortText(), DefaultFileRegion:transferTo(WritableByteChannel-long), DefaultChannelHandlerInvoker:invokeExceptionCaught(ChannelHandlerContext-Throwable), MemoryFileUpload:compareTo(InterfaceHttpData), DefaultHttp2RemoteFlowController$1:compare(Http2Stream-Http2Stream), AbstractChannel$AbstractUnsafe:flush0(), AbstractChannelHandlerContext:fireChannelInactive(), DomainNameMapping:<clinit>(), HashedWheelTimer:normalizeTicksPerWheel(int), HttpHeaders:contains(Object), ForkJoinPool$WorkQueue:isApparentlyUnblocked(), Http2Headers$PseudoHeaderName:<init>(String-int-String), DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel), Native:close(int), Socks5CommandStatus:toString(), SpdySession:isRemoteSideClosed(int), SSL:doHandshake(long), EmptyHttpHeaders:setByte(CharSequence-byte), WrappedByteBuf:order(), DnsNameResolver:setMaxTriesPerQuery(int), DnsMessage:addAnswer(DnsResource), PausableChannelEventExecutor:submit(Runnable-Object), JdkZlibEncoder:close(ChannelPromise), Http2FrameLogger:logUnknownFrame(Http2FrameLogger$Direction-byte-int-Http2Flags-ByteBuf), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:convertName(Object), NioEventLoop:setIoRatio(int), DefaultHttp2RemoteFlowController$FlowState:allocate(int), JdkDefaultApplicationProtocolNegotiator$1:<init>(), DefaultHttp2ConnectionEncoder:connection(), AbstractChannel$AbstractUnsafe$5:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), MqttConnAckMessage:fixedHeader(), PlatformDependent:getSystemClassLoader(), DefaultSocketChannelConfig:setAllowHalfClosure(boolean), EmptyByteBuf:writeBytes(ScatteringByteChannel-int), MessageAggregator:newContinueResponse(Object), DefaultPromise:cause(), NioTask:channelUnregistered(SelectableChannel-Throwable), HttpServerUpgradeHandler$UpgradeEvent:<init>(String-FullHttpRequest), HttpContent:release(int), AbstractInternalLogger:error(String-Object-Object), GlobalChannelTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise), DefaultChannelPipeline$HeadContext$1:<init>(DefaultChannelPipeline$HeadContext-ChannelPromise), DefaultHeaders:addChar(Object-char), AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor), TrustManagerFactory:getTrustManagers(), ServerSocketChannelUDT:close(), PoolArena:allocate(PoolThreadCache-int-int), SpdyCodecUtil:<init>(), EpollDomainSocketChannelConfig:setWriteSpinCount(int), SocksVersion:values(), DefaultAttributeMap$DefaultAttribute:access$000(DefaultAttributeMap$DefaultAttribute), ScheduledFutureTask:delayNanos(long), Unsafe:putOrderedObject(Object-long-Object), DefaultChannelGroup:size(), VoidChannelPromise:await(long-TimeUnit), Http2LocalFlowController:windowSize(Http2Stream), DefaultAttributeMap$DefaultAttribute:remove(), ForkJoinPool:toString(), DefaultByteBufHolder:release(), CompositeByteBuf:copyTo(int-int-int-ByteBuf), SpdyHeadersFrame:isTruncated(), DecoderResultProvider:decoderResult(), Lz4FrameEncoder$1:run(), Bzip2BitWriter:writeBits(ByteBuf-int-long), EmptyHttp2Headers:status(), AbstractMemcacheObjectAggregator:isLastContentMessage(ByteBufHolder), DefaultSctpChannelConfig:setReceiveBufferSize(int), DefaultBinaryHeaders:set(Object-Object[]), RxtxChannelConfig$Stopbits[]:clone(), HttpMessageUtil:appendInitialLine(StringBuilder-HttpRequest), DefaultChannelGroupFuture$DefaultEntry:<init>(Object-Object), NameResolverGroup:getResolver(EventExecutor), ObjectDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), StompHeaders:<clinit>(), Native:readAddress(int-long-int-int), AbstractByteBufAllocator:newDirectBuffer(int-int), ForkJoinTask:writeObject(ObjectOutputStream), DefaultSpdyHeaders:addObject(Object-Iterable), JdkAlpnSslEngine:updateAvailability(), JdkZlibEncoder:<init>(int), ReferenceCountUtil:safeRelease(Object-int), WebSocketClientHandshaker00:verify(FullHttpResponse), DefaultLastStompContentSubframe:<init>(ByteBuf), ChannelHandler:channelRead(ChannelHandlerContext-Object), AbstractOioMessageChannel:parent(), DnsQueryContext$2:operationComplete(Future), HashedWheelTimer$HashedWheelTimeout:toString(), PooledByteBufAllocator:<clinit>(), DecoderException:<init>(String), JdkSslContext:addIfSupported(Set-List-String[]), ReadTimeoutHandler$ReadTimeoutTask:<init>(ReadTimeoutHandler-ChannelHandlerContext), NioSctpChannel:remoteAddress(), InternetProtocolFamily[]:clone(), DefaultBinaryHeaders$2:convertToLong(Object), Http2ServerUpgradeCodec:<init>(Http2ConnectionHandler), EpollDatagramChannel:doWrite(ChannelOutboundBuffer), JdkLogger:isInfoEnabled(), NioDatagramChannel:<init>(SelectorProvider-InternetProtocolFamily), PooledByteBufAllocator:<init>(), EmptyByteBuf:readUnsignedByte(), EpollEventLoop:runAllTasks(long), EmptyHttp2Headers:setObject(AsciiString-Object[]), Http2CodecUtil:failAndThrow(ChannelPromise-Throwable), AbstractBinaryMemcacheDecoder$State:valueOf(String), PooledUnsafeDirectByteBuf:_setShort(int-int), ReplayingDecoderBuffer:writeDouble(double), ByteBuf:readFloat(), HttpHeaders:setByte(CharSequence-byte), WrappedByteBuf:markReaderIndex(), DnsMessage:touch(Object), DefaultHttp2HeadersDecoder$1:addHeader(byte[]-byte[]-boolean), AbstractNioByteChannel$NioByteUnsafe:removeReadOp(), ResourceLeakDetector$Level:values(), HAProxyProtocolException:<init>(Throwable), AbstractChannelHandlerContext:pipeline(), DefaultHttpHeaders:addInt(CharSequence-int), EmptyConvertibleHeaders:set(Object-Iterable), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), Base64Decoder:decode(ChannelHandlerContext-Object-List), EmptyHeaders:isEmpty(), Socks5InitialResponseDecoder$State:valueOf(String), EmptyByteBuf:readLong(), DomainNameMapping:normalizeHostname(String), HttpResponse:status(), DefaultTextHeaders$SingleHeaderValuesComposer:set(CharSequence-CharSequence[]), EpollDatagramChannelConfig:<clinit>(), TextWebSocketFrame:rsv(), NioSocketChannel:unsafe(), PoolArena:newUnpooledChunk(int), DefaultSpdyHeadersFrame:headers(), MultithreadEventExecutorGroup:<init>(int-ExecutorServiceFactory-Object[]), PerFrameDeflateDecoder:<init>(boolean), NioEventLoopGroup:<init>(), ForkJoinTask$AdaptedRunnableAction:invoke(), EmptyByteBuf:getMedium(int), FastLzFrameEncoder:<init>(int), EpollServerSocketChannelConfig:validate(ChannelOption-Object), DefaultTextHeaders:addObject(Object-Iterable), LzmaFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), WebSocketFrameAggregator:newContinueResponse(Object), EmptyHttp2Headers:setAll(BinaryHeaders), ForkJoinTask:invokeAll(ForkJoinTask[]), SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-ByteBuf-List), ChannelConfig:getWriteBufferLowWaterMark(), DefaultTextHeaders$CsvValueEscaper:escape(Object), ChannelBufferByteInput:read(byte[]), OioDatagramChannel:<clinit>(), AsciiString:equals(CharSequence-CharSequence), StompSubframeAggregator:hasContentLength(StompHeadersSubframe), DefaultSpdyDataFrame:touch(Object), PromiseTask:setUncancellable(), EmptyHttp2Headers:setTimeMillis(AsciiString-long), DefaultHeaders:getAndRemove(Object), LocalChannel:doDeregister(), AsciiString:split(String-int), ConcurrentHashMapV8:search(long-ConcurrentHashMapV8$BiFun), AbstractEventLoop:next(), Socks5CommandRequestDecoder$1:<clinit>(), UnsafeAtomicIntegerFieldUpdater:<init>(Unsafe-Class-String), SwappedByteBuf:nioBuffers(int-int), ByteBuf:getLong(int), ReplayingDecoderBuffer:ensureWritable(int), DefaultHttpHeaders:add(Object-Object[]), NioUdtMessageConnectorChannel:localAddress(), MessageFormatter:getThrowableCandidate(Object[]), TrustManagerFactory:<init>(TrustManagerFactorySpi-Provider-String), PooledDirectByteBuf:getBytes(int-ByteBuffer), DefaultBinaryMemcacheResponse:setMagic(byte), NameResolver:resolve(SocketAddress), AbstractScheduledEventExecutor:schedule(ScheduledFutureTask), NioEventLoopGroup:<init>(int), DefaultSpdyHeaders:addByte(Object-byte), JdkNpnApplicationProtocolNegotiator:<init>(Iterable), DnsNameResolverContext:access$000(DnsNameResolverContext), Http2Headers$PseudoHeaderName:isPseudoHeader(AsciiString), AbstractByteBuf:writeBytes(InputStream-int), ReadOnlyUnsafeDirectByteBuf:_getUnsignedMedium(int), PoolSubpage:free(int), DefaultBinaryHeaders:setLong(AsciiString-long), DefaultChannelGroup:name(), DefaultUdtChannelConfig:setReceiveBufferSize(int), DefaultBinaryHeaders$2:convertToInt(AsciiString), Http2ConnectionHandler:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), ConnectTimeoutException:setStackTrace(StackTraceElement[]), ResourceLeakDetector:access$408(ResourceLeakDetector), HttpClientCodec$Encoder:<init>(HttpClientCodec-HttpClientCodec$1), FixedCompositeByteBuf$Component:<init>(int-int-ByteBuf), DefaultHttp2Connection$DefaultEndpoint:createStream(int), DefaultHttp2LocalFlowController$FlowState:receiveFlowControlledFrame(int), AbstractByteBuf:alloc(), ChannelTrafficShapingHandler$ToSend:<init>(long-Object-ChannelPromise), HttpClientCodec:isSingleDecode(), ChannelFlushPromiseNotifier:add(ChannelPromise-long), Http2HeaderTable:maxHeaderTableSize(int), UnsafeAtomicIntegerFieldUpdater:get(Object), ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), RxtxChannel$RxtxUnsafe:<init>(RxtxChannel), WebSocketServerHandshaker07:<init>(String-String-boolean-int), DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf), AbstractBootstrap:bind(), DnsMessage:addAdditionalResource(DnsResource), SelfSignedCertificate:<init>(), DefaultUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), Crc32c:reset(), PausableChannelEventExecutor:isAcceptingNewTasks(), PooledByteBufAllocator:access$400(PooledByteBufAllocator), WebSocketClientHandshaker07:newHandshakeRequest(), HttpObjectAggregator:isLastContentMessage(HttpContent), CountedCompleter:setRawResult(Object), FingerprintTrustManagerFactory$2:checkServerTrusted(X509Certificate[]-String), WebSocketExtensionDecoder:channelInactive(ChannelHandlerContext), ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), DefaultConvertibleHeaders$ConvertedIterator:<init>(DefaultConvertibleHeaders), ObjectDecoderInputStream:readFully(byte[]-int-int), SslProvider:toString(), ObjectEncoder:<init>(), UnpooledDirectByteBuf:_setInt(int-int), ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun), HttpContentEncoder:decode(ChannelHandlerContext-Object-List), AbstractByteBuf:order(), DnsMessage:authorityResources(), PlatformDependent:freeDirectBuffer(ByteBuffer), AbstractMemcacheObject:<init>(), EmptyHttp2Headers:addByte(AsciiString-byte), AbstractByteBuf:setBytes(int-ByteBuf-int), AbstractHttpData:delete(), CorsConfig:maxAge(), SpdySession$StreamComparator:<init>(SpdySession), WebSocketClientHandshaker00:newWebSocketEncoder(), DefaultStompHeaders:setShort(Object-short), DefaultSocketChannelConfig:setTrafficClass(int), MixedAttribute:content(), WebSocketClientHandshaker$2:messageReceived(ChannelHandlerContext-FullHttpResponse), Slf4JLogger:debug(String-Object-Object), ConcurrentHashMapV8$ForEachTransformedMappingTask:advance(), ConcurrentHashMapV8$KeySpliterator:forEachRemaining(ConcurrentHashMapV8$Action), ReplayingDecoder:isSingleDecode(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(), CompositeByteBuf:slice(int-int), ConvertibleHeaders$TypeConverter:toUnconvertedType(Object), Version:main(String[]), SimpleLeakAwareByteBuf:touch(), MemoryFileUpload:setMaxSize(long), AbstractChannel$AbstractUnsafe:access$700(AbstractChannel$AbstractUnsafe-Runnable), EmptyHttp2Headers:add(BinaryHeaders), DefaultChannelPipeline:connect(SocketAddress-ChannelPromise), AbstractByteBuf:writeZero(int), IntObjectHashMap$1:size(), ReplayingDecoderBuffer:readUnsignedMedium(), OpenSslServerContext:generateKeySpec(char[]-byte[]), SwappedByteBuf:isReadable(int), FastLzFrameDecoder$State:valueOf(String), PoolChunk:runLength(int), MemoryAttribute:<init>(String-Charset), EpollSocketChannelConfig:getOption(ChannelOption), Snappy:decodeLiteral(byte-ByteBuf-ByteBuf), DefaultHttp2FrameReader:verifyHeadersFrame(), AbstractBootstrap$2:run(), LocalChannel$2:<init>(LocalChannel), UnpooledHeapByteBuf:_getLong(int), EmptyConvertibleHeaders:setByte(Object-byte), WrappedByteBuf:readerIndex(int), DefaultHttpContent:release(), HttpObjectDecoder$HeaderParser:newException(int), ChannelPromise:unvoid(), AbstractBinaryMemcacheEncoder:encodeHeader(ByteBuf-BinaryMemcacheMessage), SlicedByteBuf:checkIndex(int-int), ServerBootstrap:attrs(), CorsHandler:setOrigin(HttpResponse), JdkBaseApplicationProtocolNegotiator$FailProtocolSelector:<init>(JdkSslEngine-Set), ChannelHandlerInvokerUtil:invokeChannelUnregisteredNow(ChannelHandlerContext), PoolArena$HeapArena:newUnpooledChunk(int), DefaultHeaders:getTimeMillisAndRemove(Object), EpollServerChannelConfig:setWriteSpinCount(int), CompositeByteBuf$Component:<init>(ByteBuf), DefaultChannelPipeline:firstContext(), NativeDatagramPacketArray:getInstance(ChannelOutboundBuffer), EmptyByteBuf:forEachByteDesc(int-int-ByteBufProcessor), DefaultSpdyHeaders:addBoolean(CharSequence-boolean), InternalThreadLocalMap:typeParameterMatcherGetCache(), Http2FrameListenerDecorator:onWindowUpdateRead(ChannelHandlerContext-int-int), NioSocketChannel$NioSocketChannelUnsafe:<init>(NioSocketChannel), WebSocketClientHandshaker00:insertSpaces(String-int), EmptyTextHeaders:addChar(Object-char), DefaultRxtxChannelConfig:getBaudrate(), ConcurrentHashMapV8$MapReduceKeysToLongTask:compute(), DefaultChannelPipeline:fireExceptionCaught(Throwable), GlobalEventExecutor:shutdown(), DefaultHttpHeaders:setBoolean(CharSequence-boolean), OioSctpChannel:association(), HttpHeaderUtil:isContentLengthSet(HttpMessage), Socks5AddressType:byteValue(), AdvancedLeakAwareByteBuf:forEachByte(int-int-ByteBufProcessor), PooledDirectByteBuf:_getInt(int), SimpleLeakAwareByteBuf:readSlice(int), OpenSslEngine:<clinit>(), MemoryFileUpload:compareTo(FileUpload), SSLSession:getId(), WrappedByteBuf:getBytes(int-ByteBuf-int), DefaultTextHeaders$3:toConvertedType(CharSequence), DefaultPromise:access$000(Future-DefaultFutureListeners), Socks5AuthMethod:<clinit>(), Recycler:<init>(), Logger:info(String-Object-Object), SSLEngine:<init>(), DuplicatedByteBuf:order(), ReplayingDecoderBuffer:readableBytes(), AsciiHeadersEncoder$1:<clinit>(), JdkLogger:error(String-Object-Object), NioUdtMessageAcceptorChannel:<init>(), EmptyHttpHeaders:setObject(Object-Iterable), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), OpenSslSessionStats:cbHits(), Socks4CommandRequest:userId(), AbstractEventExecutor:schedule(Runnable-long-TimeUnit), DefaultPromise$4:run(), OioSctpChannel:bindAddress(InetAddress), EmptyHttp2Headers:scheme(), InternalLogger:warn(String-Object), PlatformDependent0:<clinit>(), ConcurrentHashMapV8$KeySetView:add(Object), MpscLinkedQueue:access$000(MpscLinkedQueue), DefaultDatagramChannelConfig:getOptions(Map-ChannelOption[]), HAProxyProxiedProtocol$TransportProtocol:valueOf(byte), DefaultConvertibleHeaders$ConvertedIterator:remove(), AbstractTrafficShapingHandler:calculateSize(Object), DnsNameResolver:<init>(EventLoop-Class-Iterable), CompleteFuture:await(long), AbstractByteBuf:maxWritableBytes(), NioSocketChannel:config(), Bzip2Decoder$1:<clinit>(), DefaultStompFrame:toString(), HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage), Cookie:isSecure(), DefaultNameResolverGroup:newResolver(EventExecutor), ChannelOutboundBuffer:removeEntry(ChannelOutboundBuffer$Entry), MessageFormatter:arrayFormat(String-Object[]), ReadOnlyByteBuf:setBytes(int-ScatteringByteChannel-int), OioSctpServerChannel:unbindAddress(InetAddress), DefaultSpdySynStreamFrame:toString(), AbstractChannel$AbstractUnsafe:closeIfClosed(), ObjectDecoder:<init>(int-ClassResolver), ApplicationProtocolNegotiator:protocols(), AbstractEpollStreamChannel$EpollStreamUnsafe:access$200(AbstractEpollStreamChannel$EpollStreamUnsafe), DefaultSpdyHeaders:addShort(CharSequence-short), SSLContext:sessionConnect(long), Native:epollWait0(int-long-int-int), AsciiString:copy(int-char[]-int-int), WebSocket08FrameDecoder:actualReadableBytes(), DefaultHeaders:setObject(Object-Object[]), EmptyBinaryHeaders:addObject(AsciiString-Iterable), DefaultHttp2FrameReader$State[]:clone(), DefaultStompHeaders:setInt(Object-int), ChannelPipeline:fireChannelRead(Object), AbstractChannel:hasAttr(AttributeKey), OioDatagramChannel:newPromise(), RecyclableArrayList:<init>(Recycler$Handle), DelegatingDecompressorFrameListener:<init>(Http2Connection-Http2FrameListener), DefaultTextHeaders:addObject(Object-Object), QueryStringDecoder:<init>(String-Charset), DefaultConvertibleHeaders:names(), HttpHeaderUtil:is100ContinueExpected(HttpMessage), EpollSocketChannel$1:<init>(EpollSocketChannel-ChannelPromise), InternalLogger:log(InternalLogLevel-String), ReplayingDecoderBuffer:readDouble(), SslHandler$LazyChannelPromise:<init>(SslHandler), DuplicatedByteBuf:nioBufferCount(), UnpooledDirectByteBuf:ensureAccessible(), JdkBaseApplicationProtocolNegotiator$FailProtocolSelector:noSelectMatchFound(), Native:readAddress0(int-long-int-int), DefaultLastMemcacheContent:<init>(), Base64Encoder:<init>(boolean), DefaultHeaders:setInt(Object-int), OpenSslContext:setTicketKeys(byte[]), ProxyConnectException:<init>(String), StompCommand:values(), DefaultBinaryHeaders:setTimeMillis(Object-long), SpdySessionHandler$1:operationComplete(ChannelFuture), DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int), SnappyFrameDecoder$ChunkType:values(), MqttSubscribeMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttSubscribePayload), Socks5PasswordAuthResponse:status(), DefaultHttp2ConnectionDecoder$FrameReadListener:verifyGoAwayNotReceived(), AbstractReferenceCountedByteBuf:setShort(int-int), SwappedByteBuf:readUnsignedMedium(), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), WebSocketClientProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object), ByteBufProcessor$3:<init>(), DefaultSctpServerChannelConfig:getInitMaxStreams(), CompositeByteBuf:setMedium(int-int), PlatformDependent0:copyMemory(Object-long-Object-long-long), SslContext:newClientContext(File-TrustManagerFactory), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:firstComplete(), ByteBuf:setBytes(int-byte[]), AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak), Unpooled:copiedBuffer(char[]-int-int-Charset), ThreadLocalInsecureRandom:<init>(), MessageToMessageDecoder:channelInactive(ChannelHandlerContext), Http2CodecUtil:connectionPrefaceBuf(), PlatformDependent:copyMemory(byte[]-int-long-long), DefaultSpdySettingsFrame:setPersistValue(int-boolean), Channel:writeAndFlush(Object-ChannelPromise), AbstractChannel:config(), DefaultTextHeaders:addFloat(Object-float), SpdyFrameCodec$1:operationComplete(Future), EpollSocketChannelConfig:isAllowHalfClosure(), ContinuationWebSocketFrame:<init>(boolean-int-String), IntObjectHashMap:calcMaxSize(int), DefaultConvertibleHeaders:getAllAndRemove(Object), Bzip2DivSufSort:trFixdown(int-int-int-int-int-int), Socks5PasswordAuthRequestDecoder:fail(List-Throwable), ForkJoinTask:pollTask(), PooledDirectByteBuf:getBytes(int-ByteBuf-int-int), Recycler:threadLocalCapacity(), CompositeByteBuf:setBytes(int-ByteBuf-int), ForkJoinPool$2:run(), ZlibUtil:<init>(), ApplicationProtocolConfig:selectorFailureBehavior(), HttpProxyHandler:exceptionMessage(String), SingleThreadEventExecutor:access$100(SingleThreadEventExecutor), Http2OutboundFrameLogger:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise), WrappedByteBuf:copy(int-int), SpdyWindowUpdateFrame:streamId(), DnsResource:touch(Object), WrappedByteBuf:readBytes(ByteBuffer), DefaultHttp2Connection$DefaultStream:hasChild(int), InterfaceHttpPostRequestDecoder:setDiscardThreshold(int), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), BinaryMemcacheResponseDecoder:<init>(), SpdyOrHttpChooser$SelectedProtocol:values(), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:unsupported(), SslHandler:finishWrap(ChannelHandlerContext-ByteBuf-ChannelPromise-boolean), DatagramPacket:touch(Object), EmptyBinaryHeaders:setAll(BinaryHeaders), NioSocketChannel$NioSocketChannelUnsafe:<init>(NioSocketChannel-NioSocketChannel$1), BinaryMemcacheClientCodec:<init>(int-boolean), WrappedByteBuf:writeBytes(byte[]-int-int), AdvancedLeakAwareByteBuf:copy(int-int), OpenSslSessionStats:number(), Native:ioResult(String-int-IOException), WrappedByteBuf:getFloat(int), AbstractBinaryMemcacheEncoder:encodeKey(ByteBuf-String), Http2Stream:weight(), MqttQoS:value(), Http2Connection$Listener:streamAdded(Http2Stream), Base64:decode(ByteBuf), IntObjectHashMap:adjustCapacity(int), Slf4JLogger:<init>(Logger), EmptyHttp2Headers:setDouble(AsciiString-double), LZ4Factory:highCompressor(), EpollSocketChannel:isOutputShutdown0(), OioDatagramChannel:joinGroup(InetAddress-ChannelPromise), CorsConfig:<init>(CorsConfig$Builder), ResourceLeakDetector$DefaultResourceLeak:toString(), AsciiString:hashCode(), SocketUDT:setSoLinger(boolean-int), PooledUnsafeDirectByteBuf:readBytes(GatheringByteChannel-int), FastLz:<init>(), ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[]), MpscLinkedQueue:removeAll(Collection), JZlibEncoder:<init>(ZlibWrapper-int), BinaryMemcacheResponse:setTotalBodyLength(int), AbstractMemoryHttpData:touch(Object), SlicedByteBuf:slice(int-int), SSLSession:getProtocol(), InternalLogger:info(String), Socks5InitialResponseDecoder:checkpoint(Object), OneTimeTask:<init>(), DefaultFileRegion:touch(), DefaultDatagramChannelConfig:setMaxMessagesPerRead(int), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:getRawResult(), PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer), WebSocketClientExtensionHandler:write(ChannelHandlerContext-Object-ChannelPromise), Socks4ProxyHandler:<init>(SocketAddress), IpFilterRuleType:<clinit>(), Slf4JLogger:error(String-Object-Object), Log:trace(Object-Throwable), HAProxyProxiedProtocol$AddressFamily:valueOf(String), Http2ConnectionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), FileUpload:setFilename(String), Socks5InitialRequestDecoder:fail(List-Throwable), Native:epollet(), EmptyByteBuf:writeShort(int), ChannelConfig:getWriteBufferHighWaterMark(), AsciiString:<init>(ByteBuffer-int-int), RxtxChannel$RxtxUnsafe$1:run(), AbstractDiskHttpData:<init>(String-Charset-long), IdleStateHandler:access$000(IdleStateHandler), PerMessageDeflateClientExtensionHandshaker$PermessageDeflateExtension:<init>(PerMessageDeflateClientExtensionHandshaker-boolean-int-boolean-int), WebSocketClientHandshaker$1:operationComplete(ChannelFuture), LastStompContentSubframe$1:retain(int), ReadOnlyByteBufferBuf:setBytes(int-ScatteringByteChannel-int), AbstractMemcacheObjectAggregator:isAggregated(Object), JdkLogger:warn(String-Object), HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object), Future:isSuccess(), HttpMessageUtil:appendCommon(StringBuilder-HttpMessage), UnpooledHeapByteBuf:getBytes(int-ByteBuf-int-int), DnsQueryContext:writeQuery(DnsQuery-InetSocketAddress), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise), SocketUDT:setReuseAddress(boolean), CtClass:detach(), DefaultUdtChannelConfig:setWriteSpinCount(int), DefaultUdtServerChannelConfig:setSystemReceiveBufferSize(int), WebSocket08FrameDecoder:checkCloseFrameBody(ChannelHandlerContext-ByteBuf), ReplayingDecoderBuffer:setZero(int-int), DefaultUdtServerChannelConfig:setWriteSpinCount(int), MultithreadEventExecutorGroup:isTerminated(), ByteBuf:release(int), FastLzFrameDecoder$State:values(), SwappedByteBuf:readByte(), DefaultHttpHeaders:addObject(Object-Iterable), Http2FrameListenerDecorator:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int), EmbeddedChannelId:toString(), ReplayingDecoderBuffer:setMedium(int-int), StringEncoder:encode(ChannelHandlerContext-Object-List), AbstractDiskHttpData:getBaseDirectory(), PausableChannelEventExecutor:shutdownGracefully(long-long-TimeUnit), AbstractOioByteChannel:doWriteBytes(ByteBuf), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer), ByteBufUtil:encodeString0(ByteBufAllocator-boolean-CharBuffer-Charset), SpdyDataFrame:isLast(), DefaultHttp2Connection$1:<init>(DefaultHttp2Connection), ContinuationWebSocketFrame:touch(), ClassResolvers:cacheDisabled(ClassLoader), OioDatagramChannel:ensureBound(), DefaultBinaryHeaders$3:convertName(Object), ReplayingDecoderBuffer:<init>(ByteBuf), GlobalTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise), ChannelHandlerInvokerUtil:invokeCloseNow(ChannelHandlerContext-ChannelPromise), EmptyTextHeaders:setInt(Object-int), ChannelFutureListener$3:<init>(), PlatformDependent0:getClassLoader(Class), StompSubframeDecoder$State[]:clone(), Unsafe:putLong(long-long), FileUpload:release(), ByteBuf:setBytes(int-ByteBuffer), SSLEngine:wrap(ByteBuffer[]-int-int-ByteBuffer), LogLevel:values(), SerialPort:getOutputStream(), DefaultChannelId:compareTo(Object), DefaultRxtxChannelConfig:setAllocator(ByteBufAllocator), DuplicatedByteBuf:copy(int-int), DefaultTextHeaders$ValuesComposer:addObject(CharSequence-Object[]), TextWebSocketFrame:retain(), GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long-long), MixedAttribute:copy(), NioSocketChannel:setReadPending(boolean), SwappedByteBuf:ensureWritable(int), Bzip2HuffmanAllocator:setExtendedParentPointers(int[]), ThreadLocalUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), DefaultSpdySettingsFrame$Setting:isPersist(), ChannelHandlerAppender:add(Iterable), Http2FrameLogger$Direction:<clinit>(), InterfaceHttpPostRequestDecoder:removeHttpDataFromClean(InterfaceHttpData), WrappedByteBuf:writeMedium(int), HAProxyMessageDecoder:decodeLine(ChannelHandlerContext-ByteBuf), SslContext:newClientContext(SslProvider-File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), EmptyHttp2Headers:setDouble(Object-double), EpollDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface), ForkJoinPool$WorkQueue:pop(), Http2OrHttpChooser:<init>(int), Http2ConnectionDecoder:close(), ByteBuf:getBytes(int-ByteBuf-int-int), DefaultPromise:access$400(EventExecutor-Runnable), CompressionException:<init>(String), SSL:writeToSSL(long-long-int), Socks4CommandRequest:setDecoderResult(DecoderResult), WrappedByteBuf:capacity(), DefaultHttpHeaders:addTimeMillis(CharSequence-long), Http2FrameReader:close(), PoolChunk:allocateRun(int), DefaultTextHeaders:add(CharSequence-CharSequence[]), DefaultHeaders:getCharAndRemove(Object), OioSctpChannel:unbindAddress(InetAddress-ChannelPromise), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean), ReplayingDecoder:channelInactive(ChannelHandlerContext), AbstractDiskHttpData:touch(Object), NioSctpChannel:doBind(SocketAddress), EmptyBinaryHeaders:addLong(Object-long), WebSocketServerProtocolHandshakeHandler:sendHttpResponse(ChannelHandlerContext-HttpRequest-HttpResponse), NioUdtAcceptorChannel:remoteAddress(), Attribute:length(), ThreadDeathWatcher:access$300(), Bzip2DivSufSort:trHeapSort(int-int-int-int-int), ForkJoinPool:checkParallelism(int), UnpooledUnsafeDirectByteBuf:readBytes(GatheringByteChannel-int), ForkJoinTask:externalAwaitDone(), DefaultProgressivePromise:<init>(), WebSocketProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable), DefaultStompHeaders:addBoolean(Object-boolean), DefaultRxtxChannelConfig:setOption(ChannelOption-Object), DefaultChannelPromise:addListener(GenericFutureListener), ByteBufOutputStream:writeShort(int), FileUpload:getFilename(), UnsafeAtomicLongFieldUpdater:compareAndSet(Object-long-long), EpollDatagramChannelConfig:getInterface(), PlatformDependent:throwException(Throwable), Version:identify(), AbstractMemcacheObjectDecoder:<init>(), CommonsLoggerFactory:newInstance(String), AbstractEventExecutorGroup:invokeAll(Collection), StringDecoder:<init>(), UdtMessage:duplicate(), AdvancedLeakAwareByteBuf:setBytes(int-InputStream-int), EmbeddedChannelId:<init>(), UnpooledUnsafeDirectByteBuf:array(), GlobalEventExecutor:shutdownGracefully(long-long-TimeUnit), CompatibleObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf), JdkZlibEncoder$4:<clinit>(), Bzip2Encoder:access$000(Bzip2Encoder), AbstractTrafficShapingHandler:setMaxTimeWait(long), WebSocketFrame:touch(), Marshaller:writeObject(Object), OpenSslEngine:access$300(OpenSslEngine), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToByte(CharSequence), TrafficCounter:lastTime(), EmptyBinaryHeaders:setShort(AsciiString-short), CookieEncoderUtil:add(StringBuilder-String-long), EpollChannelOption:<clinit>(), HttpServerUpgradeHandler:selectUpgradeCodec(CharSequence), Http2Flags:toString(), DnsNameResolver:query0(Iterable-DnsQuestion-Promise), PlatformDependent:isRoot0(), ConcurrentHashMapV8$ValueSpliterator:advance(), Http2FrameLogger:logPushPromise(Http2FrameLogger$Direction-int-int-Http2Headers-int), ChunkedNioFile:readChunk(ChannelHandlerContext), LzmaFrameEncoder:allocateBuffer(ChannelHandlerContext-ByteBuf-boolean), OpenSslContext:chooseTrustManager(TrustManager[]), AbstractScheduledEventExecutor:scheduledTaskQueue(), DefaultBinaryHeaders$2:convertObject(Object), DefaultHttp2ConnectionEncoder:writeSettingsAck(ChannelHandlerContext-ChannelPromise), EmptyBinaryHeaders:set(AsciiString-AsciiString), StompSubframeAggregator:isLastContentMessage(StompContentSubframe), CompressorHttp2ConnectionEncoder$1:<init>(), EventLoop:asInvoker(), IovArray:memoryAddress(int), AbstractNioChannel$AbstractNioUnsafe$1:<init>(AbstractNioChannel$AbstractNioUnsafe-SocketAddress), UnpooledUnsafeDirectByteBuf:internalNioBuffer(), ReadOnlyUnsafeDirectByteBuf:_getInt(int), IntObjectHashMap$1:iterator(), Http2FrameListener:onWindowUpdateRead(ChannelHandlerContext-int-int), DefaultStompContentSubframe:retain(), DefaultConvertibleHeaders:entriesConverted(), SlicedByteBuf:nioBuffers(int-int), EmptyByteBuf:readMedium(), UnpooledDirectByteBuf:setBytes(int-ByteBuf-int-int), InternalLogger:debug(String-Object), CompositeByteBuf:toByteIndex(int), SpdySessionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), MixedFileUpload:getFile(), EpollDatagramChannel:newDirectBuffer(Object-ByteBuf), SSL:isInInit(long), DefaultHttpRequest:method(), DefaultChannelConfig:setWriteSpinCount(int), CorruptedFrameException:<init>(Throwable), ChunkedWriteHandler:doFlush(ChannelHandlerContext), NioSctpChannel:unbindAddress(InetAddress-ChannelPromise), DefaultFullHttpRequest:headers(), WrappedByteBuf:isWritable(int), MixedAttribute:<init>(String-long-Charset), EpollSocketChannelConfig:setTcpNoDelay(boolean), DefaultSocks5CommandResponse:bndPort(), EmptyBinaryHeaders:set(Object-Iterable), AsciiString$3:compare(CharSequence-CharSequence), SpdySession$StreamState:getPriority(), AbstractNioMessageChannel:isOpen(), SlicedByteBuf:setBytes(int-ByteBuf-int-int), Http2RemoteFlowController:initialWindowSize(int), Channel:isActive(), SpdyHeaderBlockZlibDecoder:releaseBuffer(), InterfaceHttpData$HttpDataType:<init>(String-int), CompleteChannelFuture:channel(), RxtxChannelConfig$Databits:valueOf(String), EpollSocketChannel:shutdownOutput(), HttpToHttp2ConnectionHandler:<init>(Http2Connection-Http2FrameReader-Http2FrameWriter-Http2FrameListener), MqttUnsubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader), ReadOnlyByteBufferBuf:_getUnsignedMedium(int), FastLzFrameDecoder:<init>(boolean), OpenSslServerSessionContext:isSessionCacheEnabled(), GlobalChannelTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext), MessageToMessageEncoder:encode(ChannelHandlerContext-Object-List), MemoryAttribute:<init>(String), MqttPublishMessage:content(), DefaultBinaryMemcacheRequest:release(), WebSocketClientHandshaker00:insertRandomCharacters(String), DefaultDatagramChannelConfig:setNetworkInterface(NetworkInterface), VoidChannelPromise:setSuccess(Void), ConcurrentHashMapV8:reduceValuesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), HttpContentEncoder:channelInactive(ChannelHandlerContext), InternalAttribute:retain(), HttpHeaders:clear(), AbstractInternalLogger:log(InternalLogLevel-String-Object-Object), OpenSslEngine$1:getPeerCertificates(), ReadOnlyUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer), BinaryMemcacheClientCodec$Encoder:encode(ChannelHandlerContext-Object-List), AsciiString:<init>(char[]), DefaultChannelPipeline$HeadContext:channelRead(ChannelHandlerContext-Object), MessageToMessageEncoder:acceptOutboundMessage(Object), Http2Exception:<init>(Http2Error), Promise[]:clone(), LengthFieldBasedFrameDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), EpollEventArray:<init>(int), ReplayingDecoderBuffer:slice(), SingleThreadEventExecutor$1:<init>(), NioUdtByteConnectorChannel:doBind(SocketAddress), ThreadPerChannelEventLoopGroup:isShuttingDown(), UnpooledDirectByteBuf:_getByte(int), DefaultPromise:hasWaiters(), SSLSession:getValueNames(), OpenSslX509Certificate:<init>(byte[]), IntObjectHashMap:toInternal(Object), ChannelPromise:tryFailure(Throwable), MixedAttribute:compareTo(Object), Http2Flags:ack(boolean), SwappedByteBuf:readBytes(byte[]-int-int), ForkJoinTask$AdaptedRunnable:run(), UnpooledDirectByteBuf:checkSrcIndex(int-int-int-int), AbstractByteBufAllocator:validate(int-int), DefaultHttp2Headers:addBoolean(Object-boolean), OioSocketChannel:remoteAddress(), WrappedByteBuf:markWriterIndex(), Unpooled:buffer(), NioEventLoop:selectNow(), DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), ChannelInboundHandlerAdapter:<init>(), AsciiString:parseFloat(int-int), DefaultTextHeaders$ValuesComposer:set(CharSequence-Iterable), DefaultHttpContent:copy(), EmptyConvertibleHeaders:addTimeMillis(Object-long), AbstractByteBuf:getBoolean(int), HttpUtil$ExtensionHeaderNames:<clinit>(), Socks5CommandRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List), SslHandler:renegotiate(Promise), DefaultHttp2ConnectionEncoder$FlowControlledBase:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-int-boolean-ChannelPromise), Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect), AbstractChannelHandlerContext:newSucceededFuture(), NioSocketChannel:doConnect(SocketAddress-SocketAddress), LocalServerChannel:doBeginRead(), SctpChannel:register(Selector-int), ForkJoinPool$WorkQueue:pollAt(int), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), HttpVersion:minorVersion(), EmptyBinaryHeaders:addDouble(AsciiString-double), ReplayingDecoderBuffer:readShort(), PlatformDependent0$3:<init>(), RecyclableArrayList$1:newObject(Recycler$Handle), OioServerSocketChannel:localAddress(), CommonsLogger:error(String-Object), HttpHeaders:setShort(CharSequence-short), InboundHttp2ToHttpPriorityAdapter:importOutOfMessageFlowHeaders(int-HttpHeaders), ConcurrentHashMapV8$CollectionView:toArray(), OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface), Channel:isWritable(), ForkJoinTask$AdaptedCallable:invoke(), Bzip2BlockCompressor:write(int), PooledHeapByteBuf:setBytes(int-ByteBuffer), BinaryMemcacheRequestDecoder:buildInvalidMessage(), ChannelFutureListener$1:<init>(), MixedFileUpload:getCharset(), EmptyHeaders:setObject(Object-Object[]), ObjectDecoderInputStream:readLong(), MessageToMessageCodec$2:<init>(MessageToMessageCodec), ConcurrentHashMapV8:reduceValuesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), HttpClientCodec$Decoder:isContentAlwaysEmpty(HttpMessage), ByteBufProcessor$8:<init>(), Channel$Unsafe:flush(), EmptyHttp2Headers:path(), HttpPostRequestEncoder$WrappedHttpRequest:protocolVersion(), DefaultHttp2Connection$DefaultEndpoint:reservePushStream(int-Http2Stream), CompositeByteBuf:setBoolean(int-boolean), DefaultChannelPromise:executor(), DefaultHttp2ConnectionDecoder:close(), DnsNameResolver:query(Iterable-DnsQuestion-Promise), CompositeByteBuf:writeDouble(double), ThreadPerChannelEventLoopGroup:shutdownGracefully(long-long-TimeUnit), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), EmptyByteBuf:checkIndex(int), ConcurrentHashMapV8$ReduceValuesTask:advance(), PlatformDependent0:freeDirectBuffer(ByteBuffer), GlobalChannelTrafficShapingHandler$1$1:remove(), WebSocketServerHandshaker:access$000(), DefaultHttpHeaders:setShort(Object-short), SpdyStreamStatus:hashCode(), AdvancedLeakAwareByteBuf:writeBytes(InputStream-int), DefaultBinaryMemcacheResponse:<init>(), PrimitiveCollections:<init>(), AbstractNioByteChannel$1:run(), SwappedByteBuf:writableBytes(), MqttSubAckMessage:payload(), DefaultHttpHeaders$HttpHeadersNameConverter:<init>(boolean), AbstractMemoryHttpData:renameTo(File), Future:isDone(), AdvancedLeakAwareByteBuf:readInt(), DefaultHttpHeaders:set(TextHeaders), AbstractInternalLogger:info(String-Object[]), HttpClientCodec$Encoder:encode(ChannelHandlerContext-Object-List), HttpHeadersEncoder:writeCharSequence(ByteBuf-int-CharSequence-int), WebSocketClientProtocolHandshakeHandler$1:operationComplete(Future), Unsafe:copyMemory(Object-long-Object-long-long), DefaultTextHeaders:access$1601(DefaultTextHeaders-Object), HAProxyProxiedProtocol$TransportProtocol[]:clone(), HttpServerUpgradeHandler:upgrade(ChannelHandlerContext-FullHttpRequest), ALPN:remove(SSLEngine), HttpObjectAggregator$AggregatedFullHttpRequest:toString(), Bzip2BlockDecompressor:blockLength(), QueryStringEncoder:<init>(String), LimitingByteInput:read(byte[]-int-int), DefaultHeaders:forEachEntry(Headers$EntryVisitor), SlicedByteBuf:getBytes(int-ByteBuffer), EpollMode:<clinit>(), Pool:create(long), ClassResolvers:<init>(), PooledDirectByteBuf:checkIndex(int-int), HttpObjectAggregator:decode(ChannelHandlerContext-Object-List), Channel$Unsafe:recvBufAllocHandle(), ChannelBufferByteOutput:write(byte[]-int-int), Epoll:ensureAvailability(), DefaultStompFrame:copy(), AbstractByteBuf:writeBytes(ByteBuf-int), Http2Connection$Endpoint:nextStreamId(), DefaultHttp2RemoteFlowController$2:<init>(DefaultHttp2RemoteFlowController), InternalThreadLocalMap:size(), DuplicatedByteBuf:getUnsignedMedium(int), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:compute(), EpollDatagramChannelConfig:setActiveOnOpen(boolean), AbstractDiskHttpData:deleteOnExit(), JdkLogger:warn(String-Object-Object), PooledDirectByteBuf:<init>(Recycler$Handle-int), SpdySession$StreamState:closeRemoteSide(), ChunkedNioFile:<init>(FileChannel-int), GlobalChannelTrafficShapingHandler:getWriteLimit(), DefaultChannelGroup:add(Channel), DefaultConvertibleHeaders:clear(), MpscLinkedQueueTailRef:<clinit>(), DiskFileUpload:touch(Object), PoolArena:<init>(PooledByteBufAllocator-int-int-int-int), DefaultOioSocketChannelConfig:setReceiveBufferSize(int), PlatformDependent:copyMemory(long-byte[]-int-long), DefaultHttpDataFactory:checkHttpDataSize(HttpData), CompleteFuture:await(long-TimeUnit), SwappedByteBuf:writeBoolean(boolean), DefaultHeaders:contains(Object), DiskFileUpload:touch(), IovArray:release(), DefaultChannelHandlerContext:checkNull(ChannelHandler), DefaultHttpHeaders:addLong(Object-long), EventLoopGroup:register(Channel), NioSocketChannel$NioSocketChannelUnsafe:closeExecutor(), OpenSslServerSessionContext:setSessionTimeout(int), SlicedByteBuf:_getLong(int), PemReader:<clinit>(), MessageFormatter:format(String-Object), PrimitiveCollections$EmptyIntObjectMap:put(int-Object), ChannelPipeline:context(String), EpollDatagramChannel:clearFlag(int), Socks5PasswordAuthRequestDecoder:actualReadableBytes(), NativeDatagramPacketArray:<clinit>(), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-Iterable), CorsConfig$Builder:allowedRequestHeaders(String[]), OpenSslSessionStats:timeouts(), AbstractServerChannel:filterOutboundMessage(Object), SslHandler$5:<init>(SslHandler-ScheduledFuture), AbstractNioByteChannel:incompleteWrite(boolean), TypeParameterMatcher:match(Object), Log4JLogger:debug(String), DefaultHttp2Headers:addDouble(AsciiString-double), AsciiHeadersEncoder:c2b(char), PooledHeapByteBuf:<init>(Recycler$Handle-int-PooledHeapByteBuf$1), HttpObjectEncoder:acceptOutboundMessage(Object), AbstractNioMessageChannel$NioMessageUnsafe:read(), DefaultTextHeaders:addObject(CharSequence-Object[]), SpdyFrameCodec$1:operationComplete(ChannelFuture), UnpooledHeapByteBuf:_setMedium(int-int), ConcurrentHashMapV8:getOrDefault(Object-Object), ApplicationProtocolConfig$SelectorFailureBehavior:<init>(String-int), EpollDatagramChannel:doClose(), AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel), DefaultStompHeaders:addLong(Object-long), Http2ConnectionHandler:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise), AbstractReferenceCountedByteBuf:setChar(int-int), AbstractByteBuf:slice(), DelimiterBasedFrameDecoder:validateMaxFrameLength(int), EmbeddedEventLoop:unwrap(), Bzip2DivSufSort$PartitionResult:<init>(int-int), FullHttpRequest:method(), DefaultTextHeaders:setObject(CharSequence-Object[]), Lz4FrameEncoder:<init>(), NioSctpChannel:doReadMessages(List), DnsNameResolver:access$400(), ConcurrentHashMapV8$ReduceKeysTask:firstComplete(), SslProvider:ordinal(), OpenSslEngine$1:getLocalCertificates(), NioSocketChannel:localAddress0(), ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), OpenSslEngine:handshake(), PoolChunkList:toString(), ConcurrentHashMapV8$ForEachValueTask:addToPendingCount(int), ReplayingDecoderBuffer:discardReadBytes(), EpollServerSocketChannelConfig:setReuseAddress(boolean), InternalLogger:warn(String-Object[]), ConcurrentHashMapV8$MapReduceMappingsToLongTask:getRawResult(), AsciiHeadersEncoder$NewlineType[]:clone(), EventLoop:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), DefaultSocketChannelConfig:setWriteSpinCount(int), MqttConnectMessage:fixedHeader(), GlobalChannelTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), DefaultChannelGroup:contains(Object), WebSocketExtensionUtil:isWebsocketUpgrade(HttpMessage), HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-int-int), AbstractChannel:compareTo(Channel), ByteBuf:getBytes(int-byte[]), DnsMessage:header(), ChannelException:<init>(String-Throwable), AbstractFuture:get(long-TimeUnit), PausableChannelEventExecutor:<init>(), ForkJoinPool:registerWorker(ForkJoinWorkerThread), ChannelInitializer:<clinit>(), DefaultHttpMessage:protocolVersion(), AsciiString$4:compare(Object-Object), ChannelId:compareTo(Object), OpenSslX509Certificate:hasUnsupportedCriticalExtension(), UnpooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int), SpdySessionHandler$1:operationComplete(Future), ReplayingDecoderBuffer:writeFloat(float), MqttDecoder$DecoderState:valueOf(String), ThreadPerChannelEventLoopGroup:shutdown(), AbstractByteBuf:readBytes(GatheringByteChannel-int), Native:sendFd(int-int), DefaultBinaryHeaders:set(AsciiString-Iterable), PlatformDependent:isRoot(), FixedCompositeByteBuf:setIndex(int-int), NioUdtAcceptorChannel:config(), MqttUnacceptableProtocolVersionException:<init>(), MqttPublishMessage:retain(int), KeyManagerFactory:getKeyManagers(), DefaultHttp2FrameWriter:verifyErrorCode(long), ServerBootstrap$1:initChannel(Channel), NioSctpChannel:javaChannel(), SSLEngine:setNeedClientAuth(boolean), NetUtil:toAddressString(InetAddress), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress), Attribute:set(Object), DefaultByteBufHolder:retain(int), ReplayingDecoderBuffer:getBytes(int-ByteBuf-int), DefaultServerSocketChannelConfig:setPerformancePreferences(int-int-int), DefaultDatagramChannelConfig:setConnectTimeoutMillis(int), MixedFileUpload:setFilename(String), ServerBootstrap:childAttr(AttributeKey-Object), ConcurrentHashMapV8$MapReduceKeysToLongTask:addToPendingCount(int), CorsConfig:<init>(CorsConfig$Builder-CorsConfig$1), AbstractInternalLogger:error(String-Object[]), DefaultLastStompContentSubframe:touch(Object), JdkZlibEncoder:<init>(int-byte[]), DnsNameResolver$DnsResponseHandler:exceptionCaught(ChannelHandlerContext-Throwable), ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]), SpdyHttpDecoder:<init>(SpdyVersion-int), ByteBuf:retain(), ThreadPerChannelEventLoop$1:operationComplete(ChannelFuture), DefaultSpdyHeaders:addInt(CharSequence-int), ConcurrentHashMapV8$MapReduceKeysToLongTask:getRawResult(), ReplayingDecoderBuffer:<init>(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:capacity(), HttpClientCodec$Encoder:<init>(HttpClientCodec), NioUdtAcceptorChannel:doWriteMessage(Object-ChannelOutboundBuffer), PemReader:safeClose(InputStream), ChannelHandlerInvoker:invokeChannelInactive(ChannelHandlerContext), NioSctpChannel:<init>(Channel-SctpChannel), OioByteStreamChannel:checkEOF(FileRegion), DefaultThreadFactory:<init>(String-boolean-int), Bzip2MoveToFrontTable:indexToFront(int), PlatformDependent0:putInt(long-int), LoggingHandler:channelInactive(ChannelHandlerContext), AbstractEpollStreamChannel:remoteAddress(), FullHttpResponse:setStatus(HttpResponseStatus), DefaultChannelGroupFuture:cause(), Native:isKeepAlive(int), MqttVersion:valueOf(String), PooledHeapByteBuf:_setShort(int-int), GlobalEventExecutor:startThread(), ChannelFutureListener$2:operationComplete(Future), NioUdtMessageConnectorChannel:doFinishConnect(), Native:iovMax(), DefaultChannelPipeline:disconnect(), AbstractChannelHandlerContext:fireChannelActive(), DomainSocketAddress:hashCode(), SpdySessionHandler:channelRead(ChannelHandlerContext-Object), ConcurrentHashMapV8:isEmpty(), ReadOnlyByteBufferBuf:_setLong(int-long), AbstractNioByteChannel:pipeline(), DefaultSpdyHeaders:<clinit>(), ReplayingDecoderBuffer:hashCode(), PrimitiveCollections$UnmodifiableIntObjectMap$EntryImpl:<init>(PrimitiveCollections$UnmodifiableIntObjectMap-IntObjectMap$Entry), ChunkDecoderFactory:safeInstance(), PooledDirectByteBuf:checkSrcIndex(int-int-int-int), WriteTimeoutHandler$2:<init>(WriteTimeoutHandler-ScheduledFuture), OioSctpServerChannel$2:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), OpenSslEngine$ClientAuthMode:values(), DefaultHttp2ConnectionDecoder:flowController(), EmptyByteBuf:getUnsignedShort(int), DefaultTextHeaders:setChar(Object-char), AbstractEpollServerChannel$EpollServerSocketUnsafe:<clinit>(), CompatibleMarshallingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), Headers$ValueConverter:convertToInt(Object), JdkSslServerContext:toNegotiator(ApplicationProtocolConfig-boolean), Socks5AddressType:valueOf(byte), UnpooledDirectByteBuf:alloc(), AbstractChannelHandlerContext:close(), DefaultHeaders:getFloatAndRemove(Object), SnappyFrameEncoder:writeChunkLength(ByteBuf-int), DefaultHeaders:containsTimeMillis(Object-long), EmptyByteBuf:writeBytes(byte[]), SpdyHeaderBlockDecoder:endHeaderBlock(SpdyHeadersFrame), DefaultMemcacheContent:duplicate(), SwappedByteBuf:maxWritableBytes(), SwappedByteBuf:isWritable(), PooledDirectByteBuf:arrayOffset(), PlatformDependent:newAtomicReferenceFieldUpdater(Class-String), Parser:parseFrom(byte[]-int-int-ExtensionRegistryLite), EventExecutor:invokeAll(Collection-long-TimeUnit), ConcurrentHashMapV8$Node:find(int-Object), ReplayingDecoderBuffer:writerIndex(int), CorsConfig:withOrigins(String[]), JdkSslEngine:setWantClientAuth(boolean), AbstractServerChannel$DefaultServerUnsafe:safeSetFailure(ChannelPromise-Throwable), DnsNameResolver:resolveAddressTypesUnsafe(), HttpHeaderUtil:isTransferEncodingChunked(HttpMessage), QueryStringEncoder:toString(), MqttDecoder:decodeString(ByteBuf-int-int), PlatformDependent0:getInt(long), HttpResponseStatus:hashCode(), EmptyBinaryHeaders:addObject(Object-Object[]), DefaultHttpContent:touch(), FullHttpMessage:trailingHeaders(), MqttDecoder:decodeMsbLsb(ByteBuf), PlatformDependent0:newAtomicReferenceFieldUpdater(Class-String), DefaultHeaders:getChar(Object-char), CommPort:enableReceiveTimeout(int), MemoryFileUpload:setContent(ByteBuf), NioSctpChannel$2:run(), DefaultHttpHeaders:setByte(Object-byte), ConcurrentHashMapV8$ReduceValuesTask:invoke(), DefaultHttp2StreamRemovalPolicy:handlerAdded(ChannelHandlerContext), DefaultHttpHeaders$HttpHeadersValidationConverter:validateValue(AsciiString), SSLContext:sessionConnectRenegotiate(long), DefaultChannelGroupFuture:setSuccess(Object), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:setTimeZone(TimeZone), SctpNotificationHandler:fireEvent(Notification), MessageFormatter:objectArrayAppend(StringBuffer-Object[]-Map), ReplayingDecoderBuffer:getBytes(int-GatheringByteChannel-int), NioUdtByteConnectorChannel:javaChannel(), DefaultChannelGroupFuture:iterator(), AbstractEventLoop:unwrap(), ConcurrentHashMapV8$ValuesView:add(Object), SingleThreadEventExecutor:wakesUpForTask(Runnable), SingleThreadEventExecutor:shutdownGracefully(long-long-TimeUnit), DefaultSpdyHeaders$1:<init>(), MixedFileUpload:getString(Charset), RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage), Log:debug(Object), ChannelMatcher:matches(Channel), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), Bzip2DivSufSort:<init>(byte[]-int[]-int), SwappedByteBuf:<init>(ByteBuf), ApplicationProtocolConfig$Protocol:valueOf(String), ByteBufHolder:retain(), ContinuationWebSocketFrame:<init>(), OpenSslClientContext$OpenSslClientSessionContext:<init>(long), ConcurrentHashMapV8:replace(Object-Object), NioSctpServerChannel:doDisconnect(), CorsHandler:channelRead(ChannelHandlerContext-Object), AdvancedLeakAwareByteBuf:getInt(int), AbstractEventExecutor:newTaskFor(Runnable-Object), DefaultSocks5InitialRequest:<init>(Iterable), AbstractOioChannel:isReadPending(), OpenSslEngine:access$500(OpenSslEngine), AbstractOioByteChannel:alloc(), ResourceLeakDetector$DefaultResourceLeak:access$102(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak), ForkJoinPool:releasePlock(int), DefaultHttp2Headers:setBoolean(Object-boolean), ChannelMatchers$InvertMatcher:<init>(ChannelMatcher), PausableChannelEventExecutor:invokeDeregister(ChannelHandlerContext-ChannelPromise), DefaultOioSocketChannelConfig:setSoLinger(int), DefaultBinaryHeaders$2:convertByte(byte), SoftReferenceMap:<init>(Map), ConcurrentHashMapV8$KeySetView:iterator(), DefaultProgressivePromise:<init>(EventExecutor), DefaultChannelPipeline$HeadContext:access$600(DefaultChannelPipeline$HeadContext), SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus), AbstractChannel$AbstractUnsafe:beginRead(), NioEventLoop:runAllTasks(), LzfEncoder:encode(ChannelHandlerContext-Object-ByteBuf), CompositeByteBuf:getBytes(int-ByteBuf-int), DefaultHttpHeaders:setAll(TextHeaders), DiskFileUpload:getContentTransferEncoding(), HttpResponseDecoder:isContentAlwaysEmpty(HttpMessage), WebSocketClientHandshaker07:<clinit>(), DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:maxHeaderTableSize(), HAProxyProxiedProtocol:valueOf(String), IdleStateHandler:<clinit>(), SSLContext:getInstance(String), InboundHttp2ToHttpAdapter:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), Lz4FrameEncoder:close(), PausableChannelEventExecutor$ChannelRunnableEventExecutor:run(), IntObjectMap:containsKey(int), JdkLogger:warn(String), ForkJoinPool:isTerminated(), AbstractInternalLogger:isWarnEnabled(), CompositeByteBuf:removeComponents(int-int), SpdySynStreamFrame:isUnidirectional(), WebSocketClientProtocolHandshakeHandler:channelActive(ChannelHandlerContext), Socks4ClientDecoder:actualReadableBytes(), WrappedByteBuf:memoryAddress(), ConcurrentHashMapV8$MapReduceEntriesToIntTask:firstComplete(), ByteBuf:arrayOffset(), HttpPostMultipartRequestDecoder:readLine(), ReadOnlyByteBufferBuf:getUnsignedMedium(int), DefaultHttp2StreamRemovalPolicy:handlerRemoved(ChannelHandlerContext), EpollDatagramChannel$EpollDatagramChannelUnsafe:localAddress(), EpollDomainSocketChannel:localAddress(), ConcurrentHashMapV8$ForEachTransformedKeyTask:invoke(), DefaultHttp2FrameReader$1:headersBlockBuilder(), MqttFixedHeader:toString(), BinaryMemcacheMessage:setDecoderResult(DecoderResult), ReadTimeoutHandler:handlerRemoved(ChannelHandlerContext), DefaultHttp2Connection:<init>(boolean), ReadOnlyByteBufferBuf:getLong(int), LengthFieldBasedFrameDecoder:<init>(int-int-int), DefaultHttp2ConnectionDecoder$FrameReadListener:shouldIgnoreFrame(Http2Stream-boolean), OpenSslApplicationProtocolNegotiator:protocols(), Socks5ServerEncoder:encode(ChannelHandlerContext-Socks5Message-ByteBuf), HttpPostRequestEncoder$WrappedFullHttpRequest:release(), FixedCompositeByteBuf:getBytes(int-OutputStream-int), AbstractReferenceCountedByteBuf:setDouble(int-double), PooledUnsafeDirectByteBuf:initMemoryAddress(), DefaultSpdyHeaders:setDouble(CharSequence-double), SpdyHeaderBlockRawDecoder$State:<init>(String-int), DefaultOioServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultHeaders:getDouble(Object), NioSocketChannel:<init>(), DnsResponse:touch(Object), SSLSession:getPeerPort(), Attribute:setMaxSize(long), DefaultChannelPipeline$4:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), EpollChannelConfig:setConnectTimeoutMillis(int), PooledUnsafeDirectByteBuf:checkReadableBytes(int), ReadOnlyByteBuf:setBytes(int-byte[]-int-int), HAProxyCommand[]:clone(), AbstractNioChannel$AbstractNioUnsafe$1:run(), FormattingTuple:<init>(String-Object[]-Throwable), ConcurrentSet:size(), StompSubframeDecoder$State:valueOf(String), CompressorHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), AbstractSocks5Message:<init>(), Bzip2BlockCompressor:write(byte[]-int-int), CorruptedFrameException:<init>(String-Throwable), OpenSslSessionContext$EmptyEnumeration:<init>(OpenSslSessionContext$1), ConcurrentHashMapV8:putAll(Map), DefaultHttp2RemoteFlowController$FlowState$Frame:write(int), NioSocketChannel:newSocket(SelectorProvider), AbstractEpollServerChannel:pipeline(), DnsHeader:id(), ConcurrentHashMapV8:searchKeys(long-ConcurrentHashMapV8$Fun), VoidChannelPromise:unvoid(), ReadOnlyByteBufferBuf:_getInt(int), MqttConnectPayload:willTopic(), DefaultHttp2RemoteFlowController:state(Http2Stream), DecoderResult:isFinished(), HttpServerUpgradeHandler:<clinit>(), DefaultChannelPipeline:addFirst(ChannelHandlerInvoker-ChannelHandler[]), SwappedByteBuf:writeShort(int), MqttTopicSubscription:topicName(), TypeParameterMatcher:get(Class), JdkNpnApplicationProtocolNegotiator:<init>(boolean-boolean-String[]), DefaultHttpRequest:toString(), WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), AbstractChannel:localAddress(), ByteBufInputStream:mark(int), SslHandler:unwrap(SSLEngine-ByteBuf-int-int-ByteBuf), Bzip2MoveToFrontTable:<init>(), EpollDatagramChannelConfig:setNetworkInterface(NetworkInterface), DefaultPromise:await(long), FastThreadLocal:remove(InternalThreadLocalMap), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate(), DefaultHttpHeaders:set(Object-Object[]), DefaultExecutorServiceFactory:toName(Class), Signal:toString(), NioUdtMessageConnectorChannel:doConnect(SocketAddress-SocketAddress), AbstractEventExecutor:inEventLoop(), DefaultHttpHeaders:setLong(CharSequence-long), MqttCodecUtil:isValidClientId(MqttVersion-String), DuplicatedByteBuf:getBytes(int-ByteBuffer), DuplicatedByteBuf:setShort(int-int), Bzip2BitReader:refill(), PooledUnsafeDirectByteBuf:addr(int), DnsNameResolver$2:<init>(DnsNameResolver), EpollDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), FullBinaryMemcacheRequest:setReserved(short), FixedCompositeByteBuf:nioBuffer(int-int), AbstractInternalLogger:warn(String-Throwable), AbstractHttpData:deallocate(), Bzip2Encoder:access$100(Bzip2Encoder-ChannelHandlerContext-ChannelPromise), ReadOnlyByteBufferBuf:writerIndex(int), HttpResponseStatus:reasonPhrase(), AbstractHttpData:touch(), DefaultHttp2ConnectionDecoder$FrameReadListener:onPriorityRead(ChannelHandlerContext-int-int-short-boolean), DnsEntry:toString(), AsciiString$4:<init>(), EpollDatagramChannel:unsafe(), DefaultChannelPipeline$HeadContext:<clinit>(), DomainNameMapping:needsNormalization(String), SelectedSelectionKeySet:doubleCapacityB(), DefaultSpdyHeaders:addByte(CharSequence-byte), DefaultSpdyDataFrame:streamId(), HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders), AbstractChannel$AbstractUnsafe$7:run(), RxtxChannelConfig$Databits:values(), AbstractChannel$PausableChannelEventLoop:<init>(AbstractChannel-EventLoop), DefaultTextHeaders$MultipleFieldsValueComposer:<init>(DefaultTextHeaders-DefaultTextHeaders$1), DomainNameMapping:matches(String-String), ReadOnlyUnsafeDirectByteBuf:checkIndex(int), HAProxyMessageDecoder:findEndOfLine(ByteBuf), ReferenceCounted:touch(), PerMessageDeflateClientExtensionHandshaker:newRequestData(), AbstractInternalLogger:info(Throwable), IntObjectHashMap:access$300(IntObjectHashMap), DefaultChannelGroupFuture:isPartialFailure(), ChannelOutboundBuffer$Entry$1:<init>(), Bzip2Encoder:close(ChannelHandlerContext-ChannelPromise), ReadOnlyByteBuf:_getInt(int), HttpPostRequestEncoder:finalizeRequest(), SpdyHeaderBlockZlibDecoder:end(), EmptyTextHeaders:setLong(CharSequence-long), EpollChannelConfig:checkChannelNotRegistered(), Native:eventFdWrite(int-long), EpollSocketChannelConfig:setAutoRead(boolean), PooledUnsafeDirectByteBuf$1:<init>(), ZlibWrapper:valueOf(String), CorsConfig$DateValueGenerator:<init>(), DefaultChannelConfig:setConnectTimeoutMillis(int), MqttDecoder$DecoderState:<clinit>(), ReplayingDecoderBuffer:forEachByte(int-int-ByteBufProcessor), EmbeddedEventLoop:invokeChannelActive(ChannelHandlerContext), FixedCompositeByteBuf:copy(int-int), SctpChannel:isOpen(), DecoderResult:<clinit>(), PongWebSocketFrame:duplicate(), FastThreadLocalAccess:setThreadLocalMap(InternalThreadLocalMap), ConcurrentHashMapV8$ReduceEntriesTask:addToPendingCount(int), DefaultHttp2Connection$DefaultStream:access$1202(DefaultHttp2Connection$DefaultStream-DefaultHttp2Connection$PropertyMap), SwappedByteBuf:setShort(int-int), Crc32c:crc32c(int-int), ConcurrentHashMapV8$CollectionView:getMap(), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:values(), DefaultFullHttpResponse:hashCode(), Http2OrHttpChooser:decode(ChannelHandlerContext-ByteBuf-List), SwappedByteBuf:refCnt(), DefaultTextHeaders:set(CharSequence-CharSequence[]), ReferenceCounted:release(), UnpooledUnsafeDirectByteBuf:allocateDirect(int), DefaultHttp2FrameReader:<init>(), LimitingByteInput$TooBigObjectException:<init>(), JdkSslEngine:getWantClientAuth(), NioSctpServerChannel$1:run(), JdkZlibDecoder:<init>(byte[]), SSLEngineResult$HandshakeStatus:values(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress), IdleStateHandler$AllIdleTimeoutTask:run(), AsciiHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int), FixedCompositeByteBuf:capacity(int), ChannelHandler:channelActive(ChannelHandlerContext), DefaultChannelPromise:removeListener(GenericFutureListener), ConcurrentHashMapV8$SearchMappingsTask:advance(), ConcurrentHashMapV8$EntrySetView:equals(Object), NioSctpChannel:newPromise(), Recycler$DefaultHandle:access$200(Recycler$DefaultHandle), SpdySessionStatus:equals(Object), ZlibDecoder:handlerRemoved0(ChannelHandlerContext), SpdySynReplyFrame:streamId(), AbstractDiskHttpData:getPrefix(), DefaultHeaders:getAll(Object), DnsClass:valueOf(String), ConcurrentHashMapV8$MapReduceValuesToIntTask:compute(), SSLContext:sessionAcceptRenegotiate(long), OioDatagramChannel:remoteAddress0(), SystemPropertyUtil:log(String-Exception), SingleThreadEventExecutor:awaitTermination(long-TimeUnit), PausableChannelEventExecutor:submit(Runnable), EpollSocketChannelConfig:setAllowHalfClosure(boolean), EpollEventLoop:newTaskQueue(), LocalServerChannel$2:run(), DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator), AbstractInternalLogger:warn(String-Object), PoolSubpage:setNextAvail(int), CipherSuiteConverter:toJavaHandshakeAlgo(String-boolean), EventExecutor:inEventLoop(Thread), DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), ByteBuf:writableBytes(), DnsHeader:opcode(), WrappedByteBuf:writeBoolean(boolean), PoolArena$DirectArena:memoryCopy(ByteBuffer-int-ByteBuffer-int-int), UnsafeAtomicReferenceFieldUpdater:lazySet(Object-Object), DefaultPromise:addListener(GenericFutureListener), EpollTcpInfo:<init>(), Future:addListener(GenericFutureListener), ForkJoinTask:tryUnfork(), AdvancedLeakAwareByteBuf:writeFloat(float), Attribute:getFile(), DefaultHttpHeaders:addFloat(Object-float), DefaultHttp2LocalFlowController$FlowState:window(int), EpollServerSocketChannelConfig:isReusePort(), HAProxyProxiedProtocol$TransportProtocol:values(), DefaultExecutorServiceFactory:newExecutorService(int), Http2InboundFrameLogger:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), WebSocketServerHandshaker:handshake(Channel-HttpRequest-HttpHeaders-ChannelPromise), CompositeByteBuf:addComponent(ByteBuf), DefaultHttpHeaders:addObject(CharSequence-Iterable), WebSocketClientHandshaker07:uri(), OpenSslEngine:access$600(OpenSslEngine), Native:errnoEBADF(), AbstractInternalLogger:trace(String-Throwable), EmptyByteBuf:getBytes(int-GatheringByteChannel-int), EventExecutor:submit(Runnable-Object), SocksPortUnificationServerHandler:<init>(Socks5ServerEncoder), Socks4ProxyHandler:removeDecoder(ChannelHandlerContext), JdkSslSession:getValueNames(), NoopNameResolverGroup:newResolver(EventExecutor), CertificateIssuerName:<init>(X500Name), EpollDomainSocketChannel:doBind(SocketAddress), InsecureTrustManagerFactory$1:checkClientTrusted(X509Certificate[]-String), Base64:decode4to3(byte[]-int-ByteBuf-int-Base64Dialect), ForkJoinTask:getSurplusQueuedTaskCount(), DefaultStompHeaders:clear(), UnpooledDirectByteBuf:allocateDirect(int), ByteBufAllocator:directBuffer(), DefaultSpdyDataFrame:setLast(boolean), AbstractNioChannel:access$202(AbstractNioChannel-ScheduledFuture), AbstractRemoteAddressFilter:channelRegistered(ChannelHandlerContext), AbstractByteBuf:setBytes(int-ByteBuf), Attribute:getByteBuf(), BinaryMemcacheRequest:setReserved(short), DnsQueryContext:promise(), Socks5CommandResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), DefaultRxtxChannelConfig:setBaudrate(int), ForkJoinTask:invokeAll(Collection), HttpRequest:decoderResult(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), StompSubframeAggregator:isStartMessage(StompSubframe), Native:socketDomain(), AdvancedLeakAwareByteBuf:readUnsignedMedium(), DefaultHttpDataFactory:<init>(boolean), NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel), ChannelInitializer:channelRegistered(ChannelHandlerContext), ResourceLeakDetector:<init>(Class-int-long), DefaultAttributeMap$DefaultAttribute:access$202(DefaultAttributeMap$DefaultAttribute-DefaultAttributeMap$DefaultAttribute), InterfaceHttpPostRequestDecoder:destroy(), SslProvider:<init>(String-int), DefaultHttp2Headers:addLong(Object-long), LastHttpContent$1:setDecoderResult(DecoderResult), FileUpload:getByteBuf(), EmptyBinaryHeaders:setObject(AsciiString-Object[]), PlatformDependent:newConcurrentHashMap(), Native:sendToAddress(int-long-int-int-InetAddress-int), SwappedByteBuf:copy(), ChannelPipeline:context(Class), CountedCompleter:<init>(), ByteBuf:toString(Charset), ReplayingDecoderBuffer:setByte(int-int), DefaultChannelHandlerInvoker$11:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), SpdyHttpHeaders$Names:<clinit>(), NioSctpServerChannel:unbindAddress(InetAddress), EpollEventLoop:hasTasks(), ObjectDecoderInputStream:read(byte[]), CaseIgnoringComparator:<clinit>(), BouncyCastleProvider:<init>(), CompressorHttp2ConnectionEncoder:newContentCompressor(AsciiString), DefaultPromise:notifyProgressiveListeners(long-long), Native:sendTo0(int-ByteBuffer-int-int-byte[]-int-int), MessageToByteEncoder:<init>(), Http2FrameListenerDecorator:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean), JdkSslServerContext:<init>(File-File-String-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long), ReplayingDecoderBuffer:checkReadableBytes(int), FixedCompositeByteBuf:discardReadBytes(), FileRegion:transferTo(WritableByteChannel-long), ChannelPipeline:context(ChannelHandler), InboundHttp2ToHttpAdapter$ImmediateSendDetector:copyIfNeeded(FullHttpMessage), Logger:warn(String), DefaultChannelHandlerInvoker$WriteTask:<init>(Recycler$Handle), UnreleasableByteBuf:touch(Object), SpdySessionHandler$4:<init>(SpdySessionHandler-ChannelHandlerContext), ConcurrentHashMapV8$EntrySpliterator:tryAdvance(ConcurrentHashMapV8$Action), PooledHeapByteBuf:nioBuffer(int-int), HttpPostMultipartRequestDecoder:skipOneLine(), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:<init>(JdkSslEngine-Set), GlobalEventExecutor:pollScheduledTask(long), DefaultChannelGroupFuture:await(), OioEventLoopGroup:<init>(int-Executor), EmptyTextHeaders:setShort(Object-short), DefaultFullHttpRequest:retain(), PausableChannelEventExecutor:invokeChannelInactive(ChannelHandlerContext), EpollDatagramChannelConfig:validate(ChannelOption-Object), AbstractNioMessageChannel:remoteAddress(), Bzip2BlockDecompressor:<init>(int-int-boolean-int-Bzip2BitReader), EmptyBinaryHeaders:add(Object-Object[]), EmptyByteBuf:setInt(int-int), OpenSslEngine:setUseClientMode(boolean), ConcurrentHashMapV8$Node:setValue(Object), StompSubframeDecoder:checkpoint(Object), ThreadPerChannelEventLoop:run(), HttpHeaders:getLong(Object), SwappedByteBuf:readSlice(int), GlobalChannelTrafficShapingHandler:checkWaitReadTime(ChannelHandlerContext-long-long), ProxyHandler$2:run(), DefaultHttpHeaders:setByte(CharSequence-byte), byte[]:clone(), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:setRefCnt(int), AbstractChannelHandlerContext:findContextOutbound(), CompositeByteBuf:writeBytes(ByteBuf-int), MqttConnectVariableHeader:isWillFlag(), DefaultFullHttpResponse:setProtocolVersion(HttpVersion), EpollServerSocketChannel:localAddress0(), AdvancedLeakAwareByteBuf:duplicate(), SSL:getTime(long), ReferenceMap:put(Object-Object), ChannelHandlerAdapter:exceptionCaught(ChannelHandlerContext-Throwable), DefaultCookie:maxAge(), DuplicatedByteBuf:nioBuffer(int-int), DefaultDatagramChannelConfig:setInterface(InetAddress), Socks5AddressType:<init>(int), ConcurrentHashMapV8$ValueIterator:nextElement(), EmbeddedChannel$State:<clinit>(), OpenSslServerContext:sessionContext(), CommonsLogger:error(String-Throwable), ConcurrentHashMapV8$ValuesView:spliterator166(), HttpMethod:valueOf(String), DefaultFullHttpResponse:toString(), DnsClass:hashCode(), HttpPostMultipartRequestDecoder:destroy(), WrappedByteBuf:writeBytes(ScatteringByteChannel-int), SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak), AbstractByteBuf:getUnsignedShort(int), Attribute:delete(), WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean), UnsafeDirectSwappedByteBuf:getChar(int), HttpResponseStatus:codeAsText(), AdaptiveRecvByteBufAllocator:<init>(), ObjectDecoderInputStream:skipBytes(int), AbstractBootstrap:localAddress(SocketAddress), ProxyHandler:exceptionMessage(String), SslHandler:flush(ChannelHandlerContext), DefaultFullHttpRequest:touch(Object), DefaultBinaryMemcacheResponse:release(int), AbstractEventExecutorGroup:execute(Runnable), DefaultRxtxChannelConfig:setMaxMessagesPerRead(int), ThreadDeathWatcher:schedule(Thread-Runnable-boolean), MqttCodecUtil:isValidPublishTopicName(String), UnpooledUnsafeDirectByteBuf:internalNioBuffer(int-int), WebSocketServerHandshaker13:maxFramePayloadLength(), SwappedByteBuf:markWriterIndex(), ChannelMatchers$CompositeMatcher:matches(Channel), OioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise), Channel:unsafe(), SlicedByteBuf:_getByte(int), CompositeByteBuf:deallocate(), UnpooledDirectByteBuf:internalNioBuffer(), DefaultChannelGroup:compareTo(ChannelGroup), Log4JLogger:trace(String-Object[]), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), ConcurrentHashMapV8:compareComparables(Class-Object-Object), Socks5InitialResponseDecoder$State:ordinal(), HttpPostStandardRequestDecoder:<init>(HttpDataFactory-HttpRequest), DefaultHttp2ConnectionDecoder:localSettings(Http2Settings), HttpContentEncoder:isPassthru(HttpResponse), DefaultPromise:cancel(boolean), MessageToMessageCodec:channelInactive(ChannelHandlerContext), WrappedByteBuf:release(), DefaultHttpHeaders:setFloat(CharSequence-float), MixedFileUpload:setContent(InputStream), DefaultBinaryHeaders$2:convertToFloat(AsciiString), OpenSslEngine:writeEncryptedData(ByteBuffer), RtspResponseEncoder:<init>(), EpollDatagramChannelConfig:getTimeToLive(), DnsQueryContext:allocateId(), WebSocketFrameAggregator:hasContentLength(WebSocketFrame), Headers:isEmpty(), DefaultEventExecutor:<init>(EventExecutorGroup), WebSocketClientHandshaker00:maxFramePayloadLength(), DefaultCookie:equals(Object), FileUpload:setContentTransferEncoding(String), DefaultTextHeaders:addInt(CharSequence-int), FingerprintTrustManagerFactory$2:checkTrusted(String-X509Certificate[]), OioDatagramChannel:doBind(SocketAddress), Socks4CommandStatus:compareTo(Socks4CommandStatus), AbstractNioChannel:eventLoop(), RecyclableMpscLinkedQueueNode:unlink(), OioSctpChannel:<init>(SctpChannel), JdkBaseApplicationProtocolNegotiator:<clinit>(), AbstractOioChannel$1:<init>(AbstractOioChannel), EpollServerSocketChannel:fd(), ApplicationProtocolConfig$Protocol:values(), DiskAttribute:retain(int), ThreadLocalInsecureRandom:random(), WrappedByteBuf:readByte(), MqttIdentifierRejectedException:<init>(String), DefaultFileRegion:count(), CompressorHttp2ConnectionEncoder$Builder:build(), DelimiterBasedFrameDecoder:<init>(int-ByteBuf[]), Native:writev(int-ByteBuffer[]-int-int), GlobalTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext), Http2Stream:open(boolean), HttpVersion:version0(String), AsciiString:parseLong(int), UnpooledDirectByteBuf:setBytes(int-byte[]-int-int), SpdyFrameCodec:readFrameError(String), DefaultChannelHandlerInvoker$WriteTask$1:newObject(Recycler$Handle), NioEventLoop:cleanup(), SpdyHeaderBlockDecoder:decode(ByteBufAllocator-ByteBuf-SpdyHeadersFrame), ChannelHandlerContext:newSucceededFuture(), IntObjectHashMap$1$1:<init>(IntObjectHashMap$1), DefaultHttp2Connection$DefaultEndpoint:isServer(), DefaultSpdyHeaders:setTimeMillis(CharSequence-long), HttpServerUpgradeHandler$SourceCodec:upgradeFrom(ChannelHandlerContext), SocksVersion:valueOf(String), JdkAlpnSslEngine$1:unsupported(), ResourceLeakDetector:access$200(ResourceLeakDetector), ServerCookieEncoder:encode(String-String), AbstractChannelHandlerContext:fireChannelRegistered(), Base64:encode(ByteBuf), SpdyFrameEncoder:encodeSynStreamFrame(ByteBufAllocator-int-int-byte-boolean-boolean-ByteBuf), HttpObjectAggregator$AggregatedFullHttpResponse:copy(), OpenSslServerSessionContext:getSessionCacheSize(), InboundHttp2ToHttpPriorityAdapter:<clinit>(), LocalChannel$LocalUnsafe:ensureOpen(ChannelPromise), Native:read0(int-ByteBuffer-int-int), MpscLinkedQueue:contains(Object), EmptyByteBuf:nioBuffers(), Channel$Unsafe:connect(SocketAddress-SocketAddress-ChannelPromise), Bzip2Encoder:close(ChannelPromise), DefaultHttp2FrameWriter:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise), SingleThreadEventLoop:parent(), AbstractChannel$PausableChannelEventLoop:unwrapInvoker(), AbstractScheduledEventExecutor:<init>(EventExecutorGroup), ConcurrentHashMapV8$MapReduceEntriesToIntTask:addToPendingCount(int), IdleStateEvent:<clinit>(), AbstractInternalLogger$1:<clinit>(), DefaultSctpServerChannelConfig:getOptions(), AbstractEpollServerChannel$EpollServerSocketUnsafe:clearEpollIn0(), ThreadLocalRandom:nextInt(int-int), DefaultHttp2Connection$DefaultEndpoint:isLocal(), ChunkedWriteHandler$2:operationComplete(Future), PoolChunk:<clinit>(), Http2FrameWriter:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise), SSLContext:init(KeyManager[]-TrustManager[]-SecureRandom), DefaultHttp2RemoteFlowController:access$000(DefaultHttp2RemoteFlowController), ByteBuf:toString(), WebSocketFrameAggregator:isStartMessage(Object), DefaultHttp2Connection:activeStreams(), DefaultHttp2FrameWriter:writePaddingLength(ByteBuf-int), HttpObjectDecoder:createInvalidMessage(), VoidChannelPromise:getNow(), EpollSocketChannel:remoteAddress(), MessageToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise), ResourceLeakDetector:open(Object), DefaultFullHttpRequest:setUri(String), DefaultChannelPipeline$HeadContext:userEventTriggered(ChannelHandlerContext-Object), DefaultHttp2Connection$DefaultStream:isLocal(), UnpooledByteBufAllocator:<init>(boolean), ObjectDecoderInputStream:readByte(), EventExecutorGroup:next(), HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders(), HttpVersion:<init>(String-boolean), SpdyVersion:values(), SwappedByteBuf:getBytes(int-ByteBuf), NioEventLoop:selectAgain(), EmptyByteBuf:hasMemoryAddress(), DefaultHttp2ConnectionEncoder:configuration(), DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int-String), ChannelHandler:handlerRemoved(ChannelHandlerContext), OioSctpChannel:doReadMessages(List), DnsResponse:questions(), ReplayingDecoderBuffer:retain(int), AbstractEventExecutorGroup:submit(Callable), ReplayingDecoderBuffer:writeBytes(ByteBuf-int-int), ConcurrentHashMapV8$MapReduceKeysToLongTask:advance(), WrappedByteBuf:readUnsignedMedium(), HttpObjectAggregator$AggregatedFullHttpMessage:setProtocolVersion(HttpVersion), AbstractEpollServerChannel$EpollServerSocketUnsafe:<init>(AbstractEpollServerChannel), DefaultHttp2LocalFlowController$FlowState:windowUpdateRatio(), EmptyBinaryHeaders:add(AsciiString-AsciiString), NioUdtMessageConnectorChannel:localAddress0(), DatagramChannelConfig:getAllocator(), XmlFrameDecoder:extractFrame(ByteBuf-int-int), IntObjectHashMap:size(), RecyclableArrayList:get(int), DnsEntry:<init>(String-DnsType-DnsClass), Socks5InitialRequestDecoder:<init>(), Recycler$WeakOrderQueue$Link:access$1200(Recycler$WeakOrderQueue$Link), StringDecoder:decode(ChannelHandlerContext-ByteBuf-List), AbstractFuture:await(), InternalThreadLocalMap:<init>(), JdkSslSession:getId(), DefaultHttp2FrameWriter:writeHeadersInternal(ChannelHandlerContext-int-Http2Headers-int-boolean-boolean-int-short-boolean-ChannelPromise), DefaultHttp2StreamRemovalPolicy:<clinit>(), ForkJoinPool$EmptyTask:<init>(), AdvancedLeakAwareByteBuf:readBytes(byte[]), DefaultProgressivePromise:addListener(GenericFutureListener), RxtxChannel:pipeline(), LocalAddress:<clinit>(), OpenSslContext:<init>(Iterable-OpenSslApplicationProtocolNegotiator-long-long-int), UnpooledUnsafeDirectByteBuf:arrayOffset(), DefaultHttp2Connection:isGoAway(), Http2ConnectionEncoder:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise), HttpObjectAggregator$AggregatedFullHttpMessage:duplicate(), JdkSslSession:getCreationTime(), EmptyByteBuf:slice(int-int), ReadOnlyByteBuf:_getLong(int), BinaryWebSocketFrame:<init>(), SslHandler$4:<init>(SslHandler-Promise), Http2InboundFrameLogger$1:onSettingsAckRead(ChannelHandlerContext), DefaultFullHttpRequest:content(), ChannelInputShutdownEvent:<init>(), DefaultSocketChannelConfig:getTrafficClass(), HttpPostStandardRequestDecoder$1:<clinit>(), AbstractNioByteChannel$NioByteUnsafe:closeOnRead(ChannelPipeline), DefaultBinaryHeaders:addChar(AsciiString-char), MqttDecoder:<init>(int), ChunkedWriteHandler:<clinit>(), Attribute:getHttpDataType(), AbstractReferenceCounted:deallocate(), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:<init>(), DuplicatedByteBuf:setBytes(int-ByteBuffer), DefaultSpdyHeaders$2:convertName(Object), ReadTimeoutHandler:access$100(ReadTimeoutHandler), Log:isInfoEnabled(), PoolThreadCache$NormalMemoryRegionCache:<init>(int), WrappedByteBuf:getBytes(int-GatheringByteChannel-int), ByteBufInputStream:checkAvailable(int), Socks4CommandResponse:dstPort(), SctpMessage:<init>(MessageInfo-ByteBuf), AbstractChannel$AbstractUnsafe$3:run(), Socks4ServerEncoder:encode(ChannelHandlerContext-Object-ByteBuf), PoolArena:destroyChunk(PoolChunk), DefaultHeaders:setBoolean(Object-boolean), DefaultHttpHeaders:setBoolean(Object-boolean), ReplayingDecoderBuffer:nioBuffer(int-int), Socks4ServerDecoder:readString(String-ByteBuf), MultithreadEventExecutorGroup:shutdown(), Headers$EntryVisitor:visit(Map$Entry), ThreadPerChannelEventLoop:runAllTasks(), HttpHeaderDateFormat:<init>(HttpHeaderDateFormat$1), AbstractChannelHandlerContext:setRemoved(), ChannelHandlerContext:fireChannelInactive(), DefaultHttpContent:duplicate(), CorsConfig:withOrigin(String), Recycler$Stack:<init>(Recycler-Thread-int), FastThreadLocal:destroy(), DefaultSctpServerChannelConfig:setAutoRead(boolean), MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map), PoolThreadCache$MemoryRegionCache:size(), ForkJoinWorkerThread:setPriority(int), OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long), DefaultFullBinaryMemcacheResponse:release(), DefaultPromise:setSuccess(Object), PendingWrite$1:newObject(Recycler$Handle), AbstractTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise), JdkNpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable), AbstractChannel:unsafe(), ConcurrentHashMapV8$ForEachTransformedValueTask:fork(), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), DefaultChannelHandlerInvoker$8:run(), EpollDomainSocketChannel:filterOutboundMessage(Object), DefaultFullHttpResponse:status(), AbstractNioMessageChannel:localAddress(), HashedWheelTimer:<clinit>(), SlicedByteBuf:copy(int-int), Http2HeadersEncoder$Configuration:headerTable(), DefaultEventExecutorGroup:<init>(int-ExecutorServiceFactory), Http2RemoteFlowController$FlowControlled:error(Throwable), CorsHandler:exceptionCaught(ChannelHandlerContext-Throwable), ConcurrentHashMapV8$SearchKeysTask:propagateCompletion(), BinaryMemcacheResponse:key(), NioSctpChannel:association(), EmptyByteBuf:writeInt(int), AdvancedLeakAwareByteBuf:retain(), MessageAggregator:hasContentLength(Object), ConcurrentHashMapV8$CollectionView:toArray(Object[]), JdkZlibDecoder$GzipState:<clinit>(), Bzip2MTFAndRLE2StageEncoder:<init>(int[]-int-boolean[]), CompositeByteBuf:setBytes(int-ByteBuf-int-int), FileUpload:getContentTransferEncoding(), EpollServerDomainSocketChannel:<clinit>(), PoolThreadCache:createSubPageCaches(int-int), HttpServerUpgradeHandler$UpgradeEvent:retain(int), BinaryWebSocketFrame:retain(), EpollSocketChannel:unsafe(), WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int), AbstractBootstrap:access$200(ChannelFuture-Channel-SocketAddress-ChannelPromise), WrappedByteBuf:getUnsignedByte(int), DefaultChannelPipeline:flush(), AbstractDiskHttpData:<clinit>(), DefaultHttp2Headers:method(AsciiString), Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), CorsConfig:isShortCurcuit(), DefaultOioServerSocketChannelConfig:setPerformancePreferences(int-int-int), OpenSslClientContext:chooseTrustManager(TrustManager[]), EmptyByteBuf:forEachByte(int-int-ByteBufProcessor), Unpooled:wrappedBuffer(ByteBuf), ProxyHandler:failPendingWrites(Throwable), Logger:error(String-Object), StringUtil:escapeCsv(CharSequence), PoolArena:newSubpagePoolHead(int), SimpleChannelInboundHandler:<init>(), Http2Headers:status(), ConcurrentHashMapV8$ForEachEntryTask:invoke(), AbstractByteBuf:getFloat(int), EmptyHeaders:addFloat(Object-float), AbstractDiskHttpData:getString(Charset), DefaultHeaders:access$000(DefaultHeaders), IdleStateHandler:getReaderIdleTimeInMillis(), ConcurrentHashMapV8$MapReduceValuesToLongTask:addToPendingCount(int), EpollSocketChannelConfig:getTrafficClass(), AdvancedLeakAwareByteBuf:getDouble(int), PooledHeapByteBuf:newInternalNioBuffer(Object), ByteBuf:isWritable(int), AbstractMemcacheObjectDecoder:channelInactive(ChannelHandlerContext), EpollServerDomainSocketChannel:<init>(FileDescriptor), HttpHeaders:set(CharSequence-Iterable), ReflectiveChannelFactory:toString(), SocksVersion:<clinit>(), GlobalChannelTrafficCounter:resetCumulativeTime(), Http2CodecUtil$1:setAction(Http2StreamRemovalPolicy$Action), DefaultHttp2Headers:setDouble(AsciiString-double), SocksVersion:ordinal(), JdkAlpnApplicationProtocolNegotiator:wrapperFactory(), AbstractMemcacheObjectAggregator:isContentMessage(Object), OpenJdkSelfSignedCertGenerator:<init>(), JdkNpnApplicationProtocolNegotiator:<init>(boolean-Iterable), AbstractReferenceCountedByteBuf:setLong(int-long), DefaultStompHeaders:setBoolean(CharSequence-boolean), SslHandler:exceptionCaught(ChannelHandlerContext-Throwable), AbstractEpollChannel:clearFlag(int), ConcurrentHashMapV8$CollectionView:iterator(), SslHandler:access$200(), MqttEncoder:encode(ChannelHandlerContext-MqttMessage-List), SpdyOrHttpChooser$SelectedProtocol:protocolName(), IovArrayThreadLocal$1:initialValue(), Socks5InitialResponseDecoder$State:<init>(String-int), SystemPropertyUtil:<clinit>(), Unsafe:copyMemory(long-long-long), ByteBufProcessor$2:<init>(), DefaultChannelPipeline$TailContext:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), EmptyConvertibleHeaders:setLong(Object-long), SpdySessionStatus:valueOf(int), WrappedByteBuf:setBytes(int-ByteBuf), Bzip2Encoder$State:values(), HttpHeaderUtil:getWebSocketContentLength(HttpMessage), WriteTimeoutException:<clinit>(), OpenSslClientContext$OpenSslClientSessionContext:setSessionCacheSize(int), DefaultChannelPipeline:addLast(ChannelHandlerInvoker-String-ChannelHandler), MessageInfo:createOutgoing(Association-SocketAddress-int), WrappedByteBuf:readLong(), NioUdtByteConnectorChannel:config(), FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), AdvancedLeakAwareByteBuf:readBoolean(), EmptyBinaryHeaders:setFloat(AsciiString-float), Socks5Message:setDecoderResult(DecoderResult), FingerprintTrustManagerFactory$1:<init>(), DefaultHeaders:addTimeMillis(Object-long), DnsNameResolver:<init>(EventLoop-ChannelFactory-Iterable), Socks4ServerDecoder$State:values(), DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), ForkJoinWorkerThread:run(), DefaultPromise:awaitUninterruptibly(long), SlicedByteBuf:array(), WebSocketServerHandshakerFactory:<init>(String-String-boolean-int-boolean), OpenSslEngine$1:getCipherSuite(), UnpooledHeapByteBuf:_getByte(int), ApplicationProtocolConfig$SelectedListenerFailureBehavior:<clinit>(), InterfaceHttpPostRequestDecoder:getDiscardThreshold(), Recycler$Stack:pop(), ForkJoinTask$AdaptedCallable:<init>(Callable), ReplayingDecoderBuffer:setFloat(int-float), SSLSession:getLocalCertificates(), DefaultHttp2Connection:access$1100(DefaultHttp2Connection-Http2Stream-Http2Stream), DefaultChannelPipeline:addLast0(String-AbstractChannelHandlerContext), DefaultHttp2FrameReader$3:close(), HttpHeaderValues:<clinit>(), EpollDomainSocketChannel:remoteAddress0(), DefaultHeaders:getCharAndRemove(Object-char), AbstractByteBuf:unwrap(), DefaultHttp2ConnectionEncoder$FlowControlledData:error(Throwable), DefaultHttpHeaders:addObject(CharSequence-Object), SwappedByteBuf:readableBytes(), Socks5InitialRequestDecoder$1:<clinit>(), RuleBasedIpFilter:accept(ChannelHandlerContext-SocketAddress), ConcurrentHashMapV8:addCount(long-int), EmptyHttpHeaders:setFloat(CharSequence-float), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), HAProxyProtocolVersion:<clinit>(), DefaultChannelPipeline:addFirst(ChannelHandler[]), AbstractNioByteChannel:isInputShutdown(), EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder), StompSubframeDecoder:<init>(int-int), GlobalChannelTrafficCounter:start(), ReadOnlyUnsafeDirectByteBuf:maxCapacity(), ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun), AsciiString$2:compare(Object-Object), DefaultHttp2RemoteFlowController:access$200(DefaultHttp2RemoteFlowController), NioSctpChannel:unbindAddress(InetAddress), JdkSslEngine:unwrap(ByteBuffer-ByteBuffer[]-int-int), AbstractByteBufAllocator:<init>(boolean), SslHandler:close(), NioServerSocketChannel:localAddress(), DefaultPromise:checkDeadLock(), TooLongFrameException:<init>(String), HttpObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List), AbstractByteBuf:readFloat(), BufferRecycler:allocInputBuffer(int), PendingWrite:recycle(), AbstractNioByteChannel:javaChannel(), AbstractTrafficShapingHandler:configure(long), DefaultBinaryHeaders:addByte(Object-byte), DefaultStompHeaders:setAll(TextHeaders), OioSctpServerChannel:doReadMessages(List), CompleteFuture:executor(), ForkJoinPool:submit(Runnable), TrafficCounter:bytesRecvFlowControl(long), ConcurrentHashMapV8:contains(Object), AbstractDiskHttpData:setContent(ByteBuf), MqttDecoder:decodePayload(ByteBuf-MqttMessageType-int-Object), ConcurrentHashMapV8$CounterHashCode:<init>(), PerMessageDeflateEncoder:encode(ChannelHandlerContext-WebSocketFrame-List), CommonsLogger:info(String-Object-Object), EmbeddedChannel:lastInboundBuffer(), AdaptiveRecvByteBufAllocator:access$000(int), Socks5CommandResponseDecoder$State:ordinal(), TypeParameterMatcher:find0(Object-Class-String), ChannelGroup:name(), DefaultHttp2Headers:setChar(AsciiString-char), Socks5CommandResponseDecoder$State:values(), OpenSsl:availableCipherSuites(), DefaultTextHeaders$MultipleFieldsValueComposer:addObject(CharSequence-Iterable), EmptyHttp2Headers:setObject(AsciiString-Iterable), FastThreadLocal:isSet(InternalThreadLocalMap), DefaultBinaryHeaders$3:convertName(AsciiString), Bootstrap:<init>(Bootstrap), DatagramPacket:retain(), DefaultSpdyWindowUpdateFrame:toString(), NioSctpServerChannel:access$100(NioSctpServerChannel-boolean), Socks5InitialRequestDecoder$State:values(), DefaultFullBinaryMemcacheRequest:release(int), SpdyFrameDecoderDelegate:readSettingsEnd(), Http2CodecUtil:readUnsignedInt(ByteBuf), DefaultChannelHandlerInvoker$3:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), ChannelHandlerAppender:add(ChannelHandler), DnsMessage:<init>(int), DefaultChannelHandlerInvoker$WriteTask:run(), ChannelHandler:close(ChannelHandlerContext-ChannelPromise), Crc32:<init>(), EmptyTextHeaders:setShort(CharSequence-short), EpollSocketChannel$EpollSocketChannelUnsafe:<init>(EpollSocketChannel-EpollSocketChannel$1), Logger:trace(String-Object), Http2InboundFrameLogger:configuration(), HttpRequestDecoder:createMessage(String[]), ConcurrentHashMapV8$CollectionView:clear(), AbstractEpollChannel:setFlag(int), WebSocketClientHandshaker08:maxFramePayloadLength(), EventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), EpollServerSocketChannel:remoteAddress(), DefaultChannelConfig:getMaxMessagesPerRead(), FileUpload:getName(), Bzip2BlockCompressor:close(ByteBuf), PlatformDependent:toDirectory(String), PendingWrite:recycleAndGet(), DefaultSpdyHeaders:addObject(CharSequence-Object), DefaultConvertibleHeaders:getAndRemove(Object), NioDatagramChannel:localAddress(), ConcurrentHashMapV8$TreeBin:contendedLock(), UnpooledUnsafeDirectByteBuf:_getUnsignedMedium(int), InboundHttp2ToHttpAdapter$Builder:access$200(InboundHttp2ToHttpAdapter$Builder), OpenSslContext:newEngine(ByteBufAllocator-String-int), DefaultChannelId:newInstance(), AbstractEpollChannel:alloc(), AbstractNioMessageChannel$NioMessageUnsafe:close(ChannelPromise), MemoryAttribute:setCharset(Charset), JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory:newListener(SSLEngine-List), EmptyByteBuf:readFloat(), SpdyFrameCodec:readWindowUpdateFrame(int-int), AbstractByteBuf:writeByte(int), UnpooledDirectByteBuf:getLong(int), EpollDomainSocketChannel:fd(), ClassPool:appendClassPath(String), FingerprintTrustManagerFactory$2:fingerprint(X509Certificate), SpdyFrameCodec:readSettingsFrame(boolean), ConcurrentHashMapV8$MapReduceKeysToIntTask:advance(), DefaultChannelGroup:safeDuplicate(Object), TypeUDT:values(), WebSocketServerExtensionHandler:channelRead(ChannelHandlerContext-Object), IntObjectHashMap:equals(Object), HttpObjectAggregator$AggregatedFullHttpRequest:uri(), SpdyFrameEncoder:encodeGoAwayFrame(ByteBufAllocator-int-int), DefaultHttp2LocalFlowController:access$200(DefaultHttp2LocalFlowController), GlobalTrafficShapingHandler:calculateSize(Object), ByteBuf:nioBuffer(), EmptyHttpHeaders:add(Object-Object[]), DefaultHttp2FrameReader:verifyGoAwayFrame(), DefaultHttp2Connection:goAwaySent(int), TextWebSocketFrame:duplicate(), ServerBootstrap:init(Channel), NioSocketChannel:doWriteBytes(ByteBuf), WebSocketClientHandshaker:handshake(Channel-ChannelPromise), DefaultStompHeaders:addFloat(CharSequence-float), ConcurrentHashMapV8$SearchEntriesTask:getRawResult(), NioSctpChannel:eventLoop(), Socks4CommandType:compareTo(Object), FastThreadLocalThread:<init>(ThreadGroup-Runnable-String), DefaultTextHeaders$ValuesComposer:add(CharSequence-CharSequence), HAProxyProtocolException:<init>(String), EmptyTextHeaders:addChar(CharSequence-char), AbstractChannelHandlerContext:name(), ReadOnlyByteBuf:setBytes(int-InputStream-int), SpdyFrameDecoder:decode(ByteBuf), OpenSslEngine:access$900(OpenSslEngine), CompositeByteBuf:discardReadComponents(), IntObjectHashMap:keys(), Headers$ValueConverter:convertFloat(float), DefaultHttpContent:content(), DefaultSpdyWindowUpdateFrame:streamId(), Headers$ValueConverter:convertInt(int), EmbeddedChannel:<init>(), DiskAttribute:<init>(String-String), CodedOutputStream:newInstance(OutputStream-int), EpollDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise), ContinuationWebSocketFrame:fromText(String), EpollEventLoop:hasScheduledTasks(), FastThreadLocal:<clinit>(), X509CertInfo:<init>(), DefaultChannelPipeline:replace(AbstractChannelHandlerContext-String-ChannelHandler), SSLSession:getLocalPrincipal(), MessageLite:toByteArray(), DefaultHeaders$1:<init>(DefaultHeaders), AbstractServerChannel:<init>(), ReadOnlyByteBuf:forEachByte(int-int-ByteBufProcessor), Http2FrameSizePolicy:maxFrameSize(int), DefaultSocketChannelConfig:setKeepAlive(boolean), EmptyConvertibleHeaders:clear(), SctpChannel:setOption(SctpSocketOption-Object), SimpleTrustManagerFactory:engineInit(ManagerFactoryParameters), CommonsLogger:trace(String), Http2Stream:state(), SelfSignedCertificate:safeDelete(File), HttpHeaderUtil:setKeepAlive(HttpMessage-boolean), WebSocketServerProtocolHandler$1:<init>(), WebSocketServerProtocolHandler:setHandshaker(ChannelHandlerContext-WebSocketServerHandshaker), EventExecutor:shutdownGracefully(long-long-TimeUnit), HttpRequest:uri(), Slf4JLoggerFactory:<init>(boolean), RtspMethods:<init>(), DefaultStompHeaders:setDouble(Object-double), AbstractByteBuf:_getLong(int), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:getRawResult(), CompositeByteBuf:checkIndex(int), DefaultHttp2Headers:setObject(Object-Iterable), InternalAttribute:touch(Object), CompositeByteBuf:touch(Object), MultithreadEventExecutorGroup:newChild(Executor-Object[]), OpenSslNpnApplicationProtocolNegotiator:<init>(Iterable), AbstractFuture:cause(), ConcurrentHashMapV8:<init>(), WebSocketClientExtension:rsv(), Socks5PasswordAuthRequest:username(), Slf4JLoggerFactory$1:<init>(Slf4JLoggerFactory-StringBuffer), FastThreadLocalThread:<init>(ThreadGroup-String), CorsConfig$Builder:build(), ReplayingDecoderBuffer:writeLong(long), PooledUnsafeDirectByteBuf:setBytes(int-InputStream-int), EpollDatagramChannel:block(InetAddress-NetworkInterface-InetAddress), EmptyTextHeaders:set(Object-Object), RecyclableMpscLinkedQueueNode:<init>(Recycler$Handle), WebSocketClientHandshaker13:verify(FullHttpResponse), LastHttpContent$1:duplicate(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:fork(), IntObjectHashMap:clear(), MpscLinkedQueue:setHeadRef(MpscLinkedQueueNode), Http2Connection$Endpoint:allowPushTo(), SnappyFrameDecoder$1:<clinit>(), EmptyHeaders:toString(), ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int), MixedFileUpload:setContent(File), ServerCookieEncoder:encode(Collection), JdkApplicationProtocolNegotiator:protocolListenerFactory(), DefaultFileRegion:refCnt(), NioUdtByteAcceptorChannel:doReadMessages(List), NioUdtMessageConnectorChannel$1:<clinit>(), SocketChannelUDT:connect(SocketAddress), RxtxChannelConfig$Databits:value(), Signal$SignalConstant:id(), UnpooledHeapByteBuf:_getShort(int), DefaultHttp2Connection$ConnectionStream:setPriority(int-short-boolean), SSLEngine:setWantClientAuth(boolean), PooledByteBufAllocator:<init>(boolean), AbstractEpollChannel:modifyEvents(), MessageFormatter:format(String-Object-Object), DnsResponse:retain(), DefaultUdtChannelConfig:setWriteBufferHighWaterMark(int), DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int), Bzip2DivSufSort:lsSort(int-int-int), EpollDatagramChannel$EpollDatagramChannelUnsafe:epollInReady(), DefaultBinaryHeaders:set(Object-Iterable), ProtobufDecoder:decode(ChannelHandlerContext-ByteBuf-List), DeflateEncoder:removeFrameTail(WebSocketFrame), WebSocketClientHandshaker$2:<init>(WebSocketClientHandshaker-Channel-ChannelPromise), AbstractNioMessageChannel$NioMessageUnsafe:voidPromise(), ConcurrentHashMapV8$SearchMappingsTask:quietlyCompleteRoot(), DatagramPacket:<init>(ByteBuf-InetSocketAddress), PlatformDependent0$2:run(), DefaultSocks4CommandRequest:toString(), HttpConstants:<init>(), RxtxChannel:localAddress0(), HttpPostMultipartRequestDecoder:loadFieldMultipart(String), AbstractReferenceCountedByteBuf:setIndex(int-int), WriteTimeoutHandler:<clinit>(), SpdyHeaderBlockJZlibEncoder:encode(ByteBufAllocator), IpSubnetFilterRule$Ip6SubnetFilterRule:prefixToSubnetMask(int), Http2FrameLogger$Direction:name(), HttpObjectAggregator$AggregatedFullHttpRequest:trailingHeaders(), DefaultHttp2Connection:<init>(boolean-Http2StreamRemovalPolicy), LastMemcacheContent$1:retain(int), ApplicationProtocolConfig$SelectorFailureBehavior:values(), DefaultChannelPipeline$HeadContext:channelUnregistered(ChannelHandlerContext), SerialPort:removeEventListener(), ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), SlicedByteBuf:getBytes(int-OutputStream-int), ForkJoinTask:getUnsafe(), DefaultHttp2FrameReader$2:processFragment(boolean-ByteBuf-Http2FrameListener), JdkSslSession:getPeerCertificateChain(), DomainSocketAddress:toString(), HAProxyMessageDecoder:fail(ChannelHandlerContext-String-Throwable), IdleStateHandler$1:<init>(IdleStateHandler), AdvancedLeakAwareByteBuf:readShort(), WebSocketClientHandshaker13:<clinit>(), EpollSocketChannelConfig:getTcpKeepCnt(), EpollSocketChannel:<init>(), NativeLibraryLoader:toDirectory(String), SslHandler:access$300(SslHandler-Promise), MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser:next(), TrafficCounter:cumulativeReadBytes(), UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int), EmptyByteBuf:<init>(ByteBufAllocator), DefaultChannelPipeline:toMap(), ByteToMessageCodec:<init>(), InboundHttp2ToHttpAdapter:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), RxtxChannel$RxtxUnsafe:access$100(RxtxChannel$RxtxUnsafe-ChannelPromise), SelectedSelectionKeySet:add(Object), PausableChannelEventExecutor:inEventLoop(Thread), ResourceLeak:close(), HttpPostMultipartRequestDecoder:parseBody(), BinaryMemcacheResponse:magic(), Http2OutboundFrameLogger:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise), MemoryFileUpload:<init>(String-String-String-String-Charset-long), DefaultMarshallerProvider:getMarshaller(ChannelHandlerContext), NioUdtMessageConnectorChannel:config(), Bzip2Decoder$State:valueOf(String), ForkJoinPool$EmptyTask:getRawResult(), ReplayingDecoderBuffer:capacity(int), CompositeByteBuf:getBytes(int-byte[]), DefaultSpdyHeaders:addShort(Object-short), UnpooledUnsafeDirectByteBuf:nioBuffers(int-int), SctpChannel:close(), WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean), DnsQueryEncoder:encodeName(String-Charset-ByteBuf), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), EmptyByteBuf:setFloat(int-float), JdkSslEngine:isOutboundDone(), AbstractByteBuf:setBytes(int-byte[]-int-int), IpSubnetFilterRule:ruleType(), DefaultBinaryHeaders$2:convertToTimeMillis(Object), DefaultBinaryHeaders:addObject(AsciiString-Iterable), InternalLogger:isEnabled(InternalLogLevel), DefaultByteBufHolder:touch(Object), ApplicationProtocolConfig$SelectedListenerFailureBehavior[]:clone(), InternalLogger:trace(String-Object-Object), Log:info(Object), JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener:noSelectedMatchFound(String), AbstractEpollChannel:metadata(), LocalChannel$4:<init>(LocalChannel-LocalChannel), Socks5PasswordAuthRequestDecoder$1:<clinit>(), SpdySettingsFrame:setPersistValue(int-boolean), NioSocketChannel:doDisconnect(), SctpMessageCompletionHandler:decode(ChannelHandlerContext-SctpMessage-List), UnpooledByteBufAllocator:<clinit>(), DelegatingDecompressorFrameListener:cleanup(Http2Stream-DelegatingDecompressorFrameListener$Http2Decompressor), DefaultFullHttpRequest:copy(boolean-ByteBuf), DefaultFileRegion:touch(Object), UnpooledDirectByteBuf:_getShort(int), MqttCodecUtil:resetUnusedFields(MqttFixedHeader), DefaultSocks5PasswordAuthResponse:decoderResult(), GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor-GlobalEventExecutor$1), SpdySession:access$000(SpdySession), ReadOnlyByteBuf:getLong(int), Http2LocalFlowController:consumeBytes(ChannelHandlerContext-Http2Stream-int), AbstractEventExecutor:children(), PoolThreadCache$MemoryRegionCache:initBuf(PoolChunk-long-PooledByteBuf-int), ByteBufOutputStream:writeChars(String), WebSocket08FrameDecoder$State:<init>(String-int), OioSctpServerChannel:doBind(SocketAddress), ReplayingDecoderBuffer:readUnsignedByte(), SwappedByteBuf:setBytes(int-ScatteringByteChannel-int), Socks5PasswordAuthResponseDecoder$State:<clinit>(), UnpooledHeapByteBuf:capacity(int), DefaultTextHeaders:setByte(CharSequence-byte), EmptyHttpHeaders:<clinit>(), HttpObjectAggregator:hasContentLength(Object), HttpPostStandardRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset), ReadOnlyByteBufferBuf:getBytes(int-ByteBuf-int-int), Http2InboundFrameLogger$1:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), Unsafe:putInt(long-int), SpdySession$StreamState:receivedReply(), ByteBufOutputStream:write(int), DefaultBinaryMemcacheRequest:<init>(), Http2InboundFrameLogger$1:onWindowUpdateRead(ChannelHandlerContext-int-int), WebSocket08FrameDecoder$State:ordinal(), OioServerSocketChannel:doDisconnect(), JZlibEncoder$1:run(), Socks4ServerEncoder:<clinit>(), MqttDecoder$DecoderState:<init>(String-int), DeflateFrameClientExtensionHandshaker:handshakeExtension(WebSocketExtensionData), DefaultChannelPipeline:<init>(AbstractChannel), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:advance(), DefaultSocks5PasswordAuthResponse:toString(), AsciiString:toLowerCase(), DefaultHttp2RemoteFlowController$FlowState$Frame:<init>(DefaultHttp2RemoteFlowController$FlowState-Http2RemoteFlowController$FlowControlled), DefaultHeaders:addObject(Object-Object), Http2Headers:path(AsciiString), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), OioSctpChannel:<init>(), AbstractDerivedByteBuf:retain(), DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), UnsafeAtomicLongFieldUpdater:weakCompareAndSet(Object-long-long), DefaultHttp2ConnectionEncoder:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise), ProxyHandler:<init>(SocketAddress), ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-Object-ByteBuf), DefaultHttp2HeadersEncoder$1:visit(Map$Entry), StompSubframeDecoder:readCommand(ByteBuf), FileUpload:getString(Charset), ApplicationProtocolConfig$SelectedListenerFailureBehavior:ordinal(), EpollServerSocketChannelConfig:setAutoRead(boolean), Http2FrameListenerDecorator:onSettingsRead(ChannelHandlerContext-Http2Settings), JdkSslClientContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), StompSubframeEncoder:encode(ChannelHandlerContext-Object-List), FingerprintTrustManagerFactory:access$100(), DefaultChannelHandlerInvoker$12:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise), DefaultChannelGroupFuture:access$300(DefaultChannelGroupFuture-ChannelGroupException), NioServerSocketChannel$NioServerSocketChannelConfig:<init>(NioServerSocketChannel-NioServerSocketChannel-ServerSocket), MpscLinkedQueue:addAll(Collection), ReadOnlyByteBuf:nioBuffers(int-int), Http2CodecUtil:isMaxFrameSizeValid(int), SSL:makeNetworkBIO(long), DuplicatedByteBuf:getBytes(int-OutputStream-int), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int), ConcurrentHashMapV8$SearchEntriesTask:fork(), Bootstrap:connect(SocketAddress-SocketAddress), ReadOnlyByteBuf:_setLong(int-long), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:invoke(), AbstractOioByteChannel:read(), ChannelTrafficShapingHandler:setTrafficCounter(TrafficCounter), DefaultStompHeaders:addShort(CharSequence-short), SlicedByteBuf:_getInt(int), DefaultChannelPipeline:access$400(DefaultChannelPipeline-Thread-AbstractChannelHandlerContext), HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest), RtspMethods:<clinit>(), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean), ZlibCodecFactory:newZlibEncoder(int), PooledUnsafeDirectByteBuf:internalNioBuffer(), Native:toNativeInetAddress(InetAddress), VoidChannelPromise:tryFailure(Throwable), ConcurrentHashMapV8$MapReduceMappingsTask:invoke(), OioServerSocketChannel:doClose(), HttpHeaders:forEachEntry(Headers$EntryVisitor), HttpUtil$Http2ToHttpHeaderTranslator:visit(Map$Entry), AbstractNioByteChannel:localAddress(), EpollEventLoop:remove(AbstractEpollChannel), DefaultStompHeaders:setFloat(Object-float), SpdySynReplyFrame:setLast(boolean), ReadOnlyByteBufferBuf:_setInt(int-int), ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ReplayingDecoderBuffer:setBytes(int-byte[]), DefaultSpdyHeadersFrame:<init>(int), EmbeddedChannel:access$200(EmbeddedChannel), ByteBuf:readBoolean(), SpdyHttpCodec:<init>(SpdyVersion-int), CompactObjectOutputStream:<init>(OutputStream), EmptyHttpHeaders:setDouble(CharSequence-double), TextWebSocketFrame:<init>(ByteBuf), GlobalChannelTrafficShapingHandler$2:<init>(GlobalChannelTrafficShapingHandler-ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long), HttpPostBodyUtil:findEndOfString(String), EpollDatagramChannel$EpollDatagramChannelUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), DefaultChannelGroup:iterator(), Recycler$DefaultHandle:access$1300(Recycler$DefaultHandle), Encoder:setMaxHeaderTableSize(OutputStream-int), HashedWheelTimer:<init>(long-TimeUnit), DefaultHttp2Connection$LazyPropertyMap:get(Object), JdkNpnApplicationProtocolNegotiator:protocolSelectorFactory(), PlatformDependent0$3:run(), DefaultStompHeaders:addShort(Object-short), HttpServerUpgradeHandler$UpgradeEvent:touch(Object), SpdyHeaderBlockJZlibEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), Socks4ServerDecoder$State[]:clone(), JdkSslEngine:closeOutbound(), PooledDirectByteBuf:checkIndex(int), ThreadPerChannelEventLoopGroup:terminationFuture(), Http2Connection:stream(int), DefaultHttp2Connection$DefaultStream:removeAllChildren(), EmptyHeaders:addChar(Object-char), ChannelHandlerInvoker:invokeUserEventTriggered(ChannelHandlerContext-Object), SwappedByteBuf:hasMemoryAddress(), ReadTimeoutHandler$ReadTimeoutTask:run(), ConcurrentHashMapV8:hashCode(), HttpDataFactory:createAttribute(HttpRequest-String), HttpObjectAggregator$AggregatedFullHttpRequest:<init>(HttpRequest-ByteBuf-HttpHeaders), HttpVersion:text(), ZlibWrapper:<init>(String-int), DefaultConvertibleHeaders:addInt(Object-int), JdkSslClientContext:buildTrustManagerFactory(File-TrustManagerFactory), AbstractEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), IntObjectHashMap$1:<init>(IntObjectHashMap), Bzip2HuffmanStageEncoder:generateHuffmanCodeLengths(int-int[]-int[]), MixedAttribute:retain(int), DefaultHeaders:contains(Object-Object), CorsConfig$Builder:allowedRequestMethods(HttpMethod[]), ConcurrentHashMapV8$ForEachTransformedValueTask:advance(), AbstractChannelHandlerContext:fireChannelReadComplete(), AbstractNioChannel$AbstractNioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), DecoderResult:<init>(Throwable), DefaultEventExecutorGroup:newChild(Executor-Object[]), Slf4JLoggerFactory:<clinit>(), ConcurrentHashMapV8$CollectionView:retainAll(Collection), SpdyOrHttpChooser:createHttpRequestHandlerForHttp(), MqttMessageType:value(), CipherSuiteConverter:toOpenSslHandshakeAlgo(String), QueryStringDecoder:<init>(String), PoolThreadCache:free(), ForkJoinPool$ManagedBlocker:isReleasable(), ConcurrentHashMapV8$ForEachTransformedEntryTask:compute(), ConcurrentHashMapV8$MapReduceValuesToLongTask:fork(), DefaultTextHeaders$DefaultTextValueTypeConverter:<init>(), NioDatagramChannel:doWriteMessage(Object-ChannelOutboundBuffer), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean), Unpooled:compositeBuffer(int), DnsMessage:newHeader(int), PlatformDependent0:getLong(Object-long), AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor), JdkSslEngine:wrap(ByteBuffer-ByteBuffer), ObjectEncoderOutputStream:write(int), UnpooledDirectByteBuf:getByte(int), Log4JLogger:isTraceEnabled(), EmptyConvertibleHeaders:setShort(Object-short), UnpooledDirectByteBuf:setLong(int-long), EmptyByteBuf:setDouble(int-double), ByteBufInputStream:readUTF(), ChunkEncoderFactory:safeNonAllocatingInstance(int), ClassPool:appendClassPath(ClassPath), SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:engineInit(ManagerFactoryParameters), EmptyHeaders:namesList(), IntObjectHashMap$1$1:remove(), NioSctpChannel:doFinishConnect(), Recycler$Stack:access$400(Recycler$Stack), ReplayingDecoderBuffer:getInt(int), EpollChannelConfig:getWriteSpinCount(), IntObjectHashMap:<clinit>(), JdkNpnSslEngine:closeInbound(), DefaultHttp2Headers:addObject(Object-Iterable), DefaultHttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), PendingWrite:failAndRecycle(Throwable), X509CertImpl:get(String), UnpooledDirectByteBuf:getBytes(int-ByteBuffer), AbstractChannel$CloseFuture:setFailure(Throwable), ThreadDeathWatcher$Watcher:<clinit>(), EmbeddedChannel$DefaultUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), DnsNameResolver:setTtl(int-int), RtspResponseStatuses:<clinit>(), HttpRequest:headers(), Snappy:calculateChecksum(ByteBuf-int-int), UnsupportedMessageTypeException:<init>(), DelegatingDecompressorFrameListener:access$000(Http2Stream), LastHttpContent$1:touch(Object), DefaultPromise:executor(), HttpObjectDecoder:resetNow(), PooledDirectByteBuf:copy(int-int), HttpClientCodec:decoder(), MessageInfo:streamNumber(int), JdkZlibEncoder:access$000(JdkZlibEncoder), EpollServerDomainSocketChannel:doClose(), HttpHeadersEncoder:<init>(ByteBuf), SpdySynReplyFrame:isTruncated(), ConcurrentHashMapV8$TreeBin:balanceDeletion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), WrappedByteBuf:touch(Object), ObjectDecoderInputStream:readInt(), DefaultChannelId:equals(Object), HttpResponseDecoder:channelInactive(ChannelHandlerContext), DnsResource:duplicate(), Encoder:<init>(), Http2FrameWriter$Configuration:headerTable(), Native:errnoEPIPE(), ByteBuf:nioBuffer(int-int), Bootstrap:initAndRegister(), NameResolverGroup$1:<init>(NameResolverGroup-EventExecutor-NameResolver), MixedAttribute:getString(), StompSubframeDecoder$State:ordinal(), DefaultHttp2FrameWriter:<clinit>(), DnsMessage:addQuestion(DnsQuestion), NioEventLoop:closeAll(), PrimitiveCollections$UnmodifiableIntObjectMap:values(), OpenSslEngine:readPlaintextData(ByteBuffer), ConcurrentHashMapV8$MapReduceKeysToIntTask:invoke(), AbstractChannel$CloseFuture:tryFailure(Throwable), SlicedByteBuf:duplicate(), AbstractOioChannel$1:run(), SingleThreadEventExecutor:scheduledTaskQueue(), DefaultTextHeaders$SingleHeaderValuesComposer:access$1100(DefaultTextHeaders$SingleHeaderValuesComposer), HttpPostRequestEncoder:<clinit>(), HttpResponseStatus:<clinit>(), Http2Connection$Listener:goingAway(), JdkNpnSslEngine:updateAvailability(), WebSocketServerProtocolHandler:<init>(String), HttpObjectAggregator$AggregatedFullHttpResponse:setStatus(HttpResponseStatus), OioDatagramChannel:isConnected(), AsciiString:equals(Object), EpollDomainSocketChannelConfig:getReadMode(), DefaultSpdyHeaders:setLong(CharSequence-long), DefaultChannelGroup:toArray(), JdkAlpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[]), DefaultSpdySynStreamFrame:streamId(), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int), JdkLogger:trace(String), DefaultByteBufHolder:refCnt(), Native:connectDomainSocket(int-String), ObjectDecoderInputStream:read(byte[]-int-int), Http2FrameReader$Configuration:headerTable(), DefaultHttp2Connection$DefaultStream:child(int), Promise:isDone(), Channel:newPromise(), SwappedByteBuf:getUnsignedMedium(int), CloseWebSocketFrame:content(), LocalChannel:newUnsafe(), NioSctpChannel:allLocalAddresses(), AbstractBootstrap:bind(int), MemoryAttribute:getName(), SpdySession:updateAllReceiveWindowSizes(int), DefaultHttpHeaders$HttpHeadersNameConverter:convertName(CharSequence), ConcurrentHashMapV8$SearchKeysTask:fork(), HttpRequest:method(), DefaultTextHeaders:access$1801(DefaultTextHeaders-Object-Object), DefaultBinaryHeaders$2:<init>(), MemoryFileUpload:getHttpDataType(), MqttUnacceptableProtocolVersionException:<init>(String-Throwable), EmptyTextHeaders:addByte(Object-byte), DelegatingDecompressorFrameListener$ConsumedBytesConverter:initialWindowSize(int), EmptyBinaryHeaders:set(AsciiString-AsciiString[]), FileUpload:setMaxSize(long), DnsNameResolver:query(DnsQuestion), AbstractChannel:doDeregister(), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), DefaultHttp2FrameReader:verifySettingsFrame(), DefaultExecutorServiceFactory:<init>(Class), Socks5PasswordAuthRequestDecoder:state(), AsciiString:toLowerCase(byte), AbstractMemoryHttpData:getString(Charset), ForkJoinTask:quietlyInvoke(), ServerBootstrap:<init>(ServerBootstrap), DefaultFullBinaryMemcacheResponse:duplicate(), DefaultDatagramChannelConfig:getTimeToLive(), VoidChannelPromise:awaitUninterruptibly(long-TimeUnit), CertificateAlgorithmId:<init>(AlgorithmId), ThreadDeathWatcher$Watcher:fetchWatchees(), WebSocketServerHandshaker00:close(Channel-CloseWebSocketFrame-ChannelPromise), DefaultHttp2FrameReader$1:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-short-boolean-int-Http2Flags), ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$BiFun), EpollServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), Log4JLogger:warn(String), Socks5CommandRequestDecoder$State:valueOf(String), EpollEventLoop:processReady(EpollEventArray-int), DefaultPromise:trySuccess(Object), LengthFieldPrepender:encode(ChannelHandlerContext-Object-List), WrappedByteBuf:getBytes(int-ByteBuffer), CompositeByteBuf:maxCapacity(), SSLSession:invalidate(), DefaultUdtServerChannelConfig:setProtocolSendBufferSize(int), ReplayingDecoderBuffer:readBytes(ByteBuf-int-int), DefaultChannelHandlerInvoker$7:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Object), HttpChunkedInput:close(), ReplayingDecoderBuffer:getUnsignedShort(int), RtspRequestDecoder:<init>(int-int-int), DefaultHeaders$HeaderDateFormat:parse(String), DefaultDatagramChannelConfig:setWriteBufferHighWaterMark(int), FullBinaryMemcacheResponse:setStatus(short), Attribute:setValue(String), OioEventLoopGroup:<init>(int), DefaultBinaryHeaders:setDouble(AsciiString-double), ConcurrentHashMapV8$ForEachMappingTask:invoke(), ServerBootstrap:<clinit>(), Socks4ServerDecoder$State:valueOf(String), ConcurrentHashMapV8$Action:apply(Object), GlobalChannelTrafficShapingHandler:setWriteChannelLimit(long), OioSocketChannel:eventLoop(), HttpServerUpgradeHandler$1:operationComplete(Future), EmptyHttpHeaders:setObject(CharSequence-Object[]), HttpHeaderUtil:isKeepAlive(HttpMessage), SslHandler:handlerRemoved0(ChannelHandlerContext), DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter), HttpClientUpgradeHandler:write(ChannelHandlerContext-Object-ChannelPromise), SpdyFrameCodec:readSetting(int-int-boolean-boolean), CompositeByteBuf:nioBufferCount(), EpollDatagramChannel:localAddress0(), CommonsLogger:error(String), DefaultHttpHeaders:setObject(Object-Object), EmptyTextHeaders:setObject(Object-Iterable), LoggingHandler:userEventTriggered(ChannelHandlerContext-Object), Slf4JLogger:error(String-Throwable), ReadOnlyByteBuf:getBytes(int-GatheringByteChannel-int), AbstractEpollStreamChannel$EpollStreamUnsafe$1:run(), Http2Settings:put(int-Object), DefaultChannelPipeline$HeadContext:channelReadComplete(ChannelHandlerContext), ChannelHandlerContext:write(Object-ChannelPromise), JdkSslSession:getPeerPort(), ForkJoinPool$WorkQueue:pollAndExecAll(), DefaultChannelPipeline$2:run(), AbstractByteBuf:getUnsignedByte(int), CombinedIterator:next(), DefaultBinaryHeaders:setObject(Object-Object), ChannelHandlerContext:deregister(ChannelPromise), PooledByteBufAllocator:access$200(PooledByteBufAllocator), GlobalChannelTrafficShapingHandler:queuesSize(), InternalThreadLocalMap:indexedVariable(int), Native:setKeepAlive(int-int), EpollDomainSocketChannelConfig:setConnectTimeoutMillis(int), DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:newReponseData(), PrimitiveCollections$UnmodifiableIntObjectMap:remove(int), SpdyHeadersFrame:streamId(), Http2FrameListenerDecorator:<init>(Http2FrameListener), BouncyCastleSelfSignedCertGenerator:<clinit>(), OpenSslEngine:setEnabledCipherSuites(String[]), JdkBaseApplicationProtocolNegotiator$3:<init>(), AbstractEpollServerChannel:doClose(), PongWebSocketFrame:retain(), DefaultSctpServerChannelConfig:setConnectTimeoutMillis(int), PooledDirectByteBuf:getBytes(int-byte[]-int-int), PromiseNotifier:operationComplete(Future), MemoryFileUpload:copy(), DefaultOioSocketChannelConfig:getOptions(Map-ChannelOption[]), WebSocketVersion:<clinit>(), EmbeddedEventLoop:runTasks(), JdkZlibEncoder:close(ChannelHandlerContext-ChannelPromise), DefaultFullHttpRequest:copy(), InterfaceHttpData$HttpDataType[]:clone(), AdvancedLeakAwareByteBuf:getBytes(int-OutputStream-int), ByteToMessageDecoder:channelRead(ChannelHandlerContext-Object), DefaultStompHeaders:addByte(Object-byte), WrappedByteBuf:writerIndex(), EmptyByteBuf:ensureWritable(int), ReadOnlyByteBufferBuf:memoryAddress(), InterfaceHttpData:getHttpDataType(), CompressorHttp2ConnectionEncoder:<clinit>(), SocksVersion[]:clone(), JdkSslEngine:getEnabledCipherSuites(), EmptyByteBuf:nioBuffer(int-int), FastLzFrameDecoder:<init>(Checksum), DefaultChannelHandlerInvoker$7:run(), MpscLinkedQueue:clear(), AbstractDerivedByteBuf:retain(int), Http2LifecycleManager:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), ByteBuf:readMedium(), ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), MultithreadEventExecutorGroup$GenericEventExecutorChooser:next(), CompositeByteBuf:addComponents(int-ByteBuf[]), PooledDirectByteBuf:maxCapacity(), MemoryAttribute:getByteBuf(), EmptyHeaders:clear(), Slf4JLoggerFactory:newInstance(String), WebSocketServerHandshakerFactory:newHandshaker(HttpRequest), HttpPostMultipartRequestDecoder:splitMultipartHeaderValues(String), ChannelException:<init>(Throwable), AbstractInternalLogger:info(String), WrappedByteBuf:isReadable(int), AbstractEventExecutor:<init>(), MarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf), HttpPostMultipartRequestDecoder:readDelimiter(String), DefaultHttp2ConnectionEncoder$FlowControlledData:write(int), Socks4ClientDecoder:state(), DefaultChannelPipeline:context(ChannelHandler), GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long), CountedCompleter:nextComplete(), DnsNameResolver:setQueryTimeoutMillis(long), SctpChannel:bind(SocketAddress), DefaultServerSocketChannelConfig:isReuseAddress(), ChannelOption:<clinit>(), NioEventLoop$1:run(), SpdySettingsFrame:getValue(int), Http2Settings:verifyStandardSetting(int-Long), ZlibCodecFactory:newZlibDecoder(), Attribute:renameTo(File), RecyclableArrayList:set(int-Object), EmptyHttp2Headers:addTimeMillis(Object-long), DefaultHttp2Connection$ConnectionStream:closeLocalSide(), DefaultChannelPipeline:context(String), HttpHeaders:setLong(CharSequence-long), PoolChunk:initBuf(PooledByteBuf-long-int), SpdySynReplyFrame:isLast(), ReferenceMap:fold(Object), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf$1:<init>(), Lz4FrameDecoder:<init>(boolean), DefaultSpdyHeaders:set(TextHeaders), AsciiString:<clinit>(), UnpooledDirectByteBuf:array(), SpdyFrameCodec:readSettingsEnd(), FastLzFrameDecoder$State:<init>(String-int), NioUdtAcceptorChannel:doConnect(SocketAddress-SocketAddress), SSL:getPeerCertificate(long), DefaultPromise$1:run(), OioDatagramChannel:joinGroup(InetAddress), EmptyBinaryHeaders:setLong(Object-long), DefaultHttp2Headers:setAll(BinaryHeaders), LoggingHandler:exceptionCaught(ChannelHandlerContext-Throwable), PooledUnsafeDirectByteBuf:idx(int), DefaultChannelHandlerInvoker$1:run(), QueryStringDecoder:parameters(), CompositeByteBuf:writeBytes(byte[]-int-int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), DiskAttribute:getCharset(), HttpProxyHandler:proxyAddress(), AbstractChannel$AbstractUnsafe:register(EventLoop-ChannelPromise), ContinuationWebSocketFrame:isFinalFragment(), NetUtil:isValidHexChar(char), Snappy:<init>(), AbstractInternalLogger:debug(String-Object), ReplayingDecoderBuffer:readChar(), FixedRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator), WebSocketServerHandshaker07:<init>(String-String-boolean-int-boolean), NioUdtAcceptorChannel:<init>(ServerSocketChannelUDT), GlobalChannelTrafficShapingHandler:access$100(GlobalChannelTrafficShapingHandler-ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long), DefaultChannelHandlerInvoker$14:run(), RecvByteBufAllocator:newHandle(), DefaultChannelConfig:setOption(ChannelOption-Object), DelegatingDecompressorFrameListener$ConsumedBytesConverter:receiveFlowControlledFrame(ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean), DnsNameResolver:setResolveAddressTypes(InternetProtocolFamily[]), MessageAggregator:appendPartialContent(CompositeByteBuf-ByteBuf), WrappedByteBuf:getUnsignedMedium(int), WebSocketExtensionEncoder:handlerRemoved(ChannelHandlerContext), WrappedByteBuf:setMedium(int-int), AsciiString$1:compare(AsciiString-AsciiString), SlicedByteBuf:<init>(ByteBuf-int-int), EpollChannelConfig:validate(ChannelOption-Object), InboundHttp2ToHttpAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int), PooledHeapByteBuf:_setByte(int-int), EmptyConvertibleHeaders:setObject(Object-Object), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), ZlibEncoder:<init>(), JdkSslEngine:wrap(ByteBuffer[]-int-int-ByteBuffer), UnpooledDirectByteBuf:setShort(int-int), DefaultAttributeMap:<init>(), DefaultServerSocketChannelConfig:validate(ChannelOption-Object), MqttDecoder:decodeSubackPayload(ByteBuf-int), HashedWheelTimer:<init>(long-TimeUnit-int), Unpooled:wrappedBuffer(byte[]-int-int), SpdyHeadersFrame:setTruncated(), JdkSslContext:context(), DefaultSpdySettingsFrame$Setting:<init>(int-boolean-boolean), HttpHeaderUtil:getContentLength(HttpMessage), DefaultCookie:comment(), UnpooledHeapByteBuf:checkSrcIndex(int-int-int-int), Attribute:touch(), EmptyBinaryHeaders:setChar(Object-char), DnsMessage:addAuthorityResource(DnsResource), ForkJoinTask:getRawResult(), Socks5CommandResponse:bndPort(), DefaultChannelPipeline$TailContext:exceptionCaught(ChannelHandlerContext-Throwable), LocalChannel:isActive(), UnpooledUnsafeDirectByteBuf:writerIndex(int), DefaultFullHttpResponse:touch(Object), PausableChannelEventExecutor:invokeChannelRead(ChannelHandlerContext-Object), SpdyHeaderBlockJZlibEncoder:end(), DefaultSctpChannelConfig:setWriteSpinCount(int), DefaultHeaders$HeaderDateFormat:<init>(), AbstractChannel$AbstractUnsafe:<init>(AbstractChannel), SimpleNameResolver:isResolved(SocketAddress), DefaultFullHttpRequest:duplicate(), Http2CodecUtil:<clinit>(), SocketChannelUDT:write(ByteBuffer), InternalThreadLocalMap:destroy(), Http2ClientUpgradeCodec:<clinit>(), Http2ConnectionEncoder$Builder:lifecycleManager(), Signal:compareTo(Signal), Bzip2DivSufSort:bwt(), EmptyHttpHeaders:setShort(Object-short), SpdyFrameCodec:<clinit>(), HttpVersion:<init>(String-int-int-boolean), DnsMessage:answers(), MqttDecoder:decodeConnectionPayload(ByteBuf-MqttConnectVariableHeader), DefaultHeaders:addByte(Object-byte), NioSctpChannel:parent(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToInt(CharSequence), ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int), AbstractChannel$PausableChannelEventLoop:unwrap(), ProtobufVarint32FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), WrappedByteBuf:compareTo(ByteBuf), AbstractMemcacheObjectAggregator:hasContentLength(Object), DefaultLastStompContentSubframe:content(), ChannelFlushPromiseNotifier:notifyPromises(), AbstractChannelHandlerContext$1:initialValue(), MessageFormatter:safeObjectAppend(StringBuffer-Object), ThreadPerChannelEventLoop:deregister(), ChannelHandlerAdapter:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), HashedWheelTimer:<init>(), DefaultChannelGroup$1:operationComplete(Future), MqttMessage:<init>(MqttFixedHeader-Object-Object-DecoderResult), WebSocketServerHandshaker$2:messageReceived(ChannelHandlerContext-FullHttpRequest), EmbeddedChannel:recordException(Throwable), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), Http2Connection:connectionStream(), DefaultHttp2Connection:addListener(Http2Connection$Listener), AbstractEpollServerChannel:<init>(FileDescriptor), ExecutorServiceFactory:newExecutorService(int), HashedWheelTimer:stop(), GlobalChannelTrafficShapingHandler:<clinit>(), CompleteChannelFuture:syncUninterruptibly(), FixedCompositeByteBuf:nioBuffers(int-int), ChannelFutureListener:<clinit>(), EpollChannelConfig:setAutoRead(boolean), DnsQueryHeader:setId(int), ProxyHandler:removeEncoder(ChannelHandlerContext), AbstractChannel:connect(SocketAddress-ChannelPromise), DnsNameResolver$DnsResponseHandler:<init>(DnsNameResolver), HttpResponseDecoder:setSingleDecode(boolean), ConcurrentHashMapV8$ValueIterator:next(), DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf), ReadTimeoutHandler:access$202(ReadTimeoutHandler-ScheduledFuture), AbstractBinaryMemcacheDecoder:channelInactive(ChannelHandlerContext), DefaultThreadFactory:<init>(Class), TypeParameterMatcher:<clinit>(), SslContext$1:<clinit>(), UnpooledUnsafeDirectByteBuf:<clinit>(), ChannelMatchers:invert(ChannelMatcher), UnpooledHeapByteBuf:getBytes(int-ByteBuffer), WebSocketServerProtocolHandshakeHandler:getWebSocketLocation(ChannelPipeline-HttpRequest-String), SpdyStreamStatus:compareTo(SpdyStreamStatus), ChannelPipeline:replace(ChannelHandler-String-ChannelHandler), Http2FrameListener:onPingRead(ChannelHandlerContext-ByteBuf), HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset), NioSctpServerChannel$NioSctpServerChannelConfig:<init>(NioSctpServerChannel-NioSctpServerChannel-SctpServerChannel), HttpMethod:name(), AbstractNioByteChannel:eventLoop(), DefaultSpdySettingsFrame:removeValue(int), Unpooled:copyFloat(float), AbstractBootstrap:localAddress(InetAddress-int), RxtxChannel$RxtxUnsafe:ensureOpen(ChannelPromise), ObjectEncoderOutputStream:writeShort(int), DefaultSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), QueryStringDecoder:decodeComponent(String), MarshallingEncoder:<init>(MarshallerProvider), WebSocketServerProtocolHandler:getHandshaker(ChannelHandlerContext), WebSocketClientProtocolHandshakeHandler:<init>(WebSocketClientHandshaker), SimpleLeakAwareByteBuf:touch(Object), WebSocketFrameAggregator:<init>(int), EmptyByteBuf:order(ByteOrder), SSLContext:getSessionCacheTimeout(long), LogLevel[]:clone(), EmptyTextHeaders:setByte(CharSequence-byte), DefaultHttp2FrameReader:verifyStreamOrConnectionId(int-String), DefaultAddressedEnvelope:release(int), HttpPostMultipartRequestDecoder:getBodyHttpDatas(), LocalChannel$4:run(), DnsQueryContext:<clinit>(), Native:getReceiveBufferSize(int), AbstractChannelHandlerContext$PausableChannelEventExecutor0:rejectNewTasks(), ForkJoinTask:inForkJoinPool(), DefaultByteBufHolder:copy(), DefaultHeaders:getBooleanAndRemove(Object-boolean), AbstractTrafficShapingHandler:<init>(long-long-long-long), ChannelFutureListener$2:operationComplete(ChannelFuture), OpenSslEngine:getEnabledProtocols(), EmptyHeaders:setBoolean(Object-boolean), AbstractEventExecutorGroup:schedule(Runnable-long-TimeUnit), WrappedByteBuf:toString(), ByteBuf:order(ByteOrder), SwappedByteBuf:compareTo(Object), ChunkedWriteHandler:channelWritabilityChanged(ChannelHandlerContext), AdvancedLeakAwareByteBuf:getMedium(int), DefaultOioServerSocketChannelConfig:setWriteBufferLowWaterMark(int), DefaultProgressivePromise:setFailure(Throwable), CorsHandler:echoRequestOrigin(HttpResponse), FailedChannelFuture:syncUninterruptibly(), EmptyTextHeaders:addDouble(Object-double), FileUpload:content(), DefaultChannelProgressivePromise:setProgress(long-long), HttpContentEncoder:handlerRemoved(ChannelHandlerContext), ChannelHandlerInvoker:invokeChannelRead(ChannelHandlerContext-Object), EmbeddedEventLoop:register(Channel-ChannelPromise), SpdySessionHandler:<clinit>(), DefaultRxtxChannelConfig:setReadTimeout(int), ReplayingDecoder:<init>(), SpdySessionStatus:compareTo(SpdySessionStatus), DefaultServerSocketChannelConfig:getOption(ChannelOption), SslHandler:safeClose(ChannelHandlerContext-ChannelFuture-ChannelPromise), SwappedByteBuf:indexOf(int-int-byte), DefaultStompHeaders:addDouble(Object-double), JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), SpdySynStreamFrame:isLast(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), DuplicatedByteBuf:_getByte(int), ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), SpdySession:removeActiveStream(int-boolean), WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame), HttpUtil:toHttp2Headers(FullHttpMessage), Http2FrameWriter:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise), ClassResolver:resolve(String), HttpResponseStatus:valueOf(int), MemoryAttribute:getCharset(), AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(Future), DefaultChannelPipeline:toString(), AbstractByteBufAllocator:compositeDirectBuffer(int), RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest), ByteToMessageCodec$1:decodeLast(ChannelHandlerContext-ByteBuf-List), SctpChannelConfig:getAllocator(), HttpServerUpgradeHandler$UpgradeEvent:toString(), WebSocketClientHandshaker07:expectedSubprotocol(), CloseWebSocketFrame:<init>(boolean-int-int-String), JdkSslEngine:getHandshakeStatus(), SnappyFrameDecoder$ChunkType:<clinit>(), BinaryMemcacheResponse:status(), Log4JLogger:debug(String-Object[]), AbstractEpollStreamChannel:doWrite(ChannelOutboundBuffer), DefaultSpdyRstStreamFrame:<init>(int-int), ConcurrentHashMapV8:<init>(int-float), Bzip2DivSufSort:trIntroSort(int-int-int-int-int-Bzip2DivSufSort$TRBudget-int), DefaultTextHeaders:setTimeMillis(CharSequence-long), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), MemoryFileUpload:retain(), WebSocketUtil:md5(byte[]), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:valueOf(String), NioEventLoopGroup:<init>(int-Executor-SelectorProvider), Unpooled:wrappedBuffer(ByteBuffer[]), HttpPostRequestDecoder:setDiscardThreshold(int), GlobalTrafficShapingHandler:informReadOperation(ChannelHandlerContext-long), DnsResponse:sender(), ScheduledFutureTask:nanoTime(), MessageAggregator:aggregate(ByteBufHolder-ByteBufHolder), PlatformDependent:arrayBaseOffset0(), DefaultTextHeaders$MultipleFieldsValueComposer:add(CharSequence-CharSequence), AbstractMemoryHttpData:checkSize(long), AbstractByteBuf:getBytes(int-ByteBuf), AbstractDerivedByteBuf:nioBuffer(int-int), NioSctpChannel:doDisconnect(), DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf-ByteBuf), SpdyHeaders:names(), ConcurrentHashMapV8$MapReduceKeysToIntTask:compute(), UnpooledUnsafeDirectByteBuf:checkReadableBytes(int), AsciiString:<init>(ByteBuffer), DefaultHttp2RemoteFlowController$2:streamActive(Http2Stream), DnsResponseDecoder:decode(ChannelHandlerContext-Object-List), SingleThreadEventLoop:register(Channel-ChannelPromise), LogFactory:getLog(String), AbstractByteBufAllocator:ioBuffer(int-int), PooledUnsafeDirectByteBuf:setRefCnt(int), CompositeByteBuf:findComponent(int), ConcurrentHashMapV8$ForEachEntryTask:addToPendingCount(int), EpollDatagramChannel:<init>(FileDescriptor), DefaultBinaryMemcacheResponse:<init>(String), OpenSslEngine$1:removeValue(String), BinaryMemcacheMessage:release(), Channel:write(Object-ChannelPromise), DefaultHttpHeaders:setFloat(Object-float), LocalServerChannel$1:run(), Channel:config(), Bootstrap$3:<init>(ChannelFuture-SocketAddress-Channel-SocketAddress-ChannelPromise), SingleThreadEventExecutor$2:run(), SwappedByteBuf:getShort(int), ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ChannelFutureListener:operationComplete(Future), ThreadDeathWatcher:awaitInactivity(long-TimeUnit), UnpaddedInternalThreadLocalMap:<init>(Object[]), SpdyFrameCodec:<init>(SpdyVersion-int-int-int-int-int), WebSocketServerHandshaker00:newHandshakeResponse(FullHttpRequest-HttpHeaders), EmptyBinaryHeaders:addInt(Object-int), DefaultCookie:domain(), DefaultDatagramChannelConfig:getOption(ChannelOption), EmptyHttp2Headers:setLong(Object-long), PooledUnsafeDirectByteBuf:copy(int-int), DefaultChannelPipeline:remove(AbstractChannelHandlerContext), AbstractByteBuf:copy(int-int), ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8), WebSocketServerExtension:newExtensionEncoder(), Socks4ClientDecoder:setSingleDecode(boolean), DefaultTextHeaders:addTimeMillis(Object-long), ConcurrentHashMapV8$MapReduceKeysTask:invoke(), DefaultChannelPipeline$5:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), DefaultChannelConfig:getAllocator(), Log4JLogger:error(String-Object-Object), EmptyBinaryHeaders:setShort(Object-short), ReadTimeoutHandler:readTimedOut(ChannelHandlerContext), DefaultBinaryHeaders:setFloat(AsciiString-float), EpollDomainSocketChannel:remoteAddress(), EpollSocketChannelConfig:isTcpNoDelay(), OpenSslEngine$1:getLocalPrincipal(), IntObjectHashMap:values(), AbstractReferenceCountedByteBuf:writeBytes(byte[]), ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$BiFun), DnsResponseHeader:setZ(int), EpollServerChannelConfig:setConnectTimeoutMillis(int), TooLongFrameException:<init>(Throwable), AsciiString:toAsciiStringArray(String[]), AdvancedLeakAwareByteBuf:setShort(int-int), NioTask:channelReady(SelectableChannel-SelectionKey), DefaultHttp2FrameWriter:<init>(Http2HeadersEncoder), DefaultConvertibleHeaders:getAndRemoveAndConvert(Object-Object), ProxyHandler$LazyChannelPromise:trySuccess(Object), SctpNotificationHandler:handleNotification(SendFailedNotification-Object), DefaultHeaders:getInt(Object), Socks5ClientEncoder:<init>(), DefaultChannelPipeline$TailContext:close(ChannelHandlerContext-ChannelPromise), HttpUtil$Http2ToHttpHeaderTranslator:<init>(int-HttpHeaders-boolean), AbstractOioChannel:doConnect(SocketAddress-SocketAddress), Http2InboundFrameLogger$1:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf), EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel), WrappedByteBuf:readBoolean(), ProtobufEncoder:<init>(), DnsType:valueOf(String), ApplicationProtocolConfig$Protocol:<init>(String-int), Utf8Validator:isChecking(), OpenSslEngine:getSupportedCipherSuites(), AbstractChannel$AbstractUnsafe$6$1:<init>(AbstractChannel$AbstractUnsafe$6-Throwable), Socks5InitialResponse:authMethod(), PooledByteBuf:initUnpooled(PoolChunk-int), Socks4ClientDecoder$State:<init>(String-int), DefaultTextHeaders:setObject(CharSequence-Iterable), ChunkedWriteHandler$1:<init>(ChunkedWriteHandler-ChannelHandlerContext), FailedChannelFuture:<init>(Channel-EventExecutor-Throwable), DefaultHttp2ConnectionDecoder:access$900(DefaultHttp2ConnectionDecoder), SctpServerChannel:accept(), Recycler:access$600(), OpenSslSessionStats:accept(), ByteArrayDecoder:decode(ChannelHandlerContext-ByteBuf-List), HttpToHttp2ConnectionHandler:getStreamId(HttpHeaders), Unpooled:directBuffer(int), CorsConfig:allowedRequestMethods(), ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference), IpSubnetFilterRule$Ip6SubnetFilterRule:ipToInt(Inet6Address), Native:setTcpKeepIdle(int-int), AbstractBootstrap:localAddress(String-int), SingleThreadEventExecutor:removeTask(Runnable), DefaultConvertibleHeaders$ConvertedEntry:getKey(), ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiAction), UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int), InboundHttp2ToHttpAdapter$ImmediateSendDetector:mustSendImmediately(FullHttpMessage), MqttMessageType:<clinit>(), HttpPostRequestDecoder:<init>(HttpRequest), MqttConnectVariableHeader:name(), Http2StreamRemovalPolicy:setAction(Http2StreamRemovalPolicy$Action), AbstractByteBuf:forEachByte(ByteBufProcessor), DefaultHttp2Connection$DefaultEndpoint:flowController(Http2FlowController), HashedWheelTimer$HashedWheelBucket:addTimeout(HashedWheelTimer$HashedWheelTimeout), NioUdtByteConnectorChannel:doReadBytes(ByteBuf), PlatformDependent:objectFieldOffset(Field), HttpPostRequestEncoder$WrappedHttpRequest:decoderResult(), Unpooled:wrappedBuffer(int-ByteBuf[]), DefaultStompFrame:<init>(StompCommand-ByteBuf), EmbeddedChannel:runScheduledPendingTasks(), ByteBufHolder:release(), CountedCompleter:decrementPendingCountUnlessZero(), AbstractEpollStreamChannel$EpollStreamUnsafe:annotateConnectException(Throwable-SocketAddress), IdentityCipherSuiteFilter:<clinit>(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String-Throwable), ChannelPromiseAggregator:add(Promise[]), EpollDatagramChannelConfig:getNetworkInterface(), AbstractReferenceCountedByteBuf:setZero(int-int), CompressorHttp2ConnectionEncoder:nextReadableBuf(EmbeddedChannel), ByteBuf:isReadable(), NativeLibraryLoader:<clinit>(), ScheduledFutureTask:toStringBuilder(), InternalThreadLocalMap:charsetDecoderCache(), DefaultHttp2Connection$DefaultStream:numChildren(), UnpooledHeapByteBuf:checkDstIndex(int-int-int-int), Bootstrap:remoteAddress(String-int), EmptyHttpHeaders:add(CharSequence-CharSequence[]), PongWebSocketFrame:retain(int), PooledByteBufAllocator:toLeakAwareBuffer(ByteBuf), ComposedLastHttpContent:touch(Object), LastHttpContent$1:touch(), DefaultBinaryHeaders:addLong(AsciiString-long), DefaultChannelPromise:tryFailure(Throwable), DefaultEventExecutorGroup:<init>(int-Executor), SpdyFrameCodec:write(ChannelHandlerContext-Object-ChannelPromise), DnsServerAddresses$3$1:<init>(DnsServerAddresses$3), ComposedLastHttpContent:copy(), CallableEventExecutorAdapter:executor(), DefaultHttpRequest:uri(), ConcurrentHashMapV8$SearchEntriesTask:propagateCompletion(), UnreleasableByteBuf:duplicate(), Logger:debug(String-Object[]), AddressedEnvelope:content(), HttpObjectDecoder$HeaderParser:reset(), ForkJoinTask$AdaptedRunnableAction:setRawResult(Void), ThreadLocalRandom:current(), DefaultHttp2Headers:set(BinaryHeaders), BinaryMemcacheResponse:setKeyLength(short), PooledDirectByteBuf:nioBuffer(int-int), UnpooledHeapByteBuf:getByte(int), Http2InboundFrameLogger$1:onRstStreamRead(ChannelHandlerContext-int-long), PingWebSocketFrame:retain(), DefaultTextHeaders$ValuesComposer:setObject(CharSequence-Iterable), Bzip2DivSufSort:trPartition(int-int-int-int-int-int), DefaultOioSocketChannelConfig:setAllowHalfClosure(boolean), PerMessageDeflateServerExtensionHandshaker:<init>(int-boolean-int-boolean-boolean), UnsupportedMessageTypeException:message(String-Class[]), DefaultHttpHeaders$HttpHeadersNameConverter:validateNameChar(CharSequence-int), HttpPostRequestEncoder:setBodyHttpDatas(List), HttpObjectAggregator:write(ChannelHandlerContext-Object-ChannelPromise), DiskFileUpload:compareTo(Object), NioSocketChannel:doReadBytes(ByteBuf), ChunkedFile:<init>(File-int), UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int), WebSocketExtensionEncoder:channelInactive(ChannelHandlerContext), DefaultPromise$CauseHolder:<init>(Throwable), DefaultOioSocketChannelConfig:setReuseAddress(boolean), DefaultPromise$LateListenerNotifier:<init>(DefaultPromise-GenericFutureListener), JdkZlibDecoder:verifyCrc(ByteBuf), MemoryFileUpload:length(), ReadOnlyUnsafeDirectByteBuf:_getLong(int), PausableChannelEventExecutor:invokeRead(ChannelHandlerContext), EmptyHttpHeaders:setLong(Object-long), Bzip2Decoder:<init>(), ByteBufInputStream:readByte(), ChannelOutboundBuffer:close(ClosedChannelException), DelegatingDecompressorFrameListener$ConsumedBytesConverter:initialWindowSize(), AsciiString:replace(char-char), DefaultSpdyHeaders:setObject(Object-Iterable), DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf), AbstractEpollStreamChannel:access$002(AbstractEpollStreamChannel-boolean), DefaultServerSocketChannelConfig:getBacklog(), AbstractByteBuf:getLong(int), DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), NioSocketChannel:shutdownOutput0(ChannelPromise), ProxyHandler:isConnected(), HttpResponseDecoder:<init>(int-int-int), DefaultSpdyWindowUpdateFrame:setStreamId(int), ChannelBufferByteInput:read(byte[]-int-int), WrappedByteBuf:readChar(), TrafficCounter:cumulativeWrittenBytes(), NioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise), DefaultTextHeaders:access$1701(DefaultTextHeaders-Object-Object), Bootstrap:<clinit>(), FixedCompositeByteBuf:toString(), AbstractBootstrap:<init>(AbstractBootstrap), DefaultHttp2ConnectionEncoder$Builder:build(), ClientCookieDecoder:<init>(), Log4JLogger:isTraceCapable(), SslHandler:notifyHandshakeFailure(Throwable), Attribute:setContent(InputStream), Http2HeaderTable:maxHeaderListSize(), EmptyTextHeaders:add(CharSequence-CharSequence[]), SpdySessionHandler:handleOutboundMessage(ChannelHandlerContext-Object-ChannelPromise), DefaultChannelPipeline:get(Class), ConcurrentHashMapV8$MapReduceKeysTask:addToPendingCount(int), ObjectDecoderInputStream:readChar(), EpollEventArray:fd(int), WebSocketClientHandshaker:processHandshake(Channel-HttpResponse), MqttUnsubscribePayload:<init>(List), DefaultStompHeaders:setChar(Object-char), SwappedByteBuf:compareTo(ByteBuf), SpdySessionHandler$2:operationComplete(Future), LimitingByteInput:readable(int), LzfEncoder:<init>(int), IntObjectHashMap:access$400(IntObjectHashMap-int), SpdyRstStreamFrame:streamId(), NioSocketChannel:isOutputShutdown(), PooledHeapByteBuf:newInstance(int), OioByteStreamChannel$1:<init>(), IdleState:<init>(String-int), MqttConnectVariableHeader:isCleanSession(), AbstractScheduledEventExecutor:pollScheduledTask(long), Encoder:<init>(int), NioSctpServerChannel:allLocalAddresses(), MixedFileUpload:setContentType(String), EmptyHttp2Headers:setInt(Object-int), EmptyByteBuf:getInt(int), EmptyHttp2Headers:setLong(AsciiString-long), HttpPostRequestEncoder$EncoderMode:<clinit>(), EmptyHeaders:addDouble(Object-double), HttpPostBodyUtil$TransferEncodingMechanism:value(), DefaultHttp2Headers:addObject(AsciiString-Iterable), EpollDatagramChannel:eventLoop(), UnpooledDirectByteBuf:nioBuffers(int-int), HashedWheelTimer:access$202(HashedWheelTimer-long), ConcurrentHashMapV8$ForEachEntryTask:fork(), Bzip2BitWriter:<init>(), OioSocketChannel$1:<init>(OioSocketChannel-ChannelPromise), HashedWheelTimer$HashedWheelTimeout:task(), DnsNameResolverContext:finishResolve(), NioUdtByteConnectorChannel:doConnect(SocketAddress-SocketAddress), DecoderException:<init>(), ByteBuf:isDirect(), Socks4ProxyHandler:removeEncoder(ChannelHandlerContext), AbstractNioChannel$AbstractNioUnsafe:close(ChannelPromise), DefaultTextHeaders:containsObject(Object-Object-Comparator), DefaultHttp2Headers:add(Object-Object), DefaultOioSocketChannelConfig:getSoTimeout(), HttpContentEncoder:ensureHeaders(HttpObject), DefaultFutureListeners:listeners(), DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), FastLzFrameEncoder:<init>(boolean), ByteBuf:discardSomeReadBytes(), DefaultSpdyHeaders:add(Object-Object), RecyclableArrayList$1:<init>(), DefaultHttp2FrameReader:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), AbstractBootstrap:bind(String-int), IntObjectMap:isEmpty(), NioUdtMessageConnectorChannel:<init>(), PooledHeapByteBuf$1:<init>(), AsciiString:toByteArray(), EpollServerChannelConfig:setMaxMessagesPerRead(int), Socks5CommandStatus:valueOf(byte), Http2Stream$State:valueOf(String), EmptyTextHeaders:set(CharSequence-CharSequence), AbstractEpollStreamChannel$EpollStreamUnsafe:clearEpollIn0(), ReadOnlyByteBuf:arrayOffset(), NioUdtByteConnectorChannel:doWriteFileRegion(FileRegion), AbstractOioChannel:doRead(), ChannelHandlerAdapter:channelInactive(ChannelHandlerContext), DefaultChannelPipeline:replace(String-String-ChannelHandler), SingleThreadEventExecutor:updateLastExecutionTime(), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:values(), AbstractDiskHttpData:retain(), CountedCompleter:getUnsafe(), HttpPostRequestEncoder$WrappedFullHttpRequest:uri(), GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long), BinaryMemcacheRequest:setMagic(byte), DefaultSpdyDataFrame:<init>(int), CompleteChannelFuture:addListener(GenericFutureListener), ContinuationWebSocketFrame:touch(Object), OpenSslSessionContext:setTicketKeys(byte[]), Http2OutboundFrameLogger:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), SnappyFrameEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int), ByteBuf:duplicate(), DefaultSpdyWindowUpdateFrame:deltaWindowSize(), VoidChannelPromise:await(long), SwappedByteBuf:hasArray(), AbstractNioByteChannel:flush(), NioDatagramChannel:remoteAddress(), EpollDatagramChannelConfig:isLoopbackModeDisabled(), DefaultHttp2Headers:clear(), AbstractEpollServerChannel:newChildChannel(int-byte[]-int-int), ByteBuf:readByte(), OpenSslEngine:beginHandshake(), PlatformDependent:maxDirectMemory0(), PooledByteBuf:recycle(), JdkBaseApplicationProtocolNegotiator$4:newListener(SSLEngine-List), AbstractByteBufAllocator:buffer(), NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise), CorsConfig$Builder:access$100(CorsConfig$Builder), AbstractByteBuf:readInt(), ObjectDecoderInputStream:readObject(), MqttVersion:<init>(String-int-String-byte), ChannelHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), AbstractReferenceCountedByteBuf:setFloat(int-float), WrappedByteBuf:writeBytes(byte[]), Http2FrameLogger:logPingAck(Http2FrameLogger$Direction-ByteBuf), StompSubframeDecoder:<init>(), HttpObjectAggregator:newContinueResponse(Object), DefaultUdtChannelConfig:getProtocolReceiveBufferSize(), AbstractScheduledEventExecutor:peekScheduledTask(), PrimitiveCollections$UnmodifiableIntObjectMap:size(), CommonsLogger:info(String-Throwable), AbstractEventExecutor:shutdownGracefully(long-long-TimeUnit), HttpServerCodec:<init>(), PrematureChannelClosureException:<init>(), DefaultChannelGroupFuture$1:<clinit>(), AbstractChannel$CloseFuture:<init>(AbstractChannel), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), Native:accept0(int-byte[]), SwappedByteBuf:array(), ChunkedInput:length(), HttpContentEncoder:encode(ChannelHandlerContext-HttpObject-List), PromiseTask:setSuccessInternal(Object), LocalServerChannel:doBind(SocketAddress), AbstractScheduledEventExecutor:<init>(), PlatformDependent0:putShort(long-short), AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel-AbstractServerChannel$1), EmbeddedChannel:access$300(EmbeddedChannel-Throwable), DnsQuery:recipient(), WebSocketServerExtension:newReponseData(), OioServerSocketChannel:filterOutboundMessage(Object), DefaultHttp2RemoteFlowController$FlowState:peek(), OpenSslServerSessionContext:getSessionTimeout(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertTimeMillis(long), DnsNameResolver:doResolve(SocketAddress-Promise), StompHeadersSubframe:command(), Attribute:addContent(ByteBuf-boolean), MpscLinkedQueue:poll(), MpscLinkedQueuePad1:<init>(), AbstractReferenceCountedByteBuf:clear(), PerFrameDeflateEncoder:acceptOutboundMessage(Object), ChunkedStream:isEndOfInput(), HttpObjectAggregator$AggregatedFullHttpMessage:<init>(HttpMessage-ByteBuf-HttpHeaders), Base64Encoder:<init>(), WebSocketServerProtocolHandshakeHandler$1:<init>(WebSocketServerProtocolHandshakeHandler-ChannelHandlerContext), NioSocketChannel:isActive(), EventLoop:execute(Runnable), DefaultChannelHandlerInvoker$12:run(), EpollDatagramChannelConfig:getOptions(), InboundHttp2ToHttpPriorityAdapter:priorityTreeParentChanged(Http2Stream-Http2Stream), AbstractChannel:doBind(SocketAddress), DefaultDatagramChannelConfig:getSendBufferSize(), RuleBasedIpFilter:<init>(IpFilterRule[]), WrappedByteBuf:getUnsignedInt(int), EpollServerChannelConfig:getBacklog(), HttpObjectDecoder:findNonWhitespace(CharSequence-int), HttpRequest:setProtocolVersion(HttpVersion), AdvancedLeakAwareByteBuf:writeBytes(byte[]), ByteBufProcessor$6:<init>(), GlobalChannelTrafficShapingHandler$PerChannel:<init>(), EmbeddedEventLoop:invokeFlush(ChannelHandlerContext), XmlFrameDecoder:fail(ChannelHandlerContext), DefaultCookie:name(), Bootstrap:clone(), Http2ConnectionHandler:onHttpServerUpgrade(Http2Settings), AsciiString:subSequence(int-int), DefaultStompHeaders:setBoolean(Object-boolean), DefaultChannelGroup:<init>(String-EventExecutor), IntObjectHashMap:containsValue(Object), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:invoke(), NotSslRecordException:<init>(), LZFEncoder:estimateMaxWorkspaceSize(int), NioSocketChannel:doWriteFileRegion(FileRegion), DnsMessage:touch(List-Object), SctpServerChannel:isOpen(), AbstractInternalLogger:warn(Throwable), EmptyHttp2Headers:set(BinaryHeaders), TrafficCounter:bytesWriteFlowControl(long), Http2OutboundFrameLogger:writeSettingsAck(ChannelHandlerContext-ChannelPromise), DomainSocketAddress:path(), ChannelFutureListener$3:operationComplete(ChannelFuture), SslContext:defaultServerProvider(), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), UnreleasableByteBuf:slice(), Pool:destroy(long), ConcurrentHashMapV8$ForEachMappingTask:advance(), WrappedByteBuf:readDouble(), Http2ConnectionHandler$ClosingChannelFutureListener:operationComplete(Future), SlicedByteBuf:nioBuffer(int-int), ConcurrentHashMapV8$MapReduceKeysTask:fork(), AbstractChannel:access$400(AbstractChannel), AsciiString:parseLong(int-int), SpdyHeaderBlockRawDecoder:releaseBuffer(), PooledByteBufAllocator$PoolThreadLocalCache:onRemoval(PoolThreadCache), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:firstComplete(), DefaultConvertibleHeaders:addFloat(Object-float), UnpooledHeapByteBuf:memoryAddress(), MqttConnectReturnCode:values(), DefaultChannelHandlerInvoker$15:run(), ForkJoinWorkerThread:setName(String), CountedCompleter:compute(), OioSctpChannel$2:<init>(OioSctpChannel-InetAddress-ChannelPromise), WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker), DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), DefaultChannelPipeline:addAfter(ChannelHandlerInvoker-String-String-ChannelHandler), SocketChannelConfig:getSoLinger(), IdleStateHandler:handlerAdded(ChannelHandlerContext), ConcurrentHashMapV8:get(Object), Future:cancel(boolean), HttpResponseStatus:toString(), OpenSslEngine:access$800(OpenSslEngine), UdtChannelConfig:getAllocator(), Http2Settings:put(int-Long), DecompressionException:<init>(Throwable), ObjectEncoderOutputStream:writeBoolean(boolean), ThreadPerChannelEventLoop$1:operationComplete(Future), DefaultSpdySettingsFrame$Setting:isPersisted(), Slf4JLogger:info(String-Object), Bootstrap:access$000(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), DefaultSocketChannelConfig:setWriteBufferLowWaterMark(int), MpscLinkedQueueNode:next(), ConcurrentHashMapV8$BiAction:apply(Object-Object), ByteBufUtil:<init>(), DefaultSpdyGoAwayFrame:setLastGoodStreamId(int), EpollServerSocketChannelConfig:<init>(EpollServerSocketChannel), NativeDatagramPacketArray$NativeDatagramPacket:<init>(), MemoryAttribute:toString(), AbstractByteBuf:setBoolean(int-boolean), AbstractServerChannel:newUnsafe(), DefaultChannelId:newLongValue(), PoolChunk:<init>(PoolArena-Object-int), ByteBuf:getInt(int), ReplayingDecoderBuffer:forEachByte(ByteBufProcessor), SpdyHeaderBlockJZlibEncoder:setInput(ByteBuf), HttpResponseStatus:compareTo(HttpResponseStatus), IntObjectMap:put(int-Object), ConcurrentHashMapV8:spread(int), DefaultHttp2Headers:setTimeMillis(Object-long), EmptyHttp2Headers:set(Object-Iterable), DefaultChannelPipeline:addLast(String-ChannelHandler), OioServerSocketChannel:<init>(), DefaultChannelConfig:getWriteBufferLowWaterMark(), EmptyHttp2Headers:addLong(Object-long), EpollServerChannelConfig:<init>(AbstractEpollChannel), EpollDatagramChannel:remoteAddress0(), LimitingByteInput:read(byte[]), DefaultSocks5CommandRequest:<init>(Socks5CommandType-Socks5AddressType-String-int), FileUpload:renameTo(File), JdkZlibDecoder:<init>(ZlibWrapper-byte[]), DefaultLastHttpContent:touch(Object), MpscLinkedQueuePad0:<init>(), SlicedByteBuf:setBytes(int-InputStream-int), ChannelHandlerInvoker:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), EpollServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), AbstractByteBufAllocator:buffer(int), ReplayingDecoderBuffer:getShort(int), EmptyHttpHeaders:addChar(CharSequence-char), HttpUtil$ExtensionHeaderNames[]:clone(), OpenSslEngine:initPeerCertChain(), ReadOnlyByteBuf:getByte(int), HttpStatusClass:valueOf(String), SpdySessionHandler:removeStream(int-ChannelFuture), EmptyByteBuf:getUnsignedByte(int), Socks5PasswordAuthResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:<init>(JdkSslEngine-List), HttpPostStandardRequestDecoder:destroy(), HttpPostRequestDecoder$MultiPartStatus:valueOf(String), EpollServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), HttpHeadersEncoder:writeAsciiString(ByteBuf-int-AsciiString-int), EpollDatagramChannelConfig:<init>(EpollDatagramChannel), EpollServerSocketChannel:<init>(FileDescriptor), DefaultCookie:setDomain(String), IntObjectHashMap:iterator(), AbstractNioChannel$AbstractNioUnsafe:forceFlush(), FixedCompositeByteBuf:_getShort(int), WriteTimeoutHandler:write(ChannelHandlerContext-Object-ChannelPromise), FullHttpResponse:headers(), DefaultUdtChannelConfig:apply(ChannelUDT), AbstractByteBuf:setMedium(int-int), DefaultHttp2LocalFlowController:<init>(Http2Connection-Http2FrameWriter), DefaultHeaders:getDoubleAndRemove(Object), IdleStateHandler$ReaderIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), PlatformDependent0:getObject(Object-long), MessageToMessageDecoder:channelRead(ChannelHandlerContext-Object), ConcurrentHashMapV8$MapReduceEntriesToIntTask:getRawResult(), WrappedByteBuf:isDirect(), Unpooled:copyMedium(int[]), PoolThreadCache:log2(int), CorsHandler:setExposeHeaders(HttpResponse), Socks5CommandType:<init>(int-String), RxtxChannel:<init>(), OioSocketChannel:isInputShutdown(), NioUdtAcceptorChannel:doBind(SocketAddress), SslContext:isClient(), DefaultSocketChannelConfig:isAllowHalfClosure(), AbstractEventExecutorGroup:submit(Runnable), DefaultBinaryHeaders:add(Object-Object), AbstractEventExecutorGroup:shutdownGracefully(long-long-TimeUnit), ChannelHandlerAppender$Entry:<init>(String-ChannelHandler), NioEventLoopGroup:children(), NioServerSocketChannel:filterOutboundMessage(Object), PausableChannelEventExecutor:submit(Callable), DnsResponse:authorityResources(), PooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int), DefaultChannelGroupFuture:executor(), GlobalChannelTrafficShapingHandler:maximumCumulativeWrittenBytes(), Bootstrap:doConnect0(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), DnsNameResolver$DnsResponseHandler:<init>(DnsNameResolver-DnsNameResolver$1), MultithreadEventExecutorGroup:newDefaultExecutorService(int), EpollChannelConfig:isAutoRead(), EpollChannelConfig:setWriteBufferLowWaterMark(int), JdkLogger:trace(String-Object), Base64:breakLines(Base64Dialect), EpollDatagramChannel$DatagramSocketAddress:<init>(String-int-int), HttpServerUpgradeHandler:isUpgradeRequest(HttpObject), Native:sizeofEpollEvent(), Cleaner:clean(), ReadOnlyByteBufferBuf:getBytes(int-byte[]-int-int), HashedWheelTimer$HashedWheelBucket:<clinit>(), OpenSslSessionStats:acceptRenegotiate(), AbstractInternalLogger:log(InternalLogLevel-String-Object), DefaultHttp2Connection$DefaultStream:id(), EmptyHttp2Headers:setObject(AsciiString-Object), NameResolver:close(), WrappedByteBuf:retain(), AdvancedLeakAwareByteBuf:order(), HashedWheelTimer$HashedWheelBucket:pollTimeout(), AbstractBinaryMemcacheMessage:refCnt(), DefaultSpdyHeaders:setBoolean(Object-boolean), ByteBufUtil:decodeString(ByteBuffer-Charset), LengthFieldPrepender:<init>(int-boolean), HashedWheelTimer$HashedWheelTimeout:value(), ChunkedWriteHandler$1:run(), DefaultPromise:toString(), SSLEngine:getUseClientMode(), SslContext:defaultClientProvider(), PooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer), LoggingHandler:appendHexDumpRowPrefix(StringBuilder-int-int), EpollChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), Headers$NameVisitor:visit(Object), EmbeddedEventLoop:runScheduledTasks(), DelegatingDecompressorFrameListener:access$100(Http2Stream-DelegatingDecompressorFrameListener$Http2Decompressor), AbstractByteBuf:writeShort(int), ChannelPipeline:addAfter(String-String-ChannelHandler), DefaultOioSocketChannelConfig:setSendBufferSize(int), HttpPostStandardRequestDecoder:removeHttpDataFromClean(InterfaceHttpData), DefaultChannelPromise:setSuccess(), HttpObjectAggregator$AggregatedFullHttpRequest:headers(), DiskAttribute:touch(Object), PrimitiveCollections$UnmodifiableIntObjectMap:put(int-Object), DnsQuestion:equals(Object), SSLSessionContext:setSessionCacheSize(int), DefaultStompHeaders:addFloat(Object-float), AbstractEpollChannel:<clinit>(), AbstractChannel:writeAndFlush(Object), FullBinaryMemcacheRequest:setKeyLength(short), ReplayingDecoderBuffer:clear(), EpollServerSocketChannel:checkResolvable(InetSocketAddress), EmptyTextHeaders:setAll(TextHeaders), SwappedByteBuf:isWritable(int), DefaultChannelPipeline:access$300(DefaultChannelPipeline-AbstractChannelHandlerContext), UnreleasableByteBuf:touch(), SpdyFrameDecoderDelegate:readPingFrame(int), Socks5ProxyHandler:destinationAddress(), SSLSession:getPeerCertificateChain(), SingleThreadEventLoop:removeShutdownHook(Runnable), PendingWriteQueue:<init>(ChannelHandlerContext), CompactObjectInputStream:resolveClass(ObjectStreamClass), HttpPostMultipartRequestDecoder$1:<clinit>(), SocketChannelUDT:socket(), LastMemcacheContent$1:touch(Object), DefaultSpdyHeaders:setByte(CharSequence-byte), DefaultChannelPipeline$HeadContext:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), Unsafe:putByte(long-byte), UnpooledHeapByteBuf:getBytes(int-byte[]-int-int), JdkAlpnApplicationProtocolNegotiator$1:<init>(), SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-ChannelPromise), Headers:forEachEntry(Headers$EntryVisitor), DefaultStompHeaders:add(CharSequence-Iterable), Http2LifecycleManager:closeLocalSide(Http2Stream-ChannelFuture), SslHandler:ignoreException(Throwable), ApplicationProtocolConfig:supportedProtocols(), AbstractReferenceCountedByteBuf:writeZero(int), Socks4ProxyHandler:addCodec(ChannelHandlerContext), DefaultSpdyHeaders:addTimeMillis(Object-long), DefaultHttp2Connection:notifyParentChanged(List), DefaultHttp2FrameReader:verifyWindowUpdateFrame(), Socks4CommandResponse:status(), AbstractByteBuf:setDouble(int-double), NioDatagramChannelConfig:<clinit>(), ResourceLeakDetector$Level:valueOf(String), PendingWriteQueue:safeFail(ChannelPromise-Throwable), DefaultHttp2RemoteFlowController$FlowState:<init>(DefaultHttp2RemoteFlowController-Http2Stream-int), PooledDirectByteBuf:readBytes(byte[]-int-int), DecompressionException:<init>(), PlatformDependent:isAndroid(), PooledUnsafeDirectByteBuf:_setInt(int-int), EpollEventLoop:wakeup(boolean), AsciiHeadersEncoder$NewlineType:<init>(String-int), WebSocketClientProtocolHandshakeHandler$1:<init>(WebSocketClientProtocolHandshakeHandler-ChannelHandlerContext), ChunkedFile:<init>(RandomAccessFile-int), WrappedByteBuf:getBoolean(int), Http2Flags:endOfStream(boolean), NioSctpChannel:selectionKey(), HttpResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), ClassResolvers:defaultClassLoader(ClassLoader), PlatformDependent0:allocateMemory(long), DefaultHttpHeaders:setLong(Object-long), HttpObjectDecoder:<clinit>(), IpSubnetFilterRule$Ip6SubnetFilterRule:<init>(Inet6Address-int-IpFilterRuleType-IpSubnetFilterRule$1), EmptyHttp2Headers:add(Object-Object[]), DefaultTextHeaders$2:generateHashCode(CharSequence), Http2ConnectionEncoder$Builder:build(), OpenSslEngine:closeOutbound(), DefaultPromise:<init>(), AbstractByteBufAllocator:ioBuffer(), MixedFileUpload:getContentTransferEncoding(), HttpObjectAggregator$AggregatedFullHttpResponse:setProtocolVersion(HttpVersion), IdleStateHandler:<init>(int-int-int), AbstractNioMessageChannel:selectionKey(), ForkJoinWorkerThread:setDaemon(boolean), StompSubframeDecoder:decode(ChannelHandlerContext-ByteBuf-List), HttpObjectAggregator$AggregatedFullHttpResponse:toString(), JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[]), AbstractMemcacheObjectAggregator:isAggregated(MemcacheObject), SpdyHeaders:getAll(Object), MemoryAttribute:content(), ChannelOutboundBuffer:setUnwritable(boolean), PerMessageDeflateServerExtensionHandshaker:handshakeExtension(WebSocketExtensionData), WebSocketServerHandshaker:subprotocols(), ConcurrentHashMapV8:initTable(), InboundHttp2ToHttpAdapter:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int), SpdySession:hasReceivedReply(int), DiskFileUpload:copy(), InternetProtocolFamily:ordinal(), MpscLinkedQueue:toArray(Object[]), DefaultStompHeaders:setByte(Object-byte), HttpPostMultipartRequestDecoder:<init>(HttpDataFactory-HttpRequest), Snappy:decode(ByteBuf-ByteBuf), DefaultTextHeaders$SingleHeaderValuesComposer:add(CharSequence-Iterable), Bootstrap$2:operationComplete(Future), MultithreadEventExecutorGroup$GenericEventExecutorChooser:<init>(MultithreadEventExecutorGroup-MultithreadEventExecutorGroup$1), AbstractBootstrap:channelFactory(ChannelFactory), UnpooledDirectByteBuf:getBytes(int-byte[]-int-int), AbstractChannel:toString(), InternalAttribute:addValue(String), CorsHandler:setMaxAge(HttpResponse), DnsResponseDecoder:readName(ByteBuf), AbstractBootstrap:channel(Class), ZlibCodecFactory:newZlibEncoder(byte[]), ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-List), DefaultHttp2RemoteFlowController$2:priorityTreeParentChanged(Http2Stream-Http2Stream), DefaultChannelGroup:disconnect(), Snappy$State:valueOf(String), AbstractConstant:uniquifier(), ScheduledFutureTask:setUncancellableInternal(), PausableChannelEventExecutor:close(), CertificateSerialNumber:<init>(BigInteger), Bzip2MTFAndRLE2StageEncoder:mtfBlock(), ByteBuf:getBytes(int-ByteBuf-int), CompositeByteBuf:markReaderIndex(), Bootstrap:resolver(NameResolverGroup), StompSubframeAggregator:beginAggregation(StompHeadersSubframe-ByteBuf), CloseWebSocketFrame:newBinaryData(int-String), DefaultSpdyDataFrame:setStreamId(int), Native:uioMaxIov(), RxtxChannelConfig$Paritybit:<clinit>(), ResourceLeakDetector$Level[]:clone(), CompositeByteBuf:readBytes(ByteBuffer), ByteBufAllocator:buffer(int-int), DefaultHttp2Headers:status(), ConcurrentHashMapV8$EntrySetView:contains(Object), DiskAttribute:setValue(String), DefaultDatagramChannelConfig:setTimeToLive(int), ChannelHandlerInvoker:invokeExceptionCaught(ChannelHandlerContext-Throwable), ForkJoinPool:newTaskFor(Runnable-Object), HttpObjectAggregator$AggregatedFullHttpResponse:retain(), BlockingOperationException:<init>(String-Throwable), FixedCompositeByteBuf:setBytes(int-ScatteringByteChannel-int), DefaultTextHeaders:setShort(Object-short), AbstractChannel$CloseFuture:trySuccess(), AbstractHttpData:retain(), DefaultDatagramChannelConfig:setLoopbackModeDisabled(boolean), PrimitiveCollections$UnmodifiableIntObjectMap:putAll(IntObjectMap), NioEventLoop:pollTask(), AbstractInternalLogger:debug(String-Throwable), Lz4FrameEncoder:access$000(Lz4FrameEncoder), ByteToMessageDecoder$2:<init>(), HAProxyCommand:<init>(String-int-byte), DefaultChannelHandlerInvoker$4:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EmptyHttpHeaders:add(Object-Object), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparateEscapedValues(CharSequence-CharSequence), WebSocket00FrameDecoder:<init>(int), ThreadDeathWatcher$Watcher:<init>(), ByteBufInputStream:read(byte[]-int-int), ZlibWrapper:ordinal(), ReplayingDecoderBuffer:getLong(int), SwappedByteBuf:writerIndex(int), WebSocketServerHandshaker00:uri(), Http2ServerUpgradeCodec:<init>(String-Http2ConnectionHandler), DefaultHttpHeaders:<init>(boolean), LzfEncoder:<init>(), ChannelTrafficShapingHandler$ToSend:<init>(long-Object-ChannelPromise-ChannelTrafficShapingHandler$1), HttpClientCodec:setSingleDecode(boolean), HttpHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int), ByteBufUtil:hexDump(byte[]), ChannelHandlerContext:write(Object), PerFrameDeflateEncoder:<init>(int-int-boolean), ChannelHandlerInvokerUtil:invokeBindNow(ChannelHandlerContext-SocketAddress-ChannelPromise), EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel-EmbeddedChannel$1), QueryStringEncoder:encodeComponent(String-Charset), DefaultHeaders$HeaderDateFormat:parse(String-long), Base64Decoder:<init>(), DefaultHttp2Headers:addByte(AsciiString-byte), HttpRequestDecoder:<init>(int-int-int-boolean), DefaultTextHeaders:set(Object-Object), SpdyFrameDecoderDelegate:readHeaderBlockEnd(), DnsResponseCode:valueOf(int), PooledHeapByteBuf:checkIndex(int-int), ByteToMessageDecoder:exceptionCaught(ChannelHandlerContext-Throwable), WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse), JdkSslContext:<clinit>(), EmptyConvertibleHeaders:add(Object-Iterable), DefaultConvertibleHeaders:setTimeMillis(Object-long), OioServerSocketChannel:isOpen(), WebSocketExtensionDecoder:<init>(), GlobalChannelTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise-GlobalChannelTrafficShapingHandler$1), ChannelException:<init>(), OpenSslX509Certificate:getSubjectUniqueID(), AbstractByteBuf:readUnsignedMedium(), HAProxyProxiedProtocol$AddressFamily:values(), Slf4JLogger:debug(String), AbstractEpollServerChannel:localAddress(), DefaultHttp2HeadersEncoder$1:<init>(DefaultHttp2HeadersEncoder-OutputStream), DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:<init>(boolean), DnsNameResolverContext:followCname(InetSocketAddress-String-String), DefaultTextHeaders:addTimeMillis(CharSequence-long), CompositeByteBuf:touch(), PerMessageDeflateClientExtensionHandshaker$PermessageDeflateExtension:newExtensionEncoder(), ConcurrentHashMapV8$BulkTask:advance(), RxtxChannelConfig$Stopbits:valueOf(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String-Throwable), DuplicatedByteBuf:array(), NioEventLoop:select(boolean), UnpooledDirectByteBuf:nioBuffer(int-int), AbstractDerivedByteBuf:release(), EpollEventLoopGroup:children(), ChannelOutboundBuffer:remove(), InboundHttp2ToHttpPriorityAdapter:onPriorityRead(ChannelHandlerContext-int-int-short-boolean), DefaultTextHeaders:setShort(CharSequence-short), PooledDirectByteBuf:idx(int), DefaultBinaryHeaders:<clinit>(), DnsNameResolver:setNegativeTtl(int), AbstractByteBuf:writableBytes(), HttpPostStandardRequestDecoder:getBodyHttpData(String), DefaultHttpHeaders:set(CharSequence-CharSequence[]), EmptyByteBuf:readUnsignedShort(), AbstractChannel$AbstractUnsafe:remoteAddress(), Bzip2HuffmanStageDecoder:nextSymbol(), BinaryMemcacheRequest:extrasLength(), PrimitiveCollections$EmptyIntObjectMap:values(), Native:sendTo(int-ByteBuffer-int-int-InetAddress-int), SlicedByteBuf:memoryAddress(), NioDatagramChannel:isSingleDirectBuffer(ByteBuf), ConcurrentHashMapV8$SearchValuesTask:quietlyCompleteRoot(), Http2OutboundFrameLogger:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise), DefaultFullBinaryMemcacheResponse:key(), HttpPostRequestDecoder:hasNext(), SslHandler$7:operationComplete(Future), IovArray:processMessage(Object), EpollChannelConfig:autoReadCleared(), AbstractReferenceCountedByteBuf:writeLong(long), TooLongFrameException:<init>(String-Throwable), Native:setReceiveBufferSize(int-int), MixedAttribute:release(), ConcurrentHashMapV8$SearchEntriesTask:invoke(), ChannelOption$1:<init>(), InboundHttp2ToHttpAdapter$Builder:access$100(InboundHttp2ToHttpAdapter$Builder), HttpObjectAggregator$AggregatedFullHttpResponse:touch(), StompSubframeDecoder:resetDecoder(), DefaultHeaders:containsInt(Object-int), Socks5CommandRequest:version(), ProxyHandler$1:<init>(ProxyHandler), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader), Base64Dialect:<clinit>(), Attribute:copy(), HttpContent:release(), EpollEventLoopGroup:<init>(int-ExecutorServiceFactory), MessageLite:getParserForType(), RxtxChannel:doConnect(SocketAddress-SocketAddress), AdvancedLeakAwareByteBuf:writeBoolean(boolean), DefaultSocks5InitialResponse:toString(), ByteBufAllocator:directBuffer(int), Http2Exception$CompositeStreamException:<init>(Http2Error-int), DefaultChannelPipeline:destroyDown(Thread-AbstractChannelHandlerContext), DefaultSctpChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), Http2FrameAdapter:<init>(), LZ4Compressor:maxCompressedLength(int), DefaultHttp2Headers:setDouble(Object-double), Recycler$DefaultHandle:<init>(Recycler$Stack), DefaultExecutorServiceFactory:<init>(String), PooledDirectByteBuf:capacity(), InternalThreadLocalMap:get(), IovArray:<init>(), ForkJoinPool:getQueuedSubmissionCount(), Bzip2HuffmanAllocator:allocateHuffmanCodeLengths(int[]-int), AbstractChannel$AbstractUnsafe:localAddress(), Channel$Unsafe:outboundBuffer(), Bzip2BlockCompressor:crc(), EmbeddedEventLoop:terminationFuture(), NioSctpChannel:unsafe(), ForkJoinTask:getException(), PongWebSocketFrame:copy(), PooledDirectByteBuf:nioBuffers(int-int), ConcurrentHashMapV8$ReservationNode:<init>(), CompositeByteBuf:markWriterIndex(), DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2StreamRemovalPolicy:markForRemoval(Http2Stream), VoidChannelPromise:trySuccess(Object), DnsNameResolverContext$1:<init>(), Snappy:getHashTable(int), DefaultSocks5CommandRequest:dstPort(), AbstractByteBuf:<init>(int), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), HttpObjectEncoder:encodeChunkedContent(ChannelHandlerContext-Object-long-List), RxtxChannel:isActive(), AppendableCharSequence:<init>(char[]), DefaultHttp2ConnectionEncoder:pollSentSettings(), SctpInboundByteStreamHandler:<init>(int-int), Logger:debug(String-Object), Http2ServerUpgradeCodec:prepareUpgradeResponse(ChannelHandlerContext-FullHttpRequest-FullHttpResponse), EmptyByteBuf:readInt(), ByteToMessageDecoder:channelActive(ChannelHandlerContext), JdkSslEngine:getSupportedProtocols(), DefaultHeaders$HeaderEntry:setValue(Object), DnsMessage:additionalResources(), DnsNameResolverContext:tryToFinishResolve(), DefaultChannelPipeline:replace0(AbstractChannelHandlerContext-String-AbstractChannelHandlerContext), InboundHttp2ToHttpAdapter$1:<init>(), DefaultTextHeaders:setDouble(Object-double), DefaultChannelPipeline:<clinit>(), ConcurrentHashMapV8$ValuesView:addAll(Collection), WrappedByteBuf:getBytes(int-ByteBuf-int-int), SslContext:generateKeySpec(char[]-byte[]), FileUpload:length(), SSLContext:getServerSessionContext(), DefaultChannelPipeline$2:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext-String-AbstractChannelHandlerContext), ChannelHandlerContext:executor(), EpollSocketChannelConfig:setSoLinger(int), EmptyHttp2Headers:authority(AsciiString), Lz4FrameEncoder:flushBufferedData(ByteBuf), JdkLogger:warn(String-Object[]), NativeLibraryLoader:<init>(), PooledDirectByteBuf:getBytes(int-OutputStream-int-boolean), CommonsLogger:isErrorEnabled(), InboundHttp2ToHttpAdapter$Builder:build(), DefaultSpdyHeaders:set(CharSequence-CharSequence[]), DefaultSpdyHeaders$2:convertName(CharSequence), EmptyHttp2Headers:set(AsciiString-Iterable), EmptyBinaryHeaders:addShort(Object-short), WebSocketFrameAggregator:isAggregated(Object), EpollDatagramChannel:setFlag(int), NameResolverGroup$1:operationComplete(Future), Slf4JLoggerFactory:<init>(), MixedAttribute:setContent(File), RxtxChannel:remoteAddress0(), AbstractByteBuf:readUnsignedByte(), HttpServerUpgradeHandler:access$100(HttpServerUpgradeHandler), DefaultChannelConfig:<clinit>(), BinaryMemcacheMessage:keyLength(), SpdyStreamStatus:<clinit>(), CompatibleObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf), HttpObjectDecoder:createMessage(String[]), UnpooledHeapByteBuf:setByte(int-int), AbstractChannel:compareTo(Object), FixedLengthFrameDecoder:<init>(int), ByteBuf:readUnsignedInt(), GlobalTrafficShapingHandler:checkWaitReadTime(ChannelHandlerContext-long-long), EmptyByteBuf:setBytes(int-ByteBuf-int-int), AbstractByteBuf:setFloat(int-float), CompositeByteBuf:toComponentIndex(int), DomainSocketReadMode[]:clone(), ThreadLocalInsecureRandom:nextInt(int), Http2HeadersDecoder:decodeHeaders(ByteBuf), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:noSelectMatchFound(), JsonObjectDecoder:reset(), Bootstrap:channelFactory(ChannelFactory), LocalServerChannel:doClose(), ContinuationWebSocketFrame:duplicate(), ByteBufOutputStream:write(byte[]), DnsServerAddresses:sequential(Iterable), NioDatagramChannelConfig:setNetworkInterface(NetworkInterface), SocketChannelUDT:isOpen(), Socks5CommandResponseDecoder$State:<clinit>(), AbstractEventExecutorGroup:submit(Runnable-Object), PausableChannelEventExecutor:newPromise(), EmptyHeaders:set(Headers), OioDatagramChannel:<init>(MulticastSocket), ConcurrentHashMapV8$MapReduceEntriesToIntTask:fork(), ForkJoinPool:hasQueuedSubmissions(), DefaultHttp2Connection$PropertyMap:put(Object-Object), CompositeByteBuf:decompose(int-int), OpenSslContext:<init>(Iterable-ApplicationProtocolConfig-long-long-int), ByteToMessageDecoder:handlerRemoved0(ChannelHandlerContext), DefaultTextHeaders:set(Object-Object[]), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean), DefaultHttp2LocalFlowController$FlowState:unconsumedBytes(), EmptyHttpHeaders:addFloat(CharSequence-float), WebSocketServerProtocolHandler:<init>(String-String-boolean), EmptyHttpHeaders:addLong(CharSequence-long), EmptyHttpHeaders:addChar(Object-char), WebSocket08FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-List), PooledHeapByteBuf:setBytes(int-ByteBuf-int-int), PoolThreadCache:allocateSmall(PoolArena-PooledByteBuf-int-int), EmptyConvertibleHeaders:addShort(Object-short), SnappyFrameDecoder:mapChunkType(byte), SpdyHeaderBlockZlibEncoder:compressInto(ByteBuf), ObjectDecoderInputStream:<init>(InputStream-ClassLoader), IdleStateHandler$1:operationComplete(ChannelFuture), AbstractEpollServerChannel$EpollServerSocketUnsafe:epollInReady(), EmptyByteBuf:readBytes(ByteBuf-int), FastThreadLocalThread:<init>(), DiskFileUpload:addContent(ByteBuf-boolean), DiskFileUpload:getFile(), UnpooledDirectByteBuf:readerIndex(), MemoryAttribute:hashCode(), ThreadDeathWatcher$Watcher:<init>(ThreadDeathWatcher$1), ChannelBufferByteInput:available(), UnpooledHeapByteBuf:getInt(int), PingWebSocketFrame:<init>(ByteBuf), NioServerSocketChannel:remoteAddress(), EpollDomainSocketChannelConfig:setAutoRead(boolean), HttpDataFactory:cleanRequestHttpData(HttpRequest), SslContext:isServer(), CharsetUtil:getEncoder(Charset), AbstractByteBufAllocator:<init>(), UnpooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int), ReplayingDecoderBuffer:readBytes(byte[]-int-int), ByteBuf:resetWriterIndex(), EmbeddedEventLoop:invokeExceptionCaught(ChannelHandlerContext-Throwable), PrimitiveCollections$UnmodifiableIntObjectMap:clear(), ConcurrentHashMapV8:mappingCount(), DefaultAttributeMap:attr(AttributeKey), EmptyHttp2Headers:addDouble(Object-double), EmptyHeaders:getAllAndRemove(Object), SimpleNameResolver:resolve(SocketAddress), Crc32c:<init>(), HAProxyMessage:checkAddress(String-HAProxyProxiedProtocol$AddressFamily), SpdySessionHandler:acceptStream(int-byte-boolean-boolean), AbstractChannel:access$800(AbstractChannel), Recycler$DefaultHandle:access$900(Recycler$DefaultHandle), DefaultChannelPipeline$HeadContext:flush(ChannelHandlerContext), Http2ConnectionEncoder:close(), PooledHeapByteBuf:getBytes(int-OutputStream-int), EmbeddedChannel:lastOutboundBuffer(), DefaultHttp2HeaderTableListSize:<init>(), HttpHeaderUtil:getContentLength(HttpMessage-long), CountedCompleter:firstComplete(), InboundHttp2ToHttpPriorityAdapter:<init>(InboundHttp2ToHttpPriorityAdapter$Builder), Recycler:get(), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), PoolThreadCache$SubPageMemoryRegionCache:<init>(int), ReplayingDecoderBuffer:writeChar(int), EmptyConvertibleHeaders:setObject(Object-Iterable), ChannelOutboundBuffer:writabilityMask(int), AbstractByteBuf:isWritable(int), MqttDecoder:decodePublishPayload(ByteBuf-int), MqttMessageType:<init>(String-int-int), HttpHeaderDateFormat:<clinit>(), WebSocketServerHandshaker$2:messageReceived(ChannelHandlerContext-Object), RtspRequestEncoder:<init>(), AdvancedLeakAwareByteBuf:indexOf(int-int-byte), SocketChannelUDT:close(), AbstractChannel:write(Object), AbstractInternalLogger:log(InternalLogLevel-String-Object[]), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame), AbstractChannel:read(), AbstractConstant:<init>(int-String), Http2Stream:setProperty(Object-Object), ConcurrentHashMapV8$SearchEntriesTask:addToPendingCount(int), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-CorruptedFrameException), ReplayingDecoderBuffer:markWriterIndex(), AbstractOioChannel$DefaultOioUnsafe:closeIfClosed(), Native:getSoError(int), AsciiString:toCharArray(), DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:convertName(CharSequence), StompSubframeDecoder:skipControlCharacters(ByteBuf), ByteBufAllocator:ioBuffer(int), EpollDomainSocketChannel$EpollDomainUnsafe$1:run(), LimitingByteInput:read(), HttpClientCodec:access$300(HttpClientCodec), DefaultAttributeMap$DefaultAttribute:compareAndSet(Object-Object), InterfaceHttpData$HttpDataType:valueOf(String), PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:<init>(PrimitiveCollections$UnmodifiableIntObjectMap-Iterator), GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long-long-long), GlobalChannelTrafficShapingHandler$1:iterator(), DefaultHttp2ConnectionDecoder:access$1000(DefaultHttp2ConnectionDecoder), Http2RemoteFlowController:sendFlowControlled(ChannelHandlerContext-Http2Stream-Http2RemoteFlowController$FlowControlled), DefaultTextHeaders$DefaultTextValueTypeConverter:convertShort(short), QueryStringDecoder:path(), EmbeddedEventLoop:shutdownGracefully(long-long-TimeUnit), Recycler$2:<init>(), DefaultPromise:setSuccess0(Object), DefaultSpdyDataFrame:refCnt(), ConcurrentHashMapV8$ForEachTransformedMappingTask:propagateCompletion(), HttpContentEncoder:fetchEncoderOutput(List), DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), MemoryFileUpload:equals(Object), CompositeByteBuf:writeBytes(ByteBuf), EpollServerChannelConfig:setOption(ChannelOption-Object), EmbeddedChannelId:<clinit>(), VoidChannelPromise:addListener(GenericFutureListener), EpollEventLoop:epollWait(boolean), ForkJoinPool$WorkQueue:isEmpty(), DefaultChannelPipeline$TailContext:channelRead(ChannelHandlerContext-Object), OioByteStreamChannel:doWriteBytes(ByteBuf), CorsConfig$Builder:preflightResponseHeader(String-Callable), Unsafe:getObjectVolatile(Object-long), DefaultUdtServerChannelConfig:getOptions(), ChannelHandlerContext:newPromise(), DefaultThreadFactory:<init>(Class-boolean), Http2RemoteFlowController$FlowControlled:write(int), X500Principal:getName(String), Http2Flags:getPaddingPresenceFieldLength(), UnpooledDirectByteBuf:setInt(int-int), Http2FrameSizePolicy:maxFrameSize(), DefaultThreadFactory:newThread(Runnable), WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), MqttUnsubscribePayload:toString(), DefaultHeaders:contains(Object-Object-Comparator-Comparator), DefaultFullHttpResponse:duplicate(), ForkJoinPool:access$000(), Socks5PasswordAuthRequestDecoder$State:ordinal(), Http2HeadersEncoder:encodeHeaders(Http2Headers-ByteBuf), SpdySession:closeRemoteSide(int-boolean), DnsHeader:setZ(int), UnsafeDirectSwappedByteBuf:getUnsignedInt(int), AbstractInternalLogger:log(InternalLogLevel-String), JdkSslServerContext:buildKeyManagerFactory(File-File-String-KeyManagerFactory), GlobalChannelTrafficShapingHandler$2:run(), HttpResponse:headers(), EpollSocketChannelConfig:setTcpKeepCntl(int), WrappedByteBuf:setBytes(int-ByteBuffer), EmptyBinaryHeaders:addDouble(Object-double), MqttMessage:<init>(MqttFixedHeader), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), MqttConnectVariableHeader:isWillRetain(), SwappedByteBuf:setBytes(int-ByteBuf), ConcurrentHashMapV8:reduceToLong(long-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), PoolThreadCache$MemoryRegionCache:<init>(int), MqttEncoder:encodeMessageWithOnlySingleByteFixedHeader(ByteBufAllocator-MqttMessage), EmptyHttp2Headers:addLong(AsciiString-long), SslHandler:<clinit>(), SslContext:newServerContext(SslProvider-File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), IntObjectHashMap:access$200(IntObjectHashMap), SwappedByteBuf:clear(), DefaultTextHeaders:setObject(Object-Object), SingleThreadEventExecutor$4:<init>(SingleThreadEventExecutor-Runnable), MemoryFileUpload:getFilename(), PoolSubpage:toString(), Deflater:deflateEnd(), DefaultUdtChannelConfig:setWriteBufferLowWaterMark(int), DefaultHttp2ConnectionDecoder$Builder:connection(Http2Connection), PooledByteBufAllocator:validateAndCalculatePageShifts(int), DefaultTextHeaders:access$1401(DefaultTextHeaders-Object-Object), DefaultChannelPromise:trySuccess(), AsciiString:parseInt(int-int-int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(), Http2ServerUpgradeCodec:decodeSettings(ChannelHandlerContext-ByteBuf), PromiseAggregator:operationComplete(Future), ByteToMessageDecoder:channelReadComplete(ChannelHandlerContext), Http2InboundFrameLogger:close(), DefaultChannelPipeline$HeadContext:<init>(DefaultChannelPipeline), InboundHttp2ToHttpPriorityAdapter:removePriorityRelatedHeaders(HttpHeaders), BinaryMemcacheMessage:extras(), DefaultSpdyHeadersFrame:setStreamId(int), NativeDatagramPacketArray$1:onRemoval(NativeDatagramPacketArray), AdvancedLeakAwareByteBuf:copy(), Cleaner0:freeDirectBuffer(ByteBuffer), CompositeByteBuf:_setByte(int-int), HttpObjectEncoder:encodeHeaders(HttpHeaders-ByteBuf), Snappy:reset(), EmbeddedEventLoop:invokeDisconnect(ChannelHandlerContext-ChannelPromise), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), Socks5InitialRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List), Socks5ProxyHandler:<init>(SocketAddress), AbstractChannel:close(), JZlibEncoder:<init>(), DefaultProgressivePromise:setProgress(long-long), CipherSuiteConverter:isJ2OCached(String-String), NioServerSocketChannel:doReadMessages(List), ReplayingDecoderBuffer:writeBoolean(boolean), WebSocketServerHandshaker00:<init>(String-String-int), DefaultHeaders:getInt(Object-short), DefaultHeaders:getLongAndRemove(Object), DefaultSocketChannelConfig:getOptions(), InternalThreadLocalMap:remove(), OpenSslSessionContext$EmptyEnumeration:nextElement(), EpollEventLoopGroup:<init>(int-Executor-int), HttpHeaders:iterator(), OioServerSocketChannel:localAddress0(), HttpPostRequestEncoder$EncoderMode[]:clone(), ByteBuf:readUnsignedMedium(), EpollSocketChannelConfig:isReuseAddress(), SlicedByteBuf:setBytes(int-ByteBuffer), StringUtil:substringAfter(String-char), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle-ByteBufUtil$1), Bzip2DivSufSort:ssCompare(int-int-int), DefaultHttpContent:touch(Object), JZlibEncoder$2:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), Http2HeadersDecoder$Configuration:headerTable(), InboundHttp2ToHttpAdapter$1:mustSendImmediately(FullHttpMessage), PerMessageDeflateClientExtensionHandshaker:access$000(PerMessageDeflateClientExtensionHandshaker), EpollDomainSocketChannel$EpollDomainUnsafe:close(ChannelPromise), AbstractScheduledEventExecutor:inEventLoop(), HttpPostRequestEncoder$WrappedFullHttpRequest:headers(), AbstractChannel:connect(SocketAddress-SocketAddress-ChannelPromise), DnsResponseHeader:setResponseCode(DnsResponseCode), DefaultAddressedEnvelope:toString(), CorsHandler:validateOrigin(), Http2ConnectionHandler:close(ChannelHandlerContext-ChannelPromise), ReadOnlyByteBufferBuf:capacity(), SctpNotificationHandler:handleNotification(PeerAddressChangeNotification-Object), ByteBuf:getBoolean(int), DefaultHttp2FrameReader$State:values(), AbstractEpollStreamChannel:isOpen(), Base64:decode(ByteBuf-int-int-Base64Dialect), DefaultTextHeaders:addShort(CharSequence-short), ObjectDecoderInputStream:read(), NioServerSocketChannel:config(), PooledByteBufAllocator:newHeapBuffer(int-int), AbstractBinaryMemcacheMessage:touch(), DefaultHttpHeaders:setDouble(Object-double), CompositeByteBuf:setBytes(int-InputStream-int), ServerBootstrap$ServerBootstrapAcceptor$2:<init>(ServerBootstrap$ServerBootstrapAcceptor-ChannelConfig), AbstractReferenceCountedByteBuf:writeBytes(ByteBuffer), AbstractByteBuf:_setLong(int-long), HttpObjectAggregator$AggregatedFullHttpMessage:touch(), AbstractChannel$AbstractUnsafe$5:operationComplete(ChannelFuture), Socks5ProxyHandler:<init>(SocketAddress-String-String), AbstractEpollChannel:isRegistered(), Log4JLogger:trace(String-Object-Object), ReplayingDecoderBuffer:memoryAddress(), Native:newIOException(String-int), AbstractSocksMessage:setDecoderResult(DecoderResult), ConcurrentHashMapV8$MapReduceKeysTask:advance(), OpenSslSessionStats:connect(), ChunkedNioFile:<init>(FileChannel-long-long-int), DefaultOioServerSocketChannelConfig:setOption(ChannelOption-Object), WebSocketServerProtocolHandler:handlerAdded(ChannelHandlerContext), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:selected(String), ChannelMatchers:isNot(Channel), Http2Connection$Endpoint:createStream(int), Utf8Validator:check(ByteBuf), NativeLibraryLoader:tmpdir(), DefaultHttp2ConnectionDecoder$FrameReadListener:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf), UnpooledDirectByteBuf:_getUnsignedMedium(int), DefaultChannelGroupFuture:checkDeadLock(), DiskFileUpload:getFilename(), GlobalChannelTrafficShapingHandler$1:<init>(GlobalChannelTrafficShapingHandler), Crc32c:update(int), AbstractEpollChannel:localAddress(), RtspVersions:<clinit>(), ByteBufUtil:compare(ByteBuf-ByteBuf), SwappedByteBuf:readBytes(ByteBuf), DefaultSctpChannelConfig:setSendBufferSize(int), DefaultChannelProgressivePromise:setSuccess(Void), ByteBuf:compareTo(Object), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String-Throwable), DefaultHeaders:containsByte(Object-byte), DefaultTextHeaders$1:generateHashCode(Object), Socks5CommandRequestDecoder:state(), ByteBuf:nioBuffers(), SpdyFrameDecoder$State:valueOf(String), DefaultHttp2Connection$DefaultStream:closeRemoteSide(), DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket), HttpObjectAggregator$AggregatedFullHttpRequest:content(), HttpHeaderDateFormat:get(), SSLEngine:getWantClientAuth(), OpenSslNpnApplicationProtocolNegotiator:<init>(String[]), ObjectDecoderInputStream:markSupported(), Log4JLogger:isDebugEnabled(), AbstractNioByteChannel:setReadPending(boolean), ByteBuf:readBytes(int), AbstractChannel:filterOutboundMessage(Object), GlobalTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), DefaultHttp2Headers:addChar(AsciiString-char), MpscLinkedQueue:toArray(), PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean), SimpleTrustManagerFactory:<init>(), DefaultChannelHandlerInvoker:invokeChannelUnregistered(ChannelHandlerContext), ChunkedWriteHandler:closeInput(ChunkedInput), NioDatagramChannel:newPromise(), UnpooledDirectByteBuf:capacity(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), EmbeddedEventLoop:invokeChannelRegistered(ChannelHandlerContext), ProxyConnectionEvent:<init>(String-String-SocketAddress-SocketAddress), StringUtil:byteToHexString(int), EpollSocketChannel$EpollSocketChannelUnsafe:closeExecutor(), DefaultDatagramChannelConfig:getTrafficClass(), ReadOnlyByteBuf:copy(int-int), WebSocketServerHandshaker:newWebSocketEncoder(), SwappedByteBuf:setBytes(int-ByteBuf-int), Recycler$Stack:access$802(Recycler$Stack-Recycler$WeakOrderQueue), CodedOutputStream:flush(), DefaultChannelHandlerInvoker:invokeDisconnect(ChannelHandlerContext-ChannelPromise), DnsEntry:hashCode(), MqttTopicSubscription:toString(), DefaultStompContentSubframe:<init>(ByteBuf), JdkZlibEncoder$1:run(), InternalLogger:trace(String-Object), NetUtil:inRangeEndExclusive(int-int-int), FixedCompositeByteBuf:memoryAddress(), LocalChannel:parent(), DefaultThreadFactory:<init>(String-int), EmptyByteBuf:writeChar(int), NioServerSocketChannel:<clinit>(), LogLevel:toInternalLevel(), HttpObjectAggregator:contentLength(HttpMessage), ProtobufVarint32FrameDecoder:<init>(), HttpToHttp2ConnectionHandler:connection(), EmptyHttpHeaders:addInt(Object-int), ChannelHandlerInvokerUtil:invokeChannelRegisteredNow(ChannelHandlerContext), SSL:pendingWrittenBytesInBIO(long), DefaultHeaders:setAll(Headers), MixedAttribute:getValue(), OioServerSocketChannel:remoteAddress(), Unpooled:directBuffer(), ForkJoinTask:helpQuiesce(), MqttQoS:valueOf(int), InternalAttribute:getName(), EmptyConvertibleHeaders:entriesConverted(), PlatformDependent:javaVersion(), DefaultHttp2ConnectionDecoder:access$1200(DefaultHttp2ConnectionDecoder), LocalChannel:doDisconnect(), SpdyHeaderBlockRawDecoder$State:ordinal(), DefaultChannelGroup:disconnect(ChannelMatcher), Http2Connection$Endpoint:maxStreams(), NioEventLoop:hasScheduledTasks(), DefaultTextHeaders$DefaultTextValueTypeConverter:convertDouble(double), SelfSignedCertificate:safeClose(File-OutputStream), AbstractEpollStreamChannel:filterOutboundMessage(Object), EmptyConvertibleHeaders:setChar(Object-char), ChannelHandlerContext:fireChannelReadComplete(), EpollSocketChannel:newUnsafe(), Lz4FrameEncoder$3:<init>(Lz4FrameEncoder-ChannelHandlerContext-ChannelPromise), ProtocolFamilyConverter$1:<clinit>(), MqttSubAckPayload:toString(), DefaultBinaryHeaders$2:convertShort(short), ChannelOutboundBuffer:total(Object), ChannelHandlerInvoker:invokeDeregister(ChannelHandlerContext-ChannelPromise), Unpooled:copyLong(long[]), EpollSocketChannelConfig:getSendBufferSize(), OpenSslEngine:finalize(), GlobalChannelTrafficShapingHandler:handlerAdded(ChannelHandlerContext), Base64:decode(ByteBuf-int-int), AbstractNioChannel$AbstractNioUnsafe:ch(), JdkLogger:debug(String-Object-Object), WrappedByteBuf:ensureWritable(int), ConcurrentHashMapV8:compute(Object-ConcurrentHashMapV8$BiFun), PoolArena:newByteBuf(int), HttpChunkedInput:<init>(ChunkedInput), InboundHttp2ToHttpPriorityAdapter:onWeightChanged(Http2Stream-short), CompositeByteBuf:componentAtOffset(int), DefaultConvertibleHeaders:getAndRemoveAndConvert(Object), DefaultHeaders:addBoolean(Object-boolean), ForkJoinTask:compareAndSetForkJoinTaskTag(short-short), SwappedByteBuf:forEachByte(int-int-ByteBufProcessor), Http2ClientUpgradeCodec:setUpgradeHeaders(ChannelHandlerContext-HttpRequest), OpenSslContext:certificates(byte[][]), Native:sendToAddresses(int-long-int-byte[]-int-int), ServerBootstrap:toString(), PooledDirectByteBuf:getBytes(int-ByteBuffer-boolean), PingWebSocketFrame:touch(), Http2FrameLogger$Direction:<init>(String-int), FullBinaryMemcacheRequest:setTotalBodyLength(int), DefaultCookie:isHttpOnly(), InternalLogger:error(String), SwappedByteBuf:setMedium(int-int), ChannelPipeline:fireUserEventTriggered(Object), CompositeByteBuf$Component:freeIfNecessary(), DefaultHttp2Headers:setObject(AsciiString-Object), EpollDomainSocketChannelConfig:getOption(ChannelOption), JdkBaseApplicationProtocolNegotiator:protocolSelectorFactory(), ZlibUtil:deflaterException(Deflater-String-int), DefaultTextHeaders:set(CharSequence-CharSequence), ConcurrentHashMapV8$ForEachTransformedEntryTask:advance(), MemoryAttribute:touch(), WebSocketUtil:randomBytes(int), HttpRequestDecoder:createInvalidMessage(), DefaultPromise:execute(EventExecutor-Runnable), DefaultFullBinaryMemcacheResponse:touch(Object), DecompressionException:<init>(String-Throwable), LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int), HAProxyCommand:valueOf(String), Socks4ProxyHandler:exceptionMessage(String), AbstractChannel:alloc(), ConcurrentHashMapV8:reduceEntriesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ChannelOutboundBuffer:setUserDefinedWritability(int), AbstractChannel:isOpen(), DefaultTextHeaders:addBoolean(CharSequence-boolean), DefaultHttp2Connection:createRemoteStream(int), DefaultSpdySynStreamFrame:setPriority(byte), SnappyFrameDecoder$ChunkType[]:clone(), HttpServerUpgradeHandler:splitHeader(CharSequence), ConcurrentHashMapV8$SearchValuesTask:addToPendingCount(int), HttpObjectAggregator$AggregatedFullHttpRequest:setMethod(HttpMethod), InterfaceHttpPostRequestDecoder:next(), SpdySessionStatus:toString(), DefaultPromise$1:<init>(DefaultPromise-DefaultFutureListeners), AbstractMemcacheObjectAggregator:newContinueResponse(Object), HttpObjectAggregator$AggregatedFullHttpResponse:status(), ReadOnlyByteBufferBuf:order(), ReferenceCountUtil$ReleasingTask:<init>(ReferenceCounted-int), DnsQuery:touch(Object), WebSocketClientExtension:newExtensionDecoder(), MessageAggregator:invokeHandleOversizedMessage(ChannelHandlerContext-Object), DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int), DnsNameResolver:minTtl(), CorsConfig:isNullOriginAllowed(), NioDatagramChannelConfig:setTimeToLive(int), StringUtil:toHexString(Appendable-byte[]-int-int), MessageAggregator:isAggregated(Object), PooledHeapByteBuf:checkDstIndex(int-int-int-int), SingleThreadEventLoop:addShutdownHook(Runnable), CompositeByteBuf:setBytes(int-byte[]-int-int), HAProxyMessageDecoder:decodeStruct(ChannelHandlerContext-ByteBuf), IntObjectMap:values(), AppendableCharSequence:reset(), DnsResponse:addQuestion(DnsQuestion), SniHandler:decode(ChannelHandlerContext-ByteBuf-List), DefaultSocketChannelConfig:setAutoRead(boolean), Signal:hashCode(), UnpooledHeapByteBuf:readerIndex(), SwappedByteBuf:nioBuffers(), ChannelHandlerContext:writeAndFlush(Object), ChannelPipelineException:<init>(String), StompSubframeDecoder$State:values(), ChannelConfig:setOptions(Map), DefaultHttpHeaders:set(CharSequence-CharSequence), AdvancedLeakAwareByteBuf:getByte(int), EpollEventLoop:scheduleExecution(), Native:localAddress0(int), DefaultSpdyDataFrame:duplicate(), Logger:trace(String), CaseIgnoringComparator:<init>(), ChannelHandler:channelInactive(ChannelHandlerContext), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), DefaultHeaders:addAllVisitor(), ForkJoinPool:shutdown(), ByteBuf:setBytes(int-ByteBuf-int), HttpPostRequestDecoder$MultiPartStatus:<clinit>(), DnsQueryContext:access$200(DnsQueryContext-ChannelFuture-InetSocketAddress), SpdyOrHttpChooser$SelectedProtocol[]:clone(), Http2Stream:children(), AbstractMemcacheObjectEncoder:encodeMessage(ChannelHandlerContext-MemcacheMessage), ChunkedFile:<init>(RandomAccessFile), JdkSslContext:toNegotiator(ApplicationProtocolConfig-boolean), Socks5CommandResponseDecoder:<init>(), CompactObjectInputStream:readClassDescriptor(), DefaultFileRegion:retain(int), PlatformDependent0:putByte(long-byte), Lz4FrameEncoder:<init>(LZ4Factory-boolean-int-Checksum), SSL:freeBIO(long), Bzip2Decoder$State[]:clone(), AbstractChannel$AbstractUnsafe$6:run(), SlicedByteBuf:arrayOffset(), ThreadLocalInsecureRandom:nextDouble(), HttpPostBodyUtil$TransferEncodingMechanism[]:clone(), StringUtil:<init>(), OpenSslEngine$ClientAuthMode:valueOf(String), DefaultCookie:setMaxAge(long), OpenSslX509Certificate:getKeyUsage(), OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), SwappedByteBuf:capacity(), StompCommand:toString(), AbstractDiskHttpData:checkSize(long), SingleThreadEventExecutor:purgeCancelledScheduledTasks(), SystemPropertyUtil:getBoolean(String-boolean), DefaultSpdyHeaders:setObject(CharSequence-Object[]), GlobalChannelTrafficCounter:resetAccounting(long), ReplayingDecoderBuffer:writerIndex(), ChunkedNioFile:<init>(FileChannel), SpdyFrameEncoder:encodeWindowUpdateFrame(ByteBufAllocator-int-int), WrappedByteBuf:nioBufferCount(), EmptyHttp2Headers:addObject(Object-Object), NextProtoNego:put(SSLEngine-NextProtoNego$Provider), DefaultOioSocketChannelConfig:setOption(ChannelOption-Object), DefaultPromise:notifyLateListener(GenericFutureListener), DefaultAddressedEnvelope:touch(), ForkJoinTask$AdaptedRunnable:exec(), SelfSignedCertificate:<init>(String-SecureRandom-int), EmbeddedChannel:readInbound(), AbstractChannelHandlerContext:attr(AttributeKey), AbstractInternalLogger:name(), SSLException:setStackTrace(StackTraceElement[]), ResourceLeak:record(Object), DefaultHttp2LocalFlowController:state(Http2Stream), JdkNpnSslEngine:<init>(SSLEngine-JdkApplicationProtocolNegotiator-boolean), BinaryMemcacheMessage:extrasLength(), SelectedSelectionKeySet:doubleCapacityA(), EpollDomainSocketChannel$EpollDomainUnsafe$1:<init>(EpollDomainSocketChannel$EpollDomainUnsafe), AsciiHeadersEncoder$SeparatorType:ordinal(), CommPortIdentifier:getPortIdentifier(String), DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress-Iterable), ByteBuf:writeBoolean(boolean), DefaultHttp2ConnectionEncoder:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise), NioSocketChannel:remoteAddress(), PlatformDependent:maxDirectMemory(), ForkJoinPool$WorkQueue:<init>(ForkJoinPool-ForkJoinWorkerThread-int-int), DefaultHttp2Headers:setObject(Object-Object), SwappedByteBuf:getUnsignedInt(int), EmptyHttpHeaders:setChar(CharSequence-char), DefaultHttp2ConnectionDecoder$Builder:lifecycleManager(Http2LifecycleManager), AsciiString:concat(CharSequence), DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), Http2EventAdapter:<init>(), EmptyBinaryHeaders:addFloat(AsciiString-float), Http2Connection$Listener:streamHalfClosed(Http2Stream), ReferenceCountUtil:<clinit>(), PrimitiveCollections:unmodifiableIntObjectMap(IntObjectMap), ReadTimeoutHandler:<clinit>(), StompSubframeEncoder:encodeContent(StompContentSubframe-ChannelHandlerContext), DefaultPromise$LateListeners:run(), AbstractReferenceCountedByteBuf:deallocate(), ServerCookieDecoder:<init>(), InboundHttp2ToHttpPriorityAdapter:newMessage(int-Http2Headers-boolean), EmptyByteBuf:readByte(), DefaultHttp2FrameReader:<init>(Http2HeadersDecoder), SnappyFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf), SpdyHeaderBlockRawDecoder$State[]:clone(), DefaultHttp2HeadersEncoder:encodeHeader(AsciiString-AsciiString-OutputStream), RxtxChannelConfig$Stopbits:<init>(String-int-int), ClientCookieDecoder$CookieBuilder:<init>(String-int-int-String-String), ServerBootstrap$ServerBootstrapAcceptor:exceptionCaught(ChannelHandlerContext-Throwable), DnsNameResolver$DnsResponseHandler:cache(DnsQuestion-DnsResponse), DefaultChannelPipeline$TailContext:read(ChannelHandlerContext), PlatformDependent:throwException0(Throwable), HttpStatusClass:valueOf(int), DefaultChannelPipeline:replace(Class-String-ChannelHandler), WebSocket08FrameDecoder:<init>(boolean-boolean-int), JdkSslClientContext:buildKeyManagerFactory(File-File-String-KeyManagerFactory), EmptyByteBuf:toString(int-int-Charset), Http2ConnectionHandler:sendPreface(ChannelHandlerContext), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), DefaultBinaryHeaders:addObject(AsciiString-Object[]), ChannelHandlerContext:close(), ReplayingDecoderBuffer:readBoolean(), DnsMessage:retain(int), NioUdtByteConnectorChannel:doFinishConnect(), DefaultTextHeaders:addLong(CharSequence-long), Crc32c:update(byte[]-int-int), ConcurrentHashMapV8$MapReduceKeysToIntTask:getRawResult(), DefaultDatagramChannelConfig:setReuseAddress(boolean), DefaultBinaryHeaders$2:convertToByte(Object), JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader), ByteBuf:bytesBefore(int-byte), AdvancedLeakAwareByteBuf:bytesBefore(byte), TypeParameterMatcher:<init>(), Native:epollCtlDel(int-int), StringUtil:byteToHexString(Appendable-int), VoidChannelPromise$1:operationComplete(ChannelFuture), DefaultChannelGroup$1:<init>(DefaultChannelGroup), AbstractChannelHandlerContext:disconnect(), CtClass:setModifiers(int), DefaultMemcacheContent:touch(Object), ChannelConfig:getRecvByteBufAllocator(), NioUdtByteConnectorChannel:doDisconnect(), AbstractReferenceCountedByteBuf:readerIndex(int), DefaultHeaders:names(), Native:writeAddress0(int-long-int-int), EmptyHttp2Headers:add(Object-Object), Unsafe:putIntVolatile(Object-long-int), Socks5CommandResponseDecoder:fail(List-Throwable), SingleThreadEventExecutor:hasTasks(), DefaultHttp2Connection$LazyPropertyMap:<init>(DefaultHttp2Connection$DefaultStream), ThreadLocalRandom:nextDouble(double-double), Http2InboundFrameLogger$1:onSettingsRead(ChannelHandlerContext-Http2Settings), DefaultChannelGroupFuture:find(Channel), ChannelOutboundBuffer:isFlushedEntry(ChannelOutboundBuffer$Entry), ChannelHandlerInvokerUtil:invokeChannelReadCompleteNow(ChannelHandlerContext), UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int), ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$BiFun), StringDecoder:<init>(Charset), UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean), DnsType:hashCode(), DefaultOioServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket), MqttSubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttSubAckPayload), SlicedByteBuf:writerIndex(), PoolArena:reallocate(PooledByteBuf-int-boolean), AbstractInternalLogger:log(InternalLogLevel-Throwable), EmptyBinaryHeaders:setTimeMillis(AsciiString-long), ProxyHandler:writePendingWrites(), PlatformDependent:copyMemory(long-long-long), LZ4FastDecompressor:decompress(byte[]-int-byte[]-int-int), ChunkedWriteHandler:<init>(), SocketChannelUDT:configureBlocking(boolean), AbstractMemoryHttpData:touch(), MessageToMessageDecoder:<init>(), WebSocketServerExtension:rsv(), DefaultChannelHandlerInvoker$2:run(), AsciiString$2:<init>(), MultithreadEventLoopGroup:<init>(int-ExecutorServiceFactory-Object[]), ForkJoinPool:helpRelease(long-ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue-ForkJoinPool$WorkQueue-int), AsciiString:endsWith(CharSequence), CorsConfig$ConstantValueGenerator:<init>(Object), JdkSslClientContext:<init>(File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), DefaultTextHeaders:clear(), DefaultPromise:tryFailure(Throwable), DefaultTextHeaders$DefaultTextValueTypeConverter:convertToShort(CharSequence), JZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ByteInput:skip(long), JdkAlpnSslEngine$2:protocols(), PooledUnsafeDirectByteBuf:newInternalNioBuffer(ByteBuffer), CompositeByteBuf:checkDstIndex(int-int-int-int), ByteBuf:writeFloat(float), AbstractChannel:write(Object-ChannelPromise), Unpooled:copiedBuffer(byte[]), NioSctpChannel:allRemoteAddresses(), DefaultSpdyWindowUpdateFrame:<init>(int-int), EmbeddedEventLoop:shutdown(), ChannelPipeline:addBefore(String-String-ChannelHandler), PooledHeapByteBuf:_setInt(int-int), Crc32:updateCRC(int-int), MemoryFileUpload:content(), AbstractInternalLogger:trace(Throwable), UdtServerChannelConfig:getBacklog(), OioSctpChannel:bindAddress(InetAddress-ChannelPromise), PlatformDependent0:addressSize(), DefaultHttpDataFactory:<init>(Charset), AbstractByteBuf:getByte(int), AdvancedLeakAwareByteBuf:writeChar(int), Socks5PasswordAuthRequest:password(), DeflateEncoder:handlerRemoved(ChannelHandlerContext), DefaultHttp2Connection:access$400(), DefaultSocks4CommandRequest:type(), ConcurrentHashMapV8$ForEachTransformedKeyTask:addToPendingCount(int), SSLException:<init>(Throwable), DefaultChannelPipeline:names(), ConcurrentHashMapV8$MapReduceKeysToIntTask:firstComplete(), AbstractMemoryHttpData:delete(), EpollServerSocketChannelConfig:setAllocator(ByteBufAllocator), HttpUtil:addHttp2ToHttpHeaders(int-Http2Headers-FullHttpMessage-boolean), ObjectDecoder:decode(ChannelHandlerContext-ByteBuf), EpollSocketChannelConfig:setConnectTimeoutMillis(int), ConcurrentHashMapV8$EntryIterator:next(), FileDescriptor:close(int), Http2Connection$Listener:streamRemoved(Http2Stream), EpollDatagramChannelConfig:isReuseAddress(), SpdySession$StreamState:removePendingWrite(), OioSctpChannel:<init>(Channel-SctpChannel), DefaultHttp2FrameReader$HeadersBlockBuilder:addFragment(ByteBuf-ByteBufAllocator-boolean), DefaultSctpServerChannelConfig:setMaxMessagesPerRead(int), SSLContext:sessionAcceptGood(long), AbstractByteBuf:forEachByteDesc(ByteBufProcessor), ApplicationProtocolConfig$SelectorFailureBehavior:valueOf(String), InboundHttp2ToHttpAdapter:streamRemoved(Http2Stream), HttpHeaders:setObject(CharSequence-Iterable), ByteBufProcessor$5:<init>(), NioSctpServerChannel:<clinit>(), OpenSslEngine:getSession(), DefaultStompHeaders:setObject(CharSequence-Object[]), SwappedByteBuf:internalNioBuffer(int-int), NioSctpChannel:bindAddress(InetAddress), ReadOnlyByteBufferBuf:array(), LocalChannelRegistry:get(SocketAddress), OioSctpChannel:unbindAddress(InetAddress), DefaultSocketChannelConfig:setPerformancePreferences(int-int-int), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:capacity(), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle), Cleaner0:<clinit>(), ConcurrentHashMapV8$MapReduceValuesToIntTask:fork(), Socks5PasswordAuthRequestDecoder$State:values(), DefaultSocks5InitialResponse:<init>(Socks5AuthMethod), Snappy$State:ordinal(), SwappedByteBuf:hashCode(), AbstractOioByteChannel:<init>(Channel), WebSocketClientProtocolHandler$ClientHandshakeStateEvent[]:clone(), PromiseTask:<init>(EventExecutor-Callable), EpollDatagramChannelConfig:setSendBufferSize(int), ChannelPipelineException:<init>(Throwable), AppendableCharSequence:append(char), DnsNameResolverGroup:newResolver(EventExecutor), DefaultDatagramChannelConfig:getOptions(), DefaultHeaders:getShort(Object), ChannelBufferByteInput:skip(long), SupportedCipherSuiteFilter:<init>(), Socks5CommandRequestDecoder$State:ordinal(), LocalChannel:<init>(), Recycler:recycle(Object-Recycler$Handle), PausableChannelEventExecutor$ChannelCallableEventExecutor:call(), Http2CodecUtil:writeFrameHeader(ByteBuf-int-byte-Http2Flags-int), DefaultHttp2ConnectionDecoder$Builder:access$100(DefaultHttp2ConnectionDecoder$Builder), SingleThreadEventExecutor:updateThread(Thread), MixedFileUpload:getName(), HttpObjectAggregator$AggregatedFullHttpResponse:duplicate(), DefaultRxtxChannelConfig:setDatabits(RxtxChannelConfig$Databits), HttpClientUpgradeHandler:<clinit>(), ConcurrentHashMapV8$EntrySetView:<init>(ConcurrentHashMapV8), ReadOnlyByteBuf:getShort(int), Http2Headers:status(AsciiString), Bzip2BlockCompressor:availableSize(), PrimitiveCollections:<clinit>(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), AbstractTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-ChannelPromise), BinaryMemcacheRequest:totalBodyLength(), SpdySession:isLocalSideClosed(int), DefaultHttpHeaders:addTimeMillis(Object-long), DecoderException:<init>(String-Throwable), SpdyFrameDecoder:<init>(SpdyVersion-SpdyFrameDecoderDelegate), Native$NativeInetAddress:<init>(byte[]-int), Snappy$1:<clinit>(), DiskAttribute:getDiskFilename(), MessageToMessageCodec$1:<init>(MessageToMessageCodec), WebSocketClientHandshaker00:newHandshakeRequest(), HttpPostRequestEncoder:nextChunk(), CloseWebSocketFrame:rsv(), DiskAttribute:getHttpDataType(), DefaultConvertibleHeaders:iteratorConverted(), HashedWheelTimer:access$200(HashedWheelTimer), ForkJoinPool:submit(Callable), Native:getTrafficClass(int), ReadOnlyIterator:<init>(Iterator), SwappedByteBuf:setIndex(int-int), ReadOnlyUnsafeDirectByteBuf:capacity(), SpdyFrameDecoder$State:ordinal(), MqttUnsubscribeMessage:variableHeader(), SimpleLeakAwareByteBuf:order(ByteOrder), Http2Headers:method(AsciiString), Bzip2Encoder$2:<init>(Bzip2Encoder-ChannelHandlerContext-ChannelPromise), EventExecutor:invokeAll(Collection), DeflateFrameClientExtensionHandshaker:<init>(int-boolean), SwappedByteBuf:toString(), ByteBuf:forEachByteDesc(ByteBufProcessor), MqttMessage:payload(), DefaultHeaders:setAllVisitor(), AbstractEpollStreamChannel$EpollStreamUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), DefaultThreadFactory$DefaultRunnableDecorator:<init>(Runnable), ObjectEncoderOutputStream:flush(), DefaultHttp2FrameReader$HeadersBlockBuilder:headers(), Http2Exception$CompositeStreamException:iterator(), RtspHeaderNames:<init>(), Http2FrameWriter:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise), AbstractChannel$AbstractUnsafe$7:<init>(AbstractChannel$AbstractUnsafe), NioSctpChannel$1:<init>(NioSctpChannel-InetAddress-ChannelPromise), ApplicationProtocolConfig:protocol(), Unsafe:getLong(long), DefaultHttp2Connection:access$1000(DefaultHttp2Connection), JdkDefaultApplicationProtocolNegotiator:protocols(), ImmediateExecutor:execute(Runnable), ReferenceCountUtil:retain(Object), HttpMethod:compareTo(Object), EmptyHeaders:setFloat(Object-float), DefaultHttpHeaders:<clinit>(), OpenSslEngine:getEngineStatus(), OpenSslServerContext:<init>(File-File-String), SSL:freeSSL(long), OpenSslClientContext:<init>(TrustManagerFactory), EmptyByteBuf:writeBytes(ByteBuf-int), ReadOnlyByteBuf:setMedium(int-int), DefaultSpdyHeaders:addObject(Object-Object), SpdyHeaderBlockZlibEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), ByteBuf:writeBytes(byte[]), MessageAggregator:finishAggregation(ByteBufHolder), PooledHeapByteBuf:checkIndex(int), ForkJoinTask:setForkJoinTaskTag(short), EventExecutor:isShutdown(), SimpleNameResolver:resolve(String-int-Promise), DefaultChannelHandlerInvoker:invokeClose(ChannelHandlerContext-ChannelPromise), CompleteChannelFuture:awaitUninterruptibly(), LocalChannel$3:<init>(LocalChannel-LocalChannel), JdkSslSession:invalidate(), DefaultChannelPipeline:context(Class), DnsResponse:addAuthorityResource(DnsResource), EmptyHttpHeaders:set(CharSequence-CharSequence), EpollEventLoopGroup:<init>(), WebSocketClientHandshaker:newWebSocketEncoder(), AppendableCharSequence:toString(), JdkSslSession:getLocalCertificates(), PromiseTask:setFailureInternal(Throwable), EpollChannelConfig:setWriteSpinCount(int), HttpPostRequestEncoder:fillByteBuf(), SystemPropertyUtil:getInt(String-int), JdkSslEngine:setSSLParameters(SSLParameters), SSLEngine:getSupportedCipherSuites(), WebSocketServerHandshaker13:<init>(String-String-boolean-int), DefaultStompFrame:touch(Object), AbstractChannelHandlerContext:<clinit>(), SpdyDataFrame:streamId(), UnpooledDirectByteBuf:capacity(), Http2Settings:<init>(), EmptyByteBuf:getUnsignedMedium(int), ConcurrentHashMapV8$ForEachMappingTask:addToPendingCount(int), LzmaFrameEncoder:<clinit>(), ByteToMessageDecoder:actualReadableBytes(), DefaultHttp2Headers:setInt(Object-int), NotSslRecordException:<init>(String), EpollDatagramChannel:config(), AbstractEpollChannel:doBeginRead(), DefaultRxtxChannelConfig:<init>(RxtxChannel), AbstractHttpData:touch(Object), EmptyByteBuf:getBoolean(int), AbstractTrafficShapingHandler:setCheckInterval(long), DefaultOioServerSocketChannelConfig:getSoTimeout(), JZlibEncoder:<init>(byte[]), MessageToMessageCodec:decode(ChannelHandlerContext-Object-List), EmptyConvertibleHeaders:set(Object-Object[]), JdkSslSession:removeValue(String), SingleThreadEventExecutor:hasScheduledTasks(), ImmediateEventExecutor:shutdownGracefully(long-long-TimeUnit), SctpMessage:retain(int), ThreadPerChannelEventLoopGroup:register(Channel-ChannelPromise), ChannelHandler:handlerAdded(ChannelHandlerContext), JdkZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), MixedFileUpload:isCompleted(), AbstractEpollStreamChannel:parent(), OioSctpServerChannel:access$100(OioSctpServerChannel-boolean), Log:error(Object-Throwable), Snappy:decodeCopyWith1ByteOffset(byte-ByteBuf-ByteBuf-int), LoggingHandler:appendHexDump(StringBuilder-ByteBuf), ByteBufInputStream:readFloat(), ByteBufOutputStream:write(byte[]-int-int), AsciiString:access$000(AsciiString), JdkLoggerFactory:<init>(), EmbeddedEventLoop:<init>(), CompositeByteBuf:retain(int), DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), HttpObjectEncoder:<clinit>(), Socks4ClientEncoder:encode(ChannelHandlerContext-Socks4CommandRequest-ByteBuf), SslContext:newHandler(ByteBufAllocator), DefaultSocketChannelConfig:setReceiveBufferSize(int), ChannelHandlerInvoker:invokeWrite(ChannelHandlerContext-Object-ChannelPromise), AbstractEpollStreamChannel:<init>(int), Version:<init>(String-String-long-long-String-String-String), AbstractNioChannel$AbstractNioUnsafe:ensureOpen(ChannelPromise), PooledHeapByteBuf:getBytes(int-ByteBuffer), MqttPublishVariableHeader:<init>(String-int), ThreadPerChannelEventLoopGroup:newChild(Object[]), DnsMessage:release(), SslHandler:wrap(ChannelHandlerContext-boolean), TextWebSocketFrame:copy(), EmbeddedChannel:write(Object), ByteToMessageCodec:<init>(boolean), UniqueIpFilter:accept(ChannelHandlerContext-SocketAddress), Native:socketDomainFd(), DnsResponseHeader:setTruncated(boolean), Unmarshaller:readObject(), DefaultHttp2FrameReader:verifyContinuationFrame(), SSL:setCipherSuites(long-String), ReplayingDecoderBuffer:compareTo(Object), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(), NioSctpServerChannel:remoteAddress(), WebSocketExtensionData:name(), NioUdtProvider:socketUDT(Channel), SystemPropertyUtil:get(String-String), Attribute:getName(), PlatformDependent:putByte(long-byte), SpdyFrameCodec:readSynReplyFrame(int-boolean), JdkZlibDecoder:looksLikeZlib(short), EmptyByteBuf:writeFloat(float), WebSocket08FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), DecoderResult:isFailure(), PausableChannelEventExecutor:invokeAny(Collection-long-TimeUnit), HttpPostStandardRequestDecoder:checkDestroyed(), DeflateEncoder:rsv(WebSocketFrame), ForkJoinPool:nextPoolId(), PooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int), LimitingByteInput:skip(long), DefaultHttp2ConnectionDecoder$Builder:<init>(), DefaultChannelPromise:await(), ZlibCodecFactory:newZlibDecoder(byte[]), FileDescriptor:isOpen(), AbstractChannelHandlerContext:findContextInbound(), DefaultSpdyHeaders:addFloat(Object-float), EmptyHttpHeaders:add(CharSequence-Iterable), PlatformDependent:isAndroid0(), Http2Exception$StreamException:streamId(), CompositeByteBuf:_setMedium(int-int), AbstractDerivedByteBuf:unwrap(), HttpPostRequestEncoder$EncoderMode:values(), BinaryMemcacheResponseStatus:<init>(), DefaultHttpHeaders:addObject(CharSequence-Object[]), NioSocketChannel$NioSocketChannelConfig:<init>(NioSocketChannel-NioSocketChannel-Socket), DefaultNameResolver:<init>(EventExecutor), LzfDecoder:<init>(boolean), JavassistTypeParameterMatcherGenerator:generate(Class), EpollEventArray:increase(), ReplayingDecoderBuffer:slice(int-int), Http2FrameLogger:logGoAway(Http2FrameLogger$Direction-int-long-ByteBuf), DefaultHttp2ConnectionEncoder$FlowControlledHeaders:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-Http2Headers-int-short-boolean-int-boolean-ChannelPromise), NioUdtByteConnectorChannel:doWriteBytes(ByteBuf), AbstractNioChannel$AbstractNioUnsafe:flush0(), ThreadLocalInsecureRandom:generateSeed(int), WebSocketExtensionUtil:<clinit>(), MixedAttribute:touch(Object), Unsafe:getByte(long), PoolSubpage:removeFromPool(), ChannelOutboundBuffer$Entry$1:newObject(Recycler$Handle), AbstractChannel:disconnect(ChannelPromise), DefaultChannelId:scoreAddress(InetAddress), UnpooledHeapByteBuf:maxCapacity(), HttpProxyHandler:removeEncoder(ChannelHandlerContext), DnsServerAddresses$RotationalAddresses:iterator(), Bzip2HuffmanStageEncoder:selectTableCount(int), LengthFieldBasedFrameDecoder:<init>(ByteOrder-int-int-int-int-int-boolean), FastLz:calculateOutputBufferLength(int), Channel:closeFuture(), OpenSslServerContext:toNegotiator(ApplicationProtocolConfig-boolean), DnsNameResolver$3:run(), HttpPostMultipartRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset), ConcurrentHashMapV8$EntrySetView:add(Map$Entry), DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress), UnpooledHeapByteBuf:_setByte(int-int), CompositeByteBuf:setInt(int-int), DefaultSctpServerChannelConfig:getOption(ChannelOption), MessageToByteEncoder:<init>(Class-boolean), OioSctpChannel$2:run(), EpollSocketChannel:eventLoop(), ByteBuf:alloc(), ChunkedWriteHandler:flush(ChannelHandlerContext), InterfaceHttpPostRequestDecoder:cleanFiles(), NioUdtMessageAcceptorChannel:javaChannel(), SwappedByteBuf:isDirect(), Http2OutboundFrameLogger:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise), EmptyHttp2Headers:addBoolean(Object-boolean), DefaultStompHeaders:setObject(Object-Object[]), ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), UnpooledUnsafeDirectByteBuf:nioBuffer(int-int), DefaultHttpHeaders:set(Object-Iterable), AbstractEpollChannel:clearEpollIn(), DefaultSpdySettingsFrame:isSet(int), ConcurrentHashMapV8$MapReduceMappingsTask:firstComplete(), ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-String[]), SwappedByteBuf:setByte(int-int), HttpClientUpgradeHandler$UpgradeEvent:<clinit>(), DefaultChannelPipeline:bind(SocketAddress), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<clinit>(), EmbeddedChannel:checkException(), ForkJoinTask:<init>(), UnsafeDirectSwappedByteBuf:getDouble(int), AbstractByteBuf:readLong(), ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), PooledDirectByteBuf:_getShort(int), EmptyHttp2Headers:add(Object-Iterable), UnpooledDirectByteBuf:arrayOffset(), Socks5PasswordAuthResponseDecoder$State:ordinal(), ConcurrentHashMapV8$EntrySpliterator:forEachRemaining(ConcurrentHashMapV8$Action), SnappyFrameDecoder$ChunkType:ordinal(), DefaultChannelGroup:<init>(EventExecutor), DefaultTextHeaders$ValuesComposer:add(CharSequence-CharSequence[]), ReplayingDecoderBuffer:alloc(), DefaultLastMemcacheContent:copy(), Log4JLogger:error(String-Object[]), MqttPublishVariableHeader:topicName(), ProtobufEncoder:encode(ChannelHandlerContext-Object-List), ChannelHandler:deregister(ChannelHandlerContext-ChannelPromise), DefaultHttp2ConnectionDecoder:access$700(DefaultHttp2ConnectionDecoder-Http2Stream)),
	edges = mapOf(
		LengthFieldBasedFrameDecoder:<init>(int-int-int) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int)),
		LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int-boolean)),
		LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int-boolean) to listOf(LengthFieldBasedFrameDecoder:<init>(ByteOrder-int-int-int-int-int-boolean)),
		LengthFieldBasedFrameDecoder:<init>(ByteOrder-int-int-int-int-int-boolean) to listOf(ByteToMessageDecoder:<init>()),
		LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:skipBytes(int), LengthFieldBasedFrameDecoder:failIfNecessary(boolean), ByteBuf:readableBytes(), ByteBuf:readerIndex(), LengthFieldBasedFrameDecoder:getUnadjustedFrameLength(ByteBuf-int-int-ByteOrder), ByteBuf:skipBytes(int), CorruptedFrameException:<init>(String), ByteBuf:skipBytes(int), CorruptedFrameException:<init>(String), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), LengthFieldBasedFrameDecoder:failIfNecessary(boolean), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), CorruptedFrameException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), LengthFieldBasedFrameDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), ByteBuf:readerIndex(int)),
		LengthFieldBasedFrameDecoder:getUnadjustedFrameLength(ByteBuf-int-int-ByteOrder) to listOf(ByteBuf:order(ByteOrder), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedMedium(int), ByteBuf:getUnsignedInt(int), ByteBuf:getLong(int), DecoderException:<init>(String)),
		LengthFieldBasedFrameDecoder:failIfNecessary(boolean) to listOf(LengthFieldBasedFrameDecoder:fail(long), LengthFieldBasedFrameDecoder:fail(long)),
		LengthFieldBasedFrameDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int-int)),
		LengthFieldBasedFrameDecoder:fail(long) to listOf(TooLongFrameException:<init>(String), TooLongFrameException:<init>(String)),
		CodecUtil:ensureNotSharable(ChannelHandlerAdapter) to listOf(ChannelHandlerAdapter:isSharable()),
		EmptyConvertibleHeaders:<init>() to listOf(EmptyHeaders:<init>()),
		EmptyConvertibleHeaders:iteratorConverted() to listOf(EmptyConvertibleHeaders:entriesConverted()),
		DefaultBinaryHeaders$2:convertObject(Object) to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertObject(Object)),
		DefaultBinaryHeaders$2:convertInt(int) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertInt(int)),
		DefaultBinaryHeaders$2:convertLong(long) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertLong(long)),
		DefaultBinaryHeaders$2:convertDouble(double) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertDouble(double)),
		DefaultBinaryHeaders$2:convertChar(char) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertChar(char)),
		DefaultBinaryHeaders$2:convertBoolean(boolean) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertBoolean(boolean)),
		DefaultBinaryHeaders$2:convertFloat(float) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertFloat(float)),
		DefaultBinaryHeaders$2:convertToInt(AsciiString) to listOf(AsciiString:parseInt()),
		DefaultBinaryHeaders$2:convertToLong(AsciiString) to listOf(AsciiString:parseLong()),
		DefaultBinaryHeaders$2:convertTimeMillis(long) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertTimeMillis(long)),
		DefaultBinaryHeaders$2:convertToTimeMillis(AsciiString) to listOf(DefaultHeaders$HeaderDateFormat:get(), AsciiString:toString(), DefaultHeaders$HeaderDateFormat:parse(String), PlatformDependent:throwException(Throwable)),
		DefaultBinaryHeaders$2:convertToDouble(AsciiString) to listOf(AsciiString:parseDouble()),
		DefaultBinaryHeaders$2:convertToChar(AsciiString) to listOf(AsciiString:charAt(int)),
		DefaultBinaryHeaders$2:convertToBoolean(AsciiString) to listOf(AsciiString:byteAt(int)),
		DefaultBinaryHeaders$2:convertToFloat(AsciiString) to listOf(AsciiString:parseFloat()),
		DefaultBinaryHeaders$2:convertShort(short) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertShort(short)),
		DefaultBinaryHeaders$2:convertToShort(AsciiString) to listOf(AsciiString:parseShort()),
		DefaultBinaryHeaders$2:convertByte(byte) to listOf(AsciiString:<init>(CharSequence), DefaultBinaryHeaders$2:convertByte(byte)),
		DefaultBinaryHeaders$2:convertToByte(AsciiString) to listOf(AsciiString:byteAt(int)),
		DefaultBinaryHeaders$2:convertToDouble(Object) to listOf(DefaultBinaryHeaders$2:convertToDouble(AsciiString)),
		DefaultBinaryHeaders$2:convertToFloat(Object) to listOf(DefaultBinaryHeaders$2:convertToFloat(AsciiString)),
		DefaultBinaryHeaders$2:convertToTimeMillis(Object) to listOf(DefaultBinaryHeaders$2:convertToTimeMillis(AsciiString)),
		DefaultBinaryHeaders$2:convertToLong(Object) to listOf(DefaultBinaryHeaders$2:convertToLong(AsciiString)),
		DefaultBinaryHeaders$2:convertToInt(Object) to listOf(DefaultBinaryHeaders$2:convertToInt(AsciiString)),
		DefaultBinaryHeaders$2:convertToShort(Object) to listOf(DefaultBinaryHeaders$2:convertToShort(AsciiString)),
		DefaultBinaryHeaders$2:convertToChar(Object) to listOf(DefaultBinaryHeaders$2:convertToChar(AsciiString)),
		DefaultBinaryHeaders$2:convertToByte(Object) to listOf(DefaultBinaryHeaders$2:convertToByte(AsciiString)),
		DefaultBinaryHeaders$2:convertToBoolean(Object) to listOf(DefaultBinaryHeaders$2:convertToBoolean(AsciiString)),
		AsciiString$2:compare(Object-Object) to listOf(AsciiString$2:compare(AsciiString-AsciiString)),
		Delimiters:nulDelimiter() to listOf(Unpooled:wrappedBuffer(byte[])),
		Delimiters:lineDelimiter() to listOf(Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[])),
		JsonObjectDecoder:<init>() to listOf(JsonObjectDecoder:<init>(int)),
		JsonObjectDecoder:<init>(int) to listOf(JsonObjectDecoder:<init>(int-boolean)),
		JsonObjectDecoder:<init>(boolean) to listOf(JsonObjectDecoder:<init>(int-boolean)),
		JsonObjectDecoder:<init>(int-boolean) to listOf(ByteToMessageDecoder:<init>()),
		JsonObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:writerIndex(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), JsonObjectDecoder:reset(), TooLongFrameException:<init>(String), ByteBuf:getByte(int), JsonObjectDecoder:decodeByte(byte-ByteBuf-int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), JsonObjectDecoder:extractObject(ChannelHandlerContext-ByteBuf-int-int), ByteBuf:readerIndex(int), JsonObjectDecoder:reset(), JsonObjectDecoder:decodeByte(byte-ByteBuf-int), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), JsonObjectDecoder:extractObject(ChannelHandlerContext-ByteBuf-int-int), ByteBuf:readerIndex(int), JsonObjectDecoder:reset(), JsonObjectDecoder:initDecoding(byte), ByteBuf:skipBytes(int), ByteBuf:skipBytes(int), ByteBufUtil:hexDump(ByteBuf), CorruptedFrameException:<init>(String), ByteBuf:readableBytes()),
		JsonObjectDecoder:extractObject(ChannelHandlerContext-ByteBuf-int-int) to listOf(ByteBuf:slice(int-int), ByteBuf:retain()),
		JsonObjectDecoder:decodeByte(byte-ByteBuf-int) to listOf(ByteBuf:getByte(int)),
		DefaultTextHeaders$SingleHeaderValuesComposer$1:escape(Object) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:access$1100(DefaultTextHeaders$SingleHeaderValuesComposer), Headers$ValueConverter:convertObject(Object), StringUtil:escapeCsv(CharSequence)),
		CorruptedFrameException:<init>() to listOf(DecoderException:<init>()),
		CorruptedFrameException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		CorruptedFrameException:<init>(String) to listOf(DecoderException:<init>(String)),
		CorruptedFrameException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		ByteToMessageDecoder$2:cumulate(ByteBufAllocator-ByteBuf-ByteBuf) to listOf(ByteBuf:refCnt(), ByteBuf:readableBytes(), ByteToMessageDecoder:expandCumulation(ByteBufAllocator-ByteBuf-int), ByteBuf:writeBytes(ByteBuf), ByteBuf:release(), ByteBuf:readableBytes(), ByteBufAllocator:compositeBuffer(), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(int), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int)),
		RtspMethods:valueOf(String) to listOf(HttpMethod:<init>(String)),
		RtspMethods:<clinit>() to listOf(HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString()),
		RtspResponseEncoder:<init>() to listOf(RtspObjectEncoder:<init>()),
		RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse) to listOf(HttpResponse:protocolVersion(), HttpVersion:text(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeByte(int), HttpResponse:status(), HttpResponseStatus:codeAsText(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeByte(int), HttpResponse:status(), HttpResponseStatus:reasonPhrase(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeBytes(byte[])),
		RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse)),
		RtspVersions:valueOf(String) to listOf(HttpVersion:<init>(String-boolean)),
		RtspVersions:<clinit>() to listOf(HttpVersion:<init>(String-int-int-boolean)),
		RtspRequestEncoder:<init>() to listOf(RtspObjectEncoder:<init>()),
		RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest) to listOf(HttpRequest:method(), HttpMethod:name(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeByte(int), HttpRequest:uri(), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), HttpRequest:protocolVersion(), HttpVersion:text(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeBytes(byte[])),
		RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest)),
		RtspObjectDecoder:<init>() to listOf(RtspObjectDecoder:<init>(int-int-int)),
		RtspObjectDecoder:<init>(int-int-int) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		RtspObjectDecoder:<init>(int-int-int-boolean) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean-boolean)),
		RtspObjectDecoder:isContentAlwaysEmpty(HttpMessage) to listOf(HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage), HttpMessage:headers(), HttpHeaders:contains(Object)),
		RtspHeaderNames:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		RtspRequestDecoder:<init>() to listOf(RtspObjectDecoder:<init>()),
		RtspRequestDecoder:<init>(int-int-int) to listOf(RtspObjectDecoder:<init>(int-int-int)),
		RtspRequestDecoder:<init>(int-int-int-boolean) to listOf(RtspObjectDecoder:<init>(int-int-int-boolean)),
		RtspRequestDecoder:createMessage(String[]) to listOf(RtspVersions:valueOf(String), RtspMethods:valueOf(String), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean)),
		RtspRequestDecoder:createInvalidMessage() to listOf(DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean)),
		RtspResponseStatuses:valueOf(int) to listOf(HttpResponseStatus:valueOf(int)),
		RtspResponseStatuses:<clinit>() to listOf(HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String)),
		RtspHeaderValues:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		RtspObjectEncoder:<init>() to listOf(HttpObjectEncoder:<init>()),
		RtspResponseDecoder:<init>() to listOf(RtspObjectDecoder:<init>()),
		RtspResponseDecoder:<init>(int-int-int) to listOf(RtspObjectDecoder:<init>(int-int-int)),
		RtspResponseDecoder:<init>(int-int-int-boolean) to listOf(RtspObjectDecoder:<init>(int-int-int-boolean)),
		RtspResponseDecoder:createMessage(String[]) to listOf(RtspVersions:valueOf(String), HttpResponseStatus:<init>(int-String), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean)),
		RtspResponseDecoder:createInvalidMessage() to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean)),
		RtspResponseDecoder:<clinit>() to listOf(HttpResponseStatus:<init>(int-String)),
		DecoderResult:failure(Throwable) to listOf(DecoderResult:<init>(Throwable)),
		DecoderResult:cause() to listOf(DecoderResult:isFailure()),
		DecoderResult:toString() to listOf(DecoderResult:isFinished(), DecoderResult:isSuccess(), DecoderResult:cause()),
		DecoderResult:<clinit>() to listOf(Signal:valueOf(Class-String), Signal:valueOf(Class-String), DecoderResult:<init>(Throwable), DecoderResult:<init>(Throwable)),
		InboundHttp2ToHttpPriorityAdapter$1:visit(Map$Entry) to listOf(AsciiString:of(CharSequence), AsciiString:of(CharSequence), Http2Headers:add(AsciiString-AsciiString)),
		Http2InboundFrameLogger$1:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logData(Http2FrameLogger$Direction-int-ByteBuf-int-boolean), Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean)),
		Http2InboundFrameLogger$1:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-boolean), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean)),
		Http2InboundFrameLogger$1:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-short-boolean-int-boolean), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean)),
		Http2InboundFrameLogger$1:onPriorityRead(ChannelHandlerContext-int-int-short-boolean) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logPriority(Http2FrameLogger$Direction-int-int-short-boolean), Http2FrameListener:onPriorityRead(ChannelHandlerContext-int-int-short-boolean)),
		Http2InboundFrameLogger$1:onRstStreamRead(ChannelHandlerContext-int-long) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logRstStream(Http2FrameLogger$Direction-int-long), Http2FrameListener:onRstStreamRead(ChannelHandlerContext-int-long)),
		Http2InboundFrameLogger$1:onSettingsAckRead(ChannelHandlerContext) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logSettingsAck(Http2FrameLogger$Direction), Http2FrameListener:onSettingsAckRead(ChannelHandlerContext)),
		Http2InboundFrameLogger$1:onSettingsRead(ChannelHandlerContext-Http2Settings) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logSettings(Http2FrameLogger$Direction-Http2Settings), Http2FrameListener:onSettingsRead(ChannelHandlerContext-Http2Settings)),
		Http2InboundFrameLogger$1:onPingRead(ChannelHandlerContext-ByteBuf) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logPing(Http2FrameLogger$Direction-ByteBuf), Http2FrameListener:onPingRead(ChannelHandlerContext-ByteBuf)),
		Http2InboundFrameLogger$1:onPingAckRead(ChannelHandlerContext-ByteBuf) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logPingAck(Http2FrameLogger$Direction-ByteBuf), Http2FrameListener:onPingAckRead(ChannelHandlerContext-ByteBuf)),
		Http2InboundFrameLogger$1:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logPushPromise(Http2FrameLogger$Direction-int-int-Http2Headers-int), Http2FrameListener:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int)),
		Http2InboundFrameLogger$1:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logGoAway(Http2FrameLogger$Direction-int-long-ByteBuf), Http2FrameListener:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf)),
		Http2InboundFrameLogger$1:onWindowUpdateRead(ChannelHandlerContext-int-int) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logWindowsUpdate(Http2FrameLogger$Direction-int-int), Http2FrameListener:onWindowUpdateRead(ChannelHandlerContext-int-int)),
		Http2InboundFrameLogger$1:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf) to listOf(Http2InboundFrameLogger:access$000(Http2InboundFrameLogger), Http2FrameLogger:logUnknownFrame(Http2FrameLogger$Direction-byte-int-Http2Flags-ByteBuf), Http2FrameListener:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf)),
		Http2FrameListenerDecorator:<init>(Http2FrameListener) to listOf(ObjectUtil:checkNotNull(Object-String)),
		Http2FrameListenerDecorator:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean) to listOf(Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean)),
		Http2FrameListenerDecorator:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean) to listOf(Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean)),
		Http2FrameListenerDecorator:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean) to listOf(Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean)),
		Http2FrameListenerDecorator:onPriorityRead(ChannelHandlerContext-int-int-short-boolean) to listOf(Http2FrameListener:onPriorityRead(ChannelHandlerContext-int-int-short-boolean)),
		Http2FrameListenerDecorator:onRstStreamRead(ChannelHandlerContext-int-long) to listOf(Http2FrameListener:onRstStreamRead(ChannelHandlerContext-int-long)),
		Http2FrameListenerDecorator:onSettingsAckRead(ChannelHandlerContext) to listOf(Http2FrameListener:onSettingsAckRead(ChannelHandlerContext)),
		Http2FrameListenerDecorator:onSettingsRead(ChannelHandlerContext-Http2Settings) to listOf(Http2FrameListener:onSettingsRead(ChannelHandlerContext-Http2Settings)),
		Http2FrameListenerDecorator:onPingRead(ChannelHandlerContext-ByteBuf) to listOf(Http2FrameListener:onPingRead(ChannelHandlerContext-ByteBuf)),
		Http2FrameListenerDecorator:onPingAckRead(ChannelHandlerContext-ByteBuf) to listOf(Http2FrameListener:onPingAckRead(ChannelHandlerContext-ByteBuf)),
		Http2FrameListenerDecorator:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int) to listOf(Http2FrameListener:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int)),
		Http2FrameListenerDecorator:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf) to listOf(Http2FrameListener:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf)),
		Http2FrameListenerDecorator:onWindowUpdateRead(ChannelHandlerContext-int-int) to listOf(Http2FrameListener:onWindowUpdateRead(ChannelHandlerContext-int-int)),
		Http2FrameListenerDecorator:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf) to listOf(Http2FrameListener:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf)),
		HttpToHttp2ConnectionHandler:<init>(boolean-Http2FrameListener) to listOf(Http2ConnectionHandler:<init>(boolean-Http2FrameListener)),
		HttpToHttp2ConnectionHandler:<init>(Http2Connection-Http2FrameListener) to listOf(Http2ConnectionHandler:<init>(Http2Connection-Http2FrameListener)),
		HttpToHttp2ConnectionHandler:<init>(Http2Connection-Http2FrameReader-Http2FrameWriter-Http2FrameListener) to listOf(Http2ConnectionHandler:<init>(Http2Connection-Http2FrameReader-Http2FrameWriter-Http2FrameListener)),
		HttpToHttp2ConnectionHandler:<init>(Http2ConnectionDecoder$Builder-Http2ConnectionEncoder$Builder) to listOf(Http2ConnectionHandler:<init>(Http2ConnectionDecoder$Builder-Http2ConnectionEncoder$Builder)),
		HttpToHttp2ConnectionHandler:getStreamId(HttpHeaders) to listOf(HttpUtil$ExtensionHeaderNames:text(), HttpToHttp2ConnectionHandler:connection(), Http2Connection:local(), Http2Connection$Endpoint:nextStreamId(), HttpHeaders:getInt(Object-int)),
		HttpToHttp2ConnectionHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(FullHttpMessage:content(), ByteBuf:isReadable(), FullHttpMessage:headers(), HttpToHttp2ConnectionHandler:getStreamId(HttpHeaders), HttpUtil:toHttp2Headers(FullHttpMessage), HttpToHttp2ConnectionHandler:encoder(), ChannelHandlerContext:channel(), ChannelHandlerContext:executor(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), Http2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), FullHttpMessage:content(), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), Http2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), Http2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise), FullHttpMessage:release(), ChannelPromise:tryFailure(Throwable), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable), FullHttpMessage:release(), FullHttpMessage:release(), ChannelHandlerContext:write(Object-ChannelPromise)),
		DefaultHttp2Connection$DefaultStream:<init>(DefaultHttp2Connection-int) to listOf(DefaultHttp2Connection:access$400(), DefaultHttp2Connection$LazyPropertyMap:<init>(DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection$DefaultStream:setProperty(Object-Object) to listOf(DefaultHttp2Connection$PropertyMap:put(Object-Object)),
		DefaultHttp2Connection$DefaultStream:getProperty(Object) to listOf(DefaultHttp2Connection$PropertyMap:get(Object)),
		DefaultHttp2Connection$DefaultStream:removeProperty(Object) to listOf(DefaultHttp2Connection$PropertyMap:remove(Object)),
		DefaultHttp2Connection$DefaultStream:isDescendantOf(Http2Stream) to listOf(DefaultHttp2Connection$DefaultStream:parent(), Http2Stream:parent()),
		DefaultHttp2Connection$DefaultStream:isLeaf() to listOf(DefaultHttp2Connection$DefaultStream:numChildren()),
		DefaultHttp2Connection$DefaultStream:numChildren() to listOf(IntObjectMap:size()),
		DefaultHttp2Connection$DefaultStream:children() to listOf(IntObjectMap:values()),
		DefaultHttp2Connection$DefaultStream:hasChild(int) to listOf(DefaultHttp2Connection$DefaultStream:child(int)),
		DefaultHttp2Connection$DefaultStream:child(int) to listOf(IntObjectMap:get(int)),
		DefaultHttp2Connection$DefaultStream:setPriority(int-short-boolean) to listOf(DefaultHttp2Connection:stream(int), DefaultHttp2Connection$DefaultStream:createdBy(), DefaultHttp2Connection$DefaultEndpoint:createStream(int), DefaultHttp2Connection$DefaultStream:weight(short), DefaultHttp2Connection$DefaultStream:parent(), DefaultHttp2Connection$DefaultStream:isDescendantOf(Http2Stream), DefaultHttp2Connection$DefaultStream:numChildren(), DefaultHttp2Connection$DefaultStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List), DefaultHttp2Connection$DefaultStream:numChildren(), DefaultHttp2Connection$DefaultStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List), DefaultHttp2Connection:access$500(DefaultHttp2Connection-List)),
		DefaultHttp2Connection$DefaultStream:open(boolean) to listOf(Http2Stream$State:ordinal(), DefaultHttp2Connection$DefaultStream:isLocal(), Http2Exception:streamError(int-Http2Error-String-Object[]), DefaultHttp2Connection:access$600(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection$DefaultStream:close() to listOf(DefaultHttp2Connection:access$700(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection$DefaultStream:closeLocalSide() to listOf(Http2Stream$State:ordinal(), DefaultHttp2Connection$DefaultStream:notifyHalfClosed(Http2Stream), DefaultHttp2Connection$DefaultStream:close()),
		DefaultHttp2Connection$DefaultStream:closeRemoteSide() to listOf(Http2Stream$State:ordinal(), DefaultHttp2Connection$DefaultStream:notifyHalfClosed(Http2Stream), DefaultHttp2Connection$DefaultStream:close()),
		DefaultHttp2Connection$DefaultStream:notifyHalfClosed(Http2Stream) to listOf(DefaultHttp2Connection:access$800(DefaultHttp2Connection), Http2Connection$Listener:streamHalfClosed(Http2Stream)),
		DefaultHttp2Connection$DefaultStream:createdBy() to listOf(DefaultHttp2Connection:access$900(DefaultHttp2Connection), DefaultHttp2Connection$DefaultEndpoint:createdStreamId(int), DefaultHttp2Connection:access$900(DefaultHttp2Connection), DefaultHttp2Connection:access$1000(DefaultHttp2Connection)),
		DefaultHttp2Connection$DefaultStream:isLocal() to listOf(DefaultHttp2Connection:access$900(DefaultHttp2Connection), DefaultHttp2Connection$DefaultEndpoint:createdStreamId(int)),
		DefaultHttp2Connection$DefaultStream:weight(short) to listOf(DefaultHttp2Connection:access$800(DefaultHttp2Connection), Http2Connection$Listener:onWeightChanged(Http2Stream-short)),
		DefaultHttp2Connection$DefaultStream:removeAllChildren() to listOf(DefaultHttp2Connection:access$400()),
		DefaultHttp2Connection$DefaultStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List) to listOf(DefaultHttp2Connection$DefaultStream:parent(), DefaultHttp2Connection$ParentChangedEvent:<init>(Http2Stream-Http2Stream), DefaultHttp2Connection:access$1100(DefaultHttp2Connection-Http2Stream-Http2Stream), IntObjectMap:isEmpty(), DefaultHttp2Connection$DefaultStream:removeAllChildren(), IntObjectMap:values(), DefaultHttp2Connection$DefaultStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List), DefaultHttp2Connection$DefaultStream:id(), IntObjectMap:put(int-Object), DefaultHttp2Connection$DefaultStream:weight(), DefaultHttp2Connection$DefaultStream:id(), IntObjectMap:remove(int), DefaultHttp2Connection$DefaultStream:weight()),
		DefaultHttp2Connection$DefaultStream:removeChild(DefaultHttp2Connection$DefaultStream) to listOf(DefaultHttp2Connection$DefaultStream:id(), IntObjectMap:remove(int), IntObjectMap:size(), DefaultHttp2Connection$DefaultStream:parent(), DefaultHttp2Connection$ParentChangedEvent:<init>(Http2Stream-Http2Stream), DefaultHttp2Connection:access$1100(DefaultHttp2Connection-Http2Stream-Http2Stream), DefaultHttp2Connection$DefaultStream:weight(), IntObjectMap:values(), DefaultHttp2Connection$DefaultStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List), DefaultHttp2Connection:access$500(DefaultHttp2Connection-List)),
		DefaultHttp2Connection$DefaultStream:parent() to listOf(DefaultHttp2Connection$DefaultStream:parent()),
		Http2OrHttpChooser$1:<clinit>() to listOf(Http2OrHttpChooser$SelectedProtocol:values(), Http2OrHttpChooser$SelectedProtocol:ordinal(), Http2OrHttpChooser$SelectedProtocol:ordinal(), Http2OrHttpChooser$SelectedProtocol:ordinal(), Http2OrHttpChooser$SelectedProtocol:ordinal()),
		DefaultHttp2RemoteFlowController$1:compare(Http2Stream-Http2Stream) to listOf(Http2Stream:weight(), Http2Stream:weight()),
		DefaultHttp2RemoteFlowController$1:compare(Object-Object) to listOf(DefaultHttp2RemoteFlowController$1:compare(Http2Stream-Http2Stream)),
		DefaultHttp2HeadersEncoder:<init>() to listOf(DefaultHttp2HeadersEncoder:<init>(int-Set)),
		DefaultHttp2HeadersEncoder:<init>(int-Set) to listOf(Encoder:<init>(int), DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:<init>(DefaultHttp2HeadersEncoder-DefaultHttp2HeadersEncoder$1)),
		DefaultHttp2HeadersEncoder:encodeHeaders(Http2Headers-ByteBuf) to listOf(ByteBufOutputStream:<init>(ByteBuf), Http2Headers:size(), Http2HeaderTable:maxHeaderListSize(), Http2Headers:size(), Http2HeaderTable:maxHeaderListSize(), Http2Exception:connectionError(Http2Error-String-Object[]), ByteBuf:writeBytes(byte[]), Http2Headers$PseudoHeaderName:values(), Http2Headers$PseudoHeaderName:value(), Http2Headers:get(Object), DefaultHttp2HeadersEncoder:encodeHeader(AsciiString-AsciiString-OutputStream), DefaultHttp2HeadersEncoder$1:<init>(DefaultHttp2HeadersEncoder-OutputStream), Http2Headers:forEachEntry(Headers$EntryVisitor), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[])),
		DefaultHttp2HeadersEncoder:encodeHeader(AsciiString-AsciiString-OutputStream) to listOf(AsciiString:toString(), AsciiString:array(), AsciiString:array(), Encoder:encodeHeader(OutputStream-byte[]-byte[]-boolean)),
		DefaultHttp2HeadersEncoder:access$100(DefaultHttp2HeadersEncoder-AsciiString-AsciiString-OutputStream) to listOf(DefaultHttp2HeadersEncoder:encodeHeader(AsciiString-AsciiString-OutputStream)),
		DefaultHttp2ConnectionEncoder$FlowControlledBase:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-int-boolean-ChannelPromise) to listOf(ChannelPromise:addListener(GenericFutureListener)),
		DefaultHttp2ConnectionEncoder$FlowControlledBase:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), DefaultHttp2ConnectionEncoder$FlowControlledBase:error(Throwable)),
		DefaultHttp2ConnectionEncoder$FlowControlledBase:operationComplete(Future) to listOf(DefaultHttp2ConnectionEncoder$FlowControlledBase:operationComplete(ChannelFuture)),
		CompressorHttp2ConnectionEncoder$1:<init>() to listOf(Http2ConnectionAdapter:<init>()),
		CompressorHttp2ConnectionEncoder$1:streamRemoved(Http2Stream) to listOf(Http2Stream:getProperty(Object), CompressorHttp2ConnectionEncoder:access$000(Http2Stream-EmbeddedChannel)),
		DefaultHttp2FrameReader$1:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-short-boolean-int-Http2Flags) to listOf(DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader-DefaultHttp2FrameReader$1)),
		DefaultHttp2FrameReader$1:processFragment(boolean-ByteBuf-Http2FrameListener) to listOf(DefaultHttp2FrameReader$1:headersBlockBuilder(), ChannelHandlerContext:alloc(), DefaultHttp2FrameReader$HeadersBlockBuilder:addFragment(ByteBuf-ByteBufAllocator-boolean), DefaultHttp2FrameReader$HeadersBlockBuilder:headers(), Http2Flags:endOfStream(), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), DefaultHttp2FrameReader$1:close()),
		Http2OrHttpChooser$SelectedProtocol:values() to listOf(Http2OrHttpChooser$SelectedProtocol[]:clone()),
		Http2OrHttpChooser$SelectedProtocol:protocol(String) to listOf(Http2OrHttpChooser$SelectedProtocol:values(), Http2OrHttpChooser$SelectedProtocol:protocolName()),
		Http2OrHttpChooser$SelectedProtocol:<clinit>() to listOf(Http2OrHttpChooser$SelectedProtocol:<init>(String-int-String), Http2OrHttpChooser$SelectedProtocol:<init>(String-int-String), Http2OrHttpChooser$SelectedProtocol:<init>(String-int-String), Http2OrHttpChooser$SelectedProtocol:<init>(String-int-String)),
		DefaultHttp2HeaderTableListSize:maxHeaderListSize(int) to listOf(Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2RemoteFlowController$2:<init>(DefaultHttp2RemoteFlowController) to listOf(Http2ConnectionAdapter:<init>()),
		DefaultHttp2RemoteFlowController$2:streamAdded(Http2Stream) to listOf(DefaultHttp2RemoteFlowController$FlowState:<init>(DefaultHttp2RemoteFlowController-Http2Stream-int), Http2Stream:setProperty(Object-Object)),
		DefaultHttp2RemoteFlowController$2:streamActive(Http2Stream) to listOf(DefaultHttp2RemoteFlowController:access$100(Http2Stream), DefaultHttp2RemoteFlowController:access$000(DefaultHttp2RemoteFlowController), DefaultHttp2RemoteFlowController$FlowState:window(int)),
		DefaultHttp2RemoteFlowController$2:streamInactive(Http2Stream) to listOf(DefaultHttp2RemoteFlowController:access$100(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:clear()),
		DefaultHttp2RemoteFlowController$2:priorityTreeParentChanged(Http2Stream-Http2Stream) to listOf(Http2Stream:parent(), DefaultHttp2RemoteFlowController:access$100(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:streamableBytesForTree(), DefaultHttp2RemoteFlowController:access$100(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:incrementStreamableBytesForTree(int)),
		DefaultHttp2RemoteFlowController$2:priorityTreeParentChanging(Http2Stream-Http2Stream) to listOf(Http2Stream:parent(), DefaultHttp2RemoteFlowController:access$100(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:streamableBytesForTree(), DefaultHttp2RemoteFlowController:access$100(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:incrementStreamableBytesForTree(int)),
		DefaultHttp2LocalFlowController:<init>(Http2Connection-Http2FrameWriter) to listOf(DefaultHttp2LocalFlowController:<init>(Http2Connection-Http2FrameWriter-float)),
		DefaultHttp2LocalFlowController:<init>(Http2Connection-Http2FrameWriter-float) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), DefaultHttp2LocalFlowController:windowUpdateRatio(float), Http2Connection:connectionStream(), DefaultHttp2LocalFlowController$FlowState:<init>(DefaultHttp2LocalFlowController-Http2Stream-int), Http2Stream:setProperty(Object-Object), DefaultHttp2LocalFlowController$1:<init>(DefaultHttp2LocalFlowController), Http2Connection:addListener(Http2Connection$Listener)),
		DefaultHttp2LocalFlowController:initialWindowSize(int) to listOf(Http2Connection:activeStreams(), DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:incrementFlowControlWindows(int), DefaultHttp2LocalFlowController$FlowState:incrementInitialStreamWindow(int), Http2Exception$StreamException:error(), Http2Exception$CompositeStreamException:<init>(Http2Error-int), Http2Exception$CompositeStreamException:add(Http2Exception$StreamException)),
		DefaultHttp2LocalFlowController:windowSize(Http2Stream) to listOf(DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:window()),
		DefaultHttp2LocalFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:incrementInitialStreamWindow(int), DefaultHttp2LocalFlowController$FlowState:writeWindowUpdateIfNeeded(ChannelHandlerContext)),
		DefaultHttp2LocalFlowController:consumeBytes(ChannelHandlerContext-Http2Stream-int) to listOf(DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:consumeBytes(ChannelHandlerContext-int)),
		DefaultHttp2LocalFlowController:unconsumedBytes(Http2Stream) to listOf(DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:unconsumedBytes()),
		DefaultHttp2LocalFlowController:windowUpdateRatio(float) to listOf(DefaultHttp2LocalFlowController:checkValidRatio(float)),
		DefaultHttp2LocalFlowController:windowUpdateRatio(ChannelHandlerContext-Http2Stream-float) to listOf(DefaultHttp2LocalFlowController:checkValidRatio(float), DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:windowUpdateRatio(float), DefaultHttp2LocalFlowController$FlowState:writeWindowUpdateIfNeeded(ChannelHandlerContext)),
		DefaultHttp2LocalFlowController:windowUpdateRatio(Http2Stream) to listOf(DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:windowUpdateRatio()),
		DefaultHttp2LocalFlowController:receiveFlowControlledFrame(ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean) to listOf(ByteBuf:readableBytes(), DefaultHttp2LocalFlowController:connectionState(), DefaultHttp2LocalFlowController$FlowState:receiveFlowControlledFrame(int), DefaultHttp2LocalFlowController:state(Http2Stream), DefaultHttp2LocalFlowController$FlowState:endOfStream(boolean), DefaultHttp2LocalFlowController$FlowState:receiveFlowControlledFrame(int)),
		DefaultHttp2LocalFlowController:connectionState() to listOf(Http2Connection:connectionStream(), DefaultHttp2LocalFlowController:state(Http2Stream)),
		DefaultHttp2LocalFlowController:state(Http2Stream) to listOf(ObjectUtil:checkNotNull(Object-String), Http2Stream:getProperty(Object)),
		DefaultHttp2LocalFlowController:access$100(DefaultHttp2LocalFlowController-Http2Stream) to listOf(DefaultHttp2LocalFlowController:state(Http2Stream)),
		DefaultHttp2LocalFlowController:access$300(DefaultHttp2LocalFlowController) to listOf(DefaultHttp2LocalFlowController:connectionState()),
		Http2Stream$State:values() to listOf(Http2Stream$State[]:clone()),
		Http2Stream$State:<clinit>() to listOf(Http2Stream$State:<init>(String-int), Http2Stream$State:<init>(String-int), Http2Stream$State:<init>(String-int), Http2Stream$State:<init>(String-int), Http2Stream$State:<init>(String-int), Http2Stream$State:<init>(String-int), Http2Stream$State:<init>(String-int)),
		Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor) to listOf(DefaultChannelPromise:<init>(Channel-EventExecutor)),
		Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises() to listOf(ChannelPromise:setSuccess(), DefaultChannelPromise:setSuccess()),
		Http2CodecUtil$SimpleChannelPromiseAggregator:tryFailure(Throwable) to listOf(Http2CodecUtil$SimpleChannelPromiseAggregator:allowNotificationEvent(), ChannelPromise:tryFailure(Throwable), DefaultChannelPromise:tryFailure(Throwable)),
		Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable) to listOf(Http2CodecUtil$SimpleChannelPromiseAggregator:allowNotificationEvent(), ChannelPromise:setFailure(Throwable), DefaultChannelPromise:setFailure(Throwable), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable)),
		Http2CodecUtil$SimpleChannelPromiseAggregator:setSuccess(Void) to listOf(Http2CodecUtil$SimpleChannelPromiseAggregator:allowNotificationEvent(), ChannelPromise:setSuccess(Void), DefaultChannelPromise:setSuccess(Void)),
		Http2CodecUtil$SimpleChannelPromiseAggregator:trySuccess(Void) to listOf(Http2CodecUtil$SimpleChannelPromiseAggregator:allowNotificationEvent(), ChannelPromise:trySuccess(Object), DefaultChannelPromise:trySuccess(Object)),
		Http2CodecUtil$SimpleChannelPromiseAggregator:trySuccess(Object) to listOf(Http2CodecUtil$SimpleChannelPromiseAggregator:trySuccess(Void)),
		Http2CodecUtil$SimpleChannelPromiseAggregator:setSuccess(Object) to listOf(Http2CodecUtil$SimpleChannelPromiseAggregator:setSuccess(Void)),
		InboundHttp2ToHttpPriorityAdapter$Builder:<init>(Http2Connection) to listOf(InboundHttp2ToHttpAdapter$Builder:<init>(Http2Connection)),
		InboundHttp2ToHttpPriorityAdapter$Builder:build() to listOf(InboundHttp2ToHttpPriorityAdapter:<init>(InboundHttp2ToHttpPriorityAdapter$Builder), Http2Connection:addListener(Http2Connection$Listener), InboundHttp2ToHttpPriorityAdapter$Builder:build()),
		HttpUtil$ExtensionHeaderNames:values() to listOf(HttpUtil$ExtensionHeaderNames[]:clone()),
		HttpUtil$ExtensionHeaderNames:<init>(String-int-String) to listOf(AsciiString:<init>(CharSequence)),
		HttpUtil$ExtensionHeaderNames:<clinit>() to listOf(HttpUtil$ExtensionHeaderNames:<init>(String-int-String), HttpUtil$ExtensionHeaderNames:<init>(String-int-String), HttpUtil$ExtensionHeaderNames:<init>(String-int-String), HttpUtil$ExtensionHeaderNames:<init>(String-int-String), HttpUtil$ExtensionHeaderNames:<init>(String-int-String), HttpUtil$ExtensionHeaderNames:<init>(String-int-String), HttpUtil$ExtensionHeaderNames:<init>(String-int-String)),
		Http2ServerUpgradeCodec:<init>(Http2ConnectionHandler) to listOf(Http2ServerUpgradeCodec:<init>(String-Http2ConnectionHandler)),
		Http2ServerUpgradeCodec:<init>(String-Http2ConnectionHandler) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), DefaultHttp2FrameReader:<init>()),
		Http2ServerUpgradeCodec:prepareUpgradeResponse(ChannelHandlerContext-FullHttpRequest-FullHttpResponse) to listOf(FullHttpRequest:headers(), HttpHeaders:getAll(Object), Http2ServerUpgradeCodec:decodeSettingsHeader(ChannelHandlerContext-CharSequence), Http2ConnectionHandler:onHttpServerUpgrade(Http2Settings), FullHttpResponse:setStatus(HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:clear()),
		Http2ServerUpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpRequest-FullHttpResponse) to listOf(ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler)),
		Http2ServerUpgradeCodec:decodeSettingsHeader(ChannelHandlerContext-CharSequence) to listOf(AsciiString:getBytes(CharSequence-Charset), Unpooled:wrappedBuffer(byte[]), Base64:decode(ByteBuf-Base64Dialect), Http2ServerUpgradeCodec:createSettingsFrame(ChannelHandlerContext-ByteBuf), Http2ServerUpgradeCodec:decodeSettings(ChannelHandlerContext-ByteBuf), ByteBuf:release(), ByteBuf:release()),
		Http2ServerUpgradeCodec:decodeSettings(ChannelHandlerContext-ByteBuf) to listOf(Http2Settings:<init>(), Http2ServerUpgradeCodec$1:<init>(Http2ServerUpgradeCodec-Http2Settings), Http2FrameReader:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), ByteBuf:release(), ByteBuf:release()),
		Http2ServerUpgradeCodec:createSettingsFrame(ChannelHandlerContext-ByteBuf) to listOf(ChannelHandlerContext:alloc(), ByteBuf:readableBytes(), ByteBufAllocator:buffer(int), ByteBuf:readableBytes(), Http2Flags:<init>(), Http2CodecUtil:writeFrameHeader(ByteBuf-int-byte-Http2Flags-int), ByteBuf:writeBytes(ByteBuf), ByteBuf:release()),
		InboundHttp2ToHttpPriorityAdapter:<init>(InboundHttp2ToHttpPriorityAdapter$Builder) to listOf(InboundHttp2ToHttpAdapter:<init>(InboundHttp2ToHttpAdapter$Builder), IntObjectHashMap:<init>()),
		InboundHttp2ToHttpPriorityAdapter:removeMessage(int) to listOf(InboundHttp2ToHttpAdapter:removeMessage(int), IntObjectMap:remove(int)),
		InboundHttp2ToHttpPriorityAdapter:getActiveHeaders(FullHttpMessage) to listOf(FullHttpMessage:content(), ByteBuf:isReadable(), FullHttpMessage:trailingHeaders(), FullHttpMessage:headers()),
		InboundHttp2ToHttpPriorityAdapter:importOutOfMessageFlowHeaders(int-HttpHeaders) to listOf(IntObjectMap:get(int), IntObjectMap:put(int-Object), HttpHeaders:setAll(TextHeaders)),
		InboundHttp2ToHttpPriorityAdapter:exportOutOfMessageFlowHeaders(int-HttpHeaders) to listOf(IntObjectMap:get(int), HttpHeaders:setAll(TextHeaders)),
		InboundHttp2ToHttpPriorityAdapter:removePriorityRelatedHeaders(HttpHeaders) to listOf(HttpUtil$ExtensionHeaderNames:text(), HttpHeaders:remove(Object), HttpUtil$ExtensionHeaderNames:text(), HttpHeaders:remove(Object)),
		InboundHttp2ToHttpPriorityAdapter:initializePseudoHeaders(Http2Headers) to listOf(Http2Connection:isServer(), Http2Headers:method(AsciiString), Http2Headers:path(AsciiString), Http2Headers:status(AsciiString)),
		InboundHttp2ToHttpPriorityAdapter:addHttpHeadersToHttp2Headers(HttpHeaders-Http2Headers) to listOf(InboundHttp2ToHttpPriorityAdapter$1:<init>(Http2Headers), HttpHeaders:forEachEntry(Headers$EntryVisitor), PlatformDependent:throwException(Throwable)),
		InboundHttp2ToHttpPriorityAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int) to listOf(InboundHttp2ToHttpPriorityAdapter:getActiveHeaders(FullHttpMessage), InboundHttp2ToHttpPriorityAdapter:exportOutOfMessageFlowHeaders(int-HttpHeaders), InboundHttp2ToHttpAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int)),
		InboundHttp2ToHttpPriorityAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean) to listOf(InboundHttp2ToHttpAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean), InboundHttp2ToHttpPriorityAdapter:getActiveHeaders(FullHttpMessage), InboundHttp2ToHttpPriorityAdapter:exportOutOfMessageFlowHeaders(int-HttpHeaders)),
		InboundHttp2ToHttpPriorityAdapter:priorityTreeParentChanged(Http2Stream-Http2Stream) to listOf(Http2Stream:parent(), Http2Stream:id(), IntObjectMap:get(int), Http2Connection:connectionStream(), DefaultHttpHeaders:<init>(), HttpUtil$ExtensionHeaderNames:text(), Http2Stream:id(), HttpHeaders:setInt(CharSequence-int), Http2Stream:id(), InboundHttp2ToHttpPriorityAdapter:importOutOfMessageFlowHeaders(int-HttpHeaders), FullHttpMessage:headers(), InboundHttp2ToHttpPriorityAdapter:removePriorityRelatedHeaders(HttpHeaders), FullHttpMessage:trailingHeaders(), InboundHttp2ToHttpPriorityAdapter:removePriorityRelatedHeaders(HttpHeaders), Http2Connection:connectionStream(), InboundHttp2ToHttpPriorityAdapter:getActiveHeaders(FullHttpMessage), HttpUtil$ExtensionHeaderNames:text(), Http2Stream:id(), HttpHeaders:setInt(CharSequence-int)),
		InboundHttp2ToHttpPriorityAdapter:onWeightChanged(Http2Stream-short) to listOf(Http2Stream:id(), IntObjectMap:get(int), DefaultHttpHeaders:<init>(), Http2Stream:id(), InboundHttp2ToHttpPriorityAdapter:importOutOfMessageFlowHeaders(int-HttpHeaders), InboundHttp2ToHttpPriorityAdapter:getActiveHeaders(FullHttpMessage), HttpUtil$ExtensionHeaderNames:text(), Http2Stream:weight(), HttpHeaders:setShort(CharSequence-short)),
		InboundHttp2ToHttpPriorityAdapter:onPriorityRead(ChannelHandlerContext-int-int-short-boolean) to listOf(IntObjectMap:get(int), IntObjectMap:remove(int), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2Headers:<init>(), InboundHttp2ToHttpPriorityAdapter:initializePseudoHeaders(Http2Headers), InboundHttp2ToHttpPriorityAdapter:addHttpHeadersToHttp2Headers(HttpHeaders-Http2Headers), InboundHttp2ToHttpPriorityAdapter:newMessage(int-Http2Headers-boolean), InboundHttp2ToHttpPriorityAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int)),
		InboundHttp2ToHttpPriorityAdapter:<clinit>() to listOf(HttpMethod:toString(), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), HttpResponseStatus:toString(), AsciiString:<init>(CharSequence)),
		DefaultHttp2Connection$ParentChangedEvent:notifyListener(Http2Connection$Listener) to listOf(Http2Connection$Listener:priorityTreeParentChanged(Http2Stream-Http2Stream)),
		DelegatingDecompressorFrameListener:<init>(Http2Connection-Http2FrameListener) to listOf(DelegatingDecompressorFrameListener:<init>(Http2Connection-Http2FrameListener-boolean)),
		DelegatingDecompressorFrameListener:<init>(Http2Connection-Http2FrameListener-boolean) to listOf(Http2FrameListenerDecorator:<init>(Http2FrameListener), Http2Connection:addListener(Http2Connection$Listener)),
		DelegatingDecompressorFrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean) to listOf(Http2Connection:stream(int), DelegatingDecompressorFrameListener:decompressor(Http2Stream), Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), DelegatingDecompressorFrameListener$Http2Decompressor:decompressor(), ByteBuf:readableBytes(), DelegatingDecompressorFrameListener$Http2Decompressor:incrementCompressedBytes(int), ByteBuf:retain(), EmbeddedChannel:writeInbound(Object[]), DelegatingDecompressorFrameListener:nextReadableBuf(EmbeddedChannel), EmbeddedChannel:finish(), DelegatingDecompressorFrameListener:nextReadableBuf(EmbeddedChannel), Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), DelegatingDecompressorFrameListener$Http2Decompressor:incrementDecompressedByes(int), DelegatingDecompressorFrameListener$Http2Decompressor:incrementDecompressedByes(int), DelegatingDecompressorFrameListener:nextReadableBuf(EmbeddedChannel), EmbeddedChannel:finish(), DelegatingDecompressorFrameListener:nextReadableBuf(EmbeddedChannel), ByteBuf:readableBytes(), DelegatingDecompressorFrameListener$Http2Decompressor:incrementDecompressedByes(int), Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), ByteBuf:release(), ByteBuf:release(), ByteBuf:release(), DelegatingDecompressorFrameListener$Http2Decompressor:incrementProcessedBytes(int), DelegatingDecompressorFrameListener$Http2Decompressor:incrementProcessedBytes(int), DelegatingDecompressorFrameListener$Http2Decompressor:incrementProcessedBytes(int), Http2Stream:id(), Http2Stream:id(), Http2Exception:streamError(int-Http2Error-Throwable-String-Object[])),
		DelegatingDecompressorFrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean) to listOf(DelegatingDecompressorFrameListener:initDecompressor(int-Http2Headers-boolean), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean)),
		DelegatingDecompressorFrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean) to listOf(DelegatingDecompressorFrameListener:initDecompressor(int-Http2Headers-boolean), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean)),
		DelegatingDecompressorFrameListener:newContentDecompressor(AsciiString) to listOf(AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), EmbeddedChannel:<init>(ChannelHandler[]), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), EmbeddedChannel:<init>(ChannelHandler[])),
		DelegatingDecompressorFrameListener:initDecompressor(int-Http2Headers-boolean) to listOf(Http2Connection:stream(int), DelegatingDecompressorFrameListener:decompressor(Http2Stream), Http2Headers:get(Object), DelegatingDecompressorFrameListener:newContentDecompressor(AsciiString), DelegatingDecompressorFrameListener$Http2Decompressor:<init>(EmbeddedChannel), Http2Stream:setProperty(Object-Object), DelegatingDecompressorFrameListener:getTargetContentEncoding(AsciiString), AsciiString:equalsIgnoreCase(CharSequence), Http2Headers:remove(Object), Http2Headers:set(AsciiString-AsciiString), Http2Headers:remove(Object), Http2Connection:local(), Http2Connection:local(), Http2Connection$Endpoint:flowController(), DelegatingDecompressorFrameListener$ConsumedBytesConverter:<init>(Http2LocalFlowController), Http2Connection$Endpoint:flowController(Http2FlowController)),
		DelegatingDecompressorFrameListener:decompressor(Http2Stream) to listOf(Http2Stream:getProperty(Object)),
		DelegatingDecompressorFrameListener:cleanup(Http2Stream-DelegatingDecompressorFrameListener$Http2Decompressor) to listOf(DelegatingDecompressorFrameListener$Http2Decompressor:decompressor(), EmbeddedChannel:finish(), EmbeddedChannel:readInbound(), ByteBuf:release(), Http2Stream:removeProperty(Object)),
		DelegatingDecompressorFrameListener:nextReadableBuf(EmbeddedChannel) to listOf(EmbeddedChannel:readInbound(), ByteBuf:isReadable(), ByteBuf:release()),
		DelegatingDecompressorFrameListener:access$000(Http2Stream) to listOf(DelegatingDecompressorFrameListener:decompressor(Http2Stream)),
		DelegatingDecompressorFrameListener:access$100(Http2Stream-DelegatingDecompressorFrameListener$Http2Decompressor) to listOf(DelegatingDecompressorFrameListener:cleanup(Http2Stream-DelegatingDecompressorFrameListener$Http2Decompressor)),
		DelegatingDecompressorFrameListener:<clinit>() to listOf(DelegatingDecompressorFrameListener$1:<init>()),
		DefaultHttp2HeadersDecoder$1:addHeader(byte[]-byte[]-boolean) to listOf(AsciiString:<init>(byte[]-boolean), AsciiString:<init>(byte[]-boolean), Http2Headers:add(AsciiString-AsciiString)),
		DelegatingDecompressorFrameListener$1:<init>() to listOf(Http2ConnectionAdapter:<init>()),
		DelegatingDecompressorFrameListener$1:streamRemoved(Http2Stream) to listOf(DelegatingDecompressorFrameListener:access$000(Http2Stream), DelegatingDecompressorFrameListener:access$100(Http2Stream-DelegatingDecompressorFrameListener$Http2Decompressor)),
		Http2ServerUpgradeCodec$1:<init>(Http2ServerUpgradeCodec-Http2Settings) to listOf(Http2FrameAdapter:<init>()),
		Http2ServerUpgradeCodec$1:onSettingsRead(ChannelHandlerContext-Http2Settings) to listOf(Http2Settings:copyFrom(Http2Settings)),
		DelegatingDecompressorFrameListener$Http2Decompressor:<init>(DelegatingDecompressorFrameListener$Http2Decompressor) to listOf(DelegatingDecompressorFrameListener$Http2Decompressor:<init>(EmbeddedChannel)),
		DelegatingDecompressorFrameListener$Http2Decompressor:consumeProcessedBytes(int) to listOf(DelegatingDecompressorFrameListener$Http2Decompressor:incrementProcessedBytes(int), DelegatingDecompressorFrameListener$Http2Decompressor:incrementDecompressedByes(int), DelegatingDecompressorFrameListener$Http2Decompressor:incrementCompressedBytes(int)),
		DefaultHttp2Connection:<init>(boolean) to listOf(Http2CodecUtil:immediateRemovalPolicy(), DefaultHttp2Connection:<init>(boolean-Http2StreamRemovalPolicy)),
		DefaultHttp2Connection:<init>(boolean-Http2StreamRemovalPolicy) to listOf(IntObjectHashMap:<init>(), DefaultHttp2Connection$ConnectionStream:<init>(DefaultHttp2Connection), ObjectUtil:checkNotNull(Object-String), DefaultHttp2Connection$DefaultEndpoint:<init>(DefaultHttp2Connection-boolean), DefaultHttp2Connection$DefaultEndpoint:<init>(DefaultHttp2Connection-boolean), DefaultHttp2Connection$1:<init>(DefaultHttp2Connection), Http2StreamRemovalPolicy:setAction(Http2StreamRemovalPolicy$Action), DefaultHttp2Connection$ConnectionStream:id(), IntObjectMap:put(int-Object)),
		DefaultHttp2Connection:isServer() to listOf(DefaultHttp2Connection$DefaultEndpoint:isServer()),
		DefaultHttp2Connection:requireStream(int) to listOf(DefaultHttp2Connection:stream(int), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2Connection:stream(int) to listOf(IntObjectMap:get(int)),
		DefaultHttp2Connection:activeStreams() to listOf(DefaultHttp2Connection:activeStreams()),
		DefaultHttp2Connection:deactivate(Http2Stream) to listOf(DefaultHttp2Connection:deactivateInternal(DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection:isGoAway() to listOf(DefaultHttp2Connection:goAwaySent(), DefaultHttp2Connection:goAwayReceived()),
		DefaultHttp2Connection:createLocalStream(int) to listOf(DefaultHttp2Connection:local(), Http2Connection$Endpoint:createStream(int)),
		DefaultHttp2Connection:createRemoteStream(int) to listOf(DefaultHttp2Connection:remote(), Http2Connection$Endpoint:createStream(int)),
		DefaultHttp2Connection:goAwayReceived() to listOf(DefaultHttp2Connection$DefaultEndpoint:access$100(DefaultHttp2Connection$DefaultEndpoint)),
		DefaultHttp2Connection:goAwayReceived(int) to listOf(DefaultHttp2Connection$DefaultEndpoint:access$200(DefaultHttp2Connection$DefaultEndpoint-int)),
		DefaultHttp2Connection:goAwaySent() to listOf(DefaultHttp2Connection$DefaultEndpoint:access$100(DefaultHttp2Connection$DefaultEndpoint)),
		DefaultHttp2Connection:goAwaySent(int) to listOf(DefaultHttp2Connection$DefaultEndpoint:access$200(DefaultHttp2Connection$DefaultEndpoint-int)),
		DefaultHttp2Connection:removeStream(DefaultHttp2Connection$DefaultStream) to listOf(Http2Connection$Listener:streamRemoved(Http2Stream), DefaultHttp2Connection$DefaultStream:id(), IntObjectMap:remove(int), DefaultHttp2Connection$DefaultStream:parent(), DefaultHttp2Connection$DefaultStream:removeChild(DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection:activateInternal(DefaultHttp2Connection$DefaultStream) to listOf(DefaultHttp2Connection$DefaultStream:createdBy(), DefaultHttp2Connection$DefaultEndpoint:access$308(DefaultHttp2Connection$DefaultEndpoint), Http2Connection$Listener:streamActive(Http2Stream)),
		DefaultHttp2Connection:deactivateInternal(DefaultHttp2Connection$DefaultStream) to listOf(DefaultHttp2Connection$DefaultStream:createdBy(), DefaultHttp2Connection$DefaultEndpoint:access$310(DefaultHttp2Connection$DefaultEndpoint), Http2Connection$Listener:streamInactive(Http2Stream), Http2StreamRemovalPolicy:markForRemoval(Http2Stream)),
		DefaultHttp2Connection:newChildMap() to listOf(IntObjectHashMap:<init>(int)),
		DefaultHttp2Connection:notifyParentChanged(List) to listOf(DefaultHttp2Connection$ParentChangedEvent:notifyListener(Http2Connection$Listener)),
		DefaultHttp2Connection:notifyParentChanging(Http2Stream-Http2Stream) to listOf(Http2Connection$Listener:priorityTreeParentChanging(Http2Stream-Http2Stream)),
		DefaultHttp2Connection:access$000(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream) to listOf(DefaultHttp2Connection:removeStream(DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection:access$400() to listOf(DefaultHttp2Connection:newChildMap()),
		DefaultHttp2Connection:access$500(DefaultHttp2Connection-List) to listOf(DefaultHttp2Connection:notifyParentChanged(List)),
		DefaultHttp2Connection:access$600(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream) to listOf(DefaultHttp2Connection:activateInternal(DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection:access$700(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream) to listOf(DefaultHttp2Connection:deactivateInternal(DefaultHttp2Connection$DefaultStream)),
		DefaultHttp2Connection:access$1100(DefaultHttp2Connection-Http2Stream-Http2Stream) to listOf(DefaultHttp2Connection:notifyParentChanging(Http2Stream-Http2Stream)),
		DefaultHttp2FrameReader$4:<clinit>() to listOf(DefaultHttp2FrameReader$State:values(), DefaultHttp2FrameReader$State:ordinal(), DefaultHttp2FrameReader$State:ordinal(), DefaultHttp2FrameReader$State:ordinal()),
		DefaultHttp2LocalFlowController$FlowState:<init>(DefaultHttp2LocalFlowController-Http2Stream-int) to listOf(DefaultHttp2LocalFlowController$FlowState:window(int), DefaultHttp2LocalFlowController:access$200(DefaultHttp2LocalFlowController)),
		DefaultHttp2LocalFlowController$FlowState:incrementFlowControlWindows(int) to listOf(Http2Stream:id(), Http2Stream:id(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2LocalFlowController$FlowState:receiveFlowControlledFrame(int) to listOf(Http2Stream:id(), Http2Stream:id(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2LocalFlowController$FlowState:returnProcessedBytes(int) to listOf(Http2Stream:id(), Http2Stream:id(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2LocalFlowController$FlowState:consumeBytes(ChannelHandlerContext-int) to listOf(Http2Stream:id(), DefaultHttp2LocalFlowController:access$300(DefaultHttp2LocalFlowController), DefaultHttp2LocalFlowController$FlowState:returnProcessedBytes(int), DefaultHttp2LocalFlowController$FlowState:writeWindowUpdateIfNeeded(ChannelHandlerContext), DefaultHttp2LocalFlowController$FlowState:returnProcessedBytes(int), DefaultHttp2LocalFlowController$FlowState:writeWindowUpdateIfNeeded(ChannelHandlerContext)),
		DefaultHttp2LocalFlowController$FlowState:writeWindowUpdateIfNeeded(ChannelHandlerContext) to listOf(DefaultHttp2LocalFlowController$FlowState:writeWindowUpdate(ChannelHandlerContext)),
		DefaultHttp2LocalFlowController$FlowState:writeWindowUpdate(ChannelHandlerContext) to listOf(DefaultHttp2LocalFlowController$FlowState:incrementFlowControlWindows(int), Http2Stream:id(), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), DefaultHttp2LocalFlowController:access$400(DefaultHttp2LocalFlowController), Http2Stream:id(), ChannelHandlerContext:newPromise(), Http2FrameWriter:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise), ChannelHandlerContext:flush()),
		HttpUtil$1:<init>() to listOf(HttpUtil$1:add(Object), HttpUtil$1:add(Object), HttpUtil$1:add(Object), HttpUtil$1:add(Object), HttpUtil$1:add(Object), HttpUtil$1:add(Object), HttpUtil$ExtensionHeaderNames:text(), HttpUtil$1:add(Object), HttpUtil$ExtensionHeaderNames:text(), HttpUtil$1:add(Object), HttpUtil$ExtensionHeaderNames:text(), HttpUtil$1:add(Object), HttpUtil$ExtensionHeaderNames:text(), HttpUtil$1:add(Object)),
		Http2CodecUtil:connectionPrefaceBuf() to listOf(Unpooled:wrappedBuffer(byte[])),
		Http2CodecUtil:emptyPingBuf() to listOf(Unpooled:wrappedBuffer(byte[])),
		Http2CodecUtil:immediateRemovalPolicy() to listOf(Http2CodecUtil$1:<init>()),
		Http2CodecUtil:toByteBuf(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(byte[])),
		Http2CodecUtil:readUnsignedInt(ByteBuf) to listOf(ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte()),
		Http2CodecUtil:writeUnsignedInt(long-ByteBuf) to listOf(ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int)),
		Http2CodecUtil:writeUnsignedShort(int-ByteBuf) to listOf(ByteBuf:writeByte(int), ByteBuf:writeByte(int)),
		Http2CodecUtil:writeFrameHeader(ByteBuf-int-byte-Http2Flags-int) to listOf(ByteBuf:ensureWritable(int), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int)),
		Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int) to listOf(ByteBuf:writeMedium(int), ByteBuf:writeByte(int), Http2Flags:value(), ByteBuf:writeByte(int), ByteBuf:writeInt(int)),
		Http2CodecUtil:failAndThrow(ChannelPromise-Throwable) to listOf(ChannelPromise:isDone(), ChannelPromise:setFailure(Throwable)),
		Http2NoMoreStreamIdsException:<init>() to listOf(Http2Exception:<init>(Http2Error-String)),
		Http2NoMoreStreamIdsException:<init>(Throwable) to listOf(Http2Exception:<init>(Http2Error-String-Throwable)),
		DefaultHttp2ConnectionDecoder:newBuilder() to listOf(DefaultHttp2ConnectionDecoder$Builder:<init>()),
		DefaultHttp2ConnectionDecoder:<init>(DefaultHttp2ConnectionDecoder$Builder) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:<init>(DefaultHttp2ConnectionDecoder-DefaultHttp2ConnectionDecoder$1), DefaultHttp2ConnectionDecoder$Builder:access$100(DefaultHttp2ConnectionDecoder$Builder), ObjectUtil:checkNotNull(Object-String), DefaultHttp2ConnectionDecoder$Builder:access$200(DefaultHttp2ConnectionDecoder$Builder), ObjectUtil:checkNotNull(Object-String), DefaultHttp2ConnectionDecoder$Builder:access$300(DefaultHttp2ConnectionDecoder$Builder), ObjectUtil:checkNotNull(Object-String), DefaultHttp2ConnectionDecoder$Builder:access$400(DefaultHttp2ConnectionDecoder$Builder), ObjectUtil:checkNotNull(Object-String), DefaultHttp2ConnectionDecoder$Builder:access$500(DefaultHttp2ConnectionDecoder$Builder), ObjectUtil:checkNotNull(Object-String), Http2Connection:local(), Http2Connection$Endpoint:flowController(), Http2Connection:local(), Http2ConnectionEncoder:frameWriter(), DefaultHttp2LocalFlowController:<init>(Http2Connection-Http2FrameWriter), Http2Connection$Endpoint:flowController(Http2FlowController)),
		DefaultHttp2ConnectionDecoder:flowController() to listOf(Http2Connection:local(), Http2Connection$Endpoint:flowController()),
		DefaultHttp2ConnectionDecoder:decodeFrame(ChannelHandlerContext-ByteBuf-List) to listOf(Http2FrameReader:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener)),
		DefaultHttp2ConnectionDecoder:localSettings() to listOf(Http2Settings:<init>(), Http2FrameReader:configuration(), Http2FrameReader$Configuration:headerTable(), Http2FrameReader$Configuration:frameSizePolicy(), DefaultHttp2ConnectionDecoder:flowController(), Http2LocalFlowController:initialWindowSize(), Http2Settings:initialWindowSize(int), Http2Connection:remote(), Http2Connection$Endpoint:maxStreams(), Http2Settings:maxConcurrentStreams(long), Http2HeaderTable:maxHeaderTableSize(), Http2Settings:headerTableSize(int), Http2FrameSizePolicy:maxFrameSize(), Http2Settings:maxFrameSize(int), Http2HeaderTable:maxHeaderListSize(), Http2Settings:maxHeaderListSize(int), Http2Connection:isServer(), Http2Connection:local(), Http2Connection$Endpoint:allowPushTo(), Http2Settings:pushEnabled(boolean)),
		DefaultHttp2ConnectionDecoder:localSettings(Http2Settings) to listOf(Http2Settings:pushEnabled(), Http2FrameReader:configuration(), Http2FrameReader$Configuration:headerTable(), Http2FrameReader$Configuration:frameSizePolicy(), Http2Connection:isServer(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Connection:local(), Http2Connection$Endpoint:allowPushTo(boolean), Http2Settings:maxConcurrentStreams(), Http2Connection:remote(), Http2Connection$Endpoint:maxStreams(int), Http2Settings:headerTableSize(), Http2HeaderTable:maxHeaderTableSize(int), Http2Settings:maxHeaderListSize(), Http2HeaderTable:maxHeaderListSize(int), Http2Settings:maxFrameSize(), Http2FrameSizePolicy:maxFrameSize(int), Http2Settings:initialWindowSize(), DefaultHttp2ConnectionDecoder:flowController(), Http2LocalFlowController:initialWindowSize(int)),
		DefaultHttp2ConnectionDecoder:close() to listOf(Http2FrameReader:close()),
		DefaultHttp2ConnectionDecoder:unconsumedBytes(Http2Stream) to listOf(DefaultHttp2ConnectionDecoder:flowController(), Http2LocalFlowController:unconsumedBytes(Http2Stream)),
		DefaultHttp2ConnectionDecoder:access$700(DefaultHttp2ConnectionDecoder-Http2Stream) to listOf(DefaultHttp2ConnectionDecoder:unconsumedBytes(Http2Stream)),
		Http2InboundFrameLogger:<init>(Http2FrameReader-Http2FrameLogger) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String)),
		Http2InboundFrameLogger:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(Http2InboundFrameLogger$1:<init>(Http2InboundFrameLogger-Http2FrameListener), Http2FrameReader:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener)),
		Http2InboundFrameLogger:close() to listOf(Http2FrameReader:close()),
		Http2InboundFrameLogger:configuration() to listOf(Http2FrameReader:configuration()),
		DefaultHttp2Connection$LazyPropertyMap:put(Object-Object) to listOf(DefaultHttp2Connection$DefaultProperyMap:<init>(int), DefaultHttp2Connection$DefaultStream:access$1202(DefaultHttp2Connection$DefaultStream-DefaultHttp2Connection$PropertyMap), DefaultHttp2Connection$DefaultStream:access$1200(DefaultHttp2Connection$DefaultStream), DefaultHttp2Connection$PropertyMap:put(Object-Object)),
		DefaultHttp2Connection$LazyPropertyMap:get(Object) to listOf(DefaultHttp2Connection$DefaultProperyMap:<init>(int), DefaultHttp2Connection$DefaultStream:access$1202(DefaultHttp2Connection$DefaultStream-DefaultHttp2Connection$PropertyMap), DefaultHttp2Connection$DefaultStream:access$1200(DefaultHttp2Connection$DefaultStream), DefaultHttp2Connection$PropertyMap:get(Object)),
		DefaultHttp2Connection$LazyPropertyMap:remove(Object) to listOf(DefaultHttp2Connection$DefaultProperyMap:<init>(int), DefaultHttp2Connection$DefaultStream:access$1202(DefaultHttp2Connection$DefaultStream-DefaultHttp2Connection$PropertyMap), DefaultHttp2Connection$DefaultStream:access$1200(DefaultHttp2Connection$DefaultStream), DefaultHttp2Connection$PropertyMap:remove(Object)),
		DefaultHttp2ConnectionEncoder$Builder:build() to listOf(DefaultHttp2ConnectionEncoder:<init>(DefaultHttp2ConnectionEncoder$Builder)),
		DefaultHttp2ConnectionEncoder$Builder:frameWriter(Http2FrameWriter) to listOf(DefaultHttp2ConnectionEncoder$Builder:frameWriter(Http2FrameWriter)),
		DefaultHttp2ConnectionEncoder$Builder:lifecycleManager(Http2LifecycleManager) to listOf(DefaultHttp2ConnectionEncoder$Builder:lifecycleManager(Http2LifecycleManager)),
		DefaultHttp2ConnectionEncoder$Builder:connection(Http2Connection) to listOf(DefaultHttp2ConnectionEncoder$Builder:connection(Http2Connection)),
		Http2ConnectionHandler:<init>(boolean-Http2FrameListener) to listOf(DefaultHttp2Connection:<init>(boolean), Http2ConnectionHandler:<init>(Http2Connection-Http2FrameListener)),
		Http2ConnectionHandler:<init>(Http2Connection-Http2FrameListener) to listOf(DefaultHttp2FrameReader:<init>(), DefaultHttp2FrameWriter:<init>(), Http2ConnectionHandler:<init>(Http2Connection-Http2FrameReader-Http2FrameWriter-Http2FrameListener)),
		Http2ConnectionHandler:<init>(Http2Connection-Http2FrameReader-Http2FrameWriter-Http2FrameListener) to listOf(DefaultHttp2ConnectionDecoder:newBuilder(), DefaultHttp2ConnectionDecoder$Builder:connection(Http2Connection), DefaultHttp2ConnectionDecoder$Builder:frameReader(Http2FrameReader), DefaultHttp2ConnectionDecoder$Builder:listener(Http2FrameListener), DefaultHttp2ConnectionEncoder:newBuilder(), DefaultHttp2ConnectionEncoder$Builder:connection(Http2Connection), DefaultHttp2ConnectionEncoder$Builder:frameWriter(Http2FrameWriter), Http2ConnectionHandler:<init>(Http2ConnectionDecoder$Builder-Http2ConnectionEncoder$Builder)),
		Http2ConnectionHandler:<init>(Http2ConnectionDecoder$Builder-Http2ConnectionEncoder$Builder) to listOf(ByteToMessageDecoder:<init>(), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), Http2ConnectionEncoder$Builder:lifecycleManager(), Http2ConnectionDecoder$Builder:lifecycleManager(), Http2ConnectionEncoder$Builder:lifecycleManager(), Http2ConnectionEncoder$Builder:lifecycleManager(Http2LifecycleManager), Http2ConnectionDecoder$Builder:lifecycleManager(Http2LifecycleManager), Http2ConnectionEncoder$Builder:build(), ObjectUtil:checkNotNull(Object-String), Http2ConnectionDecoder$Builder:encoder(Http2ConnectionEncoder), Http2ConnectionDecoder$Builder:build(), ObjectUtil:checkNotNull(Object-String), Http2ConnectionEncoder:connection(), ObjectUtil:checkNotNull(Object-String), Http2ConnectionEncoder:connection(), Http2ConnectionDecoder:connection(), Http2ConnectionEncoder:connection(), Http2ConnectionHandler:clientPrefaceString(Http2Connection)),
		Http2ConnectionHandler:connection() to listOf(Http2ConnectionEncoder:connection()),
		Http2ConnectionHandler:onHttpClientUpgrade() to listOf(Http2ConnectionHandler:connection(), Http2Connection:isServer(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2ConnectionDecoder:prefaceReceived(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2ConnectionHandler:connection(), Http2Connection:createLocalStream(int), Http2Stream:open(boolean)),
		Http2ConnectionHandler:onHttpServerUpgrade(Http2Settings) to listOf(Http2ConnectionHandler:connection(), Http2Connection:isServer(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2ConnectionDecoder:prefaceReceived(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2ConnectionEncoder:remoteSettings(Http2Settings), Http2ConnectionHandler:connection(), Http2Connection:createRemoteStream(int), Http2Stream:open(boolean)),
		Http2ConnectionHandler:channelActive(ChannelHandlerContext) to listOf(Http2ConnectionHandler:sendPreface(ChannelHandlerContext), ByteToMessageDecoder:channelActive(ChannelHandlerContext)),
		Http2ConnectionHandler:handlerAdded(ChannelHandlerContext) to listOf(Http2ConnectionHandler:sendPreface(ChannelHandlerContext)),
		Http2ConnectionHandler:handlerRemoved0(ChannelHandlerContext) to listOf(Http2ConnectionHandler:dispose()),
		Http2ConnectionHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(ChannelPromise), Http2ConnectionHandler:writeGoAway(ChannelHandlerContext-Http2Exception), Http2ConnectionHandler:connection(), Http2Connection:numActiveStreams(), Http2ConnectionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), Http2ConnectionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise)),
		Http2ConnectionHandler:channelInactive(ChannelHandlerContext) to listOf(ChannelHandlerContext:newSucceededFuture(), Http2ConnectionHandler:connection(), Http2Connection:activeStreams(), Http2ConnectionHandler:closeStream(Http2Stream-ChannelFuture), ByteToMessageDecoder:channelInactive(ChannelHandlerContext)),
		Http2ConnectionHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(Http2CodecUtil:getEmbeddedHttp2Exception(Throwable), Http2ConnectionHandler:onException(ChannelHandlerContext-Throwable), ByteToMessageDecoder:exceptionCaught(ChannelHandlerContext-Throwable)),
		Http2ConnectionHandler:closeLocalSide(Http2Stream-ChannelFuture) to listOf(Http2Stream:state(), Http2Stream$State:ordinal(), Http2Stream:closeLocalSide(), Http2ConnectionHandler:closeStream(Http2Stream-ChannelFuture)),
		Http2ConnectionHandler:closeRemoteSide(Http2Stream-ChannelFuture) to listOf(Http2Stream:state(), Http2Stream$State:ordinal(), Http2Stream:closeRemoteSide(), Http2ConnectionHandler:closeStream(Http2Stream-ChannelFuture)),
		Http2ConnectionHandler:closeStream(Http2Stream-ChannelFuture) to listOf(Http2Stream:close(), Http2ConnectionHandler$1:<init>(Http2ConnectionHandler-Http2Stream), ChannelFuture:addListener(GenericFutureListener)),
		Http2ConnectionHandler:onException(ChannelHandlerContext-Throwable) to listOf(Http2CodecUtil:getEmbeddedHttp2Exception(Throwable), Http2Exception:isStreamError(Http2Exception), Http2ConnectionHandler:onStreamError(ChannelHandlerContext-Throwable-Http2Exception$StreamException), Http2Exception$CompositeStreamException:iterator(), Http2ConnectionHandler:onStreamError(ChannelHandlerContext-Throwable-Http2Exception$StreamException), Http2ConnectionHandler:onConnectionError(ChannelHandlerContext-Throwable-Http2Exception)),
		Http2ConnectionHandler:onConnectionError(ChannelHandlerContext-Throwable-Http2Exception) to listOf(Http2Exception:<init>(Http2Error-String-Throwable), Http2ConnectionHandler:writeGoAway(ChannelHandlerContext-Http2Exception), ChannelHandlerContext:newPromise(), Http2ConnectionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		Http2ConnectionHandler:onStreamError(ChannelHandlerContext-Throwable-Http2Exception$StreamException) to listOf(Http2Exception$StreamException:streamId(), Http2Exception$StreamException:error(), Http2Error:code(), ChannelHandlerContext:newPromise(), Http2ConnectionHandler:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise)),
		Http2ConnectionHandler:frameWriter() to listOf(Http2ConnectionHandler:encoder(), Http2ConnectionEncoder:frameWriter()),
		Http2ConnectionHandler:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise) to listOf(Http2ConnectionHandler:connection(), Http2Connection:stream(int), Http2ConnectionHandler:frameWriter(), Http2FrameWriter:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), ChannelHandlerContext:flush(), Http2Stream:resetSent(), Http2ConnectionHandler:closeStream(Http2Stream-ChannelFuture)),
		Http2ConnectionHandler:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise) to listOf(Http2ConnectionHandler:connection(), Http2Connection:isGoAway(), ByteBuf:release(), ChannelHandlerContext:newSucceededFuture(), Http2ConnectionHandler:frameWriter(), Http2FrameWriter:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise), ChannelHandlerContext:flush(), Http2Connection:goAwaySent(int)),
		Http2ConnectionHandler:writeGoAway(ChannelHandlerContext-Http2Exception) to listOf(Http2ConnectionHandler:connection(), Http2Connection:isGoAway(), ChannelHandlerContext:newSucceededFuture(), Http2Exception:error(), Http2Error:code(), Http2Error:code(), Http2CodecUtil:toByteBuf(ChannelHandlerContext-Throwable), Http2Connection:remote(), Http2Connection$Endpoint:lastStreamCreated(), ChannelHandlerContext:newPromise(), Http2ConnectionHandler:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise)),
		Http2ConnectionHandler:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Http2ConnectionHandler:readClientPrefaceString(ByteBuf), Http2ConnectionDecoder:decodeFrame(ChannelHandlerContext-ByteBuf-List), Http2ConnectionHandler:onException(ChannelHandlerContext-Throwable)),
		Http2ConnectionHandler:sendPreface(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), Http2ConnectionHandler:connection(), Http2Connection:isServer(), Http2CodecUtil:connectionPrefaceBuf(), ChannelHandlerContext:write(Object), ChannelFuture:addListener(GenericFutureListener), Http2ConnectionDecoder:localSettings(), ChannelHandlerContext:newPromise(), Http2ConnectionEncoder:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		Http2ConnectionHandler:dispose() to listOf(Http2ConnectionEncoder:close(), Http2ConnectionDecoder:close(), ByteBuf:release()),
		Http2ConnectionHandler:readClientPrefaceString(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:readSlice(int), ByteBuf:equals(Object), Http2Exception:connectionError(Http2Error-String-Object[]), ByteBuf:isReadable(), ByteBuf:release()),
		Http2ConnectionHandler:clientPrefaceString(Http2Connection) to listOf(Http2Connection:isServer(), Http2CodecUtil:connectionPrefaceBuf()),
		DefaultHttp2HeadersDecoder:<init>() to listOf(DefaultHttp2HeadersDecoder:<init>(int-int)),
		DefaultHttp2HeadersDecoder:<init>(int-int) to listOf(Decoder:<init>(int-int), DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:<init>(DefaultHttp2HeadersDecoder-DefaultHttp2HeadersDecoder$1)),
		DefaultHttp2HeadersDecoder:decodeHeaders(ByteBuf) to listOf(ByteBufInputStream:<init>(ByteBuf), DefaultHttp2Headers:<init>(), DefaultHttp2HeadersDecoder$1:<init>(DefaultHttp2HeadersDecoder-Http2Headers), Decoder:decode(InputStream-HeaderListener), Decoder:endHeaderBlock(), Http2Headers:size(), Http2HeaderTable:maxHeaderListSize(), Http2Headers:size(), Http2HeaderTable:maxHeaderListSize(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[])),
		DefaultHttp2FrameReader$3:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-int) to listOf(DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader-DefaultHttp2FrameReader$1)),
		DefaultHttp2FrameReader$3:processFragment(boolean-ByteBuf-Http2FrameListener) to listOf(DefaultHttp2FrameReader$3:headersBlockBuilder(), ChannelHandlerContext:alloc(), DefaultHttp2FrameReader$HeadersBlockBuilder:addFragment(ByteBuf-ByteBufAllocator-boolean), DefaultHttp2FrameReader$3:headersBlockBuilder(), DefaultHttp2FrameReader$HeadersBlockBuilder:headers(), Http2FrameListener:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int), DefaultHttp2FrameReader$3:close()),
		CompressorHttp2ConnectionEncoder:<init>(CompressorHttp2ConnectionEncoder$Builder) to listOf(DefaultHttp2ConnectionEncoder:<init>(DefaultHttp2ConnectionEncoder$Builder), CompressorHttp2ConnectionEncoder:connection(), Http2Connection:addListener(Http2Connection$Listener)),
		CompressorHttp2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise) to listOf(CompressorHttp2ConnectionEncoder:connection(), Http2Connection:stream(int), Http2Stream:getProperty(Object), DefaultHttp2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), EmbeddedChannel:writeOutbound(Object[]), CompressorHttp2ConnectionEncoder:nextReadableBuf(EmbeddedChannel), EmbeddedChannel:finish(), CompressorHttp2ConnectionEncoder:nextReadableBuf(EmbeddedChannel), DefaultHttp2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel), ChannelPromise:setSuccess(), CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel), ChannelPromiseAggregator:<init>(ChannelPromise), ChannelHandlerContext:newPromise(), ChannelPromiseAggregator:add(Promise[]), CompressorHttp2ConnectionEncoder:nextReadableBuf(EmbeddedChannel), EmbeddedChannel:finish(), CompressorHttp2ConnectionEncoder:nextReadableBuf(EmbeddedChannel), ChannelHandlerContext:newPromise(), ChannelPromiseAggregator:add(Promise[]), DefaultHttp2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel), CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel)),
		CompressorHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise) to listOf(CompressorHttp2ConnectionEncoder:initCompressor(int-Http2Headers-boolean), DefaultHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise)),
		CompressorHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise) to listOf(CompressorHttp2ConnectionEncoder:initCompressor(int-Http2Headers-boolean), DefaultHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise)),
		CompressorHttp2ConnectionEncoder:newContentCompressor(AsciiString) to listOf(AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), CompressorHttp2ConnectionEncoder:newCompressionChannel(ZlibWrapper), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), CompressorHttp2ConnectionEncoder:newCompressionChannel(ZlibWrapper)),
		CompressorHttp2ConnectionEncoder:newCompressionChannel(ZlibWrapper) to listOf(ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int), EmbeddedChannel:<init>(ChannelHandler[])),
		CompressorHttp2ConnectionEncoder:initCompressor(int-Http2Headers-boolean) to listOf(CompressorHttp2ConnectionEncoder:connection(), Http2Connection:stream(int), Http2Stream:getProperty(Object), Http2Headers:get(Object), CompressorHttp2ConnectionEncoder:newContentCompressor(AsciiString), Http2Stream:setProperty(Object-Object), CompressorHttp2ConnectionEncoder:getTargetContentEncoding(AsciiString), AsciiString:equalsIgnoreCase(CharSequence), Http2Headers:remove(Object), Http2Headers:set(AsciiString-AsciiString), CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel), Http2Headers:remove(Object)),
		CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel) to listOf(EmbeddedChannel:finish(), EmbeddedChannel:readOutbound(), ByteBuf:release(), Http2Stream:removeProperty(Object)),
		CompressorHttp2ConnectionEncoder:nextReadableBuf(EmbeddedChannel) to listOf(EmbeddedChannel:readOutbound(), ByteBuf:isReadable(), ByteBuf:release()),
		CompressorHttp2ConnectionEncoder:access$000(Http2Stream-EmbeddedChannel) to listOf(CompressorHttp2ConnectionEncoder:cleanup(Http2Stream-EmbeddedChannel)),
		CompressorHttp2ConnectionEncoder:<clinit>() to listOf(CompressorHttp2ConnectionEncoder$1:<init>()),
		DefaultHttp2Headers:<init>() to listOf(DefaultHttp2Headers:<init>(boolean)),
		DefaultHttp2Headers:<init>(boolean) to listOf(DefaultBinaryHeaders:<init>(boolean)),
		DefaultHttp2Headers:add(AsciiString-AsciiString) to listOf(DefaultBinaryHeaders:add(AsciiString-AsciiString), DefaultHttp2Headers:add(AsciiString-AsciiString)),
		DefaultHttp2Headers:add(AsciiString-Iterable) to listOf(DefaultBinaryHeaders:add(AsciiString-Iterable), DefaultHttp2Headers:add(AsciiString-Iterable)),
		DefaultHttp2Headers:add(AsciiString-AsciiString[]) to listOf(DefaultBinaryHeaders:add(AsciiString-AsciiString[]), DefaultHttp2Headers:add(AsciiString-AsciiString[])),
		DefaultHttp2Headers:addObject(AsciiString-Object) to listOf(DefaultBinaryHeaders:addObject(AsciiString-Object), DefaultHttp2Headers:addObject(AsciiString-Object)),
		DefaultHttp2Headers:addObject(AsciiString-Iterable) to listOf(DefaultBinaryHeaders:addObject(AsciiString-Iterable), DefaultHttp2Headers:addObject(AsciiString-Iterable)),
		DefaultHttp2Headers:addObject(AsciiString-Object[]) to listOf(DefaultBinaryHeaders:addObject(AsciiString-Object[]), DefaultHttp2Headers:addObject(AsciiString-Object[])),
		DefaultHttp2Headers:addBoolean(AsciiString-boolean) to listOf(DefaultBinaryHeaders:addBoolean(AsciiString-boolean), DefaultHttp2Headers:addBoolean(AsciiString-boolean)),
		DefaultHttp2Headers:addChar(AsciiString-char) to listOf(DefaultBinaryHeaders:addChar(AsciiString-char), DefaultHttp2Headers:addChar(AsciiString-char)),
		DefaultHttp2Headers:addByte(AsciiString-byte) to listOf(DefaultBinaryHeaders:addByte(AsciiString-byte), DefaultHttp2Headers:addByte(AsciiString-byte)),
		DefaultHttp2Headers:addShort(AsciiString-short) to listOf(DefaultBinaryHeaders:addShort(AsciiString-short), DefaultHttp2Headers:addShort(AsciiString-short)),
		DefaultHttp2Headers:addInt(AsciiString-int) to listOf(DefaultBinaryHeaders:addInt(AsciiString-int), DefaultHttp2Headers:addInt(AsciiString-int)),
		DefaultHttp2Headers:addLong(AsciiString-long) to listOf(DefaultBinaryHeaders:addLong(AsciiString-long), DefaultHttp2Headers:addLong(AsciiString-long)),
		DefaultHttp2Headers:addFloat(AsciiString-float) to listOf(DefaultBinaryHeaders:addFloat(AsciiString-float), DefaultHttp2Headers:addFloat(AsciiString-float)),
		DefaultHttp2Headers:addDouble(AsciiString-double) to listOf(DefaultBinaryHeaders:addDouble(AsciiString-double), DefaultHttp2Headers:addDouble(AsciiString-double)),
		DefaultHttp2Headers:addTimeMillis(AsciiString-long) to listOf(DefaultBinaryHeaders:addTimeMillis(AsciiString-long), DefaultHttp2Headers:addTimeMillis(AsciiString-long)),
		DefaultHttp2Headers:add(BinaryHeaders) to listOf(DefaultBinaryHeaders:add(BinaryHeaders), DefaultHttp2Headers:add(BinaryHeaders)),
		DefaultHttp2Headers:set(AsciiString-AsciiString) to listOf(DefaultBinaryHeaders:set(AsciiString-AsciiString), DefaultHttp2Headers:set(AsciiString-AsciiString)),
		DefaultHttp2Headers:set(AsciiString-Iterable) to listOf(DefaultBinaryHeaders:set(AsciiString-Iterable), DefaultHttp2Headers:set(AsciiString-Iterable)),
		DefaultHttp2Headers:set(AsciiString-AsciiString[]) to listOf(DefaultBinaryHeaders:set(AsciiString-AsciiString[]), DefaultHttp2Headers:set(AsciiString-AsciiString[])),
		DefaultHttp2Headers:setObject(AsciiString-Object) to listOf(DefaultBinaryHeaders:setObject(AsciiString-Object), DefaultHttp2Headers:setObject(AsciiString-Object)),
		DefaultHttp2Headers:setObject(AsciiString-Iterable) to listOf(DefaultBinaryHeaders:setObject(AsciiString-Iterable), DefaultHttp2Headers:setObject(AsciiString-Iterable)),
		DefaultHttp2Headers:setObject(AsciiString-Object[]) to listOf(DefaultBinaryHeaders:setObject(AsciiString-Object[]), DefaultHttp2Headers:setObject(AsciiString-Object[])),
		DefaultHttp2Headers:setBoolean(AsciiString-boolean) to listOf(DefaultBinaryHeaders:setBoolean(AsciiString-boolean), DefaultHttp2Headers:setBoolean(AsciiString-boolean)),
		DefaultHttp2Headers:setChar(AsciiString-char) to listOf(DefaultBinaryHeaders:setChar(AsciiString-char), DefaultHttp2Headers:setChar(AsciiString-char)),
		DefaultHttp2Headers:setByte(AsciiString-byte) to listOf(DefaultBinaryHeaders:setByte(AsciiString-byte), DefaultHttp2Headers:setByte(AsciiString-byte)),
		DefaultHttp2Headers:setShort(AsciiString-short) to listOf(DefaultBinaryHeaders:setShort(AsciiString-short), DefaultHttp2Headers:setShort(AsciiString-short)),
		DefaultHttp2Headers:setInt(AsciiString-int) to listOf(DefaultBinaryHeaders:setInt(AsciiString-int), DefaultHttp2Headers:setInt(AsciiString-int)),
		DefaultHttp2Headers:setLong(AsciiString-long) to listOf(DefaultBinaryHeaders:setLong(AsciiString-long), DefaultHttp2Headers:setLong(AsciiString-long)),
		DefaultHttp2Headers:setFloat(AsciiString-float) to listOf(DefaultBinaryHeaders:setFloat(AsciiString-float), DefaultHttp2Headers:setFloat(AsciiString-float)),
		DefaultHttp2Headers:setDouble(AsciiString-double) to listOf(DefaultBinaryHeaders:setDouble(AsciiString-double), DefaultHttp2Headers:setDouble(AsciiString-double)),
		DefaultHttp2Headers:setTimeMillis(AsciiString-long) to listOf(DefaultBinaryHeaders:setTimeMillis(AsciiString-long), DefaultHttp2Headers:setTimeMillis(AsciiString-long)),
		DefaultHttp2Headers:set(BinaryHeaders) to listOf(DefaultBinaryHeaders:set(BinaryHeaders), DefaultHttp2Headers:set(BinaryHeaders)),
		DefaultHttp2Headers:setAll(BinaryHeaders) to listOf(DefaultBinaryHeaders:setAll(BinaryHeaders), DefaultHttp2Headers:setAll(BinaryHeaders)),
		DefaultHttp2Headers:clear() to listOf(DefaultBinaryHeaders:clear(), DefaultHttp2Headers:clear(), DefaultHttp2Headers:clear()),
		DefaultHttp2Headers:method(AsciiString) to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:set(AsciiString-AsciiString)),
		DefaultHttp2Headers:scheme(AsciiString) to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:set(AsciiString-AsciiString)),
		DefaultHttp2Headers:authority(AsciiString) to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:set(AsciiString-AsciiString)),
		DefaultHttp2Headers:path(AsciiString) to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:set(AsciiString-AsciiString)),
		DefaultHttp2Headers:status(AsciiString) to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:set(AsciiString-AsciiString)),
		DefaultHttp2Headers:method() to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:get(Object)),
		DefaultHttp2Headers:scheme() to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:get(Object)),
		DefaultHttp2Headers:authority() to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:get(Object)),
		DefaultHttp2Headers:path() to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:get(Object)),
		DefaultHttp2Headers:status() to listOf(Http2Headers$PseudoHeaderName:value(), DefaultHttp2Headers:get(Object)),
		DefaultHttp2Headers:setTimeMillis(Object-long) to listOf(DefaultHttp2Headers:setTimeMillis(AsciiString-long)),
		DefaultHttp2Headers:setDouble(Object-double) to listOf(DefaultHttp2Headers:setDouble(AsciiString-double)),
		DefaultHttp2Headers:setFloat(Object-float) to listOf(DefaultHttp2Headers:setFloat(AsciiString-float)),
		DefaultHttp2Headers:setLong(Object-long) to listOf(DefaultHttp2Headers:setLong(AsciiString-long)),
		DefaultHttp2Headers:setInt(Object-int) to listOf(DefaultHttp2Headers:setInt(AsciiString-int)),
		DefaultHttp2Headers:setShort(Object-short) to listOf(DefaultHttp2Headers:setShort(AsciiString-short)),
		DefaultHttp2Headers:setChar(Object-char) to listOf(DefaultHttp2Headers:setChar(AsciiString-char)),
		DefaultHttp2Headers:setByte(Object-byte) to listOf(DefaultHttp2Headers:setByte(AsciiString-byte)),
		DefaultHttp2Headers:setBoolean(Object-boolean) to listOf(DefaultHttp2Headers:setBoolean(AsciiString-boolean)),
		DefaultHttp2Headers:setObject(Object-Object[]) to listOf(DefaultHttp2Headers:setObject(AsciiString-Object[])),
		DefaultHttp2Headers:setObject(Object-Iterable) to listOf(DefaultHttp2Headers:setObject(AsciiString-Iterable)),
		DefaultHttp2Headers:setObject(Object-Object) to listOf(DefaultHttp2Headers:setObject(AsciiString-Object)),
		DefaultHttp2Headers:set(Object-Object[]) to listOf(DefaultHttp2Headers:set(AsciiString-AsciiString[])),
		DefaultHttp2Headers:set(Object-Iterable) to listOf(DefaultHttp2Headers:set(AsciiString-Iterable)),
		DefaultHttp2Headers:set(Object-Object) to listOf(DefaultHttp2Headers:set(AsciiString-AsciiString)),
		DefaultHttp2Headers:addTimeMillis(Object-long) to listOf(DefaultHttp2Headers:addTimeMillis(AsciiString-long)),
		DefaultHttp2Headers:addDouble(Object-double) to listOf(DefaultHttp2Headers:addDouble(AsciiString-double)),
		DefaultHttp2Headers:addFloat(Object-float) to listOf(DefaultHttp2Headers:addFloat(AsciiString-float)),
		DefaultHttp2Headers:addLong(Object-long) to listOf(DefaultHttp2Headers:addLong(AsciiString-long)),
		DefaultHttp2Headers:addInt(Object-int) to listOf(DefaultHttp2Headers:addInt(AsciiString-int)),
		DefaultHttp2Headers:addShort(Object-short) to listOf(DefaultHttp2Headers:addShort(AsciiString-short)),
		DefaultHttp2Headers:addChar(Object-char) to listOf(DefaultHttp2Headers:addChar(AsciiString-char)),
		DefaultHttp2Headers:addByte(Object-byte) to listOf(DefaultHttp2Headers:addByte(AsciiString-byte)),
		DefaultHttp2Headers:addBoolean(Object-boolean) to listOf(DefaultHttp2Headers:addBoolean(AsciiString-boolean)),
		DefaultHttp2Headers:addObject(Object-Object[]) to listOf(DefaultHttp2Headers:addObject(AsciiString-Object[])),
		DefaultHttp2Headers:addObject(Object-Iterable) to listOf(DefaultHttp2Headers:addObject(AsciiString-Iterable)),
		DefaultHttp2Headers:addObject(Object-Object) to listOf(DefaultHttp2Headers:addObject(AsciiString-Object)),
		DefaultHttp2Headers:add(Object-Object[]) to listOf(DefaultHttp2Headers:add(AsciiString-AsciiString[])),
		DefaultHttp2Headers:add(Object-Iterable) to listOf(DefaultHttp2Headers:add(AsciiString-Iterable)),
		DefaultHttp2Headers:add(Object-Object) to listOf(DefaultHttp2Headers:add(AsciiString-AsciiString)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:requireStream(int), DefaultHttp2ConnectionDecoder$FrameReadListener:verifyGoAwayNotReceived(), DefaultHttp2ConnectionDecoder$FrameReadListener:shouldIgnoreFrame(Http2Stream-boolean), Http2Stream:state(), Http2Stream$State:ordinal(), Http2Stream:id(), Http2Stream:id(), Http2Stream:state(), Http2Exception:streamError(int-Http2Error-String-Object[]), Http2Stream:id(), Http2Stream:id(), Http2Stream:state(), Http2Exception:streamError(int-Http2Error-String-Object[]), Http2Stream:id(), Http2Stream:id(), Http2Stream:state(), Http2Exception:streamError(int-Http2Error-String-Object[]), ByteBuf:readableBytes(), DefaultHttp2ConnectionDecoder:access$700(DefaultHttp2ConnectionDecoder-Http2Stream), DefaultHttp2ConnectionDecoder:flowController(), Http2LocalFlowController:receiveFlowControlledFrame(ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean), DefaultHttp2ConnectionDecoder:access$700(DefaultHttp2ConnectionDecoder-Http2Stream), Http2LocalFlowController:consumeBytes(ChannelHandlerContext-Http2Stream-int), DefaultHttp2ConnectionDecoder:access$900(DefaultHttp2ConnectionDecoder), ChannelHandlerContext:newSucceededFuture(), Http2LifecycleManager:closeRemoteSide(Http2Stream-ChannelFuture), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), Http2LocalFlowController:consumeBytes(ChannelHandlerContext-Http2Stream-int), DefaultHttp2ConnectionDecoder:access$900(DefaultHttp2ConnectionDecoder), ChannelHandlerContext:newSucceededFuture(), Http2LifecycleManager:closeRemoteSide(Http2Stream-ChannelFuture), DefaultHttp2ConnectionDecoder:access$700(DefaultHttp2ConnectionDecoder-Http2Stream), DefaultHttp2ConnectionDecoder:access$700(DefaultHttp2ConnectionDecoder-Http2Stream), Http2LocalFlowController:consumeBytes(ChannelHandlerContext-Http2Stream-int), DefaultHttp2ConnectionDecoder:access$900(DefaultHttp2ConnectionDecoder), ChannelHandlerContext:newSucceededFuture(), Http2LifecycleManager:closeRemoteSide(Http2Stream-ChannelFuture)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived() to listOf(DefaultHttp2ConnectionDecoder:access$1000(DefaultHttp2ConnectionDecoder), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:stream(int), DefaultHttp2ConnectionDecoder$FrameReadListener:verifyGoAwayNotReceived(), DefaultHttp2ConnectionDecoder$FrameReadListener:shouldIgnoreFrame(Http2Stream-boolean), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:createRemoteStream(int), Http2Stream:open(boolean), Http2Stream:state(), Http2Stream$State:ordinal(), Http2Stream:open(boolean), Http2Stream:id(), Http2Stream:id(), Http2Stream:state(), Http2Exception:streamError(int-Http2Error-String-Object[]), Http2Stream:id(), Http2Stream:state(), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean), Http2Stream:setPriority(int-short-boolean), DefaultHttp2ConnectionDecoder:access$900(DefaultHttp2ConnectionDecoder), ChannelHandlerContext:newSucceededFuture(), Http2LifecycleManager:closeRemoteSide(Http2Stream-ChannelFuture)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onPriorityRead(ChannelHandlerContext-int-int-short-boolean) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:stream(int), DefaultHttp2ConnectionDecoder$FrameReadListener:verifyGoAwayNotReceived(), DefaultHttp2ConnectionDecoder$FrameReadListener:shouldIgnoreFrame(Http2Stream-boolean), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:createRemoteStream(int), Http2Stream:setPriority(int-short-boolean), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onPriorityRead(ChannelHandlerContext-int-int-short-boolean)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onRstStreamRead(ChannelHandlerContext-int-long) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:requireStream(int), Http2Stream:state(), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onRstStreamRead(ChannelHandlerContext-int-long), DefaultHttp2ConnectionDecoder:access$900(DefaultHttp2ConnectionDecoder), ChannelHandlerContext:newSucceededFuture(), Http2LifecycleManager:closeStream(Http2Stream-ChannelFuture)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onSettingsAckRead(ChannelHandlerContext) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$1100(DefaultHttp2ConnectionDecoder), Http2ConnectionEncoder:pollSentSettings(), DefaultHttp2ConnectionDecoder$FrameReadListener:applyLocalSettings(Http2Settings), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onSettingsAckRead(ChannelHandlerContext)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:applyLocalSettings(Http2Settings) to listOf(Http2Settings:pushEnabled(), DefaultHttp2ConnectionDecoder:access$1200(DefaultHttp2ConnectionDecoder), Http2FrameReader:configuration(), Http2FrameReader$Configuration:headerTable(), Http2FrameReader$Configuration:frameSizePolicy(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:isServer(), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:local(), Http2Connection$Endpoint:allowPushTo(boolean), Http2Settings:maxConcurrentStreams(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:remote(), Http2Connection$Endpoint:maxStreams(int), Http2Settings:headerTableSize(), Http2HeaderTable:maxHeaderTableSize(int), Http2Settings:maxHeaderListSize(), Http2HeaderTable:maxHeaderListSize(int), Http2Settings:maxFrameSize(), Http2FrameSizePolicy:maxFrameSize(int), Http2Settings:initialWindowSize(), DefaultHttp2ConnectionDecoder:flowController(), Http2LocalFlowController:initialWindowSize(int)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onSettingsRead(ChannelHandlerContext-Http2Settings) to listOf(DefaultHttp2ConnectionDecoder:access$1100(DefaultHttp2ConnectionDecoder), Http2ConnectionEncoder:remoteSettings(Http2Settings), DefaultHttp2ConnectionDecoder:access$1100(DefaultHttp2ConnectionDecoder), ChannelHandlerContext:newPromise(), Http2ConnectionEncoder:writeSettingsAck(ChannelHandlerContext-ChannelPromise), DefaultHttp2ConnectionDecoder:access$1002(DefaultHttp2ConnectionDecoder-boolean), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onSettingsRead(ChannelHandlerContext-Http2Settings)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onPingRead(ChannelHandlerContext-ByteBuf) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$1100(DefaultHttp2ConnectionDecoder), ByteBuf:retain(), ChannelHandlerContext:newPromise(), Http2ConnectionEncoder:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise), ChannelHandlerContext:flush(), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onPingRead(ChannelHandlerContext-ByteBuf)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onPingAckRead(ChannelHandlerContext-ByteBuf) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onPingAckRead(ChannelHandlerContext-ByteBuf)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:requireStream(int), DefaultHttp2ConnectionDecoder$FrameReadListener:verifyGoAwayNotReceived(), DefaultHttp2ConnectionDecoder$FrameReadListener:shouldIgnoreFrame(Http2Stream-boolean), Http2Stream:state(), Http2Stream$State:ordinal(), Http2Stream:id(), Http2Stream:state(), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:remote(), Http2Connection$Endpoint:reservePushStream(int-Http2Stream), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf) to listOf(DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:goAwayReceived(int), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onWindowUpdateRead(ChannelHandlerContext-int-int) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:verifyPrefaceReceived(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:requireStream(int), DefaultHttp2ConnectionDecoder$FrameReadListener:verifyGoAwayNotReceived(), Http2Stream:state(), DefaultHttp2ConnectionDecoder$FrameReadListener:shouldIgnoreFrame(Http2Stream-boolean), DefaultHttp2ConnectionDecoder:access$1100(DefaultHttp2ConnectionDecoder), Http2ConnectionEncoder:flowController(), Http2RemoteFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int), DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onWindowUpdateRead(ChannelHandlerContext-int-int)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf) to listOf(DefaultHttp2ConnectionDecoder:access$800(DefaultHttp2ConnectionDecoder), Http2FrameListener:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf)),
		DefaultHttp2ConnectionDecoder$FrameReadListener:shouldIgnoreFrame(Http2Stream-boolean) to listOf(DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:goAwaySent(), DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:remote(), Http2Connection$Endpoint:lastStreamCreated(), Http2Stream:id(), Http2Stream:isResetSent()),
		DefaultHttp2ConnectionDecoder$FrameReadListener:verifyGoAwayNotReceived() to listOf(DefaultHttp2ConnectionDecoder:access$600(DefaultHttp2ConnectionDecoder), Http2Connection:goAwayReceived(), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2ConnectionDecoder$FrameReadListener:<init>(DefaultHttp2ConnectionDecoder-DefaultHttp2ConnectionDecoder$1) to listOf(DefaultHttp2ConnectionDecoder$FrameReadListener:<init>(DefaultHttp2ConnectionDecoder)),
		DefaultHttp2HeadersEncoder$1:visit(Map$Entry) to listOf(Http2Headers$PseudoHeaderName:isPseudoHeader(AsciiString), DefaultHttp2HeadersEncoder:access$100(DefaultHttp2HeadersEncoder-AsciiString-AsciiString-OutputStream)),
		DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader) to listOf(DefaultHttp2FrameReader$HeadersBlockBuilder:<init>(DefaultHttp2FrameReader)),
		DefaultHttp2FrameReader$HeadersContinuation:close() to listOf(DefaultHttp2FrameReader$HeadersBlockBuilder:close()),
		DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader-DefaultHttp2FrameReader$1) to listOf(DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader)),
		DefaultHttp2RemoteFlowController:<init>(Http2Connection) to listOf(ObjectUtil:checkNotNull(Object-String), Http2Connection:connectionStream(), Http2Connection:connectionStream(), DefaultHttp2RemoteFlowController$FlowState:<init>(DefaultHttp2RemoteFlowController-Http2Stream-int), Http2Stream:setProperty(Object-Object), DefaultHttp2RemoteFlowController$2:<init>(DefaultHttp2RemoteFlowController), Http2Connection:addListener(Http2Connection$Listener)),
		DefaultHttp2RemoteFlowController:initialWindowSize(int) to listOf(Http2Connection:activeStreams(), DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:incrementStreamWindow(int), DefaultHttp2RemoteFlowController:writePendingBytes()),
		DefaultHttp2RemoteFlowController:windowSize(Http2Stream) to listOf(DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:window()),
		DefaultHttp2RemoteFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int) to listOf(Http2Stream:id(), DefaultHttp2RemoteFlowController:connectionState(), DefaultHttp2RemoteFlowController$FlowState:incrementStreamWindow(int), DefaultHttp2RemoteFlowController:writePendingBytes(), DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:incrementStreamWindow(int), DefaultHttp2RemoteFlowController$FlowState:writableWindow(), DefaultHttp2RemoteFlowController$FlowState:writeBytes(int), DefaultHttp2RemoteFlowController:flush()),
		DefaultHttp2RemoteFlowController:sendFlowControlled(ChannelHandlerContext-Http2Stream-Http2RemoteFlowController$FlowControlled) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:newFrame(Http2RemoteFlowController$FlowControlled), DefaultHttp2RemoteFlowController$FlowState:writableWindow(), DefaultHttp2RemoteFlowController$FlowState:writeBytes(int), DefaultHttp2RemoteFlowController:flush(), Http2RemoteFlowController$FlowControlled:error(Throwable)),
		DefaultHttp2RemoteFlowController:streamableBytesForTree(Http2Stream) to listOf(DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:streamableBytesForTree()),
		DefaultHttp2RemoteFlowController:state(Http2Stream) to listOf(ObjectUtil:checkNotNull(Object-String), Http2Stream:getProperty(Object)),
		DefaultHttp2RemoteFlowController:connectionState() to listOf(Http2Connection:connectionStream(), DefaultHttp2RemoteFlowController:state(Http2Stream)),
		DefaultHttp2RemoteFlowController:connectionWindow() to listOf(DefaultHttp2RemoteFlowController:connectionState(), DefaultHttp2RemoteFlowController$FlowState:window()),
		DefaultHttp2RemoteFlowController:flush() to listOf(ChannelHandlerContext:flush()),
		DefaultHttp2RemoteFlowController:writePendingBytes() to listOf(Http2Connection:connectionStream(), DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:window(), DefaultHttp2RemoteFlowController:writeChildren(Http2Stream-int), Http2Connection:activeStreams(), DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController:writeChildNode(DefaultHttp2RemoteFlowController$FlowState), DefaultHttp2RemoteFlowController:flush()),
		DefaultHttp2RemoteFlowController:writeChildren(Http2Stream-int) to listOf(DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:streamableBytesForTree(), DefaultHttp2RemoteFlowController$FlowState:streamableBytesForTree(), Http2Stream:children(), DefaultHttp2RemoteFlowController:state(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2RemoteFlowController$FlowState:hasFrame(), DefaultHttp2RemoteFlowController$FlowState:allocate(int), DefaultHttp2RemoteFlowController:writeChildNode(DefaultHttp2RemoteFlowController$FlowState), DefaultHttp2RemoteFlowController:writeChildren(Http2Stream-int), Http2Stream:children(), Http2Stream:numChildren(), Http2Stream:totalChildWeights(), DefaultHttp2RemoteFlowController:state(Http2Stream), Http2Stream:weight(), DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2RemoteFlowController$FlowState:hasFrame(), DefaultHttp2RemoteFlowController$FlowState:allocate(int), DefaultHttp2RemoteFlowController$FlowState:streamableBytesForTree(), DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2RemoteFlowController:writeChildNode(DefaultHttp2RemoteFlowController$FlowState), DefaultHttp2RemoteFlowController:writeChildren(Http2Stream-int)),
		DefaultHttp2RemoteFlowController:writeChildNode(DefaultHttp2RemoteFlowController$FlowState) to listOf(DefaultHttp2RemoteFlowController$FlowState:allocated(), DefaultHttp2RemoteFlowController$FlowState:writeBytes(int), DefaultHttp2RemoteFlowController$FlowState:resetAllocated()),
		DefaultHttp2RemoteFlowController:access$100(Http2Stream) to listOf(DefaultHttp2RemoteFlowController:state(Http2Stream)),
		DefaultHttp2RemoteFlowController:access$200(DefaultHttp2RemoteFlowController) to listOf(DefaultHttp2RemoteFlowController:connectionWindow()),
		DefaultHttp2RemoteFlowController:access$500(DefaultHttp2RemoteFlowController) to listOf(DefaultHttp2RemoteFlowController:connectionState()),
		DefaultHttp2RemoteFlowController:<clinit>() to listOf(DefaultHttp2RemoteFlowController$1:<init>()),
		Http2Headers$PseudoHeaderName:values() to listOf(Http2Headers$PseudoHeaderName[]:clone()),
		Http2Headers$PseudoHeaderName:<init>(String-int-String) to listOf(AsciiString:<init>(CharSequence)),
		Http2Headers$PseudoHeaderName:<clinit>() to listOf(Http2Headers$PseudoHeaderName:<init>(String-int-String), Http2Headers$PseudoHeaderName:<init>(String-int-String), Http2Headers$PseudoHeaderName:<init>(String-int-String), Http2Headers$PseudoHeaderName:<init>(String-int-String), Http2Headers$PseudoHeaderName:<init>(String-int-String), Http2Headers$PseudoHeaderName:values(), Http2Headers$PseudoHeaderName:value()),
		DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:<init>(DefaultHttp2HeadersEncoder) to listOf(DefaultHttp2HeaderTableListSize:<init>()),
		DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:maxHeaderTableSize(int) to listOf(Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2HeadersEncoder:access$300(DefaultHttp2HeadersEncoder), DefaultHttp2HeadersEncoder:access$200(DefaultHttp2HeadersEncoder), Encoder:setMaxHeaderTableSize(OutputStream-int), Http2Exception:<init>(Http2Error-String-Throwable), Http2Exception:<init>(Http2Error-String-Throwable)),
		DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:maxHeaderTableSize() to listOf(DefaultHttp2HeadersEncoder:access$300(DefaultHttp2HeadersEncoder), Encoder:getMaxHeaderTableSize()),
		DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:<init>(DefaultHttp2HeadersEncoder-DefaultHttp2HeadersEncoder$1) to listOf(DefaultHttp2HeadersEncoder$Http2HeaderTableEncoder:<init>(DefaultHttp2HeadersEncoder)),
		InboundHttp2ToHttpAdapter:<init>(InboundHttp2ToHttpAdapter$Builder) to listOf(Http2EventAdapter:<init>(), InboundHttp2ToHttpAdapter$Builder:access$000(InboundHttp2ToHttpAdapter$Builder), ObjectUtil:checkNotNull(Object-String), InboundHttp2ToHttpAdapter$Builder:access$100(InboundHttp2ToHttpAdapter$Builder), InboundHttp2ToHttpAdapter$Builder:access$100(InboundHttp2ToHttpAdapter$Builder), InboundHttp2ToHttpAdapter$Builder:access$000(InboundHttp2ToHttpAdapter$Builder), InboundHttp2ToHttpAdapter$Builder:access$100(InboundHttp2ToHttpAdapter$Builder), InboundHttp2ToHttpAdapter$Builder:access$200(InboundHttp2ToHttpAdapter$Builder), InboundHttp2ToHttpAdapter$Builder:access$300(InboundHttp2ToHttpAdapter$Builder), IntObjectHashMap:<init>()),
		InboundHttp2ToHttpAdapter:removeMessage(int) to listOf(IntObjectMap:remove(int)),
		InboundHttp2ToHttpAdapter:streamRemoved(Http2Stream) to listOf(Http2Stream:id(), InboundHttp2ToHttpAdapter:removeMessage(int)),
		InboundHttp2ToHttpAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int) to listOf(InboundHttp2ToHttpAdapter:removeMessage(int), FullHttpMessage:content(), ByteBuf:readableBytes(), HttpHeaderUtil:setContentLength(HttpMessage-long), ChannelHandlerContext:fireChannelRead(Object)),
		InboundHttp2ToHttpAdapter:newMessage(int-Http2Headers-boolean) to listOf(Http2Connection:isServer(), HttpUtil:toHttpRequest(int-Http2Headers-boolean), HttpUtil:toHttpResponse(int-Http2Headers-boolean)),
		InboundHttp2ToHttpAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean) to listOf(IntObjectMap:get(int), InboundHttp2ToHttpAdapter:newMessage(int-Http2Headers-boolean), HttpUtil:addHttp2ToHttpHeaders(int-Http2Headers-FullHttpMessage-boolean), InboundHttp2ToHttpAdapter:removeMessage(int), InboundHttp2ToHttpAdapter$ImmediateSendDetector:mustSendImmediately(FullHttpMessage), InboundHttp2ToHttpAdapter$ImmediateSendDetector:copyIfNeeded(FullHttpMessage), InboundHttp2ToHttpAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int)),
		InboundHttp2ToHttpAdapter:processHeadersEnd(ChannelHandlerContext-int-FullHttpMessage-boolean) to listOf(InboundHttp2ToHttpAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int), IntObjectMap:put(int-Object)),
		InboundHttp2ToHttpAdapter:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean) to listOf(IntObjectMap:get(int), Http2Exception:connectionError(Http2Error-String-Object[]), FullHttpMessage:content(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), Http2Exception:connectionError(Http2Error-String-Object[]), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), InboundHttp2ToHttpAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int)),
		InboundHttp2ToHttpAdapter:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean) to listOf(InboundHttp2ToHttpAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean), InboundHttp2ToHttpAdapter:processHeadersEnd(ChannelHandlerContext-int-FullHttpMessage-boolean)),
		InboundHttp2ToHttpAdapter:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean) to listOf(InboundHttp2ToHttpAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean), InboundHttp2ToHttpAdapter:processHeadersEnd(ChannelHandlerContext-int-FullHttpMessage-boolean)),
		InboundHttp2ToHttpAdapter:onRstStreamRead(ChannelHandlerContext-int-long) to listOf(IntObjectMap:get(int), InboundHttp2ToHttpAdapter:fireChannelRead(ChannelHandlerContext-FullHttpMessage-int)),
		InboundHttp2ToHttpAdapter:onPushPromiseRead(ChannelHandlerContext-int-int-Http2Headers-int) to listOf(InboundHttp2ToHttpAdapter:processHeadersBegin(ChannelHandlerContext-int-Http2Headers-boolean-boolean-boolean), Http2Exception:connectionError(Http2Error-String-Object[]), FullHttpMessage:headers(), HttpUtil$ExtensionHeaderNames:text(), HttpHeaders:setInt(CharSequence-int), InboundHttp2ToHttpAdapter:processHeadersEnd(ChannelHandlerContext-int-FullHttpMessage-boolean)),
		InboundHttp2ToHttpAdapter:onSettingsRead(ChannelHandlerContext-Http2Settings) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		InboundHttp2ToHttpAdapter:<clinit>() to listOf(InboundHttp2ToHttpAdapter$1:<init>()),
		Http2FrameLogger$Direction:values() to listOf(Http2FrameLogger$Direction[]:clone()),
		Http2FrameLogger$Direction:<clinit>() to listOf(Http2FrameLogger$Direction:<init>(String-int), Http2FrameLogger$Direction:<init>(String-int)),
		DefaultHttp2RemoteFlowController$FlowState$Frame:<init>(DefaultHttp2RemoteFlowController$FlowState-Http2RemoteFlowController$FlowControlled) to listOf(Http2RemoteFlowController$FlowControlled:size(), DefaultHttp2RemoteFlowController$FlowState$Frame:incrementPendingBytes(int)),
		DefaultHttp2RemoteFlowController$FlowState$Frame:incrementPendingBytes(int) to listOf(DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2RemoteFlowController$FlowState:access$312(DefaultHttp2RemoteFlowController$FlowState-int), DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2RemoteFlowController$FlowState:incrementStreamableBytesForTree(int)),
		DefaultHttp2RemoteFlowController$FlowState$Frame:write(int) to listOf(Http2RemoteFlowController$FlowControlled:size(), Http2RemoteFlowController$FlowControlled:write(int), DefaultHttp2RemoteFlowController:access$476(DefaultHttp2RemoteFlowController-int), Http2RemoteFlowController$FlowControlled:size(), DefaultHttp2RemoteFlowController:access$500(DefaultHttp2RemoteFlowController), DefaultHttp2RemoteFlowController$FlowState:incrementStreamWindow(int), DefaultHttp2RemoteFlowController$FlowState:incrementStreamWindow(int), Http2Exception:getMessage(), DefaultHttp2RemoteFlowController$FlowState$Frame:decrementPendingBytes(int), Http2RemoteFlowController$FlowControlled:size(), DefaultHttp2RemoteFlowController$FlowState:access$600(DefaultHttp2RemoteFlowController$FlowState)),
		DefaultHttp2RemoteFlowController$FlowState$Frame:writeError(Http2Exception) to listOf(Http2RemoteFlowController$FlowControlled:size(), DefaultHttp2RemoteFlowController$FlowState$Frame:decrementPendingBytes(int), Http2RemoteFlowController$FlowControlled:error(Throwable)),
		DefaultHttp2RemoteFlowController$FlowState$Frame:decrementPendingBytes(int) to listOf(DefaultHttp2RemoteFlowController$FlowState$Frame:incrementPendingBytes(int)),
		Http2ConnectionHandler$1:operationComplete(ChannelFuture) to listOf(Http2ConnectionHandler:connection(), Http2Connection:deactivate(Http2Stream), Http2ConnectionHandler:access$000(Http2ConnectionHandler), Http2ConnectionHandler:connection(), Http2Connection:numActiveStreams(), Http2ConnectionHandler:access$000(Http2ConnectionHandler), ChannelFutureListener:operationComplete(Future)),
		Http2ConnectionHandler$1:operationComplete(Future) to listOf(Http2ConnectionHandler$1:operationComplete(ChannelFuture)),
		DefaultHttp2ConnectionDecoder$Builder:build() to listOf(DefaultHttp2ConnectionDecoder:<init>(DefaultHttp2ConnectionDecoder$Builder)),
		DefaultHttp2ConnectionDecoder$Builder:encoder(Http2ConnectionEncoder) to listOf(DefaultHttp2ConnectionDecoder$Builder:encoder(Http2ConnectionEncoder)),
		DefaultHttp2ConnectionDecoder$Builder:listener(Http2FrameListener) to listOf(DefaultHttp2ConnectionDecoder$Builder:listener(Http2FrameListener)),
		DefaultHttp2ConnectionDecoder$Builder:frameReader(Http2FrameReader) to listOf(DefaultHttp2ConnectionDecoder$Builder:frameReader(Http2FrameReader)),
		DefaultHttp2ConnectionDecoder$Builder:lifecycleManager(Http2LifecycleManager) to listOf(DefaultHttp2ConnectionDecoder$Builder:lifecycleManager(Http2LifecycleManager)),
		DefaultHttp2ConnectionDecoder$Builder:connection(Http2Connection) to listOf(DefaultHttp2ConnectionDecoder$Builder:connection(Http2Connection)),
		CompressorHttp2ConnectionEncoder$Builder:<init>() to listOf(DefaultHttp2ConnectionEncoder$Builder:<init>()),
		CompressorHttp2ConnectionEncoder$Builder:build() to listOf(CompressorHttp2ConnectionEncoder:<init>(CompressorHttp2ConnectionEncoder$Builder), CompressorHttp2ConnectionEncoder$Builder:build()),
		InboundHttp2ToHttpAdapter$Builder:build() to listOf(InboundHttp2ToHttpAdapter:<init>(InboundHttp2ToHttpAdapter$Builder), Http2Connection:addListener(Http2Connection$Listener)),
		Http2CodecUtil$1:setAction(Http2StreamRemovalPolicy$Action) to listOf(ObjectUtil:checkNotNull(Object-String)),
		Http2CodecUtil$1:markForRemoval(Http2Stream) to listOf(Http2StreamRemovalPolicy$Action:removeStream(Http2Stream)),
		DefaultHttp2FrameWriter:<init>() to listOf(DefaultHttp2HeadersEncoder:<init>(), DefaultHttp2FrameWriter:<init>(Http2HeadersEncoder)),
		DefaultHttp2FrameWriter:headerTable() to listOf(Http2HeadersEncoder:configuration(), Http2HeadersEncoder$Configuration:headerTable()),
		DefaultHttp2FrameWriter:maxFrameSize(int) to listOf(Http2CodecUtil:isMaxFrameSizeValid(int), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2FrameWriter:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise) to listOf(ChannelHandlerContext:channel(), ChannelHandlerContext:executor(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), DefaultHttp2FrameWriter:verifyStreamId(int-String), DefaultHttp2FrameWriter:verifyPadding(int), Http2Flags:<init>(), Http2Flags:paddingPresent(boolean), Http2Flags:endOfStream(boolean), ByteBuf:readableBytes(), Http2Flags:getPaddingPresenceFieldLength(), DefaultHttp2FrameWriter:verifyPayloadLength(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), DefaultHttp2FrameWriter:writePaddingLength(ByteBuf-int), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:slice(int-int), ByteBuf:retain(), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), ByteBuf:release(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise) to listOf(DefaultHttp2FrameWriter:writeHeadersInternal(ChannelHandlerContext-int-Http2Headers-int-boolean-boolean-int-short-boolean-ChannelPromise)),
		DefaultHttp2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise) to listOf(DefaultHttp2FrameWriter:writeHeadersInternal(ChannelHandlerContext-int-Http2Headers-int-boolean-boolean-int-short-boolean-ChannelPromise)),
		DefaultHttp2FrameWriter:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise) to listOf(DefaultHttp2FrameWriter:verifyStreamId(int-String), DefaultHttp2FrameWriter:verifyStreamId(int-String), DefaultHttp2FrameWriter:verifyWeight(short), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2Flags:<init>(), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), Http2CodecUtil:writeUnsignedInt(long-ByteBuf), ByteBuf:writeByte(int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise) to listOf(DefaultHttp2FrameWriter:verifyStreamId(int-String), DefaultHttp2FrameWriter:verifyErrorCode(long), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2Flags:<init>(), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), Http2CodecUtil:writeUnsignedInt(long-ByteBuf), ChannelHandlerContext:write(Object-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise) to listOf(ObjectUtil:checkNotNull(Object-String), Http2Settings:size(), ChannelHandlerContext:alloc(), Http2Settings:size(), ByteBufAllocator:buffer(int), Http2Flags:<init>(), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), Http2Settings:entries(), IntObjectMap$Entry:key(), Http2CodecUtil:writeUnsignedShort(int-ByteBuf), IntObjectMap$Entry:value(), Http2CodecUtil:writeUnsignedInt(long-ByteBuf), ChannelHandlerContext:write(Object-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writeSettingsAck(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2Flags:<init>(), Http2Flags:ack(boolean), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise) to listOf(ChannelHandlerContext:channel(), ChannelHandlerContext:executor(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), Http2Flags:<init>(), Http2Flags:ack(boolean), Http2Flags:<init>(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:readableBytes(), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), ByteBuf:release(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise) to listOf(ChannelHandlerContext:channel(), ChannelHandlerContext:executor(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), DefaultHttp2FrameWriter:verifyStreamId(int-String), DefaultHttp2FrameWriter:verifyStreamId(int-String), DefaultHttp2FrameWriter:verifyPadding(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), Http2HeadersEncoder:encodeHeaders(Http2Headers-ByteBuf), Http2Flags:<init>(), Http2Flags:paddingPresent(boolean), Http2Flags:getPaddingPresenceFieldLength(), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), ByteBuf:isReadable(), Http2Flags:endOfHeaders(boolean), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), DefaultHttp2FrameWriter:writePaddingLength(ByteBuf-int), ByteBuf:writeInt(int), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:slice(int-int), ByteBuf:retain(), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2Flags:endOfHeaders(), DefaultHttp2FrameWriter:writeContinuationFrames(ChannelHandlerContext-int-ByteBuf-int-Http2CodecUtil$SimpleChannelPromiseAggregator), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), ByteBuf:release(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable), ByteBuf:release(), ByteBuf:release()),
		DefaultHttp2FrameWriter:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise) to listOf(ChannelHandlerContext:channel(), ChannelHandlerContext:executor(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), DefaultHttp2FrameWriter:verifyStreamOrConnectionId(int-String), DefaultHttp2FrameWriter:verifyErrorCode(long), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2Flags:<init>(), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), ByteBuf:writeInt(int), Http2CodecUtil:writeUnsignedInt(long-ByteBuf), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), ByteBuf:release(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise) to listOf(DefaultHttp2FrameWriter:verifyStreamOrConnectionId(int-String), DefaultHttp2FrameWriter:verifyWindowSizeIncrement(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2Flags:<init>(), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), ByteBuf:writeInt(int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise) to listOf(ChannelHandlerContext:channel(), ChannelHandlerContext:executor(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), DefaultHttp2FrameWriter:verifyStreamOrConnectionId(int-String), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:readableBytes(), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), ByteBuf:release(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable)),
		DefaultHttp2FrameWriter:writeHeadersInternal(ChannelHandlerContext-int-Http2Headers-int-boolean-boolean-int-short-boolean-ChannelPromise) to listOf(ChannelHandlerContext:channel(), ChannelHandlerContext:executor(), Http2CodecUtil$SimpleChannelPromiseAggregator:<init>(ChannelPromise-Channel-EventExecutor), DefaultHttp2FrameWriter:verifyStreamId(int-String), DefaultHttp2FrameWriter:verifyStreamOrConnectionId(int-String), DefaultHttp2FrameWriter:verifyPadding(int), DefaultHttp2FrameWriter:verifyWeight(short), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), Http2HeadersEncoder:encodeHeaders(Http2Headers-ByteBuf), Http2Flags:<init>(), Http2Flags:endOfStream(boolean), Http2Flags:priorityPresent(boolean), Http2Flags:paddingPresent(boolean), Http2Flags:getNumPriorityBytes(), Http2Flags:getPaddingPresenceFieldLength(), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), ByteBuf:isReadable(), Http2Flags:endOfHeaders(boolean), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), DefaultHttp2FrameWriter:writePaddingLength(ByteBuf-int), Http2CodecUtil:writeUnsignedInt(long-ByteBuf), ByteBuf:writeByte(int), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:slice(int-int), ByteBuf:retain(), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2Flags:endOfHeaders(), DefaultHttp2FrameWriter:writeContinuationFrames(ChannelHandlerContext-int-ByteBuf-int-Http2CodecUtil$SimpleChannelPromiseAggregator), Http2CodecUtil$SimpleChannelPromiseAggregator:doneAllocatingPromises(), ByteBuf:release(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable), ByteBuf:release(), ByteBuf:release()),
		DefaultHttp2FrameWriter:writeContinuationFrames(ChannelHandlerContext-int-ByteBuf-int-Http2CodecUtil$SimpleChannelPromiseAggregator) to listOf(Http2Flags:<init>(), Http2Flags:paddingPresent(boolean), Http2Flags:getPaddingPresenceFieldLength(), Http2CodecUtil$SimpleChannelPromiseAggregator:setFailure(Throwable), ByteBuf:isReadable(), ByteBuf:slice(int-int), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), DefaultHttp2FrameWriter:writePaddingLength(ByteBuf-int), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), ByteBuf:isReadable(), ByteBuf:retain(), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2Flags:endOfHeaders(boolean), ByteBuf:release(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2CodecUtil:writeFrameHeaderInternal(ByteBuf-int-byte-Http2Flags-int), DefaultHttp2FrameWriter:writePaddingLength(ByteBuf-int), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:retain(), Http2CodecUtil$SimpleChannelPromiseAggregator:newPromise(), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:isReadable()),
		DefaultHttp2FrameWriter:writePaddingLength(ByteBuf-int) to listOf(ByteBuf:writeByte(int)),
		DefaultHttp2FrameWriter:<clinit>() to listOf(Unpooled:buffer(int), ByteBuf:writeZero(int)),
		DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:<init>(DefaultHttp2HeadersDecoder) to listOf(DefaultHttp2HeaderTableListSize:<init>()),
		DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:maxHeaderTableSize(int) to listOf(Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2HeadersDecoder:access$100(DefaultHttp2HeadersDecoder), Decoder:setMaxHeaderTableSize(int), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:maxHeaderTableSize() to listOf(DefaultHttp2HeadersDecoder:access$100(DefaultHttp2HeadersDecoder), Decoder:getMaxHeaderTableSize()),
		DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:<init>(DefaultHttp2HeadersDecoder-DefaultHttp2HeadersDecoder$1) to listOf(DefaultHttp2HeadersDecoder$Http2HeaderTableDecoder:<init>(DefaultHttp2HeadersDecoder)),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:<init>(Http2LocalFlowController) to listOf(ObjectUtil:checkNotNull(Object-String)),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:initialWindowSize(int) to listOf(Http2LocalFlowController:initialWindowSize(int)),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:initialWindowSize() to listOf(Http2LocalFlowController:initialWindowSize()),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:windowSize(Http2Stream) to listOf(Http2LocalFlowController:windowSize(Http2Stream)),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:incrementWindowSize(ChannelHandlerContext-Http2Stream-int) to listOf(Http2LocalFlowController:incrementWindowSize(ChannelHandlerContext-Http2Stream-int)),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:receiveFlowControlledFrame(ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean) to listOf(Http2LocalFlowController:receiveFlowControlledFrame(ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean)),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:consumeBytes(ChannelHandlerContext-Http2Stream-int) to listOf(DelegatingDecompressorFrameListener:access$000(Http2Stream), DelegatingDecompressorFrameListener$Http2Decompressor:<init>(DelegatingDecompressorFrameListener$Http2Decompressor), DelegatingDecompressorFrameListener$Http2Decompressor:consumeProcessedBytes(int), Http2LocalFlowController:consumeBytes(ChannelHandlerContext-Http2Stream-int), Http2Stream:setProperty(Object-Object), Http2Stream:setProperty(Object-Object), Http2Exception:<init>(Http2Error-String-Throwable)),
		DelegatingDecompressorFrameListener$ConsumedBytesConverter:unconsumedBytes(Http2Stream) to listOf(Http2LocalFlowController:unconsumedBytes(Http2Stream)),
		Http2FrameLogger:<init>(InternalLogLevel) to listOf(InternalLoggerFactory:getInstance(Class), Http2FrameLogger:<init>(InternalLogLevel-InternalLogger)),
		Http2FrameLogger:<init>(InternalLogLevel-InternalLogger) to listOf(ChannelHandlerAdapter:<init>(), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String)),
		Http2FrameLogger:logData(Http2FrameLogger$Direction-int-ByteBuf-int-boolean) to listOf(ByteBuf:readableBytes(), ByteBufUtil:hexDump(ByteBuf), Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-boolean) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-short-boolean-int-boolean) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logPriority(Http2FrameLogger$Direction-int-int-short-boolean) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logRstStream(Http2FrameLogger$Direction-int-long) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logSettingsAck(Http2FrameLogger$Direction) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logSettings(Http2FrameLogger$Direction-Http2Settings) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logPing(Http2FrameLogger$Direction-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufUtil:hexDump(ByteBuf), Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logPingAck(Http2FrameLogger$Direction-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufUtil:hexDump(ByteBuf), Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logPushPromise(Http2FrameLogger$Direction-int-int-Http2Headers-int) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logGoAway(Http2FrameLogger$Direction-int-long-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufUtil:hexDump(ByteBuf), Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logWindowsUpdate(Http2FrameLogger$Direction-int-int) to listOf(Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:logUnknownFrame(Http2FrameLogger$Direction-byte-int-Http2Flags-ByteBuf) to listOf(Http2Flags:value(), ByteBuf:readableBytes(), ByteBufUtil:hexDump(ByteBuf), Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[])),
		Http2FrameLogger:log(Http2FrameLogger$Direction-String-Object[]) to listOf(InternalLogger:isEnabled(InternalLogLevel), Http2FrameLogger$Direction:name(), InternalLogger:log(InternalLogLevel-String)),
		DefaultHttp2Connection$2:<clinit>() to listOf(Http2Stream$State:values(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal()),
		DefaultHttp2Connection$1:removeStream(Http2Stream) to listOf(DefaultHttp2Connection:access$000(DefaultHttp2Connection-DefaultHttp2Connection$DefaultStream)),
		InboundHttp2ToHttpAdapter$1:mustSendImmediately(FullHttpMessage) to listOf(FullHttpResponse:status(), HttpResponseStatus:codeClass(), FullHttpMessage:headers(), HttpHeaders:contains(Object)),
		InboundHttp2ToHttpAdapter$1:copyIfNeeded(FullHttpMessage) to listOf(FullHttpRequest:copy(ByteBuf), FullHttpRequest:headers(), HttpHeaders:remove(Object)),
		Http2Settings:<init>() to listOf(Http2Settings:<init>(int)),
		Http2Settings:<init>(int-float) to listOf(IntObjectHashMap:<init>(int-float)),
		Http2Settings:<init>(int) to listOf(IntObjectHashMap:<init>(int)),
		Http2Settings:put(int-Long) to listOf(Http2Settings:verifyStandardSetting(int-Long), IntObjectHashMap:put(int-Object)),
		Http2Settings:headerTableSize() to listOf(Http2Settings:get(int)),
		Http2Settings:headerTableSize(int) to listOf(Http2Settings:put(int-Long)),
		Http2Settings:pushEnabled() to listOf(Http2Settings:get(int)),
		Http2Settings:pushEnabled(boolean) to listOf(Http2Settings:put(int-Long)),
		Http2Settings:maxConcurrentStreams() to listOf(Http2Settings:get(int)),
		Http2Settings:maxConcurrentStreams(long) to listOf(Http2Settings:put(int-Long)),
		Http2Settings:initialWindowSize() to listOf(Http2Settings:getIntValue(int)),
		Http2Settings:initialWindowSize(int) to listOf(Http2Settings:put(int-Long)),
		Http2Settings:maxFrameSize() to listOf(Http2Settings:getIntValue(int)),
		Http2Settings:maxFrameSize(int) to listOf(Http2Settings:put(int-Long)),
		Http2Settings:maxHeaderListSize() to listOf(Http2Settings:getIntValue(int)),
		Http2Settings:maxHeaderListSize(int) to listOf(Http2Settings:put(int-Long)),
		Http2Settings:copyFrom(Http2Settings) to listOf(Http2Settings:clear(), Http2Settings:putAll(IntObjectMap)),
		Http2Settings:getIntValue(int) to listOf(Http2Settings:get(int)),
		Http2Settings:verifyStandardSetting(int-Long) to listOf(ObjectUtil:checkNotNull(Object-String), Http2CodecUtil:isMaxFrameSizeValid(int)),
		Http2Settings:keyToString(int) to listOf(IntObjectHashMap:keyToString(int)),
		Http2Settings:put(int-Object) to listOf(Http2Settings:put(int-Long)),
		Http2Exception:connectionError(Http2Error-String-Object[]) to listOf(Http2Exception:<init>(Http2Error-String)),
		Http2Exception:connectionError(Http2Error-Throwable-String-Object[]) to listOf(Http2Exception:<init>(Http2Error-String-Throwable)),
		Http2Exception:streamError(int-Http2Error-String-Object[]) to listOf(Http2Exception:connectionError(Http2Error-String-Object[]), Http2Exception$StreamException:<init>(int-Http2Error-String)),
		Http2Exception:streamError(int-Http2Error-Throwable-String-Object[]) to listOf(Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception$StreamException:<init>(int-Http2Error-String-Throwable)),
		Http2Exception:streamId(Http2Exception) to listOf(Http2Exception:isStreamError(Http2Exception), Http2Exception$StreamException:streamId()),
		Http2OutboundFrameLogger:<init>(Http2FrameWriter-Http2FrameLogger) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String)),
		Http2OutboundFrameLogger:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise) to listOf(Http2FrameLogger:logData(Http2FrameLogger$Direction-int-ByteBuf-int-boolean), Http2FrameWriter:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise)),
		Http2OutboundFrameLogger:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise) to listOf(Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-boolean), Http2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise)),
		Http2OutboundFrameLogger:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise) to listOf(Http2FrameLogger:logHeaders(Http2FrameLogger$Direction-int-Http2Headers-int-short-boolean-int-boolean), Http2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise)),
		Http2OutboundFrameLogger:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise) to listOf(Http2FrameLogger:logPriority(Http2FrameLogger$Direction-int-int-short-boolean), Http2FrameWriter:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise)),
		Http2OutboundFrameLogger:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise) to listOf(Http2FrameLogger:logRstStream(Http2FrameLogger$Direction-int-long), Http2FrameWriter:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise)),
		Http2OutboundFrameLogger:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise) to listOf(Http2FrameLogger:logSettings(Http2FrameLogger$Direction-Http2Settings), Http2FrameWriter:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise)),
		Http2OutboundFrameLogger:writeSettingsAck(ChannelHandlerContext-ChannelPromise) to listOf(Http2FrameLogger:logSettingsAck(Http2FrameLogger$Direction), Http2FrameWriter:writeSettingsAck(ChannelHandlerContext-ChannelPromise)),
		Http2OutboundFrameLogger:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise) to listOf(Http2FrameLogger:logPing(Http2FrameLogger$Direction-ByteBuf), Http2FrameWriter:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise)),
		Http2OutboundFrameLogger:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise) to listOf(Http2FrameLogger:logPushPromise(Http2FrameLogger$Direction-int-int-Http2Headers-int), Http2FrameWriter:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise)),
		Http2OutboundFrameLogger:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise) to listOf(Http2FrameLogger:logGoAway(Http2FrameLogger$Direction-int-long-ByteBuf), Http2FrameWriter:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise)),
		Http2OutboundFrameLogger:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise) to listOf(Http2FrameLogger:logWindowsUpdate(Http2FrameLogger$Direction-int-int), Http2FrameWriter:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise)),
		Http2OutboundFrameLogger:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise) to listOf(Http2FrameLogger:logUnknownFrame(Http2FrameLogger$Direction-byte-int-Http2Flags-ByteBuf), Http2FrameWriter:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise)),
		Http2OutboundFrameLogger:close() to listOf(Http2FrameWriter:close()),
		Http2OutboundFrameLogger:configuration() to listOf(Http2FrameWriter:configuration()),
		DefaultHttp2LocalFlowController$1:<init>(DefaultHttp2LocalFlowController) to listOf(Http2ConnectionAdapter:<init>()),
		DefaultHttp2LocalFlowController$1:streamAdded(Http2Stream) to listOf(DefaultHttp2LocalFlowController$FlowState:<init>(DefaultHttp2LocalFlowController-Http2Stream-int), Http2Stream:setProperty(Object-Object)),
		DefaultHttp2LocalFlowController$1:streamActive(Http2Stream) to listOf(DefaultHttp2LocalFlowController:access$100(DefaultHttp2LocalFlowController-Http2Stream), DefaultHttp2LocalFlowController:access$000(DefaultHttp2LocalFlowController), DefaultHttp2LocalFlowController$FlowState:window(int)),
		DefaultHttp2FrameReader$2:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-Http2Flags) to listOf(DefaultHttp2FrameReader$HeadersContinuation:<init>(DefaultHttp2FrameReader-DefaultHttp2FrameReader$1)),
		DefaultHttp2FrameReader$2:processFragment(boolean-ByteBuf-Http2FrameListener) to listOf(DefaultHttp2FrameReader$2:headersBlockBuilder(), ChannelHandlerContext:alloc(), DefaultHttp2FrameReader$HeadersBlockBuilder:addFragment(ByteBuf-ByteBufAllocator-boolean), DefaultHttp2FrameReader$HeadersBlockBuilder:headers(), Http2Flags:endOfStream(), Http2FrameListener:onHeadersRead(ChannelHandlerContext-int-Http2Headers-int-boolean), DefaultHttp2FrameReader$2:close()),
		DefaultHttp2Connection$ConnectionStream:<init>(DefaultHttp2Connection) to listOf(DefaultHttp2Connection$DefaultStream:<init>(DefaultHttp2Connection-int)),
		DefaultHttp2RemoteFlowController$FlowState:<init>(DefaultHttp2RemoteFlowController-Http2Stream-int) to listOf(DefaultHttp2RemoteFlowController$FlowState:window(int)),
		DefaultHttp2RemoteFlowController$FlowState:incrementStreamWindow(int) to listOf(Http2Stream:id(), Http2Stream:id(), Http2Exception:streamError(int-Http2Error-String-Object[]), DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2RemoteFlowController$FlowState:streamableBytes(), DefaultHttp2RemoteFlowController$FlowState:incrementStreamableBytesForTree(int)),
		DefaultHttp2RemoteFlowController$FlowState:writableWindow() to listOf(DefaultHttp2RemoteFlowController:access$200(DefaultHttp2RemoteFlowController)),
		DefaultHttp2RemoteFlowController$FlowState:newFrame(Http2RemoteFlowController$FlowControlled) to listOf(DefaultHttp2RemoteFlowController$FlowState$Frame:<init>(DefaultHttp2RemoteFlowController$FlowState-Http2RemoteFlowController$FlowControlled)),
		DefaultHttp2RemoteFlowController$FlowState:clear() to listOf(Http2Stream:id(), Http2Exception:streamError(int-Http2Error-String-Object[]), DefaultHttp2RemoteFlowController$FlowState$Frame:writeError(Http2Exception)),
		DefaultHttp2RemoteFlowController$FlowState:writeBytes(int) to listOf(DefaultHttp2RemoteFlowController$FlowState:hasFrame(), DefaultHttp2RemoteFlowController$FlowState:writableWindow(), DefaultHttp2RemoteFlowController$FlowState:peek(), DefaultHttp2RemoteFlowController$FlowState$Frame:write(int)),
		DefaultHttp2RemoteFlowController$FlowState:incrementStreamableBytesForTree(int) to listOf(Http2Stream:isRoot(), Http2Stream:parent(), DefaultHttp2RemoteFlowController:access$100(Http2Stream), DefaultHttp2RemoteFlowController$FlowState:incrementStreamableBytesForTree(int)),
		Http2Exception$CompositeStreamException:<init>(Http2Error-int) to listOf(Http2Exception:<init>(Http2Error)),
		Http2ClientUpgradeCodec:<init>(Http2ConnectionHandler) to listOf(Http2ClientUpgradeCodec:<init>(String-Http2ConnectionHandler)),
		Http2ClientUpgradeCodec:<init>(String-Http2ConnectionHandler) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String)),
		Http2ClientUpgradeCodec:setUpgradeHeaders(ChannelHandlerContext-HttpRequest) to listOf(Http2ClientUpgradeCodec:getSettingsHeaderValue(ChannelHandlerContext), HttpRequest:headers(), HttpHeaders:set(CharSequence-CharSequence)),
		Http2ClientUpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpResponse) to listOf(Http2ConnectionHandler:onHttpClientUpgrade(), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler)),
		Http2ClientUpgradeCodec:getSettingsHeaderValue(ChannelHandlerContext) to listOf(Http2ConnectionHandler:decoder(), Http2ConnectionDecoder:localSettings(), Http2Settings:size(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Http2Settings:entries(), IntObjectMap$Entry:key(), Http2CodecUtil:writeUnsignedShort(int-ByteBuf), IntObjectMap$Entry:value(), Http2CodecUtil:writeUnsignedInt(long-ByteBuf), Base64:encode(ByteBuf-Base64Dialect), ByteBuf:toString(Charset), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		DefaultHttp2FrameReader$State:values() to listOf(DefaultHttp2FrameReader$State[]:clone()),
		DefaultHttp2FrameReader$State:<clinit>() to listOf(DefaultHttp2FrameReader$State:<init>(String-int), DefaultHttp2FrameReader$State:<init>(String-int), DefaultHttp2FrameReader$State:<init>(String-int)),
		DefaultHttp2ConnectionEncoder:newBuilder() to listOf(DefaultHttp2ConnectionEncoder$Builder:<init>()),
		DefaultHttp2ConnectionEncoder:<init>(DefaultHttp2ConnectionEncoder$Builder) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), Http2Connection:remote(), Http2Connection$Endpoint:flowController(), Http2Connection:remote(), DefaultHttp2RemoteFlowController:<init>(Http2Connection), Http2Connection$Endpoint:flowController(Http2FlowController)),
		DefaultHttp2ConnectionEncoder:flowController() to listOf(DefaultHttp2ConnectionEncoder:connection(), Http2Connection:remote(), Http2Connection$Endpoint:flowController()),
		DefaultHttp2ConnectionEncoder:remoteSettings(Http2Settings) to listOf(Http2Settings:pushEnabled(), DefaultHttp2ConnectionEncoder:configuration(), Http2FrameWriter$Configuration:headerTable(), Http2FrameWriter$Configuration:frameSizePolicy(), Http2Connection:isServer(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Connection:remote(), Http2Connection$Endpoint:allowPushTo(boolean), Http2Settings:maxConcurrentStreams(), Http2Connection:local(), Http2Connection$Endpoint:maxStreams(int), Http2Settings:headerTableSize(), Http2HeaderTable:maxHeaderTableSize(int), Http2Settings:maxHeaderListSize(), Http2HeaderTable:maxHeaderListSize(int), Http2Settings:maxFrameSize(), Http2FrameSizePolicy:maxFrameSize(int), Http2Settings:initialWindowSize(), DefaultHttp2ConnectionEncoder:flowController(), Http2RemoteFlowController:initialWindowSize(int)),
		DefaultHttp2ConnectionEncoder:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise) to listOf(Http2Connection:isGoAway(), Http2Connection:requireStream(int), Http2Stream:state(), Http2Stream$State:ordinal(), Http2Stream:id(), Http2Stream:state(), Http2LifecycleManager:closeLocalSide(Http2Stream-ChannelFuture), ByteBuf:release(), ChannelPromise:setFailure(Throwable), DefaultHttp2ConnectionEncoder:flowController(), DefaultHttp2ConnectionEncoder$FlowControlledData:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean-ChannelPromise-DefaultHttp2ConnectionEncoder$1), Http2RemoteFlowController:sendFlowControlled(ChannelHandlerContext-Http2Stream-Http2RemoteFlowController$FlowControlled)),
		DefaultHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-boolean-ChannelPromise) to listOf(DefaultHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise)),
		DefaultHttp2ConnectionEncoder:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise) to listOf(Http2Connection:isGoAway(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Connection:stream(int), Http2Connection:createLocalStream(int), Http2Stream:state(), Http2Stream$State:ordinal(), Http2Stream:open(boolean), Http2Stream:id(), Http2Stream:state(), DefaultHttp2ConnectionEncoder:flowController(), DefaultHttp2ConnectionEncoder$FlowControlledHeaders:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-Http2Headers-int-short-boolean-int-boolean-ChannelPromise-DefaultHttp2ConnectionEncoder$1), Http2RemoteFlowController:sendFlowControlled(ChannelHandlerContext-Http2Stream-Http2RemoteFlowController$FlowControlled), Http2LifecycleManager:closeLocalSide(Http2Stream-ChannelFuture), Http2LifecycleManager:onException(ChannelHandlerContext-Throwable), ChannelPromise:setFailure(Throwable), ChannelPromise:setFailure(Throwable)),
		DefaultHttp2ConnectionEncoder:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise) to listOf(Http2Connection:isGoAway(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Connection:stream(int), Http2Connection:createLocalStream(int), Http2Stream:setPriority(int-short-boolean), ChannelPromise:setFailure(Throwable), Http2FrameWriter:writePriority(ChannelHandlerContext-int-int-short-boolean-ChannelPromise), ChannelHandlerContext:flush()),
		DefaultHttp2ConnectionEncoder:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise) to listOf(Http2LifecycleManager:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise)),
		DefaultHttp2ConnectionEncoder:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise-boolean) to listOf(Http2Connection:stream(int), ChannelPromise:setSuccess(), Http2FrameWriter:writeRstStream(ChannelHandlerContext-int-long-ChannelPromise), ChannelHandlerContext:flush(), Http2Stream:resetSent(), Http2LifecycleManager:closeStream(Http2Stream-ChannelFuture)),
		DefaultHttp2ConnectionEncoder:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise) to listOf(Http2Connection:isGoAway(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Settings:pushEnabled(), Http2Connection:isServer(), Http2Exception:connectionError(Http2Error-String-Object[]), ChannelPromise:setFailure(Throwable), Http2FrameWriter:writeSettings(ChannelHandlerContext-Http2Settings-ChannelPromise), ChannelHandlerContext:flush()),
		DefaultHttp2ConnectionEncoder:writeSettingsAck(ChannelHandlerContext-ChannelPromise) to listOf(Http2FrameWriter:writeSettingsAck(ChannelHandlerContext-ChannelPromise), ChannelHandlerContext:flush()),
		DefaultHttp2ConnectionEncoder:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise) to listOf(Http2Connection:isGoAway(), ByteBuf:release(), Http2Exception:connectionError(Http2Error-String-Object[]), ChannelPromise:setFailure(Throwable), Http2FrameWriter:writePing(ChannelHandlerContext-boolean-ByteBuf-ChannelPromise), ChannelHandlerContext:flush()),
		DefaultHttp2ConnectionEncoder:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise) to listOf(Http2Connection:isGoAway(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Connection:requireStream(int), Http2Connection:local(), Http2Connection$Endpoint:reservePushStream(int-Http2Stream), ChannelPromise:setFailure(Throwable), Http2FrameWriter:writePushPromise(ChannelHandlerContext-int-int-Http2Headers-int-ChannelPromise), ChannelHandlerContext:flush()),
		DefaultHttp2ConnectionEncoder:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise) to listOf(Http2LifecycleManager:writeGoAway(ChannelHandlerContext-int-long-ByteBuf-ChannelPromise)),
		DefaultHttp2ConnectionEncoder:writeWindowUpdate(ChannelHandlerContext-int-int-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		DefaultHttp2ConnectionEncoder:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise) to listOf(Http2FrameWriter:writeFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf-ChannelPromise)),
		DefaultHttp2ConnectionEncoder:close() to listOf(Http2FrameWriter:close()),
		DefaultHttp2ConnectionEncoder:configuration() to listOf(Http2FrameWriter:configuration()),
		Http2Exception$StreamException:<init>(int-Http2Error-String) to listOf(Http2Exception:<init>(Http2Error-String)),
		Http2Exception$StreamException:<init>(int-Http2Error-String-Throwable) to listOf(Http2Exception:<init>(Http2Error-String-Throwable)),
		DefaultHttp2FrameReader$HeadersBlockBuilder:addFragment(ByteBuf-ByteBufAllocator-boolean) to listOf(ByteBuf:retain(), ByteBuf:readableBytes(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf), ByteBuf:readableBytes(), ByteBuf:isWritable(int), ByteBuf:writeBytes(ByteBuf), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf), ByteBuf:writeBytes(ByteBuf), ByteBuf:release()),
		DefaultHttp2FrameReader$HeadersBlockBuilder:headers() to listOf(DefaultHttp2FrameReader:access$100(DefaultHttp2FrameReader), Http2HeadersDecoder:decodeHeaders(ByteBuf), DefaultHttp2FrameReader$HeadersBlockBuilder:close(), DefaultHttp2FrameReader$HeadersBlockBuilder:close()),
		DefaultHttp2FrameReader$HeadersBlockBuilder:close() to listOf(ByteBuf:release(), DefaultHttp2FrameReader:access$202(DefaultHttp2FrameReader-DefaultHttp2FrameReader$HeadersContinuation)),
		Http2Error:values() to listOf(Http2Error[]:clone()),
		Http2Error:<clinit>() to listOf(Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long), Http2Error:<init>(String-int-long)),
		DefaultHttp2FrameReader:<init>() to listOf(DefaultHttp2HeadersDecoder:<init>(), DefaultHttp2FrameReader:<init>(Http2HeadersDecoder)),
		DefaultHttp2FrameReader:headerTable() to listOf(Http2HeadersDecoder:configuration(), Http2HeadersDecoder$Configuration:headerTable()),
		DefaultHttp2FrameReader:maxFrameSize(int) to listOf(Http2CodecUtil:isMaxFrameSizeValid(int), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:close() to listOf(DefaultHttp2FrameReader$HeadersContinuation:close()),
		DefaultHttp2FrameReader:readFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(ByteBuf:isReadable(), DefaultHttp2FrameReader$State:ordinal(), DefaultHttp2FrameReader:processHeaderState(ByteBuf), DefaultHttp2FrameReader:processPayloadState(ChannelHandlerContext-ByteBuf-Http2FrameListener), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		DefaultHttp2FrameReader:processHeaderState(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readUnsignedMedium(), Http2Exception:connectionError(Http2Error-String-Object[]), ByteBuf:readByte(), ByteBuf:readUnsignedByte(), Http2Flags:<init>(short), Http2CodecUtil:readUnsignedInt(ByteBuf), DefaultHttp2FrameReader:verifyDataFrame(), DefaultHttp2FrameReader:verifyHeadersFrame(), DefaultHttp2FrameReader:verifyPriorityFrame(), DefaultHttp2FrameReader:verifyRstStreamFrame(), DefaultHttp2FrameReader:verifySettingsFrame(), DefaultHttp2FrameReader:verifyPushPromiseFrame(), DefaultHttp2FrameReader:verifyPingFrame(), DefaultHttp2FrameReader:verifyGoAwayFrame(), DefaultHttp2FrameReader:verifyWindowUpdateFrame(), DefaultHttp2FrameReader:verifyContinuationFrame()),
		DefaultHttp2FrameReader:processPayloadState(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(ByteBuf:readableBytes(), ByteBuf:readSlice(int), DefaultHttp2FrameReader:readDataFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readHeadersFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readPriorityFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readRstStreamFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readSettingsFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readPushPromiseFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readPingFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readGoAwayFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readWindowUpdateFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readContinuationFrame(ByteBuf-Http2FrameListener), DefaultHttp2FrameReader:readUnknownFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener)),
		DefaultHttp2FrameReader:verifyDataFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), DefaultHttp2FrameReader:verifyPayloadLength(int), Http2Flags:getPaddingPresenceFieldLength(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyHeadersFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), DefaultHttp2FrameReader:verifyPayloadLength(int), Http2Flags:getPaddingPresenceFieldLength(), Http2Flags:getNumPriorityBytes(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyPriorityFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyRstStreamFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifySettingsFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), DefaultHttp2FrameReader:verifyPayloadLength(int), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Flags:ack(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyPushPromiseFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), DefaultHttp2FrameReader:verifyPayloadLength(int), Http2Flags:getPaddingPresenceFieldLength(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyPingFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyGoAwayFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), DefaultHttp2FrameReader:verifyPayloadLength(int), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyWindowUpdateFrame() to listOf(DefaultHttp2FrameReader:verifyNotProcessingHeaders(), DefaultHttp2FrameReader:verifyStreamOrConnectionId(int-String), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyContinuationFrame() to listOf(DefaultHttp2FrameReader:verifyPayloadLength(int), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2FrameReader$HeadersContinuation:getStreamId(), DefaultHttp2FrameReader$HeadersContinuation:getStreamId(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Flags:getPaddingPresenceFieldLength(), Http2Exception:streamError(int-Http2Error-String-Object[])),
		DefaultHttp2FrameReader:readDataFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(DefaultHttp2FrameReader:readPadding(ByteBuf), ByteBuf:readableBytes(), Http2Exception:streamError(int-Http2Error-String-Object[]), ByteBuf:readSlice(int), Http2Flags:endOfStream(), Http2FrameListener:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		DefaultHttp2FrameReader:readHeadersFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(DefaultHttp2FrameReader:readPadding(ByteBuf), Http2Flags:priorityPresent(), ByteBuf:readUnsignedInt(), ByteBuf:readUnsignedByte(), ByteBuf:readableBytes(), ByteBuf:readSlice(int), DefaultHttp2FrameReader$1:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-short-boolean-int-Http2Flags), Http2Flags:endOfHeaders(), DefaultHttp2FrameReader$HeadersContinuation:processFragment(boolean-ByteBuf-Http2FrameListener), DefaultHttp2FrameReader$2:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-Http2Flags), ByteBuf:readableBytes(), ByteBuf:readSlice(int), Http2Flags:endOfHeaders(), DefaultHttp2FrameReader$HeadersContinuation:processFragment(boolean-ByteBuf-Http2FrameListener)),
		DefaultHttp2FrameReader:readPriorityFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(ByteBuf:readUnsignedInt(), ByteBuf:readUnsignedByte(), Http2FrameListener:onPriorityRead(ChannelHandlerContext-int-int-short-boolean)),
		DefaultHttp2FrameReader:readRstStreamFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(ByteBuf:readUnsignedInt(), Http2FrameListener:onRstStreamRead(ChannelHandlerContext-int-long)),
		DefaultHttp2FrameReader:readSettingsFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(Http2Flags:ack(), Http2FrameListener:onSettingsAckRead(ChannelHandlerContext), Http2Settings:<init>(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedInt(), Http2Settings:put(int-Long), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[]), Http2FrameListener:onSettingsRead(ChannelHandlerContext-Http2Settings)),
		DefaultHttp2FrameReader:readPushPromiseFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(DefaultHttp2FrameReader:readPadding(ByteBuf), Http2CodecUtil:readUnsignedInt(ByteBuf), DefaultHttp2FrameReader$3:<init>(DefaultHttp2FrameReader-int-ChannelHandlerContext-int-int), ByteBuf:readableBytes(), ByteBuf:readSlice(int), Http2Flags:endOfHeaders(), DefaultHttp2FrameReader$HeadersContinuation:processFragment(boolean-ByteBuf-Http2FrameListener)),
		DefaultHttp2FrameReader:readPingFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(ByteBuf:readableBytes(), ByteBuf:readSlice(int), Http2Flags:ack(), Http2FrameListener:onPingAckRead(ChannelHandlerContext-ByteBuf), Http2FrameListener:onPingRead(ChannelHandlerContext-ByteBuf)),
		DefaultHttp2FrameReader:readGoAwayFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(Http2CodecUtil:readUnsignedInt(ByteBuf), ByteBuf:readUnsignedInt(), ByteBuf:readableBytes(), ByteBuf:readSlice(int), Http2FrameListener:onGoAwayRead(ChannelHandlerContext-int-long-ByteBuf)),
		DefaultHttp2FrameReader:readWindowUpdateFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(Http2CodecUtil:readUnsignedInt(ByteBuf), Http2Exception:streamError(int-Http2Error-String-Object[]), Http2FrameListener:onWindowUpdateRead(ChannelHandlerContext-int-int)),
		DefaultHttp2FrameReader:readContinuationFrame(ByteBuf-Http2FrameListener) to listOf(ByteBuf:readableBytes(), ByteBuf:readSlice(int), Http2Flags:endOfHeaders(), DefaultHttp2FrameReader$HeadersContinuation:processFragment(boolean-ByteBuf-Http2FrameListener)),
		DefaultHttp2FrameReader:readUnknownFrame(ChannelHandlerContext-ByteBuf-Http2FrameListener) to listOf(ByteBuf:readableBytes(), ByteBuf:readSlice(int), Http2FrameListener:onUnknownFrame(ChannelHandlerContext-byte-int-Http2Flags-ByteBuf)),
		DefaultHttp2FrameReader:readPadding(ByteBuf) to listOf(Http2Flags:paddingPresent(), ByteBuf:readUnsignedByte()),
		DefaultHttp2FrameReader:verifyNotProcessingHeaders() to listOf(Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyPayloadLength(int) to listOf(Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2FrameReader:verifyStreamOrConnectionId(int-String) to listOf(Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2ConnectionDecoder$1:<clinit>() to listOf(Http2Stream$State:values(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal()),
		Http2ConnectionHandler$2:<clinit>() to listOf(Http2Stream$State:values(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal()),
		Http2EventAdapter:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean) to listOf(ByteBuf:readableBytes()),
		HttpUtil$Http2ToHttpHeaderTranslator:visit(Map$Entry) to listOf(Http2Headers$PseudoHeaderName:isPseudoHeader(AsciiString), AsciiString:isEmpty(), AsciiString:charAt(int), Http2Exception:streamError(int-Http2Error-String-Object[]), HttpHeaders:add(CharSequence-CharSequence)),
		HttpUtil$Http2ToHttpHeaderTranslator:<clinit>() to listOf(Http2Headers$PseudoHeaderName:value(), HttpUtil$ExtensionHeaderNames:text(), Http2Headers$PseudoHeaderName:value(), HttpUtil$ExtensionHeaderNames:text(), Http2Headers$PseudoHeaderName:value(), HttpUtil$ExtensionHeaderNames:text()),
		DefaultHttp2StreamRemovalPolicy:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		DefaultHttp2StreamRemovalPolicy:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:eventLoop(), EventLoop:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		DefaultHttp2StreamRemovalPolicy:markForRemoval(Http2Stream) to listOf(DefaultHttp2StreamRemovalPolicy$Garbage:<init>(Http2Stream)),
		DefaultHttp2StreamRemovalPolicy:run() to listOf(DefaultHttp2StreamRemovalPolicy$Garbage:access$000(DefaultHttp2StreamRemovalPolicy$Garbage), DefaultHttp2StreamRemovalPolicy$Garbage:access$100(DefaultHttp2StreamRemovalPolicy$Garbage), Http2StreamRemovalPolicy$Action:removeStream(Http2Stream)),
		DefaultHttp2ConnectionEncoder$1:<clinit>() to listOf(Http2Stream$State:values(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal(), Http2Stream$State:ordinal()),
		DefaultHttp2ConnectionEncoder$FlowControlledData:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean-ChannelPromise) to listOf(DefaultHttp2ConnectionEncoder$FlowControlledBase:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-int-boolean-ChannelPromise), ByteBuf:readableBytes()),
		DefaultHttp2ConnectionEncoder$FlowControlledData:error(Throwable) to listOf(ReferenceCountUtil:safeRelease(Object), DefaultHttp2ConnectionEncoder:access$200(DefaultHttp2ConnectionEncoder), Http2LifecycleManager:onException(ChannelHandlerContext-Throwable), ChannelPromise:tryFailure(Throwable)),
		DefaultHttp2ConnectionEncoder$FlowControlledData:write(int) to listOf(DefaultHttp2ConnectionEncoder$FlowControlledData:size(), DefaultHttp2ConnectionEncoder:frameWriter(), Http2FrameWriter:configuration(), Http2FrameWriter$Configuration:frameSizePolicy(), Http2FrameSizePolicy:maxFrameSize(), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), ChannelHandlerContext:newPromise(), ChannelPromise:addListener(GenericFutureListener), DefaultHttp2ConnectionEncoder:frameWriter(), Http2Stream:id(), Http2FrameWriter:writeData(ChannelHandlerContext-int-ByteBuf-int-boolean-ChannelPromise), DefaultHttp2ConnectionEncoder$FlowControlledData:error(Throwable)),
		DefaultHttp2ConnectionEncoder$FlowControlledData:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean-ChannelPromise-DefaultHttp2ConnectionEncoder$1) to listOf(DefaultHttp2ConnectionEncoder$FlowControlledData:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-ByteBuf-int-boolean-ChannelPromise)),
		Http2OrHttpChooser:<init>(int) to listOf(ByteToMessageDecoder:<init>()),
		Http2OrHttpChooser:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Http2OrHttpChooser:initPipeline(ChannelHandlerContext), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		Http2OrHttpChooser:initPipeline(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), SslHandler:engine(), Http2OrHttpChooser:getProtocol(SSLEngine), Http2OrHttpChooser$SelectedProtocol:ordinal(), Http2OrHttpChooser:addHttp2Handlers(ChannelHandlerContext), Http2OrHttpChooser:addHttpHandlers(ChannelHandlerContext)),
		Http2OrHttpChooser:addHttp2Handlers(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), Http2OrHttpChooser:createHttp2RequestHandler(), ChannelPipeline:addLast(String-ChannelHandler)),
		Http2OrHttpChooser:addHttpHandlers(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), HttpRequestDecoder:<init>(), ChannelPipeline:addLast(String-ChannelHandler), HttpResponseEncoder:<init>(), ChannelPipeline:addLast(String-ChannelHandler), HttpObjectAggregator:<init>(int), ChannelPipeline:addLast(String-ChannelHandler), Http2OrHttpChooser:createHttp1RequestHandler(), ChannelPipeline:addLast(String-ChannelHandler)),
		Http2FrameAdapter:onDataRead(ChannelHandlerContext-int-ByteBuf-int-boolean) to listOf(ByteBuf:readableBytes()),
		HttpUtil$2:visit(Map$Entry) to listOf(AsciiString:of(CharSequence), AsciiString:toLowerCase(), HttpUtil:access$000(), AsciiString:of(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), Http2Headers:add(AsciiString-AsciiString)),
		Http2Flags:endOfStream() to listOf(Http2Flags:isFlagSet(short)),
		Http2Flags:endOfHeaders() to listOf(Http2Flags:isFlagSet(short)),
		Http2Flags:priorityPresent() to listOf(Http2Flags:isFlagSet(short)),
		Http2Flags:ack() to listOf(Http2Flags:isFlagSet(short)),
		Http2Flags:paddingPresent() to listOf(Http2Flags:isFlagSet(short)),
		Http2Flags:getNumPriorityBytes() to listOf(Http2Flags:priorityPresent()),
		Http2Flags:getPaddingPresenceFieldLength() to listOf(Http2Flags:paddingPresent()),
		Http2Flags:endOfStream(boolean) to listOf(Http2Flags:setFlag(boolean-short)),
		Http2Flags:endOfHeaders(boolean) to listOf(Http2Flags:setFlag(boolean-short)),
		Http2Flags:priorityPresent(boolean) to listOf(Http2Flags:setFlag(boolean-short)),
		Http2Flags:paddingPresent(boolean) to listOf(Http2Flags:setFlag(boolean-short)),
		Http2Flags:ack(boolean) to listOf(Http2Flags:setFlag(boolean-short)),
		Http2Flags:toString() to listOf(Http2Flags:ack(), Http2Flags:endOfHeaders(), Http2Flags:endOfStream(), Http2Flags:priorityPresent(), Http2Flags:paddingPresent()),
		Http2ConnectionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		Http2ConnectionHandler$ClosingChannelFutureListener:operationComplete(Future) to listOf(Http2ConnectionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture)),
		DefaultHttp2ConnectionEncoder$FlowControlledHeaders:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-Http2Headers-int-short-boolean-int-boolean-ChannelPromise) to listOf(DefaultHttp2ConnectionEncoder$FlowControlledBase:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-int-boolean-ChannelPromise)),
		DefaultHttp2ConnectionEncoder$FlowControlledHeaders:error(Throwable) to listOf(DefaultHttp2ConnectionEncoder:access$200(DefaultHttp2ConnectionEncoder), Http2LifecycleManager:onException(ChannelHandlerContext-Throwable), ChannelPromise:tryFailure(Throwable)),
		DefaultHttp2ConnectionEncoder$FlowControlledHeaders:write(int) to listOf(DefaultHttp2ConnectionEncoder:frameWriter(), Http2Stream:id(), Http2FrameWriter:writeHeaders(ChannelHandlerContext-int-Http2Headers-int-short-boolean-int-boolean-ChannelPromise)),
		DefaultHttp2ConnectionEncoder$FlowControlledHeaders:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-Http2Headers-int-short-boolean-int-boolean-ChannelPromise-DefaultHttp2ConnectionEncoder$1) to listOf(DefaultHttp2ConnectionEncoder$FlowControlledHeaders:<init>(DefaultHttp2ConnectionEncoder-ChannelHandlerContext-Http2Stream-Http2Headers-int-short-boolean-int-boolean-ChannelPromise)),
		DefaultHttp2Connection$DefaultEndpoint:acceptingNewStreams() to listOf(DefaultHttp2Connection$DefaultEndpoint:nextStreamId()),
		DefaultHttp2Connection$DefaultEndpoint:createStream(int) to listOf(DefaultHttp2Connection$DefaultEndpoint:checkNewStreamAllowed(int), DefaultHttp2Connection$DefaultStream:<init>(DefaultHttp2Connection-int), DefaultHttp2Connection$DefaultEndpoint:addStream(DefaultHttp2Connection$DefaultStream), DefaultHttp2Connection$DefaultEndpoint:createStream(int)),
		DefaultHttp2Connection$DefaultEndpoint:reservePushStream(int-Http2Stream) to listOf(Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2Connection$DefaultEndpoint:isLocal(), Http2Stream:localSideOpen(), Http2Stream:remoteSideOpen(), Http2Stream:id(), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2Connection$DefaultEndpoint:opposite(), Http2Connection$Endpoint:allowPushTo(), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2Connection$DefaultEndpoint:checkNewStreamAllowed(int), DefaultHttp2Connection$DefaultStream:<init>(DefaultHttp2Connection-int), DefaultHttp2Connection$DefaultEndpoint:isLocal(), DefaultHttp2Connection$DefaultStream:access$1302(DefaultHttp2Connection$DefaultStream-Http2Stream$State), DefaultHttp2Connection$DefaultEndpoint:addStream(DefaultHttp2Connection$DefaultStream), DefaultHttp2Connection$DefaultEndpoint:reservePushStream(int-Http2Stream)),
		DefaultHttp2Connection$DefaultEndpoint:addStream(DefaultHttp2Connection$DefaultStream) to listOf(DefaultHttp2Connection:access$1400(DefaultHttp2Connection), DefaultHttp2Connection$DefaultStream:id(), IntObjectMap:put(int-Object), DefaultHttp2Connection:access$1500(DefaultHttp2Connection), DefaultHttp2Connection$ConnectionStream:takeChild(DefaultHttp2Connection$DefaultStream-boolean-List), DefaultHttp2Connection:access$800(DefaultHttp2Connection), Http2Connection$Listener:streamAdded(Http2Stream), DefaultHttp2Connection:access$500(DefaultHttp2Connection-List)),
		DefaultHttp2Connection$DefaultEndpoint:lastKnownStream(int) to listOf(DefaultHttp2Connection:isGoAway(), DefaultHttp2Connection$DefaultEndpoint:notifyGoingAway()),
		DefaultHttp2Connection$DefaultEndpoint:notifyGoingAway() to listOf(DefaultHttp2Connection:access$800(DefaultHttp2Connection), Http2Connection$Listener:goingAway()),
		DefaultHttp2Connection$DefaultEndpoint:flowController(Http2FlowController) to listOf(ObjectUtil:checkNotNull(Object-String)),
		DefaultHttp2Connection$DefaultEndpoint:opposite() to listOf(DefaultHttp2Connection$DefaultEndpoint:isLocal(), DefaultHttp2Connection:access$1000(DefaultHttp2Connection), DefaultHttp2Connection:access$900(DefaultHttp2Connection)),
		DefaultHttp2Connection$DefaultEndpoint:checkNewStreamAllowed(int) to listOf(DefaultHttp2Connection:isGoAway(), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2Connection$DefaultEndpoint:verifyStreamId(int), DefaultHttp2Connection$DefaultEndpoint:acceptingNewStreams(), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2Connection$DefaultEndpoint:verifyStreamId(int) to listOf(Http2NoMoreStreamIdsException:<init>(), Http2Exception:connectionError(Http2Error-String-Object[]), DefaultHttp2Connection$DefaultEndpoint:createdStreamId(int), Http2Exception:connectionError(Http2Error-String-Object[])),
		DefaultHttp2Connection$DefaultEndpoint:isLocal() to listOf(DefaultHttp2Connection:access$900(DefaultHttp2Connection)),
		DefaultHttp2Connection$DefaultEndpoint:access$200(DefaultHttp2Connection$DefaultEndpoint-int) to listOf(DefaultHttp2Connection$DefaultEndpoint:lastKnownStream(int)),
		HttpUtil:parseStatus(AsciiString) to listOf(HttpResponseStatus:parseLine(CharSequence), HttpResponseStatus:code(), Http2Exception:connectionError(Http2Error-String-Object[]), Http2Exception:connectionError(Http2Error-Throwable-String-Object[])),
		HttpUtil:toHttpResponse(int-Http2Headers-boolean) to listOf(Http2Headers:status(), HttpUtil:parseStatus(AsciiString), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean), HttpUtil:addHttp2ToHttpHeaders(int-Http2Headers-FullHttpMessage-boolean)),
		HttpUtil:toHttpRequest(int-Http2Headers-boolean) to listOf(Http2Headers:method(), ObjectUtil:checkNotNull(Object-String), Http2Headers:path(), ObjectUtil:checkNotNull(Object-String), AsciiString:toString(), HttpMethod:valueOf(String), AsciiString:toString(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean), HttpUtil:addHttp2ToHttpHeaders(int-Http2Headers-FullHttpMessage-boolean)),
		HttpUtil:addHttp2ToHttpHeaders(int-Http2Headers-FullHttpMessage-boolean) to listOf(FullHttpMessage:trailingHeaders(), FullHttpMessage:headers(), HttpUtil$Http2ToHttpHeaderTranslator:<init>(int-HttpHeaders-boolean), Http2Headers:forEachEntry(Headers$EntryVisitor), Http2Exception:streamError(int-Http2Error-Throwable-String-Object[]), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpUtil$ExtensionHeaderNames:text(), HttpHeaders:setInt(CharSequence-int), HttpHeaderUtil:setKeepAlive(HttpMessage-boolean)),
		HttpUtil:toHttp2Headers(FullHttpMessage) to listOf(DefaultHttp2Headers:<init>(), FullHttpMessage:headers(), HttpRequest:uri(), AsciiString:<init>(CharSequence), Http2Headers:path(AsciiString), HttpRequest:method(), HttpMethod:toString(), AsciiString:<init>(CharSequence), Http2Headers:method(AsciiString), HttpHeaders:getAndConvert(Object), AsciiString:<init>(CharSequence), Http2Headers:authority(AsciiString), AsciiString:<init>(CharSequence), Http2Headers:scheme(AsciiString), HttpUtil$ExtensionHeaderNames:text(), HttpHeaders:get(Object), AsciiString:of(CharSequence), Http2Headers:authority(AsciiString), HttpUtil$ExtensionHeaderNames:text(), HttpHeaders:get(Object), AsciiString:of(CharSequence), Http2Headers:scheme(AsciiString), HttpResponse:status(), HttpResponseStatus:code(), AsciiString:<init>(CharSequence), Http2Headers:status(AsciiString), HttpUtil$2:<init>(Http2Headers), HttpHeaders:forEachEntry(Headers$EntryVisitor)),
		HttpUtil:<clinit>() to listOf(HttpUtil$1:<init>()),
		EmptyHttp2Headers:<init>() to listOf(EmptyBinaryHeaders:<init>()),
		EmptyHttp2Headers:add(AsciiString-AsciiString) to listOf(EmptyBinaryHeaders:add(AsciiString-AsciiString), EmptyHttp2Headers:add(AsciiString-AsciiString)),
		EmptyHttp2Headers:add(AsciiString-Iterable) to listOf(EmptyBinaryHeaders:add(AsciiString-Iterable), EmptyHttp2Headers:add(AsciiString-Iterable)),
		EmptyHttp2Headers:add(AsciiString-AsciiString[]) to listOf(EmptyBinaryHeaders:add(AsciiString-AsciiString[]), EmptyHttp2Headers:add(AsciiString-AsciiString[])),
		EmptyHttp2Headers:addObject(AsciiString-Object) to listOf(EmptyBinaryHeaders:addObject(AsciiString-Object), EmptyHttp2Headers:addObject(AsciiString-Object)),
		EmptyHttp2Headers:addObject(AsciiString-Iterable) to listOf(EmptyBinaryHeaders:addObject(AsciiString-Iterable), EmptyHttp2Headers:addObject(AsciiString-Iterable)),
		EmptyHttp2Headers:addObject(AsciiString-Object[]) to listOf(EmptyBinaryHeaders:addObject(AsciiString-Object[]), EmptyHttp2Headers:addObject(AsciiString-Object[])),
		EmptyHttp2Headers:addBoolean(AsciiString-boolean) to listOf(EmptyBinaryHeaders:addBoolean(AsciiString-boolean), EmptyHttp2Headers:addBoolean(AsciiString-boolean)),
		EmptyHttp2Headers:addChar(AsciiString-char) to listOf(EmptyBinaryHeaders:addChar(AsciiString-char), EmptyHttp2Headers:addChar(AsciiString-char)),
		EmptyHttp2Headers:addByte(AsciiString-byte) to listOf(EmptyBinaryHeaders:addByte(AsciiString-byte), EmptyHttp2Headers:addByte(AsciiString-byte)),
		EmptyHttp2Headers:addShort(AsciiString-short) to listOf(EmptyBinaryHeaders:addShort(AsciiString-short), EmptyHttp2Headers:addShort(AsciiString-short)),
		EmptyHttp2Headers:addInt(AsciiString-int) to listOf(EmptyBinaryHeaders:addInt(AsciiString-int), EmptyHttp2Headers:addInt(AsciiString-int)),
		EmptyHttp2Headers:addLong(AsciiString-long) to listOf(EmptyBinaryHeaders:addLong(AsciiString-long), EmptyHttp2Headers:addLong(AsciiString-long)),
		EmptyHttp2Headers:addFloat(AsciiString-float) to listOf(EmptyBinaryHeaders:addFloat(AsciiString-float), EmptyHttp2Headers:addFloat(AsciiString-float)),
		EmptyHttp2Headers:addDouble(AsciiString-double) to listOf(EmptyBinaryHeaders:addDouble(AsciiString-double), EmptyHttp2Headers:addDouble(AsciiString-double)),
		EmptyHttp2Headers:addTimeMillis(AsciiString-long) to listOf(EmptyBinaryHeaders:addTimeMillis(AsciiString-long), EmptyHttp2Headers:addTimeMillis(AsciiString-long)),
		EmptyHttp2Headers:add(BinaryHeaders) to listOf(EmptyBinaryHeaders:add(BinaryHeaders), EmptyHttp2Headers:add(BinaryHeaders)),
		EmptyHttp2Headers:set(AsciiString-AsciiString) to listOf(EmptyBinaryHeaders:set(AsciiString-AsciiString), EmptyHttp2Headers:set(AsciiString-AsciiString)),
		EmptyHttp2Headers:set(AsciiString-Iterable) to listOf(EmptyBinaryHeaders:set(AsciiString-Iterable), EmptyHttp2Headers:set(AsciiString-Iterable)),
		EmptyHttp2Headers:set(AsciiString-AsciiString[]) to listOf(EmptyBinaryHeaders:set(AsciiString-AsciiString[]), EmptyHttp2Headers:set(AsciiString-AsciiString[])),
		EmptyHttp2Headers:setObject(AsciiString-Object) to listOf(EmptyBinaryHeaders:setObject(AsciiString-Object), EmptyHttp2Headers:setObject(AsciiString-Object)),
		EmptyHttp2Headers:setObject(AsciiString-Iterable) to listOf(EmptyBinaryHeaders:setObject(AsciiString-Iterable), EmptyHttp2Headers:setObject(AsciiString-Iterable)),
		EmptyHttp2Headers:setObject(AsciiString-Object[]) to listOf(EmptyBinaryHeaders:setObject(AsciiString-Object[]), EmptyHttp2Headers:setObject(AsciiString-Object[])),
		EmptyHttp2Headers:setBoolean(AsciiString-boolean) to listOf(EmptyBinaryHeaders:setBoolean(AsciiString-boolean), EmptyHttp2Headers:setBoolean(AsciiString-boolean)),
		EmptyHttp2Headers:setChar(AsciiString-char) to listOf(EmptyBinaryHeaders:setChar(AsciiString-char), EmptyHttp2Headers:setChar(AsciiString-char)),
		EmptyHttp2Headers:setByte(AsciiString-byte) to listOf(EmptyBinaryHeaders:setByte(AsciiString-byte), EmptyHttp2Headers:setByte(AsciiString-byte)),
		EmptyHttp2Headers:setShort(AsciiString-short) to listOf(EmptyBinaryHeaders:setShort(AsciiString-short), EmptyHttp2Headers:setShort(AsciiString-short)),
		EmptyHttp2Headers:setInt(AsciiString-int) to listOf(EmptyBinaryHeaders:setInt(AsciiString-int), EmptyHttp2Headers:setInt(AsciiString-int)),
		EmptyHttp2Headers:setLong(AsciiString-long) to listOf(EmptyBinaryHeaders:setLong(AsciiString-long), EmptyHttp2Headers:setLong(AsciiString-long)),
		EmptyHttp2Headers:setFloat(AsciiString-float) to listOf(EmptyBinaryHeaders:setFloat(AsciiString-float), EmptyHttp2Headers:setFloat(AsciiString-float)),
		EmptyHttp2Headers:setDouble(AsciiString-double) to listOf(EmptyBinaryHeaders:setDouble(AsciiString-double), EmptyHttp2Headers:setDouble(AsciiString-double)),
		EmptyHttp2Headers:setTimeMillis(AsciiString-long) to listOf(EmptyBinaryHeaders:setTimeMillis(AsciiString-long), EmptyHttp2Headers:setTimeMillis(AsciiString-long)),
		EmptyHttp2Headers:set(BinaryHeaders) to listOf(EmptyBinaryHeaders:set(BinaryHeaders), EmptyHttp2Headers:set(BinaryHeaders)),
		EmptyHttp2Headers:setAll(BinaryHeaders) to listOf(EmptyBinaryHeaders:setAll(BinaryHeaders), EmptyHttp2Headers:setAll(BinaryHeaders)),
		EmptyHttp2Headers:clear() to listOf(EmptyBinaryHeaders:clear(), EmptyHttp2Headers:clear(), EmptyHttp2Headers:clear()),
		EmptyHttp2Headers:method(AsciiString) to listOf(EmptyHttp2Headers:method(AsciiString)),
		EmptyHttp2Headers:scheme(AsciiString) to listOf(EmptyHttp2Headers:scheme(AsciiString)),
		EmptyHttp2Headers:authority(AsciiString) to listOf(EmptyHttp2Headers:authority(AsciiString)),
		EmptyHttp2Headers:path(AsciiString) to listOf(EmptyHttp2Headers:path(AsciiString)),
		EmptyHttp2Headers:status(AsciiString) to listOf(EmptyHttp2Headers:status(AsciiString)),
		EmptyHttp2Headers:method() to listOf(Http2Headers$PseudoHeaderName:value(), EmptyHttp2Headers:get(Object)),
		EmptyHttp2Headers:scheme() to listOf(Http2Headers$PseudoHeaderName:value(), EmptyHttp2Headers:get(Object)),
		EmptyHttp2Headers:authority() to listOf(Http2Headers$PseudoHeaderName:value(), EmptyHttp2Headers:get(Object)),
		EmptyHttp2Headers:path() to listOf(Http2Headers$PseudoHeaderName:value(), EmptyHttp2Headers:get(Object)),
		EmptyHttp2Headers:status() to listOf(Http2Headers$PseudoHeaderName:value(), EmptyHttp2Headers:get(Object)),
		EmptyHttp2Headers:setTimeMillis(Object-long) to listOf(EmptyHttp2Headers:setTimeMillis(AsciiString-long)),
		EmptyHttp2Headers:setDouble(Object-double) to listOf(EmptyHttp2Headers:setDouble(AsciiString-double)),
		EmptyHttp2Headers:setFloat(Object-float) to listOf(EmptyHttp2Headers:setFloat(AsciiString-float)),
		EmptyHttp2Headers:setLong(Object-long) to listOf(EmptyHttp2Headers:setLong(AsciiString-long)),
		EmptyHttp2Headers:setInt(Object-int) to listOf(EmptyHttp2Headers:setInt(AsciiString-int)),
		EmptyHttp2Headers:setShort(Object-short) to listOf(EmptyHttp2Headers:setShort(AsciiString-short)),
		EmptyHttp2Headers:setChar(Object-char) to listOf(EmptyHttp2Headers:setChar(AsciiString-char)),
		EmptyHttp2Headers:setByte(Object-byte) to listOf(EmptyHttp2Headers:setByte(AsciiString-byte)),
		EmptyHttp2Headers:setBoolean(Object-boolean) to listOf(EmptyHttp2Headers:setBoolean(AsciiString-boolean)),
		EmptyHttp2Headers:setObject(Object-Object[]) to listOf(EmptyHttp2Headers:setObject(AsciiString-Object[])),
		EmptyHttp2Headers:setObject(Object-Iterable) to listOf(EmptyHttp2Headers:setObject(AsciiString-Iterable)),
		EmptyHttp2Headers:setObject(Object-Object) to listOf(EmptyHttp2Headers:setObject(AsciiString-Object)),
		EmptyHttp2Headers:set(Object-Object[]) to listOf(EmptyHttp2Headers:set(AsciiString-AsciiString[])),
		EmptyHttp2Headers:set(Object-Iterable) to listOf(EmptyHttp2Headers:set(AsciiString-Iterable)),
		EmptyHttp2Headers:set(Object-Object) to listOf(EmptyHttp2Headers:set(AsciiString-AsciiString)),
		EmptyHttp2Headers:addTimeMillis(Object-long) to listOf(EmptyHttp2Headers:addTimeMillis(AsciiString-long)),
		EmptyHttp2Headers:addDouble(Object-double) to listOf(EmptyHttp2Headers:addDouble(AsciiString-double)),
		EmptyHttp2Headers:addFloat(Object-float) to listOf(EmptyHttp2Headers:addFloat(AsciiString-float)),
		EmptyHttp2Headers:addLong(Object-long) to listOf(EmptyHttp2Headers:addLong(AsciiString-long)),
		EmptyHttp2Headers:addInt(Object-int) to listOf(EmptyHttp2Headers:addInt(AsciiString-int)),
		EmptyHttp2Headers:addShort(Object-short) to listOf(EmptyHttp2Headers:addShort(AsciiString-short)),
		EmptyHttp2Headers:addChar(Object-char) to listOf(EmptyHttp2Headers:addChar(AsciiString-char)),
		EmptyHttp2Headers:addByte(Object-byte) to listOf(EmptyHttp2Headers:addByte(AsciiString-byte)),
		EmptyHttp2Headers:addBoolean(Object-boolean) to listOf(EmptyHttp2Headers:addBoolean(AsciiString-boolean)),
		EmptyHttp2Headers:addObject(Object-Object[]) to listOf(EmptyHttp2Headers:addObject(AsciiString-Object[])),
		EmptyHttp2Headers:addObject(Object-Iterable) to listOf(EmptyHttp2Headers:addObject(AsciiString-Iterable)),
		EmptyHttp2Headers:addObject(Object-Object) to listOf(EmptyHttp2Headers:addObject(AsciiString-Object)),
		EmptyHttp2Headers:add(Object-Object[]) to listOf(EmptyHttp2Headers:add(AsciiString-AsciiString[])),
		EmptyHttp2Headers:add(Object-Iterable) to listOf(EmptyHttp2Headers:add(AsciiString-Iterable)),
		EmptyHttp2Headers:add(Object-Object) to listOf(EmptyHttp2Headers:add(AsciiString-AsciiString)),
		EmptyHttp2Headers:<clinit>() to listOf(EmptyHttp2Headers:<init>()),
		XmlFrameDecoder:<init>(int) to listOf(ByteToMessageDecoder:<init>()),
		XmlFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:writerIndex(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), XmlFrameDecoder:fail(long), ByteBuf:readerIndex(), ByteBuf:getByte(int), XmlFrameDecoder:fail(ChannelHandlerContext), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:getByte(int), XmlFrameDecoder:isValidStartCharForXmlElement(byte), XmlFrameDecoder:isCommentBlockStart(ByteBuf-int), XmlFrameDecoder:isCDATABlockStart(ByteBuf-int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:readerIndex(), ByteBuf:readableBytes(), XmlFrameDecoder:extractFrame(ByteBuf-int-int), ByteBuf:skipBytes(int)),
		XmlFrameDecoder:fail(long) to listOf(TooLongFrameException:<init>(String), TooLongFrameException:<init>(String)),
		XmlFrameDecoder:fail(ChannelHandlerContext) to listOf(CorruptedFrameException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		XmlFrameDecoder:extractFrame(ByteBuf-int-int) to listOf(ByteBuf:copy(int-int)),
		XmlFrameDecoder:isCommentBlockStart(ByteBuf-int) to listOf(ByteBuf:writerIndex(), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		XmlFrameDecoder:isCDATABlockStart(ByteBuf-int) to listOf(ByteBuf:writerIndex(), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		MessageToByteEncoder:<init>() to listOf(MessageToByteEncoder:<init>(boolean)),
		MessageToByteEncoder:<init>(Class) to listOf(MessageToByteEncoder:<init>(Class-boolean)),
		MessageToByteEncoder:<init>(boolean) to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		MessageToByteEncoder:<init>(Class-boolean) to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		MessageToByteEncoder:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToByteEncoder:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToByteEncoder:acceptOutboundMessage(Object), MessageToByteEncoder:allocateBuffer(ChannelHandlerContext-Object-boolean), MessageToByteEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), ByteBuf:isReadable(), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:release(), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:release(), EncoderException:<init>(Throwable), ByteBuf:release()),
		MessageToByteEncoder:allocateBuffer(ChannelHandlerContext-Object-boolean) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:ioBuffer(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer()),
		TooLongFrameException:<init>() to listOf(DecoderException:<init>()),
		TooLongFrameException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		TooLongFrameException:<init>(String) to listOf(DecoderException:<init>(String)),
		TooLongFrameException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		DefaultBinaryHeaders$4:convertName(Object) to listOf(DefaultBinaryHeaders$4:convertName(AsciiString)),
		AsciiString$3:compare(CharSequence-CharSequence) to listOf(AsciiString:access$000(AsciiString), AsciiString:access$000(AsciiString), AsciiString:access$100(byte), AsciiString:access$100(byte), AsciiString:access$000(AsciiString), AsciiString:access$100(byte), AsciiString:access$200(char), AsciiString:access$000(AsciiString), AsciiString:access$200(char), AsciiString:access$100(byte), AsciiString:access$200(char), AsciiString:access$200(char)),
		AsciiString$3:compare(Object-Object) to listOf(AsciiString$3:compare(CharSequence-CharSequence)),
		AsciiString$1:compare(Object-Object) to listOf(AsciiString$1:compare(AsciiString-AsciiString)),
		DefaultTextHeaders$2:generateHashCode(Object) to listOf(DefaultTextHeaders$2:generateHashCode(CharSequence)),
		JdkZlibDecoder:<init>() to listOf(JdkZlibDecoder:<init>(ZlibWrapper-byte[])),
		JdkZlibDecoder:<init>(byte[]) to listOf(JdkZlibDecoder:<init>(ZlibWrapper-byte[])),
		JdkZlibDecoder:<init>(ZlibWrapper) to listOf(JdkZlibDecoder:<init>(ZlibWrapper-byte[])),
		JdkZlibDecoder:<init>(ZlibWrapper-byte[]) to listOf(ZlibDecoder:<init>(), ZlibWrapper:ordinal()),
		JdkZlibDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getShort(int), JdkZlibDecoder:looksLikeZlib(short), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder:readGZIPFooter(ByteBuf), JdkZlibDecoder:readGZIPHeader(ByteBuf), ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int), ByteBuf:array(), ByteBuf:writerIndex(), ByteBuf:arrayOffset(), ByteBuf:writableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int), ByteBuf:array(), ByteBuf:writerIndex(int), DecompressionException:<init>(String), ByteBuf:skipBytes(int), JdkZlibDecoder:readGZIPFooter(ByteBuf), ByteBuf:isReadable(), ByteBuf:release(), DecompressionException:<init>(String-Throwable), ByteBuf:isReadable(), ByteBuf:release()),
		JdkZlibDecoder:handlerRemoved0(ChannelHandlerContext) to listOf(ZlibDecoder:handlerRemoved0(ChannelHandlerContext)),
		JdkZlibDecoder:readGZIPHeader(ByteBuf) to listOf(JdkZlibDecoder$GzipState:ordinal(), ByteBuf:readableBytes(), ByteBuf:readByte(), ByteBuf:readByte(), DecompressionException:<init>(String), ByteBuf:readUnsignedByte(), DecompressionException:<init>(String), ByteBuf:readUnsignedByte(), DecompressionException:<init>(String), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readUnsignedByte(), ByteBuf:readUnsignedByte(), ByteBuf:readableBytes(), ByteBuf:readUnsignedByte(), ByteBuf:readUnsignedByte(), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), ByteBuf:isReadable(), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), ByteBuf:isReadable(), ByteBuf:readableBytes(), JdkZlibDecoder:verifyCrc(ByteBuf)),
		JdkZlibDecoder:readGZIPFooter(ByteBuf) to listOf(ByteBuf:readableBytes(), JdkZlibDecoder:verifyCrc(ByteBuf), ByteBuf:readUnsignedByte(), DecompressionException:<init>(String)),
		JdkZlibDecoder:verifyCrc(ByteBuf) to listOf(ByteBuf:readUnsignedByte(), DecompressionException:<init>(String)),
		Bzip2Decoder$1:<clinit>() to listOf(Bzip2Decoder$State:values(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal(), Bzip2Decoder$State:ordinal()),
		FastLzFrameDecoder:<init>() to listOf(FastLzFrameDecoder:<init>(boolean)),
		FastLzFrameDecoder:<init>(boolean) to listOf(FastLzFrameDecoder:<init>(Checksum)),
		FastLzFrameDecoder:<init>(Checksum) to listOf(ByteToMessageDecoder:<init>()),
		FastLzFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(FastLzFrameDecoder$State:ordinal(), ByteBuf:readableBytes(), ByteBuf:readUnsignedMedium(), DecompressionException:<init>(String), ByteBuf:readByte(), ByteBuf:readableBytes(), ByteBuf:readInt(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int-int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:getBytes(int-byte[]), FastLz:decompress(byte[]-int-int-byte[]-int-int), DecompressionException:<init>(String), ByteBuf:getBytes(int-byte[]-int-int), DecompressionException:<init>(String), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ByteBuf:skipBytes(int), ByteBuf:release(), ByteBuf:release(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		LzfDecoder$1:<clinit>() to listOf(LzfDecoder$State:values(), LzfDecoder$State:ordinal(), LzfDecoder$State:ordinal(), LzfDecoder$State:ordinal(), LzfDecoder$State:ordinal()),
		SnappyFrameEncoder:<init>() to listOf(MessageToByteEncoder:<init>(), Snappy:<init>()),
		SnappyFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:writeBytes(byte[]), ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readSlice(int), SnappyFrameEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int), ByteBuf:writeInt(int), ByteBuf:readSlice(int), SnappyFrameEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), Snappy:encode(ByteBuf-ByteBuf-int), SnappyFrameEncoder:setChunkLength(ByteBuf-int), ByteBuf:readSlice(int), SnappyFrameEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), Snappy:encode(ByteBuf-ByteBuf-int), SnappyFrameEncoder:setChunkLength(ByteBuf-int), SnappyFrameEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int)),
		SnappyFrameEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int) to listOf(ByteBuf:writeByte(int), SnappyFrameEncoder:writeChunkLength(ByteBuf-int), SnappyFrameEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), ByteBuf:writeBytes(ByteBuf-int)),
		SnappyFrameEncoder:setChunkLength(ByteBuf-int) to listOf(ByteBuf:writerIndex(), CompressionException:<init>(String), ByteBufUtil:swapMedium(int), ByteBuf:setMedium(int-int)),
		SnappyFrameEncoder:writeChunkLength(ByteBuf-int) to listOf(ByteBufUtil:swapMedium(int), ByteBuf:writeMedium(int)),
		SnappyFrameEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf) to listOf(Snappy:calculateChecksum(ByteBuf), ByteBufUtil:swapInt(int), ByteBuf:writeInt(int)),
		SnappyFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(SnappyFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		JdkZlibEncoder$2:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		JdkZlibEncoder$2:operationComplete(Future) to listOf(JdkZlibEncoder$2:operationComplete(ChannelFuture)),
		JdkZlibDecoder$GzipState:values() to listOf(JdkZlibDecoder$GzipState[]:clone()),
		JdkZlibDecoder$GzipState:<clinit>() to listOf(JdkZlibDecoder$GzipState:<init>(String-int), JdkZlibDecoder$GzipState:<init>(String-int), JdkZlibDecoder$GzipState:<init>(String-int), JdkZlibDecoder$GzipState:<init>(String-int), JdkZlibDecoder$GzipState:<init>(String-int), JdkZlibDecoder$GzipState:<init>(String-int), JdkZlibDecoder$GzipState:<init>(String-int), JdkZlibDecoder$GzipState:<init>(String-int)),
		ZlibCodecFactory:newZlibEncoder(int) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(int), JdkZlibEncoder:<init>(int)),
		ZlibCodecFactory:newZlibEncoder(ZlibWrapper) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(ZlibWrapper), JdkZlibEncoder:<init>(ZlibWrapper)),
		ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(ZlibWrapper-int), JdkZlibEncoder:<init>(ZlibWrapper-int)),
		ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(ZlibWrapper-int-int-int), JdkZlibEncoder:<init>(ZlibWrapper-int)),
		ZlibCodecFactory:newZlibEncoder(byte[]) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(byte[]), JdkZlibEncoder:<init>(byte[])),
		ZlibCodecFactory:newZlibEncoder(int-byte[]) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(int-byte[]), JdkZlibEncoder:<init>(int-byte[])),
		ZlibCodecFactory:newZlibEncoder(int-int-int-byte[]) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(int-int-int-byte[]), JdkZlibEncoder:<init>(int-byte[])),
		ZlibCodecFactory:newZlibDecoder() to listOf(PlatformDependent:javaVersion(), JZlibDecoder:<init>(), JdkZlibDecoder:<init>()),
		ZlibCodecFactory:newZlibDecoder(ZlibWrapper) to listOf(PlatformDependent:javaVersion(), JZlibDecoder:<init>(ZlibWrapper), JdkZlibDecoder:<init>(ZlibWrapper)),
		ZlibCodecFactory:newZlibDecoder(byte[]) to listOf(PlatformDependent:javaVersion(), JZlibDecoder:<init>(byte[]), JdkZlibDecoder:<init>(byte[])),
		ZlibCodecFactory:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String-Object), SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String-Object)),
		ZlibUtil:fail(Inflater-String-int) to listOf(ZlibUtil:inflaterException(Inflater-String-int)),
		ZlibUtil:fail(Deflater-String-int) to listOf(ZlibUtil:deflaterException(Deflater-String-int)),
		ZlibUtil:inflaterException(Inflater-String-int) to listOf(DecompressionException:<init>(String)),
		ZlibUtil:deflaterException(Deflater-String-int) to listOf(CompressionException:<init>(String)),
		ZlibUtil:convertWrapperType(ZlibWrapper) to listOf(ZlibWrapper:ordinal()),
		ZlibUtil:wrapperOverhead(ZlibWrapper) to listOf(ZlibWrapper:ordinal()),
		Bzip2Encoder$1:run() to listOf(Bzip2Encoder:access$000(Bzip2Encoder), Bzip2Encoder:access$100(Bzip2Encoder-ChannelHandlerContext-ChannelPromise), ChannelPromiseNotifier:<init>(ChannelPromise[]), ChannelFuture:addListener(GenericFutureListener)),
		Lz4FrameDecoder$1:<clinit>() to listOf(Lz4FrameDecoder$State:values(), Lz4FrameDecoder$State:ordinal(), Lz4FrameDecoder$State:ordinal(), Lz4FrameDecoder$State:ordinal(), Lz4FrameDecoder$State:ordinal()),
		FastLzFrameEncoder:<init>() to listOf(FastLzFrameEncoder:<init>(int-Checksum)),
		FastLzFrameEncoder:<init>(int) to listOf(FastLzFrameEncoder:<init>(int-Checksum)),
		FastLzFrameEncoder:<init>(boolean) to listOf(FastLzFrameEncoder:<init>(int-Checksum)),
		FastLzFrameEncoder:<init>(int-Checksum) to listOf(MessageToByteEncoder:<init>(boolean)),
		FastLzFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:setMedium(int-int), ByteBuf:ensureWritable(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:getBytes(int-byte[]), ByteBuf:setInt(int-int), ByteBuf:getBytes(int-byte[]-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:getBytes(int-byte[]), ByteBuf:setInt(int-int), FastLz:calculateOutputBufferLength(int), ByteBuf:ensureWritable(int), ByteBuf:array(), ByteBuf:arrayOffset(), FastLz:compress(byte[]-int-int-byte[]-int-int), ByteBuf:setShort(int-int), ByteBuf:setShort(int-int), ByteBuf:setByte(int-int), ByteBuf:writerIndex(int), ByteBuf:skipBytes(int)),
		FastLzFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(FastLzFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		DecompressionException:<init>() to listOf(DecoderException:<init>()),
		DecompressionException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		DecompressionException:<init>(String) to listOf(DecoderException:<init>(String)),
		DecompressionException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		Bzip2Encoder$2:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		Bzip2Encoder$2:operationComplete(Future) to listOf(Bzip2Encoder$2:operationComplete(ChannelFuture)),
		Bzip2DivSufSort:ssInsertionSort(int-int-int-int) to listOf(Bzip2DivSufSort:ssCompare(int-int-int)),
		Bzip2DivSufSort:ssHeapSort(int-int-int-int) to listOf(Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:ssFixdown(int-int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:ssFixdown(int-int-int-int-int), Bzip2DivSufSort:ssFixdown(int-int-int-int-int)),
		Bzip2DivSufSort:ssPivot(int-int-int-int) to listOf(Bzip2DivSufSort:ssMedian3(int-int-int-int-int), Bzip2DivSufSort:ssMedian5(int-int-int-int-int-int-int), Bzip2DivSufSort:ssMedian3(int-int-int-int-int), Bzip2DivSufSort:ssMedian3(int-int-int-int-int), Bzip2DivSufSort:ssMedian3(int-int-int-int-int), Bzip2DivSufSort:ssMedian3(int-int-int-int-int)),
		Bzip2DivSufSort:ssMultiKeyIntroSort(int-int-int-int) to listOf(Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort:ssInsertionSort(int-int-int-int), Bzip2DivSufSort:ssHeapSort(int-int-int-int), Bzip2DivSufSort:ssSubstringPartition(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort:ssPivot(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:ssSubstringPartition(int-int-int-int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:ssLog(int), Bzip2DivSufSort:ssSubstringPartition(int-int-int-int), Bzip2DivSufSort:ssLog(int)),
		Bzip2DivSufSort:ssBlockSwap(int[]-int-int[]-int-int) to listOf(Bzip2DivSufSort:swapElements(int[]-int-int[]-int)),
		Bzip2DivSufSort:ssMergeForward(int-int[]-int-int-int-int-int) to listOf(Bzip2DivSufSort:ssBlockSwap(int[]-int-int[]-int-int), Bzip2DivSufSort:ssCompare(int-int-int)),
		Bzip2DivSufSort:ssMergeBackward(int-int[]-int-int-int-int-int) to listOf(Bzip2DivSufSort:ssBlockSwap(int[]-int-int[]-int-int), Bzip2DivSufSort:ssCompare(int-int-int)),
		Bzip2DivSufSort:ssMergeCheckEqual(int-int-int) to listOf(Bzip2DivSufSort:getIDX(int), Bzip2DivSufSort:ssCompare(int-int-int)),
		Bzip2DivSufSort:ssMerge(int-int-int-int-int[]-int-int-int) to listOf(Bzip2DivSufSort:ssMergeBackward(int-int[]-int-int-int-int-int), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int), Bzip2DivSufSort:ssMergeForward(int-int[]-int-int-int-int-int), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int), Bzip2DivSufSort:getIDX(int), Bzip2DivSufSort:getIDX(int), Bzip2DivSufSort:ssCompare(int-int-int), Bzip2DivSufSort:ssBlockSwap(int[]-int-int[]-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int), Bzip2DivSufSort:ssMergeCheckEqual(int-int-int)),
		Bzip2DivSufSort:subStringSort(int-int-int-int[]-int-int-int-boolean-int) to listOf(Bzip2DivSufSort:ssMultiKeyIntroSort(int-int-int-int), Bzip2DivSufSort:ssMerge(int-int-int-int-int[]-int-int-int), Bzip2DivSufSort:ssMultiKeyIntroSort(int-int-int-int), Bzip2DivSufSort:ssMerge(int-int-int-int-int[]-int-int-int), Bzip2DivSufSort:ssCompareLast(int-int-int-int-int)),
		Bzip2DivSufSort:trFixdown(int-int-int-int-int-int) to listOf(Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int)),
		Bzip2DivSufSort:trHeapSort(int-int-int-int-int) to listOf(Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trFixdown(int-int-int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trFixdown(int-int-int-int-int-int), Bzip2DivSufSort:trFixdown(int-int-int-int-int-int)),
		Bzip2DivSufSort:trInsertionSort(int-int-int-int-int) to listOf(Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int)),
		Bzip2DivSufSort:trMedian3(int-int-int-int-int-int) to listOf(Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int)),
		Bzip2DivSufSort:trMedian5(int-int-int-int-int-int-int-int) to listOf(Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int)),
		Bzip2DivSufSort:trPivot(int-int-int-int-int) to listOf(Bzip2DivSufSort:trMedian3(int-int-int-int-int-int), Bzip2DivSufSort:trMedian5(int-int-int-int-int-int-int-int), Bzip2DivSufSort:trMedian3(int-int-int-int-int-int), Bzip2DivSufSort:trMedian3(int-int-int-int-int-int), Bzip2DivSufSort:trMedian3(int-int-int-int-int-int), Bzip2DivSufSort:trMedian3(int-int-int-int-int-int)),
		Bzip2DivSufSort:lsIntroSort(int-int-int-int-int) to listOf(Bzip2DivSufSort:trLog(int), Bzip2DivSufSort:trInsertionSort(int-int-int-int-int), Bzip2DivSufSort:lsUpdateGroup(int-int-int), Bzip2DivSufSort:trHeapSort(int-int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:lsUpdateGroup(int-int-int), Bzip2DivSufSort:trPivot(int-int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int)),
		Bzip2DivSufSort:lsSort(int-int-int) to listOf(Bzip2DivSufSort:lsIntroSort(int-int-int-int-int)),
		Bzip2DivSufSort:trPartition(int-int-int-int-int-int) to listOf(Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort$PartitionResult:<init>(int-int)),
		Bzip2DivSufSort:trIntroSort(int-int-int-int-int-Bzip2DivSufSort$TRBudget-int) to listOf(Bzip2DivSufSort:trLog(int), Bzip2DivSufSort$TRBudget:update(int-int), Bzip2DivSufSort:trPartition(int-int-int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort:trCopy(int-int-int-int-int-int-int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$TRBudget:update(int-int), Bzip2DivSufSort:trInsertionSort(int-int-int-int-int), Bzip2DivSufSort$TRBudget:update(int-int), Bzip2DivSufSort:trHeapSort(int-int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trPivot(int-int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trGetC(int-int-int-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:swapElements(int[]-int-int[]-int), Bzip2DivSufSort:trLog(int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$StackEntry:<init>(int-int-int-int), Bzip2DivSufSort$TRBudget:update(int-int), Bzip2DivSufSort:lsUpdateGroup(int-int-int)),
		Bzip2DivSufSort:trSort(int-int-int) to listOf(Bzip2DivSufSort:trLog(int), Bzip2DivSufSort$TRBudget:<init>(int-int), Bzip2DivSufSort:trIntroSort(int-int-int-int-int-Bzip2DivSufSort$TRBudget-int), Bzip2DivSufSort:lsSort(int-int-int)),
		Bzip2DivSufSort:sortTypeBstar(int[]-int[]) to listOf(Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:subStringSort(int-int-int-int[]-int-int-int-boolean-int), Bzip2DivSufSort:trSort(int-int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_BSTAR(int-int)),
		Bzip2DivSufSort:constructBWT(int[]-int[]) to listOf(Bzip2DivSufSort:BUCKET_BSTAR(int-int), Bzip2DivSufSort:BUCKET_B(int-int), Bzip2DivSufSort:BUCKET_B(int-int)),
		Bzip2DivSufSort:bwt() to listOf(Bzip2DivSufSort:sortTypeBstar(int[]-int[]), Bzip2DivSufSort:constructBWT(int[]-int[])),
		Snappy$1:<clinit>() to listOf(Snappy$State:values(), Snappy$State:ordinal(), Snappy$State:ordinal(), Snappy$State:ordinal(), Snappy$State:ordinal(), Snappy$State:ordinal()),
		Bzip2HuffmanAllocator:findNodesToRelocate(int[]-int) to listOf(Bzip2HuffmanAllocator:first(int[]-int-int)),
		Bzip2HuffmanAllocator:allocateNodeLengths(int[]) to listOf(Bzip2HuffmanAllocator:first(int[]-int-int)),
		Bzip2HuffmanAllocator:allocateNodeLengthsWithRelocation(int[]-int-int) to listOf(Bzip2HuffmanAllocator:first(int[]-int-int)),
		Bzip2HuffmanAllocator:allocateHuffmanCodeLengths(int[]-int) to listOf(Bzip2HuffmanAllocator:setExtendedParentPointers(int[]), Bzip2HuffmanAllocator:findNodesToRelocate(int[]-int), Bzip2HuffmanAllocator:allocateNodeLengths(int[]), Bzip2HuffmanAllocator:allocateNodeLengthsWithRelocation(int[]-int-int)),
		ZlibWrapper:values() to listOf(ZlibWrapper[]:clone()),
		ZlibWrapper:<clinit>() to listOf(ZlibWrapper:<init>(String-int), ZlibWrapper:<init>(String-int), ZlibWrapper:<init>(String-int), ZlibWrapper:<init>(String-int)),
		JdkZlibEncoder:<init>() to listOf(JdkZlibEncoder:<init>(int)),
		JdkZlibEncoder:<init>(int) to listOf(JdkZlibEncoder:<init>(ZlibWrapper-int)),
		JdkZlibEncoder:<init>(ZlibWrapper) to listOf(JdkZlibEncoder:<init>(ZlibWrapper-int)),
		JdkZlibEncoder:<init>(ZlibWrapper-int) to listOf(ZlibEncoder:<init>()),
		JdkZlibEncoder:<init>(byte[]) to listOf(JdkZlibEncoder:<init>(int-byte[])),
		JdkZlibEncoder:<init>(int-byte[]) to listOf(ZlibEncoder:<init>()),
		JdkZlibEncoder:close() to listOf(JdkZlibEncoder:ctx(), ChannelHandlerContext:newPromise(), JdkZlibEncoder:close(ChannelPromise)),
		JdkZlibEncoder:close(ChannelPromise) to listOf(JdkZlibEncoder:ctx(), ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), ChannelHandlerContext:newPromise(), JdkZlibEncoder$1:<init>(JdkZlibEncoder-ChannelPromise-ChannelPromise), EventExecutor:execute(Runnable)),
		JdkZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf), ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:skipBytes(int), ByteBuf:readBytes(byte[]), ByteBuf:writeBytes(byte[]), JdkZlibEncoder:deflate(ByteBuf)),
		JdkZlibEncoder:allocateBuffer(ChannelHandlerContext-ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), ZlibWrapper:ordinal(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int)),
		JdkZlibEncoder:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:newPromise(), JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), JdkZlibEncoder$2:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:isDone(), ChannelHandlerContext:executor(), JdkZlibEncoder$3:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit)),
		JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(), ByteBuf:writeBytes(byte[]), JdkZlibEncoder:deflate(ByteBuf), ByteBuf:isWritable(), ChannelHandlerContext:write(Object), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		JdkZlibEncoder:deflate(ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writableBytes(), ByteBuf:writerIndex(int)),
		JdkZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(JdkZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		JdkZlibEncoder:allocateBuffer(ChannelHandlerContext-Object-boolean) to listOf(JdkZlibEncoder:allocateBuffer(ChannelHandlerContext-ByteBuf-boolean)),
		JdkZlibEncoder:access$000(JdkZlibEncoder) to listOf(JdkZlibEncoder:ctx()),
		JdkZlibEncoder:access$100(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise) to listOf(JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise)),
		JZlibEncoder:<init>() to listOf(JZlibEncoder:<init>(int)),
		JZlibEncoder:<init>(int) to listOf(JZlibEncoder:<init>(ZlibWrapper-int)),
		JZlibEncoder:<init>(ZlibWrapper) to listOf(JZlibEncoder:<init>(ZlibWrapper-int)),
		JZlibEncoder:<init>(ZlibWrapper-int) to listOf(JZlibEncoder:<init>(ZlibWrapper-int-int-int)),
		JZlibEncoder:<init>(ZlibWrapper-int-int-int) to listOf(ZlibEncoder:<init>(), Deflater:<init>(), ZlibUtil:convertWrapperType(ZlibWrapper), Deflater:init(int-int-int-JZlib$WrapperType), ZlibUtil:fail(Deflater-String-int), ZlibUtil:wrapperOverhead(ZlibWrapper)),
		JZlibEncoder:<init>(byte[]) to listOf(JZlibEncoder:<init>(int-byte[])),
		JZlibEncoder:<init>(int-byte[]) to listOf(JZlibEncoder:<init>(int-int-int-byte[])),
		JZlibEncoder:<init>(int-int-int-byte[]) to listOf(ZlibEncoder:<init>(), Deflater:<init>(), Deflater:deflateInit(int-int-int-JZlib$WrapperType), ZlibUtil:fail(Deflater-String-int), Deflater:deflateSetDictionary(byte[]-int), ZlibUtil:fail(Deflater-String-int), ZlibUtil:wrapperOverhead(ZlibWrapper)),
		JZlibEncoder:close() to listOf(JZlibEncoder:ctx(), ChannelHandlerContext:channel(), Channel:newPromise(), JZlibEncoder:close(ChannelPromise)),
		JZlibEncoder:close(ChannelPromise) to listOf(JZlibEncoder:ctx(), ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), ChannelHandlerContext:newPromise(), JZlibEncoder$1:<init>(JZlibEncoder-ChannelPromise-ChannelPromise), EventExecutor:execute(Runnable)),
		JZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf), ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), ByteBuf:ensureWritable(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), Deflater:deflate(int), ByteBuf:skipBytes(int), ByteBuf:skipBytes(int), ZlibUtil:fail(Deflater-String-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		JZlibEncoder:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:newPromise(), JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), JZlibEncoder$2:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:isDone(), ChannelHandlerContext:executor(), JZlibEncoder$3:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit)),
		JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise) to listOf(ChannelPromise:setSuccess(), Deflater:deflate(int), ZlibUtil:deflaterException(Deflater-String-int), ChannelPromise:setFailure(Throwable), Deflater:deflateEnd(), Unpooled:wrappedBuffer(byte[]-int-int), Deflater:deflateEnd(), Deflater:deflateEnd(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		JZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(JZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		JZlibEncoder:access$000(JZlibEncoder) to listOf(JZlibEncoder:ctx()),
		JZlibEncoder:access$100(JZlibEncoder-ChannelHandlerContext-ChannelPromise) to listOf(JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise)),
		LzfEncoder:<init>() to listOf(LzfEncoder:<init>(boolean-int)),
		LzfEncoder:<init>(boolean) to listOf(LzfEncoder:<init>(boolean-int)),
		LzfEncoder:<init>(int) to listOf(LzfEncoder:<init>(boolean-int)),
		LzfEncoder:<init>(boolean-int) to listOf(MessageToByteEncoder:<init>(boolean), ChunkEncoderFactory:safeNonAllocatingInstance(int), ChunkEncoderFactory:optimalNonAllocatingInstance(int), BufferRecycler:instance()),
		LzfEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), BufferRecycler:allocInputBuffer(int), ByteBuf:getBytes(int-byte[]-int-int), LZFEncoder:estimateMaxWorkspaceSize(int), ByteBuf:ensureWritable(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), LZFEncoder:appendEncoded(ChunkEncoder-byte[]-int-int-byte[]-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ByteBuf:skipBytes(int), ByteBuf:hasArray(), BufferRecycler:releaseInputBuffer(byte[])),
		LzfEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(LzfEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		JdkZlibEncoder$4:<clinit>() to listOf(ZlibWrapper:values(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal()),
		SnappyFrameDecoder:<init>() to listOf(SnappyFrameDecoder:<init>(boolean)),
		SnappyFrameDecoder:<init>(boolean) to listOf(ByteToMessageDecoder:<init>(), Snappy:<init>()),
		SnappyFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:getUnsignedByte(int), SnappyFrameDecoder:mapChunkType(byte), ByteBuf:getUnsignedMedium(int), ByteBufUtil:swapMedium(int), SnappyFrameDecoder$ChunkType:ordinal(), DecompressionException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readBytes(byte[]), DecompressionException:<init>(String), DecompressionException:<init>(String), ByteBuf:skipBytes(int), DecompressionException:<init>(String), DecompressionException:<init>(String), DecompressionException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readInt(), ByteBufUtil:swapInt(int), ByteBuf:readerIndex(), Snappy:validateChecksum(int-ByteBuf-int-int), ByteBuf:skipBytes(int), ByteBuf:readSlice(int), ByteBuf:retain(), DecompressionException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readInt(), ByteBufUtil:swapInt(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writerIndex(), ByteBuf:readerIndex(), ByteBuf:writerIndex(int), Snappy:decode(ByteBuf-ByteBuf), ByteBuf:writerIndex(int), ByteBuf:writerIndex(int), ByteBuf:writerIndex(), Snappy:validateChecksum(int-ByteBuf-int-int), ByteBuf:readSlice(int), Snappy:decode(ByteBuf-ByteBuf), Snappy:reset()),
		ZlibEncoder:<init>() to listOf(MessageToByteEncoder:<init>(boolean)),
		Bzip2BitReader:readBits(int) to listOf(ByteBuf:readableBytes(), ByteBuf:readUnsignedByte(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedMedium(), ByteBuf:readUnsignedInt()),
		Bzip2BitReader:readBoolean() to listOf(Bzip2BitReader:readBits(int)),
		Bzip2BitReader:readInt() to listOf(Bzip2BitReader:readBits(int)),
		Bzip2BitReader:refill() to listOf(ByteBuf:readUnsignedByte()),
		Bzip2BitReader:isReadable() to listOf(ByteBuf:isReadable()),
		Bzip2BitReader:hasReadableBits(int) to listOf(ByteBuf:readableBytes()),
		Bzip2BitReader:hasReadableBytes(int) to listOf(Bzip2BitReader:hasReadableBits(int)),
		Lz4FrameEncoder$1:run() to listOf(Lz4FrameEncoder:access$000(Lz4FrameEncoder), Lz4FrameEncoder:access$100(Lz4FrameEncoder-ChannelHandlerContext-ChannelPromise), ChannelPromiseNotifier:<init>(ChannelPromise[]), ChannelFuture:addListener(GenericFutureListener)),
		Bzip2Decoder$State:values() to listOf(Bzip2Decoder$State[]:clone()),
		Bzip2Decoder$State:<clinit>() to listOf(Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int), Bzip2Decoder$State:<init>(String-int)),
		Bzip2Encoder$4:<clinit>() to listOf(Bzip2Encoder$State:values(), Bzip2Encoder$State:ordinal(), Bzip2Encoder$State:ordinal(), Bzip2Encoder$State:ordinal(), Bzip2Encoder$State:ordinal()),
		LzmaFrameEncoder:<init>() to listOf(LzmaFrameEncoder:<init>(int)),
		LzmaFrameEncoder:<init>(int-int-int) to listOf(LzmaFrameEncoder:<init>(int-int-int-int)),
		LzmaFrameEncoder:<init>(int) to listOf(LzmaFrameEncoder:<init>(int-int-int-int)),
		LzmaFrameEncoder:<init>(int-int-int-int) to listOf(LzmaFrameEncoder:<init>(int-int-int-int-boolean-int)),
		LzmaFrameEncoder:<init>(int-int-int-int-boolean-int) to listOf(MessageToByteEncoder:<init>(), InternalLogger:warn(String), Encoder:<init>(), Encoder:setDictionarySize(int), Encoder:setEndMarkerMode(boolean), Encoder:setMatchFinder(int), Encoder:setNumFastBytes(int), Encoder:setLcLpPb(int-int-int)),
		LzmaFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufInputStream:<init>(ByteBuf), ByteBufOutputStream:<init>(ByteBuf), ByteBufOutputStream:writeByte(int), ByteBufOutputStream:writeInt(int), ByteBufOutputStream:writeLong(long), Encoder:code(InputStream-OutputStream-long-long-ICodeProgress), ByteBufOutputStream:close()),
		LzmaFrameEncoder:allocateBuffer(ChannelHandlerContext-ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), LzmaFrameEncoder:maxOutputBufferLength(int), ChannelHandlerContext:alloc(), ByteBufAllocator:ioBuffer(int)),
		LzmaFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(LzmaFrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		LzmaFrameEncoder:allocateBuffer(ChannelHandlerContext-Object-boolean) to listOf(LzmaFrameEncoder:allocateBuffer(ChannelHandlerContext-ByteBuf-boolean)),
		LzmaFrameEncoder:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		Bzip2MTFAndRLE2StageEncoder:encode() to listOf(Bzip2MoveToFrontTable:<init>(), Bzip2MoveToFrontTable:valueToFront(byte)),
		Bzip2Decoder:<init>() to listOf(ByteToMessageDecoder:<init>(), Bzip2BitReader:<init>()),
		Bzip2Decoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:isReadable(), Bzip2BitReader:setByteBuf(ByteBuf), Bzip2Decoder$State:ordinal(), ByteBuf:readableBytes(), ByteBuf:readUnsignedMedium(), DecompressionException:<init>(String), ByteBuf:readByte(), DecompressionException:<init>(String), Bzip2BitReader:hasReadableBytes(int), Bzip2BitReader:readBits(int), Bzip2BitReader:readBits(int), Bzip2BitReader:readInt(), DecompressionException:<init>(String), DecompressionException:<init>(String), Bzip2BitReader:readInt(), Bzip2BitReader:hasReadableBits(int), Bzip2BitReader:readBoolean(), Bzip2BitReader:readBits(int), Bzip2BlockDecompressor:<init>(int-int-boolean-int-Bzip2BitReader), Bzip2BitReader:hasReadableBits(int), Bzip2BitReader:readBits(int), Bzip2BitReader:hasReadableBits(int), Bzip2BitReader:readBoolean(), Bzip2BitReader:readBits(int), DecompressionException:<init>(String), DecompressionException:<init>(String), Bzip2HuffmanStageDecoder:<init>(Bzip2BitReader-int-int), Bzip2BitReader:hasReadableBits(int), Bzip2BitReader:readBits(int), DecompressionException:<init>(String), Bzip2BitReader:hasReadableBits(int), Bzip2BitReader:readBoolean(), Bzip2MoveToFrontTable:indexToFront(int), Bzip2BitReader:hasReadableBits(int), Bzip2BitReader:readBits(int), Bzip2BitReader:isReadable(), Bzip2BitReader:readBoolean(), Bzip2BitReader:isReadable(), Bzip2BitReader:readBoolean(), Bzip2BitReader:isReadable(), Bzip2HuffmanStageDecoder:createHuffmanDecodingTables(), ByteBuf:readerIndex(), Bzip2BlockDecompressor:decodeHuffmanData(Bzip2HuffmanStageDecoder), ByteBuf:readerIndex(), ByteBuf:isReadable(), Bzip2BitReader:refill(), Bzip2BlockDecompressor:blockLength(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), Bzip2BlockDecompressor:read(), ByteBuf:writeByte(int), Bzip2BlockDecompressor:checkCRC(), ByteBuf:release(), ByteBuf:release(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		Bzip2BlockDecompressor:<init>(int-int-boolean-int-Bzip2BitReader) to listOf(Crc32:<init>(), Bzip2Rand:rNums(int), Bzip2MoveToFrontTable:<init>()),
		Bzip2BlockDecompressor:decodeHuffmanData(Bzip2HuffmanStageDecoder) to listOf(Bzip2BitReader:hasReadableBits(int), Bzip2HuffmanStageDecoder:nextSymbol(), DecompressionException:<init>(String), DecompressionException:<init>(String), Bzip2MoveToFrontTable:indexToFront(int), Bzip2BlockDecompressor:initialiseInverseBWT()),
		Bzip2BlockDecompressor:initialiseInverseBWT() to listOf(DecompressionException:<init>(String)),
		Bzip2BlockDecompressor:read() to listOf(Bzip2BlockDecompressor:decodeNextBWTByte(), Crc32:updateCRC(int), Bzip2BlockDecompressor:decodeNextBWTByte(), Crc32:updateCRC(int-int), Crc32:updateCRC(int)),
		Bzip2BlockDecompressor:decodeNextBWTByte() to listOf(Bzip2Rand:rNums(int)),
		Bzip2BlockDecompressor:checkCRC() to listOf(Crc32:getCRC(), DecompressionException:<init>(String)),
		Lz4FrameEncoder$3:run() to listOf(ChannelHandlerContext:close(ChannelPromise)),
		LzfDecoder:<init>() to listOf(LzfDecoder:<init>(boolean)),
		LzfDecoder:<init>(boolean) to listOf(ByteToMessageDecoder:<init>(), ChunkDecoderFactory:safeInstance(), ChunkDecoderFactory:optimalInstance(), BufferRecycler:instance()),
		LzfDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(LzfDecoder$State:ordinal(), ByteBuf:readableBytes(), ByteBuf:readUnsignedShort(), DecompressionException:<init>(String), ByteBuf:readByte(), DecompressionException:<init>(String), ByteBuf:readUnsignedShort(), ByteBuf:readableBytes(), ByteBuf:readUnsignedShort(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), BufferRecycler:allocInputBuffer(int), ByteBuf:getBytes(int-byte[]-int-int), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int-int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), ChunkDecoder:decodeChunk(byte[]-int-byte[]-int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ByteBuf:skipBytes(int), ByteBuf:release(), ByteBuf:release(), ByteBuf:hasArray(), BufferRecycler:releaseInputBuffer(byte[]), ByteBuf:readSlice(int), ByteBuf:retain(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		JZlibEncoder$1:run() to listOf(JZlibEncoder:access$000(JZlibEncoder), JZlibEncoder:access$100(JZlibEncoder-ChannelHandlerContext-ChannelPromise), ChannelPromiseNotifier:<init>(ChannelPromise[]), ChannelFuture:addListener(GenericFutureListener)),
		Bzip2HuffmanStageDecoder:<init>(Bzip2BitReader-int-int) to listOf(Bzip2MoveToFrontTable:<init>()),
		Bzip2HuffmanStageDecoder:nextSymbol() to listOf(DecompressionException:<init>(String), Bzip2BitReader:readBits(int), Bzip2BitReader:readBits(int), DecompressionException:<init>(String)),
		JdkZlibEncoder$1:run() to listOf(JdkZlibEncoder:access$000(JdkZlibEncoder), JdkZlibEncoder:access$100(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), ChannelPromiseNotifier:<init>(ChannelPromise[]), ChannelFuture:addListener(GenericFutureListener)),
		Bzip2Encoder$3:run() to listOf(ChannelHandlerContext:close(ChannelPromise)),
		ZlibUtil$1:<clinit>() to listOf(ZlibWrapper:values(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal()),
		Bzip2Encoder:<init>() to listOf(Bzip2Encoder:<init>(int)),
		Bzip2Encoder:<init>(int) to listOf(MessageToByteEncoder:<init>(), Bzip2BitWriter:<init>()),
		Bzip2Encoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf), Bzip2Encoder$State:ordinal(), ByteBuf:ensureWritable(int), ByteBuf:writeMedium(int), ByteBuf:writeByte(int), Bzip2BlockCompressor:<init>(Bzip2BitWriter-int), ByteBuf:isReadable(), ByteBuf:readableBytes(), Bzip2BlockCompressor:availableSize(), ByteBuf:readableBytes(), Bzip2BlockCompressor:availableSize(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), Bzip2BlockCompressor:write(byte[]-int-int), ByteBuf:skipBytes(int), Bzip2BlockCompressor:isFull(), ByteBuf:isReadable(), Bzip2Encoder:closeBlock(ByteBuf)),
		Bzip2Encoder:closeBlock(ByteBuf) to listOf(Bzip2BlockCompressor:isEmpty(), Bzip2BlockCompressor:close(ByteBuf), Bzip2BlockCompressor:crc()),
		Bzip2Encoder:close() to listOf(Bzip2Encoder:ctx(), ChannelHandlerContext:newPromise(), Bzip2Encoder:close(ChannelPromise)),
		Bzip2Encoder:close(ChannelPromise) to listOf(Bzip2Encoder:ctx(), ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), Bzip2Encoder:finishEncode(ChannelHandlerContext-ChannelPromise), Bzip2Encoder$1:<init>(Bzip2Encoder-ChannelPromise), EventExecutor:execute(Runnable)),
		Bzip2Encoder:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:newPromise(), Bzip2Encoder:finishEncode(ChannelHandlerContext-ChannelPromise), Bzip2Encoder$2:<init>(Bzip2Encoder-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:isDone(), ChannelHandlerContext:executor(), Bzip2Encoder$3:<init>(Bzip2Encoder-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit)),
		Bzip2Encoder:finishEncode(ChannelHandlerContext-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), Bzip2Encoder:closeBlock(ByteBuf), Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2BitWriter:writeInt(ByteBuf-int), Bzip2BitWriter:flush(ByteBuf), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		Bzip2Encoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(Bzip2Encoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		Bzip2Encoder:access$000(Bzip2Encoder) to listOf(Bzip2Encoder:ctx()),
		Bzip2Encoder:access$100(Bzip2Encoder-ChannelHandlerContext-ChannelPromise) to listOf(Bzip2Encoder:finishEncode(ChannelHandlerContext-ChannelPromise)),
		FastLzFrameDecoder$1:<clinit>() to listOf(FastLzFrameDecoder$State:values(), FastLzFrameDecoder$State:ordinal(), FastLzFrameDecoder$State:ordinal(), FastLzFrameDecoder$State:ordinal(), FastLzFrameDecoder$State:ordinal()),
		JZlibEncoder$3:run() to listOf(ChannelHandlerContext:close(ChannelPromise)),
		JZlibEncoder$2:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		JZlibEncoder$2:operationComplete(Future) to listOf(JZlibEncoder$2:operationComplete(ChannelFuture)),
		ZlibDecoder:<init>() to listOf(ByteToMessageDecoder:<init>()),
		Snappy:encode(ByteBuf-ByteBuf-int) to listOf(ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:readerIndex(), Snappy:getHashTable(int), Snappy:hash(ByteBuf-int-int), Snappy:hash(ByteBuf-int-int), ByteBuf:getInt(int), ByteBuf:getInt(int), Snappy:encodeLiteral(ByteBuf-ByteBuf-int), Snappy:findMatchingLength(ByteBuf-int-int-int), Snappy:encodeCopy(ByteBuf-int-int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), Snappy:hash(ByteBuf-int-int), Snappy:hash(ByteBuf-int-int), ByteBuf:getInt(int), ByteBuf:getInt(int), Snappy:hash(ByteBuf-int-int), Snappy:encodeLiteral(ByteBuf-ByteBuf-int)),
		Snappy:hash(ByteBuf-int-int) to listOf(ByteBuf:getInt(int)),
		Snappy:findMatchingLength(ByteBuf-int-int-int) to listOf(ByteBuf:getInt(int), ByteBuf:getInt(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		Snappy:encodeLiteral(ByteBuf-ByteBuf-int) to listOf(ByteBuf:writeByte(int), Snappy:bitsToEncode(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeBytes(ByteBuf-int)),
		Snappy:encodeCopyWithOffset(ByteBuf-int-int) to listOf(ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int)),
		Snappy:encodeCopy(ByteBuf-int-int) to listOf(Snappy:encodeCopyWithOffset(ByteBuf-int-int), Snappy:encodeCopyWithOffset(ByteBuf-int-int), Snappy:encodeCopyWithOffset(ByteBuf-int-int)),
		Snappy:decode(ByteBuf-ByteBuf) to listOf(ByteBuf:isReadable(), Snappy$State:ordinal(), Snappy:readPreamble(ByteBuf), ByteBuf:ensureWritable(int), ByteBuf:isReadable(), ByteBuf:readByte(), Snappy:decodeLiteral(byte-ByteBuf-ByteBuf), Snappy:decodeCopyWith1ByteOffset(byte-ByteBuf-ByteBuf-int), Snappy:decodeCopyWith2ByteOffset(byte-ByteBuf-ByteBuf-int), Snappy:decodeCopyWith4ByteOffset(byte-ByteBuf-ByteBuf-int)),
		Snappy:readPreamble(ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), DecompressionException:<init>(String)),
		Snappy:decodeLiteral(byte-ByteBuf-ByteBuf) to listOf(ByteBuf:markReaderIndex(), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), ByteBuf:readableBytes(), ByteBuf:readShort(), ByteBufUtil:swapShort(short), ByteBuf:readableBytes(), ByteBuf:readUnsignedMedium(), ByteBufUtil:swapMedium(int), ByteBuf:readableBytes(), ByteBuf:readInt(), ByteBufUtil:swapInt(int), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), ByteBuf:writeBytes(ByteBuf-int)),
		Snappy:decodeCopyWith1ByteOffset(byte-ByteBuf-ByteBuf-int) to listOf(ByteBuf:isReadable(), ByteBuf:writerIndex(), ByteBuf:readUnsignedByte(), Snappy:validateOffset(int-int), ByteBuf:markReaderIndex(), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:resetReaderIndex()),
		Snappy:decodeCopyWith2ByteOffset(byte-ByteBuf-ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readShort(), ByteBufUtil:swapShort(short), Snappy:validateOffset(int-int), ByteBuf:markReaderIndex(), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:resetReaderIndex()),
		Snappy:decodeCopyWith4ByteOffset(byte-ByteBuf-ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readInt(), ByteBufUtil:swapInt(int), Snappy:validateOffset(int-int), ByteBuf:markReaderIndex(), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:resetReaderIndex()),
		Snappy:validateOffset(int-int) to listOf(DecompressionException:<init>(String), DecompressionException:<init>(String), DecompressionException:<init>(String)),
		Snappy:calculateChecksum(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Snappy:calculateChecksum(ByteBuf-int-int)),
		Snappy:calculateChecksum(ByteBuf-int-int) to listOf(Crc32c:<init>(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), Crc32c:update(byte[]-int-int), ByteBuf:getBytes(int-byte[]), Crc32c:update(byte[]-int-int), Crc32c:getValue(), Snappy:maskChecksum(int), Crc32c:reset(), Crc32c:reset()),
		Snappy:validateChecksum(int-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Snappy:validateChecksum(int-ByteBuf-int-int)),
		Snappy:validateChecksum(int-ByteBuf-int-int) to listOf(Snappy:calculateChecksum(ByteBuf-int-int), DecompressionException:<init>(String)),
		FastLz:compress(byte[]-int-int-byte[]-int-int) to listOf(FastLz:readU16(byte[]-int), FastLz:readU16(byte[]-int), FastLz:hashFunction(byte[]-int), FastLz:hashFunction(byte[]-int), FastLz:hashFunction(byte[]-int)),
		FastLz:decompress(byte[]-int-int-byte[]-int-int) to listOf(DecompressionException:<init>(String)),
		FastLz:hashFunction(byte[]-int) to listOf(FastLz:readU16(byte[]-int), FastLz:readU16(byte[]-int)),
		FastLzFrameDecoder$State:values() to listOf(FastLzFrameDecoder$State[]:clone()),
		FastLzFrameDecoder$State:<clinit>() to listOf(FastLzFrameDecoder$State:<init>(String-int), FastLzFrameDecoder$State:<init>(String-int), FastLzFrameDecoder$State:<init>(String-int), FastLzFrameDecoder$State:<init>(String-int)),
		JdkZlibEncoder$3:run() to listOf(ChannelHandlerContext:close(ChannelPromise)),
		Lz4FrameDecoder$State:values() to listOf(Lz4FrameDecoder$State[]:clone()),
		Lz4FrameDecoder$State:<clinit>() to listOf(Lz4FrameDecoder$State:<init>(String-int), Lz4FrameDecoder$State:<init>(String-int), Lz4FrameDecoder$State:<init>(String-int), Lz4FrameDecoder$State:<init>(String-int)),
		Bzip2BlockCompressor:<init>(Bzip2BitWriter-int) to listOf(Crc32:<init>()),
		Bzip2BlockCompressor:writeSymbolMap(ByteBuf) to listOf(Bzip2BitWriter:writeBoolean(ByteBuf-boolean), Bzip2BitWriter:writeBoolean(ByteBuf-boolean)),
		Bzip2BlockCompressor:writeRun(int-int) to listOf(Crc32:updateCRC(int-int)),
		Bzip2BlockCompressor:write(int) to listOf(Bzip2BlockCompressor:writeRun(int-int), Bzip2BlockCompressor:writeRun(int-int)),
		Bzip2BlockCompressor:write(byte[]-int-int) to listOf(Bzip2BlockCompressor:write(int)),
		Bzip2BlockCompressor:close(ByteBuf) to listOf(Bzip2BlockCompressor:writeRun(int-int), Bzip2DivSufSort:<init>(byte[]-int[]-int), Bzip2DivSufSort:bwt(), Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2BitWriter:writeBits(ByteBuf-int-long), Crc32:getCRC(), Bzip2BitWriter:writeInt(ByteBuf-int), Bzip2BitWriter:writeBoolean(ByteBuf-boolean), Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2BlockCompressor:writeSymbolMap(ByteBuf), Bzip2MTFAndRLE2StageEncoder:<init>(int[]-int-boolean[]), Bzip2MTFAndRLE2StageEncoder:encode(), Bzip2MTFAndRLE2StageEncoder:mtfBlock(), Bzip2MTFAndRLE2StageEncoder:mtfLength(), Bzip2MTFAndRLE2StageEncoder:mtfAlphabetSize(), Bzip2MTFAndRLE2StageEncoder:mtfSymbolFrequencies(), Bzip2HuffmanStageEncoder:<init>(Bzip2BitWriter-char[]-int-int-int[]), Bzip2HuffmanStageEncoder:encode(ByteBuf)),
		Bzip2BlockCompressor:crc() to listOf(Crc32:getCRC()),
		JZlibDecoder:<init>() to listOf(JZlibDecoder:<init>(ZlibWrapper)),
		JZlibDecoder:<init>(ZlibWrapper) to listOf(ZlibDecoder:<init>(), Inflater:<init>(), ZlibUtil:convertWrapperType(ZlibWrapper), Inflater:init(JZlib$WrapperType), ZlibUtil:fail(Inflater-String-int)),
		JZlibDecoder:<init>(byte[]) to listOf(ZlibDecoder:<init>(), Inflater:<init>(), Inflater:inflateInit(JZlib$WrapperType), ZlibUtil:fail(Inflater-String-int)),
		JZlibDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int), ByteBuf:ensureWritable(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), Inflater:inflate(int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ZlibUtil:fail(Inflater-String-int), Inflater:inflateSetDictionary(byte[]-int), ZlibUtil:fail(Inflater-String-int), Inflater:inflateEnd(), ZlibUtil:fail(Inflater-String-int), ByteBuf:skipBytes(int), ByteBuf:isReadable(), ByteBuf:release(), ByteBuf:skipBytes(int), ByteBuf:isReadable(), ByteBuf:release()),
		SnappyFrameDecoder$1:<clinit>() to listOf(SnappyFrameDecoder$ChunkType:values(), SnappyFrameDecoder$ChunkType:ordinal(), SnappyFrameDecoder$ChunkType:ordinal(), SnappyFrameDecoder$ChunkType:ordinal(), SnappyFrameDecoder$ChunkType:ordinal(), SnappyFrameDecoder$ChunkType:ordinal()),
		Crc32:updateCRC(int-int) to listOf(Crc32:updateCRC(int)),
		CompressionException:<init>() to listOf(EncoderException:<init>()),
		CompressionException:<init>(String-Throwable) to listOf(EncoderException:<init>(String-Throwable)),
		CompressionException:<init>(String) to listOf(EncoderException:<init>(String)),
		CompressionException:<init>(Throwable) to listOf(EncoderException:<init>(Throwable)),
		Bzip2BitWriter:writeBits(ByteBuf-int-long) to listOf(ByteBuf:writeInt(int)),
		Bzip2BitWriter:writeBoolean(ByteBuf-boolean) to listOf(ByteBuf:writeInt(int)),
		Bzip2BitWriter:writeUnary(ByteBuf-int) to listOf(Bzip2BitWriter:writeBoolean(ByteBuf-boolean), Bzip2BitWriter:writeBoolean(ByteBuf-boolean)),
		Bzip2BitWriter:writeInt(ByteBuf-int) to listOf(Bzip2BitWriter:writeBits(ByteBuf-int-long)),
		Bzip2BitWriter:flush(ByteBuf) to listOf(ByteBuf:writeByte(int), ByteBuf:writeShort(int), ByteBuf:writeMedium(int), ByteBuf:writeInt(int)),
		LzfDecoder$State:values() to listOf(LzfDecoder$State[]:clone()),
		LzfDecoder$State:<clinit>() to listOf(LzfDecoder$State:<init>(String-int), LzfDecoder$State:<init>(String-int), LzfDecoder$State:<init>(String-int), LzfDecoder$State:<init>(String-int)),
		Lz4FrameEncoder:<init>() to listOf(Lz4FrameEncoder:<init>(boolean)),
		Lz4FrameEncoder:<init>(boolean) to listOf(LZ4Factory:fastestInstance(), XXHashFactory:fastestInstance(), XXHashFactory:newStreamingHash32(int), StreamingXXHash32:asChecksum(), Lz4FrameEncoder:<init>(LZ4Factory-boolean-int-Checksum)),
		Lz4FrameEncoder:<init>(LZ4Factory-boolean-int-Checksum) to listOf(MessageToByteEncoder:<init>(boolean), LZ4Factory:highCompressor(), LZ4Factory:fastCompressor(), Lz4FrameEncoder:compressionLevel(int), LZ4Compressor:maxCompressedLength(int)),
		Lz4FrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]-int-int), Lz4FrameEncoder:flushBufferedData(ByteBuf), ByteBuf:skipBytes(int), ByteBuf:readBytes(byte[]-int-int)),
		Lz4FrameEncoder:flushBufferedData(ByteBuf) to listOf(ByteBuf:ensureWritable(int), ByteBuf:writerIndex(), ByteBuf:array(), ByteBuf:arrayOffset(), LZ4Compressor:compress(byte[]-int-int-byte[]-int), CompressionException:<init>(Throwable), ByteBuf:setLong(int-long), Lz4FrameEncoder:writeIntLE(int-byte[]-int), Lz4FrameEncoder:writeIntLE(int-byte[]-int), Lz4FrameEncoder:writeIntLE(int-byte[]-int), ByteBuf:writerIndex(int)),
		Lz4FrameEncoder:finishEncode(ChannelHandlerContext-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelHandlerContext:alloc(), LZ4Compressor:maxCompressedLength(int), ByteBufAllocator:heapBuffer(int), Lz4FrameEncoder:flushBufferedData(ByteBuf), ByteBuf:writerIndex(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:setLong(int-long), Lz4FrameEncoder:writeIntLE(int-byte[]-int), Lz4FrameEncoder:writeIntLE(int-byte[]-int), Lz4FrameEncoder:writeIntLE(int-byte[]-int), ByteBuf:writerIndex(int), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		Lz4FrameEncoder:close() to listOf(Lz4FrameEncoder:ctx(), ChannelHandlerContext:newPromise(), Lz4FrameEncoder:close(ChannelPromise)),
		Lz4FrameEncoder:close(ChannelPromise) to listOf(Lz4FrameEncoder:ctx(), ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), Lz4FrameEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), Lz4FrameEncoder$1:<init>(Lz4FrameEncoder-ChannelPromise), EventExecutor:execute(Runnable)),
		Lz4FrameEncoder:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:newPromise(), Lz4FrameEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), Lz4FrameEncoder$2:<init>(Lz4FrameEncoder-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:isDone(), ChannelHandlerContext:executor(), Lz4FrameEncoder$3:<init>(Lz4FrameEncoder-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit)),
		Lz4FrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(Lz4FrameEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		Lz4FrameEncoder:access$000(Lz4FrameEncoder) to listOf(Lz4FrameEncoder:ctx()),
		Lz4FrameEncoder:access$100(Lz4FrameEncoder-ChannelHandlerContext-ChannelPromise) to listOf(Lz4FrameEncoder:finishEncode(ChannelHandlerContext-ChannelPromise)),
		Bzip2Encoder$State:values() to listOf(Bzip2Encoder$State[]:clone()),
		Bzip2Encoder$State:<clinit>() to listOf(Bzip2Encoder$State:<init>(String-int), Bzip2Encoder$State:<init>(String-int), Bzip2Encoder$State:<init>(String-int), Bzip2Encoder$State:<init>(String-int)),
		SnappyFrameDecoder$ChunkType:values() to listOf(SnappyFrameDecoder$ChunkType[]:clone()),
		SnappyFrameDecoder$ChunkType:<clinit>() to listOf(SnappyFrameDecoder$ChunkType:<init>(String-int), SnappyFrameDecoder$ChunkType:<init>(String-int), SnappyFrameDecoder$ChunkType:<init>(String-int), SnappyFrameDecoder$ChunkType:<init>(String-int), SnappyFrameDecoder$ChunkType:<init>(String-int)),
		Bzip2HuffmanStageEncoder:<init>(Bzip2BitWriter-char[]-int-int-int[]) to listOf(Bzip2HuffmanStageEncoder:selectTableCount(int)),
		Bzip2HuffmanStageEncoder:generateHuffmanCodeLengths(int-int[]-int[]) to listOf(Bzip2HuffmanAllocator:allocateHuffmanCodeLengths(int[]-int)),
		Bzip2HuffmanStageEncoder:optimiseSelectorsAndHuffmanTables(boolean) to listOf(Bzip2HuffmanStageEncoder:generateHuffmanCodeLengths(int-int[]-int[])),
		Bzip2HuffmanStageEncoder:writeSelectorsAndHuffmanTables(ByteBuf) to listOf(Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2MoveToFrontTable:<init>(), Bzip2MoveToFrontTable:valueToFront(byte), Bzip2BitWriter:writeUnary(ByteBuf-int), Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2BitWriter:writeBits(ByteBuf-int-long), Bzip2BitWriter:writeBoolean(ByteBuf-boolean)),
		Bzip2HuffmanStageEncoder:writeBlockData(ByteBuf) to listOf(Bzip2BitWriter:writeBits(ByteBuf-int-long)),
		Bzip2HuffmanStageEncoder:encode(ByteBuf) to listOf(Bzip2HuffmanStageEncoder:generateHuffmanOptimisationSeeds(), Bzip2HuffmanStageEncoder:optimiseSelectorsAndHuffmanTables(boolean), Bzip2HuffmanStageEncoder:assignHuffmanCodeSymbols(), Bzip2HuffmanStageEncoder:writeSelectorsAndHuffmanTables(ByteBuf), Bzip2HuffmanStageEncoder:writeBlockData(ByteBuf)),
		Crc32c:update(int) to listOf(Crc32c:crc32c(int-int)),
		Crc32c:update(byte[]-int-int) to listOf(Crc32c:crc32c(int-int)),
		JdkZlibDecoder$1:<clinit>() to listOf(JdkZlibDecoder$GzipState:values(), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder$GzipState:ordinal(), JdkZlibDecoder$GzipState:ordinal(), ZlibWrapper:values(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal()),
		Snappy$State:values() to listOf(Snappy$State[]:clone()),
		Snappy$State:<clinit>() to listOf(Snappy$State:<init>(String-int), Snappy$State:<init>(String-int), Snappy$State:<init>(String-int), Snappy$State:<init>(String-int), Snappy$State:<init>(String-int)),
		Lz4FrameDecoder:<init>() to listOf(Lz4FrameDecoder:<init>(boolean)),
		Lz4FrameDecoder:<init>(boolean) to listOf(LZ4Factory:fastestInstance(), Lz4FrameDecoder:<init>(LZ4Factory-boolean)),
		Lz4FrameDecoder:<init>(LZ4Factory-boolean) to listOf(XXHashFactory:fastestInstance(), XXHashFactory:newStreamingHash32(int), StreamingXXHash32:asChecksum(), Lz4FrameDecoder:<init>(LZ4Factory-Checksum)),
		Lz4FrameDecoder:<init>(LZ4Factory-Checksum) to listOf(ByteToMessageDecoder:<init>(), LZ4Factory:fastDecompressor()),
		Lz4FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Lz4FrameDecoder$State:ordinal(), ByteBuf:readableBytes(), ByteBuf:readLong(), DecompressionException:<init>(String), ByteBuf:readByte(), ByteBuf:readInt(), DecompressionException:<init>(String), ByteBuf:readInt(), DecompressionException:<init>(String), DecompressionException:<init>(String), ByteBuf:readInt(), DecompressionException:<init>(String), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int-int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), ByteBuf:getBytes(int-byte[]-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:getBytes(int-byte[]), LZ4FastDecompressor:decompress(byte[]-int-byte[]-int-int), DecompressionException:<init>(String), DecompressionException:<init>(Throwable), DecompressionException:<init>(String), DecompressionException:<init>(String), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ByteBuf:skipBytes(int), ByteBuf:release(), ByteBuf:release(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		Lz4FrameEncoder$2:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		Lz4FrameEncoder$2:operationComplete(Future) to listOf(Lz4FrameEncoder$2:operationComplete(ChannelFuture)),
		EmptyHeaders:iterator() to listOf(EmptyHeaders:entries()),
		EmptyHeaders:equals(Object) to listOf(EmptyHeaders:isEmpty(), Headers:isEmpty()),
		LengthFieldPrepender:<init>(int) to listOf(LengthFieldPrepender:<init>(int-boolean)),
		LengthFieldPrepender:<init>(int-boolean) to listOf(LengthFieldPrepender:<init>(int-int-boolean)),
		LengthFieldPrepender:<init>(int-int) to listOf(LengthFieldPrepender:<init>(int-int-boolean)),
		LengthFieldPrepender:<init>(int-int-boolean) to listOf(MessageToMessageEncoder:<init>()),
		LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeByte(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeShort(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeMedium(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeInt(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeLong(long), ByteBuf:retain()),
		LengthFieldPrepender:encode(ChannelHandlerContext-Object-List) to listOf(LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-List)),
		DefaultBinaryHeaders$1:generateHashCode(AsciiString) to listOf(AsciiString:caseInsensitiveHashCode(CharSequence)),
		DefaultBinaryHeaders$1:generateHashCode(Object) to listOf(DefaultBinaryHeaders$1:generateHashCode(AsciiString)),
		DefaultTextHeaders$SingleHeaderValuesComposer:<init>(DefaultTextHeaders) to listOf(DefaultTextHeaders:valueConverter()),
		DefaultTextHeaders$SingleHeaderValuesComposer:objectEscaper() to listOf(DefaultTextHeaders$SingleHeaderValuesComposer$1:<init>(DefaultTextHeaders$SingleHeaderValuesComposer)),
		DefaultTextHeaders$SingleHeaderValuesComposer:charSequenceEscaper() to listOf(DefaultTextHeaders$SingleHeaderValuesComposer$2:<init>(DefaultTextHeaders$SingleHeaderValuesComposer)),
		DefaultTextHeaders$SingleHeaderValuesComposer:add(CharSequence-CharSequence) to listOf(StringUtil:escapeCsv(CharSequence), DefaultTextHeaders$SingleHeaderValuesComposer:addEscapedValue(CharSequence-CharSequence)),
		DefaultTextHeaders$SingleHeaderValuesComposer:add(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:charSequenceEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Object[]), DefaultTextHeaders$SingleHeaderValuesComposer:addEscapedValue(CharSequence-CharSequence)),
		DefaultTextHeaders$SingleHeaderValuesComposer:add(CharSequence-Iterable) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:charSequenceEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Iterable), DefaultTextHeaders$SingleHeaderValuesComposer:addEscapedValue(CharSequence-CharSequence)),
		DefaultTextHeaders$SingleHeaderValuesComposer:addObject(CharSequence-Iterable) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:objectEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Iterable), DefaultTextHeaders$SingleHeaderValuesComposer:addEscapedValue(CharSequence-CharSequence)),
		DefaultTextHeaders$SingleHeaderValuesComposer:addObject(CharSequence-Object[]) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:objectEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Object[]), DefaultTextHeaders$SingleHeaderValuesComposer:addEscapedValue(CharSequence-CharSequence)),
		DefaultTextHeaders$SingleHeaderValuesComposer:set(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:charSequenceEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Object[]), DefaultTextHeaders:access$1201(DefaultTextHeaders-Object-Object)),
		DefaultTextHeaders$SingleHeaderValuesComposer:set(CharSequence-Iterable) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:charSequenceEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Iterable), DefaultTextHeaders:access$1301(DefaultTextHeaders-Object-Object)),
		DefaultTextHeaders$SingleHeaderValuesComposer:setObject(CharSequence-Object[]) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:objectEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Object[]), DefaultTextHeaders:access$1401(DefaultTextHeaders-Object-Object)),
		DefaultTextHeaders$SingleHeaderValuesComposer:setObject(CharSequence-Iterable) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:objectEscaper(), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Iterable), DefaultTextHeaders:access$1501(DefaultTextHeaders-Object-Object)),
		DefaultTextHeaders$SingleHeaderValuesComposer:addEscapedValue(CharSequence-CharSequence) to listOf(DefaultTextHeaders:access$1601(DefaultTextHeaders-Object), DefaultTextHeaders:access$1701(DefaultTextHeaders-Object-Object), DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparateEscapedValues(CharSequence-CharSequence), DefaultTextHeaders:access$1801(DefaultTextHeaders-Object-Object)),
		DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Object[]) to listOf(DefaultTextHeaders$CsvValueEscaper:escape(Object), DefaultTextHeaders$CsvValueEscaper:escape(Object)),
		DefaultTextHeaders$SingleHeaderValuesComposer:commaSeparate(DefaultTextHeaders$CsvValueEscaper-Iterable) to listOf(DefaultTextHeaders$CsvValueEscaper:escape(Object), DefaultTextHeaders$CsvValueEscaper:escape(Object)),
		DefaultTextHeaders$SingleHeaderValuesComposer:<init>(DefaultTextHeaders-DefaultTextHeaders$1) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer:<init>(DefaultTextHeaders)),
		ByteArrayDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		ByteArrayDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:getBytes(int-byte[])),
		ByteArrayDecoder:decode(ChannelHandlerContext-Object-List) to listOf(ByteArrayDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		ByteArrayEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		ByteArrayEncoder:encode(ChannelHandlerContext-byte[]-List) to listOf(Unpooled:wrappedBuffer(byte[])),
		ByteArrayEncoder:encode(ChannelHandlerContext-Object-List) to listOf(ByteArrayEncoder:encode(ChannelHandlerContext-byte[]-List)),
		DefaultTextHeaders$3:toUnconvertedType(Object) to listOf(DefaultTextHeaders$3:toUnconvertedType(String)),
		DefaultTextHeaders$3:toConvertedType(Object) to listOf(DefaultTextHeaders$3:toConvertedType(CharSequence)),
		ReplayingDecoderBuffer:<init>() to listOf(ByteBuf:<init>()),
		ReplayingDecoderBuffer:<init>(ByteBuf) to listOf(ByteBuf:<init>(), ReplayingDecoderBuffer:setCumulation(ByteBuf)),
		ReplayingDecoderBuffer:capacity() to listOf(ByteBuf:capacity()),
		ReplayingDecoderBuffer:capacity(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:maxCapacity() to listOf(ReplayingDecoderBuffer:capacity()),
		ReplayingDecoderBuffer:alloc() to listOf(ByteBuf:alloc()),
		ReplayingDecoderBuffer:isDirect() to listOf(ByteBuf:isDirect()),
		ReplayingDecoderBuffer:clear() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:compareTo(ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:copy() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:copy(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:copy(int-int)),
		ReplayingDecoderBuffer:discardReadBytes() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:ensureWritable(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:ensureWritable(int-boolean) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:duplicate() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBoolean(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBoolean(int)),
		ReplayingDecoderBuffer:getByte(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getByte(int)),
		ReplayingDecoderBuffer:getUnsignedByte(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedByte(int)),
		ReplayingDecoderBuffer:getBytes(int-byte[]-int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBytes(int-byte[]-int-int)),
		ReplayingDecoderBuffer:getBytes(int-byte[]) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBytes(int-byte[])),
		ReplayingDecoderBuffer:getBytes(int-ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBytes(int-ByteBuf-int-int)),
		ReplayingDecoderBuffer:getBytes(int-ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-GatheringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-OutputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getInt(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getInt(int)),
		ReplayingDecoderBuffer:getUnsignedInt(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedInt(int)),
		ReplayingDecoderBuffer:getLong(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getLong(int)),
		ReplayingDecoderBuffer:getMedium(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getMedium(int)),
		ReplayingDecoderBuffer:getUnsignedMedium(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedMedium(int)),
		ReplayingDecoderBuffer:getShort(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getShort(int)),
		ReplayingDecoderBuffer:getUnsignedShort(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedShort(int)),
		ReplayingDecoderBuffer:getChar(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getChar(int)),
		ReplayingDecoderBuffer:getFloat(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getFloat(int)),
		ReplayingDecoderBuffer:getDouble(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getDouble(int)),
		ReplayingDecoderBuffer:hashCode() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:indexOf(int-int-byte) to listOf(ByteBuf:writerIndex(), ByteBuf:indexOf(int-int-byte)),
		ReplayingDecoderBuffer:bytesBefore(byte) to listOf(ByteBuf:bytesBefore(byte)),
		ReplayingDecoderBuffer:bytesBefore(int-byte) to listOf(ByteBuf:readerIndex(), ReplayingDecoderBuffer:bytesBefore(int-int-byte)),
		ReplayingDecoderBuffer:bytesBefore(int-int-byte) to listOf(ByteBuf:writerIndex(), ByteBuf:bytesBefore(int-int-byte), ByteBuf:bytesBefore(int-int-byte)),
		ReplayingDecoderBuffer:forEachByte(ByteBufProcessor) to listOf(ByteBuf:forEachByte(ByteBufProcessor)),
		ReplayingDecoderBuffer:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:writerIndex(), ByteBuf:forEachByte(int-int-ByteBufProcessor), ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		ReplayingDecoderBuffer:forEachByteDesc(ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(ByteBufProcessor), ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:writerIndex(), ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		ReplayingDecoderBuffer:markReaderIndex() to listOf(ByteBuf:markReaderIndex()),
		ReplayingDecoderBuffer:markWriterIndex() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:order() to listOf(ByteBuf:order()),
		ReplayingDecoderBuffer:order(ByteOrder) to listOf(ReplayingDecoderBuffer:order(), SwappedByteBuf:<init>(ByteBuf)),
		ReplayingDecoderBuffer:isReadable() to listOf(ByteBuf:isReadable()),
		ReplayingDecoderBuffer:isReadable(int) to listOf(ByteBuf:isReadable(int)),
		ReplayingDecoderBuffer:readableBytes() to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex()),
		ReplayingDecoderBuffer:readBoolean() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBoolean()),
		ReplayingDecoderBuffer:readByte() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readByte()),
		ReplayingDecoderBuffer:readUnsignedByte() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedByte()),
		ReplayingDecoderBuffer:readBytes(byte[]-int-int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(byte[]-int-int)),
		ReplayingDecoderBuffer:readBytes(byte[]) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(byte[])),
		ReplayingDecoderBuffer:readBytes(ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readBytes(ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(ByteBuf-int-int)),
		ReplayingDecoderBuffer:readBytes(ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readBytes(ByteBuf) to listOf(ByteBuf:writableBytes(), ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(ByteBuf)),
		ReplayingDecoderBuffer:readBytes(GatheringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readBytes(int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(int)),
		ReplayingDecoderBuffer:readSlice(int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readSlice(int)),
		ReplayingDecoderBuffer:readBytes(OutputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readerIndex() to listOf(ByteBuf:readerIndex()),
		ReplayingDecoderBuffer:readerIndex(int) to listOf(ByteBuf:readerIndex(int)),
		ReplayingDecoderBuffer:readInt() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readInt()),
		ReplayingDecoderBuffer:readUnsignedInt() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedInt()),
		ReplayingDecoderBuffer:readLong() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readLong()),
		ReplayingDecoderBuffer:readMedium() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readMedium()),
		ReplayingDecoderBuffer:readUnsignedMedium() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedMedium()),
		ReplayingDecoderBuffer:readShort() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readShort()),
		ReplayingDecoderBuffer:readUnsignedShort() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedShort()),
		ReplayingDecoderBuffer:readChar() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readChar()),
		ReplayingDecoderBuffer:readFloat() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readFloat()),
		ReplayingDecoderBuffer:readDouble() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readDouble()),
		ReplayingDecoderBuffer:resetReaderIndex() to listOf(ByteBuf:resetReaderIndex()),
		ReplayingDecoderBuffer:resetWriterIndex() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBoolean(int-boolean) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setByte(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-byte[]-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-byte[]) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-InputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setZero(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ScatteringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setIndex(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setInt(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setLong(int-long) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setMedium(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setShort(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setChar(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setFloat(int-float) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setDouble(int-double) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:skipBytes(int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:skipBytes(int)),
		ReplayingDecoderBuffer:slice() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:slice(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:slice(int-int)),
		ReplayingDecoderBuffer:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		ReplayingDecoderBuffer:nioBuffer() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:nioBuffer(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:nioBuffer(int-int)),
		ReplayingDecoderBuffer:nioBuffers() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:nioBuffers(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:nioBuffers(int-int)),
		ReplayingDecoderBuffer:internalNioBuffer(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:internalNioBuffer(int-int)),
		ReplayingDecoderBuffer:toString(int-int-Charset) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:toString(int-int-Charset)),
		ReplayingDecoderBuffer:toString(Charset) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:toString() to listOf(StringUtil:simpleClassName(Object), ReplayingDecoderBuffer:readerIndex(), ReplayingDecoderBuffer:writerIndex()),
		ReplayingDecoderBuffer:writeBoolean(boolean) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeByte(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(byte[]-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(byte[]) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(InputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ScatteringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeInt(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeLong(long) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeMedium(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeZero(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writerIndex() to listOf(ByteBuf:writerIndex()),
		ReplayingDecoderBuffer:writerIndex(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeShort(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeChar(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeFloat(float) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeDouble(double) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:checkIndex(int-int) to listOf(ByteBuf:writerIndex()),
		ReplayingDecoderBuffer:checkReadableBytes(int) to listOf(ByteBuf:readableBytes()),
		ReplayingDecoderBuffer:discardSomeReadBytes() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:refCnt() to listOf(ByteBuf:refCnt()),
		ReplayingDecoderBuffer:retain() to listOf(ReplayingDecoderBuffer:reject(), ReplayingDecoderBuffer:retain()),
		ReplayingDecoderBuffer:retain(int) to listOf(ReplayingDecoderBuffer:reject(), ReplayingDecoderBuffer:retain(int)),
		ReplayingDecoderBuffer:touch() to listOf(ByteBuf:touch(), ReplayingDecoderBuffer:touch()),
		ReplayingDecoderBuffer:touch(Object) to listOf(ByteBuf:touch(Object), ReplayingDecoderBuffer:touch(Object)),
		ReplayingDecoderBuffer:release() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:release(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:unwrap() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:compareTo(Object) to listOf(ReplayingDecoderBuffer:compareTo(ByteBuf)),
		ReplayingDecoderBuffer:<clinit>() to listOf(ReplayingDecoderBuffer:<init>(ByteBuf), ReplayingDecoderBuffer:terminate()),
		MessageAggregator:<init>(int) to listOf(MessageToMessageDecoder:<init>(), MessageAggregator:validateMaxContentLength(int)),
		MessageAggregator:<init>(int-Class) to listOf(MessageToMessageDecoder:<init>(Class), MessageAggregator:validateMaxContentLength(int)),
		MessageAggregator:acceptInboundMessage(Object) to listOf(MessageToMessageDecoder:acceptInboundMessage(Object), MessageAggregator:isContentMessage(Object), MessageAggregator:isStartMessage(Object), MessageAggregator:isAggregated(Object)),
		MessageAggregator:decode(ChannelHandlerContext-Object-List) to listOf(MessageAggregator:isStartMessage(Object), MessageAggregationException:<init>(), MessageAggregator:hasContentLength(Object), MessageAggregator:contentLength(Object), MessageAggregator:invokeHandleOversizedMessage(ChannelHandlerContext-Object), MessageAggregator:newContinueResponse(Object), MessageAggregator$1:<init>(MessageAggregator-ChannelHandlerContext), ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener), DecoderResultProvider:decoderResult(), DecoderResult:isSuccess(), ByteBufHolder:content(), ByteBuf:isReadable(), ByteBufHolder:content(), ByteBuf:retain(), MessageAggregator:beginAggregation(Object-ByteBuf), MessageAggregator:beginAggregation(Object-ByteBuf), MessageAggregator:finishAggregation(ByteBufHolder), ChannelHandlerContext:alloc(), ByteBufAllocator:compositeBuffer(int), ByteBufHolder:content(), MessageAggregator:appendPartialContent(CompositeByteBuf-ByteBuf), MessageAggregator:beginAggregation(Object-ByteBuf), MessageAggregator:isContentMessage(Object), ByteBufHolder:content(), MessageAggregator:isLastContentMessage(ByteBufHolder), MessageAggregationException:<init>(), ByteBufHolder:content(), CompositeByteBuf:readableBytes(), ByteBuf:readableBytes(), MessageAggregator:invokeHandleOversizedMessage(ChannelHandlerContext-Object), MessageAggregator:appendPartialContent(CompositeByteBuf-ByteBuf), MessageAggregator:aggregate(ByteBufHolder-ByteBufHolder), DecoderResultProvider:decoderResult(), DecoderResult:isSuccess(), DecoderResult:cause(), DecoderResult:failure(Throwable), DecoderResultProvider:setDecoderResult(DecoderResult), MessageAggregator:finishAggregation(ByteBufHolder), MessageAggregationException:<init>()),
		MessageAggregator:appendPartialContent(CompositeByteBuf-ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:retain(), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int)),
		MessageAggregator:invokeHandleOversizedMessage(ChannelHandlerContext-Object) to listOf(MessageAggregator:handleOversizedMessage(ChannelHandlerContext-Object), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		MessageAggregator:handleOversizedMessage(ChannelHandlerContext-Object) to listOf(MessageAggregator:maxContentLength(), TooLongFrameException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		MessageAggregator:channelInactive(ChannelHandlerContext) to listOf(ByteBufHolder:release(), MessageToMessageDecoder:channelInactive(ChannelHandlerContext)),
		MessageAggregator:handlerRemoved(ChannelHandlerContext) to listOf(MessageToMessageDecoder:handlerRemoved(ChannelHandlerContext), ByteBufHolder:release()),
		EmptyBinaryHeaders:<init>() to listOf(EmptyHeaders:<init>()),
		EmptyBinaryHeaders:add(AsciiString-AsciiString) to listOf(EmptyHeaders:add(Object-Object)),
		EmptyBinaryHeaders:add(AsciiString-Iterable) to listOf(EmptyHeaders:add(Object-Iterable)),
		EmptyBinaryHeaders:add(AsciiString-AsciiString[]) to listOf(EmptyHeaders:add(Object-Object[])),
		EmptyBinaryHeaders:addObject(AsciiString-Object) to listOf(EmptyHeaders:addObject(Object-Object)),
		EmptyBinaryHeaders:addObject(AsciiString-Iterable) to listOf(EmptyHeaders:addObject(Object-Iterable)),
		EmptyBinaryHeaders:addObject(AsciiString-Object[]) to listOf(EmptyHeaders:addObject(Object-Object[])),
		EmptyBinaryHeaders:addBoolean(AsciiString-boolean) to listOf(EmptyHeaders:addBoolean(Object-boolean)),
		EmptyBinaryHeaders:addChar(AsciiString-char) to listOf(EmptyHeaders:addChar(Object-char)),
		EmptyBinaryHeaders:addByte(AsciiString-byte) to listOf(EmptyHeaders:addByte(Object-byte)),
		EmptyBinaryHeaders:addShort(AsciiString-short) to listOf(EmptyHeaders:addShort(Object-short)),
		EmptyBinaryHeaders:addInt(AsciiString-int) to listOf(EmptyHeaders:addInt(Object-int)),
		EmptyBinaryHeaders:addLong(AsciiString-long) to listOf(EmptyHeaders:addLong(Object-long)),
		EmptyBinaryHeaders:addFloat(AsciiString-float) to listOf(EmptyHeaders:addFloat(Object-float)),
		EmptyBinaryHeaders:addDouble(AsciiString-double) to listOf(EmptyHeaders:addDouble(Object-double)),
		EmptyBinaryHeaders:addTimeMillis(AsciiString-long) to listOf(EmptyHeaders:addTimeMillis(Object-long)),
		EmptyBinaryHeaders:add(BinaryHeaders) to listOf(EmptyHeaders:add(Headers)),
		EmptyBinaryHeaders:set(AsciiString-AsciiString) to listOf(EmptyHeaders:set(Object-Object)),
		EmptyBinaryHeaders:set(AsciiString-Iterable) to listOf(EmptyHeaders:set(Object-Iterable)),
		EmptyBinaryHeaders:set(AsciiString-AsciiString[]) to listOf(EmptyHeaders:set(Object-Object[])),
		EmptyBinaryHeaders:setObject(AsciiString-Object) to listOf(EmptyHeaders:setObject(Object-Object)),
		EmptyBinaryHeaders:setObject(AsciiString-Iterable) to listOf(EmptyHeaders:setObject(Object-Iterable)),
		EmptyBinaryHeaders:setObject(AsciiString-Object[]) to listOf(EmptyHeaders:setObject(Object-Object[])),
		EmptyBinaryHeaders:setBoolean(AsciiString-boolean) to listOf(EmptyHeaders:setBoolean(Object-boolean)),
		EmptyBinaryHeaders:setChar(AsciiString-char) to listOf(EmptyHeaders:setChar(Object-char)),
		EmptyBinaryHeaders:setByte(AsciiString-byte) to listOf(EmptyHeaders:setByte(Object-byte)),
		EmptyBinaryHeaders:setShort(AsciiString-short) to listOf(EmptyHeaders:setShort(Object-short)),
		EmptyBinaryHeaders:setInt(AsciiString-int) to listOf(EmptyHeaders:setInt(Object-int)),
		EmptyBinaryHeaders:setLong(AsciiString-long) to listOf(EmptyHeaders:setLong(Object-long)),
		EmptyBinaryHeaders:setFloat(AsciiString-float) to listOf(EmptyHeaders:setFloat(Object-float)),
		EmptyBinaryHeaders:setDouble(AsciiString-double) to listOf(EmptyHeaders:setDouble(Object-double)),
		EmptyBinaryHeaders:setTimeMillis(AsciiString-long) to listOf(EmptyHeaders:setTimeMillis(Object-long)),
		EmptyBinaryHeaders:set(BinaryHeaders) to listOf(EmptyHeaders:set(Headers)),
		EmptyBinaryHeaders:setAll(BinaryHeaders) to listOf(EmptyHeaders:setAll(Headers)),
		EmptyBinaryHeaders:clear() to listOf(EmptyHeaders:clear(), EmptyBinaryHeaders:clear()),
		EmptyBinaryHeaders:setTimeMillis(Object-long) to listOf(EmptyBinaryHeaders:setTimeMillis(AsciiString-long)),
		EmptyBinaryHeaders:setDouble(Object-double) to listOf(EmptyBinaryHeaders:setDouble(AsciiString-double)),
		EmptyBinaryHeaders:setFloat(Object-float) to listOf(EmptyBinaryHeaders:setFloat(AsciiString-float)),
		EmptyBinaryHeaders:setLong(Object-long) to listOf(EmptyBinaryHeaders:setLong(AsciiString-long)),
		EmptyBinaryHeaders:setInt(Object-int) to listOf(EmptyBinaryHeaders:setInt(AsciiString-int)),
		EmptyBinaryHeaders:setShort(Object-short) to listOf(EmptyBinaryHeaders:setShort(AsciiString-short)),
		EmptyBinaryHeaders:setChar(Object-char) to listOf(EmptyBinaryHeaders:setChar(AsciiString-char)),
		EmptyBinaryHeaders:setByte(Object-byte) to listOf(EmptyBinaryHeaders:setByte(AsciiString-byte)),
		EmptyBinaryHeaders:setBoolean(Object-boolean) to listOf(EmptyBinaryHeaders:setBoolean(AsciiString-boolean)),
		EmptyBinaryHeaders:setObject(Object-Object[]) to listOf(EmptyBinaryHeaders:setObject(AsciiString-Object[])),
		EmptyBinaryHeaders:setObject(Object-Iterable) to listOf(EmptyBinaryHeaders:setObject(AsciiString-Iterable)),
		EmptyBinaryHeaders:setObject(Object-Object) to listOf(EmptyBinaryHeaders:setObject(AsciiString-Object)),
		EmptyBinaryHeaders:set(Object-Object[]) to listOf(EmptyBinaryHeaders:set(AsciiString-AsciiString[])),
		EmptyBinaryHeaders:set(Object-Iterable) to listOf(EmptyBinaryHeaders:set(AsciiString-Iterable)),
		EmptyBinaryHeaders:set(Object-Object) to listOf(EmptyBinaryHeaders:set(AsciiString-AsciiString)),
		EmptyBinaryHeaders:addTimeMillis(Object-long) to listOf(EmptyBinaryHeaders:addTimeMillis(AsciiString-long)),
		EmptyBinaryHeaders:addDouble(Object-double) to listOf(EmptyBinaryHeaders:addDouble(AsciiString-double)),
		EmptyBinaryHeaders:addFloat(Object-float) to listOf(EmptyBinaryHeaders:addFloat(AsciiString-float)),
		EmptyBinaryHeaders:addLong(Object-long) to listOf(EmptyBinaryHeaders:addLong(AsciiString-long)),
		EmptyBinaryHeaders:addInt(Object-int) to listOf(EmptyBinaryHeaders:addInt(AsciiString-int)),
		EmptyBinaryHeaders:addShort(Object-short) to listOf(EmptyBinaryHeaders:addShort(AsciiString-short)),
		EmptyBinaryHeaders:addChar(Object-char) to listOf(EmptyBinaryHeaders:addChar(AsciiString-char)),
		EmptyBinaryHeaders:addByte(Object-byte) to listOf(EmptyBinaryHeaders:addByte(AsciiString-byte)),
		EmptyBinaryHeaders:addBoolean(Object-boolean) to listOf(EmptyBinaryHeaders:addBoolean(AsciiString-boolean)),
		EmptyBinaryHeaders:addObject(Object-Object[]) to listOf(EmptyBinaryHeaders:addObject(AsciiString-Object[])),
		EmptyBinaryHeaders:addObject(Object-Iterable) to listOf(EmptyBinaryHeaders:addObject(AsciiString-Iterable)),
		EmptyBinaryHeaders:addObject(Object-Object) to listOf(EmptyBinaryHeaders:addObject(AsciiString-Object)),
		EmptyBinaryHeaders:add(Object-Object[]) to listOf(EmptyBinaryHeaders:add(AsciiString-AsciiString[])),
		EmptyBinaryHeaders:add(Object-Iterable) to listOf(EmptyBinaryHeaders:add(AsciiString-Iterable)),
		EmptyBinaryHeaders:add(Object-Object) to listOf(EmptyBinaryHeaders:add(AsciiString-AsciiString)),
		ByteToMessageDecoder:<init>() to listOf(ChannelHandlerAdapter:<init>(), CodecUtil:ensureNotSharable(ChannelHandlerAdapter)),
		ByteToMessageDecoder:actualReadableBytes() to listOf(ByteToMessageDecoder:internalBuffer(), ByteBuf:readableBytes()),
		ByteToMessageDecoder:handlerRemoved(ChannelHandlerContext) to listOf(ByteToMessageDecoder:internalBuffer(), ByteBuf:readableBytes(), ByteBuf:readBytes(int), ByteBuf:release(), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelReadComplete(), ByteBuf:release(), ByteToMessageDecoder:handlerRemoved0(ChannelHandlerContext)),
		ByteToMessageDecoder:channelRead(ChannelHandlerContext-Object) to listOf(RecyclableArrayList:newInstance(), ChannelHandlerContext:alloc(), ByteToMessageDecoder$Cumulator:cumulate(ByteBufAllocator-ByteBuf-ByteBuf), ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ByteBuf:isReadable(), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle(), DecoderException:<init>(Throwable), ByteBuf:isReadable(), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle(), ChannelHandlerContext:fireChannelRead(Object)),
		ByteToMessageDecoder:channelReadComplete(ChannelHandlerContext) to listOf(ByteBuf:refCnt(), ByteBuf:discardSomeReadBytes(), ChannelHandlerContext:fireChannelReadComplete()),
		ByteToMessageDecoder:channelInactive(ChannelHandlerContext) to listOf(RecyclableArrayList:newInstance(), ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelReadComplete(), ChannelHandlerContext:fireChannelInactive(), RecyclableArrayList:recycle(), RecyclableArrayList:recycle(), DecoderException:<init>(Throwable), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelReadComplete(), ChannelHandlerContext:fireChannelInactive(), RecyclableArrayList:recycle(), RecyclableArrayList:recycle()),
		ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:isReadable(), ByteBuf:readableBytes(), ByteToMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List), ChannelHandlerContext:isRemoved(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), StringUtil:simpleClassName(Class), DecoderException:<init>(String), ByteToMessageDecoder:isSingleDecode(), DecoderException:<init>(Throwable)),
		ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		ByteToMessageDecoder:expandCumulation(ByteBufAllocator-ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf), ByteBuf:release()),
		ByteToMessageDecoder:<clinit>() to listOf(ByteToMessageDecoder$1:<init>(), ByteToMessageDecoder$2:<init>()),
		AsciiHeadersEncoder$NewlineType:values() to listOf(AsciiHeadersEncoder$NewlineType[]:clone()),
		AsciiHeadersEncoder$NewlineType:<clinit>() to listOf(AsciiHeadersEncoder$NewlineType:<init>(String-int), AsciiHeadersEncoder$NewlineType:<init>(String-int)),
		ProtobufDecoder:<init>(MessageLite) to listOf(ProtobufDecoder:<init>(MessageLite-ExtensionRegistry)),
		ProtobufDecoder:<init>(MessageLite-ExtensionRegistry) to listOf(ProtobufDecoder:<init>(MessageLite-ExtensionRegistryLite)),
		ProtobufDecoder:<init>(MessageLite-ExtensionRegistryLite) to listOf(MessageToMessageDecoder:<init>(), MessageLite:getDefaultInstanceForType()),
		ProtobufDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]-int-int), MessageLite:getParserForType(), Parser:parseFrom(byte[]-int-int), MessageLite:newBuilderForType(), MessageLite$Builder:mergeFrom(byte[]-int-int), MessageLite$Builder:build(), MessageLite:getParserForType(), Parser:parseFrom(byte[]-int-int-ExtensionRegistryLite), MessageLite:newBuilderForType(), MessageLite$Builder:mergeFrom(byte[]-int-int-ExtensionRegistryLite), MessageLite$Builder:build()),
		ProtobufDecoder:decode(ChannelHandlerContext-Object-List) to listOf(ProtobufDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		ProtobufVarint32LengthFieldPrepender:<init>() to listOf(MessageToByteEncoder:<init>()),
		ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), CodedOutputStream:computeRawVarint32Size(int), ByteBuf:ensureWritable(int), ByteBufOutputStream:<init>(ByteBuf), CodedOutputStream:newInstance(OutputStream-int), CodedOutputStream:writeRawVarint32(int), CodedOutputStream:flush(), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		ProtobufEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		ProtobufEncoder:encode(ChannelHandlerContext-MessageLiteOrBuilder-List) to listOf(MessageLite:toByteArray(), Unpooled:wrappedBuffer(byte[]), MessageLite$Builder:build(), MessageLite:toByteArray(), Unpooled:wrappedBuffer(byte[])),
		ProtobufEncoder:encode(ChannelHandlerContext-Object-List) to listOf(ProtobufEncoder:encode(ChannelHandlerContext-MessageLiteOrBuilder-List)),
		ProtobufVarint32FrameDecoder:<init>() to listOf(ByteToMessageDecoder:<init>()),
		ProtobufVarint32FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:markReaderIndex(), ByteBuf:isReadable(), ByteBuf:resetReaderIndex(), ByteBuf:readByte(), CodedInputStream:newInstance(byte[]-int-int), CodedInputStream:readRawVarint32(), CorruptedFrameException:<init>(String), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), ByteBuf:readBytes(int), CorruptedFrameException:<init>(String)),
		AsciiString$4:compare(CharSequence-CharSequence) to listOf(AsciiString:access$000(AsciiString), AsciiString:access$000(AsciiString), AsciiString:access$000(AsciiString), AsciiString:access$000(AsciiString)),
		AsciiString$4:compare(Object-Object) to listOf(AsciiString$4:compare(CharSequence-CharSequence)),
		SctpMessageToMessageDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		SctpMessageToMessageDecoder:acceptInboundMessage(Object) to listOf(SctpMessage:isComplete(), CodecException:<init>(String)),
		SctpMessageCompletionHandler:<init>() to listOf(MessageToMessageDecoder:<init>()),
		SctpMessageCompletionHandler:decode(ChannelHandlerContext-SctpMessage-List) to listOf(SctpMessage:content(), SctpMessage:protocolIdentifier(), SctpMessage:streamIdentifier(), SctpMessage:isComplete(), ByteBuf:isReadable(), ByteBuf:isReadable(), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:isReadable(), Unpooled:wrappedBuffer(ByteBuf[]), SctpMessage:<init>(int-int-ByteBuf), ByteBuf:retain()),
		SctpMessageCompletionHandler:decode(ChannelHandlerContext-Object-List) to listOf(SctpMessageCompletionHandler:decode(ChannelHandlerContext-SctpMessage-List)),
		SctpInboundByteStreamHandler:<init>(int-int) to listOf(MessageToMessageDecoder:<init>()),
		SctpInboundByteStreamHandler:acceptInboundMessage(Object) to listOf(MessageToMessageDecoder:acceptInboundMessage(Object), SctpInboundByteStreamHandler:acceptInboundMessage(SctpMessage)),
		SctpInboundByteStreamHandler:acceptInboundMessage(SctpMessage) to listOf(SctpMessage:protocolIdentifier(), SctpMessage:streamIdentifier()),
		SctpInboundByteStreamHandler:decode(ChannelHandlerContext-SctpMessage-List) to listOf(SctpMessage:isComplete(), CodecException:<init>(String), SctpMessage:content(), ByteBuf:retain()),
		SctpInboundByteStreamHandler:decode(ChannelHandlerContext-Object-List) to listOf(SctpInboundByteStreamHandler:decode(ChannelHandlerContext-SctpMessage-List)),
		SctpOutboundByteStreamHandler:<init>(int-int) to listOf(MessageToMessageEncoder:<init>()),
		SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:retain(), SctpMessage:<init>(int-int-ByteBuf)),
		SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-Object-List) to listOf(SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-ByteBuf-List)),
		DefaultTextHeaders$MultipleFieldsValueComposer:add(CharSequence-CharSequence) to listOf(DefaultTextHeaders:access$201(DefaultTextHeaders-Object-Object)),
		DefaultTextHeaders$MultipleFieldsValueComposer:add(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:access$301(DefaultTextHeaders-Object-Object[])),
		DefaultTextHeaders$MultipleFieldsValueComposer:add(CharSequence-Iterable) to listOf(DefaultTextHeaders:access$401(DefaultTextHeaders-Object-Iterable)),
		DefaultTextHeaders$MultipleFieldsValueComposer:addObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:access$501(DefaultTextHeaders-Object-Iterable)),
		DefaultTextHeaders$MultipleFieldsValueComposer:addObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:access$601(DefaultTextHeaders-Object-Object[])),
		DefaultTextHeaders$MultipleFieldsValueComposer:set(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:access$701(DefaultTextHeaders-Object-Object[])),
		DefaultTextHeaders$MultipleFieldsValueComposer:set(CharSequence-Iterable) to listOf(DefaultTextHeaders:access$801(DefaultTextHeaders-Object-Iterable)),
		DefaultTextHeaders$MultipleFieldsValueComposer:setObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:access$901(DefaultTextHeaders-Object-Object[])),
		DefaultTextHeaders$MultipleFieldsValueComposer:setObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:access$1001(DefaultTextHeaders-Object-Iterable)),
		DefaultTextHeaders$MultipleFieldsValueComposer:<init>(DefaultTextHeaders-DefaultTextHeaders$1) to listOf(DefaultTextHeaders$MultipleFieldsValueComposer:<init>(DefaultTextHeaders)),
		DelimiterBasedFrameDecoder:<init>(int-ByteBuf) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf)),
		DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf)),
		DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:slice(int-int), DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[])),
		DelimiterBasedFrameDecoder:<init>(int-ByteBuf[]) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf[])),
		DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf[]) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[])),
		DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[]) to listOf(ByteToMessageDecoder:<init>(), DelimiterBasedFrameDecoder:validateMaxFrameLength(int), DelimiterBasedFrameDecoder:isLineBased(ByteBuf[]), DelimiterBasedFrameDecoder:isSubclass(), LineBasedFrameDecoder:<init>(int-boolean-boolean), DelimiterBasedFrameDecoder:validateDelimiter(ByteBuf), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:slice(int-int)),
		DelimiterBasedFrameDecoder:isLineBased(ByteBuf[]) to listOf(ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), DelimiterBasedFrameDecoder:indexOf(ByteBuf-ByteBuf), ByteBuf:capacity(), ByteBuf:skipBytes(int), DelimiterBasedFrameDecoder:fail(long), ByteBuf:skipBytes(int), DelimiterBasedFrameDecoder:fail(long), ByteBuf:readSlice(int), ByteBuf:skipBytes(int), ByteBuf:readSlice(int), ByteBuf:retain(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), DelimiterBasedFrameDecoder:fail(long), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		DelimiterBasedFrameDecoder:fail(long) to listOf(TooLongFrameException:<init>(String), TooLongFrameException:<init>(String)),
		DelimiterBasedFrameDecoder:indexOf(ByteBuf-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:capacity(), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:writerIndex(), ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:readerIndex()),
		DelimiterBasedFrameDecoder:validateDelimiter(ByteBuf) to listOf(ByteBuf:isReadable()),
		DefaultHeaders$HeaderDateFormat:get() to listOf(FastThreadLocal:get()),
		DefaultHeaders$HeaderDateFormat:<init>(DefaultHeaders$1) to listOf(DefaultHeaders$HeaderDateFormat:<init>()),
		DefaultHeaders$HeaderDateFormat:<clinit>() to listOf(DefaultHeaders$HeaderDateFormat$1:<init>()),
		DefaultHeaders$2:visit(Map$Entry) to listOf(DefaultHeaders:add(Object-Object)),
		DefaultHeaders$1:visit(Map$Entry) to listOf(DefaultHeaders:set(Object-Object)),
		DefaultConvertibleHeaders$ConvertedEntry:getKey() to listOf(DefaultConvertibleHeaders:access$100(DefaultConvertibleHeaders), ConvertibleHeaders$TypeConverter:toConvertedType(Object)),
		DefaultConvertibleHeaders$ConvertedEntry:getValue() to listOf(DefaultConvertibleHeaders:access$100(DefaultConvertibleHeaders), ConvertibleHeaders$TypeConverter:toConvertedType(Object)),
		DefaultConvertibleHeaders$ConvertedEntry:setValue(Object) to listOf(DefaultConvertibleHeaders$ConvertedEntry:getValue(), DefaultConvertibleHeaders:access$100(DefaultConvertibleHeaders), ConvertibleHeaders$TypeConverter:toUnconvertedType(Object)),
		AbstractBinaryMemcacheDecoder$1:<clinit>() to listOf(AbstractBinaryMemcacheDecoder$State:values(), AbstractBinaryMemcacheDecoder$State:ordinal(), AbstractBinaryMemcacheDecoder$State:ordinal(), AbstractBinaryMemcacheDecoder$State:ordinal(), AbstractBinaryMemcacheDecoder$State:ordinal(), AbstractBinaryMemcacheDecoder$State:ordinal()),
		AbstractBinaryMemcacheDecoder$State:values() to listOf(AbstractBinaryMemcacheDecoder$State[]:clone()),
		AbstractBinaryMemcacheDecoder$State:<clinit>() to listOf(AbstractBinaryMemcacheDecoder$State:<init>(String-int), AbstractBinaryMemcacheDecoder$State:<init>(String-int), AbstractBinaryMemcacheDecoder$State:<init>(String-int), AbstractBinaryMemcacheDecoder$State:<init>(String-int), AbstractBinaryMemcacheDecoder$State:<init>(String-int)),
		BinaryMemcacheRequestDecoder:<init>() to listOf(BinaryMemcacheRequestDecoder:<init>(int)),
		BinaryMemcacheRequestDecoder:<init>(int) to listOf(AbstractBinaryMemcacheDecoder:<init>(int)),
		BinaryMemcacheRequestDecoder:decodeHeader(ByteBuf) to listOf(DefaultBinaryMemcacheRequest:<init>(), ByteBuf:readByte(), BinaryMemcacheRequest:setMagic(byte), ByteBuf:readByte(), BinaryMemcacheRequest:setOpcode(byte), ByteBuf:readShort(), BinaryMemcacheRequest:setKeyLength(short), ByteBuf:readByte(), BinaryMemcacheRequest:setExtrasLength(byte), ByteBuf:readByte(), BinaryMemcacheRequest:setDataType(byte), ByteBuf:readShort(), BinaryMemcacheRequest:setReserved(short), ByteBuf:readInt(), BinaryMemcacheRequest:setTotalBodyLength(int), ByteBuf:readInt(), BinaryMemcacheRequest:setOpaque(int), ByteBuf:readLong(), BinaryMemcacheRequest:setCas(long), BinaryMemcacheRequestDecoder:decodeHeader(ByteBuf)),
		BinaryMemcacheRequestDecoder:buildInvalidMessage() to listOf(DefaultBinaryMemcacheRequest:<init>(String-ByteBuf), BinaryMemcacheRequestDecoder:buildInvalidMessage()),
		DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf) to listOf(Unpooled:buffer(int), DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf-ByteBuf)),
		DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf-ByteBuf) to listOf(DefaultBinaryMemcacheResponse:<init>(String-ByteBuf)),
		DefaultFullBinaryMemcacheResponse:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultFullBinaryMemcacheResponse:retain() to listOf(DefaultBinaryMemcacheResponse:retain(), ByteBuf:retain(), DefaultFullBinaryMemcacheResponse:retain(), DefaultFullBinaryMemcacheResponse:retain(), DefaultFullBinaryMemcacheResponse:retain(), DefaultFullBinaryMemcacheResponse:retain(), DefaultFullBinaryMemcacheResponse:retain(), DefaultFullBinaryMemcacheResponse:retain(), DefaultFullBinaryMemcacheResponse:retain(), DefaultFullBinaryMemcacheResponse:retain()),
		DefaultFullBinaryMemcacheResponse:retain(int) to listOf(DefaultBinaryMemcacheResponse:retain(int), ByteBuf:retain(int), DefaultFullBinaryMemcacheResponse:retain(int), DefaultFullBinaryMemcacheResponse:retain(int), DefaultFullBinaryMemcacheResponse:retain(int), DefaultFullBinaryMemcacheResponse:retain(int), DefaultFullBinaryMemcacheResponse:retain(int), DefaultFullBinaryMemcacheResponse:retain(int), DefaultFullBinaryMemcacheResponse:retain(int), DefaultFullBinaryMemcacheResponse:retain(int)),
		DefaultFullBinaryMemcacheResponse:touch() to listOf(DefaultBinaryMemcacheResponse:touch(), ByteBuf:touch(), DefaultFullBinaryMemcacheResponse:touch(), DefaultFullBinaryMemcacheResponse:touch(), DefaultFullBinaryMemcacheResponse:touch(), DefaultFullBinaryMemcacheResponse:touch(), DefaultFullBinaryMemcacheResponse:touch(), DefaultFullBinaryMemcacheResponse:touch(), DefaultFullBinaryMemcacheResponse:touch(), DefaultFullBinaryMemcacheResponse:touch()),
		DefaultFullBinaryMemcacheResponse:touch(Object) to listOf(DefaultBinaryMemcacheResponse:touch(Object), ByteBuf:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object), DefaultFullBinaryMemcacheResponse:touch(Object)),
		DefaultFullBinaryMemcacheResponse:release() to listOf(DefaultBinaryMemcacheResponse:release(), ByteBuf:release()),
		DefaultFullBinaryMemcacheResponse:release(int) to listOf(DefaultBinaryMemcacheResponse:release(int), ByteBuf:release(int)),
		DefaultFullBinaryMemcacheResponse:copy() to listOf(DefaultFullBinaryMemcacheResponse:extras(), ByteBuf:copy(), DefaultFullBinaryMemcacheResponse:key(), DefaultFullBinaryMemcacheResponse:content(), ByteBuf:copy(), DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf-ByteBuf), DefaultFullBinaryMemcacheResponse:copy(), DefaultFullBinaryMemcacheResponse:copy(), DefaultFullBinaryMemcacheResponse:copy(), DefaultFullBinaryMemcacheResponse:copy()),
		DefaultFullBinaryMemcacheResponse:duplicate() to listOf(DefaultFullBinaryMemcacheResponse:extras(), ByteBuf:duplicate(), DefaultFullBinaryMemcacheResponse:key(), DefaultFullBinaryMemcacheResponse:content(), ByteBuf:duplicate(), DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf-ByteBuf), DefaultFullBinaryMemcacheResponse:duplicate(), DefaultFullBinaryMemcacheResponse:duplicate(), DefaultFullBinaryMemcacheResponse:duplicate(), DefaultFullBinaryMemcacheResponse:duplicate()),
		BinaryMemcacheRequestEncoder:<init>() to listOf(AbstractBinaryMemcacheEncoder:<init>()),
		BinaryMemcacheRequestEncoder:encodeHeader(ByteBuf-BinaryMemcacheRequest) to listOf(BinaryMemcacheRequest:magic(), ByteBuf:writeByte(int), BinaryMemcacheRequest:opcode(), ByteBuf:writeByte(int), BinaryMemcacheRequest:keyLength(), ByteBuf:writeShort(int), BinaryMemcacheRequest:extrasLength(), ByteBuf:writeByte(int), BinaryMemcacheRequest:dataType(), ByteBuf:writeByte(int), BinaryMemcacheRequest:reserved(), ByteBuf:writeShort(int), BinaryMemcacheRequest:totalBodyLength(), ByteBuf:writeInt(int), BinaryMemcacheRequest:opaque(), ByteBuf:writeInt(int), BinaryMemcacheRequest:cas(), ByteBuf:writeLong(long)),
		BinaryMemcacheRequestEncoder:encodeHeader(ByteBuf-BinaryMemcacheMessage) to listOf(BinaryMemcacheRequestEncoder:encodeHeader(ByteBuf-BinaryMemcacheRequest)),
		BinaryMemcacheResponseEncoder:<init>() to listOf(AbstractBinaryMemcacheEncoder:<init>()),
		BinaryMemcacheResponseEncoder:encodeHeader(ByteBuf-BinaryMemcacheResponse) to listOf(BinaryMemcacheResponse:magic(), ByteBuf:writeByte(int), BinaryMemcacheResponse:opcode(), ByteBuf:writeByte(int), BinaryMemcacheResponse:keyLength(), ByteBuf:writeShort(int), BinaryMemcacheResponse:extrasLength(), ByteBuf:writeByte(int), BinaryMemcacheResponse:dataType(), ByteBuf:writeByte(int), BinaryMemcacheResponse:status(), ByteBuf:writeShort(int), BinaryMemcacheResponse:totalBodyLength(), ByteBuf:writeInt(int), BinaryMemcacheResponse:opaque(), ByteBuf:writeInt(int), BinaryMemcacheResponse:cas(), ByteBuf:writeLong(long)),
		BinaryMemcacheResponseEncoder:encodeHeader(ByteBuf-BinaryMemcacheMessage) to listOf(BinaryMemcacheResponseEncoder:encodeHeader(ByteBuf-BinaryMemcacheResponse)),
		BinaryMemcacheResponseDecoder:<init>() to listOf(BinaryMemcacheResponseDecoder:<init>(int)),
		BinaryMemcacheResponseDecoder:<init>(int) to listOf(AbstractBinaryMemcacheDecoder:<init>(int)),
		BinaryMemcacheResponseDecoder:decodeHeader(ByteBuf) to listOf(DefaultBinaryMemcacheResponse:<init>(), ByteBuf:readByte(), BinaryMemcacheResponse:setMagic(byte), ByteBuf:readByte(), BinaryMemcacheResponse:setOpcode(byte), ByteBuf:readShort(), BinaryMemcacheResponse:setKeyLength(short), ByteBuf:readByte(), BinaryMemcacheResponse:setExtrasLength(byte), ByteBuf:readByte(), BinaryMemcacheResponse:setDataType(byte), ByteBuf:readShort(), BinaryMemcacheResponse:setStatus(short), ByteBuf:readInt(), BinaryMemcacheResponse:setTotalBodyLength(int), ByteBuf:readInt(), BinaryMemcacheResponse:setOpaque(int), ByteBuf:readLong(), BinaryMemcacheResponse:setCas(long), BinaryMemcacheResponseDecoder:decodeHeader(ByteBuf)),
		BinaryMemcacheResponseDecoder:buildInvalidMessage() to listOf(DefaultBinaryMemcacheResponse:<init>(String-ByteBuf), BinaryMemcacheResponseDecoder:buildInvalidMessage()),
		DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf) to listOf(Unpooled:buffer(int), DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf-ByteBuf)),
		DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf-ByteBuf) to listOf(DefaultBinaryMemcacheRequest:<init>(String-ByteBuf)),
		DefaultFullBinaryMemcacheRequest:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultFullBinaryMemcacheRequest:retain() to listOf(DefaultBinaryMemcacheRequest:retain(), ByteBuf:retain(), DefaultFullBinaryMemcacheRequest:retain(), DefaultFullBinaryMemcacheRequest:retain(), DefaultFullBinaryMemcacheRequest:retain(), DefaultFullBinaryMemcacheRequest:retain(), DefaultFullBinaryMemcacheRequest:retain(), DefaultFullBinaryMemcacheRequest:retain(), DefaultFullBinaryMemcacheRequest:retain(), DefaultFullBinaryMemcacheRequest:retain()),
		DefaultFullBinaryMemcacheRequest:retain(int) to listOf(DefaultBinaryMemcacheRequest:retain(int), ByteBuf:retain(int), DefaultFullBinaryMemcacheRequest:retain(int), DefaultFullBinaryMemcacheRequest:retain(int), DefaultFullBinaryMemcacheRequest:retain(int), DefaultFullBinaryMemcacheRequest:retain(int), DefaultFullBinaryMemcacheRequest:retain(int), DefaultFullBinaryMemcacheRequest:retain(int), DefaultFullBinaryMemcacheRequest:retain(int), DefaultFullBinaryMemcacheRequest:retain(int)),
		DefaultFullBinaryMemcacheRequest:touch() to listOf(DefaultBinaryMemcacheRequest:touch(), ByteBuf:touch(), DefaultFullBinaryMemcacheRequest:touch(), DefaultFullBinaryMemcacheRequest:touch(), DefaultFullBinaryMemcacheRequest:touch(), DefaultFullBinaryMemcacheRequest:touch(), DefaultFullBinaryMemcacheRequest:touch(), DefaultFullBinaryMemcacheRequest:touch(), DefaultFullBinaryMemcacheRequest:touch(), DefaultFullBinaryMemcacheRequest:touch()),
		DefaultFullBinaryMemcacheRequest:touch(Object) to listOf(DefaultBinaryMemcacheRequest:touch(Object), ByteBuf:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object), DefaultFullBinaryMemcacheRequest:touch(Object)),
		DefaultFullBinaryMemcacheRequest:release() to listOf(DefaultBinaryMemcacheRequest:release(), ByteBuf:release()),
		DefaultFullBinaryMemcacheRequest:release(int) to listOf(DefaultBinaryMemcacheRequest:release(int), ByteBuf:release(int)),
		DefaultFullBinaryMemcacheRequest:copy() to listOf(DefaultFullBinaryMemcacheRequest:extras(), ByteBuf:copy(), DefaultFullBinaryMemcacheRequest:key(), DefaultFullBinaryMemcacheRequest:content(), ByteBuf:copy(), DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf-ByteBuf), DefaultFullBinaryMemcacheRequest:copy(), DefaultFullBinaryMemcacheRequest:copy(), DefaultFullBinaryMemcacheRequest:copy(), DefaultFullBinaryMemcacheRequest:copy()),
		DefaultFullBinaryMemcacheRequest:duplicate() to listOf(DefaultFullBinaryMemcacheRequest:extras(), ByteBuf:duplicate(), DefaultFullBinaryMemcacheRequest:key(), DefaultFullBinaryMemcacheRequest:content(), ByteBuf:duplicate(), DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf-ByteBuf), DefaultFullBinaryMemcacheRequest:duplicate(), DefaultFullBinaryMemcacheRequest:duplicate(), DefaultFullBinaryMemcacheRequest:duplicate(), DefaultFullBinaryMemcacheRequest:duplicate()),
		BinaryMemcacheServerCodec:<init>() to listOf(BinaryMemcacheServerCodec:<init>(int)),
		BinaryMemcacheServerCodec:<init>(int) to listOf(ChannelHandlerAppender:<init>(), BinaryMemcacheRequestDecoder:<init>(int), BinaryMemcacheServerCodec:add(ChannelHandler), BinaryMemcacheResponseEncoder:<init>(), BinaryMemcacheServerCodec:add(ChannelHandler)),
		AbstractBinaryMemcacheEncoder:<init>() to listOf(AbstractMemcacheObjectEncoder:<init>()),
		AbstractBinaryMemcacheEncoder:encodeMessage(ChannelHandlerContext-BinaryMemcacheMessage) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), AbstractBinaryMemcacheEncoder:encodeHeader(ByteBuf-BinaryMemcacheMessage), BinaryMemcacheMessage:extras(), AbstractBinaryMemcacheEncoder:encodeExtras(ByteBuf-ByteBuf), BinaryMemcacheMessage:key(), AbstractBinaryMemcacheEncoder:encodeKey(ByteBuf-String)),
		AbstractBinaryMemcacheEncoder:encodeExtras(ByteBuf-ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:writeBytes(ByteBuf)),
		AbstractBinaryMemcacheEncoder:encodeKey(ByteBuf-String) to listOf(ByteBuf:writeBytes(byte[])),
		AbstractBinaryMemcacheEncoder:encodeMessage(ChannelHandlerContext-MemcacheMessage) to listOf(AbstractBinaryMemcacheEncoder:encodeMessage(ChannelHandlerContext-BinaryMemcacheMessage)),
		BinaryMemcacheClientCodec:<init>() to listOf(BinaryMemcacheClientCodec:<init>(int)),
		BinaryMemcacheClientCodec:<init>(int) to listOf(BinaryMemcacheClientCodec:<init>(int-boolean)),
		BinaryMemcacheClientCodec:<init>(int-boolean) to listOf(ChannelHandlerAppender:<init>(), BinaryMemcacheClientCodec$Decoder:<init>(BinaryMemcacheClientCodec-int), BinaryMemcacheClientCodec:add(ChannelHandler), BinaryMemcacheClientCodec$Encoder:<init>(BinaryMemcacheClientCodec-BinaryMemcacheClientCodec$1), BinaryMemcacheClientCodec:add(ChannelHandler)),
		AbstractBinaryMemcacheMessage:<init>(String-ByteBuf) to listOf(AbstractMemcacheObject:<init>()),
		AbstractBinaryMemcacheMessage:refCnt() to listOf(ByteBuf:refCnt()),
		AbstractBinaryMemcacheMessage:retain() to listOf(ByteBuf:retain(), AbstractBinaryMemcacheMessage:retain(), AbstractBinaryMemcacheMessage:retain()),
		AbstractBinaryMemcacheMessage:retain(int) to listOf(ByteBuf:retain(int), AbstractBinaryMemcacheMessage:retain(int), AbstractBinaryMemcacheMessage:retain(int)),
		AbstractBinaryMemcacheMessage:release() to listOf(ByteBuf:release()),
		AbstractBinaryMemcacheMessage:release(int) to listOf(ByteBuf:release(int)),
		AbstractBinaryMemcacheMessage:touch() to listOf(AbstractBinaryMemcacheMessage:touch(Object), AbstractBinaryMemcacheMessage:touch(), AbstractBinaryMemcacheMessage:touch()),
		AbstractBinaryMemcacheMessage:touch(Object) to listOf(ByteBuf:touch(Object), AbstractBinaryMemcacheMessage:touch(Object), AbstractBinaryMemcacheMessage:touch(Object)),
		AbstractBinaryMemcacheDecoder:<init>() to listOf(AbstractBinaryMemcacheDecoder:<init>(int)),
		AbstractBinaryMemcacheDecoder:<init>(int) to listOf(AbstractMemcacheObjectDecoder:<init>()),
		AbstractBinaryMemcacheDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(AbstractBinaryMemcacheDecoder$State:ordinal(), ByteBuf:readableBytes(), AbstractBinaryMemcacheDecoder:resetDecoder(), AbstractBinaryMemcacheDecoder:decodeHeader(ByteBuf), AbstractBinaryMemcacheDecoder:invalidMessage(Exception), BinaryMemcacheMessage:extrasLength(), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int), BinaryMemcacheMessage:setExtras(ByteBuf), AbstractBinaryMemcacheDecoder:invalidMessage(Exception), BinaryMemcacheMessage:keyLength(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:toString(int-int-Charset), BinaryMemcacheMessage:setKey(String), ByteBuf:skipBytes(int), AbstractBinaryMemcacheDecoder:invalidMessage(Exception), BinaryMemcacheMessage:totalBodyLength(), BinaryMemcacheMessage:keyLength(), BinaryMemcacheMessage:extrasLength(), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int), DefaultLastMemcacheContent:<init>(ByteBuf), DefaultMemcacheContent:<init>(ByteBuf), AbstractBinaryMemcacheDecoder:invalidChunk(Exception), AbstractBinaryMemcacheDecoder:actualReadableBytes(), ByteBuf:skipBytes(int)),
		AbstractBinaryMemcacheDecoder:invalidMessage(Exception) to listOf(AbstractBinaryMemcacheDecoder:buildInvalidMessage(), DecoderResult:failure(Throwable), BinaryMemcacheMessage:setDecoderResult(DecoderResult)),
		AbstractBinaryMemcacheDecoder:invalidChunk(Exception) to listOf(DefaultLastMemcacheContent:<init>(ByteBuf), DecoderResult:failure(Throwable), MemcacheContent:setDecoderResult(DecoderResult)),
		AbstractBinaryMemcacheDecoder:channelInactive(ChannelHandlerContext) to listOf(AbstractMemcacheObjectDecoder:channelInactive(ChannelHandlerContext), BinaryMemcacheMessage:release(), AbstractBinaryMemcacheDecoder:resetDecoder()),
		BinaryMemcacheObjectAggregator:<init>(int) to listOf(AbstractMemcacheObjectAggregator:<init>(int)),
		BinaryMemcacheObjectAggregator:beginAggregation(BinaryMemcacheMessage-ByteBuf) to listOf(BinaryMemcacheObjectAggregator:toFullRequest(BinaryMemcacheRequest-ByteBuf), BinaryMemcacheObjectAggregator:toFullResponse(BinaryMemcacheResponse-ByteBuf)),
		BinaryMemcacheObjectAggregator:toFullRequest(BinaryMemcacheRequest-ByteBuf) to listOf(BinaryMemcacheRequest:key(), BinaryMemcacheRequest:extras(), DefaultFullBinaryMemcacheRequest:<init>(String-ByteBuf-ByteBuf), BinaryMemcacheRequest:magic(), FullBinaryMemcacheRequest:setMagic(byte), BinaryMemcacheRequest:opcode(), FullBinaryMemcacheRequest:setOpcode(byte), BinaryMemcacheRequest:keyLength(), FullBinaryMemcacheRequest:setKeyLength(short), BinaryMemcacheRequest:extrasLength(), FullBinaryMemcacheRequest:setExtrasLength(byte), BinaryMemcacheRequest:dataType(), FullBinaryMemcacheRequest:setDataType(byte), BinaryMemcacheRequest:totalBodyLength(), FullBinaryMemcacheRequest:setTotalBodyLength(int), BinaryMemcacheRequest:opaque(), FullBinaryMemcacheRequest:setOpaque(int), BinaryMemcacheRequest:cas(), FullBinaryMemcacheRequest:setCas(long), BinaryMemcacheRequest:reserved(), FullBinaryMemcacheRequest:setReserved(short)),
		BinaryMemcacheObjectAggregator:toFullResponse(BinaryMemcacheResponse-ByteBuf) to listOf(BinaryMemcacheResponse:key(), BinaryMemcacheResponse:extras(), DefaultFullBinaryMemcacheResponse:<init>(String-ByteBuf-ByteBuf), BinaryMemcacheResponse:magic(), FullBinaryMemcacheResponse:setMagic(byte), BinaryMemcacheResponse:opcode(), FullBinaryMemcacheResponse:setOpcode(byte), BinaryMemcacheResponse:keyLength(), FullBinaryMemcacheResponse:setKeyLength(short), BinaryMemcacheResponse:extrasLength(), FullBinaryMemcacheResponse:setExtrasLength(byte), BinaryMemcacheResponse:dataType(), FullBinaryMemcacheResponse:setDataType(byte), BinaryMemcacheResponse:totalBodyLength(), FullBinaryMemcacheResponse:setTotalBodyLength(int), BinaryMemcacheResponse:opaque(), FullBinaryMemcacheResponse:setOpaque(int), BinaryMemcacheResponse:cas(), FullBinaryMemcacheResponse:setCas(long), BinaryMemcacheResponse:status(), FullBinaryMemcacheResponse:setStatus(short)),
		BinaryMemcacheObjectAggregator:beginAggregation(Object-ByteBuf) to listOf(BinaryMemcacheObjectAggregator:beginAggregation(BinaryMemcacheMessage-ByteBuf)),
		BinaryMemcacheObjectAggregator:isStartMessage(Object) to listOf(BinaryMemcacheObjectAggregator:isStartMessage(MemcacheObject)),
		BinaryMemcacheClientCodec$Encoder:<init>(BinaryMemcacheClientCodec) to listOf(BinaryMemcacheRequestEncoder:<init>()),
		BinaryMemcacheClientCodec$Encoder:encode(ChannelHandlerContext-Object-List) to listOf(BinaryMemcacheRequestEncoder:encode(ChannelHandlerContext-Object-List), BinaryMemcacheClientCodec:access$100(BinaryMemcacheClientCodec), BinaryMemcacheClientCodec:access$200(BinaryMemcacheClientCodec)),
		BinaryMemcacheClientCodec$Encoder:<init>(BinaryMemcacheClientCodec-BinaryMemcacheClientCodec$1) to listOf(BinaryMemcacheClientCodec$Encoder:<init>(BinaryMemcacheClientCodec)),
		DefaultBinaryMemcacheRequest:<init>() to listOf(DefaultBinaryMemcacheRequest:<init>(String-ByteBuf)),
		DefaultBinaryMemcacheRequest:<init>(String) to listOf(DefaultBinaryMemcacheRequest:<init>(String-ByteBuf)),
		DefaultBinaryMemcacheRequest:<init>(ByteBuf) to listOf(DefaultBinaryMemcacheRequest:<init>(String-ByteBuf)),
		DefaultBinaryMemcacheRequest:<init>(String-ByteBuf) to listOf(AbstractBinaryMemcacheMessage:<init>(String-ByteBuf), DefaultBinaryMemcacheRequest:setMagic(byte)),
		DefaultBinaryMemcacheRequest:retain() to listOf(AbstractBinaryMemcacheMessage:retain(), DefaultBinaryMemcacheRequest:retain(), DefaultBinaryMemcacheRequest:retain(), DefaultBinaryMemcacheRequest:retain()),
		DefaultBinaryMemcacheRequest:retain(int) to listOf(AbstractBinaryMemcacheMessage:retain(int), DefaultBinaryMemcacheRequest:retain(int), DefaultBinaryMemcacheRequest:retain(int), DefaultBinaryMemcacheRequest:retain(int)),
		DefaultBinaryMemcacheRequest:touch() to listOf(AbstractBinaryMemcacheMessage:touch(), DefaultBinaryMemcacheRequest:touch(), DefaultBinaryMemcacheRequest:touch(), DefaultBinaryMemcacheRequest:touch()),
		DefaultBinaryMemcacheRequest:touch(Object) to listOf(AbstractBinaryMemcacheMessage:touch(Object), DefaultBinaryMemcacheRequest:touch(Object), DefaultBinaryMemcacheRequest:touch(Object), DefaultBinaryMemcacheRequest:touch(Object)),
		DefaultBinaryMemcacheResponse:<init>() to listOf(DefaultBinaryMemcacheResponse:<init>(String-ByteBuf)),
		DefaultBinaryMemcacheResponse:<init>(String) to listOf(DefaultBinaryMemcacheResponse:<init>(String-ByteBuf)),
		DefaultBinaryMemcacheResponse:<init>(ByteBuf) to listOf(DefaultBinaryMemcacheResponse:<init>(String-ByteBuf)),
		DefaultBinaryMemcacheResponse:<init>(String-ByteBuf) to listOf(AbstractBinaryMemcacheMessage:<init>(String-ByteBuf), DefaultBinaryMemcacheResponse:setMagic(byte)),
		DefaultBinaryMemcacheResponse:retain() to listOf(AbstractBinaryMemcacheMessage:retain(), DefaultBinaryMemcacheResponse:retain(), DefaultBinaryMemcacheResponse:retain(), DefaultBinaryMemcacheResponse:retain()),
		DefaultBinaryMemcacheResponse:retain(int) to listOf(AbstractBinaryMemcacheMessage:retain(int), DefaultBinaryMemcacheResponse:retain(int), DefaultBinaryMemcacheResponse:retain(int), DefaultBinaryMemcacheResponse:retain(int)),
		DefaultBinaryMemcacheResponse:touch() to listOf(AbstractBinaryMemcacheMessage:touch(), DefaultBinaryMemcacheResponse:touch(), DefaultBinaryMemcacheResponse:touch(), DefaultBinaryMemcacheResponse:touch()),
		DefaultBinaryMemcacheResponse:touch(Object) to listOf(AbstractBinaryMemcacheMessage:touch(Object), DefaultBinaryMemcacheResponse:touch(Object), DefaultBinaryMemcacheResponse:touch(Object), DefaultBinaryMemcacheResponse:touch(Object)),
		BinaryMemcacheClientCodec$Decoder:<init>(BinaryMemcacheClientCodec-int) to listOf(BinaryMemcacheResponseDecoder:<init>(int)),
		BinaryMemcacheClientCodec$Decoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(BinaryMemcacheResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), BinaryMemcacheClientCodec:access$100(BinaryMemcacheClientCodec), BinaryMemcacheClientCodec:access$200(BinaryMemcacheClientCodec)),
		BinaryMemcacheClientCodec$Decoder:channelInactive(ChannelHandlerContext) to listOf(BinaryMemcacheResponseDecoder:channelInactive(ChannelHandlerContext), BinaryMemcacheClientCodec:access$100(BinaryMemcacheClientCodec), BinaryMemcacheClientCodec:access$200(BinaryMemcacheClientCodec), PrematureChannelClosureException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		LastMemcacheContent:<clinit>() to listOf(LastMemcacheContent$1:<init>()),
		DefaultMemcacheContent:<init>(ByteBuf) to listOf(AbstractMemcacheObject:<init>()),
		DefaultMemcacheContent:copy() to listOf(ByteBuf:copy(), DefaultMemcacheContent:<init>(ByteBuf), DefaultMemcacheContent:copy()),
		DefaultMemcacheContent:duplicate() to listOf(ByteBuf:duplicate(), DefaultMemcacheContent:<init>(ByteBuf), DefaultMemcacheContent:duplicate()),
		DefaultMemcacheContent:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultMemcacheContent:retain() to listOf(ByteBuf:retain(), DefaultMemcacheContent:retain(), DefaultMemcacheContent:retain()),
		DefaultMemcacheContent:retain(int) to listOf(ByteBuf:retain(int), DefaultMemcacheContent:retain(int), DefaultMemcacheContent:retain(int)),
		DefaultMemcacheContent:touch() to listOf(ByteBuf:touch(), DefaultMemcacheContent:touch(), DefaultMemcacheContent:touch()),
		DefaultMemcacheContent:touch(Object) to listOf(ByteBuf:touch(Object), DefaultMemcacheContent:touch(Object), DefaultMemcacheContent:touch(Object)),
		DefaultMemcacheContent:release() to listOf(ByteBuf:release()),
		DefaultMemcacheContent:release(int) to listOf(ByteBuf:release(int)),
		DefaultMemcacheContent:toString() to listOf(StringUtil:simpleClassName(Object), DefaultMemcacheContent:content(), DefaultMemcacheContent:decoderResult()),
		LastMemcacheContent$1:touch(Object) to listOf(LastMemcacheContent$1:touch(Object), LastMemcacheContent$1:touch(Object), LastMemcacheContent$1:touch(Object)),
		LastMemcacheContent$1:touch() to listOf(LastMemcacheContent$1:touch(), LastMemcacheContent$1:touch(), LastMemcacheContent$1:touch()),
		LastMemcacheContent$1:retain(int) to listOf(LastMemcacheContent$1:retain(int), LastMemcacheContent$1:retain(int), LastMemcacheContent$1:retain(int)),
		LastMemcacheContent$1:retain() to listOf(LastMemcacheContent$1:retain(), LastMemcacheContent$1:retain(), LastMemcacheContent$1:retain()),
		LastMemcacheContent$1:duplicate() to listOf(LastMemcacheContent$1:duplicate(), LastMemcacheContent$1:duplicate()),
		LastMemcacheContent$1:copy() to listOf(LastMemcacheContent$1:copy(), LastMemcacheContent$1:copy()),
		AbstractMemcacheObjectAggregator:<init>(int) to listOf(MessageAggregator:<init>(int)),
		AbstractMemcacheObjectAggregator:newContinueResponse(Object) to listOf(AbstractMemcacheObjectAggregator:newContinueResponse(MemcacheMessage)),
		AbstractMemcacheObjectAggregator:contentLength(Object) to listOf(AbstractMemcacheObjectAggregator:contentLength(MemcacheMessage)),
		AbstractMemcacheObjectAggregator:hasContentLength(Object) to listOf(AbstractMemcacheObjectAggregator:hasContentLength(MemcacheMessage)),
		AbstractMemcacheObjectAggregator:isAggregated(Object) to listOf(AbstractMemcacheObjectAggregator:isAggregated(MemcacheObject)),
		AbstractMemcacheObjectAggregator:isLastContentMessage(ByteBufHolder) to listOf(AbstractMemcacheObjectAggregator:isLastContentMessage(MemcacheContent)),
		AbstractMemcacheObjectAggregator:isContentMessage(Object) to listOf(AbstractMemcacheObjectAggregator:isContentMessage(MemcacheObject)),
		AbstractMemcacheObjectEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		AbstractMemcacheObjectEncoder:encode(ChannelHandlerContext-Object-List) to listOf(StringUtil:simpleClassName(Object), AbstractMemcacheObjectEncoder:encodeMessage(ChannelHandlerContext-MemcacheMessage), AbstractMemcacheObjectEncoder:contentLength(Object), AbstractMemcacheObjectEncoder:encodeAndRetain(Object)),
		AbstractMemcacheObjectEncoder:contentLength(Object) to listOf(MemcacheContent:content(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), FileRegion:count(), StringUtil:simpleClassName(Object)),
		AbstractMemcacheObjectEncoder:encodeAndRetain(Object) to listOf(ByteBuf:retain(), MemcacheContent:content(), ByteBuf:retain(), FileRegion:retain(), StringUtil:simpleClassName(Object)),
		AbstractMemcacheObjectDecoder:<init>() to listOf(ByteToMessageDecoder:<init>()),
		DefaultLastMemcacheContent:<init>() to listOf(Unpooled:buffer(), DefaultMemcacheContent:<init>(ByteBuf)),
		DefaultLastMemcacheContent:<init>(ByteBuf) to listOf(DefaultMemcacheContent:<init>(ByteBuf)),
		DefaultLastMemcacheContent:retain() to listOf(DefaultMemcacheContent:retain(), DefaultLastMemcacheContent:retain(), DefaultLastMemcacheContent:retain(), DefaultLastMemcacheContent:retain()),
		DefaultLastMemcacheContent:retain(int) to listOf(DefaultMemcacheContent:retain(int), DefaultLastMemcacheContent:retain(int), DefaultLastMemcacheContent:retain(int), DefaultLastMemcacheContent:retain(int)),
		DefaultLastMemcacheContent:touch() to listOf(DefaultMemcacheContent:touch(), DefaultLastMemcacheContent:touch(), DefaultLastMemcacheContent:touch(), DefaultLastMemcacheContent:touch()),
		DefaultLastMemcacheContent:touch(Object) to listOf(DefaultMemcacheContent:touch(Object), DefaultLastMemcacheContent:touch(Object), DefaultLastMemcacheContent:touch(Object), DefaultLastMemcacheContent:touch(Object)),
		DefaultLastMemcacheContent:copy() to listOf(DefaultLastMemcacheContent:content(), ByteBuf:copy(), DefaultLastMemcacheContent:<init>(ByteBuf), DefaultLastMemcacheContent:copy(), DefaultLastMemcacheContent:copy()),
		DefaultLastMemcacheContent:duplicate() to listOf(DefaultLastMemcacheContent:content(), ByteBuf:duplicate(), DefaultLastMemcacheContent:<init>(ByteBuf), DefaultLastMemcacheContent:duplicate(), DefaultLastMemcacheContent:duplicate()),
		DefaultTextHeaders$SingleHeaderValuesComposer$2:escape(CharSequence) to listOf(StringUtil:escapeCsv(CharSequence)),
		DefaultTextHeaders$SingleHeaderValuesComposer$2:escape(Object) to listOf(DefaultTextHeaders$SingleHeaderValuesComposer$2:escape(CharSequence)),
		DefaultSpdyHeaders$2:convertName(CharSequence) to listOf(AsciiString:toLowerCase(), SpdyCodecUtil:validateHeaderName(CharSequence)),
		DefaultSpdyHeaders$2:convertName(Object) to listOf(DefaultSpdyHeaders$2:convertName(CharSequence)),
		SpdyCodecUtil:getUnsignedShort(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyCodecUtil:getUnsignedMedium(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyCodecUtil:getUnsignedInt(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyCodecUtil:getSignedInt(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyOrHttpChooser$1:<clinit>() to listOf(SpdyOrHttpChooser$SelectedProtocol:values(), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser$SelectedProtocol:ordinal()),
		SpdySessionHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), SpdySessionHandler:access$000(SpdySessionHandler-ChannelHandlerContext-SpdySessionStatus)),
		SpdySessionHandler$1:operationComplete(Future) to listOf(SpdySessionHandler$1:operationComplete(ChannelFuture)),
		SpdySession$StreamComparator:compare(Integer-Integer) to listOf(SpdySession:access$000(SpdySession), SpdySession:access$000(SpdySession), SpdySession$StreamState:getPriority(), SpdySession$StreamState:getPriority()),
		SpdySession$StreamComparator:compare(Object-Object) to listOf(SpdySession$StreamComparator:compare(Integer-Integer)),
		SpdyHeaderBlockZlibDecoder:<init>(SpdyVersion-int) to listOf(SpdyHeaderBlockRawDecoder:<init>(SpdyVersion-int)),
		SpdyHeaderBlockZlibDecoder:decode(ByteBufAllocator-ByteBuf-SpdyHeadersFrame) to listOf(SpdyHeaderBlockZlibDecoder:setInput(ByteBuf), SpdyHeaderBlockZlibDecoder:decompress(ByteBufAllocator-SpdyHeadersFrame), ByteBuf:skipBytes(int)),
		SpdyHeaderBlockZlibDecoder:setInput(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[])),
		SpdyHeaderBlockZlibDecoder:decompress(ByteBufAllocator-SpdyHeadersFrame) to listOf(SpdyHeaderBlockZlibDecoder:ensureBuffer(ByteBufAllocator), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:writableBytes(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), SpdyHeaderBlockZlibDecoder:decodeHeaderBlock(ByteBuf-SpdyHeadersFrame), ByteBuf:discardReadBytes(), SpdyProtocolException:<init>(String-Throwable)),
		SpdyHeaderBlockZlibDecoder:ensureBuffer(ByteBufAllocator) to listOf(ByteBufAllocator:heapBuffer(int), ByteBuf:ensureWritable(int)),
		SpdyHeaderBlockZlibDecoder:endHeaderBlock(SpdyHeadersFrame) to listOf(SpdyHeaderBlockRawDecoder:endHeaderBlock(SpdyHeadersFrame), SpdyHeaderBlockZlibDecoder:releaseBuffer()),
		SpdyHeaderBlockZlibDecoder:end() to listOf(SpdyHeaderBlockRawDecoder:end(), SpdyHeaderBlockZlibDecoder:releaseBuffer()),
		SpdyHeaderBlockZlibDecoder:releaseBuffer() to listOf(ByteBuf:release()),
		SpdyHeaderBlockZlibDecoder:<clinit>() to listOf(SpdyProtocolException:<init>(String)),
		SpdyHeaderBlockZlibEncoder:<init>(SpdyVersion-int) to listOf(SpdyHeaderBlockRawEncoder:<init>(SpdyVersion)),
		SpdyHeaderBlockZlibEncoder:setInput(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[])),
		SpdyHeaderBlockZlibEncoder:encode(ByteBufAllocator-int) to listOf(ByteBufAllocator:heapBuffer(int), SpdyHeaderBlockZlibEncoder:compressInto(ByteBuf), ByteBuf:capacity(), ByteBuf:ensureWritable(int), ByteBuf:release(), ByteBuf:release()),
		SpdyHeaderBlockZlibEncoder:compressInto(ByteBuf) to listOf(ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		SpdyHeaderBlockZlibEncoder:encode(ByteBufAllocator-SpdyHeadersFrame) to listOf(SpdyHeaderBlockRawEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), ByteBuf:isReadable(), ByteBuf:release(), SpdyHeaderBlockZlibEncoder:setInput(ByteBuf), SpdyHeaderBlockZlibEncoder:encode(ByteBufAllocator-int), ByteBuf:release(), ByteBuf:release()),
		SpdyHeaderBlockZlibEncoder:end() to listOf(SpdyHeaderBlockRawEncoder:end()),
		SpdyHeaderBlockRawEncoder:<init>(SpdyVersion) to listOf(SpdyHeaderBlockEncoder:<init>(), SpdyVersion:getVersion()),
		SpdyHeaderBlockRawEncoder:setLengthField(ByteBuf-int-int) to listOf(ByteBuf:setInt(int-int)),
		SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int) to listOf(ByteBuf:writeInt(int)),
		SpdyHeaderBlockRawEncoder:encode(ByteBufAllocator-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:names(), ByteBufAllocator:heapBuffer(), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), AsciiString:getBytes(CharSequence-Charset), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), ByteBuf:writeBytes(byte[]), ByteBuf:writerIndex(), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), SpdyHeadersFrame:headers(), SpdyHeaders:getAll(Object), AsciiString:getBytes(CharSequence-Charset), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), SpdyHeaderBlockRawEncoder:setLengthField(ByteBuf-int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		SpdyHeaderBlockDecoder:newInstance(SpdyVersion-int) to listOf(SpdyHeaderBlockZlibDecoder:<init>(SpdyVersion-int)),
		DefaultSpdyDataFrame:<init>(int) to listOf(Unpooled:buffer(int), DefaultSpdyDataFrame:<init>(int-ByteBuf)),
		DefaultSpdyDataFrame:<init>(int-ByteBuf) to listOf(DefaultSpdyStreamFrame:<init>(int), DefaultSpdyDataFrame:validate(ByteBuf)),
		DefaultSpdyDataFrame:validate(ByteBuf) to listOf(ByteBuf:readableBytes()),
		DefaultSpdyDataFrame:setStreamId(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int), DefaultSpdyDataFrame:setStreamId(int)),
		DefaultSpdyDataFrame:setLast(boolean) to listOf(DefaultSpdyStreamFrame:setLast(boolean), DefaultSpdyDataFrame:setLast(boolean)),
		DefaultSpdyDataFrame:content() to listOf(ByteBuf:refCnt(), ByteBuf:refCnt(), IllegalReferenceCountException:<init>(int)),
		DefaultSpdyDataFrame:copy() to listOf(DefaultSpdyDataFrame:streamId(), DefaultSpdyDataFrame:content(), ByteBuf:copy(), DefaultSpdyDataFrame:<init>(int-ByteBuf), DefaultSpdyDataFrame:isLast(), SpdyDataFrame:setLast(boolean), DefaultSpdyDataFrame:copy()),
		DefaultSpdyDataFrame:duplicate() to listOf(DefaultSpdyDataFrame:streamId(), DefaultSpdyDataFrame:content(), ByteBuf:duplicate(), DefaultSpdyDataFrame:<init>(int-ByteBuf), DefaultSpdyDataFrame:isLast(), SpdyDataFrame:setLast(boolean), DefaultSpdyDataFrame:duplicate()),
		DefaultSpdyDataFrame:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultSpdyDataFrame:retain() to listOf(ByteBuf:retain(), DefaultSpdyDataFrame:retain(), DefaultSpdyDataFrame:retain()),
		DefaultSpdyDataFrame:retain(int) to listOf(ByteBuf:retain(int), DefaultSpdyDataFrame:retain(int), DefaultSpdyDataFrame:retain(int)),
		DefaultSpdyDataFrame:touch() to listOf(ByteBuf:touch(), DefaultSpdyDataFrame:touch(), DefaultSpdyDataFrame:touch()),
		DefaultSpdyDataFrame:touch(Object) to listOf(ByteBuf:touch(Object), DefaultSpdyDataFrame:touch(Object), DefaultSpdyDataFrame:touch(Object)),
		DefaultSpdyDataFrame:release() to listOf(ByteBuf:release()),
		DefaultSpdyDataFrame:release(int) to listOf(ByteBuf:release(int)),
		DefaultSpdyDataFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdyDataFrame:isLast(), DefaultSpdyDataFrame:streamId(), DefaultSpdyDataFrame:refCnt(), DefaultSpdyDataFrame:content(), ByteBuf:readableBytes()),
		DefaultSpdyGoAwayFrame:<init>(int) to listOf(DefaultSpdyGoAwayFrame:<init>(int-int)),
		DefaultSpdyGoAwayFrame:<init>(int-int) to listOf(SpdySessionStatus:valueOf(int), DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus)),
		DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus) to listOf(DefaultSpdyGoAwayFrame:setLastGoodStreamId(int), DefaultSpdyGoAwayFrame:setStatus(SpdySessionStatus)),
		DefaultSpdyGoAwayFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdyGoAwayFrame:lastGoodStreamId(), DefaultSpdyGoAwayFrame:status()),
		DefaultSpdyStreamFrame:<init>(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int)),
		SpdyFrameEncoder:<init>(SpdyVersion) to listOf(SpdyVersion:getVersion()),
		SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int) to listOf(ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int)),
		SpdyFrameEncoder:encodeDataFrame(ByteBufAllocator-int-boolean-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), ByteBuf:writeInt(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		SpdyFrameEncoder:encodeSynStreamFrame(ByteBufAllocator-int-int-byte-boolean-boolean-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int), ByteBuf:writeInt(int), ByteBuf:writeShort(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		SpdyFrameEncoder:encodeSynReplyFrame(ByteBufAllocator-int-boolean-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		SpdyFrameEncoder:encodeRstStreamFrame(ByteBufAllocator-int-int) to listOf(ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int), ByteBuf:writeInt(int)),
		SpdyFrameEncoder:encodeSettingsFrame(ByteBufAllocator-SpdySettingsFrame) to listOf(SpdySettingsFrame:ids(), SpdySettingsFrame:clearPreviouslyPersistedSettings(), ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int), SpdySettingsFrame:isPersistValue(int), SpdySettingsFrame:isPersisted(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int), SpdySettingsFrame:getValue(int), ByteBuf:writeInt(int)),
		SpdyFrameEncoder:encodePingFrame(ByteBufAllocator-int) to listOf(ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int)),
		SpdyFrameEncoder:encodeGoAwayFrame(ByteBufAllocator-int-int) to listOf(ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int), ByteBuf:writeInt(int)),
		SpdyFrameEncoder:encodeHeadersFrame(ByteBufAllocator-int-boolean-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		SpdyFrameEncoder:encodeWindowUpdateFrame(ByteBufAllocator-int-int) to listOf(ByteBufAllocator:ioBuffer(int), ByteBuf:order(ByteOrder), SpdyFrameEncoder:writeControlFrameHeader(ByteBuf-int-byte-int), ByteBuf:writeInt(int), ByteBuf:writeInt(int)),
		DefaultSpdyWindowUpdateFrame:<init>(int-int) to listOf(DefaultSpdyWindowUpdateFrame:setStreamId(int), DefaultSpdyWindowUpdateFrame:setDeltaWindowSize(int)),
		DefaultSpdyWindowUpdateFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdyWindowUpdateFrame:streamId(), DefaultSpdyWindowUpdateFrame:deltaWindowSize()),
		SpdyHeaderBlockEncoder:newInstance(SpdyVersion-int-int-int) to listOf(PlatformDependent:javaVersion(), SpdyHeaderBlockZlibEncoder:<init>(SpdyVersion-int), SpdyHeaderBlockJZlibEncoder:<init>(SpdyVersion-int-int-int)),
		SpdyHeaderBlockJZlibEncoder:<init>(SpdyVersion-int-int-int) to listOf(SpdyHeaderBlockRawEncoder:<init>(SpdyVersion), Deflater:<init>(), Deflater:deflateInit(int-int-int-JZlib$WrapperType), CompressionException:<init>(String), Deflater:deflateSetDictionary(byte[]-int), CompressionException:<init>(String)),
		SpdyHeaderBlockJZlibEncoder:setInput(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[])),
		SpdyHeaderBlockJZlibEncoder:encode(ByteBufAllocator) to listOf(ByteBufAllocator:heapBuffer(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), Deflater:deflate(int), ByteBuf:skipBytes(int), ByteBuf:skipBytes(int), CompressionException:<init>(String), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ByteBuf:release(), ByteBuf:release()),
		SpdyHeaderBlockJZlibEncoder:encode(ByteBufAllocator-SpdyHeadersFrame) to listOf(SpdyHeaderBlockRawEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), ByteBuf:isReadable(), ByteBuf:release(), SpdyHeaderBlockJZlibEncoder:setInput(ByteBuf), SpdyHeaderBlockJZlibEncoder:encode(ByteBufAllocator), ByteBuf:release(), ByteBuf:release()),
		SpdyHeaderBlockJZlibEncoder:end() to listOf(Deflater:deflateEnd()),
		SpdyHeaderBlockRawDecoder$State:values() to listOf(SpdyHeaderBlockRawDecoder$State[]:clone()),
		SpdyHeaderBlockRawDecoder$State:<clinit>() to listOf(SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int), SpdyHeaderBlockRawDecoder$State:<init>(String-int)),
		SpdySession$StreamState:clearPendingWrites(Throwable) to listOf(SpdySession$PendingWrite:fail(Throwable)),
		SpdySessionHandler$3:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), SpdySessionHandler:access$000(SpdySessionHandler-ChannelHandlerContext-SpdySessionStatus)),
		SpdySessionHandler$3:operationComplete(Future) to listOf(SpdySessionHandler$3:operationComplete(ChannelFuture)),
		SpdyVersion:values() to listOf(SpdyVersion[]:clone()),
		SpdyVersion:<clinit>() to listOf(SpdyVersion:<init>(String-int-int-int)),
		SpdyFrameDecoder$1:<clinit>() to listOf(SpdyFrameDecoder$State:values(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal()),
		SpdySessionHandler$4:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), SpdySessionHandler:access$000(SpdySessionHandler-ChannelHandlerContext-SpdySessionStatus)),
		SpdySessionHandler$4:operationComplete(Future) to listOf(SpdySessionHandler$4:operationComplete(ChannelFuture)),
		SpdyHttpEncoder:<init>(SpdyVersion) to listOf(MessageToMessageEncoder:<init>()),
		SpdyHttpEncoder:encode(ChannelHandlerContext-HttpObject-List) to listOf(SpdyHttpEncoder:createSynStreamFrame(HttpRequest), SpdySynStreamFrame:isLast(), SpdySynStreamFrame:isUnidirectional(), SpdyHttpEncoder:createHeadersFrame(HttpResponse), SpdyHeadersFrame:isLast(), HttpContent:content(), ByteBuf:retain(), HttpContent:content(), DefaultSpdyDataFrame:<init>(int-ByteBuf), LastHttpContent:trailingHeaders(), HttpHeaders:isEmpty(), SpdyDataFrame:setLast(boolean), DefaultSpdyHeadersFrame:<init>(int), SpdyHeadersFrame:setLast(boolean), HttpHeaders:iterator(), SpdyHeadersFrame:headers(), SpdyHeaders:add(CharSequence-CharSequence), UnsupportedMessageTypeException:<init>(Object-Class[])),
		SpdyHttpEncoder:createSynStreamFrame(HttpRequest) to listOf(HttpRequest:headers(), HttpHeaders:getInt(Object), HttpHeaders:getInt(Object-int), HttpHeaders:getInt(Object-int), HttpHeaders:get(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), DefaultSpdySynStreamFrame:<init>(int-int-byte), SpdySynStreamFrame:headers(), HttpRequest:method(), HttpMethod:name(), SpdyHeaders:set(CharSequence-CharSequence), HttpRequest:uri(), SpdyHeaders:set(CharSequence-CharSequence), HttpRequest:protocolVersion(), HttpVersion:text(), SpdyHeaders:set(CharSequence-CharSequence), HttpHeaders:get(Object), HttpHeaders:remove(Object), SpdyHeaders:set(CharSequence-CharSequence), SpdyHeaders:set(CharSequence-CharSequence), HttpHeaders:iterator(), SpdyHeaders:add(CharSequence-CharSequence), SpdySynStreamFrame:streamId(), SpdyHttpEncoder:isLast(HttpMessage), SpdySynStreamFrame:setLast(boolean), SpdySynStreamFrame:setUnidirectional(boolean)),
		SpdyHttpEncoder:createHeadersFrame(HttpResponse) to listOf(HttpResponse:headers(), HttpHeaders:getInt(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), HttpHeaders:remove(Object), SpdyCodecUtil:isServerId(int), DefaultSpdyHeadersFrame:<init>(int), DefaultSpdySynReplyFrame:<init>(int), SpdyHeadersFrame:headers(), HttpResponse:status(), HttpResponseStatus:codeAsText(), SpdyHeaders:set(CharSequence-CharSequence), HttpResponse:protocolVersion(), HttpVersion:text(), SpdyHeaders:set(CharSequence-CharSequence), HttpHeaders:iterator(), SpdyHeadersFrame:headers(), SpdyHeaders:add(CharSequence-CharSequence), SpdyHttpEncoder:isLast(HttpMessage), SpdyHeadersFrame:setLast(boolean)),
		SpdyHttpEncoder:isLast(HttpMessage) to listOf(FullHttpMessage:trailingHeaders(), HttpHeaders:isEmpty(), FullHttpMessage:content(), ByteBuf:isReadable()),
		SpdyHttpEncoder:encode(ChannelHandlerContext-Object-List) to listOf(SpdyHttpEncoder:encode(ChannelHandlerContext-HttpObject-List)),
		SpdyFrameCodec$1:operationComplete(ChannelFuture) to listOf(SpdyFrameCodec:access$000(SpdyFrameCodec), SpdyHeaderBlockDecoder:end(), SpdyFrameCodec:access$100(SpdyFrameCodec), SpdyHeaderBlockEncoder:end()),
		SpdyFrameCodec$1:operationComplete(Future) to listOf(SpdyFrameCodec$1:operationComplete(ChannelFuture)),
		SpdySessionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		SpdySessionHandler$ClosingChannelFutureListener:operationComplete(Future) to listOf(SpdySessionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture)),
		DefaultSpdyHeaders$1:<init>() to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:<init>()),
		DefaultSpdyHeaders$1:convertObject(Object) to listOf(SpdyCodecUtil:validateHeaderValue(CharSequence), DefaultSpdyHeaders$1:convertObject(Object)),
		SpdyHeaders$HttpNames:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		SpdySessionStatus:valueOf(int) to listOf(SpdySessionStatus:<init>(int-String)),
		SpdySessionStatus:hashCode() to listOf(SpdySessionStatus:code()),
		SpdySessionStatus:equals(Object) to listOf(SpdySessionStatus:code(), SpdySessionStatus:code()),
		SpdySessionStatus:toString() to listOf(SpdySessionStatus:statusPhrase()),
		SpdySessionStatus:compareTo(SpdySessionStatus) to listOf(SpdySessionStatus:code(), SpdySessionStatus:code()),
		SpdySessionStatus:compareTo(Object) to listOf(SpdySessionStatus:compareTo(SpdySessionStatus)),
		SpdySessionStatus:<clinit>() to listOf(SpdySessionStatus:<init>(int-String), SpdySessionStatus:<init>(int-String), SpdySessionStatus:<init>(int-String)),
		SpdyFrameDecoder$State:values() to listOf(SpdyFrameDecoder$State[]:clone()),
		SpdyFrameDecoder$State:<clinit>() to listOf(SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int)),
		DefaultSpdyRstStreamFrame:<init>(int-int) to listOf(SpdyStreamStatus:valueOf(int), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus)),
		DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus) to listOf(DefaultSpdyStreamFrame:<init>(int), DefaultSpdyRstStreamFrame:setStatus(SpdyStreamStatus)),
		DefaultSpdyRstStreamFrame:setStreamId(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int), DefaultSpdyRstStreamFrame:setStreamId(int)),
		DefaultSpdyRstStreamFrame:setLast(boolean) to listOf(DefaultSpdyStreamFrame:setLast(boolean), DefaultSpdyRstStreamFrame:setLast(boolean)),
		DefaultSpdyRstStreamFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdyRstStreamFrame:streamId(), DefaultSpdyRstStreamFrame:status()),
		DefaultSpdySynStreamFrame:<init>(int-int-byte) to listOf(DefaultSpdyHeadersFrame:<init>(int), DefaultSpdySynStreamFrame:setAssociatedStreamId(int), DefaultSpdySynStreamFrame:setPriority(byte)),
		DefaultSpdySynStreamFrame:setStreamId(int) to listOf(DefaultSpdyHeadersFrame:setStreamId(int), DefaultSpdySynStreamFrame:setStreamId(int), DefaultSpdySynStreamFrame:setStreamId(int)),
		DefaultSpdySynStreamFrame:setLast(boolean) to listOf(DefaultSpdyHeadersFrame:setLast(boolean), DefaultSpdySynStreamFrame:setLast(boolean), DefaultSpdySynStreamFrame:setLast(boolean)),
		DefaultSpdySynStreamFrame:setInvalid() to listOf(DefaultSpdyHeadersFrame:setInvalid(), DefaultSpdySynStreamFrame:setInvalid()),
		DefaultSpdySynStreamFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdySynStreamFrame:isLast(), DefaultSpdySynStreamFrame:isUnidirectional(), DefaultSpdySynStreamFrame:streamId(), DefaultSpdySynStreamFrame:associatedStreamId(), DefaultSpdySynStreamFrame:priority(), DefaultSpdySynStreamFrame:appendHeaders(StringBuilder)),
		DefaultSpdyHeadersFrame:<init>(int) to listOf(DefaultSpdyStreamFrame:<init>(int), DefaultSpdyHeaders:<init>()),
		DefaultSpdyHeadersFrame:setStreamId(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int), DefaultSpdyHeadersFrame:setStreamId(int)),
		DefaultSpdyHeadersFrame:setLast(boolean) to listOf(DefaultSpdyStreamFrame:setLast(boolean), DefaultSpdyHeadersFrame:setLast(boolean)),
		DefaultSpdyHeadersFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdyHeadersFrame:isLast(), DefaultSpdyHeadersFrame:streamId(), DefaultSpdyHeadersFrame:appendHeaders(StringBuilder)),
		DefaultSpdyHeadersFrame:appendHeaders(StringBuilder) to listOf(DefaultSpdyHeadersFrame:headers(), SpdyHeaders:iterator()),
		SpdyOrHttpChooser:<init>(int-int) to listOf(ByteToMessageDecoder:<init>()),
		SpdyOrHttpChooser:getProtocol(SSLEngine) to listOf(SSLEngine:getSession(), SSLSession:getProtocol(), StringUtil:split(String-char), SpdyOrHttpChooser$SelectedProtocol:protocol(String)),
		SpdyOrHttpChooser:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SpdyOrHttpChooser:initPipeline(ChannelHandlerContext), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		SpdyOrHttpChooser:initPipeline(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), SslHandler:engine(), SpdyOrHttpChooser:getProtocol(SSLEngine), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser:addSpdyHandlers(ChannelHandlerContext-SpdyVersion), SpdyOrHttpChooser:addHttpHandlers(ChannelHandlerContext)),
		SpdyOrHttpChooser:addSpdyHandlers(ChannelHandlerContext-SpdyVersion) to listOf(ChannelHandlerContext:pipeline(), SpdyFrameCodec:<init>(SpdyVersion), ChannelPipeline:addLast(String-ChannelHandler), SpdySessionHandler:<init>(SpdyVersion-boolean), ChannelPipeline:addLast(String-ChannelHandler), SpdyHttpEncoder:<init>(SpdyVersion), ChannelPipeline:addLast(String-ChannelHandler), SpdyHttpDecoder:<init>(SpdyVersion-int), ChannelPipeline:addLast(String-ChannelHandler), SpdyHttpResponseStreamIdHandler:<init>(), ChannelPipeline:addLast(String-ChannelHandler), SpdyOrHttpChooser:createHttpRequestHandlerForSpdy(), ChannelPipeline:addLast(String-ChannelHandler)),
		SpdyOrHttpChooser:addHttpHandlers(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), HttpRequestDecoder:<init>(), ChannelPipeline:addLast(String-ChannelHandler), HttpResponseEncoder:<init>(), ChannelPipeline:addLast(String-ChannelHandler), HttpObjectAggregator:<init>(int), ChannelPipeline:addLast(String-ChannelHandler), SpdyOrHttpChooser:createHttpRequestHandlerForHttp(), ChannelPipeline:addLast(String-ChannelHandler)),
		SpdyOrHttpChooser:createHttpRequestHandlerForSpdy() to listOf(SpdyOrHttpChooser:createHttpRequestHandlerForHttp()),
		SpdySessionHandler$2:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), SpdySessionHandler:access$000(SpdySessionHandler-ChannelHandlerContext-SpdySessionStatus)),
		SpdySessionHandler$2:operationComplete(Future) to listOf(SpdySessionHandler$2:operationComplete(ChannelFuture)),
		SpdyFrameCodec:<init>(SpdyVersion) to listOf(SpdyFrameCodec:<init>(SpdyVersion-int-int-int-int-int)),
		SpdyFrameCodec:<init>(SpdyVersion-int-int-int-int-int) to listOf(SpdyHeaderBlockDecoder:newInstance(SpdyVersion-int), SpdyHeaderBlockEncoder:newInstance(SpdyVersion-int-int-int), SpdyFrameCodec:<init>(SpdyVersion-int-SpdyHeaderBlockDecoder-SpdyHeaderBlockEncoder)),
		SpdyFrameCodec:<init>(SpdyVersion-int-SpdyHeaderBlockDecoder-SpdyHeaderBlockEncoder) to listOf(ByteToMessageDecoder:<init>(), SpdyFrameDecoder:<init>(SpdyVersion-SpdyFrameDecoderDelegate-int), SpdyFrameEncoder:<init>(SpdyVersion)),
		SpdyFrameCodec:handlerAdded(ChannelHandlerContext) to listOf(ByteToMessageDecoder:handlerAdded(ChannelHandlerContext), ChannelHandlerContext:channel(), Channel:closeFuture(), SpdyFrameCodec$1:<init>(SpdyFrameCodec), ChannelFuture:addListener(GenericFutureListener)),
		SpdyFrameCodec:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SpdyFrameDecoder:decode(ByteBuf)),
		SpdyFrameCodec:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerContext:alloc(), SpdyDataFrame:streamId(), SpdyDataFrame:isLast(), SpdyDataFrame:content(), SpdyFrameEncoder:encodeDataFrame(ByteBufAllocator-int-boolean-ByteBuf), SpdyDataFrame:release(), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyHeaderBlockEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), ChannelHandlerContext:alloc(), SpdySynStreamFrame:streamId(), SpdySynStreamFrame:associatedStreamId(), SpdySynStreamFrame:priority(), SpdySynStreamFrame:isLast(), SpdySynStreamFrame:isUnidirectional(), SpdyFrameEncoder:encodeSynStreamFrame(ByteBufAllocator-int-int-byte-boolean-boolean-ByteBuf), ByteBuf:release(), ByteBuf:release(), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyHeaderBlockEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), ChannelHandlerContext:alloc(), SpdySynReplyFrame:streamId(), SpdySynReplyFrame:isLast(), SpdyFrameEncoder:encodeSynReplyFrame(ByteBufAllocator-int-boolean-ByteBuf), ByteBuf:release(), ByteBuf:release(), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyRstStreamFrame:streamId(), SpdyRstStreamFrame:status(), SpdyStreamStatus:code(), SpdyFrameEncoder:encodeRstStreamFrame(ByteBufAllocator-int-int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyFrameEncoder:encodeSettingsFrame(ByteBufAllocator-SpdySettingsFrame), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyPingFrame:id(), SpdyFrameEncoder:encodePingFrame(ByteBufAllocator-int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyGoAwayFrame:lastGoodStreamId(), SpdyGoAwayFrame:status(), SpdySessionStatus:code(), SpdyFrameEncoder:encodeGoAwayFrame(ByteBufAllocator-int-int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyHeaderBlockEncoder:encode(ByteBufAllocator-SpdyHeadersFrame), ChannelHandlerContext:alloc(), SpdyHeadersFrame:streamId(), SpdyHeadersFrame:isLast(), SpdyFrameEncoder:encodeHeadersFrame(ByteBufAllocator-int-boolean-ByteBuf), ByteBuf:release(), ByteBuf:release(), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:alloc(), SpdyWindowUpdateFrame:streamId(), SpdyWindowUpdateFrame:deltaWindowSize(), SpdyFrameEncoder:encodeWindowUpdateFrame(ByteBufAllocator-int-int), ChannelHandlerContext:write(Object-ChannelPromise), UnsupportedMessageTypeException:<init>(Object-Class[])),
		SpdyFrameCodec:readDataFrame(int-boolean-ByteBuf) to listOf(DefaultSpdyDataFrame:<init>(int-ByteBuf), SpdyDataFrame:setLast(boolean), ChannelHandlerContext:fireChannelRead(Object)),
		SpdyFrameCodec:readSynStreamFrame(int-int-byte-boolean-boolean) to listOf(DefaultSpdySynStreamFrame:<init>(int-int-byte), SpdySynStreamFrame:setLast(boolean), SpdySynStreamFrame:setUnidirectional(boolean)),
		SpdyFrameCodec:readSynReplyFrame(int-boolean) to listOf(DefaultSpdySynReplyFrame:<init>(int), SpdySynReplyFrame:setLast(boolean)),
		SpdyFrameCodec:readRstStreamFrame(int-int) to listOf(DefaultSpdyRstStreamFrame:<init>(int-int), ChannelHandlerContext:fireChannelRead(Object)),
		SpdyFrameCodec:readSettingsFrame(boolean) to listOf(DefaultSpdySettingsFrame:<init>(), SpdySettingsFrame:setClearPreviouslyPersistedSettings(boolean)),
		SpdyFrameCodec:readSetting(int-int-boolean-boolean) to listOf(SpdySettingsFrame:setValue(int-int-boolean-boolean)),
		SpdyFrameCodec:readSettingsEnd() to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		SpdyFrameCodec:readPingFrame(int) to listOf(DefaultSpdyPingFrame:<init>(int), ChannelHandlerContext:fireChannelRead(Object)),
		SpdyFrameCodec:readGoAwayFrame(int-int) to listOf(DefaultSpdyGoAwayFrame:<init>(int-int), ChannelHandlerContext:fireChannelRead(Object)),
		SpdyFrameCodec:readHeadersFrame(int-boolean) to listOf(DefaultSpdyHeadersFrame:<init>(int), SpdyHeadersFrame:setLast(boolean)),
		SpdyFrameCodec:readWindowUpdateFrame(int-int) to listOf(DefaultSpdyWindowUpdateFrame:<init>(int-int), ChannelHandlerContext:fireChannelRead(Object)),
		SpdyFrameCodec:readHeaderBlock(ByteBuf) to listOf(ChannelHandlerContext:alloc(), SpdyHeaderBlockDecoder:decode(ByteBufAllocator-ByteBuf-SpdyHeadersFrame), ByteBuf:release(), ChannelHandlerContext:fireExceptionCaught(Throwable), ByteBuf:release(), ByteBuf:release()),
		SpdyFrameCodec:readHeaderBlockEnd() to listOf(SpdyHeaderBlockDecoder:endHeaderBlock(SpdyHeadersFrame), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:fireChannelRead(Object)),
		SpdyFrameCodec:readFrameError(String) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable)),
		SpdyFrameCodec:<clinit>() to listOf(SpdyProtocolException:<init>(String)),
		SpdyHttpCodec:<init>(SpdyVersion-int) to listOf(SpdyHttpDecoder:<init>(SpdyVersion-int), SpdyHttpEncoder:<init>(SpdyVersion), ChannelHandlerAppender:<init>(ChannelHandler[])),
		SpdyHttpCodec:<init>(SpdyVersion-int-boolean) to listOf(SpdyHttpDecoder:<init>(SpdyVersion-int-boolean), SpdyHttpEncoder:<init>(SpdyVersion), ChannelHandlerAppender:<init>(ChannelHandler[])),
		DefaultSpdySynReplyFrame:<init>(int) to listOf(DefaultSpdyHeadersFrame:<init>(int)),
		DefaultSpdySynReplyFrame:setStreamId(int) to listOf(DefaultSpdyHeadersFrame:setStreamId(int), DefaultSpdySynReplyFrame:setStreamId(int), DefaultSpdySynReplyFrame:setStreamId(int)),
		DefaultSpdySynReplyFrame:setLast(boolean) to listOf(DefaultSpdyHeadersFrame:setLast(boolean), DefaultSpdySynReplyFrame:setLast(boolean), DefaultSpdySynReplyFrame:setLast(boolean)),
		DefaultSpdySynReplyFrame:setInvalid() to listOf(DefaultSpdyHeadersFrame:setInvalid(), DefaultSpdySynReplyFrame:setInvalid()),
		DefaultSpdySynReplyFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdySynReplyFrame:isLast(), DefaultSpdySynReplyFrame:streamId(), DefaultSpdySynReplyFrame:appendHeaders(StringBuilder)),
		DefaultSpdySettingsFrame:getValue(int) to listOf(DefaultSpdySettingsFrame$Setting:getValue()),
		DefaultSpdySettingsFrame:setValue(int-int) to listOf(DefaultSpdySettingsFrame:setValue(int-int-boolean-boolean)),
		DefaultSpdySettingsFrame:setValue(int-int-boolean-boolean) to listOf(DefaultSpdySettingsFrame$Setting:setValue(int), DefaultSpdySettingsFrame$Setting:setPersist(boolean), DefaultSpdySettingsFrame$Setting:setPersisted(boolean), DefaultSpdySettingsFrame$Setting:<init>(int-boolean-boolean)),
		DefaultSpdySettingsFrame:isPersistValue(int) to listOf(DefaultSpdySettingsFrame$Setting:isPersist()),
		DefaultSpdySettingsFrame:setPersistValue(int-boolean) to listOf(DefaultSpdySettingsFrame$Setting:setPersist(boolean)),
		DefaultSpdySettingsFrame:isPersisted(int) to listOf(DefaultSpdySettingsFrame$Setting:isPersisted()),
		DefaultSpdySettingsFrame:setPersisted(int-boolean) to listOf(DefaultSpdySettingsFrame$Setting:setPersisted(boolean)),
		DefaultSpdySettingsFrame:appendSettings(StringBuilder) to listOf(DefaultSpdySettingsFrame:getSettings(), DefaultSpdySettingsFrame$Setting:getValue(), DefaultSpdySettingsFrame$Setting:isPersist(), DefaultSpdySettingsFrame$Setting:isPersisted()),
		DefaultSpdySettingsFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdySettingsFrame:appendSettings(StringBuilder)),
		DefaultSpdyHeaders:<init>() to listOf(DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter)),
		DefaultSpdyHeaders:add(CharSequence-CharSequence) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence), DefaultSpdyHeaders:add(CharSequence-CharSequence)),
		DefaultSpdyHeaders:add(CharSequence-Iterable) to listOf(DefaultTextHeaders:add(CharSequence-Iterable), DefaultSpdyHeaders:add(CharSequence-Iterable)),
		DefaultSpdyHeaders:add(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence[]), DefaultSpdyHeaders:add(CharSequence-CharSequence[])),
		DefaultSpdyHeaders:addObject(CharSequence-Object) to listOf(DefaultTextHeaders:addObject(CharSequence-Object), DefaultSpdyHeaders:addObject(CharSequence-Object)),
		DefaultSpdyHeaders:addObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:addObject(CharSequence-Iterable), DefaultSpdyHeaders:addObject(CharSequence-Iterable)),
		DefaultSpdyHeaders:addObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:addObject(CharSequence-Object[]), DefaultSpdyHeaders:addObject(CharSequence-Object[])),
		DefaultSpdyHeaders:addBoolean(CharSequence-boolean) to listOf(DefaultTextHeaders:addBoolean(CharSequence-boolean), DefaultSpdyHeaders:addBoolean(CharSequence-boolean)),
		DefaultSpdyHeaders:addChar(CharSequence-char) to listOf(DefaultTextHeaders:addChar(CharSequence-char), DefaultSpdyHeaders:addChar(CharSequence-char)),
		DefaultSpdyHeaders:addByte(CharSequence-byte) to listOf(DefaultTextHeaders:addByte(CharSequence-byte), DefaultSpdyHeaders:addByte(CharSequence-byte)),
		DefaultSpdyHeaders:addShort(CharSequence-short) to listOf(DefaultTextHeaders:addShort(CharSequence-short), DefaultSpdyHeaders:addShort(CharSequence-short)),
		DefaultSpdyHeaders:addInt(CharSequence-int) to listOf(DefaultTextHeaders:addInt(CharSequence-int), DefaultSpdyHeaders:addInt(CharSequence-int)),
		DefaultSpdyHeaders:addLong(CharSequence-long) to listOf(DefaultTextHeaders:addLong(CharSequence-long), DefaultSpdyHeaders:addLong(CharSequence-long)),
		DefaultSpdyHeaders:addFloat(CharSequence-float) to listOf(DefaultTextHeaders:addFloat(CharSequence-float), DefaultSpdyHeaders:addFloat(CharSequence-float)),
		DefaultSpdyHeaders:addDouble(CharSequence-double) to listOf(DefaultTextHeaders:addDouble(CharSequence-double), DefaultSpdyHeaders:addDouble(CharSequence-double)),
		DefaultSpdyHeaders:addTimeMillis(CharSequence-long) to listOf(DefaultTextHeaders:addTimeMillis(CharSequence-long), DefaultSpdyHeaders:addTimeMillis(CharSequence-long)),
		DefaultSpdyHeaders:add(TextHeaders) to listOf(DefaultTextHeaders:add(TextHeaders), DefaultSpdyHeaders:add(TextHeaders)),
		DefaultSpdyHeaders:set(CharSequence-CharSequence) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence), DefaultSpdyHeaders:set(CharSequence-CharSequence)),
		DefaultSpdyHeaders:set(CharSequence-Iterable) to listOf(DefaultTextHeaders:set(CharSequence-Iterable), DefaultSpdyHeaders:set(CharSequence-Iterable)),
		DefaultSpdyHeaders:set(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence[]), DefaultSpdyHeaders:set(CharSequence-CharSequence[])),
		DefaultSpdyHeaders:setObject(CharSequence-Object) to listOf(DefaultTextHeaders:setObject(CharSequence-Object), DefaultSpdyHeaders:setObject(CharSequence-Object)),
		DefaultSpdyHeaders:setObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:setObject(CharSequence-Iterable), DefaultSpdyHeaders:setObject(CharSequence-Iterable)),
		DefaultSpdyHeaders:setObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:setObject(CharSequence-Object[]), DefaultSpdyHeaders:setObject(CharSequence-Object[])),
		DefaultSpdyHeaders:setBoolean(CharSequence-boolean) to listOf(DefaultTextHeaders:setBoolean(CharSequence-boolean), DefaultSpdyHeaders:setBoolean(CharSequence-boolean)),
		DefaultSpdyHeaders:setChar(CharSequence-char) to listOf(DefaultTextHeaders:setChar(CharSequence-char), DefaultSpdyHeaders:setChar(CharSequence-char)),
		DefaultSpdyHeaders:setByte(CharSequence-byte) to listOf(DefaultTextHeaders:setByte(CharSequence-byte), DefaultSpdyHeaders:setByte(CharSequence-byte)),
		DefaultSpdyHeaders:setShort(CharSequence-short) to listOf(DefaultTextHeaders:setShort(CharSequence-short), DefaultSpdyHeaders:setShort(CharSequence-short)),
		DefaultSpdyHeaders:setInt(CharSequence-int) to listOf(DefaultTextHeaders:setInt(CharSequence-int), DefaultSpdyHeaders:setInt(CharSequence-int)),
		DefaultSpdyHeaders:setLong(CharSequence-long) to listOf(DefaultTextHeaders:setLong(CharSequence-long), DefaultSpdyHeaders:setLong(CharSequence-long)),
		DefaultSpdyHeaders:setFloat(CharSequence-float) to listOf(DefaultTextHeaders:setFloat(CharSequence-float), DefaultSpdyHeaders:setFloat(CharSequence-float)),
		DefaultSpdyHeaders:setDouble(CharSequence-double) to listOf(DefaultTextHeaders:setDouble(CharSequence-double), DefaultSpdyHeaders:setDouble(CharSequence-double)),
		DefaultSpdyHeaders:setTimeMillis(CharSequence-long) to listOf(DefaultTextHeaders:setTimeMillis(CharSequence-long), DefaultSpdyHeaders:setTimeMillis(CharSequence-long)),
		DefaultSpdyHeaders:set(TextHeaders) to listOf(DefaultTextHeaders:set(TextHeaders), DefaultSpdyHeaders:set(TextHeaders)),
		DefaultSpdyHeaders:setAll(TextHeaders) to listOf(DefaultTextHeaders:setAll(TextHeaders), DefaultSpdyHeaders:setAll(TextHeaders)),
		DefaultSpdyHeaders:clear() to listOf(DefaultTextHeaders:clear(), DefaultSpdyHeaders:clear(), DefaultSpdyHeaders:clear()),
		DefaultSpdyHeaders:setTimeMillis(Object-long) to listOf(DefaultSpdyHeaders:setTimeMillis(CharSequence-long)),
		DefaultSpdyHeaders:setDouble(Object-double) to listOf(DefaultSpdyHeaders:setDouble(CharSequence-double)),
		DefaultSpdyHeaders:setFloat(Object-float) to listOf(DefaultSpdyHeaders:setFloat(CharSequence-float)),
		DefaultSpdyHeaders:setLong(Object-long) to listOf(DefaultSpdyHeaders:setLong(CharSequence-long)),
		DefaultSpdyHeaders:setInt(Object-int) to listOf(DefaultSpdyHeaders:setInt(CharSequence-int)),
		DefaultSpdyHeaders:setShort(Object-short) to listOf(DefaultSpdyHeaders:setShort(CharSequence-short)),
		DefaultSpdyHeaders:setChar(Object-char) to listOf(DefaultSpdyHeaders:setChar(CharSequence-char)),
		DefaultSpdyHeaders:setByte(Object-byte) to listOf(DefaultSpdyHeaders:setByte(CharSequence-byte)),
		DefaultSpdyHeaders:setBoolean(Object-boolean) to listOf(DefaultSpdyHeaders:setBoolean(CharSequence-boolean)),
		DefaultSpdyHeaders:setObject(Object-Object[]) to listOf(DefaultSpdyHeaders:setObject(CharSequence-Object[])),
		DefaultSpdyHeaders:setObject(Object-Iterable) to listOf(DefaultSpdyHeaders:setObject(CharSequence-Iterable)),
		DefaultSpdyHeaders:setObject(Object-Object) to listOf(DefaultSpdyHeaders:setObject(CharSequence-Object)),
		DefaultSpdyHeaders:set(Object-Object[]) to listOf(DefaultSpdyHeaders:set(CharSequence-CharSequence[])),
		DefaultSpdyHeaders:set(Object-Iterable) to listOf(DefaultSpdyHeaders:set(CharSequence-Iterable)),
		DefaultSpdyHeaders:set(Object-Object) to listOf(DefaultSpdyHeaders:set(CharSequence-CharSequence)),
		DefaultSpdyHeaders:addTimeMillis(Object-long) to listOf(DefaultSpdyHeaders:addTimeMillis(CharSequence-long)),
		DefaultSpdyHeaders:addDouble(Object-double) to listOf(DefaultSpdyHeaders:addDouble(CharSequence-double)),
		DefaultSpdyHeaders:addFloat(Object-float) to listOf(DefaultSpdyHeaders:addFloat(CharSequence-float)),
		DefaultSpdyHeaders:addLong(Object-long) to listOf(DefaultSpdyHeaders:addLong(CharSequence-long)),
		DefaultSpdyHeaders:addInt(Object-int) to listOf(DefaultSpdyHeaders:addInt(CharSequence-int)),
		DefaultSpdyHeaders:addShort(Object-short) to listOf(DefaultSpdyHeaders:addShort(CharSequence-short)),
		DefaultSpdyHeaders:addChar(Object-char) to listOf(DefaultSpdyHeaders:addChar(CharSequence-char)),
		DefaultSpdyHeaders:addByte(Object-byte) to listOf(DefaultSpdyHeaders:addByte(CharSequence-byte)),
		DefaultSpdyHeaders:addBoolean(Object-boolean) to listOf(DefaultSpdyHeaders:addBoolean(CharSequence-boolean)),
		DefaultSpdyHeaders:addObject(Object-Object[]) to listOf(DefaultSpdyHeaders:addObject(CharSequence-Object[])),
		DefaultSpdyHeaders:addObject(Object-Iterable) to listOf(DefaultSpdyHeaders:addObject(CharSequence-Iterable)),
		DefaultSpdyHeaders:addObject(Object-Object) to listOf(DefaultSpdyHeaders:addObject(CharSequence-Object)),
		DefaultSpdyHeaders:add(Object-Object[]) to listOf(DefaultSpdyHeaders:add(CharSequence-CharSequence[])),
		DefaultSpdyHeaders:add(Object-Iterable) to listOf(DefaultSpdyHeaders:add(CharSequence-Iterable)),
		DefaultSpdyHeaders:add(Object-Object) to listOf(DefaultSpdyHeaders:add(CharSequence-CharSequence)),
		DefaultSpdyHeaders:<clinit>() to listOf(DefaultSpdyHeaders$1:<init>(), DefaultSpdyHeaders$2:<init>()),
		DefaultSpdyPingFrame:<init>(int) to listOf(DefaultSpdyPingFrame:setId(int)),
		DefaultSpdyPingFrame:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSpdyPingFrame:id()),
		SpdyHeaderBlockRawDecoder:<init>(SpdyVersion-int) to listOf(SpdyHeaderBlockDecoder:<init>()),
		SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf) to listOf(ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int)),
		SpdyHeaderBlockRawDecoder:decode(ByteBufAllocator-ByteBuf-SpdyHeadersFrame) to listOf(SpdyHeaderBlockRawDecoder:decodeHeaderBlock(ByteBuf-SpdyHeadersFrame), ByteBuf:isReadable(), ByteBuf:readableBytes(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf), ByteBuf:writeBytes(ByteBuf), SpdyHeaderBlockRawDecoder:decodeHeaderBlock(ByteBuf-SpdyHeadersFrame), ByteBuf:isReadable(), ByteBuf:discardReadBytes(), SpdyHeaderBlockRawDecoder:releaseBuffer()),
		SpdyHeaderBlockRawDecoder:decodeHeaderBlock(ByteBuf-SpdyHeadersFrame) to listOf(ByteBuf:isReadable(), SpdyHeaderBlockRawDecoder$State:ordinal(), ByteBuf:readableBytes(), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), SpdyHeadersFrame:setInvalid(), ByteBuf:readableBytes(), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:setTruncated(), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), SpdyHeadersFrame:headers(), SpdyHeaders:contains(Object), SpdyHeadersFrame:setInvalid(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:isTruncated(), SpdyHeadersFrame:headers(), SpdyHeaders:add(CharSequence-CharSequence), SpdyHeadersFrame:setTruncated(), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:headers(), SpdyHeaders:add(CharSequence-CharSequence), SpdyHeadersFrame:setInvalid(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), SpdyHeadersFrame:setInvalid(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		SpdyHeaderBlockRawDecoder:endHeaderBlock(SpdyHeadersFrame) to listOf(SpdyHeadersFrame:setInvalid(), SpdyHeaderBlockRawDecoder:releaseBuffer()),
		SpdyHeaderBlockRawDecoder:end() to listOf(SpdyHeaderBlockRawDecoder:releaseBuffer()),
		SpdyHeaderBlockRawDecoder:releaseBuffer() to listOf(ByteBuf:release()),
		SpdyStreamStatus:valueOf(int) to listOf(SpdyStreamStatus:<init>(int-String)),
		SpdyStreamStatus:hashCode() to listOf(SpdyStreamStatus:code()),
		SpdyStreamStatus:equals(Object) to listOf(SpdyStreamStatus:code(), SpdyStreamStatus:code()),
		SpdyStreamStatus:toString() to listOf(SpdyStreamStatus:statusPhrase()),
		SpdyStreamStatus:compareTo(SpdyStreamStatus) to listOf(SpdyStreamStatus:code(), SpdyStreamStatus:code()),
		SpdyStreamStatus:compareTo(Object) to listOf(SpdyStreamStatus:compareTo(SpdyStreamStatus)),
		SpdyStreamStatus:<clinit>() to listOf(SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String)),
		SpdySession$PendingWrite:fail(Throwable) to listOf(SpdyDataFrame:release(), ChannelPromise:setFailure(Throwable)),
		SpdyOrHttpChooser$SelectedProtocol:values() to listOf(SpdyOrHttpChooser$SelectedProtocol[]:clone()),
		SpdyOrHttpChooser$SelectedProtocol:protocol(String) to listOf(SpdyOrHttpChooser$SelectedProtocol:values(), SpdyOrHttpChooser$SelectedProtocol:protocolName()),
		SpdyOrHttpChooser$SelectedProtocol:<clinit>() to listOf(SpdyOrHttpChooser$SelectedProtocol:<init>(String-int-String), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int-String), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int-String), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int-String)),
		SpdyHttpResponseStreamIdHandler:<init>() to listOf(MessageToMessageCodec:<init>()),
		SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-HttpMessage-List) to listOf(HttpMessage:headers(), HttpHeaders:contains(Object), HttpMessage:headers(), HttpHeaders:setInt(CharSequence-int), ReferenceCountUtil:retain(Object)),
		SpdyHttpResponseStreamIdHandler:decode(ChannelHandlerContext-Object-List) to listOf(HttpMessage:headers(), HttpHeaders:contains(Object), HttpMessage:headers(), HttpHeaders:getInt(Object), SpdyRstStreamFrame:streamId(), ReferenceCountUtil:retain(Object)),
		SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-Object-List) to listOf(SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-HttpMessage-List)),
		SpdyFrameDecoder:<init>(SpdyVersion-SpdyFrameDecoderDelegate) to listOf(SpdyFrameDecoder:<init>(SpdyVersion-SpdyFrameDecoderDelegate-int)),
		SpdyFrameDecoder:<init>(SpdyVersion-SpdyFrameDecoderDelegate-int) to listOf(SpdyVersion:getVersion()),
		SpdyFrameDecoder:decode(ByteBuf) to listOf(SpdyFrameDecoder$State:ordinal(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:skipBytes(int), ByteBuf:getByte(int), SpdyCodecUtil:getUnsignedShort(ByteBuf-int), SpdyCodecUtil:getUnsignedShort(ByteBuf-int), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:getByte(int), SpdyCodecUtil:getUnsignedMedium(ByteBuf-int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoder:isValidFrameHeader(int-int-byte-int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoder:getNextState(int-int), SpdyFrameDecoder:hasFlag(byte-byte), Unpooled:buffer(int), SpdyFrameDecoderDelegate:readDataFrame(int-boolean-ByteBuf), ByteBuf:readableBytes(), ByteBuf:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int), SpdyFrameDecoder:hasFlag(byte-byte), SpdyFrameDecoderDelegate:readDataFrame(int-boolean-ByteBuf), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:getByte(int), SpdyFrameDecoder:hasFlag(byte-byte), SpdyFrameDecoder:hasFlag(byte-byte), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoderDelegate:readSynStreamFrame(int-int-byte-boolean-boolean), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), SpdyFrameDecoder:hasFlag(byte-byte), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoderDelegate:readSynReplyFrame(int-boolean), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoderDelegate:readRstStreamFrame(int-int), ByteBuf:readableBytes(), SpdyFrameDecoder:hasFlag(byte-byte), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoderDelegate:readSettingsFrame(boolean), SpdyFrameDecoderDelegate:readSettingsEnd(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedMedium(ByteBuf-int), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), SpdyFrameDecoder:hasFlag(byte-byte), SpdyFrameDecoder:hasFlag(byte-byte), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readSetting(int-int-boolean-boolean), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readPingFrame(int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readGoAwayFrame(int-int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), SpdyFrameDecoder:hasFlag(byte-byte), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoderDelegate:readHeadersFrame(int-boolean), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:skipBytes(int), SpdyFrameDecoderDelegate:readFrameError(String), SpdyFrameDecoderDelegate:readWindowUpdateFrame(int-int), SpdyFrameDecoderDelegate:readHeaderBlockEnd(), ByteBuf:isReadable(), ByteBuf:readableBytes(), ByteBuf:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int), SpdyFrameDecoderDelegate:readHeaderBlock(ByteBuf), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		SpdyHeaderBlockRawDecoder$1:<clinit>() to listOf(SpdyHeaderBlockRawDecoder$State:values(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal(), SpdyHeaderBlockRawDecoder$State:ordinal()),
		SpdySession:<init>(int-int) to listOf(PlatformDependent:newConcurrentHashMap(), SpdySession$StreamComparator:<init>(SpdySession)),
		SpdySession:acceptStream(int-byte-boolean-boolean-int-int-boolean) to listOf(SpdySession$StreamState:<init>(byte-boolean-boolean-int-int)),
		SpdySession:removeStream(int-Throwable-boolean) to listOf(SpdySession:removeActiveStream(int-boolean), SpdySession$StreamState:clearPendingWrites(Throwable)),
		SpdySession:isRemoteSideClosed(int) to listOf(SpdySession$StreamState:isRemoteSideClosed()),
		SpdySession:closeRemoteSide(int-boolean) to listOf(SpdySession$StreamState:closeRemoteSide(), SpdySession$StreamState:isLocalSideClosed(), SpdySession:removeActiveStream(int-boolean)),
		SpdySession:isLocalSideClosed(int) to listOf(SpdySession$StreamState:isLocalSideClosed()),
		SpdySession:closeLocalSide(int-boolean) to listOf(SpdySession$StreamState:closeLocalSide(), SpdySession$StreamState:isRemoteSideClosed(), SpdySession:removeActiveStream(int-boolean)),
		SpdySession:hasReceivedReply(int) to listOf(SpdySession$StreamState:hasReceivedReply()),
		SpdySession:receivedReply(int) to listOf(SpdySession$StreamState:receivedReply()),
		SpdySession:getSendWindowSize(int) to listOf(SpdySession$StreamState:getSendWindowSize()),
		SpdySession:updateSendWindowSize(int-int) to listOf(SpdySession$StreamState:updateSendWindowSize(int)),
		SpdySession:updateReceiveWindowSize(int-int) to listOf(SpdySession$StreamState:setReceiveWindowSizeLowerBound(int), SpdySession$StreamState:updateReceiveWindowSize(int)),
		SpdySession:getReceiveWindowSizeLowerBound(int) to listOf(SpdySession$StreamState:getReceiveWindowSizeLowerBound()),
		SpdySession:updateAllSendWindowSizes(int) to listOf(SpdySession$StreamState:updateSendWindowSize(int)),
		SpdySession:updateAllReceiveWindowSizes(int) to listOf(SpdySession$StreamState:updateReceiveWindowSize(int), SpdySession$StreamState:setReceiveWindowSizeLowerBound(int)),
		SpdySession:putPendingWrite(int-SpdySession$PendingWrite) to listOf(SpdySession$StreamState:putPendingWrite(SpdySession$PendingWrite)),
		SpdySession:getPendingWrite(int) to listOf(SpdySession:activeStreams(), SpdySession$StreamState:getSendWindowSize(), SpdySession$StreamState:getPendingWrite(), SpdySession$StreamState:getPendingWrite()),
		SpdySession:removePendingWrite(int) to listOf(SpdySession$StreamState:removePendingWrite()),
		SpdyHttpHeaders$Names:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		SpdySessionHandler:<init>(SpdyVersion-boolean) to listOf(ChannelHandlerAdapter:<init>(), SpdySession:<init>(int-int), SpdyVersion:getMinorVersion()),
		SpdySessionHandler:channelRead(ChannelHandlerContext-Object) to listOf(SpdyDataFrame:streamId(), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdySession:updateReceiveWindowSize(int-int), SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), SpdySession:updateReceiveWindowSize(int-int), DefaultSpdyWindowUpdateFrame:<init>(int-int), ChannelHandlerContext:writeAndFlush(Object), SpdySession:isActiveStream(int), SpdyDataFrame:release(), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:isRemoteSideClosed(int), SpdyDataFrame:release(), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:hasReceivedReply(int), SpdyDataFrame:release(), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:updateReceiveWindowSize(int-int), SpdySession:getReceiveWindowSizeLowerBound(int), SpdyDataFrame:release(), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdyDataFrame:content(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultSpdyDataFrame:<init>(int-ByteBuf), ChannelHandlerContext:writeAndFlush(Object), SpdyDataFrame:isLast(), SpdySession:updateReceiveWindowSize(int-int), DefaultSpdyWindowUpdateFrame:<init>(int-int), ChannelHandlerContext:writeAndFlush(Object), SpdyDataFrame:isLast(), ChannelHandlerContext:newSucceededFuture(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), SpdySynStreamFrame:streamId(), SpdySynStreamFrame:isInvalid(), SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:isActiveStream(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), SpdySynStreamFrame:priority(), SpdySynStreamFrame:isLast(), SpdySynStreamFrame:isUnidirectional(), SpdySessionHandler:acceptStream(int-byte-boolean-boolean), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySynReplyFrame:streamId(), SpdySynReplyFrame:isInvalid(), SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:isRemoteSideClosed(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:hasReceivedReply(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:receivedReply(int), SpdySynReplyFrame:isLast(), ChannelHandlerContext:newSucceededFuture(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), SpdyRstStreamFrame:streamId(), ChannelHandlerContext:newSucceededFuture(), SpdySessionHandler:removeStream(int-ChannelFuture), SpdySettingsFrame:getValue(int), SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), SpdySettingsFrame:getValue(int), SpdySettingsFrame:isPersisted(int), SpdySettingsFrame:removeValue(int), SpdySettingsFrame:setPersistValue(int-boolean), SpdySettingsFrame:getValue(int), SpdySessionHandler:updateInitialSendWindowSize(int), SpdyPingFrame:id(), SpdySessionHandler:isRemoteInitiatedId(int), ChannelHandlerContext:writeAndFlush(Object), SpdyHeadersFrame:streamId(), SpdyHeadersFrame:isInvalid(), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:isRemoteSideClosed(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdyHeadersFrame:isLast(), ChannelHandlerContext:newSucceededFuture(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), SpdyWindowUpdateFrame:streamId(), SpdyWindowUpdateFrame:deltaWindowSize(), SpdySession:isLocalSideClosed(int), SpdySession:getSendWindowSize(int), SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:updateSendWindowSize(ChannelHandlerContext-int-int), ChannelHandlerContext:fireChannelRead(Object)),
		SpdySessionHandler:channelInactive(ChannelHandlerContext) to listOf(SpdySession:activeStreams(), ChannelHandlerContext:newSucceededFuture(), SpdySessionHandler:removeStream(int-ChannelFuture), ChannelHandlerContext:fireChannelInactive()),
		SpdySessionHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		SpdySessionHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-ChannelPromise)),
		SpdySessionHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(SpdySessionHandler:handleOutboundMessage(ChannelHandlerContext-Object-ChannelPromise), ChannelHandlerContext:write(Object-ChannelPromise)),
		SpdySessionHandler:handleOutboundMessage(ChannelHandlerContext-Object-ChannelPromise) to listOf(SpdyDataFrame:streamId(), SpdySession:isLocalSideClosed(int), SpdyDataFrame:release(), ChannelPromise:setFailure(Throwable), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdySession:getSendWindowSize(int), SpdySession:getSendWindowSize(int), SpdySession$PendingWrite:<init>(SpdyDataFrame-ChannelPromise), SpdySession:putPendingWrite(int-SpdySession$PendingWrite), SpdySession:updateSendWindowSize(int-int), SpdySession:updateSendWindowSize(int-int), SpdyDataFrame:content(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultSpdyDataFrame:<init>(int-ByteBuf), SpdySession$PendingWrite:<init>(SpdyDataFrame-ChannelPromise), SpdySession:putPendingWrite(int-SpdySession$PendingWrite), ChannelHandlerContext:write(Object), SpdySessionHandler$1:<init>(SpdySessionHandler-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener), SpdySession:updateSendWindowSize(int-int), SpdySession:updateSendWindowSize(int-int), SpdySessionHandler$2:<init>(SpdySessionHandler-ChannelHandlerContext), ChannelPromise:addListener(GenericFutureListener), SpdyDataFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), SpdySynStreamFrame:streamId(), SpdySessionHandler:isRemoteInitiatedId(int), ChannelPromise:setFailure(Throwable), SpdySynStreamFrame:priority(), SpdySynStreamFrame:isUnidirectional(), SpdySynStreamFrame:isLast(), SpdySessionHandler:acceptStream(int-byte-boolean-boolean), ChannelPromise:setFailure(Throwable), SpdySynReplyFrame:streamId(), SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:isLocalSideClosed(int), ChannelPromise:setFailure(Throwable), SpdySynReplyFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), SpdyRstStreamFrame:streamId(), SpdySessionHandler:removeStream(int-ChannelFuture), SpdySettingsFrame:getValue(int), ChannelPromise:setFailure(Throwable), SpdySettingsFrame:getValue(int), SpdySettingsFrame:isPersisted(int), SpdySettingsFrame:removeValue(int), SpdySettingsFrame:setPersistValue(int-boolean), SpdySettingsFrame:getValue(int), SpdySessionHandler:updateInitialReceiveWindowSize(int), SpdyPingFrame:id(), SpdySessionHandler:isRemoteInitiatedId(int), SpdyPingFrame:id(), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelPromise:setFailure(Throwable), SpdyHeadersFrame:streamId(), SpdySession:isLocalSideClosed(int), ChannelPromise:setFailure(Throwable), SpdyHeadersFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:write(Object-ChannelPromise)),
		SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus) to listOf(SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus), ChannelHandlerContext:newPromise(), SpdySessionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus) to listOf(SpdySession:isRemoteSideClosed(int), ChannelHandlerContext:newPromise(), SpdySessionHandler:removeStream(int-ChannelFuture), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), ChannelHandlerContext:fireChannelRead(Object)),
		SpdySessionHandler:isRemoteInitiatedId(int) to listOf(SpdyCodecUtil:isServerId(int)),
		SpdySessionHandler:updateInitialSendWindowSize(int) to listOf(SpdySession:updateAllSendWindowSizes(int)),
		SpdySessionHandler:updateInitialReceiveWindowSize(int) to listOf(SpdySession:updateAllReceiveWindowSizes(int)),
		SpdySessionHandler:acceptStream(int-byte-boolean-boolean) to listOf(SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:numActiveStreams(boolean), SpdySession:acceptStream(int-byte-boolean-boolean-int-int-boolean)),
		SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture) to listOf(SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:closeRemoteSide(int-boolean), SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:closeLocalSide(int-boolean), SpdySession:noActiveStreams(), ChannelFuture:addListener(GenericFutureListener)),
		SpdySessionHandler:removeStream(int-ChannelFuture) to listOf(SpdySessionHandler:isRemoteInitiatedId(int), SpdySession:removeStream(int-Throwable-boolean), SpdySession:noActiveStreams(), ChannelFuture:addListener(GenericFutureListener)),
		SpdySessionHandler:updateSendWindowSize(ChannelHandlerContext-int-int) to listOf(SpdySession:updateSendWindowSize(int-int), SpdySession:getPendingWrite(int), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdyDataFrame:streamId(), SpdySession:getSendWindowSize(int), SpdySession:getSendWindowSize(int), SpdySession:updateSendWindowSize(int-int), SpdySession:updateSendWindowSize(int-int), SpdyDataFrame:content(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultSpdyDataFrame:<init>(int-ByteBuf), ChannelHandlerContext:writeAndFlush(Object), SpdySessionHandler$3:<init>(SpdySessionHandler-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener), SpdySession:removePendingWrite(int), SpdySession:updateSendWindowSize(int-int), SpdySession:updateSendWindowSize(int-int), SpdyDataFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean-ChannelFuture), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), SpdySessionHandler$4:<init>(SpdySessionHandler-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener)),
		SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(ChannelPromise), SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus), SpdySession:noActiveStreams(), SpdySessionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), SpdySessionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise)),
		SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus) to listOf(DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus), ChannelHandlerContext:writeAndFlush(Object), ChannelHandlerContext:newSucceededFuture()),
		SpdySessionHandler:access$000(SpdySessionHandler-ChannelHandlerContext-SpdySessionStatus) to listOf(SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus)),
		SpdySessionHandler:<clinit>() to listOf(SpdyProtocolException:<init>(), SpdyProtocolException:<init>(String), SpdyProtocolException:setStackTrace(StackTraceElement[]), SpdyProtocolException:setStackTrace(StackTraceElement[])),
		SpdyHttpDecoder:<init>(SpdyVersion-int) to listOf(SpdyHttpDecoder:<init>(SpdyVersion-int-Map-boolean)),
		SpdyHttpDecoder:<init>(SpdyVersion-int-boolean) to listOf(SpdyHttpDecoder:<init>(SpdyVersion-int-Map-boolean)),
		SpdyHttpDecoder:<init>(SpdyVersion-int-Map) to listOf(SpdyHttpDecoder:<init>(SpdyVersion-int-Map-boolean)),
		SpdyHttpDecoder:<init>(SpdyVersion-int-Map-boolean) to listOf(MessageToMessageDecoder:<init>(), SpdyVersion:getVersion()),
		SpdyHttpDecoder:decode(ChannelHandlerContext-SpdyFrame-List) to listOf(SpdySynStreamFrame:streamId(), SpdyCodecUtil:isServerId(int), SpdySynStreamFrame:associatedStreamId(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdySynStreamFrame:isLast(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdySynStreamFrame:isTruncated(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHttpDecoder:createHttpRequest(int-SpdyHeadersFrame), FullHttpRequest:headers(), HttpHeaders:setInt(CharSequence-int), FullHttpRequest:headers(), HttpHeaders:setInt(CharSequence-int), FullHttpRequest:headers(), SpdySynStreamFrame:priority(), HttpHeaders:setByte(CharSequence-byte), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdySynStreamFrame:isTruncated(), DefaultSpdySynReplyFrame:<init>(int), SpdySynReplyFrame:setLast(boolean), SpdySynReplyFrame:headers(), HttpResponseStatus:code(), SpdyHeaders:setInt(CharSequence-int), SpdyHeaders:setObject(CharSequence-Object), ChannelHandlerContext:writeAndFlush(Object), SpdyHttpDecoder:createHttpRequest(int-SpdyHeadersFrame), FullHttpRequest:headers(), HttpHeaders:setInt(CharSequence-int), SpdySynStreamFrame:isLast(), SpdyHttpDecoder:putMessage(int-FullHttpMessage), DefaultSpdySynReplyFrame:<init>(int), SpdySynReplyFrame:setLast(boolean), SpdySynReplyFrame:headers(), HttpResponseStatus:code(), SpdyHeaders:setInt(CharSequence-int), SpdyHeaders:setObject(CharSequence-Object), ChannelHandlerContext:writeAndFlush(Object), SpdySynReplyFrame:streamId(), SpdySynReplyFrame:isTruncated(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHttpDecoder:createHttpResponse(ChannelHandlerContext-SpdyHeadersFrame-boolean), FullHttpResponse:headers(), HttpHeaders:setInt(CharSequence-int), SpdySynReplyFrame:isLast(), HttpHeaderUtil:setContentLength(HttpMessage-long), SpdyHttpDecoder:putMessage(int-FullHttpMessage), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHeadersFrame:streamId(), SpdyHttpDecoder:getMessage(int), SpdyCodecUtil:isServerId(int), SpdyHeadersFrame:isTruncated(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHttpDecoder:createHttpResponse(ChannelHandlerContext-SpdyHeadersFrame-boolean), FullHttpMessage:headers(), HttpHeaders:setInt(CharSequence-int), SpdyHeadersFrame:isLast(), HttpHeaderUtil:setContentLength(HttpMessage-long), SpdyHttpDecoder:putMessage(int-FullHttpMessage), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHeadersFrame:isTruncated(), SpdyHeadersFrame:headers(), SpdyHeaders:iterator(), FullHttpMessage:headers(), HttpHeaders:add(CharSequence-CharSequence), SpdyHeadersFrame:isLast(), FullHttpMessage:content(), ByteBuf:readableBytes(), HttpHeaderUtil:setContentLength(HttpMessage-long), SpdyHttpDecoder:removeMessage(int), SpdyDataFrame:streamId(), SpdyHttpDecoder:getMessage(int), FullHttpMessage:content(), ByteBuf:readableBytes(), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdyHttpDecoder:removeMessage(int), TooLongFrameException:<init>(String), SpdyDataFrame:content(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), SpdyDataFrame:isLast(), ByteBuf:readableBytes(), HttpHeaderUtil:setContentLength(HttpMessage-long), SpdyHttpDecoder:removeMessage(int), SpdyRstStreamFrame:streamId(), SpdyHttpDecoder:removeMessage(int)),
		SpdyHttpDecoder:createHttpRequest(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:getAndConvert(Object), HttpMethod:valueOf(String), SpdyHeaders:getAndConvert(Object), SpdyHeaders:getAndConvert(Object), HttpVersion:valueOf(String), SpdyHeaders:remove(Object), SpdyHeaders:remove(Object), SpdyHeaders:remove(Object), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), SpdyHeaders:remove(Object), SpdyHeaders:get(Object), SpdyHeaders:remove(Object), FullHttpRequest:headers(), HttpHeaders:set(CharSequence-CharSequence), SpdyHeadersFrame:headers(), SpdyHeaders:iterator(), FullHttpRequest:headers(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaderUtil:setKeepAlive(HttpMessage-boolean), FullHttpRequest:headers(), HttpHeaders:remove(Object)),
		SpdyHttpDecoder:createHttpResponse(ChannelHandlerContext-SpdyHeadersFrame-boolean) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(Object), HttpResponseStatus:parseLine(CharSequence), SpdyHeaders:getAndConvert(Object), HttpVersion:valueOf(String), SpdyHeaders:remove(Object), SpdyHeaders:remove(Object), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean), SpdyHeadersFrame:headers(), SpdyHeaders:iterator(), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaderUtil:setKeepAlive(HttpMessage-boolean), FullHttpResponse:headers(), HttpHeaders:remove(Object), FullHttpResponse:headers(), HttpHeaders:remove(Object)),
		SpdyHttpDecoder:decode(ChannelHandlerContext-Object-List) to listOf(SpdyHttpDecoder:decode(ChannelHandlerContext-SpdyFrame-List)),
		DefaultBinaryHeaders:<init>() to listOf(DefaultBinaryHeaders:<init>(boolean)),
		DefaultBinaryHeaders:<init>(boolean) to listOf(DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter)),
		DefaultBinaryHeaders:add(AsciiString-AsciiString) to listOf(DefaultHeaders:add(Object-Object)),
		DefaultBinaryHeaders:add(AsciiString-Iterable) to listOf(DefaultHeaders:add(Object-Iterable)),
		DefaultBinaryHeaders:add(AsciiString-AsciiString[]) to listOf(DefaultHeaders:add(Object-Object[])),
		DefaultBinaryHeaders:addObject(AsciiString-Object) to listOf(DefaultHeaders:addObject(Object-Object)),
		DefaultBinaryHeaders:addObject(AsciiString-Iterable) to listOf(DefaultHeaders:addObject(Object-Iterable)),
		DefaultBinaryHeaders:addObject(AsciiString-Object[]) to listOf(DefaultHeaders:addObject(Object-Object[])),
		DefaultBinaryHeaders:addBoolean(AsciiString-boolean) to listOf(DefaultHeaders:addBoolean(Object-boolean)),
		DefaultBinaryHeaders:addChar(AsciiString-char) to listOf(DefaultHeaders:addChar(Object-char)),
		DefaultBinaryHeaders:addByte(AsciiString-byte) to listOf(DefaultHeaders:addByte(Object-byte)),
		DefaultBinaryHeaders:addShort(AsciiString-short) to listOf(DefaultHeaders:addShort(Object-short)),
		DefaultBinaryHeaders:addInt(AsciiString-int) to listOf(DefaultHeaders:addInt(Object-int)),
		DefaultBinaryHeaders:addLong(AsciiString-long) to listOf(DefaultHeaders:addLong(Object-long)),
		DefaultBinaryHeaders:addFloat(AsciiString-float) to listOf(DefaultHeaders:addFloat(Object-float)),
		DefaultBinaryHeaders:addDouble(AsciiString-double) to listOf(DefaultHeaders:addDouble(Object-double)),
		DefaultBinaryHeaders:addTimeMillis(AsciiString-long) to listOf(DefaultHeaders:addTimeMillis(Object-long)),
		DefaultBinaryHeaders:add(BinaryHeaders) to listOf(DefaultHeaders:add(Headers)),
		DefaultBinaryHeaders:set(AsciiString-AsciiString) to listOf(DefaultHeaders:set(Object-Object)),
		DefaultBinaryHeaders:set(AsciiString-Iterable) to listOf(DefaultHeaders:set(Object-Iterable)),
		DefaultBinaryHeaders:set(AsciiString-AsciiString[]) to listOf(DefaultHeaders:set(Object-Object[])),
		DefaultBinaryHeaders:setObject(AsciiString-Object) to listOf(DefaultHeaders:setObject(Object-Object)),
		DefaultBinaryHeaders:setObject(AsciiString-Iterable) to listOf(DefaultHeaders:setObject(Object-Iterable)),
		DefaultBinaryHeaders:setObject(AsciiString-Object[]) to listOf(DefaultHeaders:setObject(Object-Object[])),
		DefaultBinaryHeaders:setBoolean(AsciiString-boolean) to listOf(DefaultHeaders:setBoolean(Object-boolean)),
		DefaultBinaryHeaders:setChar(AsciiString-char) to listOf(DefaultHeaders:setChar(Object-char)),
		DefaultBinaryHeaders:setByte(AsciiString-byte) to listOf(DefaultHeaders:setByte(Object-byte)),
		DefaultBinaryHeaders:setShort(AsciiString-short) to listOf(DefaultHeaders:setShort(Object-short)),
		DefaultBinaryHeaders:setInt(AsciiString-int) to listOf(DefaultHeaders:setInt(Object-int)),
		DefaultBinaryHeaders:setLong(AsciiString-long) to listOf(DefaultHeaders:setLong(Object-long)),
		DefaultBinaryHeaders:setFloat(AsciiString-float) to listOf(DefaultHeaders:setFloat(Object-float)),
		DefaultBinaryHeaders:setDouble(AsciiString-double) to listOf(DefaultHeaders:setDouble(Object-double)),
		DefaultBinaryHeaders:setTimeMillis(AsciiString-long) to listOf(DefaultHeaders:setTimeMillis(Object-long)),
		DefaultBinaryHeaders:set(BinaryHeaders) to listOf(DefaultHeaders:set(Headers)),
		DefaultBinaryHeaders:setAll(BinaryHeaders) to listOf(DefaultHeaders:setAll(Headers)),
		DefaultBinaryHeaders:clear() to listOf(DefaultHeaders:clear(), DefaultBinaryHeaders:clear()),
		DefaultBinaryHeaders:setShort(Object-short) to listOf(DefaultBinaryHeaders:setShort(AsciiString-short)),
		DefaultBinaryHeaders:setByte(Object-byte) to listOf(DefaultBinaryHeaders:setByte(AsciiString-byte)),
		DefaultBinaryHeaders:setBoolean(Object-boolean) to listOf(DefaultBinaryHeaders:setBoolean(AsciiString-boolean)),
		DefaultBinaryHeaders:setChar(Object-char) to listOf(DefaultBinaryHeaders:setChar(AsciiString-char)),
		DefaultBinaryHeaders:setFloat(Object-float) to listOf(DefaultBinaryHeaders:setFloat(AsciiString-float)),
		DefaultBinaryHeaders:setTimeMillis(Object-long) to listOf(DefaultBinaryHeaders:setTimeMillis(AsciiString-long)),
		DefaultBinaryHeaders:setDouble(Object-double) to listOf(DefaultBinaryHeaders:setDouble(AsciiString-double)),
		DefaultBinaryHeaders:setLong(Object-long) to listOf(DefaultBinaryHeaders:setLong(AsciiString-long)),
		DefaultBinaryHeaders:setInt(Object-int) to listOf(DefaultBinaryHeaders:setInt(AsciiString-int)),
		DefaultBinaryHeaders:setObject(Object-Object[]) to listOf(DefaultBinaryHeaders:setObject(AsciiString-Object[])),
		DefaultBinaryHeaders:setObject(Object-Iterable) to listOf(DefaultBinaryHeaders:setObject(AsciiString-Iterable)),
		DefaultBinaryHeaders:setObject(Object-Object) to listOf(DefaultBinaryHeaders:setObject(AsciiString-Object)),
		DefaultBinaryHeaders:set(Object-Object[]) to listOf(DefaultBinaryHeaders:set(AsciiString-AsciiString[])),
		DefaultBinaryHeaders:set(Object-Iterable) to listOf(DefaultBinaryHeaders:set(AsciiString-Iterable)),
		DefaultBinaryHeaders:set(Object-Object) to listOf(DefaultBinaryHeaders:set(AsciiString-AsciiString)),
		DefaultBinaryHeaders:addShort(Object-short) to listOf(DefaultBinaryHeaders:addShort(AsciiString-short)),
		DefaultBinaryHeaders:addByte(Object-byte) to listOf(DefaultBinaryHeaders:addByte(AsciiString-byte)),
		DefaultBinaryHeaders:addFloat(Object-float) to listOf(DefaultBinaryHeaders:addFloat(AsciiString-float)),
		DefaultBinaryHeaders:addBoolean(Object-boolean) to listOf(DefaultBinaryHeaders:addBoolean(AsciiString-boolean)),
		DefaultBinaryHeaders:addChar(Object-char) to listOf(DefaultBinaryHeaders:addChar(AsciiString-char)),
		DefaultBinaryHeaders:addTimeMillis(Object-long) to listOf(DefaultBinaryHeaders:addTimeMillis(AsciiString-long)),
		DefaultBinaryHeaders:addDouble(Object-double) to listOf(DefaultBinaryHeaders:addDouble(AsciiString-double)),
		DefaultBinaryHeaders:addLong(Object-long) to listOf(DefaultBinaryHeaders:addLong(AsciiString-long)),
		DefaultBinaryHeaders:addInt(Object-int) to listOf(DefaultBinaryHeaders:addInt(AsciiString-int)),
		DefaultBinaryHeaders:addObject(Object-Object[]) to listOf(DefaultBinaryHeaders:addObject(AsciiString-Object[])),
		DefaultBinaryHeaders:addObject(Object-Iterable) to listOf(DefaultBinaryHeaders:addObject(AsciiString-Iterable)),
		DefaultBinaryHeaders:addObject(Object-Object) to listOf(DefaultBinaryHeaders:addObject(AsciiString-Object)),
		DefaultBinaryHeaders:add(Object-Object[]) to listOf(DefaultBinaryHeaders:add(AsciiString-AsciiString[])),
		DefaultBinaryHeaders:add(Object-Iterable) to listOf(DefaultBinaryHeaders:add(AsciiString-Iterable)),
		DefaultBinaryHeaders:add(Object-Object) to listOf(DefaultBinaryHeaders:add(AsciiString-AsciiString)),
		DefaultBinaryHeaders:<clinit>() to listOf(DefaultBinaryHeaders$1:<init>(), DefaultBinaryHeaders$2:<init>(), DefaultBinaryHeaders$3:<init>(), DefaultBinaryHeaders$4:<init>()),
		DefaultBinaryHeaders$3:convertName(AsciiString) to listOf(AsciiString:toLowerCase()),
		DefaultBinaryHeaders$3:convertName(Object) to listOf(DefaultBinaryHeaders$3:convertName(AsciiString)),
		HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-String-String) to listOf(HAProxyMessage:portStringToInt(String), HAProxyMessage:portStringToInt(String), HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-int-int)),
		HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-int-int) to listOf(HAProxyProxiedProtocol:addressFamily(), HAProxyMessage:checkAddress(String-HAProxyProxiedProtocol$AddressFamily), HAProxyMessage:checkAddress(String-HAProxyProxiedProtocol$AddressFamily), HAProxyMessage:checkPort(int), HAProxyMessage:checkPort(int)),
		HAProxyMessage:decodeHeader(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), HAProxyProtocolException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readByte(), HAProxyProtocolVersion:valueOf(byte), HAProxyProtocolException:<init>(Throwable), HAProxyProtocolException:<init>(String), HAProxyCommand:valueOf(byte), HAProxyProtocolException:<init>(Throwable), ByteBuf:readByte(), HAProxyProxiedProtocol:valueOf(byte), HAProxyProtocolException:<init>(Throwable), ByteBuf:readUnsignedShort(), HAProxyProxiedProtocol:addressFamily(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), HAProxyProtocolException:<init>(String), ByteBuf:readerIndex(), ByteBuf:forEachByte(int-int-ByteBufProcessor), ByteBuf:toString(int-int-Charset), ByteBuf:forEachByte(int-int-ByteBufProcessor), ByteBuf:toString(int-int-Charset), ByteBuf:readableBytes(), ByteBuf:readableBytes(), HAProxyProtocolException:<init>(String), ByteBuf:readableBytes(), ByteBuf:readableBytes(), HAProxyProtocolException:<init>(String), HAProxyProtocolException:<init>(String), HAProxyMessage:ipBytestoString(ByteBuf-int), HAProxyMessage:ipBytestoString(ByteBuf-int), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-int-int)),
		HAProxyMessage:decodeHeader(String) to listOf(HAProxyProtocolException:<init>(String), StringUtil:split(String-char), HAProxyProtocolException:<init>(String), HAProxyProtocolException:<init>(String), HAProxyProxiedProtocol:valueOf(String), HAProxyProtocolException:<init>(Throwable), HAProxyProtocolException:<init>(String), HAProxyProtocolException:<init>(String), HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-String-String)),
		HAProxyMessage:ipBytestoString(ByteBuf-int) to listOf(ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort()),
		HAProxyMessage:portStringToInt(String) to listOf(HAProxyProtocolException:<init>(String-Throwable), HAProxyProtocolException:<init>(String)),
		HAProxyMessage:checkAddress(String-HAProxyProxiedProtocol$AddressFamily) to listOf(HAProxyProxiedProtocol$AddressFamily:ordinal(), HAProxyProtocolException:<init>(String), HAProxyProxiedProtocol$AddressFamily:ordinal(), NetUtil:isValidIpV4Address(String), HAProxyProtocolException:<init>(String), NetUtil:isValidIpV6Address(String), HAProxyProtocolException:<init>(String)),
		HAProxyMessage:checkPort(int) to listOf(HAProxyProtocolException:<init>(String)),
		HAProxyMessage:<clinit>() to listOf(HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-int-int), HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-int-int), HAProxyMessage:<init>(HAProxyProtocolVersion-HAProxyCommand-HAProxyProxiedProtocol-String-String-int-int)),
		HAProxyProxiedProtocol$TransportProtocol:values() to listOf(HAProxyProxiedProtocol$TransportProtocol[]:clone()),
		HAProxyProxiedProtocol$TransportProtocol:<clinit>() to listOf(HAProxyProxiedProtocol$TransportProtocol:<init>(String-int-byte), HAProxyProxiedProtocol$TransportProtocol:<init>(String-int-byte), HAProxyProxiedProtocol$TransportProtocol:<init>(String-int-byte)),
		HAProxyProtocolVersion:values() to listOf(HAProxyProtocolVersion[]:clone()),
		HAProxyProtocolVersion:<clinit>() to listOf(HAProxyProtocolVersion:<init>(String-int-byte), HAProxyProtocolVersion:<init>(String-int-byte)),
		HAProxyProtocolException:<init>() to listOf(DecoderException:<init>()),
		HAProxyProtocolException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		HAProxyProtocolException:<init>(String) to listOf(DecoderException:<init>(String)),
		HAProxyProtocolException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		HAProxyProxiedProtocol:values() to listOf(HAProxyProxiedProtocol[]:clone()),
		HAProxyProxiedProtocol:<clinit>() to listOf(HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol), HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol), HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol), HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol), HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol), HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol), HAProxyProxiedProtocol:<init>(String-int-byte-HAProxyProxiedProtocol$AddressFamily-HAProxyProxiedProtocol$TransportProtocol)),
		HAProxyMessageDecoder:<init>() to listOf(ByteToMessageDecoder:<init>()),
		HAProxyMessageDecoder:<init>(int) to listOf(ByteToMessageDecoder:<init>()),
		HAProxyMessageDecoder:findVersion(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		HAProxyMessageDecoder:findEndOfHeader(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getUnsignedShort(int)),
		HAProxyMessageDecoder:findEndOfLine(ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		HAProxyMessageDecoder:channelRead(ChannelHandlerContext-Object) to listOf(ByteToMessageDecoder:channelRead(ChannelHandlerContext-Object), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		HAProxyMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(HAProxyMessageDecoder:findVersion(ByteBuf), HAProxyMessageDecoder:decodeLine(ChannelHandlerContext-ByteBuf), HAProxyMessageDecoder:decodeStruct(ChannelHandlerContext-ByteBuf), ByteBuf:toString(Charset), HAProxyMessage:decodeHeader(String), HAProxyMessage:decodeHeader(ByteBuf), HAProxyMessageDecoder:fail(ChannelHandlerContext-String-Throwable)),
		HAProxyMessageDecoder:decodeStruct(ChannelHandlerContext-ByteBuf) to listOf(HAProxyMessageDecoder:findEndOfHeader(ByteBuf), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-int), ByteBuf:readSlice(int), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-String), ByteBuf:readerIndex(int), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		HAProxyMessageDecoder:decodeLine(ChannelHandlerContext-ByteBuf) to listOf(HAProxyMessageDecoder:findEndOfLine(ByteBuf), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-int), ByteBuf:readSlice(int), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-String), ByteBuf:getByte(int), ByteBuf:readerIndex(int), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-int) to listOf(HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-String)),
		HAProxyMessageDecoder:failOverLimit(ChannelHandlerContext-String) to listOf(HAProxyMessageDecoder:fail(ChannelHandlerContext-String-Throwable)),
		HAProxyMessageDecoder:fail(ChannelHandlerContext-String-Throwable) to listOf(ChannelHandlerContext:close(), HAProxyProtocolException:<init>(String-Throwable), HAProxyProtocolException:<init>(String), HAProxyProtocolException:<init>(Throwable), HAProxyProtocolException:<init>()),
		HAProxyMessage$1:<clinit>() to listOf(HAProxyProxiedProtocol$AddressFamily:values(), HAProxyProxiedProtocol$AddressFamily:ordinal(), HAProxyProxiedProtocol$AddressFamily:ordinal(), HAProxyProxiedProtocol$AddressFamily:ordinal(), HAProxyProxiedProtocol$AddressFamily:ordinal()),
		HAProxyCommand:values() to listOf(HAProxyCommand[]:clone()),
		HAProxyCommand:<clinit>() to listOf(HAProxyCommand:<init>(String-int-byte), HAProxyCommand:<init>(String-int-byte)),
		HAProxyProxiedProtocol$AddressFamily:values() to listOf(HAProxyProxiedProtocol$AddressFamily[]:clone()),
		HAProxyProxiedProtocol$AddressFamily:<clinit>() to listOf(HAProxyProxiedProtocol$AddressFamily:<init>(String-int-byte), HAProxyProxiedProtocol$AddressFamily:<init>(String-int-byte), HAProxyProxiedProtocol$AddressFamily:<init>(String-int-byte), HAProxyProxiedProtocol$AddressFamily:<init>(String-int-byte)),
		MessageAggregator$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		MessageAggregator$1:operationComplete(Future) to listOf(MessageAggregator$1:operationComplete(ChannelFuture)),
		DecoderException:<init>() to listOf(CodecException:<init>()),
		DecoderException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		DecoderException:<init>(String) to listOf(CodecException:<init>(String)),
		DecoderException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		Base64Decoder:<init>() to listOf(Base64Decoder:<init>(Base64Dialect)),
		Base64Decoder:<init>(Base64Dialect) to listOf(MessageToMessageDecoder:<init>()),
		Base64Decoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:decode(ByteBuf-int-int-Base64Dialect)),
		Base64Decoder:decode(ChannelHandlerContext-Object-List) to listOf(Base64Decoder:decode(ChannelHandlerContext-ByteBuf-List)),
		Base64:encode(ByteBuf) to listOf(Base64:encode(ByteBuf-Base64Dialect)),
		Base64:encode(ByteBuf-Base64Dialect) to listOf(Base64:breakLines(Base64Dialect), Base64:encode(ByteBuf-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-boolean) to listOf(Base64:encode(ByteBuf-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-boolean-Base64Dialect) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect), ByteBuf:writerIndex(), ByteBuf:readerIndex(int)),
		Base64:encode(ByteBuf-int-int) to listOf(Base64:encode(ByteBuf-int-int-Base64Dialect)),
		Base64:encode(ByteBuf-int-int-Base64Dialect) to listOf(Base64:breakLines(Base64Dialect), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-int-int-boolean) to listOf(Base64:encode(ByteBuf-int-int-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-int-int-boolean-Base64Dialect) to listOf(Unpooled:buffer(int), ByteBuf:order(), ByteBuf:order(ByteOrder), Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect), ByteBuf:setByte(int-int), Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect), ByteBuf:slice(int-int)),
		Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect) to listOf(Base64:alphabet(Base64Dialect), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int)),
		Base64:decode(ByteBuf) to listOf(Base64:decode(ByteBuf-Base64Dialect)),
		Base64:decode(ByteBuf-Base64Dialect) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:decode(ByteBuf-int-int-Base64Dialect), ByteBuf:writerIndex(), ByteBuf:readerIndex(int)),
		Base64:decode(ByteBuf-int-int) to listOf(Base64:decode(ByteBuf-int-int-Base64Dialect)),
		Base64:decode(ByteBuf-int-int-Base64Dialect) to listOf(Base64:decodabet(Base64Dialect), ByteBuf:alloc(), ByteBufAllocator:buffer(int), ByteBuf:order(), ByteBuf:order(ByteOrder), ByteBuf:getByte(int), Base64:decode4to3(byte[]-int-ByteBuf-int-Base64Dialect), ByteBuf:getUnsignedByte(int), ByteBuf:slice(int-int)),
		Base64:decode4to3(byte[]-int-ByteBuf-int-Base64Dialect) to listOf(Base64:decodabet(Base64Dialect), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int)),
		Base64Dialect:values() to listOf(Base64Dialect[]:clone()),
		Base64Dialect:<clinit>() to listOf(Base64Dialect:<init>(String-int-byte[]-byte[]-boolean), Base64Dialect:<init>(String-int-byte[]-byte[]-boolean), Base64Dialect:<init>(String-int-byte[]-byte[]-boolean)),
		Base64Encoder:<init>() to listOf(Base64Encoder:<init>(boolean)),
		Base64Encoder:<init>(boolean) to listOf(Base64Encoder:<init>(boolean-Base64Dialect)),
		Base64Encoder:<init>(boolean-Base64Dialect) to listOf(MessageToMessageEncoder:<init>()),
		Base64Encoder:encode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect)),
		Base64Encoder:encode(ChannelHandlerContext-Object-List) to listOf(Base64Encoder:encode(ChannelHandlerContext-ByteBuf-List)),
		LineBasedFrameDecoder:<init>(int) to listOf(LineBasedFrameDecoder:<init>(int-boolean-boolean)),
		LineBasedFrameDecoder:<init>(int-boolean-boolean) to listOf(ByteToMessageDecoder:<init>()),
		LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LineBasedFrameDecoder:findEndOfLine(ByteBuf), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readerIndex(int), LineBasedFrameDecoder:fail(ChannelHandlerContext-int), ByteBuf:readSlice(int), ByteBuf:skipBytes(int), ByteBuf:readSlice(int), ByteBuf:retain(), ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readerIndex(int), LineBasedFrameDecoder:fail(ChannelHandlerContext-String), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readerIndex(int), LineBasedFrameDecoder:fail(ChannelHandlerContext-int), ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readerIndex(int)),
		LineBasedFrameDecoder:fail(ChannelHandlerContext-int) to listOf(LineBasedFrameDecoder:fail(ChannelHandlerContext-String)),
		LineBasedFrameDecoder:fail(ChannelHandlerContext-String) to listOf(TooLongFrameException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		LineBasedFrameDecoder:findEndOfLine(ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		ByteToMessageCodec$Encoder:<init>(ByteToMessageCodec-boolean) to listOf(MessageToByteEncoder:<init>(boolean)),
		ByteToMessageCodec$Encoder:acceptOutboundMessage(Object) to listOf(ByteToMessageCodec:acceptOutboundMessage(Object)),
		ByteToMessageCodec$Encoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(ByteToMessageCodec:encode(ChannelHandlerContext-Object-ByteBuf)),
		DefaultMarshallerProvider:getMarshaller(ChannelHandlerContext) to listOf(MarshallerFactory:createMarshaller(MarshallingConfiguration)),
		DefaultUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext) to listOf(MarshallerFactory:createUnmarshaller(MarshallingConfiguration)),
		MarshallingEncoder:<init>(MarshallerProvider) to listOf(MessageToByteEncoder:<init>()),
		MarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(MarshallerProvider:getMarshaller(ChannelHandlerContext), ByteBuf:writerIndex(), ByteBuf:writeBytes(byte[]), ChannelBufferByteOutput:<init>(ByteBuf), Marshaller:start(ByteOutput), Marshaller:writeObject(Object), Marshaller:finish(), Marshaller:close(), ByteBuf:writerIndex(), ByteBuf:setInt(int-int)),
		ThreadLocalMarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration) to listOf(FastThreadLocal:<init>()),
		ThreadLocalMarshallerProvider:getMarshaller(ChannelHandlerContext) to listOf(FastThreadLocal:get(), MarshallerFactory:createMarshaller(MarshallingConfiguration), FastThreadLocal:set(Object)),
		ThreadLocalUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration) to listOf(FastThreadLocal:<init>()),
		ThreadLocalUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext) to listOf(FastThreadLocal:get(), MarshallerFactory:createUnmarshaller(MarshallingConfiguration), FastThreadLocal:set(Object)),
		ContextBoundUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration) to listOf(DefaultUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration)),
		ContextBoundUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get(), DefaultUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), Attribute:set(Object)),
		ContextBoundUnmarshallerProvider:<clinit>() to listOf(AttributeKey:valueOf(Class-String)),
		MarshallingDecoder:<init>(UnmarshallerProvider) to listOf(MarshallingDecoder:<init>(UnmarshallerProvider-int)),
		MarshallingDecoder:<init>(UnmarshallerProvider-int) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int)),
		MarshallingDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), UnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), ChannelBufferByteInput:<init>(ByteBuf), Unmarshaller:start(ByteInput), Unmarshaller:readObject(), Unmarshaller:finish(), Unmarshaller:close(), Unmarshaller:close()),
		MarshallingDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int) to listOf(ByteBuf:slice(int-int)),
		ChannelBufferByteInput:available() to listOf(ByteBuf:readableBytes()),
		ChannelBufferByteInput:read() to listOf(ByteBuf:isReadable(), ByteBuf:readByte()),
		ChannelBufferByteInput:read(byte[]) to listOf(ChannelBufferByteInput:read(byte[]-int-int)),
		ChannelBufferByteInput:read(byte[]-int-int) to listOf(ChannelBufferByteInput:available(), ByteBuf:readBytes(byte[]-int-int)),
		ChannelBufferByteInput:skip(long) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		ChannelBufferByteOutput:write(int) to listOf(ByteBuf:writeByte(int)),
		ChannelBufferByteOutput:write(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		ChannelBufferByteOutput:write(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		LimitingByteInput:available() to listOf(ByteInput:available(), LimitingByteInput:readable(int)),
		LimitingByteInput:read() to listOf(LimitingByteInput:readable(int), ByteInput:read()),
		LimitingByteInput:read(byte[]) to listOf(LimitingByteInput:read(byte[]-int-int)),
		LimitingByteInput:read(byte[]-int-int) to listOf(LimitingByteInput:readable(int), ByteInput:read(byte[]-int-int)),
		LimitingByteInput:skip(long) to listOf(LimitingByteInput:readable(int), ByteInput:skip(long)),
		LimitingByteInput:<clinit>() to listOf(LimitingByteInput$TooBigObjectException:<init>()),
		CompatibleMarshallingDecoder:<init>(UnmarshallerProvider-int) to listOf(ReplayingDecoder:<init>()),
		CompatibleMarshallingDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(CompatibleMarshallingDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), CompatibleMarshallingDecoder:checkpoint(), UnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), ChannelBufferByteInput:<init>(ByteBuf), LimitingByteInput:<init>(ByteInput-long), Unmarshaller:start(ByteInput), Unmarshaller:readObject(), Unmarshaller:finish(), Unmarshaller:close(), TooLongFrameException:<init>(), Unmarshaller:close()),
		CompatibleMarshallingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:skipBytes(int), CompatibleMarshallingDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		CompatibleMarshallingDecoder:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:close(), ReplayingDecoder:exceptionCaught(ChannelHandlerContext-Throwable)),
		CompatibleMarshallingEncoder:<init>(MarshallerProvider) to listOf(MessageToByteEncoder:<init>()),
		CompatibleMarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(MarshallerProvider:getMarshaller(ChannelHandlerContext), ChannelBufferByteOutput:<init>(ByteBuf), Marshaller:start(ByteOutput), Marshaller:writeObject(Object), Marshaller:finish(), Marshaller:close()),
		AsciiString:equalsIgnoreCase(CharSequence-CharSequence) to listOf(AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence)),
		AsciiString:equals(CharSequence-CharSequence) to listOf(AsciiString:equals(Object), AsciiString:equals(Object)),
		AsciiString:getBytes(CharSequence-Charset) to listOf(AsciiString:array(), Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:release(), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), ByteBuf:release(), ByteBuf:release()),
		AsciiString:of(CharSequence) to listOf(AsciiString:<init>(CharSequence)),
		AsciiString:<init>(byte[]) to listOf(AsciiString:<init>(byte[]-boolean)),
		AsciiString:<init>(byte[]-boolean) to listOf(AsciiString:checkNull(Object), byte[]:clone()),
		AsciiString:<init>(byte[]-int-int) to listOf(AsciiString:<init>(byte[]-int-int-boolean)),
		AsciiString:<init>(byte[]-int-int-boolean) to listOf(AsciiString:checkNull(Object)),
		AsciiString:<init>(char[]) to listOf(AsciiString:checkNull(Object), AsciiString:<init>(char[]-int-int)),
		AsciiString:<init>(char[]-int-int) to listOf(AsciiString:checkNull(Object), AsciiString:c2b(char)),
		AsciiString:<init>(CharSequence) to listOf(AsciiString:checkNull(Object), AsciiString:<init>(CharSequence-int-int)),
		AsciiString:<init>(CharSequence-int-int) to listOf(AsciiString:c2b(char)),
		AsciiString:<init>(ByteBuffer) to listOf(AsciiString:checkNull(Object), AsciiString:<init>(ByteBuffer-int-int)),
		AsciiString:charAt(int) to listOf(AsciiString:byteAt(int)),
		AsciiString:subSequence(int) to listOf(AsciiString:length(), AsciiString:subSequence(int-int)),
		AsciiString:subSequence(int-int) to listOf(AsciiString:length(), AsciiString:length(), AsciiString:<init>(byte[]-int-int-boolean), AsciiString:subSequence(int-int)),
		AsciiString:equals(Object) to listOf(AsciiString:hashCode(), AsciiString:hashCode(), AsciiString:length(), AsciiString:length()),
		AsciiString:toString(int-int) to listOf(AsciiString:toString()),
		AsciiString:compareTo(CharSequence) to listOf(AsciiString:length()),
		AsciiString:concat(CharSequence) to listOf(AsciiString:length(), AsciiString:isEmpty(), AsciiString:<init>(byte[]-boolean), AsciiString:isEmpty(), AsciiString:<init>(CharSequence), AsciiString:c2b(char), AsciiString:<init>(byte[]-boolean)),
		AsciiString:endsWith(CharSequence) to listOf(AsciiString:length(), AsciiString:regionMatches(int-CharSequence-int-int)),
		AsciiString:equalsIgnoreCase(CharSequence) to listOf(AsciiString:toLowerCase(char), AsciiString:toLowerCase(char)),
		AsciiString:toByteArray() to listOf(AsciiString:length(), AsciiString:toByteArray(int-int)),
		AsciiString:toCharArray() to listOf(AsciiString:length(), AsciiString:toCharArray(int-int)),
		AsciiString:copy(int-ByteBuf-int-int) to listOf(ByteBuf:setBytes(int-byte[]-int-int)),
		AsciiString:copy(int-ByteBuf-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		AsciiString:indexOf(int) to listOf(AsciiString:indexOf(int-int)),
		AsciiString:indexOf(CharSequence) to listOf(AsciiString:indexOf(CharSequence-int)),
		AsciiString:indexOf(CharSequence-int) to listOf(AsciiString:indexOf(int-int)),
		AsciiString:lastIndexOf(int) to listOf(AsciiString:length(), AsciiString:lastIndexOf(int-int)),
		AsciiString:lastIndexOf(CharSequence) to listOf(AsciiString:length(), AsciiString:lastIndexOf(CharSequence-int)),
		AsciiString:lastIndexOf(CharSequence-int) to listOf(AsciiString:lastIndexOf(int-int)),
		AsciiString:regionMatches(boolean-int-CharSequence-int-int) to listOf(AsciiString:regionMatches(int-CharSequence-int-int), AsciiString:toLowerCase(char), AsciiString:toLowerCase(char)),
		AsciiString:replace(char-char) to listOf(AsciiString:indexOf(int-int), AsciiString:<init>(byte[]-boolean)),
		AsciiString:startsWith(CharSequence) to listOf(AsciiString:startsWith(CharSequence-int)),
		AsciiString:startsWith(CharSequence-int) to listOf(AsciiString:regionMatches(int-CharSequence-int-int)),
		AsciiString:toLowerCase() to listOf(AsciiString:toLowerCase(byte), AsciiString:<init>(byte[]-boolean)),
		AsciiString:toUpperCase() to listOf(AsciiString:toUpperCase(byte), AsciiString:<init>(byte[]-boolean)),
		AsciiString:trim() to listOf(AsciiString:<init>(byte[]-int-int-boolean)),
		AsciiString:contentEquals(CharSequence) to listOf(AsciiString:length(), AsciiString:regionMatches(int-CharSequence-int-int)),
		AsciiString:split(String-int) to listOf(AsciiString:toAsciiStringArray(String[])),
		AsciiString:toAsciiStringArray(String[]) to listOf(AsciiString:<init>(CharSequence)),
		AsciiString:split(char) to listOf(AsciiString:charAt(int), AsciiString:<init>(byte[]-int-int-boolean), AsciiString:<init>(byte[]-int-int-boolean), AsciiString:isEmpty()),
		AsciiString:contains(CharSequence) to listOf(AsciiString:indexOf(CharSequence)),
		AsciiString:parseInt() to listOf(AsciiString:length(), AsciiString:parseInt(int-int-int)),
		AsciiString:parseInt(int) to listOf(AsciiString:length(), AsciiString:parseInt(int-int-int)),
		AsciiString:parseInt(int-int) to listOf(AsciiString:parseInt(int-int-int)),
		AsciiString:parseInt(int-int-int) to listOf(AsciiString:charAt(int), AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:parseInt(int-int-int-boolean)),
		AsciiString:parseInt(int-int-int-boolean) to listOf(AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:subSequence(int-int), AsciiString:toString()),
		AsciiString:parseLong() to listOf(AsciiString:length(), AsciiString:parseLong(int-int-int)),
		AsciiString:parseLong(int) to listOf(AsciiString:length(), AsciiString:parseLong(int-int-int)),
		AsciiString:parseLong(int-int) to listOf(AsciiString:parseLong(int-int-int)),
		AsciiString:parseLong(int-int-int) to listOf(AsciiString:charAt(int), AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:parseLong(int-int-int-boolean)),
		AsciiString:parseLong(int-int-int-boolean) to listOf(AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:subSequence(int-int), AsciiString:toString(), AsciiString:subSequence(int-int), AsciiString:toString()),
		AsciiString:parseShort() to listOf(AsciiString:length(), AsciiString:parseShort(int-int-int)),
		AsciiString:parseShort(int) to listOf(AsciiString:length(), AsciiString:parseShort(int-int-int)),
		AsciiString:parseShort(int-int) to listOf(AsciiString:parseShort(int-int-int)),
		AsciiString:parseShort(int-int-int) to listOf(AsciiString:parseInt(int-int-int), AsciiString:subSequence(int-int), AsciiString:toString()),
		AsciiString:parseFloat() to listOf(AsciiString:length(), AsciiString:parseFloat(int-int)),
		AsciiString:parseFloat(int-int) to listOf(AsciiString:toString(int-int)),
		AsciiString:parseDouble() to listOf(AsciiString:length(), AsciiString:parseDouble(int-int)),
		AsciiString:parseDouble(int-int) to listOf(AsciiString:toString(int-int)),
		AsciiString:compareTo(Object) to listOf(AsciiString:compareTo(CharSequence)),
		AsciiString:access$100(byte) to listOf(AsciiString:toLowerCase(byte)),
		AsciiString:access$200(char) to listOf(AsciiString:toLowerCase(char)),
		AsciiString:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString$1:<init>(), AsciiString$2:<init>(), AsciiString$3:<init>(), AsciiString$4:<init>()),
		ReplayingDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		ReplayingDecoder:<init>(Object) to listOf(ByteToMessageDecoder:<init>(), ReplayingDecoderBuffer:<init>()),
		ReplayingDecoder:checkpoint() to listOf(ReplayingDecoder:internalBuffer(), ByteBuf:readerIndex()),
		ReplayingDecoder:checkpoint(Object) to listOf(ReplayingDecoder:checkpoint(), ReplayingDecoder:state(Object)),
		ReplayingDecoder:channelInactive(ChannelHandlerContext) to listOf(RecyclableArrayList:newInstance(), ReplayingDecoderBuffer:terminate(), ReplayingDecoder:internalBuffer(), ReplayingDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ReplayingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelReadComplete(), ChannelHandlerContext:fireChannelInactive(), RecyclableArrayList:recycle(), RecyclableArrayList:recycle(), Signal:expect(Signal), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelReadComplete(), ChannelHandlerContext:fireChannelInactive(), RecyclableArrayList:recycle(), RecyclableArrayList:recycle(), DecoderException:<init>(Throwable), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelReadComplete(), ChannelHandlerContext:fireChannelInactive(), RecyclableArrayList:recycle(), RecyclableArrayList:recycle()),
		ReplayingDecoder:callDecode(ChannelHandlerContext-ByteBuf-List) to listOf(ReplayingDecoderBuffer:setCumulation(ByteBuf), ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ReplayingDecoder:decode(ChannelHandlerContext-ByteBuf-List), ChannelHandlerContext:isRemoved(), ByteBuf:readableBytes(), StringUtil:simpleClassName(Class), DecoderException:<init>(String), Signal:expect(Signal), ChannelHandlerContext:isRemoved(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), StringUtil:simpleClassName(Class), DecoderException:<init>(String), ReplayingDecoder:isSingleDecode(), DecoderException:<init>(Throwable)),
		ReplayingDecoder:<clinit>() to listOf(Signal:valueOf(Class-String)),
		ByteToMessageCodec:<init>() to listOf(ByteToMessageCodec:<init>(boolean)),
		ByteToMessageCodec:<init>(Class) to listOf(ByteToMessageCodec:<init>(Class-boolean)),
		ByteToMessageCodec:<init>(boolean) to listOf(ChannelHandlerAdapter:<init>(), ByteToMessageCodec$1:<init>(ByteToMessageCodec), CodecUtil:ensureNotSharable(ChannelHandlerAdapter), TypeParameterMatcher:find(Object-Class-String), ByteToMessageCodec$Encoder:<init>(ByteToMessageCodec-boolean)),
		ByteToMessageCodec:<init>(Class-boolean) to listOf(ChannelHandlerAdapter:<init>(), ByteToMessageCodec$1:<init>(ByteToMessageCodec), CodecUtil:ensureNotSharable(ChannelHandlerAdapter), TypeParameterMatcher:get(Class), ByteToMessageCodec$Encoder:<init>(ByteToMessageCodec-boolean)),
		ByteToMessageCodec:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		ByteToMessageCodec:channelRead(ChannelHandlerContext-Object) to listOf(ByteToMessageDecoder:channelRead(ChannelHandlerContext-Object)),
		ByteToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToByteEncoder:write(ChannelHandlerContext-Object-ChannelPromise)),
		ByteToMessageCodec:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageCodec:decode(ChannelHandlerContext-ByteBuf-List)),
		FixedLengthFrameDecoder:<init>(int) to listOf(ByteToMessageDecoder:<init>()),
		FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain()),
		DefaultTextHeaders$1:generateHashCode(CharSequence) to listOf(AsciiString:caseInsensitiveHashCode(CharSequence)),
		DefaultTextHeaders$1:generateHashCode(Object) to listOf(DefaultTextHeaders$1:generateHashCode(CharSequence)),
		DefaultTextHeaders:<init>() to listOf(DefaultTextHeaders:<init>(boolean)),
		DefaultTextHeaders:<init>(boolean) to listOf(DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter-boolean)),
		DefaultTextHeaders:<init>(boolean-boolean) to listOf(DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter-boolean)),
		DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter) to listOf(DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter-boolean)),
		DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter-boolean) to listOf(DefaultTextHeaders:comparator(boolean), DefaultTextHeaders:comparator(boolean), DefaultConvertibleHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-ConvertibleHeaders$TypeConverter-DefaultHeaders$NameConverter), DefaultTextHeaders$SingleHeaderValuesComposer:<init>(DefaultTextHeaders-DefaultTextHeaders$1), DefaultTextHeaders$MultipleFieldsValueComposer:<init>(DefaultTextHeaders-DefaultTextHeaders$1)),
		DefaultTextHeaders:contains(CharSequence-CharSequence-boolean) to listOf(DefaultTextHeaders:comparator(boolean), DefaultTextHeaders:contains(Object-Object-Comparator)),
		DefaultTextHeaders:containsObject(CharSequence-Object-boolean) to listOf(DefaultTextHeaders:comparator(boolean), DefaultTextHeaders:containsObject(Object-Object-Comparator)),
		DefaultTextHeaders:add(CharSequence-CharSequence) to listOf(DefaultTextHeaders$ValuesComposer:add(CharSequence-CharSequence)),
		DefaultTextHeaders:add(CharSequence-Iterable) to listOf(DefaultTextHeaders$ValuesComposer:add(CharSequence-Iterable)),
		DefaultTextHeaders:add(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders$ValuesComposer:add(CharSequence-CharSequence[])),
		DefaultTextHeaders:addObject(CharSequence-Object) to listOf(DefaultTextHeaders$ValuesComposer:addObject(CharSequence-Object[])),
		DefaultTextHeaders:addObject(CharSequence-Iterable) to listOf(DefaultTextHeaders$ValuesComposer:addObject(CharSequence-Iterable)),
		DefaultTextHeaders:addObject(CharSequence-Object[]) to listOf(DefaultTextHeaders$ValuesComposer:addObject(CharSequence-Object[])),
		DefaultTextHeaders:addBoolean(CharSequence-boolean) to listOf(DefaultConvertibleHeaders:addBoolean(Object-boolean)),
		DefaultTextHeaders:addChar(CharSequence-char) to listOf(DefaultConvertibleHeaders:addChar(Object-char)),
		DefaultTextHeaders:addByte(CharSequence-byte) to listOf(DefaultConvertibleHeaders:addByte(Object-byte)),
		DefaultTextHeaders:addShort(CharSequence-short) to listOf(DefaultConvertibleHeaders:addShort(Object-short)),
		DefaultTextHeaders:addInt(CharSequence-int) to listOf(DefaultConvertibleHeaders:addInt(Object-int)),
		DefaultTextHeaders:addLong(CharSequence-long) to listOf(DefaultConvertibleHeaders:addLong(Object-long)),
		DefaultTextHeaders:addFloat(CharSequence-float) to listOf(DefaultConvertibleHeaders:addFloat(Object-float)),
		DefaultTextHeaders:addDouble(CharSequence-double) to listOf(DefaultConvertibleHeaders:addDouble(Object-double)),
		DefaultTextHeaders:addTimeMillis(CharSequence-long) to listOf(DefaultConvertibleHeaders:addTimeMillis(Object-long)),
		DefaultTextHeaders:add(TextHeaders) to listOf(DefaultConvertibleHeaders:add(Headers)),
		DefaultTextHeaders:set(CharSequence-CharSequence) to listOf(DefaultConvertibleHeaders:set(Object-Object)),
		DefaultTextHeaders:set(CharSequence-Iterable) to listOf(DefaultTextHeaders$ValuesComposer:set(CharSequence-Iterable)),
		DefaultTextHeaders:set(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders$ValuesComposer:set(CharSequence-CharSequence[])),
		DefaultTextHeaders:setObject(CharSequence-Object) to listOf(DefaultConvertibleHeaders:setObject(Object-Object)),
		DefaultTextHeaders:setObject(CharSequence-Iterable) to listOf(DefaultTextHeaders$ValuesComposer:setObject(CharSequence-Iterable)),
		DefaultTextHeaders:setObject(CharSequence-Object[]) to listOf(DefaultTextHeaders$ValuesComposer:setObject(CharSequence-Object[])),
		DefaultTextHeaders:setBoolean(CharSequence-boolean) to listOf(DefaultConvertibleHeaders:setBoolean(Object-boolean)),
		DefaultTextHeaders:setChar(CharSequence-char) to listOf(DefaultConvertibleHeaders:setChar(Object-char)),
		DefaultTextHeaders:setByte(CharSequence-byte) to listOf(DefaultConvertibleHeaders:setByte(Object-byte)),
		DefaultTextHeaders:setShort(CharSequence-short) to listOf(DefaultConvertibleHeaders:setShort(Object-short)),
		DefaultTextHeaders:setInt(CharSequence-int) to listOf(DefaultConvertibleHeaders:setInt(Object-int)),
		DefaultTextHeaders:setLong(CharSequence-long) to listOf(DefaultConvertibleHeaders:setLong(Object-long)),
		DefaultTextHeaders:setFloat(CharSequence-float) to listOf(DefaultConvertibleHeaders:setFloat(Object-float)),
		DefaultTextHeaders:setDouble(CharSequence-double) to listOf(DefaultConvertibleHeaders:setDouble(Object-double)),
		DefaultTextHeaders:setTimeMillis(CharSequence-long) to listOf(DefaultConvertibleHeaders:setTimeMillis(Object-long)),
		DefaultTextHeaders:set(TextHeaders) to listOf(DefaultConvertibleHeaders:set(Headers)),
		DefaultTextHeaders:setAll(TextHeaders) to listOf(DefaultConvertibleHeaders:setAll(Headers)),
		DefaultTextHeaders:clear() to listOf(DefaultConvertibleHeaders:clear(), DefaultTextHeaders:clear()),
		DefaultTextHeaders:setTimeMillis(Object-long) to listOf(DefaultTextHeaders:setTimeMillis(CharSequence-long)),
		DefaultTextHeaders:setDouble(Object-double) to listOf(DefaultTextHeaders:setDouble(CharSequence-double)),
		DefaultTextHeaders:setFloat(Object-float) to listOf(DefaultTextHeaders:setFloat(CharSequence-float)),
		DefaultTextHeaders:setLong(Object-long) to listOf(DefaultTextHeaders:setLong(CharSequence-long)),
		DefaultTextHeaders:setInt(Object-int) to listOf(DefaultTextHeaders:setInt(CharSequence-int)),
		DefaultTextHeaders:setShort(Object-short) to listOf(DefaultTextHeaders:setShort(CharSequence-short)),
		DefaultTextHeaders:setChar(Object-char) to listOf(DefaultTextHeaders:setChar(CharSequence-char)),
		DefaultTextHeaders:setByte(Object-byte) to listOf(DefaultTextHeaders:setByte(CharSequence-byte)),
		DefaultTextHeaders:setBoolean(Object-boolean) to listOf(DefaultTextHeaders:setBoolean(CharSequence-boolean)),
		DefaultTextHeaders:setObject(Object-Object[]) to listOf(DefaultTextHeaders:setObject(CharSequence-Object[])),
		DefaultTextHeaders:setObject(Object-Iterable) to listOf(DefaultTextHeaders:setObject(CharSequence-Iterable)),
		DefaultTextHeaders:setObject(Object-Object) to listOf(DefaultTextHeaders:setObject(CharSequence-Object)),
		DefaultTextHeaders:set(Object-Object[]) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence[])),
		DefaultTextHeaders:set(Object-Iterable) to listOf(DefaultTextHeaders:set(CharSequence-Iterable)),
		DefaultTextHeaders:set(Object-Object) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence)),
		DefaultTextHeaders:addTimeMillis(Object-long) to listOf(DefaultTextHeaders:addTimeMillis(CharSequence-long)),
		DefaultTextHeaders:addDouble(Object-double) to listOf(DefaultTextHeaders:addDouble(CharSequence-double)),
		DefaultTextHeaders:addFloat(Object-float) to listOf(DefaultTextHeaders:addFloat(CharSequence-float)),
		DefaultTextHeaders:addLong(Object-long) to listOf(DefaultTextHeaders:addLong(CharSequence-long)),
		DefaultTextHeaders:addInt(Object-int) to listOf(DefaultTextHeaders:addInt(CharSequence-int)),
		DefaultTextHeaders:addShort(Object-short) to listOf(DefaultTextHeaders:addShort(CharSequence-short)),
		DefaultTextHeaders:addChar(Object-char) to listOf(DefaultTextHeaders:addChar(CharSequence-char)),
		DefaultTextHeaders:addByte(Object-byte) to listOf(DefaultTextHeaders:addByte(CharSequence-byte)),
		DefaultTextHeaders:addBoolean(Object-boolean) to listOf(DefaultTextHeaders:addBoolean(CharSequence-boolean)),
		DefaultTextHeaders:addObject(Object-Object[]) to listOf(DefaultTextHeaders:addObject(CharSequence-Object[])),
		DefaultTextHeaders:addObject(Object-Iterable) to listOf(DefaultTextHeaders:addObject(CharSequence-Iterable)),
		DefaultTextHeaders:addObject(Object-Object) to listOf(DefaultTextHeaders:addObject(CharSequence-Object)),
		DefaultTextHeaders:add(Object-Object[]) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence[])),
		DefaultTextHeaders:add(Object-Iterable) to listOf(DefaultTextHeaders:add(CharSequence-Iterable)),
		DefaultTextHeaders:add(Object-Object) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence)),
		DefaultTextHeaders:access$201(DefaultTextHeaders-Object-Object) to listOf(DefaultHeaders:add(Object-Object)),
		DefaultTextHeaders:access$301(DefaultTextHeaders-Object-Object[]) to listOf(DefaultHeaders:add(Object-Object[])),
		DefaultTextHeaders:access$401(DefaultTextHeaders-Object-Iterable) to listOf(DefaultHeaders:add(Object-Iterable)),
		DefaultTextHeaders:access$501(DefaultTextHeaders-Object-Iterable) to listOf(DefaultHeaders:addObject(Object-Iterable)),
		DefaultTextHeaders:access$601(DefaultTextHeaders-Object-Object[]) to listOf(DefaultHeaders:addObject(Object-Object[])),
		DefaultTextHeaders:access$701(DefaultTextHeaders-Object-Object[]) to listOf(DefaultHeaders:set(Object-Object[])),
		DefaultTextHeaders:access$801(DefaultTextHeaders-Object-Iterable) to listOf(DefaultHeaders:set(Object-Iterable)),
		DefaultTextHeaders:access$901(DefaultTextHeaders-Object-Object[]) to listOf(DefaultHeaders:setObject(Object-Object[])),
		DefaultTextHeaders:access$1001(DefaultTextHeaders-Object-Iterable) to listOf(DefaultHeaders:setObject(Object-Iterable)),
		DefaultTextHeaders:access$1201(DefaultTextHeaders-Object-Object) to listOf(DefaultHeaders:set(Object-Object)),
		DefaultTextHeaders:access$1301(DefaultTextHeaders-Object-Object) to listOf(DefaultHeaders:set(Object-Object)),
		DefaultTextHeaders:access$1401(DefaultTextHeaders-Object-Object) to listOf(DefaultHeaders:set(Object-Object)),
		DefaultTextHeaders:access$1501(DefaultTextHeaders-Object-Object) to listOf(DefaultHeaders:set(Object-Object)),
		DefaultTextHeaders:access$1601(DefaultTextHeaders-Object) to listOf(DefaultHeaders:get(Object)),
		DefaultTextHeaders:access$1701(DefaultTextHeaders-Object-Object) to listOf(DefaultHeaders:add(Object-Object)),
		DefaultTextHeaders:access$1801(DefaultTextHeaders-Object-Object) to listOf(DefaultHeaders:set(Object-Object)),
		DefaultTextHeaders:<clinit>() to listOf(DefaultTextHeaders$1:<init>(), DefaultTextHeaders$2:<init>(), DefaultTextHeaders$DefaultTextValueTypeConverter:<init>(), DefaultTextHeaders$3:<init>(), DefaultHeaders$IdentityNameConverter:<init>()),
		MessageToMessageCodec:<init>() to listOf(ChannelHandlerAdapter:<init>(), MessageToMessageCodec$1:<init>(MessageToMessageCodec), MessageToMessageCodec$2:<init>(MessageToMessageCodec), TypeParameterMatcher:find(Object-Class-String), TypeParameterMatcher:find(Object-Class-String)),
		MessageToMessageCodec:<init>(Class-Class) to listOf(ChannelHandlerAdapter:<init>(), MessageToMessageCodec$1:<init>(MessageToMessageCodec), MessageToMessageCodec$2:<init>(MessageToMessageCodec), TypeParameterMatcher:get(Class), TypeParameterMatcher:get(Class)),
		MessageToMessageCodec:channelRead(ChannelHandlerContext-Object) to listOf(MessageToMessageDecoder:channelRead(ChannelHandlerContext-Object)),
		MessageToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToMessageEncoder:write(ChannelHandlerContext-Object-ChannelPromise)),
		MessageToMessageCodec:acceptInboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToMessageCodec:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		DefaultConvertibleHeaders$ConvertedIterator:<init>(DefaultConvertibleHeaders) to listOf(DefaultConvertibleHeaders:iterator()),
		DefaultConvertibleHeaders$ConvertedIterator:next() to listOf(DefaultConvertibleHeaders$ConvertedEntry:<init>(DefaultConvertibleHeaders-Map$Entry), DefaultConvertibleHeaders$ConvertedIterator:next()),
		DefaultConvertibleHeaders$ConvertedIterator:<init>(DefaultConvertibleHeaders-DefaultConvertibleHeaders$1) to listOf(DefaultConvertibleHeaders$ConvertedIterator:<init>(DefaultConvertibleHeaders)),
		AsciiHeadersEncoder$SeparatorType:values() to listOf(AsciiHeadersEncoder$SeparatorType[]:clone()),
		AsciiHeadersEncoder$SeparatorType:<clinit>() to listOf(AsciiHeadersEncoder$SeparatorType:<init>(String-int), AsciiHeadersEncoder$SeparatorType:<init>(String-int)),
		CompatibleObjectEncoder:<init>() to listOf(CompatibleObjectEncoder:<init>(int)),
		CompatibleObjectEncoder:<init>(int) to listOf(MessageToByteEncoder:<init>()),
		CompatibleObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get(), ByteBufOutputStream:<init>(ByteBuf), CompatibleObjectEncoder:newObjectOutputStream(OutputStream), Attribute:setIfAbsent(Object)),
		CompatibleObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(CompatibleObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf)),
		CompatibleObjectEncoder:<clinit>() to listOf(AttributeKey:valueOf(Class-String)),
		ObjectDecoderInputStream:<init>(InputStream) to listOf(ObjectDecoderInputStream:<init>(InputStream-ClassLoader)),
		ObjectDecoderInputStream:<init>(InputStream-ClassLoader) to listOf(ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int)),
		ObjectDecoderInputStream:<init>(InputStream-int) to listOf(ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int)),
		ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int) to listOf(ClassResolvers:weakCachingResolver(ClassLoader)),
		ObjectDecoderInputStream:readObject() to listOf(ObjectDecoderInputStream:readInt(), CompactObjectInputStream:<init>(InputStream-ClassResolver), CompactObjectInputStream:readObject()),
		WeakReferenceMap:<init>(Map) to listOf(ReferenceMap:<init>(Map)),
		CompactObjectInputStream:readStreamHeader() to listOf(CompactObjectInputStream:readByte()),
		CompactObjectInputStream:readClassDescriptor() to listOf(CompactObjectInputStream:read(), CompactObjectInputStream:readUTF(), ClassResolver:resolve(String)),
		CompactObjectInputStream:resolveClass(ObjectStreamClass) to listOf(ClassResolver:resolve(String)),
		SoftReferenceMap:<init>(Map) to listOf(ReferenceMap:<init>(Map)),
		CachingClassResolver:resolve(String) to listOf(ClassResolver:resolve(String)),
		ReferenceMap:get(Object) to listOf(ReferenceMap:unfold(Reference)),
		ReferenceMap:put(Object-Object) to listOf(ReferenceMap:fold(Object), ReferenceMap:unfold(Reference)),
		ReferenceMap:remove(Object) to listOf(ReferenceMap:unfold(Reference)),
		ReferenceMap:putAll(Map) to listOf(ReferenceMap:fold(Object)),
		ObjectEncoderOutputStream:<init>(OutputStream) to listOf(ObjectEncoderOutputStream:<init>(OutputStream-int)),
		ObjectEncoderOutputStream:writeObject(Object) to listOf(Unpooled:buffer(int), ByteBufOutputStream:<init>(ByteBuf), CompactObjectOutputStream:<init>(OutputStream), ByteBufOutputStream:buffer(), ByteBuf:readableBytes(), ObjectEncoderOutputStream:writeInt(int), ByteBuf:getBytes(int-OutputStream-int)),
		ObjectDecoder:<init>(ClassResolver) to listOf(ObjectDecoder:<init>(int-ClassResolver)),
		ObjectDecoder:<init>(int-ClassResolver) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int)),
		ObjectDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), ByteBufInputStream:<init>(ByteBuf), CompactObjectInputStream:<init>(InputStream-ClassResolver)),
		ObjectDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int) to listOf(ByteBuf:slice(int-int)),
		ClassResolvers:cacheDisabled(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader)),
		ClassResolvers:weakCachingResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), WeakReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		ClassResolvers:softCachingResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), SoftReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		ClassResolvers:weakCachingConcurrentResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), PlatformDependent:newConcurrentHashMap(), WeakReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		ClassResolvers:softCachingConcurrentResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), PlatformDependent:newConcurrentHashMap(), SoftReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		ClassResolvers:defaultClassLoader(ClassLoader) to listOf(PlatformDependent:getContextClassLoader(), PlatformDependent:getClassLoader(Class)),
		CompactObjectOutputStream:writeStreamHeader() to listOf(CompactObjectOutputStream:writeByte(int)),
		CompactObjectOutputStream:writeClassDescriptor(ObjectStreamClass) to listOf(CompactObjectOutputStream:write(int), CompactObjectOutputStream:write(int), CompactObjectOutputStream:writeUTF(String)),
		ObjectEncoder:<init>() to listOf(MessageToByteEncoder:<init>()),
		ObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBufOutputStream:<init>(ByteBuf), ByteBufOutputStream:write(byte[]), CompactObjectOutputStream:<init>(OutputStream), ByteBuf:writerIndex(), ByteBuf:setInt(int-int)),
		ObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(ObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertObject(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertObject(Object)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertInt(int) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertInt(int)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertLong(long) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertLong(long)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertDouble(double) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertDouble(double)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertChar(char) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertChar(char)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertBoolean(boolean) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertBoolean(boolean)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertFloat(float) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertFloat(float)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertByte(byte) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertByte(byte)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertShort(short) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertShort(short)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertTimeMillis(long) to listOf(AsciiString:<init>(CharSequence), DefaultTextHeaders$DefaultTextValueTypeConverter:convertTimeMillis(long)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToTimeMillis(CharSequence) to listOf(DefaultHeaders$HeaderDateFormat:get(), DefaultHeaders$HeaderDateFormat:parse(String), PlatformDependent:throwException(Throwable)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToDouble(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToDouble(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToFloat(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToFloat(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToTimeMillis(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToTimeMillis(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToLong(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToLong(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToInt(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToInt(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToShort(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToShort(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToChar(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToChar(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToByte(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToByte(CharSequence)),
		DefaultTextHeaders$DefaultTextValueTypeConverter:convertToBoolean(Object) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:convertToBoolean(CharSequence)),
		DefaultHeaders$HeaderDateFormat$1:<init>() to listOf(FastThreadLocal:<init>()),
		DefaultHeaders$HeaderDateFormat$1:initialValue() to listOf(DefaultHeaders$HeaderDateFormat:<init>(DefaultHeaders$1), DefaultHeaders$HeaderDateFormat$1:initialValue()),
		UnsupportedMessageTypeException:<init>(Object-Class[]) to listOf(UnsupportedMessageTypeException:message(String-Class[]), CodecException:<init>(String)),
		UnsupportedMessageTypeException:<init>() to listOf(CodecException:<init>()),
		UnsupportedMessageTypeException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		UnsupportedMessageTypeException:<init>(String) to listOf(CodecException:<init>(String)),
		UnsupportedMessageTypeException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		ByteToMessageCodec$1:<init>(ByteToMessageCodec) to listOf(ByteToMessageDecoder:<init>()),
		ByteToMessageCodec$1:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageCodec:decode(ChannelHandlerContext-ByteBuf-List)),
		ByteToMessageCodec$1:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageCodec:decodeLast(ChannelHandlerContext-ByteBuf-List)),
		AsciiHeadersEncoder:<init>(ByteBuf) to listOf(AsciiHeadersEncoder:<init>(ByteBuf-AsciiHeadersEncoder$SeparatorType-AsciiHeadersEncoder$NewlineType)),
		AsciiHeadersEncoder:visit(Map$Entry) to listOf(ByteBuf:writerIndex(), ByteBuf:ensureWritable(int), AsciiHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int), AsciiHeadersEncoder$SeparatorType:ordinal(), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), AsciiHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int), AsciiHeadersEncoder$NewlineType:ordinal(), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:writerIndex(int)),
		AsciiHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int) to listOf(AsciiHeadersEncoder:writeAsciiString(ByteBuf-int-AsciiString-int), AsciiHeadersEncoder:writeCharSequence(ByteBuf-int-CharSequence-int)),
		AsciiHeadersEncoder:writeAsciiString(ByteBuf-int-AsciiString-int) to listOf(AsciiString:copy(int-ByteBuf-int-int)),
		AsciiHeadersEncoder:writeCharSequence(ByteBuf-int-CharSequence-int) to listOf(AsciiHeadersEncoder:c2b(char), ByteBuf:setByte(int-int)),
		StringEncoder:<init>() to listOf(StringEncoder:<init>(Charset)),
		StringEncoder:<init>(Charset) to listOf(MessageToMessageEncoder:<init>()),
		StringEncoder:encode(ChannelHandlerContext-CharSequence-List) to listOf(ChannelHandlerContext:alloc(), ByteBufUtil:encodeString(ByteBufAllocator-CharBuffer-Charset)),
		StringEncoder:encode(ChannelHandlerContext-Object-List) to listOf(StringEncoder:encode(ChannelHandlerContext-CharSequence-List)),
		StringDecoder:<init>() to listOf(StringDecoder:<init>(Charset)),
		StringDecoder:<init>(Charset) to listOf(MessageToMessageDecoder:<init>()),
		StringDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:toString(Charset)),
		StringDecoder:decode(ChannelHandlerContext-Object-List) to listOf(StringDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		MessageToMessageEncoder:<init>() to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		MessageToMessageEncoder:<init>(Class) to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		MessageToMessageEncoder:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToMessageEncoder:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToMessageEncoder:acceptOutboundMessage(Object), RecyclableArrayList:newInstance(), MessageToMessageEncoder:encode(ChannelHandlerContext-Object-List), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), RecyclableArrayList:isEmpty(), RecyclableArrayList:recycle(), StringUtil:simpleClassName(Object), EncoderException:<init>(String), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:voidPromise(), ChannelHandlerContext:newPromise(), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:recycle(), EncoderException:<init>(Throwable), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:voidPromise(), ChannelHandlerContext:newPromise(), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:recycle()),
		ByteToMessageDecoder$1:cumulate(ByteBufAllocator-ByteBuf-ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:maxCapacity(), ByteBuf:readableBytes(), ByteBuf:refCnt(), ByteBuf:readableBytes(), ByteToMessageDecoder:expandCumulation(ByteBufAllocator-ByteBuf-int), ByteBuf:writeBytes(ByteBuf), ByteBuf:release()),
		MessageToMessageCodec$2:<init>(MessageToMessageCodec) to listOf(MessageToMessageDecoder:<init>()),
		MessageToMessageCodec$2:acceptInboundMessage(Object) to listOf(MessageToMessageCodec:acceptInboundMessage(Object)),
		MessageToMessageCodec$2:decode(ChannelHandlerContext-Object-List) to listOf(MessageToMessageCodec:decode(ChannelHandlerContext-Object-List)),
		DefaultHeaders$KeyValueHeaderIterator:<init>(DefaultHeaders) to listOf(DefaultHeaders:access$000(DefaultHeaders)),
		DefaultHeaders$KeyValueHeaderIterator:hasNext() to listOf(DefaultHeaders:access$000(DefaultHeaders)),
		DefaultHeaders$KeyValueHeaderIterator:next() to listOf(DefaultHeaders:access$000(DefaultHeaders), DefaultHeaders$KeyValueHeaderIterator:next()),
		DefaultHeaders$HeaderEntry:setValue(Object) to listOf(ObjectUtil:checkNotNull(Object-String)),
		HttpObjectDecoder:<init>() to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		HttpObjectDecoder:<init>(int-int-int-boolean) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean-boolean)),
		HttpObjectDecoder:<init>(int-int-int-boolean-boolean) to listOf(ByteToMessageDecoder:<init>(), AppendableCharSequence:<init>(int), HttpObjectDecoder$LineParser:<init>(AppendableCharSequence-int), HttpObjectDecoder$HeaderParser:<init>(AppendableCharSequence-int)),
		HttpObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(HttpObjectDecoder:resetNow(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder:skipControlCharacters(ByteBuf), HttpObjectDecoder$LineParser:parse(ByteBuf), HttpObjectDecoder:splitInitialLine(AppendableCharSequence), HttpObjectDecoder:createMessage(String[]), HttpObjectDecoder:invalidMessage(Exception), HttpObjectDecoder:readHeaders(ByteBuf), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder:resetNow(), HttpObjectDecoder:contentLength(), HttpObjectDecoder:isDecodingRequest(), HttpObjectDecoder:resetNow(), HttpObjectDecoder:invalidMessage(Exception), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultHttpContent:<init>(ByteBuf), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultLastHttpContent:<init>(ByteBuf-boolean), HttpObjectDecoder:resetNow(), DefaultHttpContent:<init>(ByteBuf), HttpObjectDecoder$LineParser:parse(ByteBuf), AppendableCharSequence:toString(), HttpObjectDecoder:getChunkSize(String), HttpObjectDecoder:invalidChunk(Exception), ByteBuf:readableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultHttpContent:<init>(ByteBuf), ByteBuf:writerIndex(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readerIndex(int), HttpObjectDecoder:readTrailingHeaders(ByteBuf), HttpObjectDecoder:resetNow(), HttpObjectDecoder:invalidChunk(Exception), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), ByteBuf:readBytes(int)),
		HttpObjectDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(HttpObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List), HttpHeaderUtil:isTransferEncodingChunked(HttpMessage), ByteBuf:isReadable(), HttpObjectDecoder:reset(), HttpObjectDecoder:isDecodingRequest(), HttpObjectDecoder:contentLength(), HttpObjectDecoder:resetNow()),
		HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage) to listOf(HttpResponse:status(), HttpResponseStatus:code(), HttpResponse:headers(), HttpHeaders:contains(Object)),
		HttpObjectDecoder:resetNow() to listOf(HttpObjectDecoder$LineParser:reset(), HttpObjectDecoder$HeaderParser:reset(), HttpObjectDecoder:isDecodingRequest(), HttpResponse:status(), HttpResponseStatus:code()),
		HttpObjectDecoder:invalidMessage(Exception) to listOf(DecoderResult:failure(Throwable), HttpMessage:setDecoderResult(DecoderResult), HttpObjectDecoder:createInvalidMessage(), DecoderResult:failure(Throwable), HttpMessage:setDecoderResult(DecoderResult)),
		HttpObjectDecoder:invalidChunk(Exception) to listOf(DefaultLastHttpContent:<init>(ByteBuf), DecoderResult:failure(Throwable), HttpContent:setDecoderResult(DecoderResult)),
		HttpObjectDecoder:skipControlCharacters(ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:readerIndex(), ByteBuf:getUnsignedByte(int), ByteBuf:readerIndex(int)),
		HttpObjectDecoder:readHeaders(ByteBuf) to listOf(HttpMessage:headers(), HttpObjectDecoder$HeaderParser:parse(ByteBuf), AppendableCharSequence:length(), AppendableCharSequence:charAt(int), AppendableCharSequence:length(), AppendableCharSequence:toString(), HttpHeaders:add(CharSequence-CharSequence), HttpObjectDecoder:splitHeader(AppendableCharSequence), HttpObjectDecoder$HeaderParser:parse(ByteBuf), AppendableCharSequence:length(), HttpHeaders:add(CharSequence-CharSequence), HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage), HttpHeaderUtil:setTransferEncodingChunked(HttpMessage-boolean), HttpHeaderUtil:isTransferEncodingChunked(HttpMessage), HttpObjectDecoder:contentLength()),
		HttpObjectDecoder:contentLength() to listOf(HttpHeaderUtil:getContentLength(HttpMessage-long)),
		HttpObjectDecoder:readTrailingHeaders(ByteBuf) to listOf(HttpObjectDecoder$HeaderParser:parse(ByteBuf), AppendableCharSequence:length(), DefaultLastHttpContent:<init>(ByteBuf-boolean), AppendableCharSequence:charAt(int), LastHttpContent:trailingHeaders(), HttpHeaders:getAll(Object), AppendableCharSequence:toString(), HttpObjectDecoder:splitHeader(AppendableCharSequence), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), LastHttpContent:trailingHeaders(), HttpHeaders:add(CharSequence-CharSequence), HttpObjectDecoder$HeaderParser:parse(ByteBuf), AppendableCharSequence:length()),
		HttpObjectDecoder:splitInitialLine(AppendableCharSequence) to listOf(HttpObjectDecoder:findNonWhitespace(CharSequence-int), HttpObjectDecoder:findWhitespace(CharSequence-int), HttpObjectDecoder:findNonWhitespace(CharSequence-int), HttpObjectDecoder:findWhitespace(CharSequence-int), HttpObjectDecoder:findNonWhitespace(CharSequence-int), HttpObjectDecoder:findEndOfString(CharSequence), AppendableCharSequence:substring(int-int), AppendableCharSequence:substring(int-int), AppendableCharSequence:substring(int-int)),
		HttpObjectDecoder:splitHeader(AppendableCharSequence) to listOf(AppendableCharSequence:length(), HttpObjectDecoder:findNonWhitespace(CharSequence-int), AppendableCharSequence:charAt(int), AppendableCharSequence:charAt(int), AppendableCharSequence:substring(int-int), HttpObjectDecoder:findNonWhitespace(CharSequence-int), HttpObjectDecoder:findEndOfString(CharSequence), AppendableCharSequence:substring(int-int)),
		HttpObjectAggregator$AggregatedFullHttpRequest:<init>(HttpRequest-ByteBuf-HttpHeaders) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:<init>(HttpMessage-ByteBuf-HttpHeaders)),
		HttpObjectAggregator$AggregatedFullHttpRequest:copy(boolean-ByteBuf) to listOf(HttpObjectAggregator$AggregatedFullHttpRequest:protocolVersion(), HttpObjectAggregator$AggregatedFullHttpRequest:method(), HttpObjectAggregator$AggregatedFullHttpRequest:uri(), HttpObjectAggregator$AggregatedFullHttpRequest:content(), ByteBuf:copy(), Unpooled:buffer(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), HttpObjectAggregator$AggregatedFullHttpRequest:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpRequest:trailingHeaders(), HttpObjectAggregator$AggregatedFullHttpRequest:trailingHeaders(), HttpHeaders:set(TextHeaders)),
		HttpObjectAggregator$AggregatedFullHttpRequest:copy(ByteBuf) to listOf(HttpObjectAggregator$AggregatedFullHttpRequest:copy(boolean-ByteBuf), HttpObjectAggregator$AggregatedFullHttpRequest:copy(ByteBuf)),
		HttpObjectAggregator$AggregatedFullHttpRequest:copy() to listOf(HttpObjectAggregator$AggregatedFullHttpRequest:copy(boolean-ByteBuf), HttpObjectAggregator$AggregatedFullHttpRequest:copy(), HttpObjectAggregator$AggregatedFullHttpRequest:copy(), HttpObjectAggregator$AggregatedFullHttpRequest:copy(), HttpObjectAggregator$AggregatedFullHttpRequest:copy()),
		HttpObjectAggregator$AggregatedFullHttpRequest:duplicate() to listOf(HttpObjectAggregator$AggregatedFullHttpRequest:protocolVersion(), HttpObjectAggregator$AggregatedFullHttpRequest:method(), HttpObjectAggregator$AggregatedFullHttpRequest:uri(), HttpObjectAggregator$AggregatedFullHttpRequest:content(), ByteBuf:duplicate(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), HttpObjectAggregator$AggregatedFullHttpRequest:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpRequest:trailingHeaders(), HttpObjectAggregator$AggregatedFullHttpRequest:trailingHeaders(), HttpHeaders:set(TextHeaders), HttpObjectAggregator$AggregatedFullHttpRequest:duplicate(), HttpObjectAggregator$AggregatedFullHttpRequest:duplicate(), HttpObjectAggregator$AggregatedFullHttpRequest:duplicate(), HttpObjectAggregator$AggregatedFullHttpRequest:duplicate()),
		HttpObjectAggregator$AggregatedFullHttpRequest:retain(int) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:retain(int), HttpObjectAggregator$AggregatedFullHttpRequest:retain(int), HttpObjectAggregator$AggregatedFullHttpRequest:retain(int), HttpObjectAggregator$AggregatedFullHttpRequest:retain(int), HttpObjectAggregator$AggregatedFullHttpRequest:retain(int), HttpObjectAggregator$AggregatedFullHttpRequest:retain(int)),
		HttpObjectAggregator$AggregatedFullHttpRequest:retain() to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:retain(), HttpObjectAggregator$AggregatedFullHttpRequest:retain(), HttpObjectAggregator$AggregatedFullHttpRequest:retain(), HttpObjectAggregator$AggregatedFullHttpRequest:retain(), HttpObjectAggregator$AggregatedFullHttpRequest:retain(), HttpObjectAggregator$AggregatedFullHttpRequest:retain()),
		HttpObjectAggregator$AggregatedFullHttpRequest:touch() to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:touch(), HttpObjectAggregator$AggregatedFullHttpRequest:touch(), HttpObjectAggregator$AggregatedFullHttpRequest:touch(), HttpObjectAggregator$AggregatedFullHttpRequest:touch(), HttpObjectAggregator$AggregatedFullHttpRequest:touch(), HttpObjectAggregator$AggregatedFullHttpRequest:touch()),
		HttpObjectAggregator$AggregatedFullHttpRequest:touch(Object) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object), HttpObjectAggregator$AggregatedFullHttpRequest:touch(Object), HttpObjectAggregator$AggregatedFullHttpRequest:touch(Object), HttpObjectAggregator$AggregatedFullHttpRequest:touch(Object), HttpObjectAggregator$AggregatedFullHttpRequest:touch(Object), HttpObjectAggregator$AggregatedFullHttpRequest:touch(Object)),
		HttpObjectAggregator$AggregatedFullHttpRequest:setMethod(HttpMethod) to listOf(HttpRequest:setMethod(HttpMethod), HttpObjectAggregator$AggregatedFullHttpRequest:setMethod(HttpMethod)),
		HttpObjectAggregator$AggregatedFullHttpRequest:setUri(String) to listOf(HttpRequest:setUri(String), HttpObjectAggregator$AggregatedFullHttpRequest:setUri(String)),
		HttpObjectAggregator$AggregatedFullHttpRequest:method() to listOf(HttpRequest:method()),
		HttpObjectAggregator$AggregatedFullHttpRequest:uri() to listOf(HttpRequest:uri()),
		HttpObjectAggregator$AggregatedFullHttpRequest:setProtocolVersion(HttpVersion) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:setProtocolVersion(HttpVersion), HttpObjectAggregator$AggregatedFullHttpRequest:setProtocolVersion(HttpVersion), HttpObjectAggregator$AggregatedFullHttpRequest:setProtocolVersion(HttpVersion), HttpObjectAggregator$AggregatedFullHttpRequest:setProtocolVersion(HttpVersion)),
		HttpObjectAggregator$AggregatedFullHttpRequest:toString() to listOf(HttpMessageUtil:appendFullRequest(StringBuilder-FullHttpRequest)),
		HttpContentEncoder:<init>() to listOf(MessageToMessageCodec:<init>()),
		HttpContentEncoder:decode(ChannelHandlerContext-HttpRequest-List) to listOf(HttpRequest:headers(), HttpHeaders:get(Object), ReferenceCountUtil:retain(Object)),
		HttpContentEncoder:encode(ChannelHandlerContext-HttpObject-List) to listOf(HttpContentEncoder$State:ordinal(), HttpContentEncoder:ensureHeaders(HttpObject), HttpContentEncoder:isPassthru(HttpResponse), ReferenceCountUtil:retain(Object), ByteBufHolder:content(), ByteBuf:isReadable(), ReferenceCountUtil:retain(Object), HttpContentEncoder:beginEncode(HttpResponse-CharSequence), ReferenceCountUtil:retain(Object), HttpContentEncoder$Result:contentEncoder(), HttpResponse:headers(), HttpContentEncoder$Result:targetContentEncoding(), HttpHeaders:set(CharSequence-CharSequence), HttpResponse:headers(), HttpHeaders:remove(Object), HttpResponse:headers(), HttpHeaders:set(CharSequence-CharSequence), HttpResponse:protocolVersion(), HttpResponse:status(), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), HttpResponse:headers(), HttpResponse:headers(), HttpHeaders:set(TextHeaders), HttpContentEncoder:ensureContent(HttpObject), HttpContentEncoder:encodeContent(HttpContent-List), HttpContentEncoder:ensureContent(HttpObject), ReferenceCountUtil:retain(Object)),
		HttpContentEncoder:isPassthru(HttpResponse) to listOf(HttpResponse:status(), HttpResponseStatus:code()),
		HttpContentEncoder:encodeContent(HttpContent-List) to listOf(HttpContent:content(), HttpContentEncoder:encode(ByteBuf-List), HttpContentEncoder:finishEncode(List), LastHttpContent:trailingHeaders(), HttpHeaders:isEmpty(), ComposedLastHttpContent:<init>(HttpHeaders)),
		HttpContentEncoder:handlerRemoved(ChannelHandlerContext) to listOf(HttpContentEncoder:cleanup(), MessageToMessageCodec:handlerRemoved(ChannelHandlerContext)),
		HttpContentEncoder:channelInactive(ChannelHandlerContext) to listOf(HttpContentEncoder:cleanup(), MessageToMessageCodec:channelInactive(ChannelHandlerContext)),
		HttpContentEncoder:cleanup() to listOf(EmbeddedChannel:finish(), EmbeddedChannel:readOutbound(), ByteBuf:release()),
		HttpContentEncoder:encode(ByteBuf-List) to listOf(ByteBuf:retain(), EmbeddedChannel:writeOutbound(Object[]), HttpContentEncoder:fetchEncoderOutput(List)),
		HttpContentEncoder:finishEncode(List) to listOf(EmbeddedChannel:finish(), HttpContentEncoder:fetchEncoderOutput(List)),
		HttpContentEncoder:fetchEncoderOutput(List) to listOf(EmbeddedChannel:readOutbound(), ByteBuf:isReadable(), ByteBuf:release(), DefaultHttpContent:<init>(ByteBuf)),
		HttpContentEncoder:decode(ChannelHandlerContext-Object-List) to listOf(HttpContentEncoder:decode(ChannelHandlerContext-HttpRequest-List)),
		HttpContentEncoder:encode(ChannelHandlerContext-Object-List) to listOf(HttpContentEncoder:encode(ChannelHandlerContext-HttpObject-List)),
		HttpContentDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		HttpContentDecoder:decode(ChannelHandlerContext-HttpObject-List) to listOf(HttpResponse:status(), HttpResponseStatus:code(), ReferenceCountUtil:retain(Object), ReferenceCountUtil:retain(Object), HttpContentDecoder:cleanup(), HttpMessage:headers(), HttpHeaders:getAndConvert(Object), HttpContentDecoder:newContentDecoder(String), HttpContent:retain(), HttpHeaders:remove(Object), HttpContentDecoder:getTargetContentEncoding(String), AsciiString:equals(Object), HttpHeaders:remove(Object), HttpHeaders:set(CharSequence-CharSequence), HttpRequest:protocolVersion(), HttpRequest:method(), HttpRequest:uri(), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String), HttpResponse:protocolVersion(), HttpResponse:status(), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), CodecException:<init>(String), HttpMessage:headers(), HttpMessage:headers(), HttpHeaders:set(TextHeaders), HttpMessage:decoderResult(), HttpMessage:setDecoderResult(DecoderResult), HttpContent:retain(), HttpContentDecoder:decodeContent(HttpContent-List)),
		HttpContentDecoder:decodeContent(HttpContent-List) to listOf(HttpContent:content(), HttpContentDecoder:decode(ByteBuf-List), HttpContentDecoder:finishDecode(List), LastHttpContent:trailingHeaders(), HttpHeaders:isEmpty(), ComposedLastHttpContent:<init>(HttpHeaders)),
		HttpContentDecoder:handlerRemoved(ChannelHandlerContext) to listOf(HttpContentDecoder:cleanup(), MessageToMessageDecoder:handlerRemoved(ChannelHandlerContext)),
		HttpContentDecoder:channelInactive(ChannelHandlerContext) to listOf(HttpContentDecoder:cleanup(), MessageToMessageDecoder:channelInactive(ChannelHandlerContext)),
		HttpContentDecoder:cleanup() to listOf(EmbeddedChannel:finish(), EmbeddedChannel:readInbound(), ByteBuf:release()),
		HttpContentDecoder:decode(ByteBuf-List) to listOf(ByteBuf:retain(), EmbeddedChannel:writeInbound(Object[]), HttpContentDecoder:fetchDecoderOutput(List)),
		HttpContentDecoder:finishDecode(List) to listOf(EmbeddedChannel:finish(), HttpContentDecoder:fetchDecoderOutput(List)),
		HttpContentDecoder:fetchDecoderOutput(List) to listOf(EmbeddedChannel:readInbound(), ByteBuf:isReadable(), ByteBuf:release(), DefaultHttpContent:<init>(ByteBuf)),
		HttpContentDecoder:decode(ChannelHandlerContext-Object-List) to listOf(HttpContentDecoder:decode(ChannelHandlerContext-HttpObject-List)),
		HttpContentDecoder:<clinit>() to listOf(AsciiString:toString()),
		HttpObjectEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		HttpObjectEncoder:encode(ChannelHandlerContext-Object-List) to listOf(StringUtil:simpleClassName(Object), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), HttpObjectEncoder:encodeInitialLine(ByteBuf-HttpMessage), HttpMessage:headers(), HttpObjectEncoder:encodeHeaders(HttpHeaders-ByteBuf), ByteBuf:writeBytes(byte[]), HttpHeaderUtil:isTransferEncodingChunked(HttpMessage), ByteBuf:isReadable(), StringUtil:simpleClassName(Object), HttpObjectEncoder:contentLength(Object), ByteBuf:writableBytes(), HttpContent:content(), ByteBuf:writeBytes(ByteBuf), HttpObjectEncoder:encodeAndRetain(Object), HttpObjectEncoder:encodeChunkedContent(ChannelHandlerContext-Object-long-List)),
		HttpObjectEncoder:encodeHeaders(HttpHeaders-ByteBuf) to listOf(HttpHeadersEncoder:<init>(ByteBuf), HttpHeaders:forEachEntry(Headers$EntryVisitor)),
		HttpObjectEncoder:encodeChunkedContent(ChannelHandlerContext-Object-long-List) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeBytes(byte[]), HttpObjectEncoder:encodeAndRetain(Object), ByteBuf:duplicate(), LastHttpContent:trailingHeaders(), HttpHeaders:isEmpty(), ByteBuf:duplicate(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), ByteBuf:writeBytes(byte[]), HttpObjectEncoder:encodeHeaders(HttpHeaders-ByteBuf), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:writeBytes(byte[])),
		HttpObjectEncoder:encodeAndRetain(Object) to listOf(ByteBuf:retain(), HttpContent:content(), ByteBuf:retain(), FileRegion:retain(), StringUtil:simpleClassName(Object)),
		HttpObjectEncoder:contentLength(Object) to listOf(HttpContent:content(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), FileRegion:count(), StringUtil:simpleClassName(Object)),
		HttpObjectEncoder:<clinit>() to listOf(Unpooled:directBuffer(int), ByteBuf:writeBytes(byte[]), Unpooled:unreleasableBuffer(ByteBuf), Unpooled:directBuffer(int), ByteBuf:writeBytes(byte[]), Unpooled:unreleasableBuffer(ByteBuf)),
		HttpServerCodec:<init>() to listOf(HttpServerCodec:<init>(int-int-int)),
		HttpServerCodec:<init>(int-int-int) to listOf(HttpRequestDecoder:<init>(int-int-int), HttpResponseEncoder:<init>(), ChannelHandlerAppender:<init>(ChannelHandler[])),
		HttpServerCodec:<init>(int-int-int-boolean) to listOf(HttpRequestDecoder:<init>(int-int-int-boolean), HttpResponseEncoder:<init>(), ChannelHandlerAppender:<init>(ChannelHandler[])),
		HttpServerCodec:upgradeFrom(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(Class), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(Class)),
		HttpServerCodec:encoder() to listOf(HttpServerCodec:handlerAt(int)),
		HttpServerCodec:decoder() to listOf(HttpServerCodec:handlerAt(int)),
		ClientCookieDecoder$CookieBuilder:mergeMaxAgeAndExpire(long-String) to listOf(HttpHeaderDateFormat:get(), HttpHeaderDateFormat:parse(String-ParsePosition)),
		ClientCookieDecoder$CookieBuilder:cookie() to listOf(DefaultCookie:<init>(String-String), DefaultCookie:setValue(String), DefaultCookie:setRawValue(String), DefaultCookie:setDomain(String), DefaultCookie:setPath(String), ClientCookieDecoder$CookieBuilder:mergeMaxAgeAndExpire(long-String), DefaultCookie:setMaxAge(long), DefaultCookie:setSecure(boolean), DefaultCookie:setHttpOnly(boolean)),
		ClientCookieDecoder$CookieBuilder:appendAttribute(String-int-int-String) to listOf(ClientCookieDecoder$CookieBuilder:setCookieAttribute(String-int-int-String)),
		ClientCookieDecoder$CookieBuilder:setCookieAttribute(String-int-int-String) to listOf(ClientCookieDecoder$CookieBuilder:parse4(String-int-String), ClientCookieDecoder$CookieBuilder:parse6(String-int-String), ClientCookieDecoder$CookieBuilder:parse7(String-int-String), ClientCookieDecoder$CookieBuilder:parse8(String-int-String)),
		ClientCookieDecoder$CookieBuilder:parse7(String-int-String) to listOf(ClientCookieDecoder$CookieBuilder:setExpire(String), ClientCookieDecoder$CookieBuilder:setMaxAge(String)),
		HttpContentEncoder$1:<clinit>() to listOf(HttpContentEncoder$State:values(), HttpContentEncoder$State:ordinal(), HttpContentEncoder$State:ordinal(), HttpContentEncoder$State:ordinal()),
		HttpStatusClass:values() to listOf(HttpStatusClass[]:clone()),
		HttpStatusClass:valueOf(int) to listOf(HttpStatusClass:contains(int), HttpStatusClass:contains(int), HttpStatusClass:contains(int), HttpStatusClass:contains(int), HttpStatusClass:contains(int)),
		HttpStatusClass:<init>(String-int-int-int-String) to listOf(AsciiString:<init>(CharSequence)),
		HttpStatusClass:<init>(String-int-int-int-String-HttpStatusClass$1) to listOf(HttpStatusClass:<init>(String-int-int-int-String)),
		HttpStatusClass:<clinit>() to listOf(HttpStatusClass:<init>(String-int-int-int-String), HttpStatusClass:<init>(String-int-int-int-String), HttpStatusClass:<init>(String-int-int-int-String), HttpStatusClass:<init>(String-int-int-int-String), HttpStatusClass:<init>(String-int-int-int-String), HttpStatusClass$1:<init>(String-int-int-int-String)),
		DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String) to listOf(DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean)),
		DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean) to listOf(DefaultHttpMessage:<init>(HttpVersion-boolean-boolean)),
		DefaultHttpRequest:setProtocolVersion(HttpVersion) to listOf(DefaultHttpMessage:setProtocolVersion(HttpVersion), DefaultHttpRequest:setProtocolVersion(HttpVersion)),
		DefaultHttpRequest:hashCode() to listOf(HttpMethod:hashCode(), DefaultHttpMessage:hashCode()),
		DefaultHttpRequest:equals(Object) to listOf(DefaultHttpRequest:method(), DefaultHttpRequest:method(), HttpMethod:equals(Object), DefaultHttpRequest:uri(), DefaultHttpRequest:uri(), DefaultHttpMessage:equals(Object)),
		DefaultHttpRequest:toString() to listOf(HttpMessageUtil:appendRequest(StringBuilder-HttpRequest)),
		DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String) to listOf(Unpooled:buffer(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf)),
		DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf) to listOf(DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf-boolean)),
		DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean) to listOf(Unpooled:buffer(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf-boolean)),
		DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf-boolean) to listOf(DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean), DefaultHttpHeaders:<init>(boolean)),
		DefaultFullHttpRequest:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultFullHttpRequest:retain() to listOf(ByteBuf:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain()),
		DefaultFullHttpRequest:retain(int) to listOf(ByteBuf:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int)),
		DefaultFullHttpRequest:touch() to listOf(ByteBuf:touch(), DefaultFullHttpRequest:touch(), DefaultFullHttpRequest:touch(), DefaultFullHttpRequest:touch(), DefaultFullHttpRequest:touch(), DefaultFullHttpRequest:touch()),
		DefaultFullHttpRequest:touch(Object) to listOf(ByteBuf:touch(Object), DefaultFullHttpRequest:touch(Object), DefaultFullHttpRequest:touch(Object), DefaultFullHttpRequest:touch(Object), DefaultFullHttpRequest:touch(Object), DefaultFullHttpRequest:touch(Object)),
		DefaultFullHttpRequest:release() to listOf(ByteBuf:release()),
		DefaultFullHttpRequest:release(int) to listOf(ByteBuf:release(int)),
		DefaultFullHttpRequest:setProtocolVersion(HttpVersion) to listOf(DefaultHttpRequest:setProtocolVersion(HttpVersion), DefaultFullHttpRequest:setProtocolVersion(HttpVersion), DefaultFullHttpRequest:setProtocolVersion(HttpVersion)),
		DefaultFullHttpRequest:setMethod(HttpMethod) to listOf(DefaultHttpRequest:setMethod(HttpMethod), DefaultFullHttpRequest:setMethod(HttpMethod)),
		DefaultFullHttpRequest:setUri(String) to listOf(DefaultHttpRequest:setUri(String), DefaultFullHttpRequest:setUri(String)),
		DefaultFullHttpRequest:copy(boolean-ByteBuf) to listOf(DefaultFullHttpRequest:protocolVersion(), DefaultFullHttpRequest:method(), DefaultFullHttpRequest:uri(), DefaultFullHttpRequest:content(), ByteBuf:copy(), Unpooled:buffer(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), DefaultFullHttpRequest:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpRequest:trailingHeaders(), DefaultFullHttpRequest:trailingHeaders(), HttpHeaders:set(TextHeaders)),
		DefaultFullHttpRequest:copy(ByteBuf) to listOf(DefaultFullHttpRequest:copy(boolean-ByteBuf), DefaultFullHttpRequest:copy(ByteBuf)),
		DefaultFullHttpRequest:copy() to listOf(DefaultFullHttpRequest:copy(boolean-ByteBuf), DefaultFullHttpRequest:copy(), DefaultFullHttpRequest:copy(), DefaultFullHttpRequest:copy(), DefaultFullHttpRequest:copy()),
		DefaultFullHttpRequest:duplicate() to listOf(DefaultFullHttpRequest:protocolVersion(), DefaultFullHttpRequest:method(), DefaultFullHttpRequest:uri(), DefaultFullHttpRequest:content(), ByteBuf:duplicate(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf-boolean), DefaultFullHttpRequest:headers(), DefaultFullHttpRequest:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpRequest:trailingHeaders(), DefaultFullHttpRequest:trailingHeaders(), HttpHeaders:set(TextHeaders), DefaultFullHttpRequest:duplicate(), DefaultFullHttpRequest:duplicate(), DefaultFullHttpRequest:duplicate(), DefaultFullHttpRequest:duplicate()),
		DefaultFullHttpRequest:hashCode() to listOf(DefaultFullHttpRequest:content(), ByteBuf:hashCode(), DefaultFullHttpRequest:trailingHeaders(), DefaultHttpRequest:hashCode()),
		DefaultFullHttpRequest:equals(Object) to listOf(DefaultHttpRequest:equals(Object), DefaultFullHttpRequest:content(), DefaultFullHttpRequest:content(), ByteBuf:equals(Object), DefaultFullHttpRequest:trailingHeaders(), DefaultFullHttpRequest:trailingHeaders()),
		DefaultFullHttpRequest:toString() to listOf(HttpMessageUtil:appendFullRequest(StringBuilder-FullHttpRequest)),
		ComposedLastHttpContent:copy() to listOf(DefaultLastHttpContent:<init>(ByteBuf), LastHttpContent:trailingHeaders(), ComposedLastHttpContent:trailingHeaders(), HttpHeaders:set(TextHeaders), ComposedLastHttpContent:copy(), ComposedLastHttpContent:copy()),
		ComposedLastHttpContent:duplicate() to listOf(ComposedLastHttpContent:copy(), ComposedLastHttpContent:duplicate(), ComposedLastHttpContent:duplicate()),
		ComposedLastHttpContent:touch(Object) to listOf(ComposedLastHttpContent:touch(Object), ComposedLastHttpContent:touch(Object), ComposedLastHttpContent:touch(Object)),
		ComposedLastHttpContent:touch() to listOf(ComposedLastHttpContent:touch(), ComposedLastHttpContent:touch(), ComposedLastHttpContent:touch()),
		ComposedLastHttpContent:retain(int) to listOf(ComposedLastHttpContent:retain(int), ComposedLastHttpContent:retain(int), ComposedLastHttpContent:retain(int)),
		ComposedLastHttpContent:retain() to listOf(ComposedLastHttpContent:retain(), ComposedLastHttpContent:retain(), ComposedLastHttpContent:retain()),
		HttpMessageUtil:appendRequest(StringBuilder-HttpRequest) to listOf(HttpMessageUtil:appendCommon(StringBuilder-HttpMessage), HttpMessageUtil:appendInitialLine(StringBuilder-HttpRequest), HttpRequest:headers(), HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders), HttpMessageUtil:removeLastNewLine(StringBuilder)),
		HttpMessageUtil:appendResponse(StringBuilder-HttpResponse) to listOf(HttpMessageUtil:appendCommon(StringBuilder-HttpMessage), HttpMessageUtil:appendInitialLine(StringBuilder-HttpResponse), HttpResponse:headers(), HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders), HttpMessageUtil:removeLastNewLine(StringBuilder)),
		HttpMessageUtil:appendCommon(StringBuilder-HttpMessage) to listOf(StringUtil:simpleClassName(Object), HttpMessage:decoderResult(), HttpMessage:protocolVersion()),
		HttpMessageUtil:appendFullRequest(StringBuilder-FullHttpRequest) to listOf(HttpMessageUtil:appendFullCommon(StringBuilder-FullHttpMessage), HttpMessageUtil:appendInitialLine(StringBuilder-HttpRequest), FullHttpRequest:headers(), HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders), FullHttpRequest:trailingHeaders(), HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders), HttpMessageUtil:removeLastNewLine(StringBuilder)),
		HttpMessageUtil:appendFullResponse(StringBuilder-FullHttpResponse) to listOf(HttpMessageUtil:appendFullCommon(StringBuilder-FullHttpMessage), HttpMessageUtil:appendInitialLine(StringBuilder-HttpResponse), FullHttpResponse:headers(), HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders), FullHttpResponse:trailingHeaders(), HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders), HttpMessageUtil:removeLastNewLine(StringBuilder)),
		HttpMessageUtil:appendFullCommon(StringBuilder-FullHttpMessage) to listOf(StringUtil:simpleClassName(Object), FullHttpMessage:decoderResult(), FullHttpMessage:protocolVersion(), FullHttpMessage:content()),
		HttpMessageUtil:appendInitialLine(StringBuilder-HttpRequest) to listOf(HttpRequest:method(), HttpRequest:uri(), HttpRequest:protocolVersion()),
		HttpMessageUtil:appendInitialLine(StringBuilder-HttpResponse) to listOf(HttpResponse:protocolVersion(), HttpResponse:status()),
		HttpMessageUtil:appendHeaders(StringBuilder-HttpHeaders) to listOf(HttpHeaders:iterator()),
		HttpObjectAggregator$AggregatedFullHttpMessage:<init>(HttpMessage-ByteBuf-HttpHeaders) to listOf(DefaultByteBufHolder:<init>(ByteBuf)),
		HttpObjectAggregator$AggregatedFullHttpMessage:protocolVersion() to listOf(HttpMessage:protocolVersion()),
		HttpObjectAggregator$AggregatedFullHttpMessage:setProtocolVersion(HttpVersion) to listOf(HttpMessage:setProtocolVersion(HttpVersion), HttpObjectAggregator$AggregatedFullHttpMessage:setProtocolVersion(HttpVersion)),
		HttpObjectAggregator$AggregatedFullHttpMessage:headers() to listOf(HttpMessage:headers()),
		HttpObjectAggregator$AggregatedFullHttpMessage:decoderResult() to listOf(HttpMessage:decoderResult()),
		HttpObjectAggregator$AggregatedFullHttpMessage:setDecoderResult(DecoderResult) to listOf(HttpMessage:setDecoderResult(DecoderResult)),
		HttpObjectAggregator$AggregatedFullHttpMessage:retain(int) to listOf(DefaultByteBufHolder:retain(int), HttpObjectAggregator$AggregatedFullHttpMessage:retain(int), HttpObjectAggregator$AggregatedFullHttpMessage:retain(int), HttpObjectAggregator$AggregatedFullHttpMessage:retain(int), HttpObjectAggregator$AggregatedFullHttpMessage:retain(int)),
		HttpObjectAggregator$AggregatedFullHttpMessage:retain() to listOf(DefaultByteBufHolder:retain(), HttpObjectAggregator$AggregatedFullHttpMessage:retain(), HttpObjectAggregator$AggregatedFullHttpMessage:retain(), HttpObjectAggregator$AggregatedFullHttpMessage:retain(), HttpObjectAggregator$AggregatedFullHttpMessage:retain()),
		HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object) to listOf(DefaultByteBufHolder:touch(Object), HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object), HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object), HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object), HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object)),
		HttpObjectAggregator$AggregatedFullHttpMessage:touch() to listOf(DefaultByteBufHolder:touch(), HttpObjectAggregator$AggregatedFullHttpMessage:touch(), HttpObjectAggregator$AggregatedFullHttpMessage:touch(), HttpObjectAggregator$AggregatedFullHttpMessage:touch(), HttpObjectAggregator$AggregatedFullHttpMessage:touch()),
		HttpObjectAggregator$AggregatedFullHttpMessage:duplicate() to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:duplicate(), HttpObjectAggregator$AggregatedFullHttpMessage:duplicate(), HttpObjectAggregator$AggregatedFullHttpMessage:duplicate()),
		HttpObjectAggregator$AggregatedFullHttpMessage:copy() to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:copy(), HttpObjectAggregator$AggregatedFullHttpMessage:copy(), HttpObjectAggregator$AggregatedFullHttpMessage:copy()),
		HttpObjectDecoder$1:<clinit>() to listOf(HttpObjectDecoder$State:values(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal()),
		CookieEncoderUtil:stringBuilder() to listOf(InternalThreadLocalMap:get(), InternalThreadLocalMap:stringBuilder()),
		CookieEncoderUtil:stripTrailingSeparatorOrNull(StringBuilder) to listOf(CookieEncoderUtil:stripTrailingSeparator(StringBuilder)),
		EmptyHttpHeaders:<init>() to listOf(EmptyTextHeaders:<init>()),
		EmptyHttpHeaders:add(CharSequence-CharSequence) to listOf(EmptyTextHeaders:add(CharSequence-CharSequence), EmptyHttpHeaders:add(CharSequence-CharSequence)),
		EmptyHttpHeaders:add(CharSequence-Iterable) to listOf(EmptyTextHeaders:add(CharSequence-Iterable), EmptyHttpHeaders:add(CharSequence-Iterable)),
		EmptyHttpHeaders:add(CharSequence-CharSequence[]) to listOf(EmptyTextHeaders:add(CharSequence-CharSequence[]), EmptyHttpHeaders:add(CharSequence-CharSequence[])),
		EmptyHttpHeaders:addObject(CharSequence-Object) to listOf(EmptyTextHeaders:addObject(CharSequence-Object), EmptyHttpHeaders:addObject(CharSequence-Object)),
		EmptyHttpHeaders:addObject(CharSequence-Iterable) to listOf(EmptyTextHeaders:addObject(CharSequence-Iterable), EmptyHttpHeaders:addObject(CharSequence-Iterable)),
		EmptyHttpHeaders:addObject(CharSequence-Object[]) to listOf(EmptyTextHeaders:addObject(CharSequence-Object[]), EmptyHttpHeaders:addObject(CharSequence-Object[])),
		EmptyHttpHeaders:addBoolean(CharSequence-boolean) to listOf(EmptyTextHeaders:addBoolean(CharSequence-boolean), EmptyHttpHeaders:addBoolean(CharSequence-boolean)),
		EmptyHttpHeaders:addChar(CharSequence-char) to listOf(EmptyTextHeaders:addChar(CharSequence-char), EmptyHttpHeaders:addChar(CharSequence-char)),
		EmptyHttpHeaders:addByte(CharSequence-byte) to listOf(EmptyTextHeaders:addByte(CharSequence-byte), EmptyHttpHeaders:addByte(CharSequence-byte)),
		EmptyHttpHeaders:addShort(CharSequence-short) to listOf(EmptyTextHeaders:addShort(CharSequence-short), EmptyHttpHeaders:addShort(CharSequence-short)),
		EmptyHttpHeaders:addInt(CharSequence-int) to listOf(EmptyTextHeaders:addInt(CharSequence-int), EmptyHttpHeaders:addInt(CharSequence-int)),
		EmptyHttpHeaders:addLong(CharSequence-long) to listOf(EmptyTextHeaders:addLong(CharSequence-long), EmptyHttpHeaders:addLong(CharSequence-long)),
		EmptyHttpHeaders:addFloat(CharSequence-float) to listOf(EmptyTextHeaders:addFloat(CharSequence-float), EmptyHttpHeaders:addFloat(CharSequence-float)),
		EmptyHttpHeaders:addDouble(CharSequence-double) to listOf(EmptyTextHeaders:addDouble(CharSequence-double), EmptyHttpHeaders:addDouble(CharSequence-double)),
		EmptyHttpHeaders:addTimeMillis(CharSequence-long) to listOf(EmptyTextHeaders:addTimeMillis(CharSequence-long), EmptyHttpHeaders:addTimeMillis(CharSequence-long)),
		EmptyHttpHeaders:add(TextHeaders) to listOf(EmptyTextHeaders:add(TextHeaders), EmptyHttpHeaders:add(TextHeaders)),
		EmptyHttpHeaders:set(CharSequence-CharSequence) to listOf(EmptyTextHeaders:set(CharSequence-CharSequence), EmptyHttpHeaders:set(CharSequence-CharSequence)),
		EmptyHttpHeaders:set(CharSequence-Iterable) to listOf(EmptyTextHeaders:set(CharSequence-Iterable), EmptyHttpHeaders:set(CharSequence-Iterable)),
		EmptyHttpHeaders:set(CharSequence-CharSequence[]) to listOf(EmptyTextHeaders:set(CharSequence-CharSequence[]), EmptyHttpHeaders:set(CharSequence-CharSequence[])),
		EmptyHttpHeaders:setObject(CharSequence-Object) to listOf(EmptyTextHeaders:setObject(CharSequence-Object), EmptyHttpHeaders:setObject(CharSequence-Object)),
		EmptyHttpHeaders:setObject(CharSequence-Iterable) to listOf(EmptyTextHeaders:setObject(CharSequence-Iterable), EmptyHttpHeaders:setObject(CharSequence-Iterable)),
		EmptyHttpHeaders:setObject(CharSequence-Object[]) to listOf(EmptyTextHeaders:setObject(CharSequence-Object[]), EmptyHttpHeaders:setObject(CharSequence-Object[])),
		EmptyHttpHeaders:setBoolean(CharSequence-boolean) to listOf(EmptyTextHeaders:setBoolean(CharSequence-boolean), EmptyHttpHeaders:setBoolean(CharSequence-boolean)),
		EmptyHttpHeaders:setChar(CharSequence-char) to listOf(EmptyTextHeaders:setChar(CharSequence-char), EmptyHttpHeaders:setChar(CharSequence-char)),
		EmptyHttpHeaders:setByte(CharSequence-byte) to listOf(EmptyTextHeaders:setByte(CharSequence-byte), EmptyHttpHeaders:setByte(CharSequence-byte)),
		EmptyHttpHeaders:setShort(CharSequence-short) to listOf(EmptyTextHeaders:setShort(CharSequence-short), EmptyHttpHeaders:setShort(CharSequence-short)),
		EmptyHttpHeaders:setInt(CharSequence-int) to listOf(EmptyTextHeaders:setInt(CharSequence-int), EmptyHttpHeaders:setInt(CharSequence-int)),
		EmptyHttpHeaders:setLong(CharSequence-long) to listOf(EmptyTextHeaders:setLong(CharSequence-long), EmptyHttpHeaders:setLong(CharSequence-long)),
		EmptyHttpHeaders:setFloat(CharSequence-float) to listOf(EmptyTextHeaders:setFloat(CharSequence-float), EmptyHttpHeaders:setFloat(CharSequence-float)),
		EmptyHttpHeaders:setDouble(CharSequence-double) to listOf(EmptyTextHeaders:setDouble(CharSequence-double), EmptyHttpHeaders:setDouble(CharSequence-double)),
		EmptyHttpHeaders:setTimeMillis(CharSequence-long) to listOf(EmptyTextHeaders:setTimeMillis(CharSequence-long), EmptyHttpHeaders:setTimeMillis(CharSequence-long)),
		EmptyHttpHeaders:set(TextHeaders) to listOf(EmptyTextHeaders:set(TextHeaders), EmptyHttpHeaders:set(TextHeaders)),
		EmptyHttpHeaders:setAll(TextHeaders) to listOf(EmptyTextHeaders:setAll(TextHeaders), EmptyHttpHeaders:setAll(TextHeaders)),
		EmptyHttpHeaders:clear() to listOf(EmptyTextHeaders:clear(), EmptyHttpHeaders:clear(), EmptyHttpHeaders:clear()),
		EmptyHttpHeaders:setTimeMillis(Object-long) to listOf(EmptyHttpHeaders:setTimeMillis(CharSequence-long)),
		EmptyHttpHeaders:setDouble(Object-double) to listOf(EmptyHttpHeaders:setDouble(CharSequence-double)),
		EmptyHttpHeaders:setFloat(Object-float) to listOf(EmptyHttpHeaders:setFloat(CharSequence-float)),
		EmptyHttpHeaders:setLong(Object-long) to listOf(EmptyHttpHeaders:setLong(CharSequence-long)),
		EmptyHttpHeaders:setInt(Object-int) to listOf(EmptyHttpHeaders:setInt(CharSequence-int)),
		EmptyHttpHeaders:setShort(Object-short) to listOf(EmptyHttpHeaders:setShort(CharSequence-short)),
		EmptyHttpHeaders:setChar(Object-char) to listOf(EmptyHttpHeaders:setChar(CharSequence-char)),
		EmptyHttpHeaders:setByte(Object-byte) to listOf(EmptyHttpHeaders:setByte(CharSequence-byte)),
		EmptyHttpHeaders:setBoolean(Object-boolean) to listOf(EmptyHttpHeaders:setBoolean(CharSequence-boolean)),
		EmptyHttpHeaders:setObject(Object-Object[]) to listOf(EmptyHttpHeaders:setObject(CharSequence-Object[])),
		EmptyHttpHeaders:setObject(Object-Iterable) to listOf(EmptyHttpHeaders:setObject(CharSequence-Iterable)),
		EmptyHttpHeaders:setObject(Object-Object) to listOf(EmptyHttpHeaders:setObject(CharSequence-Object)),
		EmptyHttpHeaders:set(Object-Object[]) to listOf(EmptyHttpHeaders:set(CharSequence-CharSequence[])),
		EmptyHttpHeaders:set(Object-Iterable) to listOf(EmptyHttpHeaders:set(CharSequence-Iterable)),
		EmptyHttpHeaders:set(Object-Object) to listOf(EmptyHttpHeaders:set(CharSequence-CharSequence)),
		EmptyHttpHeaders:addTimeMillis(Object-long) to listOf(EmptyHttpHeaders:addTimeMillis(CharSequence-long)),
		EmptyHttpHeaders:addDouble(Object-double) to listOf(EmptyHttpHeaders:addDouble(CharSequence-double)),
		EmptyHttpHeaders:addFloat(Object-float) to listOf(EmptyHttpHeaders:addFloat(CharSequence-float)),
		EmptyHttpHeaders:addLong(Object-long) to listOf(EmptyHttpHeaders:addLong(CharSequence-long)),
		EmptyHttpHeaders:addInt(Object-int) to listOf(EmptyHttpHeaders:addInt(CharSequence-int)),
		EmptyHttpHeaders:addShort(Object-short) to listOf(EmptyHttpHeaders:addShort(CharSequence-short)),
		EmptyHttpHeaders:addChar(Object-char) to listOf(EmptyHttpHeaders:addChar(CharSequence-char)),
		EmptyHttpHeaders:addByte(Object-byte) to listOf(EmptyHttpHeaders:addByte(CharSequence-byte)),
		EmptyHttpHeaders:addBoolean(Object-boolean) to listOf(EmptyHttpHeaders:addBoolean(CharSequence-boolean)),
		EmptyHttpHeaders:addObject(Object-Object[]) to listOf(EmptyHttpHeaders:addObject(CharSequence-Object[])),
		EmptyHttpHeaders:addObject(Object-Iterable) to listOf(EmptyHttpHeaders:addObject(CharSequence-Iterable)),
		EmptyHttpHeaders:addObject(Object-Object) to listOf(EmptyHttpHeaders:addObject(CharSequence-Object)),
		EmptyHttpHeaders:add(Object-Object[]) to listOf(EmptyHttpHeaders:add(CharSequence-CharSequence[])),
		EmptyHttpHeaders:add(Object-Iterable) to listOf(EmptyHttpHeaders:add(CharSequence-Iterable)),
		EmptyHttpHeaders:add(Object-Object) to listOf(EmptyHttpHeaders:add(CharSequence-CharSequence)),
		EmptyHttpHeaders:<clinit>() to listOf(EmptyHttpHeaders:<init>()),
		HttpClientCodec$Decoder:<init>(HttpClientCodec-int-int-int-boolean) to listOf(HttpResponseDecoder:<init>(int-int-int-boolean)),
		HttpClientCodec$Decoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(HttpClientCodec:access$100(HttpClientCodec), HttpClientCodec$Decoder:actualReadableBytes(), ByteBuf:readBytes(int), HttpResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), HttpClientCodec:access$300(HttpClientCodec), HttpClientCodec$Decoder:decrement(Object)),
		HttpClientCodec$Decoder:decrement(Object) to listOf(HttpClientCodec:access$400(HttpClientCodec)),
		HttpClientCodec$Decoder:isContentAlwaysEmpty(HttpMessage) to listOf(HttpResponse:status(), HttpResponseStatus:code(), HttpClientCodec:access$200(HttpClientCodec), HttpMethod:name(), AsciiString:charAt(int), HttpMethod:equals(Object), HttpMethod:equals(Object), HttpClientCodec:access$102(HttpClientCodec-boolean), HttpClientCodec:access$200(HttpClientCodec), HttpResponseDecoder:isContentAlwaysEmpty(HttpMessage)),
		HttpClientCodec$Decoder:channelInactive(ChannelHandlerContext) to listOf(HttpResponseDecoder:channelInactive(ChannelHandlerContext), HttpClientCodec:access$300(HttpClientCodec), HttpClientCodec:access$400(HttpClientCodec), PrematureChannelClosureException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		HttpObjectAggregator:<init>(int) to listOf(MessageAggregator:<init>(int)),
		HttpObjectAggregator:hasContentLength(HttpMessage) to listOf(HttpHeaderUtil:isContentLengthSet(HttpMessage)),
		HttpObjectAggregator:contentLength(HttpMessage) to listOf(HttpHeaderUtil:getContentLength(HttpMessage)),
		HttpObjectAggregator:newContinueResponse(HttpMessage) to listOf(HttpHeaderUtil:is100ContinueExpected(HttpMessage)),
		HttpObjectAggregator:beginAggregation(HttpMessage-ByteBuf) to listOf(HttpHeaderUtil:setTransferEncodingChunked(HttpMessage-boolean), HttpObjectAggregator$AggregatedFullHttpRequest:<init>(HttpRequest-ByteBuf-HttpHeaders), HttpObjectAggregator$AggregatedFullHttpResponse:<init>(HttpResponse-ByteBuf-HttpHeaders)),
		HttpObjectAggregator:aggregate(FullHttpMessage-HttpContent) to listOf(LastHttpContent:trailingHeaders(), HttpObjectAggregator$AggregatedFullHttpMessage:setTrailingHeaders(HttpHeaders)),
		HttpObjectAggregator:finishAggregation(FullHttpMessage) to listOf(HttpHeaderUtil:isContentLengthSet(HttpMessage), FullHttpMessage:headers(), FullHttpMessage:content(), ByteBuf:readableBytes(), HttpHeaders:set(CharSequence-CharSequence)),
		HttpObjectAggregator:handleOversizedMessage(ChannelHandlerContext-HttpMessage) to listOf(ChannelHandlerContext:writeAndFlush(Object), HttpObjectAggregator$1:<init>(HttpObjectAggregator-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener), HttpHeaderUtil:is100ContinueExpected(HttpMessage), HttpHeaderUtil:isKeepAlive(HttpMessage), ChannelFuture:addListener(GenericFutureListener), ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), HttpObjectDecoder:reset(), ChannelHandlerContext:close(), TooLongFrameException:<init>(String)),
		HttpObjectAggregator:handleOversizedMessage(ChannelHandlerContext-Object) to listOf(HttpObjectAggregator:handleOversizedMessage(ChannelHandlerContext-HttpMessage)),
		HttpObjectAggregator:finishAggregation(ByteBufHolder) to listOf(HttpObjectAggregator:finishAggregation(FullHttpMessage)),
		HttpObjectAggregator:aggregate(ByteBufHolder-ByteBufHolder) to listOf(HttpObjectAggregator:aggregate(FullHttpMessage-HttpContent)),
		HttpObjectAggregator:beginAggregation(Object-ByteBuf) to listOf(HttpObjectAggregator:beginAggregation(HttpMessage-ByteBuf)),
		HttpObjectAggregator:newContinueResponse(Object) to listOf(HttpObjectAggregator:newContinueResponse(HttpMessage)),
		HttpObjectAggregator:contentLength(Object) to listOf(HttpObjectAggregator:contentLength(HttpMessage)),
		HttpObjectAggregator:hasContentLength(Object) to listOf(HttpObjectAggregator:hasContentLength(HttpMessage)),
		HttpObjectAggregator:isAggregated(Object) to listOf(HttpObjectAggregator:isAggregated(HttpObject)),
		HttpObjectAggregator:isLastContentMessage(ByteBufHolder) to listOf(HttpObjectAggregator:isLastContentMessage(HttpContent)),
		HttpObjectAggregator:isContentMessage(Object) to listOf(HttpObjectAggregator:isContentMessage(HttpObject)),
		HttpObjectAggregator:isStartMessage(Object) to listOf(HttpObjectAggregator:isStartMessage(HttpObject)),
		HttpObjectAggregator:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), FullHttpResponse:headers(), HttpHeaders:setInt(CharSequence-int)),
		HttpResponseDecoder:<init>() to listOf(HttpObjectDecoder:<init>()),
		HttpResponseDecoder:<init>(int-int-int) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		HttpResponseDecoder:<init>(int-int-int-boolean) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean-boolean)),
		HttpResponseDecoder:createMessage(String[]) to listOf(HttpVersion:valueOf(String), HttpResponseStatus:<init>(int-String), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean)),
		HttpResponseDecoder:createInvalidMessage() to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean)),
		HttpResponseDecoder:<clinit>() to listOf(HttpResponseStatus:<init>(int-String)),
		HttpServerUpgradeHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), HttpServerUpgradeHandler:access$100(HttpServerUpgradeHandler), HttpServerUpgradeHandler$SourceCodec:upgradeFrom(ChannelHandlerContext), HttpServerUpgradeHandler$UpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpRequest-FullHttpResponse), HttpServerUpgradeHandler$UpgradeEvent:retain(), ChannelHandlerContext:fireUserEventTriggered(Object), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelFuture:channel(), Channel:close(), HttpServerUpgradeHandler$UpgradeEvent:release(), HttpServerUpgradeHandler$UpgradeEvent:release()),
		HttpServerUpgradeHandler$1:operationComplete(Future) to listOf(HttpServerUpgradeHandler$1:operationComplete(ChannelFuture)),
		HttpMethod:valueOf(String) to listOf(HttpMethod:<init>(String)),
		HttpMethod:<init>(String) to listOf(AsciiString:<init>(CharSequence)),
		HttpMethod:hashCode() to listOf(HttpMethod:name(), AsciiString:hashCode()),
		HttpMethod:equals(Object) to listOf(HttpMethod:name(), HttpMethod:name(), AsciiString:equals(Object)),
		HttpMethod:compareTo(HttpMethod) to listOf(HttpMethod:name(), HttpMethod:name(), AsciiString:compareTo(CharSequence)),
		HttpMethod:compareTo(Object) to listOf(HttpMethod:compareTo(HttpMethod)),
		HttpMethod:<clinit>() to listOf(HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString()),
		HttpRequestEncoder:<init>() to listOf(HttpObjectEncoder:<init>()),
		HttpRequestEncoder:acceptOutboundMessage(Object) to listOf(HttpObjectEncoder:acceptOutboundMessage(Object)),
		HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest) to listOf(HttpRequest:method(), HttpMethod:name(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeByte(int), HttpRequest:uri(), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), HttpRequest:protocolVersion(), HttpVersion:text(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeBytes(byte[])),
		HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest)),
		HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:<init>() to listOf(HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:setTimeZone(TimeZone)),
		LastHttpContent$1:touch(Object) to listOf(LastHttpContent$1:touch(Object), LastHttpContent$1:touch(Object), LastHttpContent$1:touch(Object)),
		LastHttpContent$1:touch() to listOf(LastHttpContent$1:touch(), LastHttpContent$1:touch(), LastHttpContent$1:touch()),
		LastHttpContent$1:retain(int) to listOf(LastHttpContent$1:retain(int), LastHttpContent$1:retain(int), LastHttpContent$1:retain(int)),
		LastHttpContent$1:retain() to listOf(LastHttpContent$1:retain(), LastHttpContent$1:retain(), LastHttpContent$1:retain()),
		LastHttpContent$1:duplicate() to listOf(LastHttpContent$1:duplicate(), LastHttpContent$1:duplicate()),
		LastHttpContent$1:copy() to listOf(LastHttpContent$1:copy(), LastHttpContent$1:copy()),
		DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus) to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean)),
		DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean) to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean)),
		DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean) to listOf(DefaultHttpMessage:<init>(HttpVersion-boolean-boolean)),
		DefaultHttpResponse:setProtocolVersion(HttpVersion) to listOf(DefaultHttpMessage:setProtocolVersion(HttpVersion), DefaultHttpResponse:setProtocolVersion(HttpVersion)),
		DefaultHttpResponse:hashCode() to listOf(HttpResponseStatus:hashCode(), DefaultHttpMessage:hashCode()),
		DefaultHttpResponse:equals(Object) to listOf(DefaultHttpResponse:status(), DefaultHttpResponse:status(), HttpResponseStatus:equals(Object), DefaultHttpMessage:equals(Object)),
		DefaultHttpResponse:toString() to listOf(HttpMessageUtil:appendResponse(StringBuilder-HttpResponse)),
		DefaultHttpContent:<init>(ByteBuf) to listOf(DefaultHttpObject:<init>()),
		DefaultHttpContent:copy() to listOf(ByteBuf:copy(), DefaultHttpContent:<init>(ByteBuf), DefaultHttpContent:copy()),
		DefaultHttpContent:duplicate() to listOf(ByteBuf:duplicate(), DefaultHttpContent:<init>(ByteBuf), DefaultHttpContent:duplicate()),
		DefaultHttpContent:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultHttpContent:retain() to listOf(ByteBuf:retain(), DefaultHttpContent:retain(), DefaultHttpContent:retain()),
		DefaultHttpContent:retain(int) to listOf(ByteBuf:retain(int), DefaultHttpContent:retain(int), DefaultHttpContent:retain(int)),
		DefaultHttpContent:touch() to listOf(ByteBuf:touch(), DefaultHttpContent:touch(), DefaultHttpContent:touch()),
		DefaultHttpContent:touch(Object) to listOf(ByteBuf:touch(Object), DefaultHttpContent:touch(Object), DefaultHttpContent:touch(Object)),
		DefaultHttpContent:release() to listOf(ByteBuf:release()),
		DefaultHttpContent:release(int) to listOf(ByteBuf:release(int)),
		DefaultHttpContent:toString() to listOf(StringUtil:simpleClassName(Object), DefaultHttpContent:content(), DefaultHttpContent:decoderResult()),
		DefaultHttpHeaders:<init>() to listOf(DefaultHttpHeaders:<init>(boolean)),
		DefaultHttpHeaders:<init>(boolean) to listOf(DefaultHttpHeaders:<init>(boolean-DefaultHeaders$NameConverter-boolean)),
		DefaultHttpHeaders:<init>(boolean-boolean) to listOf(DefaultHttpHeaders:<init>(boolean-DefaultHeaders$NameConverter-boolean)),
		DefaultHttpHeaders:<init>(boolean-DefaultHeaders$NameConverter-boolean) to listOf(DefaultTextHeaders:<init>(boolean-Headers$ValueConverter-DefaultHeaders$NameConverter-boolean)),
		DefaultHttpHeaders:add(CharSequence-CharSequence) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence), DefaultHttpHeaders:add(CharSequence-CharSequence)),
		DefaultHttpHeaders:add(CharSequence-Iterable) to listOf(DefaultTextHeaders:add(CharSequence-Iterable), DefaultHttpHeaders:add(CharSequence-Iterable)),
		DefaultHttpHeaders:add(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence[]), DefaultHttpHeaders:add(CharSequence-CharSequence[])),
		DefaultHttpHeaders:addObject(CharSequence-Object) to listOf(DefaultTextHeaders:addObject(CharSequence-Object), DefaultHttpHeaders:addObject(CharSequence-Object)),
		DefaultHttpHeaders:addObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:addObject(CharSequence-Iterable), DefaultHttpHeaders:addObject(CharSequence-Iterable)),
		DefaultHttpHeaders:addObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:addObject(CharSequence-Object[]), DefaultHttpHeaders:addObject(CharSequence-Object[])),
		DefaultHttpHeaders:addBoolean(CharSequence-boolean) to listOf(DefaultTextHeaders:addBoolean(CharSequence-boolean), DefaultHttpHeaders:addBoolean(CharSequence-boolean)),
		DefaultHttpHeaders:addChar(CharSequence-char) to listOf(DefaultTextHeaders:addChar(CharSequence-char), DefaultHttpHeaders:addChar(CharSequence-char)),
		DefaultHttpHeaders:addByte(CharSequence-byte) to listOf(DefaultTextHeaders:addByte(CharSequence-byte), DefaultHttpHeaders:addByte(CharSequence-byte)),
		DefaultHttpHeaders:addShort(CharSequence-short) to listOf(DefaultTextHeaders:addShort(CharSequence-short), DefaultHttpHeaders:addShort(CharSequence-short)),
		DefaultHttpHeaders:addInt(CharSequence-int) to listOf(DefaultTextHeaders:addInt(CharSequence-int), DefaultHttpHeaders:addInt(CharSequence-int)),
		DefaultHttpHeaders:addLong(CharSequence-long) to listOf(DefaultTextHeaders:addLong(CharSequence-long), DefaultHttpHeaders:addLong(CharSequence-long)),
		DefaultHttpHeaders:addFloat(CharSequence-float) to listOf(DefaultTextHeaders:addFloat(CharSequence-float), DefaultHttpHeaders:addFloat(CharSequence-float)),
		DefaultHttpHeaders:addDouble(CharSequence-double) to listOf(DefaultTextHeaders:addDouble(CharSequence-double), DefaultHttpHeaders:addDouble(CharSequence-double)),
		DefaultHttpHeaders:addTimeMillis(CharSequence-long) to listOf(DefaultTextHeaders:addTimeMillis(CharSequence-long), DefaultHttpHeaders:addTimeMillis(CharSequence-long)),
		DefaultHttpHeaders:add(TextHeaders) to listOf(DefaultTextHeaders:add(TextHeaders), DefaultHttpHeaders:add(TextHeaders)),
		DefaultHttpHeaders:set(CharSequence-CharSequence) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence), DefaultHttpHeaders:set(CharSequence-CharSequence)),
		DefaultHttpHeaders:set(CharSequence-Iterable) to listOf(DefaultTextHeaders:set(CharSequence-Iterable), DefaultHttpHeaders:set(CharSequence-Iterable)),
		DefaultHttpHeaders:set(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence[]), DefaultHttpHeaders:set(CharSequence-CharSequence[])),
		DefaultHttpHeaders:setObject(CharSequence-Object) to listOf(DefaultTextHeaders:setObject(CharSequence-Object), DefaultHttpHeaders:setObject(CharSequence-Object)),
		DefaultHttpHeaders:setObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:setObject(CharSequence-Iterable), DefaultHttpHeaders:setObject(CharSequence-Iterable)),
		DefaultHttpHeaders:setObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:setObject(CharSequence-Object[]), DefaultHttpHeaders:setObject(CharSequence-Object[])),
		DefaultHttpHeaders:setBoolean(CharSequence-boolean) to listOf(DefaultTextHeaders:setBoolean(CharSequence-boolean), DefaultHttpHeaders:setBoolean(CharSequence-boolean)),
		DefaultHttpHeaders:setChar(CharSequence-char) to listOf(DefaultTextHeaders:setChar(CharSequence-char), DefaultHttpHeaders:setChar(CharSequence-char)),
		DefaultHttpHeaders:setByte(CharSequence-byte) to listOf(DefaultTextHeaders:setByte(CharSequence-byte), DefaultHttpHeaders:setByte(CharSequence-byte)),
		DefaultHttpHeaders:setShort(CharSequence-short) to listOf(DefaultTextHeaders:setShort(CharSequence-short), DefaultHttpHeaders:setShort(CharSequence-short)),
		DefaultHttpHeaders:setInt(CharSequence-int) to listOf(DefaultTextHeaders:setInt(CharSequence-int), DefaultHttpHeaders:setInt(CharSequence-int)),
		DefaultHttpHeaders:setLong(CharSequence-long) to listOf(DefaultTextHeaders:setLong(CharSequence-long), DefaultHttpHeaders:setLong(CharSequence-long)),
		DefaultHttpHeaders:setFloat(CharSequence-float) to listOf(DefaultTextHeaders:setFloat(CharSequence-float), DefaultHttpHeaders:setFloat(CharSequence-float)),
		DefaultHttpHeaders:setDouble(CharSequence-double) to listOf(DefaultTextHeaders:setDouble(CharSequence-double), DefaultHttpHeaders:setDouble(CharSequence-double)),
		DefaultHttpHeaders:setTimeMillis(CharSequence-long) to listOf(DefaultTextHeaders:setTimeMillis(CharSequence-long), DefaultHttpHeaders:setTimeMillis(CharSequence-long)),
		DefaultHttpHeaders:set(TextHeaders) to listOf(DefaultTextHeaders:set(TextHeaders), DefaultHttpHeaders:set(TextHeaders)),
		DefaultHttpHeaders:setAll(TextHeaders) to listOf(DefaultTextHeaders:setAll(TextHeaders), DefaultHttpHeaders:setAll(TextHeaders)),
		DefaultHttpHeaders:clear() to listOf(DefaultTextHeaders:clear(), DefaultHttpHeaders:clear(), DefaultHttpHeaders:clear()),
		DefaultHttpHeaders:setTimeMillis(Object-long) to listOf(DefaultHttpHeaders:setTimeMillis(CharSequence-long)),
		DefaultHttpHeaders:setDouble(Object-double) to listOf(DefaultHttpHeaders:setDouble(CharSequence-double)),
		DefaultHttpHeaders:setFloat(Object-float) to listOf(DefaultHttpHeaders:setFloat(CharSequence-float)),
		DefaultHttpHeaders:setLong(Object-long) to listOf(DefaultHttpHeaders:setLong(CharSequence-long)),
		DefaultHttpHeaders:setInt(Object-int) to listOf(DefaultHttpHeaders:setInt(CharSequence-int)),
		DefaultHttpHeaders:setShort(Object-short) to listOf(DefaultHttpHeaders:setShort(CharSequence-short)),
		DefaultHttpHeaders:setChar(Object-char) to listOf(DefaultHttpHeaders:setChar(CharSequence-char)),
		DefaultHttpHeaders:setByte(Object-byte) to listOf(DefaultHttpHeaders:setByte(CharSequence-byte)),
		DefaultHttpHeaders:setBoolean(Object-boolean) to listOf(DefaultHttpHeaders:setBoolean(CharSequence-boolean)),
		DefaultHttpHeaders:setObject(Object-Object[]) to listOf(DefaultHttpHeaders:setObject(CharSequence-Object[])),
		DefaultHttpHeaders:setObject(Object-Iterable) to listOf(DefaultHttpHeaders:setObject(CharSequence-Iterable)),
		DefaultHttpHeaders:setObject(Object-Object) to listOf(DefaultHttpHeaders:setObject(CharSequence-Object)),
		DefaultHttpHeaders:set(Object-Object[]) to listOf(DefaultHttpHeaders:set(CharSequence-CharSequence[])),
		DefaultHttpHeaders:set(Object-Iterable) to listOf(DefaultHttpHeaders:set(CharSequence-Iterable)),
		DefaultHttpHeaders:set(Object-Object) to listOf(DefaultHttpHeaders:set(CharSequence-CharSequence)),
		DefaultHttpHeaders:addTimeMillis(Object-long) to listOf(DefaultHttpHeaders:addTimeMillis(CharSequence-long)),
		DefaultHttpHeaders:addDouble(Object-double) to listOf(DefaultHttpHeaders:addDouble(CharSequence-double)),
		DefaultHttpHeaders:addFloat(Object-float) to listOf(DefaultHttpHeaders:addFloat(CharSequence-float)),
		DefaultHttpHeaders:addLong(Object-long) to listOf(DefaultHttpHeaders:addLong(CharSequence-long)),
		DefaultHttpHeaders:addInt(Object-int) to listOf(DefaultHttpHeaders:addInt(CharSequence-int)),
		DefaultHttpHeaders:addShort(Object-short) to listOf(DefaultHttpHeaders:addShort(CharSequence-short)),
		DefaultHttpHeaders:addChar(Object-char) to listOf(DefaultHttpHeaders:addChar(CharSequence-char)),
		DefaultHttpHeaders:addByte(Object-byte) to listOf(DefaultHttpHeaders:addByte(CharSequence-byte)),
		DefaultHttpHeaders:addBoolean(Object-boolean) to listOf(DefaultHttpHeaders:addBoolean(CharSequence-boolean)),
		DefaultHttpHeaders:addObject(Object-Object[]) to listOf(DefaultHttpHeaders:addObject(CharSequence-Object[])),
		DefaultHttpHeaders:addObject(Object-Iterable) to listOf(DefaultHttpHeaders:addObject(CharSequence-Iterable)),
		DefaultHttpHeaders:addObject(Object-Object) to listOf(DefaultHttpHeaders:addObject(CharSequence-Object)),
		DefaultHttpHeaders:add(Object-Object[]) to listOf(DefaultHttpHeaders:add(CharSequence-CharSequence[])),
		DefaultHttpHeaders:add(Object-Iterable) to listOf(DefaultHttpHeaders:add(CharSequence-Iterable)),
		DefaultHttpHeaders:add(Object-Object) to listOf(DefaultHttpHeaders:add(CharSequence-CharSequence)),
		DefaultHttpHeaders:<clinit>() to listOf(DefaultHttpHeaders$HttpHeadersValidationConverter:<init>(boolean), DefaultHttpHeaders$HttpHeadersValidationConverter:<init>(boolean), DefaultHttpHeaders$HttpHeadersNameConverter:<init>(boolean), DefaultHttpHeaders$HttpHeadersNameConverter:<init>(boolean)),
		HttpClientCodec:<init>() to listOf(HttpClientCodec:<init>(int-int-int-boolean)),
		HttpClientCodec:<init>(int-int-int) to listOf(HttpClientCodec:<init>(int-int-int-boolean)),
		HttpClientCodec:<init>(int-int-int-boolean) to listOf(HttpClientCodec:<init>(int-int-int-boolean-boolean)),
		HttpClientCodec:<init>(int-int-int-boolean-boolean) to listOf(ChannelHandlerAppender:<init>(), HttpClientCodec$Decoder:<init>(HttpClientCodec-int-int-int-boolean), HttpClientCodec:add(ChannelHandler), HttpClientCodec$Encoder:<init>(HttpClientCodec-HttpClientCodec$1), HttpClientCodec:add(ChannelHandler)),
		HttpClientCodec:upgradeFrom(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(Class), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(Class)),
		HttpClientCodec:encoder() to listOf(HttpClientCodec:handlerAt(int)),
		HttpClientCodec:decoder() to listOf(HttpClientCodec:handlerAt(int)),
		HttpClientCodec:setSingleDecode(boolean) to listOf(HttpClientCodec:decoder(), HttpResponseDecoder:setSingleDecode(boolean)),
		HttpClientCodec:isSingleDecode() to listOf(HttpClientCodec:decoder(), HttpResponseDecoder:isSingleDecode()),
		HttpStatusClass$1:<init>(String-int-int-int-String) to listOf(HttpStatusClass:<init>(String-int-int-int-String-HttpStatusClass$1)),
		LastHttpContent:<clinit>() to listOf(LastHttpContent$1:<init>()),
		DefaultLastHttpContent:<init>() to listOf(Unpooled:buffer(int), DefaultLastHttpContent:<init>(ByteBuf)),
		DefaultLastHttpContent:<init>(ByteBuf) to listOf(DefaultLastHttpContent:<init>(ByteBuf-boolean)),
		DefaultLastHttpContent:<init>(ByteBuf-boolean) to listOf(DefaultHttpContent:<init>(ByteBuf), DefaultLastHttpContent$TrailingHttpHeaders:<init>(boolean)),
		DefaultLastHttpContent:copy() to listOf(DefaultLastHttpContent:content(), ByteBuf:copy(), DefaultLastHttpContent:<init>(ByteBuf-boolean), DefaultLastHttpContent:trailingHeaders(), DefaultLastHttpContent:trailingHeaders(), HttpHeaders:set(TextHeaders), DefaultLastHttpContent:copy(), DefaultLastHttpContent:copy()),
		DefaultLastHttpContent:duplicate() to listOf(DefaultLastHttpContent:content(), ByteBuf:duplicate(), DefaultLastHttpContent:<init>(ByteBuf-boolean), DefaultLastHttpContent:trailingHeaders(), DefaultLastHttpContent:trailingHeaders(), HttpHeaders:set(TextHeaders), DefaultLastHttpContent:duplicate(), DefaultLastHttpContent:duplicate()),
		DefaultLastHttpContent:retain(int) to listOf(DefaultHttpContent:retain(int), DefaultLastHttpContent:retain(int), DefaultLastHttpContent:retain(int), DefaultLastHttpContent:retain(int)),
		DefaultLastHttpContent:retain() to listOf(DefaultHttpContent:retain(), DefaultLastHttpContent:retain(), DefaultLastHttpContent:retain(), DefaultLastHttpContent:retain()),
		DefaultLastHttpContent:touch() to listOf(DefaultHttpContent:touch(), DefaultLastHttpContent:touch(), DefaultLastHttpContent:touch(), DefaultLastHttpContent:touch()),
		DefaultLastHttpContent:touch(Object) to listOf(DefaultHttpContent:touch(Object), DefaultLastHttpContent:touch(Object), DefaultLastHttpContent:touch(Object), DefaultLastHttpContent:touch(Object)),
		DefaultLastHttpContent:toString() to listOf(DefaultHttpContent:toString(), DefaultLastHttpContent:appendHeaders(StringBuilder)),
		DefaultLastHttpContent:appendHeaders(StringBuilder) to listOf(DefaultLastHttpContent:trailingHeaders(), HttpHeaders:iterator()),
		HttpVersion:valueOf(String) to listOf(HttpVersion:version0(String), HttpVersion:<init>(String-boolean)),
		HttpVersion:<init>(String-boolean) to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		HttpVersion:<init>(String-int-int-boolean) to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		HttpVersion:hashCode() to listOf(HttpVersion:protocolName(), AsciiString:hashCode(), HttpVersion:majorVersion(), HttpVersion:minorVersion()),
		HttpVersion:equals(Object) to listOf(HttpVersion:minorVersion(), HttpVersion:minorVersion(), HttpVersion:majorVersion(), HttpVersion:majorVersion(), HttpVersion:protocolName(), HttpVersion:protocolName(), AsciiString:equals(Object)),
		HttpVersion:compareTo(HttpVersion) to listOf(HttpVersion:protocolName(), HttpVersion:protocolName(), AsciiString:compareTo(CharSequence), HttpVersion:majorVersion(), HttpVersion:majorVersion(), HttpVersion:minorVersion(), HttpVersion:minorVersion()),
		HttpVersion:compareTo(Object) to listOf(HttpVersion:compareTo(HttpVersion)),
		HttpVersion:<clinit>() to listOf(HttpVersion:<init>(String-int-int-boolean), HttpVersion:<init>(String-int-int-boolean)),
		DefaultHttpHeaders$HttpHeadersNameConverter:convertName(CharSequence) to listOf(DefaultHttpHeaders$HttpHeadersNameConverter:validateName(AsciiString), DefaultHttpHeaders$HttpHeadersNameConverter:validateName(CharSequence)),
		DefaultHttpHeaders$HttpHeadersNameConverter:validateName(AsciiString) to listOf(AsciiString:arrayOffset(), AsciiString:length(), AsciiString:array(), DefaultHttpHeaders$HttpHeadersNameConverter:validateNameChar(CharSequence-int)),
		DefaultHttpHeaders$HttpHeadersNameConverter:validateName(CharSequence) to listOf(DefaultHttpHeaders$HttpHeadersNameConverter:validateNameChar(CharSequence-int)),
		DefaultHttpHeaders$HttpHeadersNameConverter:validateNameChar(CharSequence-int) to listOf(DefaultHttpHeaders:access$000()),
		DefaultHttpHeaders$HttpHeadersNameConverter:convertName(Object) to listOf(DefaultHttpHeaders$HttpHeadersNameConverter:convertName(CharSequence)),
		HttpRequestDecoder:<init>() to listOf(HttpObjectDecoder:<init>()),
		HttpRequestDecoder:<init>(int-int-int) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		HttpRequestDecoder:<init>(int-int-int-boolean) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean-boolean)),
		HttpRequestDecoder:createMessage(String[]) to listOf(HttpVersion:valueOf(String), HttpMethod:valueOf(String), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean)),
		HttpRequestDecoder:createInvalidMessage() to listOf(DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-boolean)),
		HttpResponseEncoder:<init>() to listOf(HttpObjectEncoder:<init>()),
		HttpResponseEncoder:acceptOutboundMessage(Object) to listOf(HttpObjectEncoder:acceptOutboundMessage(Object)),
		HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse) to listOf(HttpResponse:protocolVersion(), HttpVersion:text(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeByte(int), HttpResponse:status(), HttpResponseStatus:codeAsText(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeByte(int), HttpResponse:status(), HttpResponseStatus:reasonPhrase(), AsciiString:array(), AsciiString:arrayOffset(), AsciiString:length(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeBytes(byte[])),
		HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse)),
		HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion) to listOf(HttpRequest:setProtocolVersion(HttpVersion), HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion)),
		HttpPostRequestEncoder$WrappedHttpRequest:setMethod(HttpMethod) to listOf(HttpRequest:setMethod(HttpMethod)),
		HttpPostRequestEncoder$WrappedHttpRequest:setUri(String) to listOf(HttpRequest:setUri(String)),
		HttpPostRequestEncoder$WrappedHttpRequest:method() to listOf(HttpRequest:method()),
		HttpPostRequestEncoder$WrappedHttpRequest:uri() to listOf(HttpRequest:uri()),
		HttpPostRequestEncoder$WrappedHttpRequest:protocolVersion() to listOf(HttpRequest:protocolVersion()),
		HttpPostRequestEncoder$WrappedHttpRequest:headers() to listOf(HttpRequest:headers()),
		HttpPostRequestEncoder$WrappedHttpRequest:decoderResult() to listOf(HttpRequest:decoderResult()),
		HttpPostRequestEncoder$WrappedHttpRequest:setDecoderResult(DecoderResult) to listOf(HttpRequest:setDecoderResult(DecoderResult)),
		AbstractMemoryHttpData:<init>(String-Charset-long) to listOf(AbstractHttpData:<init>(String-Charset-long)),
		AbstractMemoryHttpData:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), AbstractMemoryHttpData:checkSize(long), ByteBuf:release(), AbstractMemoryHttpData:setCompleted()),
		AbstractMemoryHttpData:setContent(InputStream) to listOf(Unpooled:buffer(), ByteBuf:writeBytes(byte[]-int-int), AbstractMemoryHttpData:checkSize(long), ByteBuf:release(), AbstractMemoryHttpData:setCompleted()),
		AbstractMemoryHttpData:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), AbstractMemoryHttpData:checkSize(long), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int), Unpooled:compositeBuffer(int), CompositeByteBuf:addComponents(ByteBuf[]), ByteBuf:readableBytes(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int), AbstractMemoryHttpData:setCompleted()),
		AbstractMemoryHttpData:setContent(File) to listOf(AbstractMemoryHttpData:checkSize(long), ByteBuf:release(), Unpooled:wrappedBuffer(int-ByteBuffer[]), AbstractMemoryHttpData:setCompleted()),
		AbstractMemoryHttpData:delete() to listOf(ByteBuf:release()),
		AbstractMemoryHttpData:get() to listOf(ByteBuf:array(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[])),
		AbstractMemoryHttpData:getString() to listOf(AbstractMemoryHttpData:getString(Charset)),
		AbstractMemoryHttpData:getString(Charset) to listOf(ByteBuf:toString(Charset)),
		AbstractMemoryHttpData:getChunk(int) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:slice(int-int), ByteBuf:retain()),
		AbstractMemoryHttpData:renameTo(File) to listOf(ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:nioBuffers()),
		AbstractMemoryHttpData:touch() to listOf(AbstractMemoryHttpData:touch(Object), AbstractMemoryHttpData:touch(), AbstractMemoryHttpData:touch(), AbstractMemoryHttpData:touch()),
		AbstractMemoryHttpData:touch(Object) to listOf(ByteBuf:touch(Object), AbstractMemoryHttpData:touch(Object), AbstractMemoryHttpData:touch(Object), AbstractMemoryHttpData:touch(Object)),
		AbstractDiskHttpData:<init>(String-Charset-long) to listOf(AbstractHttpData:<init>(String-Charset-long)),
		AbstractDiskHttpData:tempFile() to listOf(AbstractDiskHttpData:getDiskFilename(), AbstractDiskHttpData:getPostfix(), AbstractDiskHttpData:getBaseDirectory(), AbstractDiskHttpData:getPrefix(), AbstractDiskHttpData:getPrefix(), AbstractDiskHttpData:getBaseDirectory(), AbstractDiskHttpData:deleteOnExit()),
		AbstractDiskHttpData:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), AbstractDiskHttpData:checkSize(long), AbstractDiskHttpData:tempFile(), ByteBuf:readableBytes(), ByteBuf:release(), ByteBuf:nioBuffer(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), AbstractDiskHttpData:setCompleted(), ByteBuf:release(), ByteBuf:release()),
		AbstractDiskHttpData:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), AbstractDiskHttpData:checkSize(long), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:copy(), ByteBuf:nioBuffer(), AbstractDiskHttpData:tempFile(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:release(), ByteBuf:release(), AbstractDiskHttpData:tempFile(), AbstractDiskHttpData:setCompleted()),
		AbstractDiskHttpData:setContent(File) to listOf(AbstractDiskHttpData:delete(), AbstractDiskHttpData:checkSize(long), AbstractDiskHttpData:setCompleted()),
		AbstractDiskHttpData:setContent(InputStream) to listOf(AbstractDiskHttpData:delete(), AbstractDiskHttpData:tempFile(), AbstractDiskHttpData:checkSize(long), InternalLogger:warn(String-Object), AbstractDiskHttpData:setCompleted()),
		AbstractDiskHttpData:delete() to listOf(InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Object)),
		AbstractDiskHttpData:get() to listOf(AbstractDiskHttpData:readFrom(File)),
		AbstractDiskHttpData:getByteBuf() to listOf(AbstractDiskHttpData:readFrom(File), Unpooled:wrappedBuffer(byte[])),
		AbstractDiskHttpData:getChunk(int) to listOf(Unpooled:wrappedBuffer(ByteBuffer), ByteBuf:readerIndex(int), ByteBuf:writerIndex(int)),
		AbstractDiskHttpData:getString() to listOf(AbstractDiskHttpData:getString(Charset)),
		AbstractDiskHttpData:getString(Charset) to listOf(AbstractDiskHttpData:readFrom(File), AbstractDiskHttpData:readFrom(File)),
		AbstractDiskHttpData:renameTo(File) to listOf(InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Object), InternalLogger:warn(String-Object)),
		AbstractDiskHttpData:touch(Object) to listOf(AbstractDiskHttpData:touch(Object), AbstractDiskHttpData:touch(Object), AbstractDiskHttpData:touch(Object)),
		AbstractDiskHttpData:touch() to listOf(AbstractDiskHttpData:touch(), AbstractDiskHttpData:touch(), AbstractDiskHttpData:touch()),
		AbstractDiskHttpData:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		MemoryAttribute:<init>(String) to listOf(MemoryAttribute:<init>(String-Charset)),
		MemoryAttribute:<init>(String-Charset) to listOf(AbstractMemoryHttpData:<init>(String-Charset-long)),
		MemoryAttribute:<init>(String-String) to listOf(MemoryAttribute:<init>(String-String-Charset)),
		MemoryAttribute:<init>(String-String-Charset) to listOf(AbstractMemoryHttpData:<init>(String-Charset-long), MemoryAttribute:setValue(String)),
		MemoryAttribute:getValue() to listOf(MemoryAttribute:getByteBuf(), MemoryAttribute:getCharset(), ByteBuf:toString(Charset)),
		MemoryAttribute:setValue(String) to listOf(MemoryAttribute:getCharset(), MemoryAttribute:checkSize(long), Unpooled:wrappedBuffer(byte[]), ByteBuf:readableBytes(), MemoryAttribute:setContent(ByteBuf)),
		MemoryAttribute:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), MemoryAttribute:checkSize(long), AbstractMemoryHttpData:addContent(ByteBuf-boolean)),
		MemoryAttribute:hashCode() to listOf(MemoryAttribute:getName()),
		MemoryAttribute:equals(Object) to listOf(MemoryAttribute:getName(), Attribute:getName()),
		MemoryAttribute:compareTo(InterfaceHttpData) to listOf(MemoryAttribute:getHttpDataType(), InterfaceHttpData:getHttpDataType(), MemoryAttribute:compareTo(Attribute)),
		MemoryAttribute:compareTo(Attribute) to listOf(MemoryAttribute:getName(), Attribute:getName()),
		MemoryAttribute:toString() to listOf(MemoryAttribute:getName(), MemoryAttribute:getValue()),
		MemoryAttribute:copy() to listOf(MemoryAttribute:getName(), MemoryAttribute:<init>(String), MemoryAttribute:getCharset(), MemoryAttribute:setCharset(Charset), MemoryAttribute:content(), ByteBuf:copy(), MemoryAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryAttribute:copy(), MemoryAttribute:copy()),
		MemoryAttribute:duplicate() to listOf(MemoryAttribute:getName(), MemoryAttribute:<init>(String), MemoryAttribute:getCharset(), MemoryAttribute:setCharset(Charset), MemoryAttribute:content(), ByteBuf:duplicate(), MemoryAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryAttribute:duplicate(), MemoryAttribute:duplicate()),
		MemoryAttribute:retain() to listOf(AbstractMemoryHttpData:retain(), MemoryAttribute:retain(), MemoryAttribute:retain(), MemoryAttribute:retain(), MemoryAttribute:retain()),
		MemoryAttribute:retain(int) to listOf(AbstractMemoryHttpData:retain(int), MemoryAttribute:retain(int), MemoryAttribute:retain(int), MemoryAttribute:retain(int), MemoryAttribute:retain(int)),
		MemoryAttribute:touch() to listOf(AbstractMemoryHttpData:touch(), MemoryAttribute:touch(), MemoryAttribute:touch(), MemoryAttribute:touch(), MemoryAttribute:touch()),
		MemoryAttribute:touch(Object) to listOf(AbstractMemoryHttpData:touch(Object), MemoryAttribute:touch(Object), MemoryAttribute:touch(Object), MemoryAttribute:touch(Object), MemoryAttribute:touch(Object)),
		MemoryAttribute:compareTo(Object) to listOf(MemoryAttribute:compareTo(InterfaceHttpData)),
		HttpPostStandardRequestDecoder:<init>(HttpRequest) to listOf(DefaultHttpDataFactory:<init>(long), HttpPostStandardRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostStandardRequestDecoder:<init>(HttpDataFactory-HttpRequest) to listOf(HttpPostStandardRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostStandardRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset) to listOf(HttpPostStandardRequestDecoder:offer(HttpContent), Unpooled:buffer(), HttpPostStandardRequestDecoder:parseBody()),
		HttpPostStandardRequestDecoder:isMultipart() to listOf(HttpPostStandardRequestDecoder:checkDestroyed()),
		HttpPostStandardRequestDecoder:getBodyHttpDatas() to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostStandardRequestDecoder:getBodyHttpDatas(String) to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostStandardRequestDecoder:getBodyHttpData(String) to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostStandardRequestDecoder:offer(HttpContent) to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpContent:content(), ByteBuf:copy(), ByteBuf:writeBytes(ByteBuf), HttpPostStandardRequestDecoder:parseBody(), ByteBuf:writerIndex(), ByteBuf:discardReadBytes(), HttpPostStandardRequestDecoder:offer(HttpContent)),
		HttpPostStandardRequestDecoder:hasNext() to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$EndOfDataDecoderException:<init>()),
		HttpPostStandardRequestDecoder:next() to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpPostStandardRequestDecoder:hasNext()),
		HttpPostStandardRequestDecoder:parseBody() to listOf(HttpPostStandardRequestDecoder:parseBodyAttributes()),
		HttpPostStandardRequestDecoder:addHttpData(InterfaceHttpData) to listOf(InterfaceHttpData:getName(), InterfaceHttpData:getName()),
		HttpPostStandardRequestDecoder:parseBodyAttributesStandard() to listOf(ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), ByteBuf:toString(int-int-Charset), HttpPostStandardRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), ByteBuf:toString(int-int-Charset), HttpPostStandardRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), Attribute:setValue(String), HttpPostStandardRequestDecoder:addHttpData(InterfaceHttpData), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), Attribute:isCompleted(), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:readerIndex(int), ByteBuf:copy(int-int), Attribute:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostStandardRequestDecoder:parseBodyAttributes() to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostStandardRequestDecoder:parseBodyAttributesStandard(), ByteBuf:readerIndex(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), ByteBuf:toString(int-int-Charset), HttpPostStandardRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), ByteBuf:toString(int-int-Charset), HttpPostStandardRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), Attribute:setValue(String), HttpPostStandardRequestDecoder:addHttpData(InterfaceHttpData), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:copy(int-int), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), Attribute:isCompleted(), HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:readerIndex(int), ByteBuf:copy(int-int), Attribute:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostStandardRequestDecoder:setFinalBuffer(ByteBuf) to listOf(Attribute:addContent(ByteBuf-boolean), Attribute:getByteBuf(), ByteBuf:toString(Charset), HttpPostStandardRequestDecoder:decodeAttribute(String-Charset), Attribute:setValue(String), HttpPostStandardRequestDecoder:addHttpData(InterfaceHttpData)),
		HttpPostStandardRequestDecoder:decodeAttribute(String-Charset) to listOf(QueryStringDecoder:decodeComponent(String-Charset), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String-Throwable)),
		HttpPostStandardRequestDecoder:skipControlCharacters() to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostStandardRequestDecoder:skipControlCharactersStandard(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String)),
		HttpPostStandardRequestDecoder:skipControlCharactersStandard() to listOf(ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		HttpPostStandardRequestDecoder:destroy() to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpPostStandardRequestDecoder:cleanFiles(), ByteBuf:refCnt(), ByteBuf:release(), InterfaceHttpData:release()),
		HttpPostStandardRequestDecoder:cleanFiles() to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpDataFactory:cleanRequestHttpData(HttpRequest)),
		HttpPostStandardRequestDecoder:removeHttpDataFromClean(InterfaceHttpData) to listOf(HttpPostStandardRequestDecoder:checkDestroyed(), HttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData)),
		HttpPostMultipartRequestDecoder:<init>(HttpRequest) to listOf(DefaultHttpDataFactory:<init>(long), HttpPostMultipartRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostMultipartRequestDecoder:<init>(HttpDataFactory-HttpRequest) to listOf(HttpPostMultipartRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostMultipartRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset) to listOf(HttpRequest:headers(), HttpHeaders:getAndConvert(Object), HttpPostMultipartRequestDecoder:setMultipart(String), HttpPostMultipartRequestDecoder:offer(HttpContent), Unpooled:buffer(), HttpPostMultipartRequestDecoder:parseBody()),
		HttpPostMultipartRequestDecoder:setMultipart(String) to listOf(HttpPostRequestDecoder:getMultipartDataBoundary(String)),
		HttpPostMultipartRequestDecoder:isMultipart() to listOf(HttpPostMultipartRequestDecoder:checkDestroyed()),
		HttpPostMultipartRequestDecoder:getBodyHttpDatas() to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:getBodyHttpDatas(String) to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:getBodyHttpData(String) to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:offer(HttpContent) to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpContent:content(), ByteBuf:copy(), ByteBuf:writeBytes(ByteBuf), HttpPostMultipartRequestDecoder:parseBody(), ByteBuf:writerIndex(), ByteBuf:discardReadBytes(), HttpPostMultipartRequestDecoder:offer(HttpContent)),
		HttpPostMultipartRequestDecoder:hasNext() to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$EndOfDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:next() to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpPostMultipartRequestDecoder:hasNext()),
		HttpPostMultipartRequestDecoder:parseBody() to listOf(HttpPostMultipartRequestDecoder:parseBodyMultipart()),
		HttpPostMultipartRequestDecoder:addHttpData(InterfaceHttpData) to listOf(InterfaceHttpData:getName(), InterfaceHttpData:getName()),
		HttpPostMultipartRequestDecoder:parseBodyMultipart() to listOf(ByteBuf:readableBytes(), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostMultipartRequestDecoder:addHttpData(InterfaceHttpData), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus)),
		HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus) to listOf(HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostMultipartRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus), HttpPostMultipartRequestDecoder:findMultipartDisposition(), Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getValue(), HttpPostMultipartRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:setCharset(Charset), HttpPostMultipartRequestDecoder:loadFieldMultipart(String), HttpPostMultipartRequestDecoder:getFileUpload(String), HttpPostMultipartRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus), HttpPostMultipartRequestDecoder:findMultipartDisposition(), HttpPostMultipartRequestDecoder:getFileUpload(String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String)),
		HttpPostMultipartRequestDecoder:skipControlCharacters() to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostMultipartRequestDecoder:skipControlCharactersStandard(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String)),
		HttpPostMultipartRequestDecoder:skipControlCharactersStandard() to listOf(ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		HttpPostMultipartRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus) to listOf(ByteBuf:readerIndex(), HttpPostMultipartRequestDecoder:skipControlCharacters(), ByteBuf:readerIndex(int), HttpPostMultipartRequestDecoder:skipOneLine(), HttpPostMultipartRequestDecoder:readDelimiter(String), ByteBuf:readerIndex(int), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String)),
		HttpPostMultipartRequestDecoder:findMultipartDisposition() to listOf(ByteBuf:readerIndex(), HttpPostMultipartRequestDecoder:skipOneLine(), HttpPostMultipartRequestDecoder:skipControlCharacters(), HttpPostMultipartRequestDecoder:readLine(), ByteBuf:readerIndex(int), HttpPostMultipartRequestDecoder:splitMultipartHeader(String), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), StringUtil:split(String-char-int), HttpPostMultipartRequestDecoder:cleanString(String), AsciiString:contentEquals(CharSequence), HttpPostMultipartRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getName(), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:toString(), HttpPostMultipartRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), AsciiString:toString(), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:toString(), HttpPostMultipartRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), AsciiString:toString(), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), StringUtil:substringAfter(String-char), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), AsciiString:toString(), StringUtil:substringAfter(String-char), AsciiString:toString(), HttpPostMultipartRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), AsciiString:toString(), HttpPostMultipartRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getName(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostMultipartRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String)),
		HttpPostMultipartRequestDecoder:getFileUpload(String) to listOf(AsciiString:toString(), Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), AsciiString:toString(), Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getValue(), HttpPostMultipartRequestDecoder:cleanString(String), Attribute:getValue(), HttpPostMultipartRequestDecoder:cleanString(String), Attribute:getValue(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostMultipartRequestDecoder:readFileUploadByteMultipart(String), FileUpload:isCompleted(), HttpPostMultipartRequestDecoder:cleanMixedAttributes()),
		HttpPostMultipartRequestDecoder:destroy() to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpPostMultipartRequestDecoder:cleanFiles(), ByteBuf:refCnt(), ByteBuf:release(), InterfaceHttpData:release()),
		HttpPostMultipartRequestDecoder:cleanFiles() to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpDataFactory:cleanRequestHttpData(HttpRequest)),
		HttpPostMultipartRequestDecoder:removeHttpDataFromClean(InterfaceHttpData) to listOf(HttpPostMultipartRequestDecoder:checkDestroyed(), HttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData)),
		HttpPostMultipartRequestDecoder:readLineStandard() to listOf(ByteBuf:readerIndex(), Unpooled:buffer(int), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readByte(), ByteBuf:toString(Charset), ByteBuf:writeByte(int), ByteBuf:toString(Charset), ByteBuf:writeByte(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:readLine() to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostMultipartRequestDecoder:readLineStandard(), ByteBuf:readerIndex(), Unpooled:buffer(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:toString(Charset), ByteBuf:writeByte(int), ByteBuf:writeByte(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:toString(Charset), ByteBuf:writeByte(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:readDelimiterStandard(String) to listOf(ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:readDelimiter(String) to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostMultipartRequestDecoder:readDelimiterStandard(String), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostMultipartRequestDecoder:readFileUploadByteMultipartStandard(String) to listOf(ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:copy(int-int), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostMultipartRequestDecoder:readFileUploadByteMultipart(String) to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostMultipartRequestDecoder:readFileUploadByteMultipartStandard(String), ByteBuf:readerIndex(), HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), ByteBuf:copy(int-int), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostMultipartRequestDecoder:loadFieldMultipartStandard(String) to listOf(ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:copy(int-int), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), ByteBuf:copy(int-int), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable)),
		HttpPostMultipartRequestDecoder:loadFieldMultipart(String) to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostMultipartRequestDecoder:loadFieldMultipartStandard(String), ByteBuf:readerIndex(), HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), ByteBuf:copy(int-int), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), ByteBuf:copy(int-int), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable)),
		HttpPostMultipartRequestDecoder:skipOneLine() to listOf(ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		HttpPostMultipartRequestDecoder:splitMultipartHeader(String) to listOf(HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findEndOfString(String), HttpPostMultipartRequestDecoder:splitMultipartHeaderValues(String), StringUtil:split(String-char)),
		HttpPostRequestDecoder$MultiPartStatus:values() to listOf(HttpPostRequestDecoder$MultiPartStatus[]:clone()),
		HttpPostRequestDecoder$MultiPartStatus:<clinit>() to listOf(HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int)),
		HttpPostRequestDecoder:<init>(HttpRequest) to listOf(DefaultHttpDataFactory:<init>(long), HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest) to listOf(HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset) to listOf(HttpPostRequestDecoder:isMultipart(HttpRequest), HttpPostMultipartRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset), HttpPostStandardRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostRequestDecoder:isMultipart(HttpRequest) to listOf(HttpRequest:headers(), HttpHeaders:contains(Object), HttpRequest:headers(), HttpHeaders:getAndConvert(Object), HttpPostRequestDecoder:getMultipartDataBoundary(String)),
		HttpPostRequestDecoder:getMultipartDataBoundary(String) to listOf(HttpPostRequestDecoder:splitHeaderContentType(String), AsciiString:toString(), AsciiString:toString(), AsciiString:toString(), StringUtil:substringAfter(String-char), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), AsciiString:toString(), StringUtil:substringAfter(String-char)),
		HttpPostRequestDecoder:isMultipart() to listOf(InterfaceHttpPostRequestDecoder:isMultipart()),
		HttpPostRequestDecoder:setDiscardThreshold(int) to listOf(InterfaceHttpPostRequestDecoder:setDiscardThreshold(int)),
		HttpPostRequestDecoder:getDiscardThreshold() to listOf(InterfaceHttpPostRequestDecoder:getDiscardThreshold()),
		HttpPostRequestDecoder:getBodyHttpDatas() to listOf(InterfaceHttpPostRequestDecoder:getBodyHttpDatas()),
		HttpPostRequestDecoder:getBodyHttpDatas(String) to listOf(InterfaceHttpPostRequestDecoder:getBodyHttpDatas(String)),
		HttpPostRequestDecoder:getBodyHttpData(String) to listOf(InterfaceHttpPostRequestDecoder:getBodyHttpData(String)),
		HttpPostRequestDecoder:offer(HttpContent) to listOf(InterfaceHttpPostRequestDecoder:offer(HttpContent)),
		HttpPostRequestDecoder:hasNext() to listOf(InterfaceHttpPostRequestDecoder:hasNext()),
		HttpPostRequestDecoder:next() to listOf(InterfaceHttpPostRequestDecoder:next()),
		HttpPostRequestDecoder:destroy() to listOf(InterfaceHttpPostRequestDecoder:destroy()),
		HttpPostRequestDecoder:cleanFiles() to listOf(InterfaceHttpPostRequestDecoder:cleanFiles()),
		HttpPostRequestDecoder:removeHttpDataFromClean(InterfaceHttpData) to listOf(InterfaceHttpPostRequestDecoder:removeHttpDataFromClean(InterfaceHttpData)),
		HttpPostRequestDecoder:splitHeaderContentType(String) to listOf(HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findEndOfString(String), HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findEndOfString(String)),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>() to listOf(DecoderException:<init>()),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String) to listOf(DecoderException:<init>(String)),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		MemoryFileUpload:<init>(String-String-String-String-Charset-long) to listOf(AbstractMemoryHttpData:<init>(String-Charset-long), MemoryFileUpload:setFilename(String), MemoryFileUpload:setContentType(String), MemoryFileUpload:setContentTransferEncoding(String)),
		MemoryFileUpload:hashCode() to listOf(MemoryFileUpload:getName()),
		MemoryFileUpload:equals(Object) to listOf(MemoryFileUpload:getName(), Attribute:getName()),
		MemoryFileUpload:compareTo(InterfaceHttpData) to listOf(MemoryFileUpload:getHttpDataType(), InterfaceHttpData:getHttpDataType(), MemoryFileUpload:compareTo(FileUpload)),
		MemoryFileUpload:compareTo(FileUpload) to listOf(MemoryFileUpload:getName(), FileUpload:getName()),
		MemoryFileUpload:toString() to listOf(MemoryFileUpload:getName(), MemoryFileUpload:getCharset(), MemoryFileUpload:getCharset(), MemoryFileUpload:length(), MemoryFileUpload:isCompleted(), MemoryFileUpload:isInMemory()),
		MemoryFileUpload:copy() to listOf(MemoryFileUpload:getName(), MemoryFileUpload:getFilename(), MemoryFileUpload:getContentType(), MemoryFileUpload:getContentTransferEncoding(), MemoryFileUpload:getCharset(), MemoryFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:content(), ByteBuf:copy(), MemoryFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryFileUpload:copy(), MemoryFileUpload:copy()),
		MemoryFileUpload:duplicate() to listOf(MemoryFileUpload:getName(), MemoryFileUpload:getFilename(), MemoryFileUpload:getContentType(), MemoryFileUpload:getContentTransferEncoding(), MemoryFileUpload:getCharset(), MemoryFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:content(), ByteBuf:duplicate(), MemoryFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryFileUpload:duplicate(), MemoryFileUpload:duplicate()),
		MemoryFileUpload:retain() to listOf(AbstractMemoryHttpData:retain(), MemoryFileUpload:retain(), MemoryFileUpload:retain(), MemoryFileUpload:retain(), MemoryFileUpload:retain()),
		MemoryFileUpload:retain(int) to listOf(AbstractMemoryHttpData:retain(int), MemoryFileUpload:retain(int), MemoryFileUpload:retain(int), MemoryFileUpload:retain(int), MemoryFileUpload:retain(int)),
		MemoryFileUpload:touch() to listOf(AbstractMemoryHttpData:touch(), MemoryFileUpload:touch(), MemoryFileUpload:touch(), MemoryFileUpload:touch(), MemoryFileUpload:touch()),
		MemoryFileUpload:touch(Object) to listOf(AbstractMemoryHttpData:touch(Object), MemoryFileUpload:touch(Object), MemoryFileUpload:touch(Object), MemoryFileUpload:touch(Object), MemoryFileUpload:touch(Object)),
		MemoryFileUpload:compareTo(Object) to listOf(MemoryFileUpload:compareTo(InterfaceHttpData)),
		InterfaceHttpData$HttpDataType:values() to listOf(InterfaceHttpData$HttpDataType[]:clone()),
		InterfaceHttpData$HttpDataType:<clinit>() to listOf(InterfaceHttpData$HttpDataType:<init>(String-int), InterfaceHttpData$HttpDataType:<init>(String-int), InterfaceHttpData$HttpDataType:<init>(String-int)),
		HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf) to listOf(ByteBuf:hasArray(), HttpPostBodyUtil$SeekAheadNoBackArrayException:<init>(), ByteBuf:array(), ByteBuf:readerIndex(), ByteBuf:arrayOffset(), ByteBuf:arrayOffset(), ByteBuf:writerIndex()),
		HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int) to listOf(HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), ByteBuf:readerIndex(int)),
		InternalAttribute:<init>(Charset) to listOf(AbstractReferenceCounted:<init>()),
		InternalAttribute:addValue(String) to listOf(Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:readableBytes()),
		InternalAttribute:addValue(String-int) to listOf(Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:readableBytes()),
		InternalAttribute:setValue(String-int) to listOf(Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:readableBytes(), ByteBuf:release(), ByteBuf:readableBytes()),
		InternalAttribute:hashCode() to listOf(InternalAttribute:getName()),
		InternalAttribute:equals(Object) to listOf(InternalAttribute:getName(), Attribute:getName()),
		InternalAttribute:compareTo(InterfaceHttpData) to listOf(InternalAttribute:getHttpDataType(), InterfaceHttpData:getHttpDataType(), InternalAttribute:compareTo(InternalAttribute)),
		InternalAttribute:compareTo(InternalAttribute) to listOf(InternalAttribute:getName(), InternalAttribute:getName()),
		InternalAttribute:toString() to listOf(ByteBuf:toString(Charset)),
		InternalAttribute:toByteBuf() to listOf(Unpooled:compositeBuffer(), CompositeByteBuf:addComponents(Iterable), InternalAttribute:size(), CompositeByteBuf:writerIndex(int), CompositeByteBuf:readerIndex(int)),
		InternalAttribute:retain() to listOf(ByteBuf:retain(), InternalAttribute:retain()),
		InternalAttribute:retain(int) to listOf(ByteBuf:retain(int), InternalAttribute:retain(int)),
		InternalAttribute:touch() to listOf(ByteBuf:touch(), InternalAttribute:touch()),
		InternalAttribute:touch(Object) to listOf(ByteBuf:touch(Object), InternalAttribute:touch(Object)),
		InternalAttribute:compareTo(Object) to listOf(InternalAttribute:compareTo(InterfaceHttpData)),
		HttpPostRequestEncoder$EncoderMode:values() to listOf(HttpPostRequestEncoder$EncoderMode[]:clone()),
		HttpPostRequestEncoder$EncoderMode:<clinit>() to listOf(HttpPostRequestEncoder$EncoderMode:<init>(String-int), HttpPostRequestEncoder$EncoderMode:<init>(String-int), HttpPostRequestEncoder$EncoderMode:<init>(String-int)),
		HttpPostMultipartRequestDecoder$1:<clinit>() to listOf(HttpPostRequestDecoder$MultiPartStatus:values(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal()),
		HttpPostRequestDecoder$EndOfDataDecoderException:<init>() to listOf(DecoderException:<init>()),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>() to listOf(DecoderException:<init>()),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String) to listOf(DecoderException:<init>(String)),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		CaseIgnoringComparator:compare(Object-Object) to listOf(CaseIgnoringComparator:compare(CharSequence-CharSequence)),
		CaseIgnoringComparator:<clinit>() to listOf(CaseIgnoringComparator:<init>()),
		MixedAttribute:<init>(String-long) to listOf(MixedAttribute:<init>(String-long-Charset)),
		MixedAttribute:<init>(String-long-Charset) to listOf(MemoryAttribute:<init>(String-Charset)),
		MixedAttribute:<init>(String-String-long) to listOf(MixedAttribute:<init>(String-String-long-Charset)),
		MixedAttribute:<init>(String-String-long-Charset) to listOf(DiskAttribute:<init>(String-String-Charset), MemoryAttribute:<init>(String-String-Charset), MemoryAttribute:<init>(String-String-Charset)),
		MixedAttribute:setMaxSize(long) to listOf(Attribute:setMaxSize(long)),
		MixedAttribute:addContent(ByteBuf-boolean) to listOf(Attribute:length(), ByteBuf:readableBytes(), MixedAttribute:checkSize(long), Attribute:length(), ByteBuf:readableBytes(), Attribute:getName(), DiskAttribute:<init>(String), DiskAttribute:setMaxSize(long), MemoryAttribute:getByteBuf(), MemoryAttribute:getByteBuf(), DiskAttribute:addContent(ByteBuf-boolean), Attribute:addContent(ByteBuf-boolean)),
		MixedAttribute:delete() to listOf(Attribute:delete()),
		MixedAttribute:get() to listOf(Attribute:get()),
		MixedAttribute:getByteBuf() to listOf(Attribute:getByteBuf()),
		MixedAttribute:getCharset() to listOf(Attribute:getCharset()),
		MixedAttribute:getString() to listOf(Attribute:getString()),
		MixedAttribute:getString(Charset) to listOf(Attribute:getString(Charset)),
		MixedAttribute:isCompleted() to listOf(Attribute:isCompleted()),
		MixedAttribute:isInMemory() to listOf(Attribute:isInMemory()),
		MixedAttribute:length() to listOf(Attribute:length()),
		MixedAttribute:renameTo(File) to listOf(Attribute:renameTo(File)),
		MixedAttribute:setCharset(Charset) to listOf(Attribute:setCharset(Charset)),
		MixedAttribute:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), MixedAttribute:checkSize(long), ByteBuf:readableBytes(), Attribute:getName(), DiskAttribute:<init>(String), Attribute:setMaxSize(long), Attribute:setContent(ByteBuf)),
		MixedAttribute:setContent(File) to listOf(MixedAttribute:checkSize(long), Attribute:getName(), DiskAttribute:<init>(String), Attribute:setMaxSize(long), Attribute:setContent(File)),
		MixedAttribute:setContent(InputStream) to listOf(Attribute:getName(), DiskAttribute:<init>(String), Attribute:setMaxSize(long), Attribute:setContent(InputStream)),
		MixedAttribute:getHttpDataType() to listOf(Attribute:getHttpDataType()),
		MixedAttribute:getName() to listOf(Attribute:getName()),
		MixedAttribute:compareTo(InterfaceHttpData) to listOf(Attribute:compareTo(Object)),
		MixedAttribute:getValue() to listOf(Attribute:getValue()),
		MixedAttribute:setValue(String) to listOf(MixedAttribute:checkSize(long), Attribute:setValue(String)),
		MixedAttribute:getChunk(int) to listOf(Attribute:getChunk(int)),
		MixedAttribute:getFile() to listOf(Attribute:getFile()),
		MixedAttribute:copy() to listOf(Attribute:copy(), MixedAttribute:copy(), MixedAttribute:copy()),
		MixedAttribute:duplicate() to listOf(Attribute:duplicate(), MixedAttribute:duplicate(), MixedAttribute:duplicate()),
		MixedAttribute:content() to listOf(Attribute:content()),
		MixedAttribute:refCnt() to listOf(Attribute:refCnt()),
		MixedAttribute:retain() to listOf(Attribute:retain(), MixedAttribute:retain(), MixedAttribute:retain(), MixedAttribute:retain(), MixedAttribute:retain()),
		MixedAttribute:retain(int) to listOf(Attribute:retain(int), MixedAttribute:retain(int), MixedAttribute:retain(int), MixedAttribute:retain(int), MixedAttribute:retain(int)),
		MixedAttribute:touch() to listOf(Attribute:touch(), MixedAttribute:touch(), MixedAttribute:touch(), MixedAttribute:touch(), MixedAttribute:touch()),
		MixedAttribute:touch(Object) to listOf(Attribute:touch(Object), MixedAttribute:touch(Object), MixedAttribute:touch(Object), MixedAttribute:touch(Object), MixedAttribute:touch(Object)),
		MixedAttribute:release() to listOf(Attribute:release()),
		MixedAttribute:release(int) to listOf(Attribute:release(int)),
		MixedAttribute:compareTo(Object) to listOf(MixedAttribute:compareTo(InterfaceHttpData)),
		HttpPostRequestEncoder:<init>(HttpRequest-boolean) to listOf(DefaultHttpDataFactory:<init>(long), HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode)),
		HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean) to listOf(HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode)),
		HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode) to listOf(HttpRequest:method(), HttpMethod:equals(Object), HttpMethod:equals(Object), HttpMethod:equals(Object), HttpMethod:equals(Object), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), HttpPostRequestEncoder:initDataMultipart()),
		HttpPostRequestEncoder:cleanFiles() to listOf(HttpDataFactory:cleanRequestHttpData(HttpRequest)),
		HttpPostRequestEncoder:initDataMultipart() to listOf(HttpPostRequestEncoder:getNewMultipartDelimiter()),
		HttpPostRequestEncoder:initMixedMultipart() to listOf(HttpPostRequestEncoder:getNewMultipartDelimiter()),
		HttpPostRequestEncoder:getNewMultipartDelimiter() to listOf(ThreadLocalRandom:current(), ThreadLocalRandom:nextLong()),
		HttpPostRequestEncoder:setBodyHttpDatas(List) to listOf(HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData)),
		HttpPostRequestEncoder:addBodyAttribute(String-String) to listOf(HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData)),
		HttpPostRequestEncoder:addBodyFileUpload(String-File-String-boolean) to listOf(HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), FileUpload:setContent(File), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData)),
		HttpPostRequestEncoder:addBodyFileUploads(String-File[]-String[]-boolean[]) to listOf(HttpPostRequestEncoder:addBodyFileUpload(String-File-String-boolean)),
		HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData) to listOf(HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), Attribute:getName(), HttpPostRequestEncoder:encodeAttribute(String-Charset), Attribute:getValue(), HttpPostRequestEncoder:encodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String-String), Attribute:getName(), Attribute:length(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), FileUpload:getName(), HttpPostRequestEncoder:encodeAttribute(String-Charset), FileUpload:getFilename(), HttpPostRequestEncoder:encodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String-String), Attribute:getName(), Attribute:length(), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), InternalAttribute:addValue(String), Attribute:getName(), InternalAttribute:addValue(String), Attribute:getCharset(), InternalAttribute:addValue(String), InternalAttribute:addValue(String), Attribute:length(), InternalAttribute:size(), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), FileUpload:getName(), FileUpload:getName(), InternalAttribute:addValue(String), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), FileUpload:getName(), FileUpload:getName(), HttpPostRequestEncoder:initMixedMultipart(), InternalAttribute:size(), FileUpload:getFilename(), FileUpload:getName(), FileUpload:getName(), FileUpload:getFilename(), InternalAttribute:setValue(String-int), InternalAttribute:setValue(String-int), InternalAttribute:size(), InternalAttribute:addValue(String), FileUpload:getFilename(), InternalAttribute:addValue(String), InternalAttribute:addValue(String), FileUpload:getName(), FileUpload:getFilename(), InternalAttribute:addValue(String), FileUpload:getContentType(), InternalAttribute:addValue(String), FileUpload:getContentTransferEncoding(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostBodyUtil$TransferEncodingMechanism:value(), InternalAttribute:addValue(String), FileUpload:getCharset(), FileUpload:getCharset(), InternalAttribute:addValue(String), InternalAttribute:addValue(String), FileUpload:length(), InternalAttribute:size()),
		HttpPostRequestEncoder:finalizeRequest() to listOf(InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), InternalAttribute:addValue(String), InternalAttribute:size(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), HttpRequest:headers(), HttpHeaders:getAllAndConvert(Object), HttpHeaders:getAll(Object), HttpHeaders:remove(Object), AsciiString:toString(), AsciiString:toString(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:set(CharSequence-CharSequence), HttpHeaders:remove(Object), AsciiString:equalsIgnoreCase(CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaderUtil:setTransferEncodingChunked(HttpMessage-boolean), HttpPostRequestEncoder$WrappedHttpRequest:<init>(HttpRequest), HttpPostRequestEncoder:nextChunk(), HttpContent:content(), FullHttpRequest:content(), FullHttpRequest:content(), ByteBuf:clear(), ByteBuf:writeBytes(ByteBuf), ByteBuf:release(), HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent-HttpPostRequestEncoder$1)),
		HttpPostRequestEncoder:encodeAttribute(String-Charset) to listOf(HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String-Throwable)),
		HttpPostRequestEncoder:fillByteBuf() to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:slice(int-int), ByteBuf:retain(), ByteBuf:skipBytes(int)),
		HttpPostRequestEncoder:encodeNextChunkMultipart(int) to listOf(InternalAttribute:toByteBuf(), Attribute:getChunk(int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), HttpData:getChunk(int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), ByteBuf:capacity(), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf)),
		HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int) to listOf(InterfaceHttpData:getName(), Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf), HttpData:getChunk(int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), ByteBuf:readableBytes(), Unpooled:wrappedBuffer(byte[]), ByteBuf:capacity(), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf), Unpooled:wrappedBuffer(ByteBuf[]), Unpooled:wrappedBuffer(ByteBuf[]), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf)),
		HttpPostRequestEncoder:readChunk(ChannelHandlerContext) to listOf(HttpPostRequestEncoder:nextChunk(), HttpContent:content(), ByteBuf:readableBytes(), HttpPostRequestEncoder:readChunk(ChannelHandlerContext)),
		HttpPostRequestEncoder:nextChunk() to listOf(ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf), HttpPostRequestEncoder:encodeNextChunkMultipart(int), HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int), ByteBuf:readableBytes(), DefaultHttpContent:<init>(ByteBuf), HttpPostRequestEncoder:encodeNextChunkMultipart(int), HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int), ByteBuf:readableBytes(), DefaultHttpContent:<init>(ByteBuf)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:<init>(HttpRequest)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion), HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion), HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:setMethod(HttpMethod) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:setMethod(HttpMethod), HttpPostRequestEncoder$WrappedFullHttpRequest:setMethod(HttpMethod)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:setUri(String) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:setUri(String), HttpPostRequestEncoder$WrappedFullHttpRequest:setUri(String)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:copy(boolean-ByteBuf) to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:protocolVersion(), HttpPostRequestEncoder$WrappedFullHttpRequest:method(), HttpPostRequestEncoder$WrappedFullHttpRequest:uri(), HttpPostRequestEncoder$WrappedFullHttpRequest:content(), ByteBuf:copy(), Unpooled:buffer(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), HttpPostRequestEncoder$WrappedFullHttpRequest:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpRequest:trailingHeaders(), HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders(), HttpHeaders:set(TextHeaders)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:copy(ByteBuf) to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:copy(boolean-ByteBuf), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(ByteBuf)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:copy() to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:copy(boolean-ByteBuf), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), HttpPostRequestEncoder$WrappedFullHttpRequest:copy()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate() to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:protocolVersion(), HttpPostRequestEncoder$WrappedFullHttpRequest:method(), HttpPostRequestEncoder$WrappedFullHttpRequest:uri(), HttpPostRequestEncoder$WrappedFullHttpRequest:content(), ByteBuf:duplicate(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), HttpPostRequestEncoder$WrappedFullHttpRequest:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpRequest:trailingHeaders(), HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders(), HttpHeaders:set(TextHeaders), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate(), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate(), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate(), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int) to listOf(HttpContent:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:retain() to listOf(HttpContent:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:touch() to listOf(HttpContent:touch(), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(), HttpPostRequestEncoder$WrappedFullHttpRequest:touch()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:touch(Object) to listOf(HttpContent:touch(Object), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(Object), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(Object), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(Object), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(Object), HttpPostRequestEncoder$WrappedFullHttpRequest:touch(Object)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:content() to listOf(HttpContent:content()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders() to listOf(LastHttpContent:trailingHeaders()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:refCnt() to listOf(HttpContent:refCnt()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:release() to listOf(HttpContent:release()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:release(int) to listOf(HttpContent:release(int)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent-HttpPostRequestEncoder$1) to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent)),
		MixedFileUpload:<init>(String-String-String-String-Charset-long-long) to listOf(DiskFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:<init>(String-String-String-String-Charset-long)),
		MixedFileUpload:setMaxSize(long) to listOf(FileUpload:setMaxSize(long)),
		MixedFileUpload:addContent(ByteBuf-boolean) to listOf(FileUpload:length(), ByteBuf:readableBytes(), MixedFileUpload:checkSize(long), FileUpload:length(), ByteBuf:readableBytes(), FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), DiskFileUpload:setMaxSize(long), FileUpload:getByteBuf(), ByteBuf:isReadable(), ByteBuf:retain(), DiskFileUpload:addContent(ByteBuf-boolean), FileUpload:release(), FileUpload:addContent(ByteBuf-boolean)),
		MixedFileUpload:delete() to listOf(FileUpload:delete()),
		MixedFileUpload:get() to listOf(FileUpload:get()),
		MixedFileUpload:getByteBuf() to listOf(FileUpload:getByteBuf()),
		MixedFileUpload:getCharset() to listOf(FileUpload:getCharset()),
		MixedFileUpload:getContentType() to listOf(FileUpload:getContentType()),
		MixedFileUpload:getContentTransferEncoding() to listOf(FileUpload:getContentTransferEncoding()),
		MixedFileUpload:getFilename() to listOf(FileUpload:getFilename()),
		MixedFileUpload:getString() to listOf(FileUpload:getString()),
		MixedFileUpload:getString(Charset) to listOf(FileUpload:getString(Charset)),
		MixedFileUpload:isCompleted() to listOf(FileUpload:isCompleted()),
		MixedFileUpload:isInMemory() to listOf(FileUpload:isInMemory()),
		MixedFileUpload:length() to listOf(FileUpload:length()),
		MixedFileUpload:renameTo(File) to listOf(FileUpload:renameTo(File)),
		MixedFileUpload:setCharset(Charset) to listOf(FileUpload:setCharset(Charset)),
		MixedFileUpload:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), MixedFileUpload:checkSize(long), ByteBuf:readableBytes(), FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), FileUpload:setMaxSize(long), FileUpload:release(), FileUpload:setContent(ByteBuf)),
		MixedFileUpload:setContent(File) to listOf(MixedFileUpload:checkSize(long), FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), FileUpload:setMaxSize(long), FileUpload:release(), FileUpload:setContent(File)),
		MixedFileUpload:setContent(InputStream) to listOf(FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), FileUpload:setMaxSize(long), FileUpload:release(), FileUpload:setContent(InputStream)),
		MixedFileUpload:setContentType(String) to listOf(FileUpload:setContentType(String)),
		MixedFileUpload:setContentTransferEncoding(String) to listOf(FileUpload:setContentTransferEncoding(String)),
		MixedFileUpload:setFilename(String) to listOf(FileUpload:setFilename(String)),
		MixedFileUpload:getHttpDataType() to listOf(FileUpload:getHttpDataType()),
		MixedFileUpload:getName() to listOf(FileUpload:getName()),
		MixedFileUpload:compareTo(InterfaceHttpData) to listOf(FileUpload:compareTo(Object)),
		MixedFileUpload:getChunk(int) to listOf(FileUpload:getChunk(int)),
		MixedFileUpload:getFile() to listOf(FileUpload:getFile()),
		MixedFileUpload:copy() to listOf(FileUpload:copy(), MixedFileUpload:copy(), MixedFileUpload:copy()),
		MixedFileUpload:duplicate() to listOf(FileUpload:duplicate(), MixedFileUpload:duplicate(), MixedFileUpload:duplicate()),
		MixedFileUpload:content() to listOf(FileUpload:content()),
		MixedFileUpload:refCnt() to listOf(FileUpload:refCnt()),
		MixedFileUpload:retain() to listOf(FileUpload:retain(), MixedFileUpload:retain(), MixedFileUpload:retain(), MixedFileUpload:retain(), MixedFileUpload:retain()),
		MixedFileUpload:retain(int) to listOf(FileUpload:retain(int), MixedFileUpload:retain(int), MixedFileUpload:retain(int), MixedFileUpload:retain(int), MixedFileUpload:retain(int)),
		MixedFileUpload:touch() to listOf(FileUpload:touch(), MixedFileUpload:touch(), MixedFileUpload:touch(), MixedFileUpload:touch(), MixedFileUpload:touch()),
		MixedFileUpload:touch(Object) to listOf(FileUpload:touch(Object), MixedFileUpload:touch(Object), MixedFileUpload:touch(Object), MixedFileUpload:touch(Object), MixedFileUpload:touch(Object)),
		MixedFileUpload:release() to listOf(FileUpload:release()),
		MixedFileUpload:release(int) to listOf(FileUpload:release(int)),
		MixedFileUpload:compareTo(Object) to listOf(MixedFileUpload:compareTo(InterfaceHttpData)),
		HttpPostBodyUtil:<clinit>() to listOf(AsciiString:toString(), AsciiString:toString()),
		HttpPostBodyUtil$TransferEncodingMechanism:values() to listOf(HttpPostBodyUtil$TransferEncodingMechanism[]:clone()),
		HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int) to listOf(HttpPostBodyUtil$TransferEncodingMechanism:name()),
		HttpPostBodyUtil$TransferEncodingMechanism:<clinit>() to listOf(HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String)),
		HttpPostStandardRequestDecoder$1:<clinit>() to listOf(HttpPostRequestDecoder$MultiPartStatus:values(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal()),
		DefaultHttpDataFactory:<init>() to listOf(PlatformDependent:newConcurrentHashMap()),
		DefaultHttpDataFactory:<init>(Charset) to listOf(DefaultHttpDataFactory:<init>()),
		DefaultHttpDataFactory:<init>(boolean) to listOf(PlatformDependent:newConcurrentHashMap()),
		DefaultHttpDataFactory:<init>(boolean-Charset) to listOf(DefaultHttpDataFactory:<init>(boolean)),
		DefaultHttpDataFactory:<init>(long) to listOf(PlatformDependent:newConcurrentHashMap()),
		DefaultHttpDataFactory:<init>(long-Charset) to listOf(DefaultHttpDataFactory:<init>(long)),
		DefaultHttpDataFactory:createAttribute(HttpRequest-String) to listOf(DiskAttribute:<init>(String-Charset), Attribute:setMaxSize(long), DefaultHttpDataFactory:getList(HttpRequest), MixedAttribute:<init>(String-long-Charset), Attribute:setMaxSize(long), DefaultHttpDataFactory:getList(HttpRequest), MemoryAttribute:<init>(String), MemoryAttribute:setMaxSize(long)),
		DefaultHttpDataFactory:checkHttpDataSize(HttpData) to listOf(HttpData:length(), HttpData:checkSize(long)),
		DefaultHttpDataFactory:createAttribute(HttpRequest-String-String) to listOf(DiskAttribute:<init>(String-String-Charset), Attribute:setMaxSize(long), MixedAttribute:<init>(String-String-long-Charset), Attribute:setMaxSize(long), DefaultHttpDataFactory:checkHttpDataSize(HttpData), DefaultHttpDataFactory:getList(HttpRequest), MixedAttribute:<init>(String-String-long-Charset), Attribute:setMaxSize(long), DefaultHttpDataFactory:checkHttpDataSize(HttpData), DefaultHttpDataFactory:getList(HttpRequest), MemoryAttribute:<init>(String-String-Charset), MemoryAttribute:setMaxSize(long), DefaultHttpDataFactory:checkHttpDataSize(HttpData)),
		DefaultHttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long) to listOf(DiskFileUpload:<init>(String-String-String-String-Charset-long), FileUpload:setMaxSize(long), DefaultHttpDataFactory:checkHttpDataSize(HttpData), DefaultHttpDataFactory:getList(HttpRequest), MixedFileUpload:<init>(String-String-String-String-Charset-long-long), FileUpload:setMaxSize(long), DefaultHttpDataFactory:checkHttpDataSize(HttpData), DefaultHttpDataFactory:getList(HttpRequest), MemoryFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:setMaxSize(long), DefaultHttpDataFactory:checkHttpDataSize(HttpData)),
		DefaultHttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData) to listOf(DefaultHttpDataFactory:getList(HttpRequest)),
		DefaultHttpDataFactory:cleanRequestHttpData(HttpRequest) to listOf(HttpData:delete()),
		DefaultHttpDataFactory:cleanAllHttpData() to listOf(HttpData:delete()),
		AbstractHttpData:<init>(String-Charset-long) to listOf(AbstractReferenceCounted:<init>(), AbstractHttpData:setCharset(Charset)),
		AbstractHttpData:content() to listOf(AbstractHttpData:getByteBuf(), ChannelException:<init>(Throwable)),
		AbstractHttpData:deallocate() to listOf(AbstractHttpData:delete()),
		AbstractHttpData:retain() to listOf(AbstractReferenceCounted:retain(), AbstractHttpData:retain(), AbstractHttpData:retain(), AbstractHttpData:retain()),
		AbstractHttpData:retain(int) to listOf(AbstractReferenceCounted:retain(int), AbstractHttpData:retain(int), AbstractHttpData:retain(int), AbstractHttpData:retain(int)),
		AbstractHttpData:touch() to listOf(AbstractHttpData:touch(), AbstractHttpData:touch(), AbstractHttpData:touch()),
		AbstractHttpData:touch(Object) to listOf(AbstractHttpData:touch(Object), AbstractHttpData:touch(Object), AbstractHttpData:touch(Object)),
		DiskFileUpload:<init>(String-String-String-String-Charset-long) to listOf(AbstractDiskHttpData:<init>(String-Charset-long), DiskFileUpload:setFilename(String), DiskFileUpload:setContentType(String), DiskFileUpload:setContentTransferEncoding(String)),
		DiskFileUpload:hashCode() to listOf(DiskFileUpload:getName()),
		DiskFileUpload:equals(Object) to listOf(DiskFileUpload:getName(), Attribute:getName()),
		DiskFileUpload:compareTo(InterfaceHttpData) to listOf(DiskFileUpload:getHttpDataType(), InterfaceHttpData:getHttpDataType(), DiskFileUpload:compareTo(FileUpload)),
		DiskFileUpload:compareTo(FileUpload) to listOf(DiskFileUpload:getName(), FileUpload:getName()),
		DiskFileUpload:toString() to listOf(DiskFileUpload:getFile(), DiskFileUpload:getName(), DiskFileUpload:getCharset(), DiskFileUpload:getCharset(), DiskFileUpload:length(), DiskFileUpload:isCompleted(), DiskFileUpload:isInMemory()),
		DiskFileUpload:copy() to listOf(DiskFileUpload:getName(), DiskFileUpload:getFilename(), DiskFileUpload:getContentType(), DiskFileUpload:getContentTransferEncoding(), DiskFileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), DiskFileUpload:content(), ByteBuf:copy(), DiskFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskFileUpload:copy(), DiskFileUpload:copy()),
		DiskFileUpload:duplicate() to listOf(DiskFileUpload:getName(), DiskFileUpload:getFilename(), DiskFileUpload:getContentType(), DiskFileUpload:getContentTransferEncoding(), DiskFileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), DiskFileUpload:content(), ByteBuf:duplicate(), DiskFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskFileUpload:duplicate(), DiskFileUpload:duplicate()),
		DiskFileUpload:retain(int) to listOf(AbstractDiskHttpData:retain(int), DiskFileUpload:retain(int), DiskFileUpload:retain(int), DiskFileUpload:retain(int), DiskFileUpload:retain(int)),
		DiskFileUpload:retain() to listOf(AbstractDiskHttpData:retain(), DiskFileUpload:retain(), DiskFileUpload:retain(), DiskFileUpload:retain(), DiskFileUpload:retain()),
		DiskFileUpload:touch() to listOf(AbstractDiskHttpData:touch(), DiskFileUpload:touch(), DiskFileUpload:touch(), DiskFileUpload:touch(), DiskFileUpload:touch()),
		DiskFileUpload:touch(Object) to listOf(AbstractDiskHttpData:touch(Object), DiskFileUpload:touch(Object), DiskFileUpload:touch(Object), DiskFileUpload:touch(Object), DiskFileUpload:touch(Object)),
		DiskFileUpload:compareTo(Object) to listOf(DiskFileUpload:compareTo(InterfaceHttpData)),
		DiskAttribute:<init>(String) to listOf(DiskAttribute:<init>(String-Charset)),
		DiskAttribute:<init>(String-Charset) to listOf(AbstractDiskHttpData:<init>(String-Charset-long)),
		DiskAttribute:<init>(String-String) to listOf(DiskAttribute:<init>(String-String-Charset)),
		DiskAttribute:<init>(String-String-Charset) to listOf(AbstractDiskHttpData:<init>(String-Charset-long), DiskAttribute:setValue(String)),
		DiskAttribute:getValue() to listOf(DiskAttribute:get(), DiskAttribute:getCharset()),
		DiskAttribute:setValue(String) to listOf(DiskAttribute:getCharset(), DiskAttribute:checkSize(long), Unpooled:wrappedBuffer(byte[]), ByteBuf:readableBytes(), DiskAttribute:setContent(ByteBuf)),
		DiskAttribute:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), DiskAttribute:checkSize(long), AbstractDiskHttpData:addContent(ByteBuf-boolean)),
		DiskAttribute:hashCode() to listOf(DiskAttribute:getName()),
		DiskAttribute:equals(Object) to listOf(DiskAttribute:getName(), Attribute:getName()),
		DiskAttribute:compareTo(InterfaceHttpData) to listOf(DiskAttribute:getHttpDataType(), InterfaceHttpData:getHttpDataType(), DiskAttribute:compareTo(Attribute)),
		DiskAttribute:compareTo(Attribute) to listOf(DiskAttribute:getName(), Attribute:getName()),
		DiskAttribute:toString() to listOf(DiskAttribute:getName(), DiskAttribute:getValue(), DiskAttribute:getName()),
		DiskAttribute:getDiskFilename() to listOf(DiskAttribute:getName()),
		DiskAttribute:copy() to listOf(DiskAttribute:getName(), DiskAttribute:<init>(String), DiskAttribute:getCharset(), DiskAttribute:setCharset(Charset), DiskAttribute:content(), ByteBuf:copy(), DiskAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskAttribute:copy(), DiskAttribute:copy()),
		DiskAttribute:duplicate() to listOf(DiskAttribute:getName(), DiskAttribute:<init>(String), DiskAttribute:getCharset(), DiskAttribute:setCharset(Charset), DiskAttribute:content(), ByteBuf:duplicate(), DiskAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskAttribute:duplicate(), DiskAttribute:duplicate()),
		DiskAttribute:retain(int) to listOf(AbstractDiskHttpData:retain(int), DiskAttribute:retain(int), DiskAttribute:retain(int), DiskAttribute:retain(int), DiskAttribute:retain(int)),
		DiskAttribute:retain() to listOf(AbstractDiskHttpData:retain(), DiskAttribute:retain(), DiskAttribute:retain(), DiskAttribute:retain(), DiskAttribute:retain()),
		DiskAttribute:touch() to listOf(AbstractDiskHttpData:touch(), DiskAttribute:touch(), DiskAttribute:touch(), DiskAttribute:touch(), DiskAttribute:touch()),
		DiskAttribute:touch(Object) to listOf(AbstractDiskHttpData:touch(Object), DiskAttribute:touch(Object), DiskAttribute:touch(Object), DiskAttribute:touch(Object), DiskAttribute:touch(Object)),
		DiskAttribute:compareTo(Object) to listOf(DiskAttribute:compareTo(InterfaceHttpData)),
		HttpClientCodec$Encoder:<init>(HttpClientCodec) to listOf(HttpRequestEncoder:<init>()),
		HttpClientCodec$Encoder:encode(ChannelHandlerContext-Object-List) to listOf(HttpClientCodec:access$100(HttpClientCodec), HttpClientCodec:access$200(HttpClientCodec), HttpRequest:method(), HttpRequestEncoder:encode(ChannelHandlerContext-Object-List), HttpClientCodec:access$300(HttpClientCodec), HttpClientCodec:access$400(HttpClientCodec)),
		HttpClientCodec$Encoder:<init>(HttpClientCodec-HttpClientCodec$1) to listOf(HttpClientCodec$Encoder:<init>(HttpClientCodec)),
		DefaultHttpMessage:<init>(HttpVersion) to listOf(DefaultHttpMessage:<init>(HttpVersion-boolean-boolean)),
		DefaultHttpMessage:<init>(HttpVersion-boolean-boolean) to listOf(DefaultHttpObject:<init>(), DefaultHttpHeaders:<init>(boolean-boolean)),
		DefaultHttpMessage:hashCode() to listOf(HttpVersion:hashCode(), DefaultHttpObject:hashCode()),
		DefaultHttpMessage:equals(Object) to listOf(DefaultHttpMessage:headers(), DefaultHttpMessage:headers(), DefaultHttpMessage:protocolVersion(), DefaultHttpMessage:protocolVersion(), HttpVersion:equals(Object), DefaultHttpObject:equals(Object)),
		HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:<init>() to listOf(HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:setTimeZone(TimeZone)),
		ClientCookieDecoder:decode(String) to listOf(CookieEncoderUtil:stringBuilder(), ClientCookieDecoder$CookieBuilder:<init>(String-int-int-String-String), ClientCookieDecoder$CookieBuilder:appendAttribute(String-int-int-String), ClientCookieDecoder$CookieBuilder:cookie()),
		HttpObjectAggregator$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), HttpObjectAggregator:access$000(), ChannelFuture:cause(), InternalLogger:debug(String-Throwable), ChannelHandlerContext:close()),
		HttpObjectAggregator$1:operationComplete(Future) to listOf(HttpObjectAggregator$1:operationComplete(ChannelFuture)),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus) to listOf(Unpooled:buffer(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf)),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean)),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean) to listOf(Unpooled:buffer(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean-boolean)),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean) to listOf(Unpooled:buffer(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean-boolean)),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean-boolean)),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean-boolean) to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean), DefaultHttpHeaders:<init>(boolean-boolean)),
		DefaultFullHttpResponse:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultFullHttpResponse:retain() to listOf(ByteBuf:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain()),
		DefaultFullHttpResponse:retain(int) to listOf(ByteBuf:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int)),
		DefaultFullHttpResponse:touch() to listOf(ByteBuf:touch(), DefaultFullHttpResponse:touch(), DefaultFullHttpResponse:touch(), DefaultFullHttpResponse:touch(), DefaultFullHttpResponse:touch(), DefaultFullHttpResponse:touch()),
		DefaultFullHttpResponse:touch(Object) to listOf(ByteBuf:touch(Object), DefaultFullHttpResponse:touch(Object), DefaultFullHttpResponse:touch(Object), DefaultFullHttpResponse:touch(Object), DefaultFullHttpResponse:touch(Object), DefaultFullHttpResponse:touch(Object)),
		DefaultFullHttpResponse:release() to listOf(ByteBuf:release()),
		DefaultFullHttpResponse:release(int) to listOf(ByteBuf:release(int)),
		DefaultFullHttpResponse:setProtocolVersion(HttpVersion) to listOf(DefaultHttpResponse:setProtocolVersion(HttpVersion), DefaultFullHttpResponse:setProtocolVersion(HttpVersion), DefaultFullHttpResponse:setProtocolVersion(HttpVersion)),
		DefaultFullHttpResponse:setStatus(HttpResponseStatus) to listOf(DefaultHttpResponse:setStatus(HttpResponseStatus), DefaultFullHttpResponse:setStatus(HttpResponseStatus)),
		DefaultFullHttpResponse:copy(boolean-ByteBuf) to listOf(DefaultFullHttpResponse:protocolVersion(), DefaultFullHttpResponse:status(), DefaultFullHttpResponse:content(), ByteBuf:copy(), Unpooled:buffer(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), DefaultFullHttpResponse:headers(), DefaultFullHttpResponse:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpResponse:trailingHeaders(), DefaultFullHttpResponse:trailingHeaders(), HttpHeaders:set(TextHeaders)),
		DefaultFullHttpResponse:copy(ByteBuf) to listOf(DefaultFullHttpResponse:copy(boolean-ByteBuf), DefaultFullHttpResponse:copy(ByteBuf)),
		DefaultFullHttpResponse:copy() to listOf(DefaultFullHttpResponse:copy(boolean-ByteBuf), DefaultFullHttpResponse:copy(), DefaultFullHttpResponse:copy(), DefaultFullHttpResponse:copy(), DefaultFullHttpResponse:copy()),
		DefaultFullHttpResponse:duplicate() to listOf(DefaultFullHttpResponse:protocolVersion(), DefaultFullHttpResponse:status(), DefaultFullHttpResponse:content(), ByteBuf:duplicate(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf-boolean), DefaultFullHttpResponse:headers(), DefaultFullHttpResponse:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpResponse:trailingHeaders(), DefaultFullHttpResponse:trailingHeaders(), HttpHeaders:set(TextHeaders), DefaultFullHttpResponse:duplicate(), DefaultFullHttpResponse:duplicate(), DefaultFullHttpResponse:duplicate(), DefaultFullHttpResponse:duplicate()),
		DefaultFullHttpResponse:hashCode() to listOf(DefaultFullHttpResponse:content(), ByteBuf:hashCode(), DefaultFullHttpResponse:trailingHeaders(), DefaultHttpResponse:hashCode()),
		DefaultFullHttpResponse:equals(Object) to listOf(DefaultHttpResponse:equals(Object), DefaultFullHttpResponse:content(), DefaultFullHttpResponse:content(), ByteBuf:equals(Object), DefaultFullHttpResponse:trailingHeaders(), DefaultFullHttpResponse:trailingHeaders()),
		DefaultFullHttpResponse:toString() to listOf(HttpMessageUtil:appendFullResponse(StringBuilder-FullHttpResponse)),
		HttpServerUpgradeHandler$UpgradeEvent:refCnt() to listOf(FullHttpRequest:refCnt()),
		HttpServerUpgradeHandler$UpgradeEvent:retain() to listOf(FullHttpRequest:retain(), HttpServerUpgradeHandler$UpgradeEvent:retain()),
		HttpServerUpgradeHandler$UpgradeEvent:retain(int) to listOf(FullHttpRequest:retain(int), HttpServerUpgradeHandler$UpgradeEvent:retain(int)),
		HttpServerUpgradeHandler$UpgradeEvent:touch() to listOf(FullHttpRequest:touch(), HttpServerUpgradeHandler$UpgradeEvent:touch()),
		HttpServerUpgradeHandler$UpgradeEvent:touch(Object) to listOf(FullHttpRequest:touch(Object), HttpServerUpgradeHandler$UpgradeEvent:touch(Object)),
		HttpServerUpgradeHandler$UpgradeEvent:release() to listOf(FullHttpRequest:release()),
		HttpServerUpgradeHandler$UpgradeEvent:release(int) to listOf(FullHttpRequest:release()),
		HttpServerUpgradeHandler$UpgradeEvent:<init>(String-FullHttpRequest-HttpServerUpgradeHandler$1) to listOf(HttpServerUpgradeHandler$UpgradeEvent:<init>(String-FullHttpRequest)),
		ServerCookieDecoder:decode(String) to listOf(CookieEncoderUtil:stringBuilder(), DefaultCookie:<init>(String-String)),
		HttpObjectDecoder$HeaderParser:parse(ByteBuf) to listOf(AppendableCharSequence:reset(), ByteBuf:forEachByte(ByteBufProcessor), ByteBuf:readerIndex(int)),
		HttpObjectDecoder$HeaderParser:process(byte) to listOf(HttpObjectDecoder$HeaderParser:newException(int), AppendableCharSequence:append(char)),
		HttpObjectDecoder$HeaderParser:newException(int) to listOf(TooLongFrameException:<init>(String)),
		HttpContentDecompressor:<init>() to listOf(HttpContentDecompressor:<init>(boolean)),
		HttpContentDecompressor:<init>(boolean) to listOf(HttpContentDecoder:<init>()),
		HttpContentDecompressor:newContentDecoder(String) to listOf(AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), EmbeddedChannel:<init>(ChannelHandler[]), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), EmbeddedChannel:<init>(ChannelHandler[])),
		HttpHeaderValues:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		DefaultCookie:<init>(String-String) to listOf(DefaultCookie:setValue(String)),
		DefaultCookie:setDomain(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setPath(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setComment(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setCommentUrl(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setPorts(int[]) to listOf(int[]:clone()),
		DefaultCookie:hashCode() to listOf(DefaultCookie:name()),
		DefaultCookie:equals(Object) to listOf(DefaultCookie:name(), Cookie:name(), DefaultCookie:path(), Cookie:path(), Cookie:path(), DefaultCookie:path(), Cookie:path(), DefaultCookie:domain(), Cookie:domain(), Cookie:domain(), DefaultCookie:domain(), Cookie:domain()),
		DefaultCookie:compareTo(Cookie) to listOf(DefaultCookie:name(), Cookie:name(), DefaultCookie:path(), Cookie:path(), Cookie:path(), DefaultCookie:path(), Cookie:path(), DefaultCookie:domain(), Cookie:domain(), Cookie:domain(), DefaultCookie:domain(), Cookie:domain()),
		DefaultCookie:toString() to listOf(DefaultCookie:name(), DefaultCookie:value(), DefaultCookie:domain(), DefaultCookie:domain(), DefaultCookie:path(), DefaultCookie:path(), DefaultCookie:comment(), DefaultCookie:comment(), DefaultCookie:maxAge(), DefaultCookie:maxAge(), DefaultCookie:isSecure(), DefaultCookie:isHttpOnly()),
		DefaultCookie:compareTo(Object) to listOf(DefaultCookie:compareTo(Cookie)),
		CorsConfig:<init>(CorsConfig$Builder) to listOf(CorsConfig$Builder:access$000(CorsConfig$Builder), CorsConfig$Builder:access$100(CorsConfig$Builder), CorsConfig$Builder:access$200(CorsConfig$Builder), CorsConfig$Builder:access$300(CorsConfig$Builder), CorsConfig$Builder:access$400(CorsConfig$Builder), CorsConfig$Builder:access$500(CorsConfig$Builder), CorsConfig$Builder:access$600(CorsConfig$Builder), CorsConfig$Builder:access$700(CorsConfig$Builder), CorsConfig$Builder:access$800(CorsConfig$Builder), CorsConfig$Builder:access$900(CorsConfig$Builder), CorsConfig$Builder:access$1000(CorsConfig$Builder)),
		CorsConfig:preflightResponseHeaders() to listOf(DefaultHttpHeaders:<init>(), CorsConfig:getValue(Callable), HttpHeaders:addObject(CharSequence-Iterable), HttpHeaders:addObject(CharSequence-Object)),
		CorsConfig:toString() to listOf(StringUtil:simpleClassName(Object)),
		CorsConfig:withAnyOrigin() to listOf(CorsConfig$Builder:<init>()),
		CorsConfig:withOrigin(String) to listOf(CorsConfig$Builder:<init>(), CorsConfig$Builder:<init>(String[])),
		CorsConfig:withOrigins(String[]) to listOf(CorsConfig$Builder:<init>(String[])),
		CorsConfig:<init>(CorsConfig$Builder-CorsConfig$1) to listOf(CorsConfig:<init>(CorsConfig$Builder)),
		CorsHandler:<init>(CorsConfig) to listOf(ChannelHandlerAdapter:<init>()),
		CorsHandler:channelRead(ChannelHandlerContext-Object) to listOf(CorsConfig:isCorsSupportEnabled(), CorsHandler:isPreflightRequest(HttpRequest), CorsHandler:handlePreflight(ChannelHandlerContext-HttpRequest), CorsConfig:isShortCurcuit(), CorsHandler:validateOrigin(), CorsHandler:forbidden(ChannelHandlerContext-HttpRequest), ChannelHandlerContext:fireChannelRead(Object)),
		CorsHandler:handlePreflight(ChannelHandlerContext-HttpRequest) to listOf(HttpRequest:protocolVersion(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-boolean-boolean), CorsHandler:setOrigin(HttpResponse), CorsHandler:setAllowMethods(HttpResponse), CorsHandler:setAllowHeaders(HttpResponse), CorsHandler:setAllowCredentials(HttpResponse), CorsHandler:setMaxAge(HttpResponse), CorsHandler:setPreflightHeaders(HttpResponse), ReferenceCountUtil:release(Object), ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener)),
		CorsHandler:setPreflightHeaders(HttpResponse) to listOf(HttpResponse:headers(), CorsConfig:preflightResponseHeaders(), HttpHeaders:add(TextHeaders)),
		CorsHandler:setOrigin(HttpResponse) to listOf(HttpRequest:headers(), HttpHeaders:get(Object), CorsConfig:isNullOriginAllowed(), CorsHandler:setAnyOrigin(HttpResponse), CorsConfig:isAnyOriginSupported(), CorsConfig:isCredentialsAllowed(), CorsHandler:echoRequestOrigin(HttpResponse), CorsHandler:setVaryHeader(HttpResponse), CorsHandler:setAnyOrigin(HttpResponse), CorsConfig:origins(), CorsHandler:setOrigin(HttpResponse-CharSequence), CorsHandler:setVaryHeader(HttpResponse), CorsConfig:origins(), InternalLogger:debug(String)),
		CorsHandler:validateOrigin() to listOf(CorsConfig:isAnyOriginSupported(), HttpRequest:headers(), HttpHeaders:get(Object), CorsConfig:isNullOriginAllowed(), CorsConfig:origins()),
		CorsHandler:echoRequestOrigin(HttpResponse) to listOf(HttpRequest:headers(), HttpHeaders:get(Object), CorsHandler:setOrigin(HttpResponse-CharSequence)),
		CorsHandler:setVaryHeader(HttpResponse) to listOf(HttpResponse:headers(), HttpHeaders:set(CharSequence-CharSequence)),
		CorsHandler:setAnyOrigin(HttpResponse) to listOf(CorsHandler:setOrigin(HttpResponse-CharSequence)),
		CorsHandler:setOrigin(HttpResponse-CharSequence) to listOf(HttpResponse:headers(), HttpHeaders:set(CharSequence-CharSequence)),
		CorsHandler:setAllowCredentials(HttpResponse) to listOf(CorsConfig:isCredentialsAllowed(), HttpResponse:headers(), HttpHeaders:get(Object), HttpResponse:headers(), HttpHeaders:set(CharSequence-CharSequence)),
		CorsHandler:isPreflightRequest(HttpRequest) to listOf(HttpRequest:headers(), HttpRequest:method(), HttpMethod:equals(Object), HttpHeaders:contains(Object), HttpHeaders:contains(Object)),
		CorsHandler:setExposeHeaders(HttpResponse) to listOf(CorsConfig:exposedHeaders(), HttpResponse:headers(), CorsConfig:exposedHeaders(), HttpHeaders:set(CharSequence-Iterable)),
		CorsHandler:setAllowMethods(HttpResponse) to listOf(HttpResponse:headers(), CorsConfig:allowedRequestMethods(), HttpHeaders:setObject(CharSequence-Iterable)),
		CorsHandler:setAllowHeaders(HttpResponse) to listOf(HttpResponse:headers(), CorsConfig:allowedRequestHeaders(), HttpHeaders:set(CharSequence-Iterable)),
		CorsHandler:setMaxAge(HttpResponse) to listOf(HttpResponse:headers(), CorsConfig:maxAge(), HttpHeaders:setLong(CharSequence-long)),
		CorsHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(CorsConfig:isCorsSupportEnabled(), CorsHandler:setOrigin(HttpResponse), CorsHandler:setAllowCredentials(HttpResponse), CorsHandler:setAllowHeaders(HttpResponse), CorsHandler:setExposeHeaders(HttpResponse), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		CorsHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(InternalLogger:error(String-Throwable), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		CorsHandler:forbidden(ChannelHandlerContext-HttpRequest) to listOf(HttpRequest:protocolVersion(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener), ReferenceCountUtil:release(Object)),
		CorsHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		CorsConfig$Builder:preflightResponseHeader(CharSequence-Object[]) to listOf(CorsConfig$ConstantValueGenerator:<init>(Object-CorsConfig$1), CorsConfig$Builder:preflightResponseHeader(CharSequence-Iterable)),
		CorsConfig$Builder:preflightResponseHeader(CharSequence-Iterable) to listOf(CorsConfig$ConstantValueGenerator:<init>(Object-CorsConfig$1)),
		CorsConfig$Builder:build() to listOf(CorsConfig$DateValueGenerator:<init>(), CorsConfig$ConstantValueGenerator:<init>(Object-CorsConfig$1), CorsConfig:<init>(CorsConfig$Builder-CorsConfig$1)),
		CorsConfig$DateValueGenerator:call() to listOf(CorsConfig$DateValueGenerator:call()),
		CorsConfig$ConstantValueGenerator:<init>(Object-CorsConfig$1) to listOf(CorsConfig$ConstantValueGenerator:<init>(Object)),
		DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:<init>(boolean) to listOf(DefaultHttpHeaders$HttpHeadersNameConverter:<init>(boolean)),
		DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:convertName(CharSequence) to listOf(DefaultHttpHeaders$HttpHeadersNameConverter:convertName(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence)),
		DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:convertName(Object) to listOf(DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:convertName(CharSequence)),
		HttpHeaderDateFormat:get() to listOf(FastThreadLocal:get()),
		HttpHeaderDateFormat:<init>() to listOf(HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:<init>(), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:<init>(), HttpHeaderDateFormat:setTimeZone(TimeZone)),
		HttpHeaderDateFormat:<init>(HttpHeaderDateFormat$1) to listOf(HttpHeaderDateFormat:<init>()),
		HttpHeaderDateFormat:<clinit>() to listOf(HttpHeaderDateFormat$1:<init>()),
		HttpContentEncoder$State:values() to listOf(HttpContentEncoder$State[]:clone()),
		HttpContentEncoder$State:<clinit>() to listOf(HttpContentEncoder$State:<init>(String-int), HttpContentEncoder$State:<init>(String-int), HttpContentEncoder$State:<init>(String-int)),
		ClientCookieEncoder:encode(String-String) to listOf(DefaultCookie:<init>(String-String), ClientCookieEncoder:encode(Cookie)),
		ClientCookieEncoder:encode(Cookie) to listOf(CookieEncoderUtil:stringBuilder(), ClientCookieEncoder:encode(StringBuilder-Cookie), CookieEncoderUtil:stripTrailingSeparator(StringBuilder)),
		ClientCookieEncoder:encode(Cookie[]) to listOf(CookieEncoderUtil:stringBuilder(), ClientCookieEncoder:encode(StringBuilder-Cookie), CookieEncoderUtil:stripTrailingSeparatorOrNull(StringBuilder)),
		ClientCookieEncoder:encode(Iterable) to listOf(CookieEncoderUtil:stringBuilder(), ClientCookieEncoder:encode(StringBuilder-Cookie), CookieEncoderUtil:stripTrailingSeparatorOrNull(StringBuilder)),
		ClientCookieEncoder:encode(StringBuilder-Cookie) to listOf(Cookie:rawValue(), Cookie:rawValue(), Cookie:value(), Cookie:value(), Cookie:name(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String)),
		HttpHeaderUtil:isKeepAlive(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), HttpMessage:protocolVersion(), HttpVersion:isKeepAliveDefault(), AsciiString:equalsIgnoreCase(CharSequence), AsciiString:equalsIgnoreCase(CharSequence)),
		HttpHeaderUtil:setKeepAlive(HttpMessage-boolean) to listOf(HttpMessage:headers(), HttpMessage:protocolVersion(), HttpVersion:isKeepAliveDefault(), HttpHeaders:remove(Object), HttpHeaders:set(CharSequence-CharSequence), HttpHeaders:set(CharSequence-CharSequence), HttpHeaders:remove(Object)),
		HttpHeaderUtil:getContentLength(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:getLong(Object), HttpHeaderUtil:getWebSocketContentLength(HttpMessage)),
		HttpHeaderUtil:getContentLength(HttpMessage-long) to listOf(HttpMessage:headers(), HttpHeaders:getLong(Object), HttpHeaderUtil:getWebSocketContentLength(HttpMessage)),
		HttpHeaderUtil:getWebSocketContentLength(HttpMessage) to listOf(HttpMessage:headers(), HttpRequest:method(), HttpMethod:equals(Object), HttpHeaders:contains(Object), HttpHeaders:contains(Object), HttpResponse:status(), HttpResponseStatus:code(), HttpHeaders:contains(Object), HttpHeaders:contains(Object)),
		HttpHeaderUtil:setContentLength(HttpMessage-long) to listOf(HttpMessage:headers(), HttpHeaders:setLong(CharSequence-long)),
		HttpHeaderUtil:isContentLengthSet(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:contains(Object)),
		HttpHeaderUtil:is100ContinueExpected(HttpMessage) to listOf(HttpMessage:protocolVersion(), HttpVersion:compareTo(HttpVersion), HttpMessage:headers(), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), HttpMessage:headers(), HttpHeaders:contains(CharSequence-CharSequence-boolean)),
		HttpHeaderUtil:set100ContinueExpected(HttpMessage-boolean) to listOf(HttpMessage:headers(), HttpHeaders:set(CharSequence-CharSequence), HttpMessage:headers(), HttpHeaders:remove(Object)),
		HttpHeaderUtil:isTransferEncodingChunked(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:contains(CharSequence-CharSequence-boolean)),
		HttpHeaderUtil:setTransferEncodingChunked(HttpMessage-boolean) to listOf(HttpMessage:headers(), HttpHeaders:add(CharSequence-CharSequence), HttpMessage:headers(), HttpHeaders:remove(Object), HttpMessage:headers(), HttpHeaders:getAll(Object), AsciiString:equalsIgnoreCase(CharSequence), HttpMessage:headers(), HttpHeaders:remove(Object), HttpMessage:headers(), HttpHeaders:set(CharSequence-Iterable)),
		HttpHeaderUtil:encodeAscii0(CharSequence-ByteBuf) to listOf(ByteBuf:writeByte(int)),
		QueryStringDecoder:<init>(String) to listOf(QueryStringDecoder:<init>(String-Charset)),
		QueryStringDecoder:<init>(String-boolean) to listOf(QueryStringDecoder:<init>(String-Charset-boolean)),
		QueryStringDecoder:<init>(String-Charset) to listOf(QueryStringDecoder:<init>(String-Charset-boolean)),
		QueryStringDecoder:<init>(String-Charset-boolean) to listOf(QueryStringDecoder:<init>(String-Charset-boolean-int)),
		QueryStringDecoder:<init>(URI) to listOf(QueryStringDecoder:<init>(URI-Charset)),
		QueryStringDecoder:<init>(URI-Charset) to listOf(QueryStringDecoder:<init>(URI-Charset-int)),
		QueryStringDecoder:parameters() to listOf(QueryStringDecoder:path(), QueryStringDecoder:decodeParams(String), QueryStringDecoder:decodeParams(String)),
		QueryStringDecoder:decodeParams(String) to listOf(QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:addParam(Map-String-String)),
		QueryStringDecoder:decodeComponent(String) to listOf(QueryStringDecoder:decodeComponent(String-Charset)),
		QueryStringDecoder:decodeComponent(String-Charset) to listOf(QueryStringDecoder:decodeHexNibble(char), QueryStringDecoder:decodeHexNibble(char)),
		HttpChunkedInput:isEndOfInput() to listOf(ChunkedInput:isEndOfInput()),
		HttpChunkedInput:close() to listOf(ChunkedInput:close()),
		HttpChunkedInput:readChunk(ChannelHandlerContext) to listOf(ChunkedInput:isEndOfInput(), ChunkedInput:readChunk(ChannelHandlerContext), DefaultHttpContent:<init>(ByteBuf), HttpChunkedInput:readChunk(ChannelHandlerContext)),
		HttpChunkedInput:length() to listOf(ChunkedInput:length()),
		HttpChunkedInput:progress() to listOf(ChunkedInput:progress()),
		ServerCookieEncoder:encode(String-String) to listOf(DefaultCookie:<init>(String-String), ServerCookieEncoder:encode(Cookie)),
		ServerCookieEncoder:encode(Cookie) to listOf(CookieEncoderUtil:stringBuilder(), Cookie:name(), Cookie:value(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Cookie:maxAge(), Cookie:maxAge(), CookieEncoderUtil:add(StringBuilder-String-long), Cookie:maxAge(), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:format(Date), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Cookie:path(), Cookie:path(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Cookie:domain(), Cookie:domain(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Cookie:isSecure(), Cookie:isHttpOnly(), CookieEncoderUtil:stripTrailingSeparator(StringBuilder)),
		ServerCookieEncoder:encode(Cookie[]) to listOf(ServerCookieEncoder:encode(Cookie)),
		ServerCookieEncoder:encode(Collection) to listOf(ServerCookieEncoder:encode(Cookie)),
		ServerCookieEncoder:encode(Iterable) to listOf(ServerCookieEncoder:encode(Cookie)),
		HttpHeaderNames:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		HttpServerUpgradeHandler:<init>(HttpServerUpgradeHandler$SourceCodec-Collection-int) to listOf(HttpObjectAggregator:<init>(int), HttpServerUpgradeHandler$UpgradeCodec:protocol()),
		HttpServerUpgradeHandler:decode(ChannelHandlerContext-HttpObject-List) to listOf(HttpServerUpgradeHandler:isUpgradeRequest(HttpObject), ReferenceCountUtil:retain(Object), ReferenceCountUtil:retain(Object), HttpObjectAggregator:decode(ChannelHandlerContext-Object-List), HttpServerUpgradeHandler:upgrade(ChannelHandlerContext-FullHttpRequest)),
		HttpServerUpgradeHandler:isUpgradeRequest(HttpObject) to listOf(HttpRequest:headers(), HttpHeaders:get(Object)),
		HttpServerUpgradeHandler:upgrade(ChannelHandlerContext-FullHttpRequest) to listOf(FullHttpRequest:headers(), HttpHeaders:get(Object), HttpServerUpgradeHandler:selectUpgradeCodec(CharSequence), FullHttpRequest:headers(), HttpHeaders:get(Object), HttpServerUpgradeHandler$UpgradeCodec:requiredUpgradeHeaders(), HttpServerUpgradeHandler:splitHeader(CharSequence), FullHttpRequest:headers(), HttpHeaders:contains(Object), HttpServerUpgradeHandler$UpgradeCodec:protocol(), HttpServerUpgradeHandler$UpgradeEvent:<init>(String-FullHttpRequest-HttpServerUpgradeHandler$1), HttpServerUpgradeHandler:createUpgradeResponse(HttpServerUpgradeHandler$UpgradeCodec), HttpServerUpgradeHandler$UpgradeCodec:prepareUpgradeResponse(ChannelHandlerContext-FullHttpRequest-FullHttpResponse), ChannelHandlerContext:writeAndFlush(Object), HttpServerUpgradeHandler$1:<init>(HttpServerUpgradeHandler-ChannelHandlerContext-HttpServerUpgradeHandler$UpgradeCodec-FullHttpRequest-FullHttpResponse-HttpServerUpgradeHandler$UpgradeEvent), ChannelFuture:addListener(GenericFutureListener)),
		HttpServerUpgradeHandler:selectUpgradeCodec(CharSequence) to listOf(HttpServerUpgradeHandler:splitHeader(CharSequence)),
		HttpServerUpgradeHandler:createUpgradeResponse(HttpServerUpgradeHandler$UpgradeCodec) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), DefaultFullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), DefaultFullHttpResponse:headers(), HttpServerUpgradeHandler$UpgradeCodec:protocol(), HttpHeaders:add(CharSequence-CharSequence), DefaultFullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence)),
		HttpServerUpgradeHandler:decode(ChannelHandlerContext-Object-List) to listOf(HttpServerUpgradeHandler:decode(ChannelHandlerContext-HttpObject-List)),
		DefaultHttpHeaders$HttpHeadersValidationConverter:<init>(boolean) to listOf(DefaultTextHeaders$DefaultTextValueTypeConverter:<init>()),
		DefaultHttpHeaders$HttpHeadersValidationConverter:convertObject(Object) to listOf(HttpHeaderDateFormat:get(), HttpHeaderDateFormat:format(Date), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:format(Date), DefaultHttpHeaders$HttpHeadersValidationConverter:validateValue(AsciiString), DefaultHttpHeaders$HttpHeadersValidationConverter:validateValue(CharSequence), DefaultHttpHeaders$HttpHeadersValidationConverter:convertObject(Object)),
		DefaultHttpHeaders$HttpHeadersValidationConverter:validateValue(AsciiString) to listOf(AsciiString:arrayOffset(), AsciiString:length(), AsciiString:array(), DefaultHttpHeaders$HttpHeadersValidationConverter:validateValueChar(CharSequence-int-char)),
		DefaultHttpHeaders$HttpHeadersValidationConverter:validateValue(CharSequence) to listOf(DefaultHttpHeaders$HttpHeadersValidationConverter:validateValueChar(CharSequence-int-char)),
		HttpClientUpgradeHandler:<init>(HttpClientUpgradeHandler$SourceCodec-HttpClientUpgradeHandler$UpgradeCodec-int) to listOf(HttpObjectAggregator:<init>(int)),
		HttpClientUpgradeHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(HttpObjectAggregator:write(ChannelHandlerContext-Object-ChannelPromise), ChannelPromise:setFailure(Throwable), HttpClientUpgradeHandler:setUpgradeRequestHeaders(ChannelHandlerContext-HttpRequest), HttpObjectAggregator:write(ChannelHandlerContext-Object-ChannelPromise), ChannelHandlerContext:fireUserEventTriggered(Object)),
		HttpClientUpgradeHandler:decode(ChannelHandlerContext-HttpObject-List) to listOf(FullHttpResponse:retain(), HttpObjectAggregator:decode(ChannelHandlerContext-Object-List), FullHttpResponse:status(), HttpResponseStatus:equals(Object), ChannelHandlerContext:fireUserEventTriggered(Object), HttpClientUpgradeHandler:removeThisHandler(ChannelHandlerContext), FullHttpResponse:headers(), HttpHeaders:get(Object), HttpClientUpgradeHandler$UpgradeCodec:protocol(), AsciiString:equalsIgnoreCase(CharSequence-CharSequence), HttpClientUpgradeHandler$SourceCodec:upgradeFrom(ChannelHandlerContext), HttpClientUpgradeHandler$UpgradeCodec:upgradeTo(ChannelHandlerContext-FullHttpResponse), ChannelHandlerContext:fireUserEventTriggered(Object), FullHttpResponse:release(), HttpClientUpgradeHandler:removeThisHandler(ChannelHandlerContext), ReferenceCountUtil:release(Object), ChannelHandlerContext:fireExceptionCaught(Throwable), HttpClientUpgradeHandler:removeThisHandler(ChannelHandlerContext)),
		HttpClientUpgradeHandler:removeThisHandler(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:remove(String)),
		HttpClientUpgradeHandler:setUpgradeRequestHeaders(ChannelHandlerContext-HttpRequest) to listOf(HttpRequest:headers(), HttpClientUpgradeHandler$UpgradeCodec:protocol(), HttpHeaders:set(CharSequence-CharSequence), HttpClientUpgradeHandler$UpgradeCodec:setUpgradeHeaders(ChannelHandlerContext-HttpRequest), HttpRequest:headers(), HttpHeaders:set(CharSequence-CharSequence)),
		HttpClientUpgradeHandler:decode(ChannelHandlerContext-Object-List) to listOf(HttpClientUpgradeHandler:decode(ChannelHandlerContext-HttpObject-List)),
		DefaultLastHttpContent$TrailingHttpHeaders:<init>(boolean) to listOf(DefaultHttpHeaders:<init>(boolean-DefaultHeaders$NameConverter-boolean)),
		DefaultLastHttpContent$TrailingHttpHeaders:<clinit>() to listOf(DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:<init>(boolean), DefaultLastHttpContent$TrailingHttpHeaders$TrailingHttpHeadersNameConverter:<init>(boolean)),
		HttpResponseStatus:newStatus(int-String) to listOf(HttpResponseStatus:<init>(int-String-boolean)),
		HttpResponseStatus:valueOf(int) to listOf(HttpResponseStatus:<init>(int)),
		HttpResponseStatus:parseLine(CharSequence) to listOf(HttpResponseStatus:valueOf(int), HttpResponseStatus:valueOf(int), HttpResponseStatus:reasonPhrase(), AsciiString:toString(), HttpResponseStatus:<init>(int-String)),
		HttpResponseStatus:<init>(int) to listOf(HttpStatusClass:valueOf(int), HttpStatusClass:defaultReasonPhrase(), HttpResponseStatus:<init>(int-String-boolean)),
		HttpResponseStatus:<init>(int-String) to listOf(HttpResponseStatus:<init>(int-String-boolean)),
		HttpResponseStatus:<init>(int-String-boolean) to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		HttpResponseStatus:codeClass() to listOf(HttpStatusClass:valueOf(int)),
		HttpResponseStatus:hashCode() to listOf(HttpResponseStatus:code()),
		HttpResponseStatus:equals(Object) to listOf(HttpResponseStatus:code(), HttpResponseStatus:code()),
		HttpResponseStatus:compareTo(HttpResponseStatus) to listOf(HttpResponseStatus:code(), HttpResponseStatus:code()),
		HttpResponseStatus:toString() to listOf(AsciiString:length()),
		HttpResponseStatus:compareTo(Object) to listOf(HttpResponseStatus:compareTo(HttpResponseStatus)),
		HttpResponseStatus:<clinit>() to listOf(HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String), HttpResponseStatus:newStatus(int-String)),
		DefaultHttpObject:equals(Object) to listOf(DefaultHttpObject:decoderResult(), DefaultHttpObject:decoderResult()),
		QueryStringEncoder:<init>(String) to listOf(QueryStringEncoder:<init>(String-Charset)),
		QueryStringEncoder:addParam(String-String) to listOf(QueryStringEncoder$Param:<init>(String-String)),
		QueryStringEncoder:toUri() to listOf(QueryStringEncoder:toString()),
		QueryStringEncoder:toString() to listOf(QueryStringEncoder:encodeComponent(String-Charset), QueryStringEncoder:encodeComponent(String-Charset)),
		HttpContentCompressor:<init>() to listOf(HttpContentCompressor:<init>(int)),
		HttpContentCompressor:<init>(int) to listOf(HttpContentCompressor:<init>(int-int-int)),
		HttpContentCompressor:<init>(int-int-int) to listOf(HttpContentEncoder:<init>()),
		HttpContentCompressor:beginEncode(HttpResponse-CharSequence) to listOf(HttpResponse:headers(), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), HttpContentCompressor:determineWrapper(CharSequence), ZlibWrapper:ordinal(), ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int), EmbeddedChannel:<init>(ChannelHandler[]), HttpContentEncoder$Result:<init>(String-EmbeddedChannel)),
		HttpContentCompressor:determineWrapper(CharSequence) to listOf(StringUtil:split(String-char)),
		HttpObjectAggregator$AggregatedFullHttpResponse:<init>(HttpResponse-ByteBuf-HttpHeaders) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:<init>(HttpMessage-ByteBuf-HttpHeaders)),
		HttpObjectAggregator$AggregatedFullHttpResponse:copy(boolean-ByteBuf) to listOf(HttpObjectAggregator$AggregatedFullHttpResponse:protocolVersion(), HttpObjectAggregator$AggregatedFullHttpResponse:status(), HttpObjectAggregator$AggregatedFullHttpResponse:content(), ByteBuf:copy(), Unpooled:buffer(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), DefaultFullHttpResponse:headers(), HttpObjectAggregator$AggregatedFullHttpResponse:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpResponse:trailingHeaders(), HttpObjectAggregator$AggregatedFullHttpResponse:trailingHeaders(), HttpHeaders:set(TextHeaders)),
		HttpObjectAggregator$AggregatedFullHttpResponse:copy(ByteBuf) to listOf(HttpObjectAggregator$AggregatedFullHttpResponse:copy(boolean-ByteBuf), HttpObjectAggregator$AggregatedFullHttpResponse:copy(ByteBuf)),
		HttpObjectAggregator$AggregatedFullHttpResponse:copy() to listOf(HttpObjectAggregator$AggregatedFullHttpResponse:copy(boolean-ByteBuf), HttpObjectAggregator$AggregatedFullHttpResponse:copy(), HttpObjectAggregator$AggregatedFullHttpResponse:copy(), HttpObjectAggregator$AggregatedFullHttpResponse:copy(), HttpObjectAggregator$AggregatedFullHttpResponse:copy()),
		HttpObjectAggregator$AggregatedFullHttpResponse:duplicate() to listOf(HttpObjectAggregator$AggregatedFullHttpResponse:protocolVersion(), HttpObjectAggregator$AggregatedFullHttpResponse:status(), HttpObjectAggregator$AggregatedFullHttpResponse:content(), ByteBuf:duplicate(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), DefaultFullHttpResponse:headers(), HttpObjectAggregator$AggregatedFullHttpResponse:headers(), HttpHeaders:set(TextHeaders), DefaultFullHttpResponse:trailingHeaders(), HttpObjectAggregator$AggregatedFullHttpResponse:trailingHeaders(), HttpHeaders:set(TextHeaders), HttpObjectAggregator$AggregatedFullHttpResponse:duplicate(), HttpObjectAggregator$AggregatedFullHttpResponse:duplicate(), HttpObjectAggregator$AggregatedFullHttpResponse:duplicate(), HttpObjectAggregator$AggregatedFullHttpResponse:duplicate()),
		HttpObjectAggregator$AggregatedFullHttpResponse:setStatus(HttpResponseStatus) to listOf(HttpResponse:setStatus(HttpResponseStatus), HttpObjectAggregator$AggregatedFullHttpResponse:setStatus(HttpResponseStatus)),
		HttpObjectAggregator$AggregatedFullHttpResponse:status() to listOf(HttpResponse:status()),
		HttpObjectAggregator$AggregatedFullHttpResponse:setProtocolVersion(HttpVersion) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:setProtocolVersion(HttpVersion), HttpObjectAggregator$AggregatedFullHttpResponse:setProtocolVersion(HttpVersion), HttpObjectAggregator$AggregatedFullHttpResponse:setProtocolVersion(HttpVersion), HttpObjectAggregator$AggregatedFullHttpResponse:setProtocolVersion(HttpVersion)),
		HttpObjectAggregator$AggregatedFullHttpResponse:retain(int) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:retain(int), HttpObjectAggregator$AggregatedFullHttpResponse:retain(int), HttpObjectAggregator$AggregatedFullHttpResponse:retain(int), HttpObjectAggregator$AggregatedFullHttpResponse:retain(int), HttpObjectAggregator$AggregatedFullHttpResponse:retain(int), HttpObjectAggregator$AggregatedFullHttpResponse:retain(int)),
		HttpObjectAggregator$AggregatedFullHttpResponse:retain() to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:retain(), HttpObjectAggregator$AggregatedFullHttpResponse:retain(), HttpObjectAggregator$AggregatedFullHttpResponse:retain(), HttpObjectAggregator$AggregatedFullHttpResponse:retain(), HttpObjectAggregator$AggregatedFullHttpResponse:retain(), HttpObjectAggregator$AggregatedFullHttpResponse:retain()),
		HttpObjectAggregator$AggregatedFullHttpResponse:touch(Object) to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:touch(Object), HttpObjectAggregator$AggregatedFullHttpResponse:touch(Object), HttpObjectAggregator$AggregatedFullHttpResponse:touch(Object), HttpObjectAggregator$AggregatedFullHttpResponse:touch(Object), HttpObjectAggregator$AggregatedFullHttpResponse:touch(Object), HttpObjectAggregator$AggregatedFullHttpResponse:touch(Object)),
		HttpObjectAggregator$AggregatedFullHttpResponse:touch() to listOf(HttpObjectAggregator$AggregatedFullHttpMessage:touch(), HttpObjectAggregator$AggregatedFullHttpResponse:touch(), HttpObjectAggregator$AggregatedFullHttpResponse:touch(), HttpObjectAggregator$AggregatedFullHttpResponse:touch(), HttpObjectAggregator$AggregatedFullHttpResponse:touch(), HttpObjectAggregator$AggregatedFullHttpResponse:touch()),
		HttpObjectAggregator$AggregatedFullHttpResponse:toString() to listOf(HttpMessageUtil:appendFullResponse(StringBuilder-FullHttpResponse)),
		HttpContentCompressor$1:<clinit>() to listOf(ZlibWrapper:values(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal()),
		WebSocketServerHandshaker$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:pipeline(), ChannelPipeline:remove(String), ChannelPromise:setSuccess(), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		WebSocketServerHandshaker$1:operationComplete(Future) to listOf(WebSocketServerHandshaker$1:operationComplete(ChannelFuture)),
		WebSocket08FrameEncoder:<init>(boolean) to listOf(MessageToMessageEncoder:<init>()),
		WebSocket08FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-List) to listOf(WebSocketFrame:content(), ByteBuf:readableBytes(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), WebSocketFrame:isFinalFragment(), WebSocketFrame:rsv(), TooLongFrameException:<init>(String), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeLong(long), ByteBuf:writeBytes(byte[]), ByteBuf:order(), ByteBuf:order(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:getInt(int), ByteBuf:writeInt(int), ByteBuf:getByte(int), ByteBuf:writeByte(int), ByteBuf:writableBytes(), ByteBuf:readableBytes(), ByteBuf:writeBytes(ByteBuf), ByteBuf:retain(), ByteBuf:release(), ByteBuf:release()),
		WebSocket08FrameEncoder:encode(ChannelHandlerContext-Object-List) to listOf(WebSocket08FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocket08FrameEncoder:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketServerHandshaker08:<init>(String-String-boolean-int) to listOf(WebSocketServerHandshaker08:<init>(String-String-boolean-int-boolean)),
		WebSocketServerHandshaker08:<init>(String-String-boolean-int-boolean) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker08:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(TextHeaders), FullHttpRequest:headers(), HttpHeaders:get(Object), WebSocketHandshakeException:<init>(String), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpRequest:headers(), HttpHeaders:getAndConvert(Object), WebSocketServerHandshaker08:selectSubprotocol(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence)),
		WebSocketServerHandshaker08:newWebsocketDecoder() to listOf(WebSocketServerHandshaker08:maxFramePayloadLength(), WebSocket08FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocketServerHandshaker08:newWebSocketEncoder() to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean)),
		WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker07:newHandshakeRequest() to listOf(WebSocketClientHandshaker07:uri(), WebSocketUtil:randomBytes(int), WebSocketUtil:base64(byte[]), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), WebSocketClientHandshaker07:expectedSubprotocol(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(TextHeaders)),
		WebSocketClientHandshaker07:verify(FullHttpResponse) to listOf(FullHttpResponse:headers(), FullHttpResponse:status(), HttpResponseStatus:equals(Object), FullHttpResponse:status(), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker07:newWebsocketDecoder() to listOf(WebSocketClientHandshaker07:maxFramePayloadLength(), WebSocket07FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocketClientHandshaker07:newWebSocketEncoder() to listOf(WebSocket07FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker07:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketVersion:values() to listOf(WebSocketVersion[]:clone()),
		WebSocketVersion:<clinit>() to listOf(WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int)),
		WebSocketClientHandshaker$2:<init>(WebSocketClientHandshaker-Channel-ChannelPromise) to listOf(SimpleChannelInboundHandler:<init>()),
		WebSocketClientHandshaker$2:messageReceived(ChannelHandlerContext-FullHttpResponse) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		WebSocketClientHandshaker$2:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelPromise:setFailure(Throwable)),
		WebSocketClientHandshaker$2:channelInactive(ChannelHandlerContext) to listOf(WebSocketClientHandshaker:access$000(), ChannelPromise:tryFailure(Throwable), ChannelHandlerContext:fireChannelInactive()),
		WebSocketClientHandshaker$2:messageReceived(ChannelHandlerContext-Object) to listOf(WebSocketClientHandshaker$2:messageReceived(ChannelHandlerContext-FullHttpResponse)),
		WebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		WebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf)),
		WebSocketFrame:toString() to listOf(StringUtil:simpleClassName(Object), WebSocketFrame:content()),
		WebSocketFrame:retain() to listOf(DefaultByteBufHolder:retain(), WebSocketFrame:retain(), WebSocketFrame:retain()),
		WebSocketFrame:retain(int) to listOf(DefaultByteBufHolder:retain(int), WebSocketFrame:retain(int), WebSocketFrame:retain(int)),
		WebSocketFrame:touch() to listOf(DefaultByteBufHolder:touch(), WebSocketFrame:touch(), WebSocketFrame:touch()),
		WebSocketFrame:touch(Object) to listOf(DefaultByteBufHolder:touch(Object), WebSocketFrame:touch(Object), WebSocketFrame:touch(Object)),
		WebSocketFrame:duplicate() to listOf(WebSocketFrame:duplicate()),
		WebSocketFrame:copy() to listOf(WebSocketFrame:copy()),
		WebSocketClientHandshaker:handshake(Channel) to listOf(Channel:newPromise(), WebSocketClientHandshaker:handshake(Channel-ChannelPromise)),
		WebSocketClientHandshaker:handshake(Channel-ChannelPromise) to listOf(WebSocketClientHandshaker:newHandshakeRequest(), Channel:pipeline(), ChannelPipeline:get(Class), Channel:pipeline(), ChannelPipeline:get(Class), ChannelPromise:setFailure(Throwable), Channel:writeAndFlush(Object), WebSocketClientHandshaker$1:<init>(WebSocketClientHandshaker-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse) to listOf(WebSocketClientHandshaker:verify(FullHttpResponse), FullHttpResponse:headers(), HttpHeaders:getAndConvert(Object), WebSocketClientHandshaker:setActualSubprotocol(String), StringUtil:split(String-char), WebSocketClientHandshaker:setActualSubprotocol(String), WebSocketHandshakeException:<init>(String), WebSocketClientHandshaker:setHandshakeComplete(), Channel:pipeline(), ChannelPipeline:get(Class), ChannelPipeline:remove(ChannelHandler), ChannelPipeline:get(Class), ChannelPipeline:remove(ChannelHandler), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelHandlerContext:name(), WebSocketClientHandshaker:newWebsocketDecoder(), ChannelPipeline:replace(String-String-ChannelHandler), ChannelPipeline:get(Class), ChannelPipeline:remove(Class), ChannelHandlerContext:name(), WebSocketClientHandshaker:newWebsocketDecoder(), ChannelPipeline:replace(String-String-ChannelHandler)),
		WebSocketClientHandshaker:processHandshake(Channel-HttpResponse) to listOf(Channel:newPromise(), WebSocketClientHandshaker:processHandshake(Channel-HttpResponse-ChannelPromise)),
		WebSocketClientHandshaker:processHandshake(Channel-HttpResponse-ChannelPromise) to listOf(WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), Channel:pipeline(), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:name(), HttpObjectAggregator:<init>(int), ChannelPipeline:addAfter(String-String-ChannelHandler), WebSocketClientHandshaker$2:<init>(WebSocketClientHandshaker-Channel-ChannelPromise), ChannelPipeline:addAfter(String-String-ChannelHandler), ReferenceCountUtil:retain(Object), ChannelHandlerContext:fireChannelRead(Object), ChannelPromise:setFailure(Throwable)),
		WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame) to listOf(Channel:newPromise(), WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise)),
		WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise) to listOf(Channel:writeAndFlush(Object-ChannelPromise)),
		WebSocketClientProtocolHandshakeHandler:<init>(WebSocketClientHandshaker) to listOf(ChannelHandlerAdapter:<init>()),
		WebSocketClientProtocolHandshakeHandler:channelActive(ChannelHandlerContext) to listOf(ChannelHandlerAdapter:channelActive(ChannelHandlerContext), ChannelHandlerContext:channel(), WebSocketClientHandshaker:handshake(Channel), WebSocketClientProtocolHandshakeHandler$1:<init>(WebSocketClientProtocolHandshakeHandler-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketClientProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object), WebSocketClientHandshaker:isHandshakeComplete(), ChannelHandlerContext:channel(), WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse), ChannelHandlerContext:fireUserEventTriggered(Object), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), FullHttpResponse:release(), FullHttpResponse:release()),
		WebSocket07FrameDecoder:<init>(boolean-boolean-int) to listOf(WebSocket07FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocket07FrameDecoder:<init>(boolean-boolean-int-boolean) to listOf(WebSocket08FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocketUtil:base64(byte[]) to listOf(Unpooled:wrappedBuffer(byte[]), Base64:encode(ByteBuf), ByteBuf:toString(Charset), ByteBuf:release()),
		WebSocketUtil:randomBytes(int) to listOf(WebSocketUtil:randomNumber(int-int)),
		WebSocketServerProtocolHandler$1:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		WebSocketServerProtocolHandler$1:channelRead(ChannelHandlerContext-Object) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), ChannelHandlerContext:channel(), Channel:writeAndFlush(Object), ChannelHandlerContext:fireChannelRead(Object)),
		Utf8FrameValidator:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		Utf8FrameValidator:channelRead(ChannelHandlerContext-Object) to listOf(WebSocketFrame:isFinalFragment(), Utf8Validator:isChecking(), WebSocketFrame:content(), Utf8FrameValidator:checkUTF8String(ChannelHandlerContext-ByteBuf), Utf8Validator:finish(), WebSocketFrame:content(), Utf8FrameValidator:checkUTF8String(ChannelHandlerContext-ByteBuf), Utf8Validator:isChecking(), WebSocketFrame:content(), Utf8FrameValidator:checkUTF8String(ChannelHandlerContext-ByteBuf), ChannelHandlerAdapter:channelRead(ChannelHandlerContext-Object)),
		Utf8FrameValidator:checkUTF8String(ChannelHandlerContext-ByteBuf) to listOf(Utf8Validator:<init>(), Utf8Validator:check(ByteBuf), ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener)),
		PongWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		PongWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		PongWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		PongWebSocketFrame:copy() to listOf(PongWebSocketFrame:isFinalFragment(), PongWebSocketFrame:rsv(), PongWebSocketFrame:content(), ByteBuf:copy(), PongWebSocketFrame:<init>(boolean-int-ByteBuf), PongWebSocketFrame:copy(), PongWebSocketFrame:copy()),
		PongWebSocketFrame:duplicate() to listOf(PongWebSocketFrame:isFinalFragment(), PongWebSocketFrame:rsv(), PongWebSocketFrame:content(), ByteBuf:duplicate(), PongWebSocketFrame:<init>(boolean-int-ByteBuf), PongWebSocketFrame:duplicate(), PongWebSocketFrame:duplicate()),
		PongWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), PongWebSocketFrame:retain(), PongWebSocketFrame:retain(), PongWebSocketFrame:retain()),
		PongWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), PongWebSocketFrame:retain(int), PongWebSocketFrame:retain(int), PongWebSocketFrame:retain(int)),
		PongWebSocketFrame:touch() to listOf(WebSocketFrame:touch(), PongWebSocketFrame:touch(), PongWebSocketFrame:touch(), PongWebSocketFrame:touch()),
		PongWebSocketFrame:touch(Object) to listOf(WebSocketFrame:touch(Object), PongWebSocketFrame:touch(Object), PongWebSocketFrame:touch(Object), PongWebSocketFrame:touch(Object)),
		BinaryWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		BinaryWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		BinaryWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		BinaryWebSocketFrame:copy() to listOf(BinaryWebSocketFrame:isFinalFragment(), BinaryWebSocketFrame:rsv(), BinaryWebSocketFrame:content(), ByteBuf:copy(), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), BinaryWebSocketFrame:copy(), BinaryWebSocketFrame:copy()),
		BinaryWebSocketFrame:duplicate() to listOf(BinaryWebSocketFrame:isFinalFragment(), BinaryWebSocketFrame:rsv(), BinaryWebSocketFrame:content(), ByteBuf:duplicate(), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), BinaryWebSocketFrame:duplicate(), BinaryWebSocketFrame:duplicate()),
		BinaryWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), BinaryWebSocketFrame:retain(), BinaryWebSocketFrame:retain(), BinaryWebSocketFrame:retain()),
		BinaryWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), BinaryWebSocketFrame:retain(int), BinaryWebSocketFrame:retain(int), BinaryWebSocketFrame:retain(int)),
		BinaryWebSocketFrame:touch() to listOf(WebSocketFrame:touch(), BinaryWebSocketFrame:touch(), BinaryWebSocketFrame:touch(), BinaryWebSocketFrame:touch()),
		BinaryWebSocketFrame:touch(Object) to listOf(WebSocketFrame:touch(Object), BinaryWebSocketFrame:touch(Object), BinaryWebSocketFrame:touch(Object), BinaryWebSocketFrame:touch(Object)),
		WebSocket07FrameEncoder:<init>(boolean) to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		WebSocketClientExtensionHandler:<init>(WebSocketClientExtensionHandshaker[]) to listOf(ChannelHandlerAdapter:<init>()),
		WebSocketClientExtensionHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(WebSocketExtensionUtil:isWebsocketUpgrade(HttpMessage), HttpRequest:headers(), HttpHeaders:getAndConvert(Object), WebSocketClientExtensionHandshaker:newRequestData(), WebSocketExtensionData:name(), WebSocketExtensionData:parameters(), WebSocketExtensionUtil:appendExtension(String-String-Map), HttpRequest:headers(), HttpHeaders:set(CharSequence-CharSequence), ChannelHandlerAdapter:write(ChannelHandlerContext-Object-ChannelPromise)),
		WebSocketClientExtensionHandler:channelRead(ChannelHandlerContext-Object) to listOf(WebSocketExtensionUtil:isWebsocketUpgrade(HttpMessage), HttpResponse:headers(), HttpHeaders:getAndConvert(Object), WebSocketExtensionUtil:extractExtensions(String), WebSocketClientExtensionHandshaker:handshakeExtension(WebSocketExtensionData), WebSocketClientExtension:rsv(), WebSocketClientExtension:rsv(), CodecException:<init>(String), WebSocketClientExtension:newExtensionDecoder(), WebSocketClientExtension:newExtensionEncoder(), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:remove(String), ChannelHandlerAdapter:channelRead(ChannelHandlerContext-Object)),
		PerMessageDeflateServerExtensionHandshaker:<init>() to listOf(PerMessageDeflateServerExtensionHandshaker:<init>(int-boolean-int-boolean-boolean)),
		PerMessageDeflateServerExtensionHandshaker:handshakeExtension(WebSocketExtensionData) to listOf(WebSocketExtensionData:name(), WebSocketExtensionData:parameters(), PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:<init>(int-boolean-int-boolean-int)),
		WebSocketClientCompressionHandler:<init>() to listOf(PerMessageDeflateClientExtensionHandshaker:<init>(), DeflateFrameClientExtensionHandshaker:<init>(boolean), DeflateFrameClientExtensionHandshaker:<init>(boolean), WebSocketClientExtensionHandler:<init>(WebSocketClientExtensionHandshaker[])),
		PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:newExtensionEncoder() to listOf(PerMessageDeflateEncoder:<init>(int-int-boolean)),
		PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:newExtensionDecoder() to listOf(PerMessageDeflateDecoder:<init>(boolean)),
		PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension:newReponseData() to listOf(WebSocketExtensionData:<init>(String-Map)),
		PerMessageDeflateClientExtensionHandshaker$PermessageDeflateExtension:newExtensionEncoder() to listOf(PerMessageDeflateClientExtensionHandshaker:access$000(PerMessageDeflateClientExtensionHandshaker), PerMessageDeflateEncoder:<init>(int-int-boolean)),
		PerMessageDeflateClientExtensionHandshaker$PermessageDeflateExtension:newExtensionDecoder() to listOf(PerMessageDeflateDecoder:<init>(boolean)),
		DeflateEncoder:<init>(int-int-boolean) to listOf(WebSocketExtensionEncoder:<init>()),
		DeflateEncoder:encode(ChannelHandlerContext-WebSocketFrame-List) to listOf(ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int), EmbeddedChannel:<init>(ChannelHandler[]), WebSocketFrame:content(), ByteBuf:retain(), EmbeddedChannel:writeOutbound(Object[]), ChannelHandlerContext:alloc(), ByteBufAllocator:compositeBuffer(), EmbeddedChannel:readOutbound(), ByteBuf:isReadable(), ByteBuf:release(), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int), CompositeByteBuf:numComponents(), CompositeByteBuf:release(), CodecException:<init>(String), WebSocketFrame:isFinalFragment(), DeflateEncoder:cleanup(), DeflateEncoder:removeFrameTail(WebSocketFrame), CompositeByteBuf:readableBytes(), CompositeByteBuf:slice(int-int), WebSocketFrame:isFinalFragment(), DeflateEncoder:rsv(WebSocketFrame), TextWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocketFrame:isFinalFragment(), DeflateEncoder:rsv(WebSocketFrame), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocketFrame:isFinalFragment(), DeflateEncoder:rsv(WebSocketFrame), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf), CodecException:<init>(String)),
		DeflateEncoder:handlerRemoved(ChannelHandlerContext) to listOf(DeflateEncoder:cleanup(), WebSocketExtensionEncoder:handlerRemoved(ChannelHandlerContext)),
		DeflateEncoder:channelInactive(ChannelHandlerContext) to listOf(DeflateEncoder:cleanup(), WebSocketExtensionEncoder:channelInactive(ChannelHandlerContext)),
		DeflateEncoder:cleanup() to listOf(EmbeddedChannel:finish(), EmbeddedChannel:readOutbound(), ByteBuf:release()),
		DeflateEncoder:encode(ChannelHandlerContext-Object-List) to listOf(DeflateEncoder:encode(ChannelHandlerContext-WebSocketFrame-List)),
		DeflateFrameClientExtensionHandshaker:<init>(boolean) to listOf(DeflateFrameClientExtensionHandshaker:<init>(int-boolean)),
		DeflateFrameClientExtensionHandshaker:newRequestData() to listOf(WebSocketExtensionData:<init>(String-Map)),
		DeflateFrameClientExtensionHandshaker:handshakeExtension(WebSocketExtensionData) to listOf(WebSocketExtensionData:name(), WebSocketExtensionData:name(), WebSocketExtensionData:parameters(), DeflateFrameClientExtensionHandshaker$DeflateFrameClientExtension:<init>(int)),
		DeflateFrameClientExtensionHandshaker$DeflateFrameClientExtension:newExtensionEncoder() to listOf(PerFrameDeflateEncoder:<init>(int-int-boolean)),
		DeflateFrameClientExtensionHandshaker$DeflateFrameClientExtension:newExtensionDecoder() to listOf(PerFrameDeflateDecoder:<init>(boolean)),
		DeflateFrameServerExtensionHandshaker:<init>() to listOf(DeflateFrameServerExtensionHandshaker:<init>(int)),
		DeflateFrameServerExtensionHandshaker:handshakeExtension(WebSocketExtensionData) to listOf(WebSocketExtensionData:name(), WebSocketExtensionData:name(), WebSocketExtensionData:parameters(), WebSocketExtensionData:name(), DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:<init>(int-String)),
		DeflateDecoder:<init>(boolean) to listOf(WebSocketExtensionDecoder:<init>()),
		DeflateDecoder:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(CodecException:<init>(String), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), EmbeddedChannel:<init>(ChannelHandler[]), WebSocketFrame:content(), ByteBuf:retain(), EmbeddedChannel:writeInbound(Object[]), DeflateDecoder:appendFrameTail(WebSocketFrame), Unpooled:wrappedBuffer(byte[]), EmbeddedChannel:writeInbound(Object[]), ChannelHandlerContext:alloc(), ByteBufAllocator:compositeBuffer(), EmbeddedChannel:readInbound(), ByteBuf:isReadable(), ByteBuf:release(), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int), CompositeByteBuf:numComponents(), CompositeByteBuf:release(), CodecException:<init>(String), WebSocketFrame:isFinalFragment(), DeflateDecoder:cleanup(), WebSocketFrame:isFinalFragment(), DeflateDecoder:newRsv(WebSocketFrame), TextWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocketFrame:isFinalFragment(), DeflateDecoder:newRsv(WebSocketFrame), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocketFrame:isFinalFragment(), DeflateDecoder:newRsv(WebSocketFrame), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf), CodecException:<init>(String)),
		DeflateDecoder:handlerRemoved(ChannelHandlerContext) to listOf(DeflateDecoder:cleanup(), WebSocketExtensionDecoder:handlerRemoved(ChannelHandlerContext)),
		DeflateDecoder:channelInactive(ChannelHandlerContext) to listOf(DeflateDecoder:cleanup(), WebSocketExtensionDecoder:channelInactive(ChannelHandlerContext)),
		DeflateDecoder:cleanup() to listOf(EmbeddedChannel:finish(), EmbeddedChannel:readOutbound(), ByteBuf:release()),
		DeflateDecoder:decode(ChannelHandlerContext-Object-List) to listOf(DeflateDecoder:decode(ChannelHandlerContext-WebSocketFrame-List)),
		DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:newExtensionEncoder() to listOf(PerFrameDeflateEncoder:<init>(int-int-boolean)),
		DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:newExtensionDecoder() to listOf(PerFrameDeflateDecoder:<init>(boolean)),
		DeflateFrameServerExtensionHandshaker$DeflateFrameServerExtension:newReponseData() to listOf(WebSocketExtensionData:<init>(String-Map)),
		PerMessageDeflateDecoder:<init>(boolean) to listOf(DeflateDecoder:<init>(boolean)),
		PerMessageDeflateDecoder:acceptInboundMessage(Object) to listOf(WebSocketFrame:rsv()),
		PerMessageDeflateDecoder:newRsv(WebSocketFrame) to listOf(WebSocketFrame:rsv(), WebSocketFrame:rsv(), WebSocketFrame:rsv()),
		PerMessageDeflateDecoder:appendFrameTail(WebSocketFrame) to listOf(WebSocketFrame:isFinalFragment()),
		PerMessageDeflateDecoder:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(DeflateDecoder:decode(ChannelHandlerContext-WebSocketFrame-List), WebSocketFrame:isFinalFragment()),
		PerMessageDeflateDecoder:decode(ChannelHandlerContext-Object-List) to listOf(PerMessageDeflateDecoder:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerCompressionHandler:<init>() to listOf(PerMessageDeflateServerExtensionHandshaker:<init>(), DeflateFrameServerExtensionHandshaker:<init>(), WebSocketServerExtensionHandler:<init>(WebSocketServerExtensionHandshaker[])),
		PerFrameDeflateEncoder:<init>(int-int-boolean) to listOf(DeflateEncoder:<init>(int-int-boolean)),
		PerFrameDeflateEncoder:acceptOutboundMessage(Object) to listOf(WebSocketFrame:content(), ByteBuf:readableBytes(), WebSocketFrame:rsv()),
		PerFrameDeflateEncoder:rsv(WebSocketFrame) to listOf(WebSocketFrame:rsv()),
		PerFrameDeflateDecoder:<init>(boolean) to listOf(DeflateDecoder:<init>(boolean)),
		PerFrameDeflateDecoder:acceptInboundMessage(Object) to listOf(WebSocketFrame:rsv()),
		PerFrameDeflateDecoder:newRsv(WebSocketFrame) to listOf(WebSocketFrame:rsv()),
		PerMessageDeflateClientExtensionHandshaker:<init>() to listOf(PerMessageDeflateClientExtensionHandshaker:<init>(int-boolean-int-boolean-boolean)),
		PerMessageDeflateClientExtensionHandshaker:newRequestData() to listOf(WebSocketExtensionData:<init>(String-Map)),
		PerMessageDeflateClientExtensionHandshaker:handshakeExtension(WebSocketExtensionData) to listOf(WebSocketExtensionData:name(), WebSocketExtensionData:parameters(), PerMessageDeflateClientExtensionHandshaker$PermessageDeflateExtension:<init>(PerMessageDeflateClientExtensionHandshaker-boolean-int-boolean-int)),
		PerMessageDeflateEncoder:<init>(int-int-boolean) to listOf(DeflateEncoder:<init>(int-int-boolean)),
		PerMessageDeflateEncoder:acceptOutboundMessage(Object) to listOf(WebSocketFrame:rsv()),
		PerMessageDeflateEncoder:rsv(WebSocketFrame) to listOf(WebSocketFrame:rsv(), WebSocketFrame:rsv()),
		PerMessageDeflateEncoder:removeFrameTail(WebSocketFrame) to listOf(WebSocketFrame:isFinalFragment()),
		PerMessageDeflateEncoder:encode(ChannelHandlerContext-WebSocketFrame-List) to listOf(DeflateEncoder:encode(ChannelHandlerContext-WebSocketFrame-List), WebSocketFrame:isFinalFragment()),
		PerMessageDeflateEncoder:encode(ChannelHandlerContext-Object-List) to listOf(PerMessageDeflateEncoder:encode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketExtensionDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		WebSocketServerExtensionHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), WebSocketServerExtensionHandler:access$000(WebSocketServerExtensionHandler), WebSocketServerExtension:newExtensionDecoder(), WebSocketServerExtension:newExtensionEncoder(), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:remove(String)),
		WebSocketServerExtensionHandler$1:operationComplete(Future) to listOf(WebSocketServerExtensionHandler$1:operationComplete(ChannelFuture)),
		WebSocketExtensionEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		WebSocketServerExtensionHandler:<init>(WebSocketServerExtensionHandshaker[]) to listOf(ChannelHandlerAdapter:<init>()),
		WebSocketServerExtensionHandler:channelRead(ChannelHandlerContext-Object) to listOf(WebSocketExtensionUtil:isWebsocketUpgrade(HttpMessage), HttpRequest:headers(), HttpHeaders:getAndConvert(Object), WebSocketExtensionUtil:extractExtensions(String), WebSocketServerExtensionHandshaker:handshakeExtension(WebSocketExtensionData), WebSocketServerExtension:rsv(), WebSocketServerExtension:rsv(), ChannelHandlerAdapter:channelRead(ChannelHandlerContext-Object)),
		WebSocketServerExtensionHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(WebSocketExtensionUtil:isWebsocketUpgrade(HttpMessage), HttpResponse:headers(), HttpHeaders:getAndConvert(Object), WebSocketServerExtension:newReponseData(), WebSocketExtensionData:name(), WebSocketExtensionData:parameters(), WebSocketExtensionUtil:appendExtension(String-String-Map), WebSocketServerExtensionHandler$1:<init>(WebSocketServerExtensionHandler-ChannelHandlerContext), ChannelPromise:addListener(GenericFutureListener), HttpResponse:headers(), HttpHeaders:set(CharSequence-CharSequence), ChannelHandlerAdapter:write(ChannelHandlerContext-Object-ChannelPromise)),
		WebSocketExtensionUtil:isWebsocketUpgrade(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:contains(CharSequence-CharSequence-boolean), HttpMessage:headers(), HttpHeaders:contains(CharSequence-CharSequence-boolean)),
		WebSocketExtensionUtil:extractExtensions(String) to listOf(StringUtil:split(String-char), StringUtil:split(String-char), WebSocketExtensionData:<init>(String-Map)),
		CloseWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		CloseWebSocketFrame:<init>(int-String) to listOf(CloseWebSocketFrame:<init>(boolean-int-int-String)),
		CloseWebSocketFrame:<init>(boolean-int) to listOf(Unpooled:buffer(int), CloseWebSocketFrame:<init>(boolean-int-ByteBuf)),
		CloseWebSocketFrame:<init>(boolean-int-int-String) to listOf(CloseWebSocketFrame:newBinaryData(int-String), WebSocketFrame:<init>(boolean-int-ByteBuf)),
		CloseWebSocketFrame:newBinaryData(int-String) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]), ByteBuf:readerIndex(int)),
		CloseWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		CloseWebSocketFrame:statusCode() to listOf(CloseWebSocketFrame:content(), ByteBuf:capacity(), ByteBuf:readerIndex(int), ByteBuf:readShort(), ByteBuf:readerIndex(int)),
		CloseWebSocketFrame:reasonText() to listOf(CloseWebSocketFrame:content(), ByteBuf:capacity(), ByteBuf:readerIndex(int), ByteBuf:toString(Charset), ByteBuf:readerIndex(int)),
		CloseWebSocketFrame:copy() to listOf(CloseWebSocketFrame:isFinalFragment(), CloseWebSocketFrame:rsv(), CloseWebSocketFrame:content(), ByteBuf:copy(), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), CloseWebSocketFrame:copy(), CloseWebSocketFrame:copy()),
		CloseWebSocketFrame:duplicate() to listOf(CloseWebSocketFrame:isFinalFragment(), CloseWebSocketFrame:rsv(), CloseWebSocketFrame:content(), ByteBuf:duplicate(), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), CloseWebSocketFrame:duplicate(), CloseWebSocketFrame:duplicate()),
		CloseWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), CloseWebSocketFrame:retain(), CloseWebSocketFrame:retain(), CloseWebSocketFrame:retain()),
		CloseWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), CloseWebSocketFrame:retain(int), CloseWebSocketFrame:retain(int), CloseWebSocketFrame:retain(int)),
		CloseWebSocketFrame:touch() to listOf(WebSocketFrame:touch(), CloseWebSocketFrame:touch(), CloseWebSocketFrame:touch(), CloseWebSocketFrame:touch()),
		CloseWebSocketFrame:touch(Object) to listOf(WebSocketFrame:touch(Object), CloseWebSocketFrame:touch(Object), CloseWebSocketFrame:touch(Object), CloseWebSocketFrame:touch(Object)),
		WebSocket13FrameDecoder:<init>(boolean-boolean-int) to listOf(WebSocket13FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocket13FrameDecoder:<init>(boolean-boolean-int-boolean) to listOf(WebSocket08FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocket08FrameDecoder$1:<clinit>() to listOf(WebSocket08FrameDecoder$State:values(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal()),
		WebSocketServerHandshaker00:<init>(String-String-int) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker00:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(FullHttpRequest:headers(), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), FullHttpRequest:headers(), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), FullHttpRequest:headers(), HttpHeaders:contains(Object), FullHttpRequest:headers(), HttpHeaders:contains(Object), HttpResponseStatus:<init>(int-String), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(TextHeaders), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), FullHttpRequest:headers(), HttpHeaders:get(Object), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), WebSocketServerHandshaker00:uri(), HttpHeaders:add(CharSequence-CharSequence), FullHttpRequest:headers(), HttpHeaders:getAndConvert(Object), WebSocketServerHandshaker00:selectSubprotocol(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpRequest:headers(), HttpHeaders:getAndConvert(Object), FullHttpRequest:headers(), HttpHeaders:getAndConvert(Object), FullHttpRequest:content(), ByteBuf:readLong(), Unpooled:buffer(int), ByteBuf:writeInt(int), ByteBuf:writeInt(int), ByteBuf:writeLong(long), FullHttpResponse:content(), ByteBuf:array(), WebSocketUtil:md5(byte[]), ByteBuf:writeBytes(byte[]), FullHttpResponse:headers(), FullHttpRequest:headers(), HttpHeaders:get(Object), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), WebSocketServerHandshaker00:uri(), HttpHeaders:add(CharSequence-CharSequence), FullHttpRequest:headers(), HttpHeaders:getAndConvert(Object), FullHttpResponse:headers(), WebSocketServerHandshaker00:selectSubprotocol(String), HttpHeaders:add(CharSequence-CharSequence)),
		WebSocketServerHandshaker00:close(Channel-CloseWebSocketFrame-ChannelPromise) to listOf(Channel:writeAndFlush(Object-ChannelPromise)),
		WebSocketServerHandshaker00:newWebsocketDecoder() to listOf(WebSocketServerHandshaker00:maxFramePayloadLength(), WebSocket00FrameDecoder:<init>(int)),
		WebSocketServerHandshaker00:newWebSocketEncoder() to listOf(WebSocket00FrameEncoder:<init>()),
		WebSocketServerHandshaker00:<clinit>() to listOf(AsciiString:<init>(CharSequence)),
		WebSocketServerHandshaker$2:<init>(WebSocketServerHandshaker-Channel-HttpHeaders-ChannelPromise) to listOf(SimpleChannelInboundHandler:<init>()),
		WebSocketServerHandshaker$2:messageReceived(ChannelHandlerContext-FullHttpRequest) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise)),
		WebSocketServerHandshaker$2:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelPromise:tryFailure(Throwable), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		WebSocketServerHandshaker$2:channelInactive(ChannelHandlerContext) to listOf(WebSocketServerHandshaker:access$000(), ChannelPromise:tryFailure(Throwable), ChannelHandlerContext:fireChannelInactive()),
		WebSocketServerHandshaker$2:messageReceived(ChannelHandlerContext-Object) to listOf(WebSocketServerHandshaker$2:messageReceived(ChannelHandlerContext-FullHttpRequest)),
		WebSocketServerProtocolHandshakeHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:fireUserEventTriggered(Object)),
		WebSocketServerProtocolHandshakeHandler$1:operationComplete(Future) to listOf(WebSocketServerProtocolHandshakeHandler$1:operationComplete(ChannelFuture)),
		WebSocket08FrameDecoder$State:values() to listOf(WebSocket08FrameDecoder$State[]:clone()),
		WebSocket08FrameDecoder$State:<clinit>() to listOf(WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int)),
		Utf8Validator:check(ByteBuf) to listOf(ByteBuf:forEachByte(ByteBufProcessor)),
		Utf8Validator:finish() to listOf(CorruptedFrameException:<init>(String)),
		Utf8Validator:process(byte) to listOf(CorruptedFrameException:<init>(String)),
		WebSocketServerHandshaker13:<init>(String-String-boolean-int) to listOf(WebSocketServerHandshaker13:<init>(String-String-boolean-int-boolean)),
		WebSocketServerHandshaker13:<init>(String-String-boolean-int-boolean) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker13:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(TextHeaders), FullHttpRequest:headers(), HttpHeaders:get(Object), WebSocketHandshakeException:<init>(String), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpRequest:headers(), HttpHeaders:getAndConvert(Object), WebSocketServerHandshaker13:selectSubprotocol(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence)),
		WebSocketServerHandshaker13:newWebsocketDecoder() to listOf(WebSocketServerHandshaker13:maxFramePayloadLength(), WebSocket13FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocketServerHandshaker13:newWebSocketEncoder() to listOf(WebSocket13FrameEncoder:<init>(boolean)),
		WebSocket13FrameEncoder:<init>(boolean) to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		TextWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		TextWebSocketFrame:<init>(String) to listOf(TextWebSocketFrame:fromText(String), WebSocketFrame:<init>(ByteBuf)),
		TextWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		TextWebSocketFrame:<init>(boolean-int-String) to listOf(TextWebSocketFrame:fromText(String), WebSocketFrame:<init>(boolean-int-ByteBuf)),
		TextWebSocketFrame:fromText(String) to listOf(Unpooled:copiedBuffer(CharSequence-Charset)),
		TextWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		TextWebSocketFrame:text() to listOf(TextWebSocketFrame:content(), ByteBuf:toString(Charset)),
		TextWebSocketFrame:copy() to listOf(TextWebSocketFrame:isFinalFragment(), TextWebSocketFrame:rsv(), TextWebSocketFrame:content(), ByteBuf:copy(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), TextWebSocketFrame:copy(), TextWebSocketFrame:copy()),
		TextWebSocketFrame:duplicate() to listOf(TextWebSocketFrame:isFinalFragment(), TextWebSocketFrame:rsv(), TextWebSocketFrame:content(), ByteBuf:duplicate(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), TextWebSocketFrame:duplicate(), TextWebSocketFrame:duplicate()),
		TextWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), TextWebSocketFrame:retain(), TextWebSocketFrame:retain(), TextWebSocketFrame:retain()),
		TextWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), TextWebSocketFrame:retain(int), TextWebSocketFrame:retain(int), TextWebSocketFrame:retain(int)),
		TextWebSocketFrame:touch() to listOf(WebSocketFrame:touch(), TextWebSocketFrame:touch(), TextWebSocketFrame:touch(), TextWebSocketFrame:touch()),
		TextWebSocketFrame:touch(Object) to listOf(WebSocketFrame:touch(Object), TextWebSocketFrame:touch(Object), TextWebSocketFrame:touch(Object), TextWebSocketFrame:touch(Object)),
		WebSocketClientProtocolHandshakeHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:fireUserEventTriggered(Object)),
		WebSocketClientProtocolHandshakeHandler$1:operationComplete(Future) to listOf(WebSocketClientProtocolHandshakeHandler$1:operationComplete(ChannelFuture)),
		WebSocket08FrameDecoder:<init>(boolean-boolean-int) to listOf(WebSocket08FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocket08FrameDecoder:<init>(boolean-boolean-int-boolean) to listOf(ByteToMessageDecoder:<init>()),
		WebSocket08FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(WebSocket08FrameDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), WebSocket08FrameDecoder$State:ordinal(), ByteBuf:isReadable(), ByteBuf:readByte(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), ByteBuf:isReadable(), ByteBuf:readByte(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:readableBytes(), ByteBuf:readUnsignedShort(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:readableBytes(), ByteBuf:readLong(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), WebSocket08FrameDecoder:toFrameLength(long), ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int), WebSocket08FrameDecoder:unmask(ByteBuf), PingWebSocketFrame:<init>(boolean-int-ByteBuf), ByteBuf:release(), PongWebSocketFrame:<init>(boolean-int-ByteBuf), ByteBuf:release(), WebSocket08FrameDecoder:checkCloseFrameBody(ChannelHandlerContext-ByteBuf), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), ByteBuf:release(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), ByteBuf:release(), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), ByteBuf:release(), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf), ByteBuf:release(), ByteBuf:release(), ByteBuf:isReadable(), ByteBuf:readByte()),
		WebSocket08FrameDecoder:unmask(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:order(), ByteBuf:getInt(int), ByteBuf:setInt(int-int), ByteBuf:getByte(int), ByteBuf:setByte(int-int)),
		WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String) to listOf(CorruptedFrameException:<init>(String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-CorruptedFrameException)),
		WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-CorruptedFrameException) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), CloseWebSocketFrame:<init>(int-String), ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener)),
		WebSocket08FrameDecoder:toFrameLength(long) to listOf(TooLongFrameException:<init>(String)),
		WebSocket08FrameDecoder:checkCloseFrameBody(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:readableBytes(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readShort(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:isReadable(), Utf8Validator:<init>(), Utf8Validator:check(ByteBuf), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-CorruptedFrameException), ByteBuf:readerIndex(int)),
		WebSocket08FrameDecoder:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketServerProtocolHandler$ServerHandshakeStateEvent:values() to listOf(WebSocketServerProtocolHandler$ServerHandshakeStateEvent[]:clone()),
		WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<clinit>() to listOf(WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<init>(String-int)),
		WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean)),
		WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker08:newHandshakeRequest() to listOf(WebSocketClientHandshaker08:uri(), WebSocketUtil:randomBytes(int), WebSocketUtil:base64(byte[]), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), WebSocketClientHandshaker08:expectedSubprotocol(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(TextHeaders)),
		WebSocketClientHandshaker08:verify(FullHttpResponse) to listOf(FullHttpResponse:headers(), FullHttpResponse:status(), HttpResponseStatus:equals(Object), FullHttpResponse:status(), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker08:newWebsocketDecoder() to listOf(WebSocketClientHandshaker08:maxFramePayloadLength(), WebSocket08FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocketClientHandshaker08:newWebSocketEncoder() to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker08:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders) to listOf(WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int)),
		WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean)),
		WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean) to listOf(WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), WebSocketClientHandshaker00:<init>(URI-WebSocketVersion-String-HttpHeaders-int), WebSocketHandshakeException:<init>(String)),
		WebSocket00FrameEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		WebSocket00FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-List) to listOf(WebSocketFrame:content(), ByteBuf:duplicate(), ByteBuf:retain(), ByteBuf:duplicate(), ByteBuf:duplicate(), WebSocketFrame:content(), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:retain(), ByteBuf:release(), ByteBuf:release()),
		WebSocket00FrameEncoder:encode(ChannelHandlerContext-Object-List) to listOf(WebSocket00FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocket00FrameEncoder:<clinit>() to listOf(Unpooled:directBuffer(int-int), ByteBuf:writeByte(int), Unpooled:unreleasableBuffer(ByteBuf), Unpooled:directBuffer(int-int), ByteBuf:writeByte(int), Unpooled:unreleasableBuffer(ByteBuf), Unpooled:directBuffer(int-int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), Unpooled:unreleasableBuffer(ByteBuf)),
		WebSocket00FrameDecoder:<init>() to listOf(WebSocket00FrameDecoder:<init>(int)),
		WebSocket00FrameDecoder:<init>(int) to listOf(ReplayingDecoder:<init>()),
		WebSocket00FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(WebSocket00FrameDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), ByteBuf:readByte(), WebSocket00FrameDecoder:decodeBinaryFrame(ChannelHandlerContext-byte-ByteBuf), WebSocket00FrameDecoder:decodeTextFrame(ChannelHandlerContext-ByteBuf)),
		WebSocket00FrameDecoder:decodeBinaryFrame(ChannelHandlerContext-byte-ByteBuf) to listOf(ByteBuf:readByte(), TooLongFrameException:<init>(), TooLongFrameException:<init>(), CloseWebSocketFrame:<init>(), ChannelHandlerContext:alloc(), ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int), BinaryWebSocketFrame:<init>(ByteBuf)),
		WebSocket00FrameDecoder:decodeTextFrame(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:readerIndex(), WebSocket00FrameDecoder:actualReadableBytes(), ByteBuf:indexOf(int-int-byte), TooLongFrameException:<init>(), TooLongFrameException:<init>(), ChannelHandlerContext:alloc(), ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:indexOf(int-int-byte), ByteBuf:release(), TextWebSocketFrame:<init>(ByteBuf)),
		ContinuationWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), ContinuationWebSocketFrame:<init>(ByteBuf)),
		ContinuationWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		ContinuationWebSocketFrame:<init>(boolean-int-String) to listOf(ContinuationWebSocketFrame:fromText(String), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf)),
		ContinuationWebSocketFrame:text() to listOf(ContinuationWebSocketFrame:content(), ByteBuf:toString(Charset)),
		ContinuationWebSocketFrame:fromText(String) to listOf(Unpooled:copiedBuffer(CharSequence-Charset)),
		ContinuationWebSocketFrame:copy() to listOf(ContinuationWebSocketFrame:isFinalFragment(), ContinuationWebSocketFrame:rsv(), ContinuationWebSocketFrame:content(), ByteBuf:copy(), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf), ContinuationWebSocketFrame:copy(), ContinuationWebSocketFrame:copy()),
		ContinuationWebSocketFrame:duplicate() to listOf(ContinuationWebSocketFrame:isFinalFragment(), ContinuationWebSocketFrame:rsv(), ContinuationWebSocketFrame:content(), ByteBuf:duplicate(), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf), ContinuationWebSocketFrame:duplicate(), ContinuationWebSocketFrame:duplicate()),
		ContinuationWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), ContinuationWebSocketFrame:retain(), ContinuationWebSocketFrame:retain(), ContinuationWebSocketFrame:retain()),
		ContinuationWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), ContinuationWebSocketFrame:retain(int), ContinuationWebSocketFrame:retain(int), ContinuationWebSocketFrame:retain(int)),
		ContinuationWebSocketFrame:touch() to listOf(WebSocketFrame:touch(), ContinuationWebSocketFrame:touch(), ContinuationWebSocketFrame:touch(), ContinuationWebSocketFrame:touch()),
		ContinuationWebSocketFrame:touch(Object) to listOf(WebSocketFrame:touch(Object), ContinuationWebSocketFrame:touch(Object), ContinuationWebSocketFrame:touch(Object), ContinuationWebSocketFrame:touch(Object)),
		WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean)),
		WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker13:newHandshakeRequest() to listOf(WebSocketClientHandshaker13:uri(), WebSocketUtil:randomBytes(int), WebSocketUtil:base64(byte[]), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), WebSocketClientHandshaker13:expectedSubprotocol(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(TextHeaders)),
		WebSocketClientHandshaker13:verify(FullHttpResponse) to listOf(FullHttpResponse:headers(), FullHttpResponse:status(), HttpResponseStatus:equals(Object), FullHttpResponse:status(), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker13:newWebsocketDecoder() to listOf(WebSocketClientHandshaker13:maxFramePayloadLength(), WebSocket13FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocketClientHandshaker13:newWebSocketEncoder() to listOf(WebSocket13FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker13:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketClientHandshaker00:<init>(URI-WebSocketVersion-String-HttpHeaders-int) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker00:newHandshakeRequest() to listOf(WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int), WebSocketClientHandshaker00:insertRandomCharacters(String), WebSocketClientHandshaker00:insertRandomCharacters(String), WebSocketClientHandshaker00:insertSpaces(String-int), WebSocketClientHandshaker00:insertSpaces(String-int), WebSocketUtil:randomBytes(int), WebSocketUtil:md5(byte[]), Unpooled:wrappedBuffer(byte[]), WebSocketClientHandshaker00:uri(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(CharSequence-CharSequence), WebSocketClientHandshaker00:expectedSubprotocol(), HttpHeaders:add(CharSequence-CharSequence), HttpHeaders:add(TextHeaders), HttpHeaders:setInt(CharSequence-int), FullHttpRequest:content(), ByteBuf:writeBytes(byte[])),
		WebSocketClientHandshaker00:verify(FullHttpResponse) to listOf(HttpResponseStatus:<init>(int-String), FullHttpResponse:status(), HttpResponseStatus:equals(Object), FullHttpResponse:status(), WebSocketHandshakeException:<init>(String), FullHttpResponse:headers(), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), HttpHeaders:get(Object), AsciiString:equalsIgnoreCase(CharSequence), WebSocketHandshakeException:<init>(String), FullHttpResponse:content(), ByteBuf:equals(Object), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker00:insertRandomCharacters(String) to listOf(WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int)),
		WebSocketClientHandshaker00:insertSpaces(String-int) to listOf(WebSocketUtil:randomNumber(int-int)),
		WebSocketClientHandshaker00:newWebsocketDecoder() to listOf(WebSocketClientHandshaker00:maxFramePayloadLength(), WebSocket00FrameDecoder:<init>(int)),
		WebSocketClientHandshaker00:newWebSocketEncoder() to listOf(WebSocket00FrameEncoder:<init>()),
		WebSocketClientHandshaker00:<clinit>() to listOf(AsciiString:<init>(CharSequence)),
		WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean-boolean) to listOf(WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean), WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean)),
		WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean) to listOf(WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean-boolean-boolean)),
		WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean)),
		WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean) to listOf(WebSocketProtocolHandler:<init>()),
		WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker) to listOf(WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean)),
		WebSocketClientProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(ChannelHandlerContext:close(), WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketClientProtocolHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), WebSocketClientProtocolHandshakeHandler:<init>(WebSocketClientHandshaker), ChannelPipeline:addBefore(String-String-ChannelHandler), ChannelPipeline:get(Class), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), Utf8FrameValidator:<init>(), ChannelPipeline:addBefore(String-String-ChannelHandler)),
		WebSocketClientProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(WebSocketProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable)),
		WebSocketClientProtocolHandler:decode(ChannelHandlerContext-Object-List) to listOf(WebSocketClientProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerProtocolHandshakeHandler:<init>(String-String-boolean-int-boolean) to listOf(ChannelHandlerAdapter:<init>()),
		WebSocketServerProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object) to listOf(FullHttpRequest:method(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), WebSocketServerProtocolHandshakeHandler:sendHttpResponse(ChannelHandlerContext-HttpRequest-HttpResponse), FullHttpRequest:release(), ChannelHandlerContext:pipeline(), WebSocketServerProtocolHandshakeHandler:getWebSocketLocation(ChannelPipeline-HttpRequest-String), WebSocketServerHandshakerFactory:<init>(String-String-boolean-int-boolean), WebSocketServerHandshakerFactory:newHandshaker(HttpRequest), ChannelHandlerContext:channel(), WebSocketServerHandshakerFactory:sendUnsupportedVersionResponse(Channel), ChannelHandlerContext:channel(), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest), WebSocketServerProtocolHandshakeHandler$1:<init>(WebSocketServerProtocolHandshakeHandler-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener), WebSocketServerProtocolHandler:setHandshaker(ChannelHandlerContext-WebSocketServerHandshaker), ChannelHandlerContext:pipeline(), WebSocketServerProtocolHandler:forbiddenHttpRequestResponder(), ChannelPipeline:replace(ChannelHandler-String-ChannelHandler), FullHttpRequest:release(), FullHttpRequest:release()),
		WebSocketServerProtocolHandshakeHandler:sendHttpResponse(ChannelHandlerContext-HttpRequest-HttpResponse) to listOf(ChannelHandlerContext:channel(), Channel:writeAndFlush(Object), HttpHeaderUtil:isKeepAlive(HttpMessage), HttpResponse:status(), HttpResponseStatus:code(), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketServerProtocolHandshakeHandler:getWebSocketLocation(ChannelPipeline-HttpRequest-String) to listOf(ChannelPipeline:get(Class), HttpRequest:headers(), HttpHeaders:get(Object)),
		WebSocketServerHandshakerFactory:<init>(String-String-boolean) to listOf(WebSocketServerHandshakerFactory:<init>(String-String-boolean-int)),
		WebSocketServerHandshakerFactory:<init>(String-String-boolean-int) to listOf(WebSocketServerHandshakerFactory:<init>(String-String-boolean-int-boolean)),
		WebSocketServerHandshakerFactory:newHandshaker(HttpRequest) to listOf(HttpRequest:headers(), HttpHeaders:get(Object), WebSocketVersion:toHttpHeaderValue(), WebSocketServerHandshaker13:<init>(String-String-boolean-int-boolean), WebSocketVersion:toHttpHeaderValue(), WebSocketServerHandshaker08:<init>(String-String-boolean-int-boolean), WebSocketVersion:toHttpHeaderValue(), WebSocketServerHandshaker07:<init>(String-String-boolean-int-boolean), WebSocketServerHandshaker00:<init>(String-String-int)),
		WebSocketServerHandshakerFactory:sendUnsupportedVersionResponse(Channel) to listOf(Channel:newPromise(), WebSocketServerHandshakerFactory:sendUnsupportedVersionResponse(Channel-ChannelPromise)),
		WebSocketServerHandshakerFactory:sendUnsupportedVersionResponse(Channel-ChannelPromise) to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), HttpResponse:headers(), WebSocketVersion:toHttpHeaderValue(), HttpHeaders:set(CharSequence-CharSequence), Channel:write(Object-ChannelPromise)),
		WebSocketFrameAggregator:<init>(int) to listOf(MessageAggregator:<init>(int)),
		WebSocketFrameAggregator:isLastContentMessage(ContinuationWebSocketFrame) to listOf(WebSocketFrameAggregator:isContentMessage(WebSocketFrame), ContinuationWebSocketFrame:isFinalFragment()),
		WebSocketFrameAggregator:isAggregated(WebSocketFrame) to listOf(WebSocketFrame:isFinalFragment(), WebSocketFrameAggregator:isContentMessage(WebSocketFrame), WebSocketFrameAggregator:isStartMessage(WebSocketFrame), WebSocketFrameAggregator:isContentMessage(WebSocketFrame)),
		WebSocketFrameAggregator:beginAggregation(WebSocketFrame-ByteBuf) to listOf(WebSocketFrame:rsv(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocketFrame:rsv(), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf)),
		WebSocketFrameAggregator:beginAggregation(Object-ByteBuf) to listOf(WebSocketFrameAggregator:beginAggregation(WebSocketFrame-ByteBuf)),
		WebSocketFrameAggregator:newContinueResponse(Object) to listOf(WebSocketFrameAggregator:newContinueResponse(WebSocketFrame)),
		WebSocketFrameAggregator:contentLength(Object) to listOf(WebSocketFrameAggregator:contentLength(WebSocketFrame)),
		WebSocketFrameAggregator:hasContentLength(Object) to listOf(WebSocketFrameAggregator:hasContentLength(WebSocketFrame)),
		WebSocketFrameAggregator:isAggregated(Object) to listOf(WebSocketFrameAggregator:isAggregated(WebSocketFrame)),
		WebSocketFrameAggregator:isLastContentMessage(ByteBufHolder) to listOf(WebSocketFrameAggregator:isLastContentMessage(ContinuationWebSocketFrame)),
		WebSocketFrameAggregator:isContentMessage(Object) to listOf(WebSocketFrameAggregator:isContentMessage(WebSocketFrame)),
		WebSocketFrameAggregator:isStartMessage(Object) to listOf(WebSocketFrameAggregator:isStartMessage(WebSocketFrame)),
		WebSocketClientHandshaker$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:pipeline(), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:name(), WebSocketClientHandshaker:newWebSocketEncoder(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelPromise:setSuccess(), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		WebSocketClientHandshaker$1:operationComplete(Future) to listOf(WebSocketClientHandshaker$1:operationComplete(ChannelFuture)),
		WebSocketProtocolHandler:<init>() to listOf(MessageToMessageDecoder:<init>()),
		WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(WebSocketFrame:content(), ByteBuf:retain(), ChannelHandlerContext:channel(), WebSocketFrame:content(), PongWebSocketFrame:<init>(ByteBuf), Channel:writeAndFlush(Object), WebSocketFrame:retain()),
		WebSocketProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:close()),
		WebSocketProtocolHandler:decode(ChannelHandlerContext-Object-List) to listOf(WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerProtocolHandler:<init>(String) to listOf(WebSocketServerProtocolHandler:<init>(String-String-boolean)),
		WebSocketServerProtocolHandler:<init>(String-String) to listOf(WebSocketServerProtocolHandler:<init>(String-String-boolean)),
		WebSocketServerProtocolHandler:<init>(String-String-boolean) to listOf(WebSocketServerProtocolHandler:<init>(String-String-boolean-int)),
		WebSocketServerProtocolHandler:<init>(String-String-boolean-int) to listOf(WebSocketServerProtocolHandler:<init>(String-String-boolean-int-boolean)),
		WebSocketServerProtocolHandler:<init>(String-String-boolean-int-boolean) to listOf(WebSocketProtocolHandler:<init>()),
		WebSocketServerProtocolHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), WebSocketServerProtocolHandshakeHandler:<init>(String-String-boolean-int-boolean), ChannelPipeline:addBefore(String-String-ChannelHandler), ChannelPipeline:get(Class), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), Utf8FrameValidator:<init>(), ChannelPipeline:addBefore(String-String-ChannelHandler)),
		WebSocketServerProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(WebSocketServerProtocolHandler:getHandshaker(ChannelHandlerContext), WebSocketFrame:retain(), ChannelHandlerContext:channel(), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame), ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener), WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(Unpooled:wrappedBuffer(byte[]), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), ChannelHandlerContext:channel(), Channel:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener), ChannelHandlerContext:close()),
		WebSocketServerProtocolHandler:getHandshaker(ChannelHandlerContext) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get()),
		WebSocketServerProtocolHandler:setHandshaker(ChannelHandlerContext-WebSocketServerHandshaker) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object)),
		WebSocketServerProtocolHandler:forbiddenHttpRequestResponder() to listOf(WebSocketServerProtocolHandler$1:<init>()),
		WebSocketServerProtocolHandler:decode(ChannelHandlerContext-Object-List) to listOf(WebSocketServerProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerProtocolHandler:<clinit>() to listOf(AttributeKey:valueOf(Class-String)),
		WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int) to listOf(StringUtil:split(String-char)),
		WebSocketServerHandshaker:handshake(Channel-FullHttpRequest) to listOf(Channel:newPromise(), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise)),
		WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise) to listOf(InternalLogger:isDebugEnabled(), WebSocketServerHandshaker:version(), InternalLogger:debug(String-Object-Object), WebSocketServerHandshaker:newHandshakeResponse(FullHttpRequest-HttpHeaders), Channel:pipeline(), ChannelPipeline:get(Class), ChannelPipeline:remove(Class), ChannelPipeline:get(Class), ChannelPipeline:remove(Class), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:name(), WebSocketServerHandshaker:newWebsocketDecoder(), ChannelPipeline:addBefore(String-String-ChannelHandler), ChannelHandlerContext:name(), WebSocketServerHandshaker:newWebSocketEncoder(), ChannelPipeline:addBefore(String-String-ChannelHandler), ChannelHandlerContext:name(), ChannelHandlerContext:name(), WebSocketServerHandshaker:newWebsocketDecoder(), ChannelPipeline:replace(String-String-ChannelHandler), ChannelPipeline:context(Class), ChannelHandlerContext:name(), WebSocketServerHandshaker:newWebSocketEncoder(), ChannelPipeline:addBefore(String-String-ChannelHandler), Channel:writeAndFlush(Object), WebSocketServerHandshaker$1:<init>(WebSocketServerHandshaker-String-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketServerHandshaker:handshake(Channel-HttpRequest) to listOf(Channel:newPromise(), WebSocketServerHandshaker:handshake(Channel-HttpRequest-HttpHeaders-ChannelPromise)),
		WebSocketServerHandshaker:handshake(Channel-HttpRequest-HttpHeaders-ChannelPromise) to listOf(WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise), InternalLogger:isDebugEnabled(), WebSocketServerHandshaker:version(), InternalLogger:debug(String-Object-Object), Channel:pipeline(), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:name(), HttpObjectAggregator:<init>(int), ChannelPipeline:addAfter(String-String-ChannelHandler), WebSocketServerHandshaker$2:<init>(WebSocketServerHandshaker-Channel-HttpHeaders-ChannelPromise), ChannelPipeline:addAfter(String-String-ChannelHandler), ReferenceCountUtil:retain(Object), ChannelHandlerContext:fireChannelRead(Object), ChannelPromise:setFailure(Throwable)),
		WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame) to listOf(Channel:newPromise(), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise)),
		WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise) to listOf(Channel:writeAndFlush(Object-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketServerHandshaker:selectSubprotocol(String) to listOf(StringUtil:split(String-char)),
		WebSocketServerHandshaker:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketServerHandshaker07:<init>(String-String-boolean-int) to listOf(WebSocketServerHandshaker07:<init>(String-String-boolean-int-boolean)),
		WebSocketServerHandshaker07:<init>(String-String-boolean-int-boolean) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker07:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(TextHeaders), FullHttpRequest:headers(), HttpHeaders:get(Object), WebSocketHandshakeException:<init>(String), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence), FullHttpRequest:headers(), HttpHeaders:getAndConvert(Object), WebSocketServerHandshaker07:selectSubprotocol(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), FullHttpResponse:headers(), HttpHeaders:add(CharSequence-CharSequence)),
		WebSocketServerHandshaker07:newWebsocketDecoder() to listOf(WebSocketServerHandshaker07:maxFramePayloadLength(), WebSocket07FrameDecoder:<init>(boolean-boolean-int-boolean)),
		WebSocketServerHandshaker07:newWebSocketEncoder() to listOf(WebSocket07FrameEncoder:<init>(boolean)),
		WebSocketClientProtocolHandler$ClientHandshakeStateEvent:values() to listOf(WebSocketClientProtocolHandler$ClientHandshakeStateEvent[]:clone()),
		WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<clinit>() to listOf(WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<init>(String-int), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<init>(String-int)),
		PingWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(boolean-int-ByteBuf)),
		PingWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		PingWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		PingWebSocketFrame:copy() to listOf(PingWebSocketFrame:isFinalFragment(), PingWebSocketFrame:rsv(), PingWebSocketFrame:content(), ByteBuf:copy(), PingWebSocketFrame:<init>(boolean-int-ByteBuf), PingWebSocketFrame:copy(), PingWebSocketFrame:copy()),
		PingWebSocketFrame:duplicate() to listOf(PingWebSocketFrame:isFinalFragment(), PingWebSocketFrame:rsv(), PingWebSocketFrame:content(), ByteBuf:duplicate(), PingWebSocketFrame:<init>(boolean-int-ByteBuf), PingWebSocketFrame:duplicate(), PingWebSocketFrame:duplicate()),
		PingWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), PingWebSocketFrame:retain(), PingWebSocketFrame:retain(), PingWebSocketFrame:retain()),
		PingWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), PingWebSocketFrame:retain(int), PingWebSocketFrame:retain(int), PingWebSocketFrame:retain(int)),
		PingWebSocketFrame:touch() to listOf(WebSocketFrame:touch(), PingWebSocketFrame:touch(), PingWebSocketFrame:touch(), PingWebSocketFrame:touch()),
		PingWebSocketFrame:touch(Object) to listOf(WebSocketFrame:touch(Object), PingWebSocketFrame:touch(Object), PingWebSocketFrame:touch(Object), PingWebSocketFrame:touch(Object)),
		HttpClientUpgradeHandler$UpgradeEvent:values() to listOf(HttpClientUpgradeHandler$UpgradeEvent[]:clone()),
		HttpClientUpgradeHandler$UpgradeEvent:<clinit>() to listOf(HttpClientUpgradeHandler$UpgradeEvent:<init>(String-int), HttpClientUpgradeHandler$UpgradeEvent:<init>(String-int), HttpClientUpgradeHandler$UpgradeEvent:<init>(String-int)),
		HttpHeadersEncoder:visit(Map$Entry) to listOf(ByteBuf:writerIndex(), ByteBuf:ensureWritable(int), HttpHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), HttpHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:writerIndex(int)),
		HttpHeadersEncoder:writeAscii(ByteBuf-int-CharSequence-int) to listOf(HttpHeadersEncoder:writeAsciiString(ByteBuf-int-AsciiString-int), HttpHeadersEncoder:writeCharSequence(ByteBuf-int-CharSequence-int)),
		HttpHeadersEncoder:writeAsciiString(ByteBuf-int-AsciiString-int) to listOf(AsciiString:copy(int-ByteBuf-int-int)),
		HttpHeadersEncoder:writeCharSequence(ByteBuf-int-CharSequence-int) to listOf(HttpHeadersEncoder:c2b(char), ByteBuf:setByte(int-int)),
		HttpObjectDecoder$State:values() to listOf(HttpObjectDecoder$State[]:clone()),
		HttpObjectDecoder$State:<clinit>() to listOf(HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int)),
		HttpHeaderDateFormat$1:<init>() to listOf(FastThreadLocal:<init>()),
		HttpHeaderDateFormat$1:initialValue() to listOf(HttpHeaderDateFormat:<init>(HttpHeaderDateFormat$1), HttpHeaderDateFormat$1:initialValue()),
		HttpObjectDecoder$LineParser:<init>(AppendableCharSequence-int) to listOf(HttpObjectDecoder$HeaderParser:<init>(AppendableCharSequence-int)),
		HttpObjectDecoder$LineParser:parse(ByteBuf) to listOf(HttpObjectDecoder$LineParser:reset(), HttpObjectDecoder$HeaderParser:parse(ByteBuf)),
		HttpObjectDecoder$LineParser:newException(int) to listOf(TooLongFrameException:<init>(String)),
		DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter) to listOf(DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter)),
		DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter) to listOf(DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter-int-int)),
		DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter-int-int) to listOf(DefaultHeaders$HeaderEntry:<init>(DefaultHeaders), IntObjectHashMap:<init>(int), IntObjectHashMap:<init>(int)),
		DefaultHeaders:get(Object) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), IntObjectMap:get(int)),
		DefaultHeaders:get(Object-Object) to listOf(DefaultHeaders:get(Object)),
		DefaultHeaders:getAndRemove(Object) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), IntObjectMap:get(int), DefaultHeaders$HeaderEntry:remove(), IntObjectMap:put(int-Object), IntObjectMap:remove(int), IntObjectMap:remove(int), IntObjectMap:put(int-Object), DefaultHeaders$HeaderEntry:remove()),
		DefaultHeaders:getAndRemove(Object-Object) to listOf(DefaultHeaders:getAndRemove(Object)),
		DefaultHeaders:getAll(Object) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), IntObjectMap:get(int)),
		DefaultHeaders:getAllAndRemove(Object) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), IntObjectMap:get(int), DefaultHeaders$HeaderEntry:remove(), IntObjectMap:put(int-Object), IntObjectMap:remove(int), IntObjectMap:remove(int), IntObjectMap:put(int-Object), DefaultHeaders$HeaderEntry:remove()),
		DefaultHeaders:entries() to listOf(DefaultHeaders:size()),
		DefaultHeaders:contains(Object) to listOf(DefaultHeaders:get(Object)),
		DefaultHeaders:contains(Object-Object) to listOf(DefaultHeaders:contains(Object-Object-Comparator-Comparator)),
		DefaultHeaders:containsObject(Object-Object) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertObject(Object), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsBoolean(Object-boolean) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertBoolean(boolean), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsByte(Object-byte) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertByte(byte), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsChar(Object-char) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertChar(char), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsShort(Object-short) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertShort(short), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsInt(Object-int) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertInt(int), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsLong(Object-long) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertLong(long), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsFloat(Object-float) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertFloat(float), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsDouble(Object-double) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertDouble(double), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:containsTimeMillis(Object-long) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertTimeMillis(long), DefaultHeaders:contains(Object-Object)),
		DefaultHeaders:contains(Object-Object-Comparator) to listOf(DefaultHeaders:contains(Object-Object-Comparator-Comparator)),
		DefaultHeaders:contains(Object-Object-Comparator-Comparator) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), IntObjectMap:get(int)),
		DefaultHeaders:containsObject(Object-Object-Comparator) to listOf(DefaultHeaders:containsObject(Object-Object-Comparator-Comparator)),
		DefaultHeaders:containsObject(Object-Object-Comparator-Comparator) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertObject(Object), DefaultHeaders:contains(Object-Object-Comparator-Comparator)),
		DefaultHeaders:namesList() to listOf(DefaultHeaders:size()),
		DefaultHeaders:add(Object-Object) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:add(Object-Iterable) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:add(Object-Object[]) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:addObject(Object-Object) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertObject(Object), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addObject(Object-Iterable) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), Headers$ValueConverter:convertObject(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:addObject(Object-Object[]) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), Headers$ValueConverter:convertObject(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:addInt(Object-int) to listOf(Headers$ValueConverter:convertInt(int), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addLong(Object-long) to listOf(Headers$ValueConverter:convertLong(long), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addDouble(Object-double) to listOf(Headers$ValueConverter:convertDouble(double), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addTimeMillis(Object-long) to listOf(Headers$ValueConverter:convertTimeMillis(long), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addChar(Object-char) to listOf(Headers$ValueConverter:convertChar(char), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addBoolean(Object-boolean) to listOf(Headers$ValueConverter:convertBoolean(boolean), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addFloat(Object-float) to listOf(Headers$ValueConverter:convertFloat(float), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addByte(Object-byte) to listOf(Headers$ValueConverter:convertByte(byte), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:addShort(Object-short) to listOf(Headers$ValueConverter:convertShort(short), DefaultHeaders:add(Object-Object)),
		DefaultHeaders:add(Headers) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders:add0(Headers)),
		DefaultHeaders:set(Object-Object) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:remove0(int-int-Object), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:set(Object-Iterable) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:remove0(int-int-Object), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:set(Object-Object[]) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:remove0(int-int-Object), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:setObject(Object-Object) to listOf(ObjectUtil:checkNotNull(Object-String), Headers$ValueConverter:convertObject(Object), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setObject(Object-Iterable) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:remove0(int-int-Object), Headers$ValueConverter:convertObject(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:setObject(Object-Object[]) to listOf(DefaultHeaders:convertName(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:remove0(int-int-Object), Headers$ValueConverter:convertObject(Object), ObjectUtil:checkNotNull(Object-String), DefaultHeaders:add0(int-int-Object-Object)),
		DefaultHeaders:setInt(Object-int) to listOf(Headers$ValueConverter:convertInt(int), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setLong(Object-long) to listOf(Headers$ValueConverter:convertLong(long), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setDouble(Object-double) to listOf(Headers$ValueConverter:convertDouble(double), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setTimeMillis(Object-long) to listOf(Headers$ValueConverter:convertTimeMillis(long), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setFloat(Object-float) to listOf(Headers$ValueConverter:convertFloat(float), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setChar(Object-char) to listOf(Headers$ValueConverter:convertChar(char), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setBoolean(Object-boolean) to listOf(Headers$ValueConverter:convertBoolean(boolean), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setByte(Object-byte) to listOf(Headers$ValueConverter:convertByte(byte), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:setShort(Object-short) to listOf(Headers$ValueConverter:convertShort(short), DefaultHeaders:set(Object-Object)),
		DefaultHeaders:set(Headers) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders:clear(), DefaultHeaders:add0(Headers)),
		DefaultHeaders:setAll(Headers) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders:set(Object-Object), DefaultHeaders:setAllVisitor(), Headers:forEachEntry(Headers$EntryVisitor), PlatformDependent:throwException(Throwable)),
		DefaultHeaders:remove(Object) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders$HashCodeGenerator:generateHashCode(Object), DefaultHeaders:index(int), DefaultHeaders:remove0(int-int-Object)),
		DefaultHeaders:clear() to listOf(IntObjectMap:clear(), IntObjectMap:clear()),
		DefaultHeaders:iterator() to listOf(DefaultHeaders$KeyValueHeaderIterator:<init>(DefaultHeaders)),
		DefaultHeaders:forEachEntry(Headers$EntryVisitor) to listOf(Headers$EntryVisitor:visit(Map$Entry)),
		DefaultHeaders:forEachName(Headers$NameVisitor) to listOf(Headers$NameVisitor:visit(Object)),
		DefaultHeaders:getBoolean(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToBoolean(Object)),
		DefaultHeaders:getBoolean(Object-boolean) to listOf(DefaultHeaders:getBoolean(Object)),
		DefaultHeaders:getByte(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToByte(Object)),
		DefaultHeaders:getByte(Object-byte) to listOf(DefaultHeaders:getByte(Object)),
		DefaultHeaders:getChar(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToChar(Object)),
		DefaultHeaders:getChar(Object-char) to listOf(DefaultHeaders:getChar(Object)),
		DefaultHeaders:getShort(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToShort(Object)),
		DefaultHeaders:getInt(Object-short) to listOf(DefaultHeaders:getShort(Object)),
		DefaultHeaders:getInt(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToInt(Object)),
		DefaultHeaders:getInt(Object-int) to listOf(DefaultHeaders:getInt(Object)),
		DefaultHeaders:getLong(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToLong(Object)),
		DefaultHeaders:getLong(Object-long) to listOf(DefaultHeaders:getLong(Object)),
		DefaultHeaders:getFloat(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToFloat(Object)),
		DefaultHeaders:getFloat(Object-float) to listOf(DefaultHeaders:getFloat(Object)),
		DefaultHeaders:getDouble(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToDouble(Object)),
		DefaultHeaders:getDouble(Object-double) to listOf(DefaultHeaders:getDouble(Object)),
		DefaultHeaders:getTimeMillis(Object) to listOf(DefaultHeaders:get(Object), Headers$ValueConverter:convertToTimeMillis(Object)),
		DefaultHeaders:getTimeMillis(Object-long) to listOf(DefaultHeaders:getTimeMillis(Object)),
		DefaultHeaders:getBooleanAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToBoolean(Object)),
		DefaultHeaders:getBooleanAndRemove(Object-boolean) to listOf(DefaultHeaders:getBooleanAndRemove(Object)),
		DefaultHeaders:getByteAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToByte(Object)),
		DefaultHeaders:getByteAndRemove(Object-byte) to listOf(DefaultHeaders:getByteAndRemove(Object)),
		DefaultHeaders:getCharAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToChar(Object)),
		DefaultHeaders:getCharAndRemove(Object-char) to listOf(DefaultHeaders:getCharAndRemove(Object)),
		DefaultHeaders:getShortAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToShort(Object)),
		DefaultHeaders:getShortAndRemove(Object-short) to listOf(DefaultHeaders:getShortAndRemove(Object)),
		DefaultHeaders:getIntAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToInt(Object)),
		DefaultHeaders:getIntAndRemove(Object-int) to listOf(DefaultHeaders:getIntAndRemove(Object)),
		DefaultHeaders:getLongAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToLong(Object)),
		DefaultHeaders:getLongAndRemove(Object-long) to listOf(DefaultHeaders:getLongAndRemove(Object)),
		DefaultHeaders:getFloatAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToFloat(Object)),
		DefaultHeaders:getFloatAndRemove(Object-float) to listOf(DefaultHeaders:getFloatAndRemove(Object)),
		DefaultHeaders:getDoubleAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToDouble(Object)),
		DefaultHeaders:getDoubleAndRemove(Object-double) to listOf(DefaultHeaders:getDoubleAndRemove(Object)),
		DefaultHeaders:getTimeMillisAndRemove(Object) to listOf(DefaultHeaders:getAndRemove(Object), Headers$ValueConverter:convertToTimeMillis(Object)),
		DefaultHeaders:getTimeMillisAndRemove(Object-long) to listOf(DefaultHeaders:getTimeMillisAndRemove(Object)),
		DefaultHeaders:equals(Object) to listOf(DefaultHeaders:namesList(), DefaultHeaders:namesList(), DefaultHeaders:equals(List-List-Comparator), DefaultHeaders:getAll(Object), DefaultHeaders:getAll(Object), DefaultHeaders:equals(List-List-Comparator)),
		DefaultHeaders:hashCode() to listOf(DefaultHeaders:names(), DefaultHeaders:getAll(Object), DefaultHeaders$HashCodeGenerator:generateHashCode(Object)),
		DefaultHeaders:toString() to listOf(DefaultHeaders:names(), DefaultHeaders:getAll(Object)),
		DefaultHeaders:convertName(Object) to listOf(ObjectUtil:checkNotNull(Object-String), DefaultHeaders$NameConverter:convertName(Object)),
		DefaultHeaders:add0(Headers) to listOf(Headers:isEmpty(), DefaultHeaders:add(Object-Object), DefaultHeaders:addAllVisitor(), Headers:forEachEntry(Headers$EntryVisitor), PlatformDependent:throwException(Throwable)),
		DefaultHeaders:add0(int-int-Object-Object) to listOf(DefaultHeaders$HeaderEntry:<init>(DefaultHeaders-int-Object-Object), IntObjectMap:get(int), IntObjectMap:put(int-Object), IntObjectMap:put(int-Object), DefaultHeaders$HeaderEntry:addBefore(DefaultHeaders$HeaderEntry)),
		DefaultHeaders:remove0(int-int-Object) to listOf(IntObjectMap:get(int), DefaultHeaders$HeaderEntry:remove(), IntObjectMap:put(int-Object), IntObjectMap:remove(int), IntObjectMap:remove(int), IntObjectMap:put(int-Object), DefaultHeaders$HeaderEntry:remove()),
		DefaultHeaders:setAllVisitor() to listOf(DefaultHeaders$1:<init>(DefaultHeaders)),
		DefaultHeaders:addAllVisitor() to listOf(DefaultHeaders$2:<init>(DefaultHeaders)),
		DefaultHeaders:<clinit>() to listOf(DefaultHeaders$IdentityNameConverter:<init>()),
		MqttMessageFactory:newMessage(MqttFixedHeader-Object-Object) to listOf(MqttFixedHeader:messageType(), MqttMessageType:ordinal(), MqttConnectMessage:<init>(MqttFixedHeader-MqttConnectVariableHeader-MqttConnectPayload), MqttConnAckMessage:<init>(MqttFixedHeader-MqttConnAckVariableHeader), MqttSubscribeMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttSubscribePayload), MqttSubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttSubAckPayload), MqttUnsubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader), MqttUnsubscribeMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttUnsubscribePayload), MqttPublishMessage:<init>(MqttFixedHeader-MqttPublishVariableHeader-ByteBuf), MqttPubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader), MqttMessage:<init>(MqttFixedHeader-Object), MqttMessage:<init>(MqttFixedHeader), MqttFixedHeader:messageType()),
		MqttMessageFactory:newInvalidMessage(Throwable) to listOf(DecoderResult:failure(Throwable), MqttMessage:<init>(MqttFixedHeader-Object-Object-DecoderResult)),
		MqttSubAckPayload:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttMessageIdVariableHeader:from(int) to listOf(MqttMessageIdVariableHeader:<init>(int)),
		MqttMessageIdVariableHeader:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttIdentifierRejectedException:<init>() to listOf(DecoderException:<init>()),
		MqttIdentifierRejectedException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		MqttIdentifierRejectedException:<init>(String) to listOf(DecoderException:<init>(String)),
		MqttIdentifierRejectedException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		MqttConnectMessage:<init>(MqttFixedHeader-MqttConnectVariableHeader-MqttConnectPayload) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttConnectMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttConnectMessage:variableHeader()),
		MqttConnectMessage:payload() to listOf(MqttMessage:payload(), MqttConnectMessage:payload()),
		MqttUnsubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttUnsubAckMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttUnsubAckMessage:variableHeader()),
		MqttMessageType:values() to listOf(MqttMessageType[]:clone()),
		MqttMessageType:valueOf(int) to listOf(MqttMessageType:values()),
		MqttMessageType:<clinit>() to listOf(MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int), MqttMessageType:<init>(String-int-int)),
		MqttPublishMessage:<init>(MqttFixedHeader-MqttPublishVariableHeader-ByteBuf) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttPublishMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttPublishMessage:variableHeader()),
		MqttPublishMessage:payload() to listOf(MqttPublishMessage:content(), MqttPublishMessage:payload()),
		MqttPublishMessage:content() to listOf(MqttMessage:payload(), ByteBuf:refCnt(), ByteBuf:refCnt(), IllegalReferenceCountException:<init>(int)),
		MqttPublishMessage:copy() to listOf(MqttPublishMessage:fixedHeader(), MqttPublishMessage:variableHeader(), MqttPublishMessage:content(), ByteBuf:copy(), MqttPublishMessage:<init>(MqttFixedHeader-MqttPublishVariableHeader-ByteBuf), MqttPublishMessage:copy()),
		MqttPublishMessage:duplicate() to listOf(MqttPublishMessage:fixedHeader(), MqttPublishMessage:variableHeader(), MqttPublishMessage:content(), ByteBuf:duplicate(), MqttPublishMessage:<init>(MqttFixedHeader-MqttPublishVariableHeader-ByteBuf), MqttPublishMessage:duplicate()),
		MqttPublishMessage:refCnt() to listOf(MqttPublishMessage:content(), ByteBuf:refCnt()),
		MqttPublishMessage:retain() to listOf(MqttPublishMessage:content(), ByteBuf:retain(), MqttPublishMessage:retain(), MqttPublishMessage:retain()),
		MqttPublishMessage:retain(int) to listOf(MqttPublishMessage:content(), ByteBuf:retain(int), MqttPublishMessage:retain(int), MqttPublishMessage:retain(int)),
		MqttPublishMessage:touch() to listOf(MqttPublishMessage:content(), ByteBuf:touch(), MqttPublishMessage:touch(), MqttPublishMessage:touch()),
		MqttPublishMessage:touch(Object) to listOf(MqttPublishMessage:content(), ByteBuf:touch(Object), MqttPublishMessage:touch(Object), MqttPublishMessage:touch(Object)),
		MqttPublishMessage:release() to listOf(MqttPublishMessage:content(), ByteBuf:release()),
		MqttPublishMessage:release(int) to listOf(MqttPublishMessage:content(), ByteBuf:release(int)),
		MqttQoS:values() to listOf(MqttQoS[]:clone()),
		MqttQoS:valueOf(int) to listOf(MqttQoS:values()),
		MqttQoS:<clinit>() to listOf(MqttQoS:<init>(String-int-int), MqttQoS:<init>(String-int-int), MqttQoS:<init>(String-int-int), MqttQoS:<init>(String-int-int)),
		MqttSubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttSubAckPayload) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttSubAckMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttSubAckMessage:variableHeader()),
		MqttSubAckMessage:payload() to listOf(MqttMessage:payload(), MqttSubAckMessage:payload()),
		MqttDecoder:<init>() to listOf(MqttDecoder:<init>(int)),
		MqttDecoder:<init>(int) to listOf(ReplayingDecoder:<init>(Object)),
		MqttDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(MqttDecoder:state(), MqttDecoder$DecoderState:ordinal(), MqttDecoder:decodeFixedHeader(ByteBuf), MqttFixedHeader:remainingLength(), MqttDecoder:checkpoint(Object), DecoderException:<init>(String), MqttDecoder:decodeVariableHeader(ByteBuf-MqttFixedHeader), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder:checkpoint(Object), MqttDecoder:invalidMessage(Throwable), MqttFixedHeader:messageType(), MqttDecoder:decodePayload(ByteBuf-MqttMessageType-int-Object), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttFixedHeader:messageType(), DecoderException:<init>(String), MqttDecoder:checkpoint(Object), MqttMessageFactory:newMessage(MqttFixedHeader-Object-Object), MqttDecoder:invalidMessage(Throwable), MqttDecoder:actualReadableBytes(), ByteBuf:skipBytes(int)),
		MqttDecoder:invalidMessage(Throwable) to listOf(MqttDecoder:checkpoint(Object), MqttMessageFactory:newInvalidMessage(Throwable)),
		MqttDecoder:decodeFixedHeader(ByteBuf) to listOf(ByteBuf:readUnsignedByte(), MqttMessageType:valueOf(int), ByteBuf:readUnsignedByte(), DecoderException:<init>(String), MqttQoS:valueOf(int), MqttFixedHeader:<init>(MqttMessageType-boolean-MqttQoS-boolean-int), MqttCodecUtil:resetUnusedFields(MqttFixedHeader), MqttCodecUtil:validateFixedHeader(MqttFixedHeader)),
		MqttDecoder:decodeVariableHeader(ByteBuf-MqttFixedHeader) to listOf(MqttFixedHeader:messageType(), MqttMessageType:ordinal(), MqttDecoder:decodeConnectionVariableHeader(ByteBuf), MqttDecoder:decodeConnAckVariableHeader(ByteBuf), MqttDecoder:decodeMessageIdVariableHeader(ByteBuf), MqttDecoder:decodePublishVariableHeader(ByteBuf-MqttFixedHeader), MqttDecoder$Result:<init>(Object-int), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeConnectionVariableHeader(ByteBuf) to listOf(MqttDecoder:decodeString(ByteBuf), MqttDecoder$Result:access$100(MqttDecoder$Result), ByteBuf:readByte(), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttVersion:fromProtocolNameAndLevel(String-byte), ByteBuf:readUnsignedByte(), MqttDecoder:decodeMsbLsb(ByteBuf), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttVersion:protocolName(), MqttVersion:protocolLevel(), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttConnectVariableHeader:<init>(String-int-boolean-boolean-boolean-int-boolean-boolean-int), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeConnAckVariableHeader(ByteBuf) to listOf(ByteBuf:readUnsignedByte(), ByteBuf:readByte(), MqttConnectReturnCode:valueOf(byte), MqttConnAckVariableHeader:<init>(MqttConnectReturnCode), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeMessageIdVariableHeader(ByteBuf) to listOf(MqttDecoder:decodeMessageId(ByteBuf), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttMessageIdVariableHeader:from(int), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodePublishVariableHeader(ByteBuf-MqttFixedHeader) to listOf(MqttDecoder:decodeString(ByteBuf), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttCodecUtil:isValidPublishTopicName(String), MqttDecoder$Result:access$000(MqttDecoder$Result), DecoderException:<init>(String), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttFixedHeader:qosLevel(), MqttQoS:value(), MqttDecoder:decodeMessageId(ByteBuf), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttPublishVariableHeader:<init>(String-int), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeMessageId(ByteBuf) to listOf(MqttDecoder:decodeMsbLsb(ByteBuf), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttCodecUtil:isValidMessageId(int), MqttDecoder$Result:access$000(MqttDecoder$Result), DecoderException:<init>(String)),
		MqttDecoder:decodePayload(ByteBuf-MqttMessageType-int-Object) to listOf(MqttMessageType:ordinal(), MqttDecoder:decodeConnectionPayload(ByteBuf-MqttConnectVariableHeader), MqttDecoder:decodeSubscribePayload(ByteBuf-int), MqttDecoder:decodeSubackPayload(ByteBuf-int), MqttDecoder:decodeUnsubscribePayload(ByteBuf-int), MqttDecoder:decodePublishPayload(ByteBuf-int), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeConnectionPayload(ByteBuf-MqttConnectVariableHeader) to listOf(MqttDecoder:decodeString(ByteBuf), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttConnectVariableHeader:name(), MqttConnectVariableHeader:version(), MqttVersion:fromProtocolNameAndLevel(String-byte), MqttCodecUtil:isValidClientId(MqttVersion-String), MqttIdentifierRejectedException:<init>(String), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttConnectVariableHeader:isWillFlag(), MqttDecoder:decodeString(ByteBuf-int-int), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder:decodeAsciiString(ByteBuf), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttConnectVariableHeader:hasUserName(), MqttDecoder:decodeString(ByteBuf), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttConnectVariableHeader:hasPassword(), MqttDecoder:decodeString(ByteBuf), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttConnectPayload:<init>(String-String-String-String-String), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeSubscribePayload(ByteBuf-int) to listOf(MqttDecoder:decodeString(ByteBuf), MqttDecoder$Result:access$100(MqttDecoder$Result), ByteBuf:readUnsignedByte(), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttQoS:valueOf(int), MqttTopicSubscription:<init>(String-MqttQoS), MqttSubscribePayload:<init>(List), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeSubackPayload(ByteBuf-int) to listOf(ByteBuf:readUnsignedByte(), MqttSubAckPayload:<init>(Iterable), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeUnsubscribePayload(ByteBuf-int) to listOf(MqttDecoder:decodeString(ByteBuf), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttUnsubscribePayload:<init>(List), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodePublishPayload(ByteBuf-int) to listOf(ByteBuf:readSlice(int), ByteBuf:retain(), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeString(ByteBuf) to listOf(MqttDecoder:decodeString(ByteBuf-int-int)),
		MqttDecoder:decodeAsciiString(ByteBuf) to listOf(MqttDecoder:decodeString(ByteBuf-int-int), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder$Result:<init>(Object-int), MqttDecoder$Result:access$100(MqttDecoder$Result), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeString(ByteBuf-int-int) to listOf(MqttDecoder:decodeMsbLsb(ByteBuf), MqttDecoder$Result:access$000(MqttDecoder$Result), MqttDecoder$Result:access$100(MqttDecoder$Result), ByteBuf:skipBytes(int), MqttDecoder$Result:<init>(Object-int), ByteBuf:readBytes(int), ByteBuf:toString(Charset), MqttDecoder$Result:<init>(Object-int)),
		MqttDecoder:decodeMsbLsb(ByteBuf) to listOf(MqttDecoder:decodeMsbLsb(ByteBuf-int-int)),
		MqttDecoder:decodeMsbLsb(ByteBuf-int-int) to listOf(ByteBuf:readUnsignedByte(), ByteBuf:readUnsignedByte(), MqttDecoder$Result:<init>(Object-int)),
		MqttMessageFactory$1:<clinit>() to listOf(MqttMessageType:values(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal()),
		MqttConnectPayload:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttMessage:<init>(MqttFixedHeader) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttMessage:<init>(MqttFixedHeader-Object) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttMessage:<init>(MqttFixedHeader-Object-Object) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object-DecoderResult)),
		MqttMessage:toString() to listOf(StringUtil:simpleClassName(Object), MqttMessage:fixedHeader(), MqttMessage:fixedHeader(), MqttFixedHeader:toString(), MqttMessage:variableHeader(), MqttMessage:payload()),
		MqttVersion:values() to listOf(MqttVersion[]:clone()),
		MqttVersion:fromProtocolNameAndLevel(String-byte) to listOf(MqttVersion:values(), MqttUnacceptableProtocolVersionException:<init>(String), MqttUnacceptableProtocolVersionException:<init>(String)),
		MqttVersion:<clinit>() to listOf(MqttVersion:<init>(String-int-String-byte), MqttVersion:<init>(String-int-String-byte)),
		MqttConnAckVariableHeader:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttDecoder$1:<clinit>() to listOf(MqttMessageType:values(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttDecoder$DecoderState:values(), MqttDecoder$DecoderState:ordinal(), MqttDecoder$DecoderState:ordinal(), MqttDecoder$DecoderState:ordinal(), MqttDecoder$DecoderState:ordinal()),
		MqttSubscribePayload:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttEncoder$1:<clinit>() to listOf(MqttMessageType:values(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal()),
		MqttPublishVariableHeader:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttCodecUtil$1:<clinit>() to listOf(MqttMessageType:values(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal(), MqttMessageType:ordinal()),
		MqttTopicSubscription:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttSubscribeMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttSubscribePayload) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttSubscribeMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttSubscribeMessage:variableHeader()),
		MqttSubscribeMessage:payload() to listOf(MqttMessage:payload(), MqttSubscribeMessage:payload()),
		MqttConnectReturnCode:values() to listOf(MqttConnectReturnCode[]:clone()),
		MqttConnectReturnCode:<clinit>() to listOf(MqttConnectReturnCode:<init>(String-int-byte), MqttConnectReturnCode:<init>(String-int-byte), MqttConnectReturnCode:<init>(String-int-byte), MqttConnectReturnCode:<init>(String-int-byte), MqttConnectReturnCode:<init>(String-int-byte), MqttConnectReturnCode:<init>(String-int-byte), MqttConnectReturnCode:values()),
		MqttUnsubscribePayload:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttDecoder$DecoderState:values() to listOf(MqttDecoder$DecoderState[]:clone()),
		MqttDecoder$DecoderState:<clinit>() to listOf(MqttDecoder$DecoderState:<init>(String-int), MqttDecoder$DecoderState:<init>(String-int), MqttDecoder$DecoderState:<init>(String-int), MqttDecoder$DecoderState:<init>(String-int)),
		MqttConnAckMessage:<init>(MqttFixedHeader-MqttConnAckVariableHeader) to listOf(MqttMessage:<init>(MqttFixedHeader-Object)),
		MqttConnAckMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttConnAckMessage:variableHeader()),
		MqttFixedHeader:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttUnacceptableProtocolVersionException:<init>() to listOf(DecoderException:<init>()),
		MqttUnacceptableProtocolVersionException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		MqttUnacceptableProtocolVersionException:<init>(String) to listOf(DecoderException:<init>(String)),
		MqttUnacceptableProtocolVersionException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		MqttCodecUtil:validateFixedHeader(MqttFixedHeader) to listOf(MqttFixedHeader:messageType(), MqttMessageType:ordinal(), MqttFixedHeader:qosLevel(), MqttFixedHeader:messageType(), MqttMessageType:name(), DecoderException:<init>(String)),
		MqttCodecUtil:resetUnusedFields(MqttFixedHeader) to listOf(MqttFixedHeader:messageType(), MqttMessageType:ordinal(), MqttFixedHeader:isDup(), MqttFixedHeader:qosLevel(), MqttFixedHeader:isRetain(), MqttFixedHeader:messageType(), MqttFixedHeader:remainingLength(), MqttFixedHeader:<init>(MqttMessageType-boolean-MqttQoS-boolean-int), MqttFixedHeader:isRetain(), MqttFixedHeader:messageType(), MqttFixedHeader:isDup(), MqttFixedHeader:qosLevel(), MqttFixedHeader:remainingLength(), MqttFixedHeader:<init>(MqttMessageType-boolean-MqttQoS-boolean-int)),
		MqttConnectVariableHeader:toString() to listOf(StringUtil:simpleClassName(Object)),
		MqttUnsubscribeMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader-MqttUnsubscribePayload) to listOf(MqttMessage:<init>(MqttFixedHeader-Object-Object)),
		MqttUnsubscribeMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttUnsubscribeMessage:variableHeader()),
		MqttUnsubscribeMessage:payload() to listOf(MqttMessage:payload(), MqttUnsubscribeMessage:payload()),
		MqttPubAckMessage:<init>(MqttFixedHeader-MqttMessageIdVariableHeader) to listOf(MqttMessage:<init>(MqttFixedHeader-Object)),
		MqttPubAckMessage:variableHeader() to listOf(MqttMessage:variableHeader(), MqttPubAckMessage:variableHeader()),
		MqttEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		MqttEncoder:encode(ChannelHandlerContext-MqttMessage-List) to listOf(ChannelHandlerContext:alloc(), MqttEncoder:doEncode(ByteBufAllocator-MqttMessage)),
		MqttEncoder:doEncode(ByteBufAllocator-MqttMessage) to listOf(MqttMessage:fixedHeader(), MqttFixedHeader:messageType(), MqttMessageType:ordinal(), MqttEncoder:encodeConnectMessage(ByteBufAllocator-MqttConnectMessage), MqttEncoder:encodeConnAckMessage(ByteBufAllocator-MqttConnAckMessage), MqttEncoder:encodePublishMessage(ByteBufAllocator-MqttPublishMessage), MqttEncoder:encodeSubscribeMessage(ByteBufAllocator-MqttSubscribeMessage), MqttEncoder:encodeUnsubscribeMessage(ByteBufAllocator-MqttUnsubscribeMessage), MqttEncoder:encodeSubAckMessage(ByteBufAllocator-MqttSubAckMessage), MqttEncoder:encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(ByteBufAllocator-MqttMessage), MqttEncoder:encodeMessageWithOnlySingleByteFixedHeader(ByteBufAllocator-MqttMessage), MqttMessage:fixedHeader(), MqttFixedHeader:messageType(), MqttMessageType:value()),
		MqttEncoder:encodeConnectMessage(ByteBufAllocator-MqttConnectMessage) to listOf(MqttConnectMessage:fixedHeader(), MqttConnectMessage:variableHeader(), MqttConnectMessage:payload(), MqttConnectVariableHeader:name(), MqttConnectVariableHeader:version(), MqttVersion:fromProtocolNameAndLevel(String-byte), MqttConnectPayload:clientIdentifier(), MqttCodecUtil:isValidClientId(MqttVersion-String), MqttIdentifierRejectedException:<init>(String), MqttEncoder:encodeStringUtf8(String), MqttConnectPayload:willTopic(), MqttEncoder:encodeStringUtf8(String), MqttConnectPayload:willMessage(), MqttEncoder:encodeStringUtf8(String), MqttConnectVariableHeader:isWillFlag(), MqttConnectPayload:userName(), MqttEncoder:encodeStringUtf8(String), MqttConnectVariableHeader:hasUserName(), MqttConnectPayload:password(), MqttEncoder:encodeStringUtf8(String), MqttConnectVariableHeader:hasPassword(), MqttVersion:protocolNameBytes(), MqttEncoder:getVariableLengthInt(int), ByteBufAllocator:buffer(int), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), MqttEncoder:writeVariableLengthInt(ByteBuf-int), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]), MqttConnectVariableHeader:version(), ByteBuf:writeByte(int), MqttEncoder:getConnVariableHeaderFlag(MqttConnectVariableHeader), ByteBuf:writeByte(int), MqttConnectVariableHeader:keepAliveTimeSeconds(), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]-int-int), MqttConnectVariableHeader:isWillFlag(), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]-int-int), MqttConnectVariableHeader:hasUserName(), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]-int-int), MqttConnectVariableHeader:hasPassword(), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]-int-int)),
		MqttEncoder:getConnVariableHeaderFlag(MqttConnectVariableHeader) to listOf(MqttConnectVariableHeader:hasUserName(), MqttConnectVariableHeader:hasPassword(), MqttConnectVariableHeader:isWillRetain(), MqttConnectVariableHeader:willQos(), MqttConnectVariableHeader:isWillFlag(), MqttConnectVariableHeader:isCleanSession()),
		MqttEncoder:encodeConnAckMessage(ByteBufAllocator-MqttConnAckMessage) to listOf(ByteBufAllocator:buffer(int), MqttConnAckMessage:fixedHeader(), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), MqttConnAckMessage:variableHeader(), MqttConnAckVariableHeader:connectReturnCode(), MqttConnectReturnCode:byteValue(), ByteBuf:writeByte(int)),
		MqttEncoder:encodeSubscribeMessage(ByteBufAllocator-MqttSubscribeMessage) to listOf(MqttSubscribeMessage:fixedHeader(), MqttSubscribeMessage:variableHeader(), MqttSubscribeMessage:payload(), MqttSubscribePayload:topicSubscriptions(), MqttTopicSubscription:topicName(), MqttEncoder:encodeStringUtf8(String), MqttEncoder:getVariableLengthInt(int), ByteBufAllocator:buffer(int), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), MqttEncoder:writeVariableLengthInt(ByteBuf-int), MqttMessageIdVariableHeader:messageId(), ByteBuf:writeShort(int), MqttSubscribePayload:topicSubscriptions(), MqttTopicSubscription:topicName(), MqttEncoder:encodeStringUtf8(String), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]-int-int), MqttTopicSubscription:qualityOfService(), MqttQoS:value(), ByteBuf:writeByte(int)),
		MqttEncoder:encodeUnsubscribeMessage(ByteBufAllocator-MqttUnsubscribeMessage) to listOf(MqttUnsubscribeMessage:fixedHeader(), MqttUnsubscribeMessage:variableHeader(), MqttUnsubscribeMessage:payload(), MqttUnsubscribePayload:topics(), MqttEncoder:encodeStringUtf8(String), MqttEncoder:getVariableLengthInt(int), ByteBufAllocator:buffer(int), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), MqttEncoder:writeVariableLengthInt(ByteBuf-int), MqttMessageIdVariableHeader:messageId(), ByteBuf:writeShort(int), MqttUnsubscribePayload:topics(), MqttEncoder:encodeStringUtf8(String), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]-int-int)),
		MqttEncoder:encodeSubAckMessage(ByteBufAllocator-MqttSubAckMessage) to listOf(MqttSubAckMessage:payload(), MqttSubAckPayload:grantedQoSLevels(), MqttEncoder:getVariableLengthInt(int), ByteBufAllocator:buffer(int), MqttSubAckMessage:fixedHeader(), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), MqttEncoder:writeVariableLengthInt(ByteBuf-int), MqttSubAckMessage:variableHeader(), MqttMessageIdVariableHeader:messageId(), ByteBuf:writeShort(int), MqttSubAckMessage:payload(), MqttSubAckPayload:grantedQoSLevels(), ByteBuf:writeByte(int)),
		MqttEncoder:encodePublishMessage(ByteBufAllocator-MqttPublishMessage) to listOf(MqttPublishMessage:fixedHeader(), MqttPublishMessage:variableHeader(), MqttPublishMessage:payload(), ByteBuf:duplicate(), MqttPublishVariableHeader:topicName(), MqttEncoder:encodeStringUtf8(String), MqttFixedHeader:qosLevel(), MqttQoS:value(), ByteBuf:readableBytes(), MqttEncoder:getVariableLengthInt(int), ByteBufAllocator:buffer(int), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), MqttEncoder:writeVariableLengthInt(ByteBuf-int), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]), MqttFixedHeader:qosLevel(), MqttQoS:value(), MqttPublishVariableHeader:messageId(), ByteBuf:writeShort(int), ByteBuf:writeBytes(ByteBuf)),
		MqttEncoder:encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(ByteBufAllocator-MqttMessage) to listOf(MqttMessage:fixedHeader(), MqttMessage:variableHeader(), MqttMessageIdVariableHeader:messageId(), MqttEncoder:getVariableLengthInt(int), ByteBufAllocator:buffer(int), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), MqttEncoder:writeVariableLengthInt(ByteBuf-int), ByteBuf:writeShort(int)),
		MqttEncoder:encodeMessageWithOnlySingleByteFixedHeader(ByteBufAllocator-MqttMessage) to listOf(MqttMessage:fixedHeader(), ByteBufAllocator:buffer(int), MqttEncoder:getFixedHeaderByte1(MqttFixedHeader), ByteBuf:writeByte(int), ByteBuf:writeByte(int)),
		MqttEncoder:getFixedHeaderByte1(MqttFixedHeader) to listOf(MqttFixedHeader:messageType(), MqttMessageType:value(), MqttFixedHeader:isDup(), MqttFixedHeader:qosLevel(), MqttQoS:value(), MqttFixedHeader:isRetain()),
		MqttEncoder:writeVariableLengthInt(ByteBuf-int) to listOf(ByteBuf:writeByte(int)),
		MqttEncoder:encode(ChannelHandlerContext-Object-List) to listOf(MqttEncoder:encode(ChannelHandlerContext-MqttMessage-List)),
		MqttEncoder:<clinit>() to listOf(MqttEncoder:<init>()),
		MessageToMessageDecoder:<init>() to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		MessageToMessageDecoder:<init>(Class) to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		MessageToMessageDecoder:acceptInboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToMessageDecoder:channelRead(ChannelHandlerContext-Object) to listOf(RecyclableArrayList:newInstance(), MessageToMessageDecoder:acceptInboundMessage(Object), MessageToMessageDecoder:decode(ChannelHandlerContext-Object-List), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), RecyclableArrayList:add(Object), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle(), DecoderException:<init>(Throwable), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle()),
		EncoderException:<init>() to listOf(CodecException:<init>()),
		EncoderException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		EncoderException:<init>(String) to listOf(CodecException:<init>(String)),
		EncoderException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		EmptyTextHeaders:<init>() to listOf(EmptyConvertibleHeaders:<init>()),
		EmptyTextHeaders:add(CharSequence-CharSequence) to listOf(EmptyConvertibleHeaders:add(Object-Object)),
		EmptyTextHeaders:add(CharSequence-Iterable) to listOf(EmptyConvertibleHeaders:add(Object-Iterable)),
		EmptyTextHeaders:add(CharSequence-CharSequence[]) to listOf(EmptyConvertibleHeaders:add(Object-Object[])),
		EmptyTextHeaders:addObject(CharSequence-Object) to listOf(EmptyConvertibleHeaders:addObject(Object-Object)),
		EmptyTextHeaders:addObject(CharSequence-Iterable) to listOf(EmptyConvertibleHeaders:addObject(Object-Iterable)),
		EmptyTextHeaders:addObject(CharSequence-Object[]) to listOf(EmptyConvertibleHeaders:addObject(Object-Object[])),
		EmptyTextHeaders:addBoolean(CharSequence-boolean) to listOf(EmptyConvertibleHeaders:addBoolean(Object-boolean)),
		EmptyTextHeaders:addChar(CharSequence-char) to listOf(EmptyConvertibleHeaders:addChar(Object-char)),
		EmptyTextHeaders:addByte(CharSequence-byte) to listOf(EmptyConvertibleHeaders:addByte(Object-byte)),
		EmptyTextHeaders:addShort(CharSequence-short) to listOf(EmptyConvertibleHeaders:addShort(Object-short)),
		EmptyTextHeaders:addInt(CharSequence-int) to listOf(EmptyConvertibleHeaders:addInt(Object-int)),
		EmptyTextHeaders:addLong(CharSequence-long) to listOf(EmptyConvertibleHeaders:addLong(Object-long)),
		EmptyTextHeaders:addFloat(CharSequence-float) to listOf(EmptyConvertibleHeaders:addFloat(Object-float)),
		EmptyTextHeaders:addDouble(CharSequence-double) to listOf(EmptyConvertibleHeaders:addDouble(Object-double)),
		EmptyTextHeaders:addTimeMillis(CharSequence-long) to listOf(EmptyConvertibleHeaders:addTimeMillis(Object-long)),
		EmptyTextHeaders:add(TextHeaders) to listOf(EmptyConvertibleHeaders:add(Headers)),
		EmptyTextHeaders:set(CharSequence-CharSequence) to listOf(EmptyConvertibleHeaders:set(Object-Object)),
		EmptyTextHeaders:set(CharSequence-Iterable) to listOf(EmptyConvertibleHeaders:set(Object-Iterable)),
		EmptyTextHeaders:set(CharSequence-CharSequence[]) to listOf(EmptyConvertibleHeaders:set(Object-Object[])),
		EmptyTextHeaders:setObject(CharSequence-Object) to listOf(EmptyConvertibleHeaders:setObject(Object-Object)),
		EmptyTextHeaders:setObject(CharSequence-Iterable) to listOf(EmptyConvertibleHeaders:setObject(Object-Iterable)),
		EmptyTextHeaders:setObject(CharSequence-Object[]) to listOf(EmptyConvertibleHeaders:setObject(Object-Object[])),
		EmptyTextHeaders:setBoolean(CharSequence-boolean) to listOf(EmptyConvertibleHeaders:setBoolean(Object-boolean)),
		EmptyTextHeaders:setChar(CharSequence-char) to listOf(EmptyConvertibleHeaders:setChar(Object-char)),
		EmptyTextHeaders:setByte(CharSequence-byte) to listOf(EmptyConvertibleHeaders:setByte(Object-byte)),
		EmptyTextHeaders:setShort(CharSequence-short) to listOf(EmptyConvertibleHeaders:setShort(Object-short)),
		EmptyTextHeaders:setInt(CharSequence-int) to listOf(EmptyConvertibleHeaders:setInt(Object-int)),
		EmptyTextHeaders:setLong(CharSequence-long) to listOf(EmptyConvertibleHeaders:setLong(Object-long)),
		EmptyTextHeaders:setFloat(CharSequence-float) to listOf(EmptyConvertibleHeaders:setFloat(Object-float)),
		EmptyTextHeaders:setDouble(CharSequence-double) to listOf(EmptyConvertibleHeaders:setDouble(Object-double)),
		EmptyTextHeaders:setTimeMillis(CharSequence-long) to listOf(EmptyConvertibleHeaders:setTimeMillis(Object-long)),
		EmptyTextHeaders:set(TextHeaders) to listOf(EmptyConvertibleHeaders:set(Headers)),
		EmptyTextHeaders:setAll(TextHeaders) to listOf(EmptyConvertibleHeaders:setAll(Headers)),
		EmptyTextHeaders:clear() to listOf(EmptyConvertibleHeaders:clear(), EmptyTextHeaders:clear()),
		EmptyTextHeaders:setTimeMillis(Object-long) to listOf(EmptyTextHeaders:setTimeMillis(CharSequence-long)),
		EmptyTextHeaders:setDouble(Object-double) to listOf(EmptyTextHeaders:setDouble(CharSequence-double)),
		EmptyTextHeaders:setFloat(Object-float) to listOf(EmptyTextHeaders:setFloat(CharSequence-float)),
		EmptyTextHeaders:setLong(Object-long) to listOf(EmptyTextHeaders:setLong(CharSequence-long)),
		EmptyTextHeaders:setInt(Object-int) to listOf(EmptyTextHeaders:setInt(CharSequence-int)),
		EmptyTextHeaders:setShort(Object-short) to listOf(EmptyTextHeaders:setShort(CharSequence-short)),
		EmptyTextHeaders:setChar(Object-char) to listOf(EmptyTextHeaders:setChar(CharSequence-char)),
		EmptyTextHeaders:setByte(Object-byte) to listOf(EmptyTextHeaders:setByte(CharSequence-byte)),
		EmptyTextHeaders:setBoolean(Object-boolean) to listOf(EmptyTextHeaders:setBoolean(CharSequence-boolean)),
		EmptyTextHeaders:setObject(Object-Object[]) to listOf(EmptyTextHeaders:setObject(CharSequence-Object[])),
		EmptyTextHeaders:setObject(Object-Iterable) to listOf(EmptyTextHeaders:setObject(CharSequence-Iterable)),
		EmptyTextHeaders:setObject(Object-Object) to listOf(EmptyTextHeaders:setObject(CharSequence-Object)),
		EmptyTextHeaders:set(Object-Object[]) to listOf(EmptyTextHeaders:set(CharSequence-CharSequence[])),
		EmptyTextHeaders:set(Object-Iterable) to listOf(EmptyTextHeaders:set(CharSequence-Iterable)),
		EmptyTextHeaders:set(Object-Object) to listOf(EmptyTextHeaders:set(CharSequence-CharSequence)),
		EmptyTextHeaders:addTimeMillis(Object-long) to listOf(EmptyTextHeaders:addTimeMillis(CharSequence-long)),
		EmptyTextHeaders:addDouble(Object-double) to listOf(EmptyTextHeaders:addDouble(CharSequence-double)),
		EmptyTextHeaders:addFloat(Object-float) to listOf(EmptyTextHeaders:addFloat(CharSequence-float)),
		EmptyTextHeaders:addLong(Object-long) to listOf(EmptyTextHeaders:addLong(CharSequence-long)),
		EmptyTextHeaders:addInt(Object-int) to listOf(EmptyTextHeaders:addInt(CharSequence-int)),
		EmptyTextHeaders:addShort(Object-short) to listOf(EmptyTextHeaders:addShort(CharSequence-short)),
		EmptyTextHeaders:addChar(Object-char) to listOf(EmptyTextHeaders:addChar(CharSequence-char)),
		EmptyTextHeaders:addByte(Object-byte) to listOf(EmptyTextHeaders:addByte(CharSequence-byte)),
		EmptyTextHeaders:addBoolean(Object-boolean) to listOf(EmptyTextHeaders:addBoolean(CharSequence-boolean)),
		EmptyTextHeaders:addObject(Object-Object[]) to listOf(EmptyTextHeaders:addObject(CharSequence-Object[])),
		EmptyTextHeaders:addObject(Object-Iterable) to listOf(EmptyTextHeaders:addObject(CharSequence-Iterable)),
		EmptyTextHeaders:addObject(Object-Object) to listOf(EmptyTextHeaders:addObject(CharSequence-Object)),
		EmptyTextHeaders:add(Object-Object[]) to listOf(EmptyTextHeaders:add(CharSequence-CharSequence[])),
		EmptyTextHeaders:add(Object-Iterable) to listOf(EmptyTextHeaders:add(CharSequence-Iterable)),
		EmptyTextHeaders:add(Object-Object) to listOf(EmptyTextHeaders:add(CharSequence-CharSequence)),
		PrematureChannelClosureException:<init>() to listOf(CodecException:<init>()),
		PrematureChannelClosureException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		PrematureChannelClosureException:<init>(String) to listOf(CodecException:<init>(String)),
		PrematureChannelClosureException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		AsciiHeadersEncoder$1:<clinit>() to listOf(AsciiHeadersEncoder$NewlineType:values(), AsciiHeadersEncoder$NewlineType:ordinal(), AsciiHeadersEncoder$NewlineType:ordinal(), AsciiHeadersEncoder$SeparatorType:values(), AsciiHeadersEncoder$SeparatorType:ordinal(), AsciiHeadersEncoder$SeparatorType:ordinal()),
		DefaultConvertibleHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-ConvertibleHeaders$TypeConverter) to listOf(DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter)),
		DefaultConvertibleHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-ConvertibleHeaders$TypeConverter-DefaultHeaders$NameConverter) to listOf(DefaultHeaders:<init>(Comparator-Comparator-DefaultHeaders$HashCodeGenerator-Headers$ValueConverter-DefaultHeaders$NameConverter)),
		DefaultConvertibleHeaders:getAndConvert(Object) to listOf(DefaultConvertibleHeaders:getAndConvert(Object-Object)),
		DefaultConvertibleHeaders:getAndConvert(Object-Object) to listOf(DefaultConvertibleHeaders:get(Object), ConvertibleHeaders$TypeConverter:toConvertedType(Object)),
		DefaultConvertibleHeaders:getAndRemoveAndConvert(Object) to listOf(DefaultConvertibleHeaders:getAndRemoveAndConvert(Object-Object)),
		DefaultConvertibleHeaders:getAndRemoveAndConvert(Object-Object) to listOf(DefaultConvertibleHeaders:getAndRemove(Object), ConvertibleHeaders$TypeConverter:toConvertedType(Object)),
		DefaultConvertibleHeaders:getAllAndConvert(Object) to listOf(DefaultConvertibleHeaders:getAll(Object), ConvertibleHeaders$TypeConverter:toConvertedType(Object)),
		DefaultConvertibleHeaders:getAllAndRemoveAndConvert(Object) to listOf(DefaultConvertibleHeaders:getAllAndRemove(Object), ConvertibleHeaders$TypeConverter:toConvertedType(Object)),
		DefaultConvertibleHeaders:entriesConverted() to listOf(DefaultConvertibleHeaders:entries(), DefaultConvertibleHeaders$ConvertedEntry:<init>(DefaultConvertibleHeaders-Map$Entry)),
		DefaultConvertibleHeaders:iteratorConverted() to listOf(DefaultConvertibleHeaders$ConvertedIterator:<init>(DefaultConvertibleHeaders-DefaultConvertibleHeaders$1)),
		DefaultConvertibleHeaders:namesAndConvert(Comparator) to listOf(DefaultConvertibleHeaders:names(), ConvertibleHeaders$TypeConverter:toConvertedType(Object)),
		StompSubframeDecoder$1:<clinit>() to listOf(StompSubframeDecoder$State:values(), StompSubframeDecoder$State:ordinal(), StompSubframeDecoder$State:ordinal(), StompSubframeDecoder$State:ordinal(), StompSubframeDecoder$State:ordinal(), StompSubframeDecoder$State:ordinal()),
		DefaultStompContentSubframe:copy() to listOf(DefaultStompContentSubframe:content(), ByteBuf:copy(), DefaultStompContentSubframe:<init>(ByteBuf), DefaultStompContentSubframe:copy()),
		DefaultStompContentSubframe:duplicate() to listOf(DefaultStompContentSubframe:content(), ByteBuf:duplicate(), DefaultStompContentSubframe:<init>(ByteBuf), DefaultStompContentSubframe:duplicate()),
		DefaultStompContentSubframe:refCnt() to listOf(DefaultStompContentSubframe:content(), ByteBuf:refCnt()),
		DefaultStompContentSubframe:retain() to listOf(DefaultStompContentSubframe:content(), ByteBuf:retain(), DefaultStompContentSubframe:retain(), DefaultStompContentSubframe:retain()),
		DefaultStompContentSubframe:retain(int) to listOf(DefaultStompContentSubframe:content(), ByteBuf:retain(int), DefaultStompContentSubframe:retain(int), DefaultStompContentSubframe:retain(int)),
		DefaultStompContentSubframe:touch() to listOf(ByteBuf:touch(), DefaultStompContentSubframe:touch(), DefaultStompContentSubframe:touch()),
		DefaultStompContentSubframe:touch(Object) to listOf(ByteBuf:touch(Object), DefaultStompContentSubframe:touch(Object), DefaultStompContentSubframe:touch(Object)),
		DefaultStompContentSubframe:release() to listOf(DefaultStompContentSubframe:content(), ByteBuf:release()),
		DefaultStompContentSubframe:release(int) to listOf(DefaultStompContentSubframe:content(), ByteBuf:release(int)),
		StompSubframeDecoder$State:values() to listOf(StompSubframeDecoder$State[]:clone()),
		StompSubframeDecoder$State:<clinit>() to listOf(StompSubframeDecoder$State:<init>(String-int), StompSubframeDecoder$State:<init>(String-int), StompSubframeDecoder$State:<init>(String-int), StompSubframeDecoder$State:<init>(String-int), StompSubframeDecoder$State:<init>(String-int), StompSubframeDecoder$State:<init>(String-int)),
		StompSubframeDecoder:<init>() to listOf(StompSubframeDecoder:<init>(int-int)),
		StompSubframeDecoder:<init>(int-int) to listOf(ReplayingDecoder:<init>(Object)),
		StompSubframeDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(StompSubframeDecoder:state(), StompSubframeDecoder$State:ordinal(), StompSubframeDecoder:skipControlCharacters(ByteBuf), StompSubframeDecoder:checkpoint(Object), StompSubframeDecoder:readCommand(ByteBuf), DefaultStompHeadersSubframe:<init>(StompCommand), StompHeadersSubframe:headers(), StompSubframeDecoder:readHeaders(ByteBuf-StompHeaders), StompSubframeDecoder:checkpoint(Object), DefaultStompHeadersSubframe:<init>(StompCommand), DecoderResult:failure(Throwable), StompHeadersSubframe:setDecoderResult(DecoderResult), StompSubframeDecoder:checkpoint(Object), StompSubframeDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), StompSubframeDecoder:state(), StompSubframeDecoder$State:ordinal(), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int), DefaultLastStompContentSubframe:<init>(ByteBuf), StompSubframeDecoder:checkpoint(Object), DefaultStompContentSubframe:<init>(ByteBuf), StompSubframeDecoder:skipNullCharacter(ByteBuf), StompSubframeDecoder:resetDecoder(), DefaultLastStompContentSubframe:<init>(ByteBuf), DecoderResult:failure(Throwable), StompContentSubframe:setDecoderResult(DecoderResult), StompSubframeDecoder:checkpoint(Object)),
		StompSubframeDecoder:readCommand(ByteBuf) to listOf(StompSubframeDecoder:readLine(ByteBuf-int), StompCommand:valueOf(String), StompCommand:valueOf(String), DecoderException:<init>(String)),
		StompSubframeDecoder:readHeaders(ByteBuf-StompHeaders) to listOf(StompSubframeDecoder:readLine(ByteBuf-int), StringUtil:split(String-char), StompHeaders:add(CharSequence-CharSequence), StompHeaders:contains(Object), StompSubframeDecoder:getContentLength(StompHeaders-long), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBufUtil:indexOf(ByteBuf-int-int-byte), ByteBuf:readerIndex()),
		StompSubframeDecoder:getContentLength(StompHeaders-long) to listOf(StompHeaders:getLong(Object-long)),
		StompSubframeDecoder:skipNullCharacter(ByteBuf) to listOf(ByteBuf:readByte()),
		StompSubframeDecoder:skipControlCharacters(ByteBuf) to listOf(ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		StompSubframeDecoder:readLine(ByteBuf-int) to listOf(AppendableCharSequence:<init>(int), ByteBuf:readByte(), ByteBuf:readByte(), AppendableCharSequence:toString(), AppendableCharSequence:toString(), TooLongFrameException:<init>(String), AppendableCharSequence:append(char)),
		StompSubframeDecoder:resetDecoder() to listOf(StompSubframeDecoder:checkpoint(Object)),
		DefaultStompFrame:<init>(StompCommand) to listOf(Unpooled:buffer(int), DefaultStompFrame:<init>(StompCommand-ByteBuf)),
		DefaultStompFrame:<init>(StompCommand-ByteBuf) to listOf(DefaultStompHeadersSubframe:<init>(StompCommand)),
		DefaultStompFrame:copy() to listOf(ByteBuf:copy(), DefaultStompFrame:<init>(StompCommand-ByteBuf), DefaultStompFrame:copy(), DefaultStompFrame:copy(), DefaultStompFrame:copy()),
		DefaultStompFrame:duplicate() to listOf(ByteBuf:duplicate(), DefaultStompFrame:<init>(StompCommand-ByteBuf), DefaultStompFrame:duplicate(), DefaultStompFrame:duplicate(), DefaultStompFrame:duplicate()),
		DefaultStompFrame:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultStompFrame:retain() to listOf(ByteBuf:retain(), DefaultStompFrame:retain(), DefaultStompFrame:retain(), DefaultStompFrame:retain(), DefaultStompFrame:retain()),
		DefaultStompFrame:retain(int) to listOf(ByteBuf:retain(), DefaultStompFrame:retain(int), DefaultStompFrame:retain(int), DefaultStompFrame:retain(int), DefaultStompFrame:retain(int)),
		DefaultStompFrame:touch() to listOf(ByteBuf:touch(), DefaultStompFrame:touch(), DefaultStompFrame:touch(), DefaultStompFrame:touch(), DefaultStompFrame:touch()),
		DefaultStompFrame:touch(Object) to listOf(ByteBuf:touch(Object), DefaultStompFrame:touch(Object), DefaultStompFrame:touch(Object), DefaultStompFrame:touch(Object), DefaultStompFrame:touch(Object)),
		DefaultStompFrame:release() to listOf(ByteBuf:release()),
		DefaultStompFrame:release(int) to listOf(ByteBuf:release(int)),
		DefaultStompFrame:toString() to listOf(ByteBuf:toString(Charset)),
		StompSubframeAggregator:<init>(int) to listOf(MessageAggregator:<init>(int)),
		StompSubframeAggregator:hasContentLength(StompHeadersSubframe) to listOf(StompHeadersSubframe:headers(), StompHeaders:contains(Object)),
		StompSubframeAggregator:contentLength(StompHeadersSubframe) to listOf(StompHeadersSubframe:headers(), StompHeaders:getLong(Object-long)),
		StompSubframeAggregator:beginAggregation(StompHeadersSubframe-ByteBuf) to listOf(StompHeadersSubframe:command(), DefaultStompFrame:<init>(StompCommand-ByteBuf), StompFrame:headers(), StompHeadersSubframe:headers(), StompHeaders:set(TextHeaders)),
		StompSubframeAggregator:beginAggregation(Object-ByteBuf) to listOf(StompSubframeAggregator:beginAggregation(StompHeadersSubframe-ByteBuf)),
		StompSubframeAggregator:newContinueResponse(Object) to listOf(StompSubframeAggregator:newContinueResponse(StompHeadersSubframe)),
		StompSubframeAggregator:contentLength(Object) to listOf(StompSubframeAggregator:contentLength(StompHeadersSubframe)),
		StompSubframeAggregator:hasContentLength(Object) to listOf(StompSubframeAggregator:hasContentLength(StompHeadersSubframe)),
		StompSubframeAggregator:isAggregated(Object) to listOf(StompSubframeAggregator:isAggregated(StompSubframe)),
		StompSubframeAggregator:isLastContentMessage(ByteBufHolder) to listOf(StompSubframeAggregator:isLastContentMessage(StompContentSubframe)),
		StompSubframeAggregator:isContentMessage(Object) to listOf(StompSubframeAggregator:isContentMessage(StompSubframe)),
		StompSubframeAggregator:isStartMessage(Object) to listOf(StompSubframeAggregator:isStartMessage(StompSubframe)),
		LastStompContentSubframe:<clinit>() to listOf(LastStompContentSubframe$1:<init>()),
		DefaultLastStompContentSubframe:<init>(ByteBuf) to listOf(DefaultStompContentSubframe:<init>(ByteBuf)),
		DefaultLastStompContentSubframe:retain() to listOf(DefaultStompContentSubframe:retain(), DefaultLastStompContentSubframe:retain(), DefaultLastStompContentSubframe:retain(), DefaultLastStompContentSubframe:retain(), DefaultLastStompContentSubframe:retain()),
		DefaultLastStompContentSubframe:retain(int) to listOf(DefaultStompContentSubframe:retain(int), DefaultLastStompContentSubframe:retain(int), DefaultLastStompContentSubframe:retain(int), DefaultLastStompContentSubframe:retain(int)),
		DefaultLastStompContentSubframe:touch() to listOf(DefaultStompContentSubframe:touch(), DefaultLastStompContentSubframe:touch(), DefaultLastStompContentSubframe:touch(), DefaultLastStompContentSubframe:touch()),
		DefaultLastStompContentSubframe:touch(Object) to listOf(DefaultStompContentSubframe:touch(Object), DefaultLastStompContentSubframe:touch(Object), DefaultLastStompContentSubframe:touch(Object), DefaultLastStompContentSubframe:touch(Object)),
		DefaultLastStompContentSubframe:copy() to listOf(DefaultLastStompContentSubframe:content(), ByteBuf:copy(), DefaultLastStompContentSubframe:<init>(ByteBuf), DefaultLastStompContentSubframe:copy(), DefaultLastStompContentSubframe:copy()),
		DefaultLastStompContentSubframe:duplicate() to listOf(DefaultLastStompContentSubframe:content(), ByteBuf:duplicate(), DefaultLastStompContentSubframe:<init>(ByteBuf), DefaultLastStompContentSubframe:duplicate(), DefaultLastStompContentSubframe:duplicate()),
		DefaultLastStompContentSubframe:toString() to listOf(DefaultLastStompContentSubframe:decoderResult()),
		DefaultStompHeadersSubframe:<init>(StompCommand) to listOf(DefaultStompHeaders:<init>()),
		StompHeaders:<clinit>() to listOf(AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence), AsciiString:<init>(CharSequence)),
		StompCommand:values() to listOf(StompCommand[]:clone()),
		StompCommand:<clinit>() to listOf(StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int), StompCommand:<init>(String-int)),
		DefaultStompHeaders:<init>() to listOf(DefaultTextHeaders:<init>()),
		DefaultStompHeaders:add(CharSequence-CharSequence) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence), DefaultStompHeaders:add(CharSequence-CharSequence)),
		DefaultStompHeaders:add(CharSequence-Iterable) to listOf(DefaultTextHeaders:add(CharSequence-Iterable), DefaultStompHeaders:add(CharSequence-Iterable)),
		DefaultStompHeaders:add(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:add(CharSequence-CharSequence[]), DefaultStompHeaders:add(CharSequence-CharSequence[])),
		DefaultStompHeaders:addObject(CharSequence-Object) to listOf(DefaultTextHeaders:addObject(CharSequence-Object), DefaultStompHeaders:addObject(CharSequence-Object)),
		DefaultStompHeaders:addObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:addObject(CharSequence-Iterable), DefaultStompHeaders:addObject(CharSequence-Iterable)),
		DefaultStompHeaders:addObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:addObject(CharSequence-Object[]), DefaultStompHeaders:addObject(CharSequence-Object[])),
		DefaultStompHeaders:addBoolean(CharSequence-boolean) to listOf(DefaultTextHeaders:addBoolean(CharSequence-boolean), DefaultStompHeaders:addBoolean(CharSequence-boolean)),
		DefaultStompHeaders:addChar(CharSequence-char) to listOf(DefaultTextHeaders:addChar(CharSequence-char), DefaultStompHeaders:addChar(CharSequence-char)),
		DefaultStompHeaders:addByte(CharSequence-byte) to listOf(DefaultTextHeaders:addByte(CharSequence-byte), DefaultStompHeaders:addByte(CharSequence-byte)),
		DefaultStompHeaders:addShort(CharSequence-short) to listOf(DefaultTextHeaders:addShort(CharSequence-short), DefaultStompHeaders:addShort(CharSequence-short)),
		DefaultStompHeaders:addInt(CharSequence-int) to listOf(DefaultTextHeaders:addInt(CharSequence-int), DefaultStompHeaders:addInt(CharSequence-int)),
		DefaultStompHeaders:addLong(CharSequence-long) to listOf(DefaultTextHeaders:addLong(CharSequence-long), DefaultStompHeaders:addLong(CharSequence-long)),
		DefaultStompHeaders:addFloat(CharSequence-float) to listOf(DefaultTextHeaders:addFloat(CharSequence-float), DefaultStompHeaders:addFloat(CharSequence-float)),
		DefaultStompHeaders:addDouble(CharSequence-double) to listOf(DefaultTextHeaders:addDouble(CharSequence-double), DefaultStompHeaders:addDouble(CharSequence-double)),
		DefaultStompHeaders:addTimeMillis(CharSequence-long) to listOf(DefaultTextHeaders:addTimeMillis(CharSequence-long), DefaultStompHeaders:addTimeMillis(CharSequence-long)),
		DefaultStompHeaders:add(TextHeaders) to listOf(DefaultTextHeaders:add(TextHeaders), DefaultStompHeaders:add(TextHeaders)),
		DefaultStompHeaders:set(CharSequence-CharSequence) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence), DefaultStompHeaders:set(CharSequence-CharSequence)),
		DefaultStompHeaders:set(CharSequence-Iterable) to listOf(DefaultTextHeaders:set(CharSequence-Iterable), DefaultStompHeaders:set(CharSequence-Iterable)),
		DefaultStompHeaders:set(CharSequence-CharSequence[]) to listOf(DefaultTextHeaders:set(CharSequence-CharSequence[]), DefaultStompHeaders:set(CharSequence-CharSequence[])),
		DefaultStompHeaders:setObject(CharSequence-Object) to listOf(DefaultTextHeaders:setObject(CharSequence-Object), DefaultStompHeaders:setObject(CharSequence-Object)),
		DefaultStompHeaders:setObject(CharSequence-Iterable) to listOf(DefaultTextHeaders:setObject(CharSequence-Iterable), DefaultStompHeaders:setObject(CharSequence-Iterable)),
		DefaultStompHeaders:setObject(CharSequence-Object[]) to listOf(DefaultTextHeaders:setObject(CharSequence-Object[]), DefaultStompHeaders:setObject(CharSequence-Object[])),
		DefaultStompHeaders:setBoolean(CharSequence-boolean) to listOf(DefaultTextHeaders:setBoolean(CharSequence-boolean), DefaultStompHeaders:setBoolean(CharSequence-boolean)),
		DefaultStompHeaders:setChar(CharSequence-char) to listOf(DefaultTextHeaders:setChar(CharSequence-char), DefaultStompHeaders:setChar(CharSequence-char)),
		DefaultStompHeaders:setByte(CharSequence-byte) to listOf(DefaultTextHeaders:setByte(CharSequence-byte), DefaultStompHeaders:setByte(CharSequence-byte)),
		DefaultStompHeaders:setShort(CharSequence-short) to listOf(DefaultTextHeaders:setShort(CharSequence-short), DefaultStompHeaders:setShort(CharSequence-short)),
		DefaultStompHeaders:setInt(CharSequence-int) to listOf(DefaultTextHeaders:setInt(CharSequence-int), DefaultStompHeaders:setInt(CharSequence-int)),
		DefaultStompHeaders:setLong(CharSequence-long) to listOf(DefaultTextHeaders:setLong(CharSequence-long), DefaultStompHeaders:setLong(CharSequence-long)),
		DefaultStompHeaders:setFloat(CharSequence-float) to listOf(DefaultTextHeaders:setFloat(CharSequence-float), DefaultStompHeaders:setFloat(CharSequence-float)),
		DefaultStompHeaders:setDouble(CharSequence-double) to listOf(DefaultTextHeaders:setDouble(CharSequence-double), DefaultStompHeaders:setDouble(CharSequence-double)),
		DefaultStompHeaders:setTimeMillis(CharSequence-long) to listOf(DefaultTextHeaders:setTimeMillis(CharSequence-long), DefaultStompHeaders:setTimeMillis(CharSequence-long)),
		DefaultStompHeaders:set(TextHeaders) to listOf(DefaultTextHeaders:set(TextHeaders), DefaultStompHeaders:set(TextHeaders)),
		DefaultStompHeaders:setAll(TextHeaders) to listOf(DefaultTextHeaders:setAll(TextHeaders), DefaultStompHeaders:setAll(TextHeaders)),
		DefaultStompHeaders:clear() to listOf(DefaultTextHeaders:clear(), DefaultStompHeaders:clear(), DefaultStompHeaders:clear()),
		DefaultStompHeaders:setTimeMillis(Object-long) to listOf(DefaultStompHeaders:setTimeMillis(CharSequence-long)),
		DefaultStompHeaders:setDouble(Object-double) to listOf(DefaultStompHeaders:setDouble(CharSequence-double)),
		DefaultStompHeaders:setFloat(Object-float) to listOf(DefaultStompHeaders:setFloat(CharSequence-float)),
		DefaultStompHeaders:setLong(Object-long) to listOf(DefaultStompHeaders:setLong(CharSequence-long)),
		DefaultStompHeaders:setInt(Object-int) to listOf(DefaultStompHeaders:setInt(CharSequence-int)),
		DefaultStompHeaders:setShort(Object-short) to listOf(DefaultStompHeaders:setShort(CharSequence-short)),
		DefaultStompHeaders:setChar(Object-char) to listOf(DefaultStompHeaders:setChar(CharSequence-char)),
		DefaultStompHeaders:setByte(Object-byte) to listOf(DefaultStompHeaders:setByte(CharSequence-byte)),
		DefaultStompHeaders:setBoolean(Object-boolean) to listOf(DefaultStompHeaders:setBoolean(CharSequence-boolean)),
		DefaultStompHeaders:setObject(Object-Object[]) to listOf(DefaultStompHeaders:setObject(CharSequence-Object[])),
		DefaultStompHeaders:setObject(Object-Iterable) to listOf(DefaultStompHeaders:setObject(CharSequence-Iterable)),
		DefaultStompHeaders:setObject(Object-Object) to listOf(DefaultStompHeaders:setObject(CharSequence-Object)),
		DefaultStompHeaders:set(Object-Object[]) to listOf(DefaultStompHeaders:set(CharSequence-CharSequence[])),
		DefaultStompHeaders:set(Object-Iterable) to listOf(DefaultStompHeaders:set(CharSequence-Iterable)),
		DefaultStompHeaders:set(Object-Object) to listOf(DefaultStompHeaders:set(CharSequence-CharSequence)),
		DefaultStompHeaders:addTimeMillis(Object-long) to listOf(DefaultStompHeaders:addTimeMillis(CharSequence-long)),
		DefaultStompHeaders:addDouble(Object-double) to listOf(DefaultStompHeaders:addDouble(CharSequence-double)),
		DefaultStompHeaders:addFloat(Object-float) to listOf(DefaultStompHeaders:addFloat(CharSequence-float)),
		DefaultStompHeaders:addLong(Object-long) to listOf(DefaultStompHeaders:addLong(CharSequence-long)),
		DefaultStompHeaders:addInt(Object-int) to listOf(DefaultStompHeaders:addInt(CharSequence-int)),
		DefaultStompHeaders:addShort(Object-short) to listOf(DefaultStompHeaders:addShort(CharSequence-short)),
		DefaultStompHeaders:addChar(Object-char) to listOf(DefaultStompHeaders:addChar(CharSequence-char)),
		DefaultStompHeaders:addByte(Object-byte) to listOf(DefaultStompHeaders:addByte(CharSequence-byte)),
		DefaultStompHeaders:addBoolean(Object-boolean) to listOf(DefaultStompHeaders:addBoolean(CharSequence-boolean)),
		DefaultStompHeaders:addObject(Object-Object[]) to listOf(DefaultStompHeaders:addObject(CharSequence-Object[])),
		DefaultStompHeaders:addObject(Object-Iterable) to listOf(DefaultStompHeaders:addObject(CharSequence-Iterable)),
		DefaultStompHeaders:addObject(Object-Object) to listOf(DefaultStompHeaders:addObject(CharSequence-Object)),
		DefaultStompHeaders:add(Object-Object[]) to listOf(DefaultStompHeaders:add(CharSequence-CharSequence[])),
		DefaultStompHeaders:add(Object-Iterable) to listOf(DefaultStompHeaders:add(CharSequence-Iterable)),
		DefaultStompHeaders:add(Object-Object) to listOf(DefaultStompHeaders:add(CharSequence-CharSequence)),
		LastStompContentSubframe$1:touch(Object) to listOf(LastStompContentSubframe$1:touch(Object), LastStompContentSubframe$1:touch(Object), LastStompContentSubframe$1:touch(Object)),
		LastStompContentSubframe$1:touch() to listOf(LastStompContentSubframe$1:touch(), LastStompContentSubframe$1:touch(), LastStompContentSubframe$1:touch()),
		LastStompContentSubframe$1:retain(int) to listOf(LastStompContentSubframe$1:retain(int), LastStompContentSubframe$1:retain(int), LastStompContentSubframe$1:retain(int)),
		LastStompContentSubframe$1:retain() to listOf(LastStompContentSubframe$1:retain(), LastStompContentSubframe$1:retain(), LastStompContentSubframe$1:retain()),
		LastStompContentSubframe$1:duplicate() to listOf(LastStompContentSubframe$1:duplicate(), LastStompContentSubframe$1:duplicate()),
		LastStompContentSubframe$1:copy() to listOf(LastStompContentSubframe$1:copy(), LastStompContentSubframe$1:copy()),
		StompSubframeEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		StompSubframeEncoder:encode(ChannelHandlerContext-StompSubframe-List) to listOf(StompSubframeEncoder:encodeFrame(StompHeadersSubframe-ChannelHandlerContext), StompSubframeEncoder:encodeContent(StompContentSubframe-ChannelHandlerContext), StompSubframeEncoder:encodeFrame(StompHeadersSubframe-ChannelHandlerContext), StompSubframeEncoder:encodeContent(StompContentSubframe-ChannelHandlerContext)),
		StompSubframeEncoder:encodeContent(StompContentSubframe-ChannelHandlerContext) to listOf(ChannelHandlerContext:alloc(), StompContentSubframe:content(), ByteBuf:readableBytes(), ByteBufAllocator:buffer(int), StompContentSubframe:content(), ByteBuf:writeBytes(ByteBuf), ByteBuf:writeByte(int), StompContentSubframe:content(), ByteBuf:retain()),
		StompSubframeEncoder:encodeFrame(StompHeadersSubframe-ChannelHandlerContext) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), StompHeadersSubframe:command(), StompCommand:toString(), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), StompHeadersSubframe:headers(), AsciiHeadersEncoder:<init>(ByteBuf-AsciiHeadersEncoder$SeparatorType-AsciiHeadersEncoder$NewlineType), StompHeaders:forEachEntry(Headers$EntryVisitor), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:writeByte(int)),
		StompSubframeEncoder:encode(ChannelHandlerContext-Object-List) to listOf(StompSubframeEncoder:encode(ChannelHandlerContext-StompSubframe-List)),
		DnsEntry:hashCode() to listOf(DnsType:hashCode(), DnsClass:hashCode()),
		DnsEntry:toString() to listOf(StringUtil:simpleClassName(Object)),
		DnsEntry:equals(Object) to listOf(DnsEntry:type(), DnsType:intValue(), DnsEntry:type(), DnsType:intValue(), DnsEntry:dnsClass(), DnsClass:intValue(), DnsEntry:dnsClass(), DnsClass:intValue(), DnsEntry:name(), DnsEntry:name()),
		DnsResponseDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		DnsResponseDecoder:decode(ChannelHandlerContext-DatagramPacket-List) to listOf(DatagramPacket:content(), ByteBuf:readUnsignedShort(), DatagramPacket:sender(), DnsResponse:<init>(int-InetSocketAddress), DnsResponse:header(), ByteBuf:readUnsignedShort(), DnsResponseHeader:setType(int), DnsResponseHeader:setOpcode(int), DnsResponseHeader:setRecursionDesired(boolean), DnsResponseHeader:setAuthoritativeAnswer(boolean), DnsResponseHeader:setTruncated(boolean), DnsResponseHeader:setRecursionAvailable(boolean), DnsResponseHeader:setZ(int), DnsResponseCode:valueOf(int), DnsResponseHeader:setResponseCode(DnsResponseCode), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), ByteBuf:readUnsignedShort(), DnsResponseDecoder:decodeQuestion(ByteBuf), DnsResponse:addQuestion(DnsQuestion), DnsResponseHeader:responseCode(), DnsResponseDecoder:decodeResource(ByteBuf), DnsResponse:addAnswer(DnsResource), DnsResponseDecoder:decodeResource(ByteBuf), DnsResponse:addAuthorityResource(DnsResource), DnsResponseDecoder:decodeResource(ByteBuf), DnsResponse:addAdditionalResource(DnsResource), DnsResponse:answers(), DnsResponseDecoder:releaseDnsResources(List), DnsResponse:authorityResources(), DnsResponseDecoder:releaseDnsResources(List), DnsResponse:additionalResources(), DnsResponseDecoder:releaseDnsResources(List), DnsResponse:answers(), DnsResponseDecoder:releaseDnsResources(List), DnsResponse:authorityResources(), DnsResponseDecoder:releaseDnsResources(List), DnsResponse:additionalResources(), DnsResponseDecoder:releaseDnsResources(List)),
		DnsResponseDecoder:releaseDnsResources(List) to listOf(DnsResource:release()),
		DnsResponseDecoder:readName(ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:readUnsignedByte(), ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(int), CorruptedFrameException:<init>(String), ByteBuf:readerIndex(), ByteBuf:toString(int-int-Charset), ByteBuf:skipBytes(int), ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(int)),
		DnsResponseDecoder:decodeQuestion(ByteBuf) to listOf(DnsResponseDecoder:readName(ByteBuf), ByteBuf:readUnsignedShort(), DnsType:valueOf(int), ByteBuf:readUnsignedShort(), DnsClass:valueOf(int), DnsQuestion:<init>(String-DnsType-DnsClass)),
		DnsResponseDecoder:decodeResource(ByteBuf) to listOf(DnsResponseDecoder:readName(ByteBuf), ByteBuf:readUnsignedShort(), DnsType:valueOf(int), ByteBuf:readUnsignedShort(), DnsClass:valueOf(int), ByteBuf:readUnsignedInt(), ByteBuf:readUnsignedShort(), ByteBuf:readerIndex(), ByteBuf:duplicate(), ByteBuf:setIndex(int-int), ByteBuf:retain(), ByteBuf:readerIndex(int), DnsResource:<init>(String-DnsType-DnsClass-long-ByteBuf)),
		DnsResponseDecoder:decode(ChannelHandlerContext-Object-List) to listOf(DnsResponseDecoder:decode(ChannelHandlerContext-DatagramPacket-List)),
		DnsQueryEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		DnsQueryEncoder:encode(ChannelHandlerContext-DnsQuery-List) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), DnsQuery:header(), DnsQueryEncoder:encodeHeader(DnsHeader-ByteBuf), DnsQuery:questions(), DnsQueryEncoder:encodeQuestion(DnsQuestion-Charset-ByteBuf), DnsQuery:additionalResources(), DnsQueryEncoder:encodeResource(DnsResource-Charset-ByteBuf), DnsQuery:recipient(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress)),
		DnsQueryEncoder:encodeHeader(DnsHeader-ByteBuf) to listOf(DnsHeader:id(), ByteBuf:writeShort(int), DnsHeader:type(), DnsHeader:opcode(), DnsHeader:isRecursionDesired(), ByteBuf:writeShort(int), DnsHeader:questionCount(), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), DnsHeader:additionalResourceCount(), ByteBuf:writeShort(int)),
		DnsQueryEncoder:encodeQuestion(DnsQuestion-Charset-ByteBuf) to listOf(DnsQuestion:name(), DnsQueryEncoder:encodeName(String-Charset-ByteBuf), DnsQuestion:type(), DnsType:intValue(), ByteBuf:writeShort(int), DnsQuestion:dnsClass(), DnsClass:intValue(), ByteBuf:writeShort(int)),
		DnsQueryEncoder:encodeResource(DnsResource-Charset-ByteBuf) to listOf(DnsResource:name(), DnsQueryEncoder:encodeName(String-Charset-ByteBuf), DnsResource:type(), DnsType:intValue(), ByteBuf:writeShort(int), DnsResource:dnsClass(), DnsClass:intValue(), ByteBuf:writeShort(int), DnsResource:timeToLive(), ByteBuf:writeInt(int), DnsResource:content(), ByteBuf:readableBytes(), ByteBuf:writeShort(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		DnsQueryEncoder:encodeName(String-Charset-ByteBuf) to listOf(StringUtil:split(String-char), ByteBuf:writeByte(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int)),
		DnsQueryEncoder:encode(ChannelHandlerContext-Object-List) to listOf(DnsQueryEncoder:encode(ChannelHandlerContext-DnsQuery-List)),
		DnsQueryHeader:<init>(DnsMessage-int) to listOf(DnsHeader:<init>(DnsMessage), DnsQueryHeader:setId(int), DnsQueryHeader:setRecursionDesired(boolean)),
		DnsQueryHeader:setType(int) to listOf(DnsHeader:setType(int), DnsQueryHeader:setType(int)),
		DnsQueryHeader:setId(int) to listOf(DnsHeader:setId(int), DnsQueryHeader:setId(int)),
		DnsQueryHeader:setRecursionDesired(boolean) to listOf(DnsHeader:setRecursionDesired(boolean), DnsQueryHeader:setRecursionDesired(boolean)),
		DnsQueryHeader:setOpcode(int) to listOf(DnsHeader:setOpcode(int), DnsQueryHeader:setOpcode(int)),
		DnsQueryHeader:setZ(int) to listOf(DnsHeader:setZ(int), DnsQueryHeader:setZ(int)),
		DnsType:valueOf(int) to listOf(IntObjectHashMap:get(int), DnsType:<init>(int-String)),
		DnsType:valueOf(int-String) to listOf(DnsType:<init>(int-String)),
		DnsType:compareTo(DnsType) to listOf(DnsType:intValue(), DnsType:intValue()),
		DnsType:compareTo(Object) to listOf(DnsType:compareTo(DnsType)),
		DnsType:<clinit>() to listOf(DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), DnsType:<init>(int-String), IntObjectHashMap:<init>(), DnsType:name(), DnsType:intValue(), IntObjectHashMap:put(int-Object), DnsType:name(), DnsType:intValue()),
		DnsQuery:<init>(int-InetSocketAddress) to listOf(DnsMessage:<init>(int)),
		DnsQuery:addAnswer(DnsResource) to listOf(DnsMessage:addAnswer(DnsResource), DnsQuery:addAnswer(DnsResource)),
		DnsQuery:addQuestion(DnsQuestion) to listOf(DnsMessage:addQuestion(DnsQuestion), DnsQuery:addQuestion(DnsQuestion)),
		DnsQuery:addAuthorityResource(DnsResource) to listOf(DnsMessage:addAuthorityResource(DnsResource), DnsQuery:addAuthorityResource(DnsResource)),
		DnsQuery:addAdditionalResource(DnsResource) to listOf(DnsMessage:addAdditionalResource(DnsResource), DnsQuery:addAdditionalResource(DnsResource)),
		DnsQuery:touch(Object) to listOf(DnsMessage:touch(Object), DnsQuery:touch(Object), DnsQuery:touch(Object)),
		DnsQuery:retain() to listOf(DnsMessage:retain(), DnsQuery:retain(), DnsQuery:retain()),
		DnsQuery:retain(int) to listOf(DnsMessage:retain(int), DnsQuery:retain(int), DnsQuery:retain(int)),
		DnsQuery:touch() to listOf(DnsMessage:touch(), DnsQuery:touch(), DnsQuery:touch()),
		DnsQuery:header() to listOf(DnsMessage:header(), DnsQuery:header()),
		DnsQuery:newHeader(int) to listOf(DnsQueryHeader:<init>(DnsMessage-int), DnsQuery:newHeader(int)),
		DnsResource:<init>(String-DnsType-DnsClass-long-ByteBuf) to listOf(DnsEntry:<init>(String-DnsType-DnsClass)),
		DnsResource:copy() to listOf(DnsResource:name(), DnsResource:type(), DnsResource:dnsClass(), ByteBuf:copy(), DnsResource:<init>(String-DnsType-DnsClass-long-ByteBuf), DnsResource:copy()),
		DnsResource:duplicate() to listOf(DnsResource:name(), DnsResource:type(), DnsResource:dnsClass(), ByteBuf:duplicate(), DnsResource:<init>(String-DnsType-DnsClass-long-ByteBuf), DnsResource:duplicate()),
		DnsResource:refCnt() to listOf(ByteBuf:refCnt()),
		DnsResource:retain() to listOf(ByteBuf:retain(), DnsResource:retain(), DnsResource:retain()),
		DnsResource:retain(int) to listOf(ByteBuf:retain(int), DnsResource:retain(int), DnsResource:retain(int)),
		DnsResource:release() to listOf(ByteBuf:release()),
		DnsResource:release(int) to listOf(ByteBuf:release(int)),
		DnsResource:touch() to listOf(ByteBuf:touch(), DnsResource:touch(), DnsResource:touch()),
		DnsResource:touch(Object) to listOf(ByteBuf:touch(Object), DnsResource:touch(Object), DnsResource:touch(Object)),
		DnsResponseCode:valueOf(int) to listOf(DnsResponseCode:<init>(int-String)),
		DnsResponseCode:compareTo(DnsResponseCode) to listOf(DnsResponseCode:code(), DnsResponseCode:code()),
		DnsResponseCode:hashCode() to listOf(DnsResponseCode:code()),
		DnsResponseCode:equals(Object) to listOf(DnsResponseCode:code(), DnsResponseCode:code()),
		DnsResponseCode:compareTo(Object) to listOf(DnsResponseCode:compareTo(DnsResponseCode)),
		DnsResponseCode:<clinit>() to listOf(DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String), DnsResponseCode:<init>(int-String)),
		DnsResponse:<init>(int-InetSocketAddress) to listOf(DnsMessage:<init>(int)),
		DnsResponse:addAnswer(DnsResource) to listOf(DnsMessage:addAnswer(DnsResource), DnsResponse:addAnswer(DnsResource)),
		DnsResponse:addQuestion(DnsQuestion) to listOf(DnsMessage:addQuestion(DnsQuestion), DnsResponse:addQuestion(DnsQuestion)),
		DnsResponse:addAuthorityResource(DnsResource) to listOf(DnsMessage:addAuthorityResource(DnsResource), DnsResponse:addAuthorityResource(DnsResource)),
		DnsResponse:addAdditionalResource(DnsResource) to listOf(DnsMessage:addAdditionalResource(DnsResource), DnsResponse:addAdditionalResource(DnsResource)),
		DnsResponse:touch(Object) to listOf(DnsMessage:touch(Object), DnsResponse:touch(Object), DnsResponse:touch(Object)),
		DnsResponse:retain() to listOf(DnsMessage:retain(), DnsResponse:retain(), DnsResponse:retain()),
		DnsResponse:retain(int) to listOf(DnsMessage:retain(int), DnsResponse:retain(int), DnsResponse:retain(int)),
		DnsResponse:touch() to listOf(DnsMessage:touch(), DnsResponse:touch(), DnsResponse:touch()),
		DnsResponse:header() to listOf(DnsMessage:header(), DnsResponse:header()),
		DnsResponse:newHeader(int) to listOf(DnsResponseHeader:<init>(DnsMessage-int), DnsResponse:newHeader(int)),
		DnsHeader:questionCount() to listOf(DnsMessage:questions()),
		DnsHeader:answerCount() to listOf(DnsMessage:answers()),
		DnsHeader:authorityResourceCount() to listOf(DnsMessage:authorityResources()),
		DnsHeader:additionalResourceCount() to listOf(DnsMessage:additionalResources()),
		DnsQuestion:<init>(String-DnsType) to listOf(DnsQuestion:<init>(String-DnsType-DnsClass)),
		DnsQuestion:<init>(String-DnsType-DnsClass) to listOf(DnsEntry:<init>(String-DnsType-DnsClass)),
		DnsQuestion:equals(Object) to listOf(DnsEntry:equals(Object)),
		DnsQuestion:hashCode() to listOf(DnsEntry:hashCode()),
		DnsResponseHeader:<init>(DnsMessage-int) to listOf(DnsHeader:<init>(DnsMessage), DnsResponseHeader:setId(int)),
		DnsResponseHeader:setType(int) to listOf(DnsHeader:setType(int), DnsResponseHeader:setType(int)),
		DnsResponseHeader:setId(int) to listOf(DnsHeader:setId(int), DnsResponseHeader:setId(int)),
		DnsResponseHeader:setRecursionDesired(boolean) to listOf(DnsHeader:setRecursionDesired(boolean)),
		DnsResponseHeader:setOpcode(int) to listOf(DnsHeader:setOpcode(int), DnsResponseHeader:setOpcode(int)),
		DnsResponseHeader:setZ(int) to listOf(DnsHeader:setZ(int), DnsResponseHeader:setZ(int)),
		DnsClass:valueOf(String) to listOf(DnsClass:name(), DnsClass:name(), DnsClass:name(), DnsClass:name(), DnsClass:name(), DnsClass:name()),
		DnsClass:valueOf(int) to listOf(DnsClass:<init>(int-String)),
		DnsClass:valueOf(int-String) to listOf(DnsClass:<init>(int-String)),
		DnsClass:compareTo(DnsClass) to listOf(DnsClass:intValue(), DnsClass:intValue()),
		DnsClass:compareTo(Object) to listOf(DnsClass:compareTo(DnsClass)),
		DnsClass:<clinit>() to listOf(DnsClass:<init>(int-String), DnsClass:<init>(int-String), DnsClass:<init>(int-String), DnsClass:<init>(int-String), DnsClass:<init>(int-String), DnsClass:<init>(int-String), DnsClass:intValue(), DnsClass:intValue(), DnsClass:intValue(), DnsClass:intValue(), DnsClass:intValue(), DnsClass:intValue()),
		DnsMessage:<init>(int) to listOf(AbstractReferenceCounted:<init>(), DnsMessage:newHeader(int)),
		DnsMessage:release() to listOf(DnsMessage:questions(), DnsMessage:release(List), DnsMessage:answers(), DnsMessage:release(List), DnsMessage:additionalResources(), DnsMessage:release(List), DnsMessage:authorityResources(), DnsMessage:release(List), AbstractReferenceCounted:release()),
		DnsMessage:release(List) to listOf(ReferenceCountUtil:release(Object)),
		DnsMessage:release(int) to listOf(DnsMessage:questions(), DnsMessage:release(List-int), DnsMessage:answers(), DnsMessage:release(List-int), DnsMessage:additionalResources(), DnsMessage:release(List-int), DnsMessage:authorityResources(), DnsMessage:release(List-int), AbstractReferenceCounted:release(int)),
		DnsMessage:release(List-int) to listOf(ReferenceCountUtil:release(Object-int)),
		DnsMessage:touch(Object) to listOf(DnsMessage:questions(), DnsMessage:touch(List-Object), DnsMessage:answers(), DnsMessage:touch(List-Object), DnsMessage:additionalResources(), DnsMessage:touch(List-Object), DnsMessage:authorityResources(), DnsMessage:touch(List-Object), DnsMessage:touch(Object)),
		DnsMessage:touch(List-Object) to listOf(ReferenceCountUtil:touch(Object-Object)),
		DnsMessage:retain() to listOf(DnsMessage:questions(), DnsMessage:retain(List), DnsMessage:answers(), DnsMessage:retain(List), DnsMessage:additionalResources(), DnsMessage:retain(List), DnsMessage:authorityResources(), DnsMessage:retain(List), AbstractReferenceCounted:retain(), DnsMessage:retain()),
		DnsMessage:retain(List) to listOf(ReferenceCountUtil:retain(Object)),
		DnsMessage:retain(int) to listOf(DnsMessage:questions(), DnsMessage:retain(List-int), DnsMessage:answers(), DnsMessage:retain(List-int), DnsMessage:additionalResources(), DnsMessage:retain(List-int), DnsMessage:authorityResources(), DnsMessage:retain(List-int), AbstractReferenceCounted:retain(int), DnsMessage:retain(int)),
		DnsMessage:retain(List-int) to listOf(ReferenceCountUtil:retain(Object-int)),
		DnsMessage:touch() to listOf(AbstractReferenceCounted:touch(), DnsMessage:touch()),
		SocksPortUnificationServerHandler:<init>() to listOf(SocksPortUnificationServerHandler:<init>(Socks5ServerEncoder)),
		SocksPortUnificationServerHandler:<init>(Socks5ServerEncoder) to listOf(ByteToMessageDecoder:<init>()),
		SocksPortUnificationServerHandler:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), ChannelHandlerContext:pipeline(), ByteBuf:getByte(int), SocksVersion:valueOf(byte), SocksVersion:ordinal(), SocksPortUnificationServerHandler:logKnownVersion(ChannelHandlerContext-SocksVersion), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelHandlerContext:name(), Socks4ServerDecoder:<init>(), ChannelPipeline:addAfter(String-String-ChannelHandler), SocksPortUnificationServerHandler:logKnownVersion(ChannelHandlerContext-SocksVersion), ChannelHandlerContext:name(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelHandlerContext:name(), Socks5InitialRequestDecoder:<init>(), ChannelPipeline:addAfter(String-String-ChannelHandler), SocksPortUnificationServerHandler:logUnknownVersion(ChannelHandlerContext-byte), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ChannelHandlerContext:close(), ChannelPipeline:remove(ChannelHandler)),
		SocksPortUnificationServerHandler:logKnownVersion(ChannelHandlerContext-SocksVersion) to listOf(ChannelHandlerContext:channel(), InternalLogger:debug(String-Object-Object)),
		SocksPortUnificationServerHandler:logUnknownVersion(ChannelHandlerContext-byte) to listOf(InternalLogger:isDebugEnabled(), ChannelHandlerContext:channel(), InternalLogger:debug(String-Object-Object)),
		SocksPortUnificationServerHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		Socks4ClientDecoder$1:<clinit>() to listOf(Socks4ClientDecoder$State:values(), Socks4ClientDecoder$State:ordinal(), Socks4ClientDecoder$State:ordinal(), Socks4ClientDecoder$State:ordinal()),
		Socks4ClientEncoder:<init>() to listOf(MessageToByteEncoder:<init>()),
		Socks4ClientEncoder:encode(ChannelHandlerContext-Socks4CommandRequest-ByteBuf) to listOf(Socks4CommandRequest:version(), SocksVersion:byteValue(), ByteBuf:writeByte(int), Socks4CommandRequest:type(), Socks4CommandType:byteValue(), ByteBuf:writeByte(int), Socks4CommandRequest:dstPort(), ByteBuf:writeShort(int), Socks4CommandRequest:dstAddr(), NetUtil:isValidIpV4Address(String), Socks4CommandRequest:dstAddr(), NetUtil:createByteArrayFromIpAddressString(String), ByteBuf:writeBytes(byte[]), Socks4CommandRequest:userId(), ByteBufUtil:writeAscii(ByteBuf-CharSequence), ByteBuf:writeByte(int), ByteBuf:writeBytes(byte[]), Socks4CommandRequest:userId(), ByteBufUtil:writeAscii(ByteBuf-CharSequence), ByteBuf:writeByte(int), Socks4CommandRequest:dstAddr(), ByteBufUtil:writeAscii(ByteBuf-CharSequence), ByteBuf:writeByte(int)),
		Socks4ClientEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(Socks4ClientEncoder:encode(ChannelHandlerContext-Socks4CommandRequest-ByteBuf)),
		Socks4ClientEncoder:<clinit>() to listOf(Socks4ClientEncoder:<init>()),
		Socks4ServerDecoder$1:<clinit>() to listOf(Socks4ServerDecoder$State:values(), Socks4ServerDecoder$State:ordinal(), Socks4ServerDecoder$State:ordinal(), Socks4ServerDecoder$State:ordinal(), Socks4ServerDecoder$State:ordinal(), Socks4ServerDecoder$State:ordinal()),
		Socks4ServerEncoder:<init>() to listOf(MessageToByteEncoder:<init>()),
		Socks4ServerEncoder:encode(ChannelHandlerContext-Socks4CommandResponse-ByteBuf) to listOf(ByteBuf:writeByte(int), Socks4CommandResponse:status(), Socks4CommandStatus:byteValue(), ByteBuf:writeByte(int), Socks4CommandResponse:dstPort(), ByteBuf:writeShort(int), Socks4CommandResponse:dstAddr(), Socks4CommandResponse:dstAddr(), NetUtil:createByteArrayFromIpAddressString(String), ByteBuf:writeBytes(byte[])),
		Socks4ServerEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(Socks4ServerEncoder:encode(ChannelHandlerContext-Socks4CommandResponse-ByteBuf)),
		Socks4ServerEncoder:<clinit>() to listOf(Socks4ServerEncoder:<init>()),
		DefaultSocks4CommandResponse:<init>(Socks4CommandStatus) to listOf(DefaultSocks4CommandResponse:<init>(Socks4CommandStatus-String-int)),
		DefaultSocks4CommandResponse:<init>(Socks4CommandStatus-String-int) to listOf(AbstractSocks4Message:<init>(), NetUtil:isValidIpV4Address(String)),
		DefaultSocks4CommandResponse:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks4CommandResponse:decoderResult(), DecoderResult:isSuccess(), DefaultSocks4CommandResponse:dstAddr(), DefaultSocks4CommandResponse:dstPort()),
		Socks4ClientDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object), Socks4ClientDecoder:setSingleDecode(boolean)),
		Socks4ClientDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks4ClientDecoder:state(), Socks4ClientDecoder$State:ordinal(), ByteBuf:readUnsignedByte(), DecoderException:<init>(String), ByteBuf:readByte(), Socks4CommandStatus:valueOf(byte), ByteBuf:readUnsignedShort(), ByteBuf:readInt(), NetUtil:intToIpAddress(int), DefaultSocks4CommandResponse:<init>(Socks4CommandStatus-String-int), Socks4ClientDecoder:checkpoint(Object), Socks4ClientDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks4ClientDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks4ClientDecoder:fail(List-Throwable)),
		Socks4ClientDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), DefaultSocks4CommandResponse:<init>(Socks4CommandStatus), DecoderResult:failure(Throwable), Socks4CommandResponse:setDecoderResult(DecoderResult), Socks4ClientDecoder:checkpoint(Object)),
		Socks4ClientDecoder$State:values() to listOf(Socks4ClientDecoder$State[]:clone()),
		Socks4ClientDecoder$State:<clinit>() to listOf(Socks4ClientDecoder$State:<init>(String-int), Socks4ClientDecoder$State:<init>(String-int), Socks4ClientDecoder$State:<init>(String-int)),
		Socks4CommandType:valueOf(byte) to listOf(Socks4CommandType:<init>(int)),
		Socks4CommandType:<init>(int) to listOf(Socks4CommandType:<init>(int-String)),
		Socks4CommandType:compareTo(Object) to listOf(Socks4CommandType:compareTo(Socks4CommandType)),
		Socks4CommandType:<clinit>() to listOf(Socks4CommandType:<init>(int-String), Socks4CommandType:<init>(int-String)),
		AbstractSocks4Message:<init>() to listOf(AbstractSocksMessage:<init>()),
		Socks4ServerDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object), Socks4ServerDecoder:setSingleDecode(boolean)),
		Socks4ServerDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks4ServerDecoder:state(), Socks4ServerDecoder$State:ordinal(), ByteBuf:readUnsignedByte(), SocksVersion:byteValue(), DecoderException:<init>(String), ByteBuf:readByte(), Socks4CommandType:valueOf(byte), ByteBuf:readUnsignedShort(), ByteBuf:readInt(), NetUtil:intToIpAddress(int), Socks4ServerDecoder:checkpoint(Object), Socks4ServerDecoder:readString(String-ByteBuf), Socks4ServerDecoder:checkpoint(Object), Socks4ServerDecoder:readString(String-ByteBuf), DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int-String), Socks4ServerDecoder:checkpoint(Object), Socks4ServerDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks4ServerDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks4ServerDecoder:fail(List-Throwable)),
		Socks4ServerDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int-String), DecoderResult:failure(Throwable), Socks4CommandRequest:setDecoderResult(DecoderResult), Socks4ServerDecoder:checkpoint(Object)),
		Socks4ServerDecoder:readString(String-ByteBuf) to listOf(ByteBuf:bytesBefore(int-byte), DecoderException:<init>(String), ByteBuf:readSlice(int), ByteBuf:toString(Charset), ByteBuf:skipBytes(int)),
		DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int) to listOf(DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int-String)),
		DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int-String) to listOf(AbstractSocks4Message:<init>()),
		DefaultSocks4CommandRequest:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks4CommandRequest:decoderResult(), DecoderResult:isSuccess(), DefaultSocks4CommandRequest:type(), DefaultSocks4CommandRequest:dstAddr(), DefaultSocks4CommandRequest:dstPort(), DefaultSocks4CommandRequest:userId()),
		Socks4CommandStatus:valueOf(byte) to listOf(Socks4CommandStatus:<init>(int)),
		Socks4CommandStatus:<init>(int) to listOf(Socks4CommandStatus:<init>(int-String)),
		Socks4CommandStatus:compareTo(Object) to listOf(Socks4CommandStatus:compareTo(Socks4CommandStatus)),
		Socks4CommandStatus:<clinit>() to listOf(Socks4CommandStatus:<init>(int-String), Socks4CommandStatus:<init>(int-String), Socks4CommandStatus:<init>(int-String), Socks4CommandStatus:<init>(int-String)),
		Socks4ServerDecoder$State:values() to listOf(Socks4ServerDecoder$State[]:clone()),
		Socks4ServerDecoder$State:<clinit>() to listOf(Socks4ServerDecoder$State:<init>(String-int), Socks4ServerDecoder$State:<init>(String-int), Socks4ServerDecoder$State:<init>(String-int), Socks4ServerDecoder$State:<init>(String-int), Socks4ServerDecoder$State:<init>(String-int)),
		DefaultSocks5InitialRequest:<init>(Socks5AuthMethod[]) to listOf(AbstractSocks5Message:<init>()),
		DefaultSocks5InitialRequest:<init>(Iterable) to listOf(AbstractSocks5Message:<init>()),
		DefaultSocks5InitialRequest:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks5InitialRequest:decoderResult(), DecoderResult:isSuccess(), DefaultSocks5InitialRequest:authMethods()),
		Socks5ClientEncoder:<init>() to listOf(Socks5ClientEncoder:<init>(Socks5AddressEncoder)),
		Socks5ClientEncoder:<init>(Socks5AddressEncoder) to listOf(MessageToByteEncoder:<init>()),
		Socks5ClientEncoder:encode(ChannelHandlerContext-Socks5Message-ByteBuf) to listOf(Socks5ClientEncoder:encodeAuthMethodRequest(Socks5InitialRequest-ByteBuf), Socks5ClientEncoder:encodePasswordAuthRequest(Socks5PasswordAuthRequest-ByteBuf), Socks5ClientEncoder:encodeCommandRequest(Socks5CommandRequest-ByteBuf), StringUtil:simpleClassName(Object), EncoderException:<init>(String)),
		Socks5ClientEncoder:encodeAuthMethodRequest(Socks5InitialRequest-ByteBuf) to listOf(Socks5InitialRequest:version(), SocksVersion:byteValue(), ByteBuf:writeByte(int), Socks5InitialRequest:authMethods(), ByteBuf:writeByte(int), Socks5AuthMethod:byteValue(), ByteBuf:writeByte(int), Socks5AuthMethod:byteValue(), ByteBuf:writeByte(int)),
		Socks5ClientEncoder:encodePasswordAuthRequest(Socks5PasswordAuthRequest-ByteBuf) to listOf(ByteBuf:writeByte(int), Socks5PasswordAuthRequest:username(), ByteBuf:writeByte(int), ByteBufUtil:writeAscii(ByteBuf-CharSequence), Socks5PasswordAuthRequest:password(), ByteBuf:writeByte(int), ByteBufUtil:writeAscii(ByteBuf-CharSequence)),
		Socks5ClientEncoder:encodeCommandRequest(Socks5CommandRequest-ByteBuf) to listOf(Socks5CommandRequest:version(), SocksVersion:byteValue(), ByteBuf:writeByte(int), Socks5CommandRequest:type(), Socks5CommandType:byteValue(), ByteBuf:writeByte(int), ByteBuf:writeByte(int), Socks5CommandRequest:dstAddrType(), Socks5AddressType:byteValue(), ByteBuf:writeByte(int), Socks5CommandRequest:dstAddr(), Socks5AddressEncoder:encodeAddress(Socks5AddressType-String-ByteBuf), Socks5CommandRequest:dstPort(), ByteBuf:writeShort(int)),
		Socks5ClientEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(Socks5ClientEncoder:encode(ChannelHandlerContext-Socks5Message-ByteBuf)),
		Socks5ClientEncoder:<clinit>() to listOf(Socks5ClientEncoder:<init>()),
		Socks5CommandRequestDecoder:<init>() to listOf(Socks5CommandRequestDecoder:<init>(Socks5AddressDecoder)),
		Socks5CommandRequestDecoder:<init>(Socks5AddressDecoder) to listOf(ReplayingDecoder:<init>(Object)),
		Socks5CommandRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks5CommandRequestDecoder:state(), Socks5CommandRequestDecoder$State:ordinal(), ByteBuf:readByte(), SocksVersion:byteValue(), SocksVersion:byteValue(), DecoderException:<init>(String), ByteBuf:readByte(), Socks5CommandType:valueOf(byte), ByteBuf:skipBytes(int), ByteBuf:readByte(), Socks5AddressType:valueOf(byte), Socks5AddressDecoder:decodeAddress(Socks5AddressType-ByteBuf), ByteBuf:readUnsignedShort(), DefaultSocks5CommandRequest:<init>(Socks5CommandType-Socks5AddressType-String-int), Socks5CommandRequestDecoder:checkpoint(Object), Socks5CommandRequestDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks5CommandRequestDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks5CommandRequestDecoder:fail(List-Throwable)),
		Socks5CommandRequestDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), Socks5CommandRequestDecoder:checkpoint(Object), DefaultSocks5CommandRequest:<init>(Socks5CommandType-Socks5AddressType-String-int), DecoderResult:failure(Throwable), Socks5Message:setDecoderResult(DecoderResult)),
		DefaultSocks5CommandResponse:<init>(Socks5CommandStatus-Socks5AddressType) to listOf(DefaultSocks5CommandResponse:<init>(Socks5CommandStatus-Socks5AddressType-String-int)),
		DefaultSocks5CommandResponse:<init>(Socks5CommandStatus-Socks5AddressType-String-int) to listOf(AbstractSocks5Message:<init>(), NetUtil:isValidIpV4Address(String), NetUtil:isValidIpV6Address(String)),
		DefaultSocks5CommandResponse:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks5CommandResponse:decoderResult(), DecoderResult:isSuccess(), DefaultSocks5CommandResponse:status(), DefaultSocks5CommandResponse:bndAddrType(), DefaultSocks5CommandResponse:bndAddr(), DefaultSocks5CommandResponse:bndPort()),
		Socks5InitialRequestDecoder$1:<clinit>() to listOf(Socks5InitialRequestDecoder$State:values(), Socks5InitialRequestDecoder$State:ordinal(), Socks5InitialRequestDecoder$State:ordinal(), Socks5InitialRequestDecoder$State:ordinal()),
		Socks5InitialRequestDecoder$State:values() to listOf(Socks5InitialRequestDecoder$State[]:clone()),
		Socks5InitialRequestDecoder$State:<clinit>() to listOf(Socks5InitialRequestDecoder$State:<init>(String-int), Socks5InitialRequestDecoder$State:<init>(String-int), Socks5InitialRequestDecoder$State:<init>(String-int)),
		DefaultSocks5PasswordAuthResponse:<init>(Socks5PasswordAuthStatus) to listOf(AbstractSocks5Message:<init>()),
		DefaultSocks5PasswordAuthResponse:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks5PasswordAuthResponse:decoderResult(), DecoderResult:isSuccess(), DefaultSocks5PasswordAuthResponse:status()),
		DefaultSocks5CommandRequest:<init>(Socks5CommandType-Socks5AddressType-String-int) to listOf(AbstractSocks5Message:<init>(), NetUtil:isValidIpV4Address(String), NetUtil:isValidIpV6Address(String)),
		DefaultSocks5CommandRequest:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks5CommandRequest:decoderResult(), DecoderResult:isSuccess(), DefaultSocks5CommandRequest:type(), DefaultSocks5CommandRequest:dstAddrType(), DefaultSocks5CommandRequest:dstAddr(), DefaultSocks5CommandRequest:dstPort()),
		Socks5InitialResponseDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		Socks5InitialResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks5InitialResponseDecoder:state(), Socks5InitialResponseDecoder$State:ordinal(), ByteBuf:readByte(), SocksVersion:byteValue(), SocksVersion:byteValue(), DecoderException:<init>(String), ByteBuf:readByte(), Socks5AuthMethod:valueOf(byte), DefaultSocks5InitialResponse:<init>(Socks5AuthMethod), Socks5InitialResponseDecoder:checkpoint(Object), Socks5InitialResponseDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks5InitialResponseDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks5InitialResponseDecoder:fail(List-Throwable)),
		Socks5InitialResponseDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), Socks5InitialResponseDecoder:checkpoint(Object), DefaultSocks5InitialResponse:<init>(Socks5AuthMethod), DecoderResult:failure(Throwable), Socks5Message:setDecoderResult(DecoderResult)),
		Socks5CommandStatus:valueOf(byte) to listOf(Socks5CommandStatus:<init>(int)),
		Socks5CommandStatus:<init>(int) to listOf(Socks5CommandStatus:<init>(int-String)),
		Socks5CommandStatus:compareTo(Object) to listOf(Socks5CommandStatus:compareTo(Socks5CommandStatus)),
		Socks5CommandStatus:<clinit>() to listOf(Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String), Socks5CommandStatus:<init>(int-String)),
		Socks5PasswordAuthRequestDecoder$State:values() to listOf(Socks5PasswordAuthRequestDecoder$State[]:clone()),
		Socks5PasswordAuthRequestDecoder$State:<clinit>() to listOf(Socks5PasswordAuthRequestDecoder$State:<init>(String-int), Socks5PasswordAuthRequestDecoder$State:<init>(String-int), Socks5PasswordAuthRequestDecoder$State:<init>(String-int)),
		Socks5PasswordAuthResponseDecoder$State:values() to listOf(Socks5PasswordAuthResponseDecoder$State[]:clone()),
		Socks5PasswordAuthResponseDecoder$State:<clinit>() to listOf(Socks5PasswordAuthResponseDecoder$State:<init>(String-int), Socks5PasswordAuthResponseDecoder$State:<init>(String-int), Socks5PasswordAuthResponseDecoder$State:<init>(String-int)),
		DefaultSocks5InitialResponse:<init>(Socks5AuthMethod) to listOf(AbstractSocks5Message:<init>()),
		DefaultSocks5InitialResponse:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks5InitialResponse:decoderResult(), DecoderResult:isSuccess(), DefaultSocks5InitialResponse:authMethod()),
		Socks5CommandRequestDecoder$State:values() to listOf(Socks5CommandRequestDecoder$State[]:clone()),
		Socks5CommandRequestDecoder$State:<clinit>() to listOf(Socks5CommandRequestDecoder$State:<init>(String-int), Socks5CommandRequestDecoder$State:<init>(String-int), Socks5CommandRequestDecoder$State:<init>(String-int)),
		Socks5InitialResponseDecoder$State:values() to listOf(Socks5InitialResponseDecoder$State[]:clone()),
		Socks5InitialResponseDecoder$State:<clinit>() to listOf(Socks5InitialResponseDecoder$State:<init>(String-int), Socks5InitialResponseDecoder$State:<init>(String-int), Socks5InitialResponseDecoder$State:<init>(String-int)),
		Socks5AuthMethod:valueOf(byte) to listOf(Socks5AuthMethod:<init>(int)),
		Socks5AuthMethod:<init>(int) to listOf(Socks5AuthMethod:<init>(int-String)),
		Socks5AuthMethod:compareTo(Object) to listOf(Socks5AuthMethod:compareTo(Socks5AuthMethod)),
		Socks5AuthMethod:<clinit>() to listOf(Socks5AuthMethod:<init>(int-String), Socks5AuthMethod:<init>(int-String), Socks5AuthMethod:<init>(int-String), Socks5AuthMethod:<init>(int-String)),
		Socks5PasswordAuthResponseDecoder$1:<clinit>() to listOf(Socks5PasswordAuthResponseDecoder$State:values(), Socks5PasswordAuthResponseDecoder$State:ordinal(), Socks5PasswordAuthResponseDecoder$State:ordinal(), Socks5PasswordAuthResponseDecoder$State:ordinal()),
		Socks5InitialRequestDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		Socks5InitialRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks5InitialRequestDecoder:state(), Socks5InitialRequestDecoder$State:ordinal(), ByteBuf:readByte(), SocksVersion:byteValue(), SocksVersion:byteValue(), DecoderException:<init>(String), ByteBuf:readUnsignedByte(), Socks5InitialRequestDecoder:actualReadableBytes(), ByteBuf:readByte(), Socks5AuthMethod:valueOf(byte), DefaultSocks5InitialRequest:<init>(Socks5AuthMethod[]), Socks5InitialRequestDecoder:checkpoint(Object), Socks5InitialRequestDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks5InitialRequestDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks5InitialRequestDecoder:fail(List-Throwable)),
		Socks5InitialRequestDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), Socks5InitialRequestDecoder:checkpoint(Object), DefaultSocks5InitialRequest:<init>(Socks5AuthMethod[]), DecoderResult:failure(Throwable), Socks5Message:setDecoderResult(DecoderResult)),
		Socks5PasswordAuthResponseDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		Socks5PasswordAuthResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks5PasswordAuthResponseDecoder:state(), Socks5PasswordAuthResponseDecoder$State:ordinal(), ByteBuf:readByte(), DecoderException:<init>(String), ByteBuf:readByte(), Socks5PasswordAuthStatus:valueOf(byte), DefaultSocks5PasswordAuthResponse:<init>(Socks5PasswordAuthStatus), Socks5PasswordAuthResponseDecoder:checkpoint(Object), Socks5PasswordAuthResponseDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks5PasswordAuthResponseDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks5PasswordAuthResponseDecoder:fail(List-Throwable)),
		Socks5PasswordAuthResponseDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), Socks5PasswordAuthResponseDecoder:checkpoint(Object), DefaultSocks5PasswordAuthResponse:<init>(Socks5PasswordAuthStatus), DecoderResult:failure(Throwable), Socks5Message:setDecoderResult(DecoderResult)),
		Socks5PasswordAuthStatus:valueOf(byte) to listOf(Socks5PasswordAuthStatus:<init>(int)),
		Socks5PasswordAuthStatus:<init>(int) to listOf(Socks5PasswordAuthStatus:<init>(int-String)),
		Socks5PasswordAuthStatus:compareTo(Object) to listOf(Socks5PasswordAuthStatus:compareTo(Socks5PasswordAuthStatus)),
		Socks5PasswordAuthStatus:<clinit>() to listOf(Socks5PasswordAuthStatus:<init>(int-String), Socks5PasswordAuthStatus:<init>(int-String)),
		Socks5CommandType:valueOf(byte) to listOf(Socks5CommandType:<init>(int)),
		Socks5CommandType:<init>(int) to listOf(Socks5CommandType:<init>(int-String)),
		Socks5CommandType:compareTo(Object) to listOf(Socks5CommandType:compareTo(Socks5CommandType)),
		Socks5CommandType:<clinit>() to listOf(Socks5CommandType:<init>(int-String), Socks5CommandType:<init>(int-String), Socks5CommandType:<init>(int-String)),
		Socks5AddressDecoder$1:decodeAddress(Socks5AddressType-ByteBuf) to listOf(ByteBuf:readInt(), NetUtil:intToIpAddress(int), ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(), ByteBuf:toString(int-int-Charset), ByteBuf:skipBytes(int), ByteBuf:hasArray(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:array(), ByteBuf:arrayOffset(), NetUtil:bytesToIpAddress(byte[]-int-int), ByteBuf:readBytes(byte[]), NetUtil:bytesToIpAddress(byte[]-int-int), Socks5AddressType:byteValue(), DecoderException:<init>(String)),
		Socks5CommandResponseDecoder$1:<clinit>() to listOf(Socks5CommandResponseDecoder$State:values(), Socks5CommandResponseDecoder$State:ordinal(), Socks5CommandResponseDecoder$State:ordinal(), Socks5CommandResponseDecoder$State:ordinal()),
		Socks5CommandResponseDecoder:<init>() to listOf(Socks5CommandResponseDecoder:<init>(Socks5AddressDecoder)),
		Socks5CommandResponseDecoder:<init>(Socks5AddressDecoder) to listOf(ReplayingDecoder:<init>(Object)),
		Socks5CommandResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks5CommandResponseDecoder:state(), Socks5CommandResponseDecoder$State:ordinal(), ByteBuf:readByte(), SocksVersion:byteValue(), SocksVersion:byteValue(), DecoderException:<init>(String), ByteBuf:readByte(), Socks5CommandStatus:valueOf(byte), ByteBuf:skipBytes(int), ByteBuf:readByte(), Socks5AddressType:valueOf(byte), Socks5AddressDecoder:decodeAddress(Socks5AddressType-ByteBuf), ByteBuf:readUnsignedShort(), DefaultSocks5CommandResponse:<init>(Socks5CommandStatus-Socks5AddressType-String-int), Socks5CommandResponseDecoder:checkpoint(Object), Socks5CommandResponseDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks5CommandResponseDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks5CommandResponseDecoder:fail(List-Throwable)),
		Socks5CommandResponseDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), Socks5CommandResponseDecoder:checkpoint(Object), DefaultSocks5CommandResponse:<init>(Socks5CommandStatus-Socks5AddressType-String-int), DecoderResult:failure(Throwable), Socks5Message:setDecoderResult(DecoderResult)),
		DefaultSocks5PasswordAuthRequest:<init>(String-String) to listOf(AbstractSocks5Message:<init>()),
		DefaultSocks5PasswordAuthRequest:toString() to listOf(StringUtil:simpleClassName(Object), DefaultSocks5PasswordAuthRequest:decoderResult(), DecoderResult:isSuccess(), DefaultSocks5PasswordAuthRequest:username()),
		Socks5ServerEncoder:<init>() to listOf(Socks5ServerEncoder:<init>(Socks5AddressEncoder)),
		Socks5ServerEncoder:<init>(Socks5AddressEncoder) to listOf(MessageToByteEncoder:<init>()),
		Socks5ServerEncoder:encode(ChannelHandlerContext-Socks5Message-ByteBuf) to listOf(Socks5ServerEncoder:encodeAuthMethodResponse(Socks5InitialResponse-ByteBuf), Socks5ServerEncoder:encodePasswordAuthResponse(Socks5PasswordAuthResponse-ByteBuf), Socks5ServerEncoder:encodeCommandResponse(Socks5CommandResponse-ByteBuf), StringUtil:simpleClassName(Object), EncoderException:<init>(String)),
		Socks5ServerEncoder:encodeAuthMethodResponse(Socks5InitialResponse-ByteBuf) to listOf(Socks5InitialResponse:version(), SocksVersion:byteValue(), ByteBuf:writeByte(int), Socks5InitialResponse:authMethod(), Socks5AuthMethod:byteValue(), ByteBuf:writeByte(int)),
		Socks5ServerEncoder:encodePasswordAuthResponse(Socks5PasswordAuthResponse-ByteBuf) to listOf(ByteBuf:writeByte(int), Socks5PasswordAuthResponse:status(), Socks5PasswordAuthStatus:byteValue(), ByteBuf:writeByte(int)),
		Socks5ServerEncoder:encodeCommandResponse(Socks5CommandResponse-ByteBuf) to listOf(Socks5CommandResponse:version(), SocksVersion:byteValue(), ByteBuf:writeByte(int), Socks5CommandResponse:status(), Socks5CommandStatus:byteValue(), ByteBuf:writeByte(int), ByteBuf:writeByte(int), Socks5CommandResponse:bndAddrType(), Socks5AddressType:byteValue(), ByteBuf:writeByte(int), Socks5CommandResponse:bndAddr(), Socks5AddressEncoder:encodeAddress(Socks5AddressType-String-ByteBuf), Socks5CommandResponse:bndPort(), ByteBuf:writeShort(int)),
		Socks5ServerEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(Socks5ServerEncoder:encode(ChannelHandlerContext-Socks5Message-ByteBuf)),
		Socks5ServerEncoder:<clinit>() to listOf(Socks5ServerEncoder:<init>(Socks5AddressEncoder)),
		Socks5CommandResponseDecoder$State:values() to listOf(Socks5CommandResponseDecoder$State[]:clone()),
		Socks5CommandResponseDecoder$State:<clinit>() to listOf(Socks5CommandResponseDecoder$State:<init>(String-int), Socks5CommandResponseDecoder$State:<init>(String-int), Socks5CommandResponseDecoder$State:<init>(String-int)),
		Socks5PasswordAuthRequestDecoder$1:<clinit>() to listOf(Socks5PasswordAuthRequestDecoder$State:values(), Socks5PasswordAuthRequestDecoder$State:ordinal(), Socks5PasswordAuthRequestDecoder$State:ordinal(), Socks5PasswordAuthRequestDecoder$State:ordinal()),
		Socks5CommandRequestDecoder$1:<clinit>() to listOf(Socks5CommandRequestDecoder$State:values(), Socks5CommandRequestDecoder$State:ordinal(), Socks5CommandRequestDecoder$State:ordinal(), Socks5CommandRequestDecoder$State:ordinal()),
		AbstractSocks5Message:<init>() to listOf(AbstractSocksMessage:<init>()),
		Socks5PasswordAuthRequestDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		Socks5PasswordAuthRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(Socks5PasswordAuthRequestDecoder:state(), Socks5PasswordAuthRequestDecoder$State:ordinal(), ByteBuf:readerIndex(), ByteBuf:getByte(int), DecoderException:<init>(String), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), ByteBuf:skipBytes(int), ByteBuf:toString(int-int-Charset), ByteBuf:toString(int-int-Charset), DefaultSocks5PasswordAuthRequest:<init>(String-String), Socks5PasswordAuthRequestDecoder:checkpoint(Object), Socks5PasswordAuthRequestDecoder:actualReadableBytes(), ByteBuf:readSlice(int), ByteBuf:retain(), Socks5PasswordAuthRequestDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), Socks5PasswordAuthRequestDecoder:fail(List-Throwable)),
		Socks5PasswordAuthRequestDecoder:fail(List-Throwable) to listOf(DecoderException:<init>(Throwable), Socks5PasswordAuthRequestDecoder:checkpoint(Object), DefaultSocks5PasswordAuthRequest:<init>(String-String), DecoderResult:failure(Throwable), Socks5Message:setDecoderResult(DecoderResult)),
		Socks5AddressEncoder$1:encodeAddress(Socks5AddressType-String-ByteBuf) to listOf(Socks5AddressType:byteValue(), Socks5AddressType:byteValue(), NetUtil:createByteArrayFromIpAddressString(String), ByteBuf:writeBytes(byte[]), ByteBuf:writeInt(int), Socks5AddressType:byteValue(), ByteBuf:writeByte(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), ByteBuf:writeByte(int), Socks5AddressType:byteValue(), NetUtil:createByteArrayFromIpAddressString(String), ByteBuf:writeBytes(byte[]), ByteBuf:writeLong(long), ByteBuf:writeLong(long), Socks5AddressType:byteValue(), EncoderException:<init>(String)),
		Socks5AddressType:valueOf(byte) to listOf(Socks5AddressType:<init>(int)),
		Socks5AddressType:<init>(int) to listOf(Socks5AddressType:<init>(int-String)),
		Socks5AddressType:compareTo(Object) to listOf(Socks5AddressType:compareTo(Socks5AddressType)),
		Socks5AddressType:<clinit>() to listOf(Socks5AddressType:<init>(int-String), Socks5AddressType:<init>(int-String), Socks5AddressType:<init>(int-String)),
		Socks5InitialResponseDecoder$1:<clinit>() to listOf(Socks5InitialResponseDecoder$State:values(), Socks5InitialResponseDecoder$State:ordinal(), Socks5InitialResponseDecoder$State:ordinal(), Socks5InitialResponseDecoder$State:ordinal()),
		Socks5AddressDecoder:<clinit>() to listOf(Socks5AddressDecoder$1:<init>()),
		Socks5AddressEncoder:<clinit>() to listOf(Socks5AddressEncoder$1:<init>()),
		SocksPortUnificationServerHandler$1:<clinit>() to listOf(SocksVersion:values(), SocksVersion:ordinal(), SocksVersion:ordinal()),
		SocksVersion:values() to listOf(SocksVersion[]:clone()),
		SocksVersion:valueOf(byte) to listOf(SocksVersion:byteValue(), SocksVersion:byteValue()),
		SocksVersion:<clinit>() to listOf(SocksVersion:<init>(String-int-byte), SocksVersion:<init>(String-int-byte), SocksVersion:<init>(String-int-byte)),
		MessageToMessageCodec$1:<init>(MessageToMessageCodec) to listOf(MessageToMessageEncoder:<init>()),
		MessageToMessageCodec$1:acceptOutboundMessage(Object) to listOf(MessageToMessageCodec:acceptOutboundMessage(Object)),
		MessageToMessageCodec$1:encode(ChannelHandlerContext-Object-List) to listOf(MessageToMessageCodec:encode(ChannelHandlerContext-Object-List)),
		HttpProxyHandler:<init>(SocketAddress) to listOf(ProxyHandler:<init>(SocketAddress), HttpClientCodec:<init>()),
		HttpProxyHandler:<init>(SocketAddress-String-String) to listOf(ProxyHandler:<init>(SocketAddress), HttpClientCodec:<init>(), Unpooled:copiedBuffer(CharSequence-Charset), Base64:encode(ByteBuf-boolean), ByteBuf:toString(Charset), AsciiString:<init>(CharSequence), ByteBuf:release(), ByteBuf:release()),
		HttpProxyHandler:addCodec(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), ChannelPipeline:addBefore(String-String-ChannelHandler)),
		HttpProxyHandler:removeEncoder(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), HttpClientCodec:encoder(), ChannelPipeline:remove(ChannelHandler)),
		HttpProxyHandler:removeDecoder(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), HttpClientCodec:decoder(), ChannelPipeline:remove(ChannelHandler)),
		HttpProxyHandler:newInitialMessage(ChannelHandlerContext) to listOf(HttpProxyHandler:destinationAddress(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf-boolean), HttpProxyHandler:proxyAddress(), FullHttpRequest:headers(), HttpHeaders:set(CharSequence-CharSequence), FullHttpRequest:headers(), HttpHeaders:set(CharSequence-CharSequence)),
		HttpProxyHandler:handleResponse(ChannelHandlerContext-Object) to listOf(HttpProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String), HttpResponse:status(), HttpProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String), HttpResponseStatus:code(), HttpProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String)),
		Socks4ProxyHandler:<init>(SocketAddress) to listOf(Socks4ProxyHandler:<init>(SocketAddress-String)),
		Socks4ProxyHandler:<init>(SocketAddress-String) to listOf(ProxyHandler:<init>(SocketAddress)),
		Socks4ProxyHandler:addCodec(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), Socks4ClientDecoder:<init>(), ChannelPipeline:addBefore(String-String-ChannelHandler), ChannelPipeline:context(ChannelHandler), ChannelHandlerContext:name(), ChannelPipeline:addBefore(String-String-ChannelHandler)),
		Socks4ProxyHandler:removeEncoder(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(String)),
		Socks4ProxyHandler:removeDecoder(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(String)),
		Socks4ProxyHandler:newInitialMessage(ChannelHandlerContext) to listOf(Socks4ProxyHandler:destinationAddress(), DefaultSocks4CommandRequest:<init>(Socks4CommandType-String-int-String)),
		Socks4ProxyHandler:handleResponse(ChannelHandlerContext-Object) to listOf(Socks4CommandResponse:status(), Socks4ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String)),
		ProxyHandler:<init>(SocketAddress) to listOf(ChannelHandlerAdapter:<init>(), ProxyHandler$LazyChannelPromise:<init>(ProxyHandler-ProxyHandler$1), ProxyHandler$1:<init>(ProxyHandler)),
		ProxyHandler:isConnected() to listOf(ProxyHandler$LazyChannelPromise:isSuccess()),
		ProxyHandler:handlerAdded(ChannelHandlerContext) to listOf(ProxyHandler:addCodec(ChannelHandlerContext), ChannelHandlerContext:channel(), Channel:isActive(), ProxyHandler:sendInitialMessage(ChannelHandlerContext)),
		ProxyHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable), ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		ProxyHandler:channelActive(ChannelHandlerContext) to listOf(ProxyHandler:sendInitialMessage(ChannelHandlerContext), ChannelHandlerContext:fireChannelActive()),
		ProxyHandler:sendInitialMessage(ChannelHandlerContext) to listOf(ChannelHandlerContext:executor(), ProxyHandler$2:<init>(ProxyHandler), EventExecutor:schedule(Runnable-long-TimeUnit), ProxyHandler:newInitialMessage(ChannelHandlerContext), ProxyHandler:sendToProxyServer(Object)),
		ProxyHandler:sendToProxyServer(Object) to listOf(ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener)),
		ProxyHandler:channelInactive(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelInactive(), ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String), ProxyHandler:setConnectFailure(Throwable)),
		ProxyHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable), ProxyHandler:setConnectFailure(Throwable)),
		ProxyHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object), ProxyHandler:handleResponse(ChannelHandlerContext-Object), ProxyHandler:setConnectSuccess(), ReferenceCountUtil:release(Object), ProxyHandler:setConnectFailure(Throwable), ReferenceCountUtil:release(Object), ProxyHandler:setConnectFailure(Throwable), ReferenceCountUtil:release(Object), ProxyHandler:setConnectFailure(Throwable)),
		ProxyHandler:setConnectSuccess() to listOf(ScheduledFuture:cancel(boolean), ChannelHandlerContext:channel(), ProxyHandler$LazyChannelPromise:trySuccess(Object), ProxyHandler:safeRemoveEncoder(), ProxyHandler:protocol(), ProxyHandler:authScheme(), ProxyConnectionEvent:<init>(String-String-SocketAddress-SocketAddress), ChannelHandlerContext:fireUserEventTriggered(Object), ProxyHandler:safeRemoveDecoder(), ProxyHandler:writePendingWrites(), ChannelHandlerContext:flush(), ProxyConnectException:<init>(String), ProxyHandler:failPendingWrites(Throwable), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:close()),
		ProxyHandler:safeRemoveDecoder() to listOf(ProxyHandler:removeDecoder(ChannelHandlerContext), InternalLogger:warn(String-Throwable)),
		ProxyHandler:safeRemoveEncoder() to listOf(ProxyHandler:removeEncoder(ChannelHandlerContext), InternalLogger:warn(String-Throwable)),
		ProxyHandler:setConnectFailure(Throwable) to listOf(ScheduledFuture:cancel(boolean), ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String-Throwable), ProxyHandler$LazyChannelPromise:tryFailure(Throwable), ProxyHandler:safeRemoveDecoder(), ProxyHandler:safeRemoveEncoder(), ProxyHandler:failPendingWrites(Throwable), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:close()),
		ProxyHandler:exceptionMessage(String) to listOf(ProxyHandler:protocol(), ProxyHandler:authScheme()),
		ProxyHandler:channelReadComplete(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), ChannelHandlerContext:read(), ChannelHandlerContext:fireChannelReadComplete()),
		ProxyHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ProxyHandler:writePendingWrites(), ChannelHandlerContext:write(Object-ChannelPromise), ProxyHandler:addPendingWrite(ChannelHandlerContext-Object-ChannelPromise)),
		ProxyHandler:flush(ChannelHandlerContext) to listOf(ProxyHandler:writePendingWrites(), ChannelHandlerContext:flush()),
		ProxyHandler:writePendingWrites() to listOf(PendingWriteQueue:removeAndWriteAll()),
		ProxyHandler:failPendingWrites(Throwable) to listOf(PendingWriteQueue:removeAndFailAll(Throwable)),
		ProxyHandler:addPendingWrite(ChannelHandlerContext-Object-ChannelPromise) to listOf(PendingWriteQueue:<init>(ChannelHandlerContext), PendingWriteQueue:add(Object-ChannelPromise)),
		ProxyHandler:access$100(ProxyHandler-Throwable) to listOf(ProxyHandler:setConnectFailure(Throwable)),
		ProxyHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ProxyHandler$2:<init>(ProxyHandler) to listOf(OneTimeTask:<init>()),
		ProxyHandler$2:run() to listOf(ProxyHandler:access$200(ProxyHandler), ProxyHandler$LazyChannelPromise:isDone(), ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String), ProxyHandler:access$100(ProxyHandler-Throwable)),
		ProxyConnectionEvent:toString() to listOf(StringUtil:simpleClassName(Object)),
		ProxyHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), ProxyHandler:access$100(ProxyHandler-Throwable)),
		ProxyHandler$1:operationComplete(Future) to listOf(ProxyHandler$1:operationComplete(ChannelFuture)),
		ProxyConnectException:<init>(Throwable) to listOf(ProxyConnectException:initCause(Throwable)),
		ProxyConnectException:<init>(String-Throwable) to listOf(ProxyConnectException:initCause(Throwable)),
		Socks5ProxyHandler:<init>(SocketAddress) to listOf(Socks5ProxyHandler:<init>(SocketAddress-String-String)),
		Socks5ProxyHandler:<init>(SocketAddress-String-String) to listOf(ProxyHandler:<init>(SocketAddress)),
		Socks5ProxyHandler:authScheme() to listOf(Socks5ProxyHandler:socksAuthMethod()),
		Socks5ProxyHandler:addCodec(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), Socks5InitialResponseDecoder:<init>(), ChannelPipeline:addBefore(String-String-ChannelHandler), ChannelPipeline:context(ChannelHandler), ChannelHandlerContext:name(), ChannelPipeline:addBefore(String-String-ChannelHandler)),
		Socks5ProxyHandler:removeEncoder(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:remove(String)),
		Socks5ProxyHandler:removeDecoder(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:context(String), ChannelPipeline:remove(String)),
		Socks5ProxyHandler:newInitialMessage(ChannelHandlerContext) to listOf(Socks5ProxyHandler:socksAuthMethod()),
		Socks5ProxyHandler:handleResponse(ChannelHandlerContext-Object) to listOf(Socks5ProxyHandler:socksAuthMethod(), Socks5InitialResponse:authMethod(), Socks5InitialResponse:authMethod(), Socks5InitialResponse:authMethod(), Socks5ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String), Socks5ProxyHandler:sendConnectCommand(ChannelHandlerContext), ChannelHandlerContext:pipeline(), Socks5PasswordAuthResponseDecoder:<init>(), ChannelPipeline:replace(String-String-ChannelHandler), DefaultSocks5PasswordAuthRequest:<init>(String-String), Socks5ProxyHandler:sendToProxyServer(Object), Socks5PasswordAuthResponse:status(), Socks5PasswordAuthResponse:status(), Socks5ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String), Socks5ProxyHandler:sendConnectCommand(ChannelHandlerContext), Socks5CommandResponse:status(), Socks5CommandResponse:status(), Socks5ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String)),
		Socks5ProxyHandler:sendConnectCommand(ChannelHandlerContext) to listOf(Socks5ProxyHandler:destinationAddress(), NetUtil:isValidIpV4Address(String), NetUtil:isValidIpV6Address(String), StringUtil:simpleClassName(Object), Socks5ProxyHandler:exceptionMessage(String), ProxyConnectException:<init>(String), ChannelHandlerContext:pipeline(), Socks5CommandResponseDecoder:<init>(), ChannelPipeline:replace(String-String-ChannelHandler), DefaultSocks5CommandRequest:<init>(Socks5CommandType-Socks5AddressType-String-int), Socks5ProxyHandler:sendToProxyServer(Object)),
		Socks5ProxyHandler:<clinit>() to listOf(DefaultSocks5InitialRequest:<init>(Iterable), DefaultSocks5InitialRequest:<init>(Iterable)),
		ProxyHandler$LazyChannelPromise:<init>(ProxyHandler) to listOf(DefaultPromise:<init>()),
		ProxyHandler$LazyChannelPromise:executor() to listOf(ProxyHandler:access$300(ProxyHandler), ProxyHandler:access$300(ProxyHandler), ChannelHandlerContext:executor()),
		ProxyHandler$LazyChannelPromise:<init>(ProxyHandler-ProxyHandler$1) to listOf(ProxyHandler$LazyChannelPromise:<init>(ProxyHandler)),
		ChunkedFile:<init>(File) to listOf(ChunkedFile:<init>(File-int)),
		ChunkedFile:<init>(File-int) to listOf(ChunkedFile:<init>(RandomAccessFile-int)),
		ChunkedFile:<init>(RandomAccessFile) to listOf(ChunkedFile:<init>(RandomAccessFile-int)),
		ChunkedFile:<init>(RandomAccessFile-int) to listOf(ChunkedFile:<init>(RandomAccessFile-long-long-int)),
		ChunkedFile:readChunk(ChannelHandlerContext) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(int), ByteBuf:release(), ByteBuf:release(), ChunkedFile:readChunk(ChannelHandlerContext)),
		ChunkedWriteHandler:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		ChunkedWriteHandler:<init>(int) to listOf(ChannelHandlerAdapter:<init>()),
		ChunkedWriteHandler:resumeTransfer() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), ChunkedWriteHandler:doFlush(ChannelHandlerContext), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelHandlerContext:executor(), ChunkedWriteHandler$1:<init>(ChunkedWriteHandler-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		ChunkedWriteHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChunkedWriteHandler$PendingWrite:<init>(Object-ChannelPromise)),
		ChunkedWriteHandler:flush(ChannelHandlerContext) to listOf(ChunkedWriteHandler:doFlush(ChannelHandlerContext), ChannelHandlerContext:flush()),
		ChunkedWriteHandler:channelInactive(ChannelHandlerContext) to listOf(ChunkedWriteHandler:doFlush(ChannelHandlerContext), ChannelHandlerContext:fireChannelInactive()),
		ChunkedWriteHandler:channelWritabilityChanged(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isWritable(), ChunkedWriteHandler:doFlush(ChannelHandlerContext), ChannelHandlerContext:fireChannelWritabilityChanged()),
		ChunkedWriteHandler:discard(Throwable) to listOf(ChunkedInput:isEndOfInput(), ChunkedWriteHandler$PendingWrite:fail(Throwable), ChunkedInput:length(), ChunkedWriteHandler$PendingWrite:success(long), ChunkedWriteHandler:closeInput(ChunkedInput), ChunkedWriteHandler$PendingWrite:fail(Throwable), InternalLogger:warn(String-Throwable), ChunkedWriteHandler:closeInput(ChunkedInput), ChunkedWriteHandler$PendingWrite:fail(Throwable)),
		ChunkedWriteHandler:doFlush(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChunkedWriteHandler:discard(Throwable), Channel:isWritable(), ChunkedInput:readChunk(ChannelHandlerContext), ChunkedInput:isEndOfInput(), ReferenceCountUtil:release(Object), ChunkedWriteHandler$PendingWrite:fail(Throwable), ChunkedWriteHandler:closeInput(ChunkedInput), ChannelHandlerContext:write(Object), ChunkedWriteHandler$2:<init>(ChunkedWriteHandler-ChunkedWriteHandler$PendingWrite-ChunkedInput), ChannelFuture:addListener(GenericFutureListener), Channel:isWritable(), ChunkedWriteHandler$3:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite-ChunkedInput), ChannelFuture:addListener(GenericFutureListener), ChunkedWriteHandler$4:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite-ChunkedInput-Channel), ChannelFuture:addListener(GenericFutureListener), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:flush(), Channel:isActive(), ChunkedWriteHandler:discard(Throwable)),
		ChunkedWriteHandler:closeInput(ChunkedInput) to listOf(ChunkedInput:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		ChunkedWriteHandler:access$000(ChunkedWriteHandler-ChannelHandlerContext) to listOf(ChunkedWriteHandler:doFlush(ChannelHandlerContext)),
		ChunkedWriteHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ChunkedWriteHandler$3:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChunkedWriteHandler:closeInput(ChunkedInput), ChannelFuture:cause(), ChunkedWriteHandler$PendingWrite:fail(Throwable), ChunkedInput:progress(), ChunkedInput:length(), ChunkedWriteHandler$PendingWrite:progress(long-long)),
		ChunkedWriteHandler$3:operationComplete(Future) to listOf(ChunkedWriteHandler$3:operationComplete(ChannelFuture)),
		ChunkedNioFile:<init>(File) to listOf(ChunkedNioFile:<init>(FileChannel)),
		ChunkedNioFile:<init>(File-int) to listOf(ChunkedNioFile:<init>(FileChannel-int)),
		ChunkedNioFile:<init>(FileChannel) to listOf(ChunkedNioFile:<init>(FileChannel-int)),
		ChunkedNioFile:<init>(FileChannel-int) to listOf(ChunkedNioFile:<init>(FileChannel-long-long-int)),
		ChunkedNioFile:readChunk(ChannelHandlerContext) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ScatteringByteChannel-int), ByteBuf:release(), ByteBuf:release(), ChunkedNioFile:readChunk(ChannelHandlerContext)),
		ChunkedWriteHandler$2:operationComplete(ChannelFuture) to listOf(ChunkedInput:progress(), ChunkedInput:length(), ChunkedWriteHandler$PendingWrite:progress(long-long), ChunkedInput:length(), ChunkedWriteHandler$PendingWrite:success(long), ChunkedWriteHandler:closeInput(ChunkedInput)),
		ChunkedWriteHandler$2:operationComplete(Future) to listOf(ChunkedWriteHandler$2:operationComplete(ChannelFuture)),
		ChunkedWriteHandler$4:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChunkedWriteHandler:closeInput(ChunkedInput), ChannelFuture:cause(), ChunkedWriteHandler$PendingWrite:fail(Throwable), ChunkedInput:progress(), ChunkedInput:length(), ChunkedWriteHandler$PendingWrite:progress(long-long), Channel:isWritable(), ChunkedWriteHandler:resumeTransfer()),
		ChunkedWriteHandler$4:operationComplete(Future) to listOf(ChunkedWriteHandler$4:operationComplete(ChannelFuture)),
		ChunkedNioStream:<init>(ReadableByteChannel) to listOf(ChunkedNioStream:<init>(ReadableByteChannel-int)),
		ChunkedNioStream:readChunk(ChannelHandlerContext) to listOf(ChunkedNioStream:isEndOfInput(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuffer), ByteBuf:release(), ByteBuf:release(), ChunkedNioStream:readChunk(ChannelHandlerContext)),
		ChunkedWriteHandler$1:run() to listOf(ChunkedWriteHandler:access$000(ChunkedWriteHandler-ChannelHandlerContext), ChunkedWriteHandler:access$100(), InternalLogger:isWarnEnabled(), ChunkedWriteHandler:access$100(), InternalLogger:warn(String-Throwable)),
		ChunkedWriteHandler$PendingWrite:fail(Throwable) to listOf(ReferenceCountUtil:release(Object), ChannelPromise:tryFailure(Throwable)),
		ChunkedWriteHandler$PendingWrite:success(long) to listOf(ChannelPromise:isDone(), ChannelProgressivePromise:tryProgress(long-long), ChannelPromise:trySuccess()),
		ChunkedWriteHandler$PendingWrite:progress(long-long) to listOf(ChannelProgressivePromise:tryProgress(long-long)),
		ChunkedStream:<init>(InputStream) to listOf(ChunkedStream:<init>(InputStream-int)),
		ChunkedStream:readChunk(ChannelHandlerContext) to listOf(ChunkedStream:isEndOfInput(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(InputStream-int), ByteBuf:release(), ByteBuf:release(), ChunkedStream:readChunk(ChannelHandlerContext)),
		SslHandshakeCompletionEvent:<clinit>() to listOf(SslHandshakeCompletionEvent:<init>()),
		JdkAlpnApplicationProtocolNegotiator:<init>(Iterable) to listOf(JdkAlpnApplicationProtocolNegotiator:<init>(boolean-Iterable)),
		JdkAlpnApplicationProtocolNegotiator:<init>(String[]) to listOf(JdkAlpnApplicationProtocolNegotiator:<init>(boolean-String[])),
		JdkAlpnApplicationProtocolNegotiator:<init>(boolean-Iterable) to listOf(JdkAlpnApplicationProtocolNegotiator:<init>(boolean-boolean-Iterable)),
		JdkAlpnApplicationProtocolNegotiator:<init>(boolean-String[]) to listOf(JdkAlpnApplicationProtocolNegotiator:<init>(boolean-boolean-String[])),
		JdkAlpnApplicationProtocolNegotiator:<init>(boolean-boolean-Iterable) to listOf(JdkAlpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable)),
		JdkAlpnApplicationProtocolNegotiator:<init>(boolean-boolean-String[]) to listOf(JdkAlpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[])),
		JdkAlpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable) to listOf(JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable)),
		JdkAlpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[]) to listOf(JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[])),
		JdkAlpnApplicationProtocolNegotiator:wrapperFactory() to listOf(JdkBaseApplicationProtocolNegotiator:wrapperFactory()),
		JdkAlpnApplicationProtocolNegotiator:protocolListenerFactory() to listOf(JdkBaseApplicationProtocolNegotiator:protocolListenerFactory()),
		JdkAlpnApplicationProtocolNegotiator:protocolSelectorFactory() to listOf(JdkBaseApplicationProtocolNegotiator:protocolSelectorFactory()),
		JdkAlpnApplicationProtocolNegotiator:protocols() to listOf(JdkBaseApplicationProtocolNegotiator:protocols()),
		JdkAlpnApplicationProtocolNegotiator:<clinit>() to listOf(JdkAlpnApplicationProtocolNegotiator$1:<init>()),
		JdkSslClientContext:<init>() to listOf(JdkSslClientContext:<init>(File-TrustManagerFactory)),
		JdkSslClientContext:<init>(File) to listOf(JdkSslClientContext:<init>(File-TrustManagerFactory)),
		JdkSslClientContext:<init>(TrustManagerFactory) to listOf(JdkSslClientContext:<init>(File-TrustManagerFactory)),
		JdkSslClientContext:<init>(File-TrustManagerFactory) to listOf(JdkSslClientContext:<init>(File-TrustManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslClientContext:<init>(File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(JdkSslClientContext:toNegotiator(ApplicationProtocolConfig-boolean), JdkSslClientContext:<init>(File-TrustManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslClientContext:<init>(File-TrustManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long) to listOf(JdkSslClientContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslClientContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(JdkSslClientContext:toNegotiator(ApplicationProtocolConfig-boolean), JdkSslClientContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslClientContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long) to listOf(JdkSslContext:<init>(Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator), JdkSslClientContext:buildTrustManagerFactory(File-TrustManagerFactory), JdkSslClientContext:buildKeyManagerFactory(File-File-String-KeyManagerFactory), SSLContext:getInstance(String), KeyManagerFactory:getKeyManagers(), TrustManagerFactory:getTrustManagers(), SSLContext:init(KeyManager[]-TrustManager[]-SecureRandom), SSLContext:getClientSessionContext(), SSLSessionContext:setSessionCacheSize(int), SSLSessionContext:setSessionTimeout(int), SSLException:<init>(String-Throwable)),
		SslHandler$1:run() to listOf(SslHandler:access$100(SslHandler), SSLEngine:closeOutbound(), SslHandler:write(ChannelHandlerContext-Object-ChannelPromise), SslHandler:flush(ChannelHandlerContext), ChannelPromise:tryFailure(Throwable), SslHandler:access$200(), ChannelHandlerContext:channel(), InternalLogger:warn(String-Object-Object)),
		JdkNpnSslEngine:isAvailable() to listOf(JdkNpnSslEngine:updateAvailability()),
		JdkNpnSslEngine:<init>(SSLEngine-JdkApplicationProtocolNegotiator-boolean) to listOf(JdkSslEngine:<init>(SSLEngine), ObjectUtil:checkNotNull(Object-String), JdkApplicationProtocolNegotiator:protocolListenerFactory(), JdkApplicationProtocolNegotiator:protocols(), JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory:newListener(SSLEngine-List), ObjectUtil:checkNotNull(Object-String), JdkNpnSslEngine$1:<init>(JdkNpnSslEngine-JdkApplicationProtocolNegotiator$ProtocolSelectionListener-JdkApplicationProtocolNegotiator), NextProtoNego:put(SSLEngine-NextProtoNego$Provider), JdkApplicationProtocolNegotiator:protocolSelectorFactory(), JdkApplicationProtocolNegotiator:protocols(), JdkApplicationProtocolNegotiator$ProtocolSelectorFactory:newSelector(SSLEngine-Set), ObjectUtil:checkNotNull(Object-String), JdkNpnSslEngine$2:<init>(JdkNpnSslEngine-JdkApplicationProtocolNegotiator$ProtocolSelector), NextProtoNego:put(SSLEngine-NextProtoNego$Provider)),
		JdkNpnSslEngine:closeInbound() to listOf(JdkNpnSslEngine:getWrappedEngine(), NextProtoNego:remove(SSLEngine), JdkSslEngine:closeInbound()),
		JdkNpnSslEngine:closeOutbound() to listOf(JdkNpnSslEngine:getWrappedEngine(), NextProtoNego:remove(SSLEngine), JdkSslEngine:closeOutbound()),
		OpenSslSessionStats:number() to listOf(SSLContext:sessionNumber(long)),
		OpenSslSessionStats:connect() to listOf(SSLContext:sessionConnect(long)),
		OpenSslSessionStats:connectGood() to listOf(SSLContext:sessionConnectGood(long)),
		OpenSslSessionStats:connectRenegotiate() to listOf(SSLContext:sessionConnectRenegotiate(long)),
		OpenSslSessionStats:accept() to listOf(SSLContext:sessionAccept(long)),
		OpenSslSessionStats:acceptGood() to listOf(SSLContext:sessionAcceptGood(long)),
		OpenSslSessionStats:acceptRenegotiate() to listOf(SSLContext:sessionAcceptRenegotiate(long)),
		OpenSslSessionStats:hits() to listOf(SSLContext:sessionHits(long)),
		OpenSslSessionStats:cbHits() to listOf(SSLContext:sessionCbHits(long)),
		OpenSslSessionStats:misses() to listOf(SSLContext:sessionMisses(long)),
		OpenSslSessionStats:timeouts() to listOf(SSLContext:sessionTimeouts(long)),
		OpenSslSessionStats:cacheFull() to listOf(SSLContext:sessionCacheFull(long)),
		JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:unsupported() to listOf(JdkSslEngine:getSession(), JdkSslSession:setApplicationProtocol(String)),
		JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:selected(String) to listOf(JdkSslEngine:getSession(), JdkSslSession:setApplicationProtocol(String), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:noSelectedMatchFound(String)),
		SslHandler$6:run() to listOf(SslHandler:access$200(), ChannelHandlerContext:channel(), InternalLogger:warn(String-Object), ChannelHandlerContext:close(ChannelPromise)),
		SslHandler:<init>(SSLEngine) to listOf(SslHandler:<init>(SSLEngine-boolean)),
		SslHandler:<init>(SSLEngine-boolean) to listOf(ByteToMessageDecoder:<init>(), SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1), SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1), SSLEngine:getSession(), SSLSession:getPacketBufferSize(), SslHandler:setCumulator(ByteToMessageDecoder$Cumulator)),
		SslHandler:setHandshakeTimeout(long-TimeUnit) to listOf(SslHandler:setHandshakeTimeoutMillis(long)),
		SslHandler:setCloseNotifyTimeout(long-TimeUnit) to listOf(SslHandler:setCloseNotifyTimeoutMillis(long)),
		SslHandler:close() to listOf(ChannelHandlerContext:newPromise(), SslHandler:close(ChannelPromise)),
		SslHandler:close(ChannelPromise) to listOf(ChannelHandlerContext:executor(), SslHandler$1:<init>(SslHandler-ChannelHandlerContext-ChannelPromise), EventExecutor:execute(Runnable)),
		SslHandler:handlerRemoved0(ChannelHandlerContext) to listOf(PendingWriteQueue:isEmpty(), ChannelException:<init>(String), PendingWriteQueue:removeAndFailAll(Throwable)),
		SslHandler:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean)),
		SslHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean)),
		SslHandler:read(ChannelHandlerContext) to listOf(Promise:isDone(), ChannelHandlerContext:read()),
		SslHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(PendingWriteQueue:add(Object-ChannelPromise)),
		SslHandler:flush(ChannelHandlerContext) to listOf(PendingWriteQueue:removeAndWriteAll(), ChannelHandlerContext:flush(), PendingWriteQueue:isEmpty(), ChannelHandlerContext:newPromise(), PendingWriteQueue:add(Object-ChannelPromise), Promise:isDone(), SslHandler:wrap(ChannelHandlerContext-boolean), ChannelHandlerContext:flush()),
		SslHandler:wrap(ChannelHandlerContext-boolean) to listOf(ChannelHandlerContext:alloc(), PendingWriteQueue:current(), PendingWriteQueue:removeAndWrite(), ByteBuf:readableBytes(), SslHandler:allocateOutNetBuf(ChannelHandlerContext-int), SslHandler:wrap(ByteBufAllocator-SSLEngine-ByteBuf-ByteBuf), ByteBuf:isReadable(), PendingWriteQueue:remove(), SSLEngineResult:getStatus(), PendingWriteQueue:removeAndFailAll(Throwable), SslHandler:finishWrap(ChannelHandlerContext-ByteBuf-ChannelPromise-boolean), SSLEngineResult:getHandshakeStatus(), SSLEngineResult$HandshakeStatus:ordinal(), SslHandler:runDelegatedTasks(), SslHandler:setHandshakeSuccess(), SslHandler:setHandshakeSuccessIfStillHandshaking(), SslHandler:finishWrap(ChannelHandlerContext-ByteBuf-ChannelPromise-boolean), SslHandler:finishWrap(ChannelHandlerContext-ByteBuf-ChannelPromise-boolean), SSLEngineResult:getHandshakeStatus(), SslHandler:finishWrap(ChannelHandlerContext-ByteBuf-ChannelPromise-boolean), SslHandler:setHandshakeFailure(ChannelHandlerContext-Throwable), SslHandler:finishWrap(ChannelHandlerContext-ByteBuf-ChannelPromise-boolean)),
		SslHandler:finishWrap(ChannelHandlerContext-ByteBuf-ChannelPromise-boolean) to listOf(ByteBuf:isReadable(), ByteBuf:release(), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:write(Object)),
		SslHandler:wrapNonAppData(ChannelHandlerContext-boolean) to listOf(ChannelHandlerContext:alloc(), SslHandler:allocateOutNetBuf(ChannelHandlerContext-int), SslHandler:wrap(ByteBufAllocator-SSLEngine-ByteBuf-ByteBuf), SSLEngineResult:bytesProduced(), ChannelHandlerContext:write(Object), SSLEngineResult:getHandshakeStatus(), SSLEngineResult$HandshakeStatus:ordinal(), SslHandler:setHandshakeSuccess(), SslHandler:runDelegatedTasks(), SslHandler:unwrapNonAppData(ChannelHandlerContext), SslHandler:setHandshakeSuccessIfStillHandshaking(), SslHandler:unwrapNonAppData(ChannelHandlerContext), SSLEngineResult:getHandshakeStatus(), SSLEngineResult:bytesProduced(), ByteBuf:release(), SslHandler:setHandshakeFailure(ChannelHandlerContext-Throwable), ByteBuf:release()),
		SslHandler:wrap(ByteBufAllocator-SSLEngine-ByteBuf-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:isDirect(), ByteBuf:nioBufferCount(), ByteBuf:internalNioBuffer(int-int), ByteBuf:nioBuffers(), ByteBufAllocator:directBuffer(int), ByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:internalNioBuffer(int-int), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBuffer(int-int), SSLEngine:wrap(ByteBuffer[]-ByteBuffer), SSLEngineResult:bytesConsumed(), ByteBuf:skipBytes(int), ByteBuf:writerIndex(), SSLEngineResult:bytesProduced(), ByteBuf:writerIndex(int), SSLEngineResult:getStatus(), SSLEngineResult$Status:ordinal(), ByteBuf:ensureWritable(int), ByteBuf:release(), ByteBuf:release()),
		SslHandler:channelInactive(ChannelHandlerContext) to listOf(SslHandler:setHandshakeFailure(ChannelHandlerContext-Throwable), ByteToMessageDecoder:channelInactive(ChannelHandlerContext)),
		SslHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(SslHandler:ignoreException(Throwable), InternalLogger:isDebugEnabled(), ChannelHandlerContext:channel(), InternalLogger:debug(String-Object-Object), ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		SslHandler:ignoreException(Throwable) to listOf(SslHandler$LazyChannelPromise:isDone(), PlatformDependent:getClassLoader(Class), PlatformDependent:javaVersion()),
		SslHandler:isEncrypted(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), SslHandler:getEncryptedPacketLength(ByteBuf-int)),
		SslHandler:getEncryptedPacketLength(ByteBuf-int) to listOf(ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), ByteBuf:getShort(int), ByteBuf:getShort(int)),
		SslHandler:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), SslHandler:getEncryptedPacketLength(ByteBuf-int), ByteBuf:skipBytes(int), ByteBuf:isDirect(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int), ByteBuf:writeBytes(ByteBuf-int-int), SslHandler:unwrap(ChannelHandlerContext-ByteBuf-int-int), ByteBuf:release(), ByteBuf:release(), SslHandler:unwrap(ChannelHandlerContext-ByteBuf-int-int), ByteBufUtil:hexDump(ByteBuf), NotSslRecordException:<init>(String), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ChannelHandlerContext:fireExceptionCaught(Throwable), SslHandler:setHandshakeFailure(ChannelHandlerContext-Throwable)),
		SslHandler:channelReadComplete(ChannelHandlerContext) to listOf(ChannelHandlerContext:flush(), Promise:isDone(), ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), ChannelHandlerContext:read(), ChannelHandlerContext:fireChannelReadComplete()),
		SslHandler:unwrapNonAppData(ChannelHandlerContext) to listOf(SslHandler:unwrap(ChannelHandlerContext-ByteBuf-int-int)),
		SslHandler:unwrap(ChannelHandlerContext-ByteBuf-int-int) to listOf(SslHandler:allocate(ChannelHandlerContext-int), SslHandler:unwrap(SSLEngine-ByteBuf-int-int-ByteBuf), SSLEngineResult:getStatus(), SSLEngineResult:getHandshakeStatus(), SSLEngineResult:bytesProduced(), SSLEngineResult:bytesConsumed(), SSLEngineResult$HandshakeStatus:ordinal(), SslHandler:wrapNonAppData(ChannelHandlerContext-boolean), SslHandler:runDelegatedTasks(), SslHandler:setHandshakeSuccess(), SslHandler:setHandshakeSuccessIfStillHandshaking(), SslHandler:wrap(ChannelHandlerContext-boolean), ChannelHandlerContext:channel(), SslHandler$LazyChannelPromise:trySuccess(Object), ByteBuf:isReadable(), ChannelHandlerContext:fireChannelRead(Object), ByteBuf:release(), SslHandler:setHandshakeFailure(ChannelHandlerContext-Throwable), ByteBuf:isReadable(), ChannelHandlerContext:fireChannelRead(Object), ByteBuf:release()),
		SslHandler:unwrap(SSLEngine-ByteBuf-int-int-ByteBuf) to listOf(ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBufferCount(), ByteBuf:internalNioBuffer(int-int), ByteBuf:nioBuffer(int-int), OpenSslEngine:unwrap(ByteBuffer[]-ByteBuffer[]), ByteBuf:writerIndex(), SSLEngineResult:bytesProduced(), ByteBuf:writerIndex(int), SSLEngineResult:getStatus(), SSLEngineResult$Status:ordinal(), SSLEngine:getSession(), SSLSession:getApplicationBufferSize(), ByteBuf:readableBytes(), ByteBuf:ensureWritable(int), ByteBuf:ensureWritable(int), ByteBuf:internalNioBuffer(int-int), ByteBuf:nioBuffer(int-int), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBufferCount(), ByteBuf:internalNioBuffer(int-int), ByteBuf:nioBuffer(int-int), SSLEngine:unwrap(ByteBuffer-ByteBuffer), ByteBuf:writerIndex(), SSLEngineResult:bytesProduced(), ByteBuf:writerIndex(int), SSLEngineResult:getStatus(), SSLEngineResult$Status:ordinal(), SSLEngine:getSession(), SSLSession:getApplicationBufferSize(), ByteBuf:readableBytes(), ByteBuf:ensureWritable(int), ByteBuf:ensureWritable(int)),
		SslHandler:runDelegatedTasks() to listOf(SSLEngine:getDelegatedTask()),
		SslHandler:setHandshakeSuccessIfStillHandshaking() to listOf(Promise:isDone(), SslHandler:setHandshakeSuccess()),
		SslHandler:setHandshakeSuccess() to listOf(SSLEngine:getSession(), SSLSession:getCipherSuite(), ChannelHandlerContext:channel(), Promise:trySuccess(Object), InternalLogger:isDebugEnabled(), ChannelHandlerContext:channel(), SSLEngine:getSession(), SSLSession:getCipherSuite(), InternalLogger:debug(String-Object-Object), ChannelHandlerContext:fireUserEventTriggered(Object), ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), ChannelHandlerContext:read()),
		SslHandler:setHandshakeFailure(ChannelHandlerContext-Throwable) to listOf(SSLEngine:closeOutbound(), SSLEngine:closeInbound(), SSLException:getMessage(), ChannelHandlerContext:channel(), InternalLogger:debug(String-Object-Object), SslHandler:notifyHandshakeFailure(Throwable), PendingWriteQueue:removeAndFailAll(Throwable)),
		SslHandler:notifyHandshakeFailure(Throwable) to listOf(Promise:tryFailure(Throwable), SslHandshakeCompletionEvent:<init>(Throwable), ChannelHandlerContext:fireUserEventTriggered(Object), ChannelHandlerContext:close()),
		SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:disconnect(ChannelPromise), ChannelHandlerContext:close(ChannelPromise), SSLEngine:closeOutbound(), ChannelHandlerContext:newPromise(), SslHandler:write(ChannelHandlerContext-Object-ChannelPromise), SslHandler:flush(ChannelHandlerContext), SslHandler:safeClose(ChannelHandlerContext-ChannelFuture-ChannelPromise)),
		SslHandler:handlerAdded(ChannelHandlerContext) to listOf(PendingWriteQueue:<init>(ChannelHandlerContext), ChannelHandlerContext:channel(), Channel:isActive(), SSLEngine:getUseClientMode(), SslHandler:handshake(Promise)),
		SslHandler:renegotiate() to listOf(ChannelHandlerContext:executor(), EventExecutor:newPromise(), SslHandler:renegotiate(Promise)),
		SslHandler:renegotiate(Promise) to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), SslHandler$2:<init>(SslHandler-Promise), EventExecutor:execute(Runnable), SslHandler:handshake(Promise)),
		SslHandler:handshake(Promise) to listOf(Promise:isDone(), SslHandler$3:<init>(SslHandler-Promise), Promise:addListener(GenericFutureListener), Promise:isDone(), SSLEngine:beginHandshake(), SslHandler:wrapNonAppData(ChannelHandlerContext-boolean), ChannelHandlerContext:flush(), SslHandler:notifyHandshakeFailure(Throwable), Promise:isDone(), ChannelHandlerContext:executor(), SslHandler$4:<init>(SslHandler-Promise), EventExecutor:schedule(Runnable-long-TimeUnit), SslHandler$5:<init>(SslHandler-ScheduledFuture), Promise:addListener(GenericFutureListener)),
		SslHandler:channelActive(ChannelHandlerContext) to listOf(SSLEngine:getUseClientMode(), SslHandler:handshake(Promise), ChannelHandlerContext:fireChannelActive()),
		SslHandler:safeClose(ChannelHandlerContext-ChannelFuture-ChannelPromise) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(ChannelPromise), ChannelHandlerContext:executor(), SslHandler$6:<init>(SslHandler-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit), SslHandler$7:<init>(SslHandler-ScheduledFuture-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		SslHandler:allocate(ChannelHandlerContext-int) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:directBuffer(int), ByteBufAllocator:buffer(int)),
		SslHandler:allocateOutNetBuf(ChannelHandlerContext-int) to listOf(SslHandler:allocate(ChannelHandlerContext-int), SslHandler:allocate(ChannelHandlerContext-int)),
		SslHandler:access$300(SslHandler-Promise) to listOf(SslHandler:handshake(Promise)),
		SslHandler:access$500(SslHandler-Throwable) to listOf(SslHandler:notifyHandshakeFailure(Throwable)),
		SslHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SSLException:<init>(String), SSLException:<init>(String), SSLException:setStackTrace(StackTraceElement[]), SSLException:setStackTrace(StackTraceElement[])),
		JdkBaseApplicationProtocolNegotiator$4:newListener(SSLEngine-List) to listOf(JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:<init>(JdkSslEngine-List)),
		JdkAlpnApplicationProtocolNegotiator$1:<init>() to listOf(JdkAlpnSslEngine:isAvailable()),
		JdkAlpnApplicationProtocolNegotiator$1:wrapSslEngine(SSLEngine-JdkApplicationProtocolNegotiator-boolean) to listOf(JdkAlpnSslEngine:<init>(SSLEngine-JdkApplicationProtocolNegotiator-boolean)),
		JdkSslContext$1:<clinit>() to listOf(ApplicationProtocolConfig$Protocol:values(), ApplicationProtocolConfig$Protocol:ordinal(), ApplicationProtocolConfig$Protocol:ordinal(), ApplicationProtocolConfig$Protocol:ordinal(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:values(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:ordinal(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:ordinal(), ApplicationProtocolConfig$SelectorFailureBehavior:values(), ApplicationProtocolConfig$SelectorFailureBehavior:ordinal(), ApplicationProtocolConfig$SelectorFailureBehavior:ordinal()),
		SslHandler$8:<clinit>() to listOf(SSLEngineResult$Status:values(), SSLEngineResult$Status:ordinal(), SSLEngineResult$HandshakeStatus:values(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal()),
		OpenSslContext$1:<clinit>() to listOf(ApplicationProtocolConfig$Protocol:values(), ApplicationProtocolConfig$Protocol:ordinal(), ApplicationProtocolConfig$Protocol:ordinal(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:values(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:ordinal()),
		JdkBaseApplicationProtocolNegotiator$FailProtocolSelector:<init>(JdkSslEngine-Set) to listOf(JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:<init>(JdkSslEngine-Set)),
		JdkBaseApplicationProtocolNegotiator$FailProtocolSelector:noSelectMatchFound() to listOf(SSLHandshakeException:<init>(String)),
		OpenSslClientContext$1:verify(long-byte[][]-String) to listOf(OpenSslContext:certificates(byte[][]), X509TrustManager:checkServerTrusted(X509Certificate[]-String), OpenSslClientContext:access$000(), InternalLogger:debug(String-Throwable)),
		OpenSslEngine:<init>(long-ByteBufAllocator-String) to listOf(OpenSslEngine:<init>(long-ByteBufAllocator-String-boolean-OpenSslSessionContext)),
		OpenSslEngine:<init>(long-ByteBufAllocator-String-boolean-OpenSslSessionContext) to listOf(SSLEngine:<init>(), OpenSsl:ensureAvailability(), SSL:newSSL(long-boolean), SSL:makeNetworkBIO(long)),
		OpenSslEngine:shutdown() to listOf(SSL:freeSSL(long), SSL:freeBIO(long)),
		OpenSslEngine:writePlaintextData(ByteBuffer) to listOf(Buffer:address(ByteBuffer), SSL:writeToSSL(long-long-int), ByteBufAllocator:directBuffer(int), OpenSslEngine:memoryAddress(ByteBuf), ByteBuf:setBytes(int-ByteBuffer), SSL:writeToSSL(long-long-int), ByteBuf:release(), ByteBuf:release(), ByteBuf:release()),
		OpenSslEngine:writeEncryptedData(ByteBuffer) to listOf(Buffer:address(ByteBuffer), SSL:writeToBIO(long-long-int), ByteBufAllocator:directBuffer(int), OpenSslEngine:memoryAddress(ByteBuf), ByteBuf:setBytes(int-ByteBuffer), SSL:writeToBIO(long-long-int), ByteBuf:release(), ByteBuf:release(), ByteBuf:release()),
		OpenSslEngine:readPlaintextData(ByteBuffer) to listOf(Buffer:address(ByteBuffer), SSL:readFromSSL(long-long-int), ByteBufAllocator:directBuffer(int), OpenSslEngine:memoryAddress(ByteBuf), SSL:readFromSSL(long-long-int), ByteBuf:getBytes(int-ByteBuffer), ByteBuf:release(), ByteBuf:release(), ByteBuf:release()),
		OpenSslEngine:readEncryptedData(ByteBuffer-int) to listOf(Buffer:address(ByteBuffer), SSL:readFromBIO(long-long-int), ByteBufAllocator:directBuffer(int), OpenSslEngine:memoryAddress(ByteBuf), SSL:readFromBIO(long-long-int), ByteBuf:getBytes(int-ByteBuffer), ByteBuf:release(), ByteBuf:release(), ByteBuf:release()),
		OpenSslEngine:wrap(ByteBuffer[]-int-int-ByteBuffer) to listOf(SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:beginHandshakeImplicitly(), OpenSslEngine:getHandshakeStatus(), OpenSslEngine:getEngineStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), SSL:pendingWrittenBytesInBIO(long), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:readEncryptedData(ByteBuffer-int), SSLException:<init>(Throwable), OpenSslEngine:shutdown(), OpenSslEngine:getEngineStatus(), OpenSslEngine:getHandshakeStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:writePlaintextData(ByteBuffer), SSLException:<init>(Throwable), SSL:pendingWrittenBytesInBIO(long), OpenSslEngine:getHandshakeStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:readEncryptedData(ByteBuffer-int), SSLException:<init>(Throwable), OpenSslEngine:getEngineStatus(), OpenSslEngine:getHandshakeStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:getEngineStatus(), OpenSslEngine:getHandshakeStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int)),
		OpenSslEngine:unwrap(ByteBuffer[]-int-int-ByteBuffer[]-int-int) to listOf(SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:beginHandshakeImplicitly(), OpenSslEngine:getHandshakeStatus(), OpenSslEngine:getEngineStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:shutdown(), OpenSslEngine:writeEncryptedData(ByteBuffer), SSLException:<init>(Throwable), SSL:readFromSSL(long-long-int), SSL:getLastErrorNumber(), OpenSsl:isError(long), SSL:getErrorString(long), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), OpenSslEngine:shutdown(), SSLException:<init>(String), SSL:isInInit(long), SSL:pendingReadableBytesInSSL(long), OpenSslEngine:getHandshakeStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int), OpenSslEngine:readPlaintextData(ByteBuffer), SSLException:<init>(Throwable), SSL:getShutdown(long), OpenSslEngine:closeOutbound(), OpenSslEngine:closeInbound(), OpenSslEngine:getEngineStatus(), OpenSslEngine:getHandshakeStatus(), SSLEngineResult:<init>(SSLEngineResult$Status-SSLEngineResult$HandshakeStatus-int-int)),
		OpenSslEngine:unwrap(ByteBuffer[]-ByteBuffer[]) to listOf(OpenSslEngine:unwrap(ByteBuffer[]-int-int-ByteBuffer[]-int-int)),
		OpenSslEngine:unwrap(ByteBuffer-ByteBuffer[]-int-int) to listOf(OpenSslEngine:unwrap(ByteBuffer[]-int-int-ByteBuffer[]-int-int)),
		OpenSslEngine:closeInbound() to listOf(OpenSslEngine:shutdown(), SSLException:<init>(String)),
		OpenSslEngine:closeOutbound() to listOf(SSL:getShutdown(long), SSL:shutdownSSL(long), OpenSslEngine:shutdown()),
		OpenSslEngine:getSupportedCipherSuites() to listOf(OpenSsl:availableCipherSuites()),
		OpenSslEngine:getEnabledCipherSuites() to listOf(SSL:getCiphers(long), OpenSslEngine:toJavaCipherSuite(String)),
		OpenSslEngine:setEnabledCipherSuites(String[]) to listOf(CipherSuiteConverter:toOpenSsl(String), OpenSsl:isCipherSuiteAvailable(String), SSL:setCipherSuites(long-String)),
		OpenSslEngine:getEnabledProtocols() to listOf(SSL:getOptions(long)),
		OpenSslEngine:setEnabledProtocols(String[]) to listOf(SSL:setOptions(long-int), SSL:setOptions(long-int), SSL:setOptions(long-int), SSL:setOptions(long-int), SSL:setOptions(long-int), SSL:setOptions(long-int)),
		OpenSslEngine:initPeerCertChain() to listOf(SSL:getPeerCertChain(long), SSL:getPeerCertificate(long), SSLPeerUnverifiedException:<init>(String), OpenSslX509Certificate:<init>(byte[]), OpenSslX509Certificate:<init>(byte[])),
		OpenSslEngine:getSession() to listOf(OpenSslEngine$1:<init>(OpenSslEngine)),
		OpenSslEngine:beginHandshake() to listOf(OpenSslEngine:handshake()),
		OpenSslEngine:beginHandshakeImplicitly() to listOf(OpenSslEngine:handshake()),
		OpenSslEngine:handshake() to listOf(SSL:doHandshake(long), SSL:getLastErrorNumber(), OpenSsl:isError(long), SSL:getErrorString(long), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), OpenSslEngine:shutdown(), SSLException:<init>(String)),
		OpenSslEngine:memoryAddress(ByteBuf) to listOf(ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), ByteBuf:nioBuffer(), Buffer:address(ByteBuffer)),
		OpenSslEngine:getHandshakeStatus() to listOf(SSL:pendingWrittenBytesInBIO(long), SSL:isInInit(long), SSL:pendingWrittenBytesInBIO(long)),
		OpenSslEngine:toJavaCipherSuite(String) to listOf(SSL:getVersion(long), OpenSslEngine:toJavaCipherSuitePrefix(String), CipherSuiteConverter:toJava(String-String)),
		OpenSslEngine:setNeedClientAuth(boolean) to listOf(OpenSslEngine:setClientAuth(OpenSslEngine$ClientAuthMode)),
		OpenSslEngine:setWantClientAuth(boolean) to listOf(OpenSslEngine:setClientAuth(OpenSslEngine$ClientAuthMode)),
		OpenSslEngine:setClientAuth(OpenSslEngine$ClientAuthMode) to listOf(OpenSslEngine$ClientAuthMode:ordinal(), SSL:setVerify(long-int-int), SSL:setVerify(long-int-int), SSL:setVerify(long-int-int)),
		OpenSslEngine:finalize() to listOf(OpenSslEngine:shutdown()),
		OpenSslEngine:access$300(OpenSslEngine) to listOf(OpenSslEngine:initPeerCertChain()),
		OpenSslEngine:access$700(OpenSslEngine-String) to listOf(OpenSslEngine:toJavaCipherSuite(String)),
		OpenSslEngine:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SSLException:<init>(String), SSLException:<init>(String), SSLException:<init>(String), SSLException:setStackTrace(StackTraceElement[]), SSLException:setStackTrace(StackTraceElement[]), SSLException:setStackTrace(StackTraceElement[]), PlatformDependent:newAtomicIntegerFieldUpdater(Class-String), PlatformDependent:newAtomicReferenceFieldUpdater(Class-String), ByteBuf:nioBuffer(), Buffer:address(ByteBuffer)),
		SslHandler$LazyChannelPromise:<init>(SslHandler) to listOf(DefaultPromise:<init>()),
		SslHandler$LazyChannelPromise:executor() to listOf(SslHandler:access$600(SslHandler), SslHandler:access$600(SslHandler), ChannelHandlerContext:executor()),
		SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1) to listOf(SslHandler$LazyChannelPromise:<init>(SslHandler)),
		JdkBaseApplicationProtocolNegotiator$2:newSelector(SSLEngine-Set) to listOf(JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:<init>(JdkSslEngine-Set)),
		SslHandler$3:operationComplete(Future) to listOf(Future:isSuccess(), Future:getNow(), Promise:setSuccess(Object), Future:cause(), Promise:setFailure(Throwable)),
		JdkSslServerContext:<init>(File-File) to listOf(JdkSslServerContext:<init>(File-File-String)),
		JdkSslServerContext:<init>(File-File-String) to listOf(JdkSslServerContext:<init>(File-File-String-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslServerContext:<init>(File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(JdkSslServerContext:toNegotiator(ApplicationProtocolConfig-boolean), JdkSslServerContext:<init>(File-File-String-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslServerContext:<init>(File-File-String-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long) to listOf(JdkSslServerContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslServerContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(JdkSslServerContext:toNegotiator(ApplicationProtocolConfig-boolean), JdkSslServerContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long)),
		JdkSslServerContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator-long-long) to listOf(JdkSslContext:<init>(Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator), JdkSslServerContext:buildTrustManagerFactory(File-TrustManagerFactory), JdkSslServerContext:buildKeyManagerFactory(File-File-String-KeyManagerFactory), SSLContext:getInstance(String), KeyManagerFactory:getKeyManagers(), TrustManagerFactory:getTrustManagers(), SSLContext:init(KeyManager[]-TrustManager[]-SecureRandom), SSLContext:getServerSessionContext(), SSLSessionContext:setSessionCacheSize(int), SSLSessionContext:setSessionTimeout(int), SSLException:<init>(String-Throwable)),
		SslProvider:values() to listOf(SslProvider[]:clone()),
		SslProvider:<clinit>() to listOf(SslProvider:<init>(String-int), SslProvider:<init>(String-int)),
		ApplicationProtocolConfig$SelectorFailureBehavior:values() to listOf(ApplicationProtocolConfig$SelectorFailureBehavior[]:clone()),
		ApplicationProtocolConfig$SelectorFailureBehavior:<clinit>() to listOf(ApplicationProtocolConfig$SelectorFailureBehavior:<init>(String-int), ApplicationProtocolConfig$SelectorFailureBehavior:<init>(String-int), ApplicationProtocolConfig$SelectorFailureBehavior:<init>(String-int)),
		JdkDefaultApplicationProtocolNegotiator:<clinit>() to listOf(JdkDefaultApplicationProtocolNegotiator:<init>(), JdkDefaultApplicationProtocolNegotiator$1:<init>()),
		OpenSslX509Certificate:checkValidity() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:checkValidity(Date) to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getVersion() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getSerialNumber() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getIssuerDN() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getSubjectDN() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getNotBefore() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getNotAfter() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getTBSCertificate() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getSignature() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getSigAlgName() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getSigAlgOID() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getSigAlgParams() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getIssuerUniqueID() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getSubjectUniqueID() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getKeyUsage() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getBasicConstraints() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getEncoded() to listOf(byte[]:clone()),
		OpenSslX509Certificate:verify(PublicKey) to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:verify(PublicKey-String) to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:toString() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getPublicKey() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:hasUnsupportedCriticalExtension() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getCriticalExtensionOIDs() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getNonCriticalExtensionOIDs() to listOf(OpenSslX509Certificate:unwrap()),
		OpenSslX509Certificate:getExtensionValue(String) to listOf(OpenSslX509Certificate:unwrap()),
		SslContext:defaultServerProvider() to listOf(SslContext:defaultProvider()),
		SslContext:defaultClientProvider() to listOf(SslContext:defaultProvider()),
		SslContext:defaultProvider() to listOf(OpenSsl:isAvailable()),
		SslContext:newServerContext(File-File) to listOf(SslContext:newServerContext(File-File-String)),
		SslContext:newServerContext(File-File-String) to listOf(SslContext:newServerContext(SslProvider-File-File-String)),
		SslContext:newServerContext(File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(SslContext:newServerContext(SslProvider-File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long)),
		SslContext:newServerContext(SslProvider-File-File) to listOf(SslContext:newServerContext(SslProvider-File-File-String)),
		SslContext:newServerContext(SslProvider-File-File-String) to listOf(SslContext:newServerContext(SslProvider-File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long)),
		SslContext:newServerContext(SslProvider-File-File-String-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(SslContext:newServerContext(SslProvider-File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long)),
		SslContext:newServerContext(SslProvider-File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(SslContext:defaultServerProvider(), SslProvider:ordinal(), JdkSslServerContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long), SslProvider:toString()),
		SslContext:newClientContext() to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory)),
		SslContext:newClientContext(File) to listOf(SslContext:newClientContext(SslProvider-File)),
		SslContext:newClientContext(TrustManagerFactory) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory)),
		SslContext:newClientContext(File-TrustManagerFactory) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory)),
		SslContext:newClientContext(File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long)),
		SslContext:newClientContext(SslProvider) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory)),
		SslContext:newClientContext(SslProvider-File) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory)),
		SslContext:newClientContext(SslProvider-TrustManagerFactory) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory)),
		SslContext:newClientContext(SslProvider-File-TrustManagerFactory) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long)),
		SslContext:newClientContext(SslProvider-File-TrustManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(SslContext:newClientContext(SslProvider-File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long)),
		SslContext:newClientContext(SslProvider-File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long) to listOf(SslContext:defaultClientProvider(), SslProvider:ordinal(), JdkSslClientContext:<init>(File-TrustManagerFactory-File-File-String-KeyManagerFactory-Iterable-CipherSuiteFilter-ApplicationProtocolConfig-long-long), OpenSslClientContext:<init>(File-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long)),
		SslContext:isServer() to listOf(SslContext:isClient()),
		SslContext:newHandler(ByteBufAllocator) to listOf(SslContext:newEngine(ByteBufAllocator), SslContext:newHandler(SSLEngine)),
		SslContext:newHandler(ByteBufAllocator-String-int) to listOf(SslContext:newEngine(ByteBufAllocator-String-int), SslContext:newHandler(SSLEngine)),
		SslContext:newHandler(SSLEngine) to listOf(SslHandler:<init>(SSLEngine)),
		SslContext:generateKeySpec(char[]-byte[]) to listOf(EncryptedPrivateKeyInfo:<init>(byte[]), EncryptedPrivateKeyInfo:getAlgName(), SecretKeyFactory:getInstance(String), PBEKeySpec:<init>(char[]), SecretKeyFactory:generateSecret(KeySpec), EncryptedPrivateKeyInfo:getAlgName(), Cipher:getInstance(String), EncryptedPrivateKeyInfo:getAlgParameters(), Cipher:init(int-Key-AlgorithmParameters), EncryptedPrivateKeyInfo:getKeySpec(Cipher)),
		OpenSslNpnApplicationProtocolNegotiator:<init>(Iterable) to listOf(ApplicationProtocolUtil:toList(Iterable), ObjectUtil:checkNotNull(Object-String)),
		OpenSslNpnApplicationProtocolNegotiator:<init>(String[]) to listOf(ApplicationProtocolUtil:toList(String[]), ObjectUtil:checkNotNull(Object-String)),
		OpenSslEngine$2:<clinit>() to listOf(OpenSslEngine$ClientAuthMode:values(), OpenSslEngine$ClientAuthMode:ordinal(), OpenSslEngine$ClientAuthMode:ordinal(), OpenSslEngine$ClientAuthMode:ordinal()),
		OpenSslEngine$ClientAuthMode:values() to listOf(OpenSslEngine$ClientAuthMode[]:clone()),
		OpenSslEngine$ClientAuthMode:<clinit>() to listOf(OpenSslEngine$ClientAuthMode:<init>(String-int), OpenSslEngine$ClientAuthMode:<init>(String-int), OpenSslEngine$ClientAuthMode:<init>(String-int)),
		JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable) to listOf(ApplicationProtocolUtil:toList(Iterable), JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-List)),
		JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[]) to listOf(ApplicationProtocolUtil:toList(String[]), JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-List)),
		JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-List) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String)),
		JdkBaseApplicationProtocolNegotiator:<clinit>() to listOf(JdkBaseApplicationProtocolNegotiator$1:<init>(), JdkBaseApplicationProtocolNegotiator$2:<init>(), JdkBaseApplicationProtocolNegotiator$3:<init>(), JdkBaseApplicationProtocolNegotiator$4:<init>()),
		OpenSslServerContext:<init>(File-File) to listOf(OpenSslServerContext:<init>(File-File-String)),
		OpenSslServerContext:<init>(File-File-String) to listOf(OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-OpenSslApplicationProtocolNegotiator-long-long)),
		OpenSslServerContext:<init>(File-File-String-Iterable-ApplicationProtocolConfig-long-long) to listOf(OpenSslServerContext:toNegotiator(ApplicationProtocolConfig-boolean), OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-OpenSslApplicationProtocolNegotiator-long-long)),
		OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long) to listOf(OpenSslServerContext:toNegotiator(ApplicationProtocolConfig-boolean), OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-OpenSslApplicationProtocolNegotiator-long-long)),
		OpenSslServerContext:<init>(File-File-String-TrustManagerFactory-Iterable-OpenSslApplicationProtocolNegotiator-long-long) to listOf(OpenSslContext:<init>(Iterable-OpenSslApplicationProtocolNegotiator-long-long-int), OpenSsl:ensureAvailability(), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), SSLContext:setVerify(long-int-int), SSLContext:setCertificateChainFile(long-String-boolean), SSL:getLastErrorNumber(), OpenSsl:isError(long), SSL:getErrorString(long), SSLException:<init>(String), SSLContext:setCertificate(long-String-String-String-int), SSL:getLastErrorNumber(), OpenSsl:isError(long), SSL:getErrorString(long), SSLException:<init>(String), SSLException:<init>(String-Throwable), PemReader:readPrivateKey(File), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), ByteBuf:release(), OpenSslServerContext:generateKeySpec(char[]-byte[]), PemReader:readCertificates(File), ByteBufInputStream:<init>(ByteBuf), ByteBuf:release(), ByteBuf:release(), TrustManagerFactory:getDefaultAlgorithm(), TrustManagerFactory:getInstance(String), TrustManagerFactory:init(KeyStore), TrustManagerFactory:init(KeyStore), TrustManagerFactory:getTrustManagers(), OpenSslServerContext:chooseTrustManager(TrustManager[]), OpenSslServerContext$1:<init>(OpenSslServerContext-X509TrustManager), SSLContext:setCertVerifyCallback(long-CertificateVerifier), SSLException:<init>(String-Throwable), OpenSslServerSessionContext:<init>(long), OpenSslServerContext:destroyPools(), OpenSslServerContext:destroyPools()),
		OpenSslServerContext:sessionContext() to listOf(OpenSslServerContext:sessionContext(), OpenSslServerContext:sessionContext()),
		OpenSslServerContext:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		JdkSslContext:<init>(Iterable-CipherSuiteFilter-ApplicationProtocolConfig-boolean) to listOf(JdkSslContext:toNegotiator(ApplicationProtocolConfig-boolean), JdkSslContext:<init>(Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator)),
		JdkSslContext:<init>(Iterable-CipherSuiteFilter-JdkApplicationProtocolNegotiator) to listOf(SslContext:<init>(), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), CipherSuiteFilter:filterCipherSuites(Iterable-List-Set)),
		JdkSslContext:sessionContext() to listOf(JdkSslContext:isServer(), JdkSslContext:context(), SSLContext:getServerSessionContext(), JdkSslContext:context(), SSLContext:getClientSessionContext()),
		JdkSslContext:sessionCacheSize() to listOf(JdkSslContext:sessionContext(), SSLSessionContext:getSessionCacheSize()),
		JdkSslContext:sessionTimeout() to listOf(JdkSslContext:sessionContext(), SSLSessionContext:getSessionTimeout()),
		JdkSslContext:newEngine(ByteBufAllocator) to listOf(JdkSslContext:context(), SSLContext:createSSLEngine(), SSLEngine:setEnabledCipherSuites(String[]), SSLEngine:setEnabledProtocols(String[]), JdkSslContext:isClient(), SSLEngine:setUseClientMode(boolean), JdkSslContext:wrapEngine(SSLEngine)),
		JdkSslContext:newEngine(ByteBufAllocator-String-int) to listOf(JdkSslContext:context(), SSLContext:createSSLEngine(String-int), SSLEngine:setEnabledCipherSuites(String[]), SSLEngine:setEnabledProtocols(String[]), JdkSslContext:isClient(), SSLEngine:setUseClientMode(boolean), JdkSslContext:wrapEngine(SSLEngine)),
		JdkSslContext:wrapEngine(SSLEngine) to listOf(JdkApplicationProtocolNegotiator:wrapperFactory(), JdkSslContext:isServer(), JdkApplicationProtocolNegotiator$SslEngineWrapperFactory:wrapSslEngine(SSLEngine-JdkApplicationProtocolNegotiator-boolean)),
		JdkSslContext:toNegotiator(ApplicationProtocolConfig-boolean) to listOf(ApplicationProtocolConfig:protocol(), ApplicationProtocolConfig$Protocol:ordinal(), ApplicationProtocolConfig:selectorFailureBehavior(), ApplicationProtocolConfig$SelectorFailureBehavior:ordinal(), ApplicationProtocolConfig:supportedProtocols(), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:supportedProtocols(), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:selectorFailureBehavior(), ApplicationProtocolConfig:selectedListenerFailureBehavior(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:ordinal(), ApplicationProtocolConfig:supportedProtocols(), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:supportedProtocols(), JdkAlpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:selectedListenerFailureBehavior(), ApplicationProtocolConfig:selectedListenerFailureBehavior(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:ordinal(), ApplicationProtocolConfig:supportedProtocols(), JdkNpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:supportedProtocols(), JdkNpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:selectedListenerFailureBehavior(), ApplicationProtocolConfig:selectorFailureBehavior(), ApplicationProtocolConfig$SelectorFailureBehavior:ordinal(), ApplicationProtocolConfig:supportedProtocols(), JdkNpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:supportedProtocols(), JdkNpnApplicationProtocolNegotiator:<init>(boolean-Iterable), ApplicationProtocolConfig:selectorFailureBehavior(), ApplicationProtocolConfig:protocol()),
		JdkSslContext:buildKeyManagerFactory(File-File-String-KeyManagerFactory) to listOf(JdkSslContext:buildKeyManagerFactory(File-String-File-String-KeyManagerFactory)),
		JdkSslContext:buildKeyManagerFactory(File-String-File-String-KeyManagerFactory) to listOf(PemReader:readPrivateKey(File), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), ByteBuf:release(), JdkSslContext:generateKeySpec(char[]-byte[]), PemReader:readCertificates(File), ByteBufInputStream:<init>(ByteBuf), ByteBuf:release(), ByteBuf:release(), KeyManagerFactory:getInstance(String), KeyManagerFactory:init(KeyStore-char[])),
		JdkSslContext:buildTrustManagerFactory(File-TrustManagerFactory) to listOf(PemReader:readCertificates(File), ByteBufInputStream:<init>(ByteBuf), X500Principal:getName(String), ByteBuf:release(), ByteBuf:release(), TrustManagerFactory:getDefaultAlgorithm(), TrustManagerFactory:getInstance(String), TrustManagerFactory:init(KeyStore)),
		JdkSslContext:applicationProtocolNegotiator() to listOf(JdkSslContext:applicationProtocolNegotiator()),
		JdkSslContext:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SSLContext:getInstance(String), SSLContext:init(KeyManager[]-TrustManager[]-SecureRandom), SSLContext:createSSLEngine(), SSLEngine:getSupportedProtocols(), JdkSslContext:addIfSupported(Set-List-String[]), SSLEngine:getEnabledProtocols(), SSLEngine:getSupportedCipherSuites(), JdkSslContext:addIfSupported(Set-List-String[]), SSLEngine:getEnabledCipherSuites(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object)),
		SslHandler$4:run() to listOf(Promise:isDone(), SslHandler:access$400(), SslHandler:access$500(SslHandler-Throwable)),
		JdkSslSession:getProtocol() to listOf(JdkSslSession:unwrap(), SSLSession:getProtocol()),
		JdkSslSession:unwrap() to listOf(SSLEngine:getSession()),
		JdkSslSession:getId() to listOf(JdkSslSession:unwrap(), SSLSession:getId()),
		JdkSslSession:getSessionContext() to listOf(JdkSslSession:unwrap(), SSLSession:getSessionContext()),
		JdkSslSession:getCreationTime() to listOf(JdkSslSession:unwrap(), SSLSession:getCreationTime()),
		JdkSslSession:getLastAccessedTime() to listOf(JdkSslSession:unwrap(), SSLSession:getLastAccessedTime()),
		JdkSslSession:invalidate() to listOf(JdkSslSession:unwrap(), SSLSession:invalidate()),
		JdkSslSession:isValid() to listOf(JdkSslSession:unwrap(), SSLSession:isValid()),
		JdkSslSession:putValue(String-Object) to listOf(JdkSslSession:unwrap(), SSLSession:putValue(String-Object)),
		JdkSslSession:getValue(String) to listOf(JdkSslSession:unwrap(), SSLSession:getValue(String)),
		JdkSslSession:removeValue(String) to listOf(JdkSslSession:unwrap(), SSLSession:removeValue(String)),
		JdkSslSession:getValueNames() to listOf(JdkSslSession:unwrap(), SSLSession:getValueNames()),
		JdkSslSession:getPeerCertificates() to listOf(JdkSslSession:unwrap(), SSLSession:getPeerCertificates()),
		JdkSslSession:getLocalCertificates() to listOf(JdkSslSession:unwrap(), SSLSession:getLocalCertificates()),
		JdkSslSession:getPeerCertificateChain() to listOf(JdkSslSession:unwrap(), SSLSession:getPeerCertificateChain()),
		JdkSslSession:getPeerPrincipal() to listOf(JdkSslSession:unwrap(), SSLSession:getPeerPrincipal()),
		JdkSslSession:getLocalPrincipal() to listOf(JdkSslSession:unwrap(), SSLSession:getLocalPrincipal()),
		JdkSslSession:getCipherSuite() to listOf(JdkSslSession:unwrap(), SSLSession:getCipherSuite()),
		JdkSslSession:getPeerHost() to listOf(JdkSslSession:unwrap(), SSLSession:getPeerHost()),
		JdkSslSession:getPeerPort() to listOf(JdkSslSession:unwrap(), SSLSession:getPeerPort()),
		JdkSslSession:getPacketBufferSize() to listOf(JdkSslSession:unwrap(), SSLSession:getPacketBufferSize()),
		JdkSslSession:getApplicationBufferSize() to listOf(JdkSslSession:unwrap(), SSLSession:getApplicationBufferSize()),
		ApplicationProtocolUtil:toList(Iterable) to listOf(ApplicationProtocolUtil:toList(int-Iterable)),
		ApplicationProtocolUtil:toList(String[]) to listOf(ApplicationProtocolUtil:toList(int-String[])),
		JdkAlpnSslEngine:isAvailable() to listOf(JdkAlpnSslEngine:updateAvailability()),
		JdkAlpnSslEngine:<init>(SSLEngine-JdkApplicationProtocolNegotiator-boolean) to listOf(JdkSslEngine:<init>(SSLEngine), ObjectUtil:checkNotNull(Object-String), JdkApplicationProtocolNegotiator:protocolSelectorFactory(), JdkApplicationProtocolNegotiator:protocols(), JdkApplicationProtocolNegotiator$ProtocolSelectorFactory:newSelector(SSLEngine-Set), ObjectUtil:checkNotNull(Object-String), JdkAlpnSslEngine$1:<init>(JdkAlpnSslEngine-JdkApplicationProtocolNegotiator$ProtocolSelector), ALPN:put(SSLEngine-ALPN$Provider), JdkApplicationProtocolNegotiator:protocolListenerFactory(), JdkApplicationProtocolNegotiator:protocols(), JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory:newListener(SSLEngine-List), ObjectUtil:checkNotNull(Object-String), JdkAlpnSslEngine$2:<init>(JdkAlpnSslEngine-JdkApplicationProtocolNegotiator-JdkApplicationProtocolNegotiator$ProtocolSelectionListener), ALPN:put(SSLEngine-ALPN$Provider)),
		JdkAlpnSslEngine:closeInbound() to listOf(JdkAlpnSslEngine:getWrappedEngine(), ALPN:remove(SSLEngine), JdkSslEngine:closeInbound()),
		JdkAlpnSslEngine:closeOutbound() to listOf(JdkAlpnSslEngine:getWrappedEngine(), ALPN:remove(SSLEngine), JdkSslEngine:closeOutbound()),
		OpenSslSessionContext$EmptyEnumeration:nextElement() to listOf(OpenSslSessionContext$EmptyEnumeration:nextElement()),
		OpenSslSessionContext$EmptyEnumeration:<init>(OpenSslSessionContext$1) to listOf(OpenSslSessionContext$EmptyEnumeration:<init>()),
		JdkBaseApplicationProtocolNegotiator$3:newListener(SSLEngine-List) to listOf(JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener:<init>(JdkSslEngine-List)),
		SslHandler$2:<init>(SslHandler-Promise) to listOf(OneTimeTask:<init>()),
		SslHandler$2:run() to listOf(SslHandler:access$300(SslHandler-Promise)),
		JdkNpnSslEngine$1:unsupported() to listOf(JdkApplicationProtocolNegotiator$ProtocolSelectionListener:unsupported()),
		JdkNpnSslEngine$1:protocols() to listOf(JdkApplicationProtocolNegotiator:protocols()),
		JdkNpnSslEngine$1:protocolSelected(String) to listOf(JdkApplicationProtocolNegotiator$ProtocolSelectionListener:selected(String), PlatformDependent:throwException(Throwable)),
		JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener:<init>(JdkSslEngine-List) to listOf(JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener:<init>(JdkSslEngine-List)),
		JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener:noSelectedMatchFound(String) to listOf(SSLHandshakeException:<init>(String)),
		OpenSslContext:<init>(Iterable-ApplicationProtocolConfig-long-long-int) to listOf(OpenSslContext:toNegotiator(ApplicationProtocolConfig-boolean), OpenSslContext:<init>(Iterable-OpenSslApplicationProtocolNegotiator-long-long-int)),
		OpenSslContext:<init>(Iterable-OpenSslApplicationProtocolNegotiator-long-long-int) to listOf(SslContext:<init>(), OpenSsl:ensureAvailability(), CipherSuiteConverter:toOpenSsl(String), ObjectUtil:checkNotNull(Object-String), Pool:create(long), SSLContext:make(long-int-int), SSLException:<init>(String-Throwable), SSLContext:setOptions(long-int), SSLContext:setOptions(long-int), SSLContext:setOptions(long-int), SSLContext:setOptions(long-int), SSLContext:setOptions(long-int), SSLContext:setOptions(long-int), SSLContext:setOptions(long-int), CipherSuiteConverter:toOpenSsl(Iterable), SSLContext:setCipherSuite(long-String), SSLException:<init>(String-Throwable), OpenSslApplicationProtocolNegotiator:protocols(), SSLContext:setNextProtos(long-String), SSLContext:setSessionCacheSize(long-long), SSLContext:setSessionCacheSize(long-long), SSLContext:setSessionCacheSize(long-long), SSLContext:setSessionCacheTimeout(long-long), SSLContext:setSessionCacheTimeout(long-long), SSLContext:setSessionCacheTimeout(long-long), OpenSslContext:destroyPools(), OpenSslContext:destroyPools()),
		OpenSslContext:newEngine(ByteBufAllocator) to listOf(OpenSslContext:applicationProtocolNegotiator(), ApplicationProtocolNegotiator:protocols(), OpenSslContext:isClient(), OpenSslContext:sessionContext(), OpenSslEngine:<init>(long-ByteBufAllocator-String-boolean-OpenSslSessionContext), OpenSslContext:isClient(), OpenSslContext:sessionContext(), OpenSslEngine:<init>(long-ByteBufAllocator-String-boolean-OpenSslSessionContext)),
		OpenSslContext:stats() to listOf(OpenSslContext:sessionContext(), OpenSslSessionContext:stats()),
		OpenSslContext:finalize() to listOf(SSLContext:free(long), OpenSslContext:destroyPools()),
		OpenSslContext:setTicketKeys(byte[]) to listOf(OpenSslContext:sessionContext(), OpenSslSessionContext:setTicketKeys(byte[])),
		OpenSslContext:destroyPools() to listOf(Pool:destroy(long)),
		OpenSslContext:certificates(byte[][]) to listOf(OpenSslX509Certificate:<init>(byte[])),
		OpenSslContext:toNegotiator(ApplicationProtocolConfig-boolean) to listOf(ApplicationProtocolConfig:protocol(), ApplicationProtocolConfig$Protocol:ordinal(), ApplicationProtocolConfig:selectedListenerFailureBehavior(), ApplicationProtocolConfig$SelectedListenerFailureBehavior:ordinal(), ApplicationProtocolConfig:supportedProtocols(), OpenSslNpnApplicationProtocolNegotiator:<init>(Iterable), ApplicationProtocolConfig:selectedListenerFailureBehavior(), ApplicationProtocolConfig:protocol()),
		OpenSslContext:sessionContext() to listOf(OpenSslContext:sessionContext()),
		OpenSslContext:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		JdkSslEngine:<init>(SSLEngine) to listOf(SSLEngine:<init>(), JdkSslSession:<init>(SSLEngine)),
		JdkSslEngine:closeInbound() to listOf(SSLEngine:closeInbound()),
		JdkSslEngine:closeOutbound() to listOf(SSLEngine:closeOutbound()),
		JdkSslEngine:getPeerHost() to listOf(SSLEngine:getPeerHost()),
		JdkSslEngine:getPeerPort() to listOf(SSLEngine:getPeerPort()),
		JdkSslEngine:wrap(ByteBuffer-ByteBuffer) to listOf(SSLEngine:wrap(ByteBuffer-ByteBuffer)),
		JdkSslEngine:wrap(ByteBuffer[]-ByteBuffer) to listOf(SSLEngine:wrap(ByteBuffer[]-ByteBuffer)),
		JdkSslEngine:wrap(ByteBuffer[]-int-int-ByteBuffer) to listOf(SSLEngine:wrap(ByteBuffer[]-int-int-ByteBuffer)),
		JdkSslEngine:unwrap(ByteBuffer-ByteBuffer) to listOf(SSLEngine:unwrap(ByteBuffer-ByteBuffer)),
		JdkSslEngine:unwrap(ByteBuffer-ByteBuffer[]) to listOf(SSLEngine:unwrap(ByteBuffer-ByteBuffer[])),
		JdkSslEngine:unwrap(ByteBuffer-ByteBuffer[]-int-int) to listOf(SSLEngine:unwrap(ByteBuffer-ByteBuffer[]-int-int)),
		JdkSslEngine:getDelegatedTask() to listOf(SSLEngine:getDelegatedTask()),
		JdkSslEngine:isInboundDone() to listOf(SSLEngine:isInboundDone()),
		JdkSslEngine:isOutboundDone() to listOf(SSLEngine:isOutboundDone()),
		JdkSslEngine:getSupportedCipherSuites() to listOf(SSLEngine:getSupportedCipherSuites()),
		JdkSslEngine:getEnabledCipherSuites() to listOf(SSLEngine:getEnabledCipherSuites()),
		JdkSslEngine:setEnabledCipherSuites(String[]) to listOf(SSLEngine:setEnabledCipherSuites(String[])),
		JdkSslEngine:getSupportedProtocols() to listOf(SSLEngine:getSupportedProtocols()),
		JdkSslEngine:getEnabledProtocols() to listOf(SSLEngine:getEnabledProtocols()),
		JdkSslEngine:setEnabledProtocols(String[]) to listOf(SSLEngine:setEnabledProtocols(String[])),
		JdkSslEngine:getHandshakeSession() to listOf(SSLEngine:getHandshakeSession()),
		JdkSslEngine:beginHandshake() to listOf(SSLEngine:beginHandshake()),
		JdkSslEngine:getHandshakeStatus() to listOf(SSLEngine:getHandshakeStatus()),
		JdkSslEngine:setUseClientMode(boolean) to listOf(SSLEngine:setUseClientMode(boolean)),
		JdkSslEngine:getUseClientMode() to listOf(SSLEngine:getUseClientMode()),
		JdkSslEngine:setNeedClientAuth(boolean) to listOf(SSLEngine:setNeedClientAuth(boolean)),
		JdkSslEngine:getNeedClientAuth() to listOf(SSLEngine:getNeedClientAuth()),
		JdkSslEngine:setWantClientAuth(boolean) to listOf(SSLEngine:setWantClientAuth(boolean)),
		JdkSslEngine:getWantClientAuth() to listOf(SSLEngine:getWantClientAuth()),
		JdkSslEngine:setEnableSessionCreation(boolean) to listOf(SSLEngine:setEnableSessionCreation(boolean)),
		JdkSslEngine:getEnableSessionCreation() to listOf(SSLEngine:getEnableSessionCreation()),
		JdkSslEngine:getSSLParameters() to listOf(SSLEngine:getSSLParameters()),
		JdkSslEngine:setSSLParameters(SSLParameters) to listOf(SSLEngine:setSSLParameters(SSLParameters)),
		JdkSslEngine:getSession() to listOf(JdkSslEngine:getSession()),
		JdkNpnApplicationProtocolNegotiator$1:<init>() to listOf(JdkNpnSslEngine:isAvailable()),
		JdkNpnApplicationProtocolNegotiator$1:wrapSslEngine(SSLEngine-JdkApplicationProtocolNegotiator-boolean) to listOf(JdkNpnSslEngine:<init>(SSLEngine-JdkApplicationProtocolNegotiator-boolean)),
		JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:unsupported() to listOf(JdkSslEngine:getSession(), JdkSslSession:setApplicationProtocol(String)),
		JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:select(List) to listOf(JdkSslEngine:getSession(), JdkSslSession:setApplicationProtocol(String), JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:noSelectMatchFound()),
		JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:noSelectMatchFound() to listOf(JdkSslEngine:getSession(), JdkSslSession:setApplicationProtocol(String)),
		SniHandler:<init>(DomainNameMapping) to listOf(ByteToMessageDecoder:<init>()),
		SniHandler:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), SniHandler:sniHostNameFromHandshakeInfo(ByteBuf), DomainNameMapping:map(String), ChannelHandlerContext:alloc(), SslContext:newHandler(ByteBufAllocator), ChannelHandlerContext:pipeline(), ChannelPipeline:replace(ChannelHandler-String-ChannelHandler)),
		SniHandler:sniHostNameFromHandshakeInfo(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:readableBytes(), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:toString(int-int-Charset), InternalLogger:isDebugEnabled(), ByteBufUtil:hexDump(ByteBuf), InternalLogger:debug(String-Throwable)),
		SniHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		SslHandler$7:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		SslHandler$7:operationComplete(Future) to listOf(SslHandler$7:operationComplete(ChannelFuture)),
		OpenSslEngine$1:getId() to listOf(OpenSslEngine:access$000(OpenSslEngine), SSL:getSessionId(long)),
		OpenSslEngine$1:getSessionContext() to listOf(OpenSslEngine:access$100(OpenSslEngine)),
		OpenSslEngine$1:getCreationTime() to listOf(OpenSslEngine:access$000(OpenSslEngine), SSL:getTime(long)),
		OpenSslEngine$1:getLastAccessedTime() to listOf(OpenSslEngine$1:getCreationTime()),
		OpenSslEngine$1:putValue(String-Object) to listOf(SSLSessionBindingEvent:<init>(SSLSession-String), SSLSessionBindingListener:valueBound(SSLSessionBindingEvent), OpenSslEngine$1:notifyUnbound(Object-String)),
		OpenSslEngine$1:removeValue(String) to listOf(OpenSslEngine$1:notifyUnbound(Object-String)),
		OpenSslEngine$1:notifyUnbound(Object-String) to listOf(SSLSessionBindingEvent:<init>(SSLSession-String), SSLSessionBindingListener:valueUnbound(SSLSessionBindingEvent)),
		OpenSslEngine$1:getPeerCertificates() to listOf(OpenSslEngine:access$200(OpenSslEngine), OpenSslEngine:access$000(OpenSslEngine), SSL:isInInit(long), SSLPeerUnverifiedException:<init>(String), OpenSslEngine:access$300(OpenSslEngine), OpenSslEngine:access$202(OpenSslEngine-Certificate[])),
		OpenSslEngine$1:getLocalCertificates() to listOf(OpenSslEngine:access$400()),
		OpenSslEngine$1:getPeerCertificateChain() to listOf(OpenSslEngine:access$000(OpenSslEngine), SSL:isInInit(long), SSLPeerUnverifiedException:<init>(String), OpenSslEngine:access$000(OpenSslEngine), SSL:getPeerCertChain(long), SSLPeerUnverifiedException:<init>(String), X509Certificate:getInstance(byte[])),
		OpenSslEngine$1:getPeerPrincipal() to listOf(OpenSslEngine$1:getPeerCertificates(), OpenSslEngine$1:principal(Certificate[])),
		OpenSslEngine$1:getLocalPrincipal() to listOf(OpenSslEngine$1:getLocalCertificates(), OpenSslEngine$1:principal(Certificate[])),
		OpenSslEngine$1:getCipherSuite() to listOf(OpenSslEngine:access$500(OpenSslEngine), OpenSslEngine:access$600(OpenSslEngine), OpenSslEngine:access$000(OpenSslEngine), SSL:getCipherForSSL(long), OpenSslEngine:access$700(OpenSslEngine-String), OpenSslEngine:access$602(OpenSslEngine-String), OpenSslEngine:access$600(OpenSslEngine)),
		OpenSslEngine$1:getProtocol() to listOf(OpenSslEngine:access$800(OpenSslEngine), OpenSslEngine:access$000(OpenSslEngine), SSL:getNextProtoNegotiated(long), OpenSslEngine:access$900(OpenSslEngine), OpenSslEngine:access$802(OpenSslEngine-String), OpenSslEngine:access$802(OpenSslEngine-String), OpenSslEngine:access$000(OpenSslEngine), SSL:getVersion(long)),
		ApplicationProtocolConfig$Protocol:values() to listOf(ApplicationProtocolConfig$Protocol[]:clone()),
		ApplicationProtocolConfig$Protocol:<clinit>() to listOf(ApplicationProtocolConfig$Protocol:<init>(String-int), ApplicationProtocolConfig$Protocol:<init>(String-int), ApplicationProtocolConfig$Protocol:<init>(String-int), ApplicationProtocolConfig$Protocol:<init>(String-int)),
		OpenSslClientContext$OpenSslClientSessionContext:<init>(long) to listOf(OpenSslSessionContext:<init>(long)),
		OpenSslClientContext$OpenSslClientSessionContext:<init>(long-OpenSslClientContext$1) to listOf(OpenSslClientContext$OpenSslClientSessionContext:<init>(long)),
		OpenSslSessionContext:<init>(long) to listOf(OpenSslSessionStats:<init>(long)),
		OpenSslSessionContext:setTicketKeys(byte[]) to listOf(SSLContext:setSessionTicketKeys(long-byte[])),
		OpenSslSessionContext:<clinit>() to listOf(OpenSslSessionContext$EmptyEnumeration:<init>(OpenSslSessionContext$1)),
		InsecureTrustManagerFactory$1:checkClientTrusted(X509Certificate[]-String) to listOf(InsecureTrustManagerFactory:access$000(), InternalLogger:debug(String)),
		InsecureTrustManagerFactory$1:checkServerTrusted(X509Certificate[]-String) to listOf(InsecureTrustManagerFactory:access$000(), InternalLogger:debug(String)),
		BouncyCastleSelfSignedCertGenerator:generate(String-KeyPair-SecureRandom) to listOf(X500Name:<init>(String), JcaX509v3CertificateBuilder:<init>(X500Name-BigInteger-Date-Date-X500Name-PublicKey), JcaContentSignerBuilder:<init>(String), JcaContentSignerBuilder:build(PrivateKey), X509v3CertificateBuilder:build(ContentSigner), JcaX509CertificateConverter:<init>(), JcaX509CertificateConverter:setProvider(Provider), JcaX509CertificateConverter:getCertificate(X509CertificateHolder), SelfSignedCertificate:newSelfSignedCertificate(String-PrivateKey-X509Certificate)),
		BouncyCastleSelfSignedCertGenerator:<clinit>() to listOf(BouncyCastleProvider:<init>()),
		SimpleTrustManagerFactory:<init>() to listOf(SimpleTrustManagerFactory:<init>(String)),
		SimpleTrustManagerFactory:<init>(String) to listOf(FastThreadLocal:get(), TrustManagerFactory:<init>(TrustManagerFactorySpi-Provider-String), FastThreadLocal:get(), SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:init(SimpleTrustManagerFactory), FastThreadLocal:remove()),
		SimpleTrustManagerFactory:<clinit>() to listOf(SimpleTrustManagerFactory$1:<init>(String-double-String), SimpleTrustManagerFactory$2:<init>()),
		SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:<init>() to listOf(TrustManagerFactorySpi:<init>()),
		SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:engineInit(KeyStore) to listOf(SimpleTrustManagerFactory:engineInit(KeyStore)),
		SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:engineInit(ManagerFactoryParameters) to listOf(SimpleTrustManagerFactory:engineInit(ManagerFactoryParameters)),
		SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:engineGetTrustManagers() to listOf(SimpleTrustManagerFactory:engineGetTrustManagers()),
		FingerprintTrustManagerFactory:<init>(Iterable) to listOf(FingerprintTrustManagerFactory:toFingerprintArray(Iterable), FingerprintTrustManagerFactory:<init>(byte[][])),
		FingerprintTrustManagerFactory:<init>(String[]) to listOf(FingerprintTrustManagerFactory:toFingerprintArray(Iterable), FingerprintTrustManagerFactory:<init>(byte[][])),
		FingerprintTrustManagerFactory:<init>(byte[][]) to listOf(SimpleTrustManagerFactory:<init>(), FingerprintTrustManagerFactory$2:<init>(FingerprintTrustManagerFactory), Unpooled:wrappedBuffer(byte[]), ByteBufUtil:hexDump(ByteBuf), byte[]:clone()),
		FingerprintTrustManagerFactory:<clinit>() to listOf(FingerprintTrustManagerFactory$1:<init>()),
		InsecureTrustManagerFactory:<init>() to listOf(SimpleTrustManagerFactory:<init>()),
		InsecureTrustManagerFactory:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), InsecureTrustManagerFactory:<init>(), InsecureTrustManagerFactory$1:<init>()),
		SelfSignedCertificate:<init>() to listOf(SelfSignedCertificate:<init>(String)),
		SelfSignedCertificate:<init>(String) to listOf(ThreadLocalInsecureRandom:current(), SelfSignedCertificate:<init>(String-SecureRandom-int)),
		SelfSignedCertificate:<init>(String-SecureRandom-int) to listOf(OpenJdkSelfSignedCertGenerator:generate(String-KeyPair-SecureRandom), InternalLogger:debug(String-Throwable), BouncyCastleSelfSignedCertGenerator:generate(String-KeyPair-SecureRandom), InternalLogger:debug(String-Throwable)),
		SelfSignedCertificate:delete() to listOf(SelfSignedCertificate:safeDelete(File), SelfSignedCertificate:safeDelete(File)),
		SelfSignedCertificate:newSelfSignedCertificate(String-PrivateKey-X509Certificate) to listOf(Unpooled:wrappedBuffer(byte[]), Base64:encode(ByteBuf-boolean), ByteBuf:toString(Charset), SelfSignedCertificate:safeClose(File-OutputStream), SelfSignedCertificate:safeDelete(File), SelfSignedCertificate:safeClose(File-OutputStream), SelfSignedCertificate:safeDelete(File), Unpooled:wrappedBuffer(byte[]), Base64:encode(ByteBuf-boolean), ByteBuf:toString(Charset), SelfSignedCertificate:safeClose(File-OutputStream), SelfSignedCertificate:safeDelete(File), SelfSignedCertificate:safeDelete(File), SelfSignedCertificate:safeClose(File-OutputStream), SelfSignedCertificate:safeDelete(File), SelfSignedCertificate:safeDelete(File)),
		SelfSignedCertificate:safeDelete(File) to listOf(InternalLogger:warn(String)),
		SelfSignedCertificate:safeClose(File-OutputStream) to listOf(InternalLogger:warn(String-Throwable)),
		SelfSignedCertificate:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		FingerprintTrustManagerFactory$1:<init>() to listOf(FastThreadLocal:<init>()),
		FingerprintTrustManagerFactory$1:initialValue() to listOf(FingerprintTrustManagerFactory$1:initialValue()),
		FingerprintTrustManagerFactory$2:checkClientTrusted(X509Certificate[]-String) to listOf(FingerprintTrustManagerFactory$2:checkTrusted(String-X509Certificate[])),
		FingerprintTrustManagerFactory$2:checkServerTrusted(X509Certificate[]-String) to listOf(FingerprintTrustManagerFactory$2:checkTrusted(String-X509Certificate[])),
		FingerprintTrustManagerFactory$2:checkTrusted(String-X509Certificate[]) to listOf(FingerprintTrustManagerFactory$2:fingerprint(X509Certificate), FingerprintTrustManagerFactory:access$000(FingerprintTrustManagerFactory)),
		FingerprintTrustManagerFactory$2:fingerprint(X509Certificate) to listOf(FingerprintTrustManagerFactory:access$100(), FastThreadLocal:get()),
		SimpleTrustManagerFactory$2:<init>() to listOf(FastThreadLocal:<init>()),
		SimpleTrustManagerFactory$2:initialValue() to listOf(SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:<init>(), SimpleTrustManagerFactory$2:initialValue()),
		OpenJdkSelfSignedCertGenerator:generate(String-KeyPair-SecureRandom) to listOf(X509CertInfo:<init>(), X500Name:<init>(String), CertificateVersion:<init>(int), X509CertInfo:set(String-Object), CertificateSerialNumber:<init>(BigInteger), X509CertInfo:set(String-Object), CertificateSubjectName:<init>(X500Name), X509CertInfo:set(String-Object), X509CertInfo:set(String-Object), CertificateIssuerName:<init>(X500Name), X509CertInfo:set(String-Object), X509CertInfo:set(String-Object), CertificateValidity:<init>(Date-Date), X509CertInfo:set(String-Object), CertificateX509Key:<init>(PublicKey), X509CertInfo:set(String-Object), AlgorithmId:<init>(ObjectIdentifier), CertificateAlgorithmId:<init>(AlgorithmId), X509CertInfo:set(String-Object), X509CertImpl:<init>(X509CertInfo), X509CertImpl:sign(PrivateKey-String), X509CertImpl:get(String), X509CertInfo:set(String-Object), X509CertImpl:<init>(X509CertInfo), X509CertImpl:sign(PrivateKey-String), X509CertImpl:verify(PublicKey), SelfSignedCertificate:newSelfSignedCertificate(String-PrivateKey-X509Certificate)),
		ThreadLocalInsecureRandom:nextBytes(byte[]) to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:generateSeed(int) to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:nextInt() to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:nextInt(int) to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:nextBoolean() to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:nextLong() to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:nextFloat() to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:nextDouble() to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:nextGaussian() to listOf(ThreadLocalInsecureRandom:random()),
		ThreadLocalInsecureRandom:random() to listOf(ThreadLocalRandom:current()),
		ThreadLocalInsecureRandom:<clinit>() to listOf(ThreadLocalInsecureRandom:<init>()),
		SupportedCipherSuiteFilter:<clinit>() to listOf(SupportedCipherSuiteFilter:<init>()),
		ApplicationProtocolConfig$SelectedListenerFailureBehavior:values() to listOf(ApplicationProtocolConfig$SelectedListenerFailureBehavior[]:clone()),
		ApplicationProtocolConfig$SelectedListenerFailureBehavior:<clinit>() to listOf(ApplicationProtocolConfig$SelectedListenerFailureBehavior:<init>(String-int), ApplicationProtocolConfig$SelectedListenerFailureBehavior:<init>(String-int), ApplicationProtocolConfig$SelectedListenerFailureBehavior:<init>(String-int)),
		JdkNpnSslEngine$2:unsupported() to listOf(JdkApplicationProtocolNegotiator$ProtocolSelector:unsupported()),
		JdkNpnSslEngine$2:selectProtocol(List) to listOf(JdkApplicationProtocolNegotiator$ProtocolSelector:select(List), PlatformDependent:throwException(Throwable)),
		OpenSslServerSessionContext:<init>(long) to listOf(OpenSslSessionContext:<init>(long)),
		OpenSslServerSessionContext:setSessionTimeout(int) to listOf(SSLContext:setSessionCacheTimeout(long-long)),
		OpenSslServerSessionContext:getSessionTimeout() to listOf(SSLContext:getSessionCacheTimeout(long)),
		OpenSslServerSessionContext:setSessionCacheSize(int) to listOf(SSLContext:setSessionCacheSize(long-long)),
		OpenSslServerSessionContext:getSessionCacheSize() to listOf(SSLContext:getSessionCacheSize(long)),
		OpenSslServerSessionContext:setSessionCacheEnabled(boolean) to listOf(SSLContext:setSessionCacheMode(long-long)),
		OpenSslServerSessionContext:isSessionCacheEnabled() to listOf(SSLContext:getSessionCacheMode(long)),
		OpenSslServerSessionContext:setSessionIdContext(byte[]) to listOf(SSLContext:setSessionIdContext(long-byte[])),
		JdkAlpnSslEngine$2:protocols() to listOf(JdkApplicationProtocolNegotiator:protocols()),
		JdkAlpnSslEngine$2:selected(String) to listOf(JdkApplicationProtocolNegotiator$ProtocolSelectionListener:selected(String), PlatformDependent:throwException(Throwable)),
		JdkAlpnSslEngine$2:unsupported() to listOf(JdkApplicationProtocolNegotiator$ProtocolSelectionListener:unsupported()),
		JdkBaseApplicationProtocolNegotiator$1:newSelector(SSLEngine-Set) to listOf(JdkBaseApplicationProtocolNegotiator$FailProtocolSelector:<init>(JdkSslEngine-Set)),
		CipherSuiteConverter:toOpenSsl(Iterable) to listOf(CipherSuiteConverter:toOpenSsl(String)),
		CipherSuiteConverter:toOpenSsl(String) to listOf(CipherSuiteConverter:cacheFromJava(String)),
		CipherSuiteConverter:cacheFromJava(String) to listOf(CipherSuiteConverter:toOpenSslUncached(String), InternalLogger:debug(String-Object-Object)),
		CipherSuiteConverter:toOpenSslUncached(String) to listOf(CipherSuiteConverter:toOpenSslHandshakeAlgo(String), CipherSuiteConverter:toOpenSslBulkCipher(String), CipherSuiteConverter:toOpenSslHmacAlgo(String)),
		CipherSuiteConverter:toJava(String-String) to listOf(CipherSuiteConverter:cacheFromOpenSsl(String)),
		CipherSuiteConverter:cacheFromOpenSsl(String) to listOf(CipherSuiteConverter:toJavaUncached(String), InternalLogger:debug(String-Object-Object), InternalLogger:debug(String-Object-Object)),
		CipherSuiteConverter:toJavaUncached(String) to listOf(CipherSuiteConverter:toJavaHandshakeAlgo(String-boolean), CipherSuiteConverter:toJavaBulkCipher(String-boolean), CipherSuiteConverter:toJavaHmacAlgo(String)),
		CipherSuiteConverter:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), PlatformDependent:newConcurrentHashMap(), PlatformDependent:newConcurrentHashMap()),
		SslContext$1:<clinit>() to listOf(SslProvider:values(), SslProvider:ordinal(), SslProvider:ordinal()),
		OpenSslClientContext:<init>() to listOf(OpenSslClientContext:<init>(File-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long)),
		OpenSslClientContext:<init>(File) to listOf(OpenSslClientContext:<init>(File-TrustManagerFactory)),
		OpenSslClientContext:<init>(TrustManagerFactory) to listOf(OpenSslClientContext:<init>(File-TrustManagerFactory)),
		OpenSslClientContext:<init>(File-TrustManagerFactory) to listOf(OpenSslClientContext:<init>(File-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long)),
		OpenSslClientContext:<init>(File-TrustManagerFactory-Iterable-ApplicationProtocolConfig-long-long) to listOf(OpenSslContext:<init>(Iterable-ApplicationProtocolConfig-long-long-int), SSLContext:setCertificateChainFile(long-String-boolean), SSL:getLastErrorNumber(), OpenSsl:isError(long), SSL:getErrorString(long), SSLException:<init>(String), SSLContext:setVerify(long-int-int), TrustManagerFactory:getDefaultAlgorithm(), TrustManagerFactory:getInstance(String), OpenSslClientContext:initTrustManagerFactory(File-TrustManagerFactory), TrustManagerFactory:getTrustManagers(), OpenSslClientContext:chooseTrustManager(TrustManager[]), OpenSslClientContext$1:<init>(OpenSslClientContext-X509TrustManager), SSLContext:setCertVerifyCallback(long-CertificateVerifier), SSLException:<init>(String-Throwable), OpenSslClientContext$OpenSslClientSessionContext:<init>(long-OpenSslClientContext$1), OpenSslClientContext:destroyPools(), OpenSslClientContext:destroyPools()),
		OpenSslClientContext:initTrustManagerFactory(File-TrustManagerFactory) to listOf(PemReader:readCertificates(File), ByteBufInputStream:<init>(ByteBuf), X500Principal:getName(String), ByteBuf:release(), ByteBuf:release(), TrustManagerFactory:init(KeyStore)),
		OpenSslClientContext:sessionContext() to listOf(OpenSslClientContext:sessionContext()),
		OpenSslClientContext:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		OpenSslServerContext$1:verify(long-byte[][]-String) to listOf(OpenSslContext:certificates(byte[][]), X509TrustManager:checkClientTrusted(X509Certificate[]-String), OpenSslServerContext:access$000(), InternalLogger:debug(String-Throwable)),
		ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-Iterable) to listOf(ApplicationProtocolUtil:toList(Iterable), ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-List)),
		ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-String[]) to listOf(ApplicationProtocolUtil:toList(String[]), ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-List)),
		ApplicationProtocolConfig:<init>(ApplicationProtocolConfig$Protocol-ApplicationProtocolConfig$SelectorFailureBehavior-ApplicationProtocolConfig$SelectedListenerFailureBehavior-List) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String)),
		ApplicationProtocolConfig:<clinit>() to listOf(ApplicationProtocolConfig:<init>()),
		PemReader:readCertificates(File) to listOf(PemReader:readContent(File), Unpooled:copiedBuffer(CharSequence-Charset), Base64:decode(ByteBuf), ByteBuf:release()),
		PemReader:readPrivateKey(File) to listOf(PemReader:readContent(File), Unpooled:copiedBuffer(CharSequence-Charset), Base64:decode(ByteBuf), ByteBuf:release()),
		PemReader:readContent(File) to listOf(PemReader:safeClose(InputStream), PemReader:safeClose(OutputStream), PemReader:safeClose(InputStream), PemReader:safeClose(OutputStream)),
		PemReader:safeClose(InputStream) to listOf(InternalLogger:warn(String-Throwable)),
		PemReader:safeClose(OutputStream) to listOf(InternalLogger:warn(String-Throwable)),
		PemReader:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		JdkNpnApplicationProtocolNegotiator:<init>(Iterable) to listOf(JdkNpnApplicationProtocolNegotiator:<init>(boolean-Iterable)),
		JdkNpnApplicationProtocolNegotiator:<init>(String[]) to listOf(JdkNpnApplicationProtocolNegotiator:<init>(boolean-String[])),
		JdkNpnApplicationProtocolNegotiator:<init>(boolean-Iterable) to listOf(JdkNpnApplicationProtocolNegotiator:<init>(boolean-boolean-Iterable)),
		JdkNpnApplicationProtocolNegotiator:<init>(boolean-String[]) to listOf(JdkNpnApplicationProtocolNegotiator:<init>(boolean-boolean-String[])),
		JdkNpnApplicationProtocolNegotiator:<init>(boolean-boolean-Iterable) to listOf(JdkNpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable)),
		JdkNpnApplicationProtocolNegotiator:<init>(boolean-boolean-String[]) to listOf(JdkNpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[])),
		JdkNpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable) to listOf(JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-Iterable)),
		JdkNpnApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[]) to listOf(JdkBaseApplicationProtocolNegotiator:<init>(JdkApplicationProtocolNegotiator$SslEngineWrapperFactory-JdkApplicationProtocolNegotiator$ProtocolSelectorFactory-JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory-String[])),
		JdkNpnApplicationProtocolNegotiator:wrapperFactory() to listOf(JdkBaseApplicationProtocolNegotiator:wrapperFactory()),
		JdkNpnApplicationProtocolNegotiator:protocolListenerFactory() to listOf(JdkBaseApplicationProtocolNegotiator:protocolListenerFactory()),
		JdkNpnApplicationProtocolNegotiator:protocolSelectorFactory() to listOf(JdkBaseApplicationProtocolNegotiator:protocolSelectorFactory()),
		JdkNpnApplicationProtocolNegotiator:protocols() to listOf(JdkBaseApplicationProtocolNegotiator:protocols()),
		JdkNpnApplicationProtocolNegotiator:<clinit>() to listOf(JdkNpnApplicationProtocolNegotiator$1:<init>()),
		IdentityCipherSuiteFilter:<clinit>() to listOf(IdentityCipherSuiteFilter:<init>()),
		NotSslRecordException:<init>() to listOf(SSLException:<init>(String)),
		NotSslRecordException:<init>(String) to listOf(SSLException:<init>(String)),
		NotSslRecordException:<init>(Throwable) to listOf(SSLException:<init>(Throwable)),
		NotSslRecordException:<init>(String-Throwable) to listOf(SSLException:<init>(String-Throwable)),
		OpenSslDefaultApplicationProtocolNegotiator:<clinit>() to listOf(OpenSslDefaultApplicationProtocolNegotiator:<init>()),
		JdkAlpnSslEngine$1:select(List) to listOf(JdkApplicationProtocolNegotiator$ProtocolSelector:select(List), PlatformDependent:throwException(Throwable)),
		JdkAlpnSslEngine$1:unsupported() to listOf(JdkApplicationProtocolNegotiator$ProtocolSelector:unsupported()),
		OpenSsl:isCipherSuiteAvailable(String) to listOf(CipherSuiteConverter:toOpenSsl(String)),
		OpenSsl:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), InternalLogger:debug(String), NativeLibraryLoader:load(String-ClassLoader), Library:initialize(String), SSL:initialize(String), InternalLogger:debug(String-Throwable), Pool:create(long), SSLContext:make(long-int-int), SSLContext:setOptions(long-int), SSLContext:setCipherSuite(long-String), SSL:newSSL(long-boolean), SSL:getCiphers(long), SSL:freeSSL(long), SSL:freeSSL(long), SSLContext:free(long), SSLContext:free(long), Pool:destroy(long), InternalLogger:warn(String-Throwable), Pool:destroy(long), Pool:destroy(long)),
		WriteTimeoutHandler:<init>(int) to listOf(WriteTimeoutHandler:<init>(long-TimeUnit)),
		WriteTimeoutHandler:<init>(long-TimeUnit) to listOf(ChannelHandlerAdapter:<init>()),
		WriteTimeoutHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelPromise:unvoid(), WriteTimeoutHandler:scheduleTimeout(ChannelHandlerContext-ChannelPromise), ChannelHandlerContext:write(Object-ChannelPromise)),
		WriteTimeoutHandler:scheduleTimeout(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:executor(), WriteTimeoutHandler$1:<init>(WriteTimeoutHandler-ChannelPromise-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit), WriteTimeoutHandler$2:<init>(WriteTimeoutHandler-ScheduledFuture), ChannelPromise:addListener(GenericFutureListener)),
		WriteTimeoutHandler:writeTimedOut(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:close()),
		IdleStateHandler$1:operationComplete(ChannelFuture) to listOf(IdleStateHandler:access$102(IdleStateHandler-boolean), IdleStateHandler:access$002(IdleStateHandler-boolean)),
		IdleStateHandler$1:operationComplete(Future) to listOf(IdleStateHandler$1:operationComplete(ChannelFuture)),
		IdleStateEvent:<clinit>() to listOf(IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean)),
		IdleStateHandler$ReaderIdleTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), IdleStateHandler:access$200(IdleStateHandler), ChannelHandlerContext:executor(), IdleStateHandler:access$200(IdleStateHandler), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler:access$300(IdleStateHandler), IdleStateHandler:access$302(IdleStateHandler-boolean), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit)),
		IdleStateHandler:<init>(int-int-int) to listOf(IdleStateHandler:<init>(long-long-long-TimeUnit)),
		IdleStateHandler:<init>(long-long-long-TimeUnit) to listOf(ChannelHandlerAdapter:<init>()),
		IdleStateHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:channel(), Channel:isRegistered(), IdleStateHandler:initialize(ChannelHandlerContext)),
		IdleStateHandler:handlerRemoved(ChannelHandlerContext) to listOf(IdleStateHandler:destroy()),
		IdleStateHandler:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), IdleStateHandler:initialize(ChannelHandlerContext), ChannelHandlerAdapter:channelRegistered(ChannelHandlerContext)),
		IdleStateHandler:channelActive(ChannelHandlerContext) to listOf(IdleStateHandler:initialize(ChannelHandlerContext), ChannelHandlerAdapter:channelActive(ChannelHandlerContext)),
		IdleStateHandler:channelInactive(ChannelHandlerContext) to listOf(IdleStateHandler:destroy(), ChannelHandlerAdapter:channelInactive(ChannelHandlerContext)),
		IdleStateHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		IdleStateHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelPromise:unvoid(), IdleStateHandler$1:<init>(IdleStateHandler), ChannelPromise:addListener(GenericFutureListener), ChannelHandlerContext:write(Object-ChannelPromise)),
		IdleStateHandler:initialize(ChannelHandlerContext) to listOf(ChannelHandlerContext:executor(), IdleStateHandler$ReaderIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler$WriterIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler$AllIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit)),
		IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent) to listOf(ChannelHandlerContext:fireUserEventTriggered(Object)),
		IdleStateHandler$WriterIdleTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), IdleStateHandler:access$400(IdleStateHandler), ChannelHandlerContext:executor(), IdleStateHandler:access$400(IdleStateHandler), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler:access$000(IdleStateHandler), IdleStateHandler:access$002(IdleStateHandler-boolean), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit)),
		ReadTimeoutHandler$ReadTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), ReadTimeoutHandler:access$000(ReadTimeoutHandler), ReadTimeoutHandler:access$100(ReadTimeoutHandler), ChannelHandlerContext:executor(), ReadTimeoutHandler:access$000(ReadTimeoutHandler), EventExecutor:schedule(Runnable-long-TimeUnit), ReadTimeoutHandler:access$202(ReadTimeoutHandler-ScheduledFuture), ReadTimeoutHandler:readTimedOut(ChannelHandlerContext), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit), ReadTimeoutHandler:access$202(ReadTimeoutHandler-ScheduledFuture)),
		TimeoutException:<init>() to listOf(ChannelException:<init>()),
		ReadTimeoutHandler:<init>(int) to listOf(ReadTimeoutHandler:<init>(long-TimeUnit)),
		ReadTimeoutHandler:<init>(long-TimeUnit) to listOf(ChannelHandlerAdapter:<init>()),
		ReadTimeoutHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:channel(), Channel:isRegistered(), ReadTimeoutHandler:initialize(ChannelHandlerContext)),
		ReadTimeoutHandler:handlerRemoved(ChannelHandlerContext) to listOf(ReadTimeoutHandler:destroy()),
		ReadTimeoutHandler:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ReadTimeoutHandler:initialize(ChannelHandlerContext), ChannelHandlerAdapter:channelRegistered(ChannelHandlerContext)),
		ReadTimeoutHandler:channelActive(ChannelHandlerContext) to listOf(ReadTimeoutHandler:initialize(ChannelHandlerContext), ChannelHandlerAdapter:channelActive(ChannelHandlerContext)),
		ReadTimeoutHandler:channelInactive(ChannelHandlerContext) to listOf(ReadTimeoutHandler:destroy(), ChannelHandlerAdapter:channelInactive(ChannelHandlerContext)),
		ReadTimeoutHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		ReadTimeoutHandler:initialize(ChannelHandlerContext) to listOf(ChannelHandlerContext:executor(), ReadTimeoutHandler$ReadTimeoutTask:<init>(ReadTimeoutHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit)),
		ReadTimeoutHandler:readTimedOut(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:close()),
		WriteTimeoutException:<init>() to listOf(TimeoutException:<init>()),
		WriteTimeoutException:<clinit>() to listOf(WriteTimeoutException:<init>()),
		WriteTimeoutHandler$2:operationComplete(Future) to listOf(WriteTimeoutHandler$2:operationComplete(ChannelFuture)),
		WriteTimeoutHandler$1:run() to listOf(ChannelPromise:isDone(), WriteTimeoutHandler:writeTimedOut(ChannelHandlerContext), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		IdleStateHandler$AllIdleTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), IdleStateHandler:access$500(IdleStateHandler), ChannelHandlerContext:executor(), IdleStateHandler:access$500(IdleStateHandler), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler:access$100(IdleStateHandler), IdleStateHandler:access$102(IdleStateHandler-boolean), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit)),
		ReadTimeoutException:<init>() to listOf(TimeoutException:<init>()),
		ReadTimeoutException:<clinit>() to listOf(ReadTimeoutException:<init>()),
		IdleState:values() to listOf(IdleState[]:clone()),
		IdleState:<clinit>() to listOf(IdleState:<init>(String-int), IdleState:<init>(String-int), IdleState:<init>(String-int)),
		LogLevel:values() to listOf(LogLevel[]:clone()),
		LogLevel:<clinit>() to listOf(LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel)),
		LoggingHandler:<init>() to listOf(LoggingHandler:<init>(LogLevel)),
		LoggingHandler:<init>(LogLevel) to listOf(ChannelHandlerAdapter:<init>(), InternalLoggerFactory:getInstance(Class), LogLevel:toInternalLevel()),
		LoggingHandler:<init>(Class) to listOf(LoggingHandler:<init>(Class-LogLevel)),
		LoggingHandler:<init>(Class-LogLevel) to listOf(ChannelHandlerAdapter:<init>(), InternalLoggerFactory:getInstance(Class), LogLevel:toInternalLevel()),
		LoggingHandler:<init>(String) to listOf(LoggingHandler:<init>(String-LogLevel)),
		LoggingHandler:<init>(String-LogLevel) to listOf(ChannelHandlerAdapter:<init>(), InternalLoggerFactory:getInstance(String), LogLevel:toInternalLevel()),
		LoggingHandler:channelRegistered(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:fireChannelRegistered()),
		LoggingHandler:channelUnregistered(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:fireChannelUnregistered()),
		LoggingHandler:channelActive(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:fireChannelActive()),
		LoggingHandler:channelInactive(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:fireChannelInactive()),
		LoggingHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String-Object), InternalLogger:log(InternalLogLevel-String-Throwable), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		LoggingHandler:userEventTriggered(ChannelHandlerContext-Object) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String-Object), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:fireUserEventTriggered(Object)),
		LoggingHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String-Object), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		LoggingHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String-Object-Object), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		LoggingHandler:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:disconnect(ChannelPromise)),
		LoggingHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:close(ChannelPromise)),
		LoggingHandler:deregister(ChannelHandlerContext-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:deregister(ChannelPromise)),
		LoggingHandler:channelRead(ChannelHandlerContext-Object) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String-Object), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:fireChannelRead(Object)),
		LoggingHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String-Object), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:write(Object-ChannelPromise)),
		LoggingHandler:flush(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:flush()),
		LoggingHandler:format(ChannelHandlerContext-String) to listOf(ChannelHandlerContext:channel()),
		LoggingHandler:format(ChannelHandlerContext-String-Object) to listOf(LoggingHandler:formatByteBuf(ChannelHandlerContext-String-ByteBuf), LoggingHandler:formatByteBufHolder(ChannelHandlerContext-String-ByteBufHolder), LoggingHandler:formatSimple(ChannelHandlerContext-String-Object)),
		LoggingHandler:format(ChannelHandlerContext-String-Object-Object) to listOf(LoggingHandler:formatSimple(ChannelHandlerContext-String-Object), ChannelHandlerContext:channel()),
		LoggingHandler:formatByteBuf(ChannelHandlerContext-String-ByteBuf) to listOf(ChannelHandlerContext:channel(), ByteBuf:readableBytes(), LoggingHandler:appendHexDump(StringBuilder-ByteBuf)),
		LoggingHandler:formatByteBufHolder(ChannelHandlerContext-String-ByteBufHolder) to listOf(ChannelHandlerContext:channel(), ByteBufHolder:content(), ByteBuf:readableBytes(), LoggingHandler:appendHexDump(StringBuilder-ByteBuf)),
		LoggingHandler:appendHexDump(StringBuilder-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), LoggingHandler:appendHexDumpRowPrefix(StringBuilder-int-int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), LoggingHandler:appendHexDumpRowPrefix(StringBuilder-int-int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int)),
		LoggingHandler:formatSimple(ChannelHandlerContext-String-Object) to listOf(ChannelHandlerContext:channel()),
		LoggingHandler:<clinit>() to listOf(StringUtil:byteToHexStringPadded(int)),
		GlobalChannelTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise-GlobalChannelTrafficShapingHandler$1) to listOf(GlobalChannelTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise)),
		AbstractTrafficShapingHandler:<init>(long-long-long-long) to listOf(ChannelHandlerAdapter:<init>(), AbstractTrafficShapingHandler:userDefinedWritabilityIndex()),
		AbstractTrafficShapingHandler:<init>(long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long-long)),
		AbstractTrafficShapingHandler:<init>(long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long-long)),
		AbstractTrafficShapingHandler:<init>() to listOf(AbstractTrafficShapingHandler:<init>(long-long-long-long)),
		AbstractTrafficShapingHandler:<init>(long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long-long)),
		AbstractTrafficShapingHandler:configure(long-long-long) to listOf(AbstractTrafficShapingHandler:configure(long-long), AbstractTrafficShapingHandler:configure(long)),
		AbstractTrafficShapingHandler:configure(long-long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long)),
		AbstractTrafficShapingHandler:configure(long) to listOf(TrafficCounter:configure(long)),
		AbstractTrafficShapingHandler:setWriteLimit(long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long)),
		AbstractTrafficShapingHandler:setReadLimit(long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long)),
		AbstractTrafficShapingHandler:setCheckInterval(long) to listOf(TrafficCounter:configure(long)),
		AbstractTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object), ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:setAutoRead(boolean)),
		AbstractTrafficShapingHandler:channelRead(ChannelHandlerContext-Object) to listOf(AbstractTrafficShapingHandler:calculateSize(Object), TrafficCounter:milliSecondFromNano(), TrafficCounter:readTimeToWait(long-long-long-long), AbstractTrafficShapingHandler:checkWaitReadTime(ChannelHandlerContext-long-long), ChannelHandlerContext:channel(), Channel:config(), InternalLogger:isDebugEnabled(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), ChannelConfig:setAutoRead(boolean), ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object), ChannelHandlerContext:attr(AttributeKey), Attribute:get(), AbstractTrafficShapingHandler$ReopenReadTimerTask:<init>(ChannelHandlerContext), Attribute:set(Object), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit), InternalLogger:isDebugEnabled(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), AbstractTrafficShapingHandler:informReadOperation(ChannelHandlerContext-long), ChannelHandlerContext:fireChannelRead(Object)),
		AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get()),
		AbstractTrafficShapingHandler:read(ChannelHandlerContext) to listOf(AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), ChannelHandlerContext:read()),
		AbstractTrafficShapingHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(AbstractTrafficShapingHandler:calculateSize(Object), TrafficCounter:milliSecondFromNano(), TrafficCounter:writeTimeToWait(long-long-long-long), InternalLogger:isDebugEnabled(), ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), AbstractTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise), AbstractTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise)),
		AbstractTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-ChannelPromise) to listOf(AbstractTrafficShapingHandler:calculateSize(Object), TrafficCounter:milliSecondFromNano(), AbstractTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise)),
		AbstractTrafficShapingHandler:channelRegistered(ChannelHandlerContext) to listOf(AbstractTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean), ChannelHandlerAdapter:channelRegistered(ChannelHandlerContext)),
		AbstractTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean) to listOf(ChannelHandlerContext:channel(), Channel:unsafe(), Channel$Unsafe:outboundBuffer(), ChannelOutboundBuffer:setUserDefinedWritability(int-boolean)),
		AbstractTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long) to listOf(AbstractTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean)),
		AbstractTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext) to listOf(AbstractTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean)),
		AbstractTrafficShapingHandler:calculateSize(Object) to listOf(ByteBuf:readableBytes(), ByteBufHolder:content(), ByteBuf:readableBytes()),
		AbstractTrafficShapingHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), AttributeKey:valueOf(String), AttributeKey:valueOf(String)),
		GlobalChannelTrafficShapingHandler$1$1:next() to listOf(GlobalChannelTrafficShapingHandler$1$1:next()),
		GlobalChannelTrafficShapingHandler$2:run() to listOf(GlobalChannelTrafficShapingHandler:access$100(GlobalChannelTrafficShapingHandler-ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long)),
		TrafficCounter:start() to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter$TrafficMonitoringTask:<init>(AbstractTrafficShapingHandler-TrafficCounter)),
		TrafficCounter:stop() to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long), AbstractTrafficShapingHandler:doAccounting(TrafficCounter)),
		TrafficCounter:resetAccounting(long) to listOf(InternalLogger:isDebugEnabled(), TrafficCounter:checkInterval(), TrafficCounter:checkInterval(), InternalLogger:debug(String)),
		TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:configure(long)),
		TrafficCounter:configure(long) to listOf(TrafficCounter:stop(), TrafficCounter:milliSecondFromNano(), TrafficCounter:start()),
		TrafficCounter:readTimeToWait(long-long-long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:readTimeToWait(long-long-long-long)),
		TrafficCounter:readTimeToWait(long-long-long-long) to listOf(TrafficCounter:bytesRecvFlowControl(long), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String)),
		TrafficCounter:writeTimeToWait(long-long-long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:writeTimeToWait(long-long-long-long)),
		TrafficCounter:writeTimeToWait(long-long-long-long) to listOf(TrafficCounter:bytesWriteFlowControl(long), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String)),
		TrafficCounter:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ChannelTrafficShapingHandler$1:run() to listOf(ChannelTrafficShapingHandler:access$100(ChannelTrafficShapingHandler-ChannelHandlerContext-long)),
		GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:run() to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long), TrafficCounter:resetAccounting(long), GlobalChannelTrafficShapingHandler:doAccounting(TrafficCounter)),
		AbstractTrafficShapingHandler$ReopenReadTimerTask:run() to listOf(ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), AbstractTrafficShapingHandler:access$000(), InternalLogger:isDebugEnabled(), AbstractTrafficShapingHandler:access$000(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object), AbstractTrafficShapingHandler:access$000(), InternalLogger:isDebugEnabled(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), AbstractTrafficShapingHandler:access$000(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), AbstractTrafficShapingHandler:access$000(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object), ChannelConfig:setAutoRead(boolean), ChannelHandlerContext:channel(), Channel:read(), AbstractTrafficShapingHandler:access$000(), InternalLogger:isDebugEnabled(), AbstractTrafficShapingHandler:access$000(), ChannelConfig:isAutoRead(), AbstractTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String)),
		TrafficCounter$TrafficMonitoringTask:run() to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long), AbstractTrafficShapingHandler:doAccounting(TrafficCounter)),
		ChannelTrafficShapingHandler$ToSend:<init>(long-Object-ChannelPromise-ChannelTrafficShapingHandler$1) to listOf(ChannelTrafficShapingHandler$ToSend:<init>(long-Object-ChannelPromise)),
		GlobalTrafficShapingHandler$PerChannel:<init>(GlobalTrafficShapingHandler$1) to listOf(GlobalTrafficShapingHandler$PerChannel:<init>()),
		GlobalChannelTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService) to listOf(GlobalChannelTrafficShapingHandler:setMaxDeviation(float-float-float), GlobalChannelTrafficCounter:<init>(GlobalChannelTrafficShapingHandler-ScheduledExecutorService-String-long), GlobalChannelTrafficShapingHandler:setTrafficCounter(TrafficCounter), TrafficCounter:start()),
		GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long-long), PlatformDependent:newConcurrentHashMap(), GlobalChannelTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long), PlatformDependent:newConcurrentHashMap(), GlobalChannelTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long), PlatformDependent:newConcurrentHashMap(), GlobalChannelTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService-long) to listOf(AbstractTrafficShapingHandler:<init>(long), PlatformDependent:newConcurrentHashMap(), GlobalChannelTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalChannelTrafficShapingHandler:<init>(ScheduledExecutorService) to listOf(AbstractTrafficShapingHandler:<init>(), PlatformDependent:newConcurrentHashMap(), GlobalChannelTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalChannelTrafficShapingHandler:computeDeviationCumulativeBytes() to listOf(TrafficCounter:cumulativeWrittenBytes(), TrafficCounter:cumulativeReadBytes()),
		GlobalChannelTrafficShapingHandler:doAccounting(TrafficCounter) to listOf(GlobalChannelTrafficShapingHandler:computeDeviationCumulativeBytes(), AbstractTrafficShapingHandler:doAccounting(TrafficCounter)),
		GlobalChannelTrafficShapingHandler:configureChannel(long-long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long)),
		GlobalChannelTrafficShapingHandler:setWriteChannelLimit(long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long)),
		GlobalChannelTrafficShapingHandler:setReadChannelLimit(long) to listOf(TrafficCounter:milliSecondFromNano(), TrafficCounter:resetAccounting(long)),
		GlobalChannelTrafficShapingHandler:release() to listOf(TrafficCounter:stop()),
		GlobalChannelTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), GlobalChannelTrafficShapingHandler$PerChannel:<init>(), ChannelHandlerContext:channel(), TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long), TrafficCounter:milliSecondFromNano()),
		GlobalChannelTrafficShapingHandler:handlerAdded(ChannelHandlerContext) to listOf(GlobalChannelTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext), TrafficCounter:resetCumulativeTime(), AbstractTrafficShapingHandler:handlerAdded(ChannelHandlerContext)),
		GlobalChannelTrafficShapingHandler:handlerRemoved(ChannelHandlerContext) to listOf(TrafficCounter:resetCumulativeTime(), ChannelHandlerContext:channel(), Channel:isActive(), GlobalChannelTrafficShapingHandler:calculateSize(Object), TrafficCounter:bytesRealWriteFlowControl(long), TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:release(), GlobalChannelTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), GlobalChannelTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext), AbstractTrafficShapingHandler:handlerRemoved(ChannelHandlerContext)),
		GlobalChannelTrafficShapingHandler:channelRead(ChannelHandlerContext-Object) to listOf(GlobalChannelTrafficShapingHandler:calculateSize(Object), TrafficCounter:milliSecondFromNano(), GlobalChannelTrafficShapingHandler:getReadLimit(), TrafficCounter:readTimeToWait(long-long-long-long), ChannelHandlerContext:channel(), TrafficCounter:readTimeToWait(long-long-long-long), TrafficCounter:cumulativeReadBytes(), GlobalChannelTrafficShapingHandler:computeBalancedWait(float-float-long), GlobalChannelTrafficShapingHandler:checkWaitReadTime(ChannelHandlerContext-long-long), ChannelHandlerContext:channel(), Channel:config(), InternalLogger:isDebugEnabled(), ChannelConfig:isAutoRead(), GlobalChannelTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), ChannelConfig:isAutoRead(), GlobalChannelTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), ChannelConfig:setAutoRead(boolean), ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object), ChannelHandlerContext:attr(AttributeKey), Attribute:get(), AbstractTrafficShapingHandler$ReopenReadTimerTask:<init>(ChannelHandlerContext), Attribute:set(Object), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit), InternalLogger:isDebugEnabled(), ChannelConfig:isAutoRead(), GlobalChannelTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), GlobalChannelTrafficShapingHandler:informReadOperation(ChannelHandlerContext-long), ChannelHandlerContext:fireChannelRead(Object)),
		GlobalChannelTrafficShapingHandler:checkWaitReadTime(ChannelHandlerContext-long-long) to listOf(ChannelHandlerContext:channel()),
		GlobalChannelTrafficShapingHandler:informReadOperation(ChannelHandlerContext-long) to listOf(ChannelHandlerContext:channel()),
		GlobalChannelTrafficShapingHandler:channelTrafficCounters() to listOf(GlobalChannelTrafficShapingHandler$1:<init>(GlobalChannelTrafficShapingHandler)),
		GlobalChannelTrafficShapingHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(GlobalChannelTrafficShapingHandler:calculateSize(Object), TrafficCounter:milliSecondFromNano(), GlobalChannelTrafficShapingHandler:getWriteLimit(), TrafficCounter:writeTimeToWait(long-long-long-long), ChannelHandlerContext:channel(), TrafficCounter:writeTimeToWait(long-long-long-long), TrafficCounter:cumulativeWrittenBytes(), GlobalChannelTrafficShapingHandler:computeBalancedWait(float-float-long), InternalLogger:isDebugEnabled(), ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), GlobalChannelTrafficShapingHandler:isHandlerActive(ChannelHandlerContext), InternalLogger:debug(String), GlobalChannelTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise), GlobalChannelTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise)),
		GlobalChannelTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise) to listOf(ChannelHandlerContext:channel(), GlobalChannelTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext), TrafficCounter:bytesRealWriteFlowControl(long), TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), GlobalChannelTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise-GlobalChannelTrafficShapingHandler$1), GlobalChannelTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long), GlobalChannelTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean), ChannelHandlerContext:executor(), GlobalChannelTrafficShapingHandler$2:<init>(GlobalChannelTrafficShapingHandler-ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long), EventExecutor:schedule(Runnable-long-TimeUnit)),
		GlobalChannelTrafficShapingHandler:sendAllValid(ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long) to listOf(TrafficCounter:bytesRealWriteFlowControl(long), TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), GlobalChannelTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), ChannelHandlerContext:flush()),
		GlobalChannelTrafficShapingHandler:toString() to listOf(AbstractTrafficShapingHandler:toString()),
		GlobalChannelTrafficShapingHandler:access$100(GlobalChannelTrafficShapingHandler-ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long) to listOf(GlobalChannelTrafficShapingHandler:sendAllValid(ChannelHandlerContext-GlobalChannelTrafficShapingHandler$PerChannel-long)),
		GlobalChannelTrafficShapingHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		GlobalChannelTrafficShapingHandler$1:iterator() to listOf(GlobalChannelTrafficShapingHandler$1$1:<init>(GlobalChannelTrafficShapingHandler$1)),
		ChannelTrafficShapingHandler:<init>(long-long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long-long)),
		ChannelTrafficShapingHandler:<init>(long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long)),
		ChannelTrafficShapingHandler:<init>(long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long)),
		ChannelTrafficShapingHandler:<init>(long) to listOf(AbstractTrafficShapingHandler:<init>(long)),
		ChannelTrafficShapingHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:executor(), ChannelHandlerContext:channel(), TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long), ChannelTrafficShapingHandler:setTrafficCounter(TrafficCounter), TrafficCounter:start(), AbstractTrafficShapingHandler:handlerAdded(ChannelHandlerContext)),
		ChannelTrafficShapingHandler:handlerRemoved(ChannelHandlerContext) to listOf(TrafficCounter:stop(), ChannelHandlerContext:channel(), Channel:isActive(), ChannelTrafficShapingHandler:calculateSize(Object), TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:release(), ChannelTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), ChannelTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext), AbstractTrafficShapingHandler:handlerRemoved(ChannelHandlerContext)),
		ChannelTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise) to listOf(TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), ChannelTrafficShapingHandler$ToSend:<init>(long-Object-ChannelPromise-ChannelTrafficShapingHandler$1), ChannelTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long), ChannelHandlerContext:executor(), ChannelTrafficShapingHandler$1:<init>(ChannelTrafficShapingHandler-ChannelHandlerContext-long), EventExecutor:schedule(Runnable-long-TimeUnit)),
		ChannelTrafficShapingHandler:sendAllValid(ChannelHandlerContext-long) to listOf(ChannelTrafficShapingHandler:calculateSize(Object), TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), ChannelTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), ChannelHandlerContext:flush()),
		ChannelTrafficShapingHandler:access$100(ChannelTrafficShapingHandler-ChannelHandlerContext-long) to listOf(ChannelTrafficShapingHandler:sendAllValid(ChannelHandlerContext-long)),
		GlobalChannelTrafficCounter:<init>(GlobalChannelTrafficShapingHandler-ScheduledExecutorService-String-long) to listOf(TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long)),
		GlobalChannelTrafficCounter:start() to listOf(GlobalChannelTrafficCounter:milliSecondFromNano(), GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:<init>(GlobalChannelTrafficShapingHandler-TrafficCounter)),
		GlobalChannelTrafficCounter:stop() to listOf(GlobalChannelTrafficCounter:milliSecondFromNano(), GlobalChannelTrafficCounter:resetAccounting(long), AbstractTrafficShapingHandler:doAccounting(TrafficCounter)),
		GlobalChannelTrafficCounter:resetCumulativeTime() to listOf(TrafficCounter:resetCumulativeTime(), TrafficCounter:resetCumulativeTime()),
		GlobalTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise-GlobalTrafficShapingHandler$1) to listOf(GlobalTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise)),
		GlobalTrafficShapingHandler$1:run() to listOf(GlobalTrafficShapingHandler:access$200(GlobalTrafficShapingHandler-ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long)),
		GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService) to listOf(TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long), GlobalTrafficShapingHandler:setTrafficCounter(TrafficCounter), TrafficCounter:start()),
		GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long-long), PlatformDependent:newConcurrentHashMap(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long), PlatformDependent:newConcurrentHashMap(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long), PlatformDependent:newConcurrentHashMap(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long) to listOf(AbstractTrafficShapingHandler:<init>(long), PlatformDependent:newConcurrentHashMap(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:<init>(EventExecutor) to listOf(AbstractTrafficShapingHandler:<init>(), PlatformDependent:newConcurrentHashMap(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:release() to listOf(TrafficCounter:stop()),
		GlobalTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), GlobalTrafficShapingHandler$PerChannel:<init>(GlobalTrafficShapingHandler$1), TrafficCounter:milliSecondFromNano()),
		GlobalTrafficShapingHandler:handlerAdded(ChannelHandlerContext) to listOf(GlobalTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext), AbstractTrafficShapingHandler:handlerAdded(ChannelHandlerContext)),
		GlobalTrafficShapingHandler:handlerRemoved(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), GlobalTrafficShapingHandler:calculateSize(Object), TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:release(), GlobalTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), GlobalTrafficShapingHandler:releaseReadSuspended(ChannelHandlerContext), AbstractTrafficShapingHandler:handlerRemoved(ChannelHandlerContext)),
		GlobalTrafficShapingHandler:checkWaitReadTime(ChannelHandlerContext-long-long) to listOf(ChannelHandlerContext:channel()),
		GlobalTrafficShapingHandler:informReadOperation(ChannelHandlerContext-long) to listOf(ChannelHandlerContext:channel()),
		GlobalTrafficShapingHandler:submitWrite(ChannelHandlerContext-Object-long-long-long-ChannelPromise) to listOf(ChannelHandlerContext:channel(), GlobalTrafficShapingHandler:getOrSetPerChannel(ChannelHandlerContext), TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), GlobalTrafficShapingHandler$ToSend:<init>(long-Object-long-ChannelPromise-GlobalTrafficShapingHandler$1), GlobalTrafficShapingHandler:checkWriteSuspend(ChannelHandlerContext-long-long), GlobalTrafficShapingHandler:setUserDefinedWritability(ChannelHandlerContext-boolean), ChannelHandlerContext:executor(), GlobalTrafficShapingHandler$1:<init>(GlobalTrafficShapingHandler-ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long), EventExecutor:schedule(Runnable-long-TimeUnit)),
		GlobalTrafficShapingHandler:sendAllValid(ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long) to listOf(TrafficCounter:bytesRealWriteFlowControl(long), ChannelHandlerContext:write(Object-ChannelPromise), GlobalTrafficShapingHandler:releaseWriteSuspended(ChannelHandlerContext), ChannelHandlerContext:flush()),
		GlobalTrafficShapingHandler:access$200(GlobalTrafficShapingHandler-ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long) to listOf(GlobalTrafficShapingHandler:sendAllValid(ChannelHandlerContext-GlobalTrafficShapingHandler$PerChannel-long)),
		IpSubnetFilterRule$Ip4SubnetFilterRule:<init>(Inet4Address-int-IpFilterRuleType) to listOf(IpSubnetFilterRule$Ip4SubnetFilterRule:prefixToSubnetMask(int), IpSubnetFilterRule$Ip4SubnetFilterRule:ipToInt(Inet4Address)),
		IpSubnetFilterRule$Ip4SubnetFilterRule:matches(InetSocketAddress) to listOf(IpSubnetFilterRule$Ip4SubnetFilterRule:ipToInt(Inet4Address)),
		IpSubnetFilterRule$Ip4SubnetFilterRule:<init>(Inet4Address-int-IpFilterRuleType-IpSubnetFilterRule$1) to listOf(IpSubnetFilterRule$Ip4SubnetFilterRule:<init>(Inet4Address-int-IpFilterRuleType)),
		IpSubnetFilterRule$Ip6SubnetFilterRule:<init>(Inet6Address-int-IpFilterRuleType) to listOf(IpSubnetFilterRule$Ip6SubnetFilterRule:prefixToSubnetMask(int), IpSubnetFilterRule$Ip6SubnetFilterRule:ipToInt(Inet6Address)),
		IpSubnetFilterRule$Ip6SubnetFilterRule:matches(InetSocketAddress) to listOf(IpSubnetFilterRule$Ip6SubnetFilterRule:ipToInt(Inet6Address)),
		IpSubnetFilterRule$Ip6SubnetFilterRule:<init>(Inet6Address-int-IpFilterRuleType-IpSubnetFilterRule$1) to listOf(IpSubnetFilterRule$Ip6SubnetFilterRule:<init>(Inet6Address-int-IpFilterRuleType)),
		AbstractRemoteAddressFilter:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		AbstractRemoteAddressFilter:channelRegistered(ChannelHandlerContext) to listOf(AbstractRemoteAddressFilter:handleNewChannel(ChannelHandlerContext), ChannelHandlerContext:fireChannelRegistered()),
		AbstractRemoteAddressFilter:channelActive(ChannelHandlerContext) to listOf(AbstractRemoteAddressFilter:handleNewChannel(ChannelHandlerContext), ChannelHandlerContext:channel(), ChannelHandlerContext:fireChannelActive()),
		AbstractRemoteAddressFilter:handleNewChannel(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:remoteAddress(), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), AbstractRemoteAddressFilter:accept(ChannelHandlerContext-SocketAddress), AbstractRemoteAddressFilter:channelAccepted(ChannelHandlerContext-SocketAddress), AbstractRemoteAddressFilter:channelRejected(ChannelHandlerContext-SocketAddress), ChannelFuture:addListener(GenericFutureListener), ChannelHandlerContext:close()),
		IpSubnetFilterRule:<init>(String-int-IpFilterRuleType) to listOf(IpSubnetFilterRule:selectFilterRule(InetAddress-int-IpFilterRuleType)),
		IpSubnetFilterRule:<init>(InetAddress-int-IpFilterRuleType) to listOf(IpSubnetFilterRule:selectFilterRule(InetAddress-int-IpFilterRuleType)),
		IpSubnetFilterRule:selectFilterRule(InetAddress-int-IpFilterRuleType) to listOf(IpSubnetFilterRule$Ip4SubnetFilterRule:<init>(Inet4Address-int-IpFilterRuleType-IpSubnetFilterRule$1), IpSubnetFilterRule$Ip6SubnetFilterRule:<init>(Inet6Address-int-IpFilterRuleType-IpSubnetFilterRule$1)),
		IpSubnetFilterRule:matches(InetSocketAddress) to listOf(IpFilterRule:matches(InetSocketAddress)),
		IpSubnetFilterRule:ruleType() to listOf(IpFilterRule:ruleType()),
		UniqueIpFilter:<init>() to listOf(AbstractRemoteAddressFilter:<init>(), ConcurrentSet:<init>()),
		UniqueIpFilter:accept(ChannelHandlerContext-InetSocketAddress) to listOf(ChannelHandlerContext:channel(), Channel:closeFuture(), UniqueIpFilter$1:<init>(UniqueIpFilter-InetAddress), ChannelFuture:addListener(GenericFutureListener)),
		UniqueIpFilter:accept(ChannelHandlerContext-SocketAddress) to listOf(UniqueIpFilter:accept(ChannelHandlerContext-InetSocketAddress)),
		UniqueIpFilter$1:operationComplete(ChannelFuture) to listOf(UniqueIpFilter:access$000(UniqueIpFilter)),
		UniqueIpFilter$1:operationComplete(Future) to listOf(UniqueIpFilter$1:operationComplete(ChannelFuture)),
		RuleBasedIpFilter:<init>(IpFilterRule[]) to listOf(AbstractRemoteAddressFilter:<init>()),
		RuleBasedIpFilter:accept(ChannelHandlerContext-InetSocketAddress) to listOf(IpFilterRule:matches(InetSocketAddress), IpFilterRule:ruleType()),
		RuleBasedIpFilter:accept(ChannelHandlerContext-SocketAddress) to listOf(RuleBasedIpFilter:accept(ChannelHandlerContext-InetSocketAddress)),
		IpFilterRuleType:values() to listOf(IpFilterRuleType[]:clone()),
		IpFilterRuleType:<clinit>() to listOf(IpFilterRuleType:<init>(String-int), IpFilterRuleType:<init>(String-int)),
		ChannelPromiseNotifier:<init>(ChannelPromise[]) to listOf(PromiseNotifier:<init>(Promise[])),
		FailedChannelFuture:<init>(Channel-EventExecutor-Throwable) to listOf(CompleteChannelFuture:<init>(Channel-EventExecutor)),
		FailedChannelFuture:sync() to listOf(PlatformDependent:throwException(Throwable), FailedChannelFuture:sync()),
		FailedChannelFuture:syncUninterruptibly() to listOf(PlatformDependent:throwException(Throwable), FailedChannelFuture:syncUninterruptibly()),
		ChannelHandlerInvokerUtil:invokeChannelRegisteredNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:channelRegistered(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeChannelUnregisteredNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:channelUnregistered(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeChannelActiveNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:channelActive(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeChannelInactiveNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:channelInactive(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeExceptionCaughtNow(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:handler(), ChannelHandler:exceptionCaught(ChannelHandlerContext-Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		ChannelHandlerInvokerUtil:invokeUserEventTriggeredNow(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:handler(), ChannelHandler:userEventTriggered(ChannelHandlerContext-Object), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeChannelReadNow(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:handler(), ChannelHandler:channelRead(ChannelHandlerContext-Object), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeChannelReadCompleteNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:channelReadComplete(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeChannelWritabilityChangedNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:channelWritabilityChanged(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeBindNow(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:handler(), ChannelHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		ChannelHandlerInvokerUtil:invokeConnectNow(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:handler(), ChannelHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		ChannelHandlerInvokerUtil:invokeDisconnectNow(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:handler(), ChannelHandler:disconnect(ChannelHandlerContext-ChannelPromise), ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		ChannelHandlerInvokerUtil:invokeCloseNow(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:handler(), ChannelHandler:close(ChannelHandlerContext-ChannelPromise), ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		ChannelHandlerInvokerUtil:invokeDeregisterNow(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:handler(), ChannelHandler:deregister(ChannelHandlerContext-ChannelPromise), ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		ChannelHandlerInvokerUtil:invokeReadNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:read(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:invokeWriteNow(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerContext:handler(), ChannelHandler:write(ChannelHandlerContext-Object-ChannelPromise), ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		ChannelHandlerInvokerUtil:invokeFlushNow(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:flush(ChannelHandlerContext), ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean) to listOf(ChannelPromise:isDone(), ChannelPromise:isCancelled(), ChannelPromise:channel(), ChannelHandlerContext:channel(), ChannelPromise:channel(), ChannelHandlerContext:channel(), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class)),
		ChannelHandlerInvokerUtil:notifyHandlerException(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerInvokerUtil:inExceptionCaught(Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelHandlerInvokerUtil:invokeExceptionCaughtNow(ChannelHandlerContext-Throwable)),
		ChannelHandlerInvokerUtil:notifyOutboundHandlerException(Throwable-ChannelPromise) to listOf(ChannelPromise:tryFailure(Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Object-Object)),
		ChannelFutureListener$3:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:pipeline(), ChannelFuture:cause(), ChannelPipeline:fireExceptionCaught(Throwable)),
		ChannelFutureListener$3:operationComplete(Future) to listOf(ChannelFutureListener$3:operationComplete(ChannelFuture)),
		DefaultChannelHandlerInvoker$11:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$11:run() to listOf(ChannelHandlerInvokerUtil:invokeConnectNow(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelPipeline$6:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext) to listOf(OneTimeTask:<init>()),
		DefaultChannelPipeline$6:run() to listOf(DefaultChannelPipeline:access$400(DefaultChannelPipeline-Thread-AbstractChannelHandlerContext)),
		DefaultChannelHandlerInvoker$2:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$2:run() to listOf(ChannelHandlerInvokerUtil:invokeChannelUnregisteredNow(ChannelHandlerContext)),
		ReflectiveChannelFactory:newChannel() to listOf(ChannelException:<init>(String-Throwable)),
		ReflectiveChannelFactory:toString() to listOf(StringUtil:simpleClassName(Class)),
		ChannelOutboundBuffer$3:run() to listOf(ChannelOutboundBuffer:close(ClosedChannelException)),
		DefaultChannelHandlerInvoker:invokeChannelRegistered(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeChannelRegisteredNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$1:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:invokeChannelUnregistered(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeChannelUnregisteredNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$2:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:invokeChannelActive(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeChannelActiveNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$3:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:invokeChannelInactive(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeChannelInactiveNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$4:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:invokeExceptionCaught(ChannelHandlerContext-Throwable) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeExceptionCaughtNow(ChannelHandlerContext-Throwable), DefaultChannelHandlerInvoker$5:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Throwable), EventExecutor:execute(Runnable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		DefaultChannelHandlerInvoker:invokeUserEventTriggered(ChannelHandlerContext-Object) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeUserEventTriggeredNow(ChannelHandlerContext-Object), DefaultChannelHandlerInvoker$6:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Object), DefaultChannelHandlerInvoker:safeExecuteInbound(Runnable-Object)),
		DefaultChannelHandlerInvoker:invokeChannelRead(ChannelHandlerContext-Object) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeChannelReadNow(ChannelHandlerContext-Object), DefaultChannelHandlerInvoker$7:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Object), DefaultChannelHandlerInvoker:safeExecuteInbound(Runnable-Object)),
		DefaultChannelHandlerInvoker:invokeChannelReadComplete(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeChannelReadCompleteNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$8:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:invokeChannelWritabilityChanged(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeChannelWritabilityChangedNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$9:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean), EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeBindNow(ChannelHandlerContext-SocketAddress-ChannelPromise), DefaultChannelHandlerInvoker$10:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-SocketAddress-ChannelPromise), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise)),
		DefaultChannelHandlerInvoker:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean), EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeConnectNow(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), DefaultChannelHandlerInvoker$11:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise)),
		DefaultChannelHandlerInvoker:invokeDisconnect(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean), EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeDisconnectNow(ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerInvoker$12:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise)),
		DefaultChannelHandlerInvoker:invokeClose(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean), EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeCloseNow(ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerInvoker$13:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise)),
		DefaultChannelHandlerInvoker:invokeDeregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean), EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeDeregisterNow(ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerInvoker$14:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise)),
		DefaultChannelHandlerInvoker:invokeRead(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeReadNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$15:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:invokeWrite(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:validatePromise(ChannelHandlerContext-ChannelPromise-boolean), ReferenceCountUtil:release(Object), EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeWriteNow(ChannelHandlerContext-Object-ChannelPromise), ChannelHandlerContext:channel(), AbstractChannel:estimatorHandle(), MessageSizeEstimator$Handle:size(Object), AbstractChannel:unsafe(), Channel$Unsafe:outboundBuffer(), ChannelOutboundBuffer:incrementPendingOutboundBytes(long), DefaultChannelHandlerInvoker$WriteTask:access$000(ChannelHandlerContext-Object-int-ChannelPromise), DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise-Object)),
		DefaultChannelHandlerInvoker:invokeFlush(ChannelHandlerContext) to listOf(EventExecutor:inEventLoop(), ChannelHandlerInvokerUtil:invokeFlushNow(ChannelHandlerContext), DefaultChannelHandlerInvoker$16:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerInvoker:safeExecuteInbound(Runnable-Object) to listOf(EventExecutor:execute(Runnable), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise) to listOf(EventExecutor:execute(Runnable), ChannelPromise:setFailure(Throwable)),
		DefaultChannelHandlerInvoker:safeExecuteOutbound(Runnable-ChannelPromise-Object) to listOf(EventExecutor:execute(Runnable), ChannelPromise:setFailure(Throwable), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		DefaultChannelHandlerInvoker$14:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$14:run() to listOf(ChannelHandlerInvokerUtil:invokeDeregisterNow(ChannelHandlerContext-ChannelPromise)),
		AbstractChannel$AbstractUnsafe$7:<init>(AbstractChannel$AbstractUnsafe) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$7:run() to listOf(AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelInactive(), AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:deregister(ChannelPromise)),
		DefaultChannelPipeline$HeadContext$1:<init>(DefaultChannelPipeline$HeadContext-ChannelPromise) to listOf(OneTimeTask:<init>()),
		DefaultChannelPipeline$HeadContext$1:run() to listOf(DefaultChannelPipeline$HeadContext:access$600(DefaultChannelPipeline$HeadContext), Channel$Unsafe:deregister(ChannelPromise)),
		ThreadPerChannelEventLoopGroup$1:operationComplete(Future) to listOf(ThreadPerChannelEventLoopGroup:isTerminated(), ThreadPerChannelEventLoopGroup:access$000(ThreadPerChannelEventLoopGroup), Promise:trySuccess(Object)),
		ChannelOutboundBuffer:addMessage(Object-int-ChannelPromise) to listOf(ChannelOutboundBuffer:total(Object), ChannelOutboundBuffer$Entry:newInstance(Object-int-long-ChannelPromise), ChannelOutboundBuffer:incrementPendingOutboundBytes(long-boolean)),
		ChannelOutboundBuffer:addFlush() to listOf(ChannelPromise:setUncancellable(), ChannelOutboundBuffer$Entry:cancel(), ChannelOutboundBuffer:decrementPendingOutboundBytes(long-boolean)),
		ChannelOutboundBuffer:incrementPendingOutboundBytes(long) to listOf(ChannelOutboundBuffer:incrementPendingOutboundBytes(long-boolean)),
		ChannelOutboundBuffer:incrementPendingOutboundBytes(long-boolean) to listOf(Channel:config(), ChannelConfig:getWriteBufferHighWaterMark(), ChannelOutboundBuffer:setUnwritable(boolean)),
		ChannelOutboundBuffer:decrementPendingOutboundBytes(long) to listOf(ChannelOutboundBuffer:decrementPendingOutboundBytes(long-boolean)),
		ChannelOutboundBuffer:decrementPendingOutboundBytes(long-boolean) to listOf(Channel:config(), ChannelConfig:getWriteBufferLowWaterMark(), ChannelOutboundBuffer:setWritable(boolean)),
		ChannelOutboundBuffer:total(Object) to listOf(ByteBuf:readableBytes(), FileRegion:count(), ByteBufHolder:content(), ByteBuf:readableBytes()),
		ChannelOutboundBuffer:progress(long) to listOf(ChannelProgressivePromise:tryProgress(long-long)),
		ChannelOutboundBuffer:remove() to listOf(ChannelOutboundBuffer:removeEntry(ChannelOutboundBuffer$Entry), ReferenceCountUtil:safeRelease(Object), ChannelOutboundBuffer:safeSuccess(ChannelPromise), ChannelOutboundBuffer:decrementPendingOutboundBytes(long-boolean), ChannelOutboundBuffer$Entry:recycle()),
		ChannelOutboundBuffer:remove(Throwable) to listOf(ChannelOutboundBuffer:removeEntry(ChannelOutboundBuffer$Entry), ReferenceCountUtil:safeRelease(Object), ChannelOutboundBuffer:safeFail(ChannelPromise-Throwable), ChannelOutboundBuffer:decrementPendingOutboundBytes(long-boolean), ChannelOutboundBuffer$Entry:recycle()),
		ChannelOutboundBuffer:removeBytes(long) to listOf(ChannelOutboundBuffer:current(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ChannelOutboundBuffer:progress(long), ChannelOutboundBuffer:remove(), ByteBuf:readerIndex(int), ChannelOutboundBuffer:progress(long)),
		ChannelOutboundBuffer:nioBuffers() to listOf(InternalThreadLocalMap:get(), FastThreadLocal:get(InternalThreadLocalMap), ChannelOutboundBuffer:isFlushedEntry(ChannelOutboundBuffer$Entry), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:nioBufferCount(), ChannelOutboundBuffer:expandNioBufferArray(ByteBuffer[]-int-int), FastThreadLocal:set(InternalThreadLocalMap-Object), ByteBuf:internalNioBuffer(int-int), ByteBuf:nioBuffers(), ChannelOutboundBuffer:fillBufferArray(ByteBuffer[]-ByteBuffer[]-int)),
		ChannelOutboundBuffer:getUserDefinedWritability(int) to listOf(ChannelOutboundBuffer:writabilityMask(int)),
		ChannelOutboundBuffer:setUserDefinedWritability(int-boolean) to listOf(ChannelOutboundBuffer:setUserDefinedWritability(int), ChannelOutboundBuffer:clearUserDefinedWritability(int)),
		ChannelOutboundBuffer:setUserDefinedWritability(int) to listOf(ChannelOutboundBuffer:writabilityMask(int), ChannelOutboundBuffer:fireChannelWritabilityChanged(boolean)),
		ChannelOutboundBuffer:clearUserDefinedWritability(int) to listOf(ChannelOutboundBuffer:writabilityMask(int), ChannelOutboundBuffer:fireChannelWritabilityChanged(boolean)),
		ChannelOutboundBuffer:setWritable(boolean) to listOf(ChannelOutboundBuffer:fireChannelWritabilityChanged(boolean)),
		ChannelOutboundBuffer:setUnwritable(boolean) to listOf(ChannelOutboundBuffer:fireChannelWritabilityChanged(boolean)),
		ChannelOutboundBuffer:fireChannelWritabilityChanged(boolean) to listOf(Channel:pipeline(), ChannelOutboundBuffer$2:<init>(ChannelOutboundBuffer-ChannelPipeline), Channel:eventLoop(), EventLoop:execute(Runnable), ChannelPipeline:fireChannelWritabilityChanged()),
		ChannelOutboundBuffer:failFlushed(Throwable) to listOf(ChannelOutboundBuffer:remove(Throwable)),
		ChannelOutboundBuffer:close(ClosedChannelException) to listOf(Channel:eventLoop(), ChannelOutboundBuffer$3:<init>(ChannelOutboundBuffer-ClosedChannelException), EventLoop:execute(Runnable), Channel:isOpen(), ChannelOutboundBuffer:isEmpty(), ReferenceCountUtil:safeRelease(Object), ChannelOutboundBuffer:safeFail(ChannelPromise-Throwable), ChannelOutboundBuffer$Entry:recycleAndGetNext()),
		ChannelOutboundBuffer:safeSuccess(ChannelPromise) to listOf(ChannelPromise:trySuccess(), InternalLogger:warn(String-Object)),
		ChannelOutboundBuffer:safeFail(ChannelPromise-Throwable) to listOf(ChannelPromise:tryFailure(Throwable), InternalLogger:warn(String-Object-Object)),
		ChannelOutboundBuffer:forEachFlushedMessage(ChannelOutboundBuffer$MessageProcessor) to listOf(ChannelOutboundBuffer$MessageProcessor:processMessage(Object), ChannelOutboundBuffer:isFlushedEntry(ChannelOutboundBuffer$Entry)),
		ChannelOutboundBuffer:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelOutboundBuffer$1:<init>(), PlatformDependent:newAtomicIntegerFieldUpdater(Class-String), PlatformDependent:newAtomicLongFieldUpdater(Class-String)),
		DefaultChannelHandlerInvoker$8:run() to listOf(ChannelHandlerInvokerUtil:invokeChannelReadCompleteNow(ChannelHandlerContext)),
		ChannelFutureListener$2:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:close()),
		ChannelFutureListener$2:operationComplete(Future) to listOf(ChannelFutureListener$2:operationComplete(ChannelFuture)),
		DefaultChannelPipeline$1:run() to listOf(DefaultChannelPipeline:remove0(AbstractChannelHandlerContext)),
		ChannelOutboundHandlerAdapter:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		AbstractChannel$AbstractUnsafe$8:<init>(AbstractChannel$AbstractUnsafe) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$8:run() to listOf(AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:deregister(ChannelPromise)),
		SingleThreadEventLoop:<init>(EventLoopGroup-Executor-boolean) to listOf(SingleThreadEventExecutor:<init>(EventExecutorGroup-Executor-boolean), DefaultChannelHandlerInvoker:<init>(EventExecutor)),
		SingleThreadEventLoop:parent() to listOf(SingleThreadEventExecutor:parent(), SingleThreadEventLoop:parent()),
		SingleThreadEventLoop:next() to listOf(SingleThreadEventExecutor:next(), SingleThreadEventLoop:next()),
		SingleThreadEventLoop:register(Channel) to listOf(DefaultChannelPromise:<init>(Channel-EventExecutor), SingleThreadEventLoop:register(Channel-ChannelPromise)),
		SingleThreadEventLoop:register(Channel-ChannelPromise) to listOf(Channel:unsafe(), Channel$Unsafe:register(EventLoop-ChannelPromise)),
		SingleThreadEventLoop:unwrap() to listOf(SingleThreadEventLoop:unwrap()),
		DefaultChannelPromise:<init>(Channel) to listOf(DefaultPromise:<init>()),
		DefaultChannelPromise:<init>(Channel-EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor)),
		DefaultChannelPromise:executor() to listOf(DefaultPromise:executor(), DefaultChannelPromise:channel(), Channel:eventLoop()),
		DefaultChannelPromise:setSuccess() to listOf(DefaultChannelPromise:setSuccess(Void)),
		DefaultChannelPromise:setSuccess(Void) to listOf(DefaultPromise:setSuccess(Object)),
		DefaultChannelPromise:trySuccess() to listOf(DefaultChannelPromise:trySuccess(Object)),
		DefaultChannelPromise:setFailure(Throwable) to listOf(DefaultPromise:setFailure(Throwable), DefaultChannelPromise:setFailure(Throwable)),
		DefaultChannelPromise:addListener(GenericFutureListener) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultChannelPromise:addListener(GenericFutureListener), DefaultChannelPromise:addListener(GenericFutureListener), DefaultChannelPromise:addListener(GenericFutureListener)),
		DefaultChannelPromise:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListeners(GenericFutureListener[]), DefaultChannelPromise:addListeners(GenericFutureListener[]), DefaultChannelPromise:addListeners(GenericFutureListener[]), DefaultChannelPromise:addListeners(GenericFutureListener[])),
		DefaultChannelPromise:removeListener(GenericFutureListener) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultChannelPromise:removeListener(GenericFutureListener), DefaultChannelPromise:removeListener(GenericFutureListener), DefaultChannelPromise:removeListener(GenericFutureListener)),
		DefaultChannelPromise:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListeners(GenericFutureListener[]), DefaultChannelPromise:removeListeners(GenericFutureListener[]), DefaultChannelPromise:removeListeners(GenericFutureListener[]), DefaultChannelPromise:removeListeners(GenericFutureListener[])),
		DefaultChannelPromise:sync() to listOf(DefaultPromise:sync(), DefaultChannelPromise:sync(), DefaultChannelPromise:sync(), DefaultChannelPromise:sync()),
		DefaultChannelPromise:syncUninterruptibly() to listOf(DefaultPromise:syncUninterruptibly(), DefaultChannelPromise:syncUninterruptibly(), DefaultChannelPromise:syncUninterruptibly(), DefaultChannelPromise:syncUninterruptibly()),
		DefaultChannelPromise:await() to listOf(DefaultPromise:await(), DefaultChannelPromise:await(), DefaultChannelPromise:await(), DefaultChannelPromise:await()),
		DefaultChannelPromise:awaitUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultChannelPromise:awaitUninterruptibly(), DefaultChannelPromise:awaitUninterruptibly(), DefaultChannelPromise:awaitUninterruptibly()),
		DefaultChannelPromise:checkDeadLock() to listOf(DefaultChannelPromise:channel(), Channel:isRegistered(), DefaultPromise:checkDeadLock()),
		DefaultChannelPromise:setSuccess(Object) to listOf(DefaultChannelPromise:setSuccess(Void)),
		AbstractChannel$AbstractUnsafe$3:<init>(AbstractChannel$AbstractUnsafe) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$3:run() to listOf(AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelInactive()),
		DefaultChannelHandlerInvoker$9:run() to listOf(ChannelHandlerInvokerUtil:invokeChannelWritabilityChangedNow(ChannelHandlerContext)),
		DefaultAddressedEnvelope:<init>(Object-SocketAddress) to listOf(DefaultAddressedEnvelope:<init>(Object-SocketAddress-SocketAddress)),
		DefaultAddressedEnvelope:refCnt() to listOf(ReferenceCounted:refCnt()),
		DefaultAddressedEnvelope:retain() to listOf(ReferenceCountUtil:retain(Object), DefaultAddressedEnvelope:retain()),
		DefaultAddressedEnvelope:retain(int) to listOf(ReferenceCountUtil:retain(Object-int), DefaultAddressedEnvelope:retain(int)),
		DefaultAddressedEnvelope:release() to listOf(ReferenceCountUtil:release(Object)),
		DefaultAddressedEnvelope:release(int) to listOf(ReferenceCountUtil:release(Object-int)),
		DefaultAddressedEnvelope:touch() to listOf(ReferenceCountUtil:touch(Object), DefaultAddressedEnvelope:touch()),
		DefaultAddressedEnvelope:touch(Object) to listOf(ReferenceCountUtil:touch(Object-Object), DefaultAddressedEnvelope:touch(Object)),
		DefaultAddressedEnvelope:toString() to listOf(StringUtil:simpleClassName(Object), StringUtil:simpleClassName(Object)),
		DefaultChannelGroup:<init>(EventExecutor) to listOf(DefaultChannelGroup:<init>(String-EventExecutor)),
		DefaultChannelGroup:<init>(String-EventExecutor) to listOf(PlatformDependent:newConcurrentHashMap(), PlatformDependent:newConcurrentHashMap(), DefaultChannelGroup$1:<init>(DefaultChannelGroup)),
		DefaultChannelGroup:add(Channel) to listOf(Channel:id(), Channel:closeFuture(), ChannelFuture:addListener(GenericFutureListener)),
		DefaultChannelGroup:remove(Object) to listOf(Channel:id(), Channel:id(), Channel:closeFuture(), ChannelFuture:removeListener(GenericFutureListener)),
		DefaultChannelGroup:iterator() to listOf(CombinedIterator:<init>(Iterator-Iterator)),
		DefaultChannelGroup:toArray() to listOf(DefaultChannelGroup:size()),
		DefaultChannelGroup:toArray(Object[]) to listOf(DefaultChannelGroup:size()),
		DefaultChannelGroup:close() to listOf(ChannelMatchers:all(), DefaultChannelGroup:close(ChannelMatcher)),
		DefaultChannelGroup:disconnect() to listOf(ChannelMatchers:all(), DefaultChannelGroup:disconnect(ChannelMatcher)),
		DefaultChannelGroup:deregister() to listOf(ChannelMatchers:all(), DefaultChannelGroup:deregister(ChannelMatcher)),
		DefaultChannelGroup:write(Object) to listOf(ChannelMatchers:all(), DefaultChannelGroup:write(Object-ChannelMatcher)),
		DefaultChannelGroup:safeDuplicate(Object) to listOf(ByteBuf:duplicate(), ByteBuf:retain(), ByteBufHolder:duplicate(), ByteBufHolder:retain(), ReferenceCountUtil:retain(Object)),
		DefaultChannelGroup:write(Object-ChannelMatcher) to listOf(DefaultChannelGroup:size(), ChannelMatcher:matches(Channel), DefaultChannelGroup:safeDuplicate(Object), Channel:write(Object), ReferenceCountUtil:release(Object), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:flush() to listOf(ChannelMatchers:all(), DefaultChannelGroup:flush(ChannelMatcher)),
		DefaultChannelGroup:writeAndFlush(Object) to listOf(ChannelMatchers:all(), DefaultChannelGroup:writeAndFlush(Object-ChannelMatcher)),
		DefaultChannelGroup:disconnect(ChannelMatcher) to listOf(DefaultChannelGroup:size(), ChannelMatcher:matches(Channel), Channel:disconnect(), ChannelMatcher:matches(Channel), Channel:disconnect(), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:close(ChannelMatcher) to listOf(DefaultChannelGroup:size(), ChannelMatcher:matches(Channel), Channel:close(), ChannelMatcher:matches(Channel), Channel:close(), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:deregister(ChannelMatcher) to listOf(DefaultChannelGroup:size(), ChannelMatcher:matches(Channel), Channel:deregister(), ChannelMatcher:matches(Channel), Channel:deregister(), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:flush(ChannelMatcher) to listOf(ChannelMatcher:matches(Channel), Channel:flush()),
		DefaultChannelGroup:writeAndFlush(Object-ChannelMatcher) to listOf(DefaultChannelGroup:size(), ChannelMatcher:matches(Channel), DefaultChannelGroup:safeDuplicate(Object), Channel:writeAndFlush(Object), ReferenceCountUtil:release(Object), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:compareTo(ChannelGroup) to listOf(DefaultChannelGroup:name(), ChannelGroup:name()),
		DefaultChannelGroup:toString() to listOf(StringUtil:simpleClassName(Object), DefaultChannelGroup:name(), DefaultChannelGroup:size()),
		DefaultChannelGroup:add(Object) to listOf(DefaultChannelGroup:add(Channel)),
		DefaultChannelGroup:compareTo(Object) to listOf(DefaultChannelGroup:compareTo(ChannelGroup)),
		ChannelMatchers$InvertMatcher:matches(Channel) to listOf(ChannelMatcher:matches(Channel)),
		DefaultChannelGroup$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:channel(), DefaultChannelGroup:remove(Object)),
		DefaultChannelGroup$1:operationComplete(Future) to listOf(DefaultChannelGroup$1:operationComplete(ChannelFuture)),
		DefaultChannelGroupFuture$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), DefaultChannelGroupFuture:access$008(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$108(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$000(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$000(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), ChannelFuture:isSuccess(), ChannelFuture:channel(), ChannelFuture:cause(), DefaultChannelGroupFuture$DefaultEntry:<init>(Object-Object), ChannelGroupException:<init>(Collection), DefaultChannelGroupFuture:access$300(DefaultChannelGroupFuture-ChannelGroupException), DefaultChannelGroupFuture:access$400(DefaultChannelGroupFuture)),
		DefaultChannelGroupFuture$1:operationComplete(Future) to listOf(DefaultChannelGroupFuture$1:operationComplete(ChannelFuture)),
		ChannelMatchers:isNot(Channel) to listOf(ChannelMatchers:is(Channel), ChannelMatchers:invert(ChannelMatcher)),
		ChannelMatchers:is(Channel) to listOf(ChannelMatchers$InstanceMatcher:<init>(Channel)),
		ChannelMatchers:isInstanceOf(Class) to listOf(ChannelMatchers$ClassMatcher:<init>(Class)),
		ChannelMatchers:isNotInstanceOf(Class) to listOf(ChannelMatchers:isInstanceOf(Class), ChannelMatchers:invert(ChannelMatcher)),
		ChannelMatchers:invert(ChannelMatcher) to listOf(ChannelMatchers$InvertMatcher:<init>(ChannelMatcher)),
		ChannelMatchers:compose(ChannelMatcher[]) to listOf(ChannelMatchers$CompositeMatcher:<init>(ChannelMatcher[])),
		ChannelMatchers:<clinit>() to listOf(ChannelMatchers$1:<init>(), ChannelMatchers:isInstanceOf(Class), ChannelMatchers:isNotInstanceOf(Class)),
		ChannelGroupException:<init>(Collection) to listOf(ChannelException:<init>()),
		ChannelMatchers$CompositeMatcher:matches(Channel) to listOf(ChannelMatcher:matches(Channel)),
		DefaultChannelGroupFuture:<init>(ChannelGroup-Collection-EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor), DefaultChannelGroupFuture$1:<init>(DefaultChannelGroupFuture), ChannelFuture:channel(), ChannelFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:setSuccess0()),
		DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor), DefaultChannelGroupFuture$1:<init>(DefaultChannelGroupFuture), ChannelFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:setSuccess0()),
		DefaultChannelGroupFuture:addListener(GenericFutureListener) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultChannelGroupFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:addListener(GenericFutureListener)),
		DefaultChannelGroupFuture:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListeners(GenericFutureListener[]), DefaultChannelGroupFuture:addListeners(GenericFutureListener[]), DefaultChannelGroupFuture:addListeners(GenericFutureListener[]), DefaultChannelGroupFuture:addListeners(GenericFutureListener[])),
		DefaultChannelGroupFuture:removeListener(GenericFutureListener) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultChannelGroupFuture:removeListener(GenericFutureListener), DefaultChannelGroupFuture:removeListener(GenericFutureListener), DefaultChannelGroupFuture:removeListener(GenericFutureListener)),
		DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListeners(GenericFutureListener[]), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[])),
		DefaultChannelGroupFuture:await() to listOf(DefaultPromise:await(), DefaultChannelGroupFuture:await(), DefaultChannelGroupFuture:await(), DefaultChannelGroupFuture:await()),
		DefaultChannelGroupFuture:awaitUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultChannelGroupFuture:awaitUninterruptibly(), DefaultChannelGroupFuture:awaitUninterruptibly(), DefaultChannelGroupFuture:awaitUninterruptibly()),
		DefaultChannelGroupFuture:syncUninterruptibly() to listOf(DefaultPromise:syncUninterruptibly(), DefaultChannelGroupFuture:syncUninterruptibly(), DefaultChannelGroupFuture:syncUninterruptibly(), DefaultChannelGroupFuture:syncUninterruptibly()),
		DefaultChannelGroupFuture:sync() to listOf(DefaultPromise:sync(), DefaultChannelGroupFuture:sync(), DefaultChannelGroupFuture:sync(), DefaultChannelGroupFuture:sync()),
		DefaultChannelGroupFuture:cause() to listOf(DefaultPromise:cause(), DefaultChannelGroupFuture:cause()),
		DefaultChannelGroupFuture:setSuccess0() to listOf(DefaultPromise:setSuccess(Object)),
		DefaultChannelGroupFuture:setFailure0(ChannelGroupException) to listOf(DefaultPromise:setFailure(Throwable)),
		DefaultChannelGroupFuture:setFailure(Throwable) to listOf(DefaultChannelGroupFuture:setFailure(Throwable)),
		DefaultChannelGroupFuture:checkDeadLock() to listOf(DefaultChannelGroupFuture:executor(), EventExecutor:inEventLoop(), BlockingOperationException:<init>()),
		DefaultChannelGroupFuture:trySuccess(Object) to listOf(DefaultChannelGroupFuture:trySuccess(Void)),
		DefaultChannelGroupFuture:setSuccess(Object) to listOf(DefaultChannelGroupFuture:setSuccess(Void)),
		DefaultChannelGroupFuture:access$300(DefaultChannelGroupFuture-ChannelGroupException) to listOf(DefaultChannelGroupFuture:setFailure0(ChannelGroupException)),
		DefaultChannelGroupFuture:access$400(DefaultChannelGroupFuture) to listOf(DefaultChannelGroupFuture:setSuccess0()),
		EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel) to listOf(ChannelHandlerAdapter:<init>()),
		EmbeddedChannel$LastInboundHandler:channelRead(ChannelHandlerContext-Object) to listOf(EmbeddedChannel:access$200(EmbeddedChannel)),
		EmbeddedChannel$LastInboundHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(EmbeddedChannel:access$300(EmbeddedChannel-Throwable)),
		EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel-EmbeddedChannel$1) to listOf(EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel)),
		EmbeddedEventLoop:<init>() to listOf(AbstractScheduledEventExecutor:<init>()),
		EmbeddedEventLoop:parent() to listOf(AbstractScheduledEventExecutor:parent(), EmbeddedEventLoop:parent()),
		EmbeddedEventLoop:next() to listOf(AbstractScheduledEventExecutor:next(), EmbeddedEventLoop:next()),
		EmbeddedEventLoop:runScheduledTasks() to listOf(AbstractScheduledEventExecutor:nanoTime(), EmbeddedEventLoop:pollScheduledTask(long), EmbeddedEventLoop:nextScheduledTaskNano()),
		EmbeddedEventLoop:nextScheduledTask() to listOf(EmbeddedEventLoop:nextScheduledTaskNano()),
		EmbeddedEventLoop:cancelScheduledTasks() to listOf(AbstractScheduledEventExecutor:cancelScheduledTasks()),
		EmbeddedEventLoop:register(Channel) to listOf(DefaultChannelPromise:<init>(Channel-EventExecutor), EmbeddedEventLoop:register(Channel-ChannelPromise)),
		EmbeddedEventLoop:register(Channel-ChannelPromise) to listOf(Channel:unsafe(), Channel$Unsafe:register(EventLoop-ChannelPromise)),
		EmbeddedEventLoop:invokeChannelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeChannelRegisteredNow(ChannelHandlerContext)),
		EmbeddedEventLoop:invokeChannelUnregistered(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeChannelUnregisteredNow(ChannelHandlerContext)),
		EmbeddedEventLoop:invokeChannelActive(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeChannelActiveNow(ChannelHandlerContext)),
		EmbeddedEventLoop:invokeChannelInactive(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeChannelInactiveNow(ChannelHandlerContext)),
		EmbeddedEventLoop:invokeExceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerInvokerUtil:invokeExceptionCaughtNow(ChannelHandlerContext-Throwable)),
		EmbeddedEventLoop:invokeUserEventTriggered(ChannelHandlerContext-Object) to listOf(ChannelHandlerInvokerUtil:invokeUserEventTriggeredNow(ChannelHandlerContext-Object)),
		EmbeddedEventLoop:invokeChannelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerInvokerUtil:invokeChannelReadNow(ChannelHandlerContext-Object)),
		EmbeddedEventLoop:invokeChannelReadComplete(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeChannelReadCompleteNow(ChannelHandlerContext)),
		EmbeddedEventLoop:invokeChannelWritabilityChanged(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeChannelWritabilityChangedNow(ChannelHandlerContext)),
		EmbeddedEventLoop:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:invokeBindNow(ChannelHandlerContext-SocketAddress-ChannelPromise)),
		EmbeddedEventLoop:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:invokeConnectNow(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise)),
		EmbeddedEventLoop:invokeDisconnect(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:invokeDisconnectNow(ChannelHandlerContext-ChannelPromise)),
		EmbeddedEventLoop:invokeClose(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:invokeCloseNow(ChannelHandlerContext-ChannelPromise)),
		EmbeddedEventLoop:invokeDeregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:invokeDeregisterNow(ChannelHandlerContext-ChannelPromise)),
		EmbeddedEventLoop:invokeRead(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeReadNow(ChannelHandlerContext)),
		EmbeddedEventLoop:invokeWrite(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerInvokerUtil:invokeWriteNow(ChannelHandlerContext-Object-ChannelPromise)),
		EmbeddedEventLoop:invokeFlush(ChannelHandlerContext) to listOf(ChannelHandlerInvokerUtil:invokeFlushNow(ChannelHandlerContext)),
		EmbeddedEventLoop:unwrap() to listOf(EmbeddedEventLoop:unwrap()),
		EmbeddedChannel$State:values() to listOf(EmbeddedChannel$State[]:clone()),
		EmbeddedChannel$State:<clinit>() to listOf(EmbeddedChannel$State:<init>(String-int), EmbeddedChannel$State:<init>(String-int), EmbeddedChannel$State:<init>(String-int)),
		EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		EmbeddedChannel$DefaultUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(EmbeddedChannel$DefaultUnsafe:safeSetSuccess(ChannelPromise)),
		EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel-EmbeddedChannel$1) to listOf(EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel)),
		EmbeddedChannelId:asShortText() to listOf(EmbeddedChannelId:toString()),
		EmbeddedChannelId:asLongText() to listOf(EmbeddedChannelId:toString()),
		EmbeddedChannelId:compareTo(ChannelId) to listOf(EmbeddedChannelId:asLongText(), ChannelId:asLongText()),
		EmbeddedChannelId:compareTo(Object) to listOf(EmbeddedChannelId:compareTo(ChannelId)),
		EmbeddedChannelId:<clinit>() to listOf(EmbeddedChannelId:<init>()),
		EmbeddedChannel:<init>() to listOf(EmbeddedChannel:<init>(ChannelHandler[])),
		EmbeddedChannel:<init>(ChannelHandler[]) to listOf(AbstractChannel:<init>(Channel-ChannelId), EmbeddedEventLoop:<init>(), DefaultChannelConfig:<init>(Channel), EmbeddedChannel:pipeline(), ChannelPipeline:addLast(ChannelHandler[]), EmbeddedEventLoop:register(Channel), EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel-EmbeddedChannel$1), ChannelPipeline:addLast(ChannelHandler[])),
		EmbeddedChannel:lastInboundBuffer() to listOf(EmbeddedChannel:inboundMessages()),
		EmbeddedChannel:lastOutboundBuffer() to listOf(EmbeddedChannel:outboundMessages()),
		EmbeddedChannel:writeInbound(Object[]) to listOf(EmbeddedChannel:ensureOpen(), EmbeddedChannel:pipeline(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), EmbeddedChannel:runPendingTasks(), EmbeddedChannel:checkException()),
		EmbeddedChannel:writeOutbound(Object[]) to listOf(EmbeddedChannel:ensureOpen(), RecyclableArrayList:newInstance(int), EmbeddedChannel:write(Object), RecyclableArrayList:add(Object), EmbeddedChannel:flush(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelFuture:isDone(), ChannelFuture:cause(), ChannelFuture:cause(), EmbeddedChannel:recordException(Throwable), EmbeddedChannel:runPendingTasks(), EmbeddedChannel:checkException(), RecyclableArrayList:recycle(), RecyclableArrayList:recycle()),
		EmbeddedChannel:finish() to listOf(EmbeddedChannel:close(), EmbeddedChannel:runPendingTasks(), EmbeddedEventLoop:cancelScheduledTasks(), EmbeddedChannel:checkException()),
		EmbeddedChannel:runPendingTasks() to listOf(EmbeddedEventLoop:runTasks(), EmbeddedChannel:recordException(Throwable), EmbeddedEventLoop:runScheduledTasks(), EmbeddedChannel:recordException(Throwable)),
		EmbeddedChannel:runScheduledPendingTasks() to listOf(EmbeddedEventLoop:runScheduledTasks(), EmbeddedChannel:recordException(Throwable), EmbeddedEventLoop:nextScheduledTask()),
		EmbeddedChannel:recordException(Throwable) to listOf(InternalLogger:warn(String-Throwable)),
		EmbeddedChannel:checkException() to listOf(PlatformDependent:throwException(Throwable)),
		EmbeddedChannel:ensureOpen() to listOf(EmbeddedChannel:isOpen(), EmbeddedChannel:recordException(Throwable), EmbeddedChannel:checkException()),
		EmbeddedChannel:localAddress0() to listOf(EmbeddedChannel:isActive()),
		EmbeddedChannel:remoteAddress0() to listOf(EmbeddedChannel:isActive()),
		EmbeddedChannel:doDisconnect() to listOf(EmbeddedChannel:doClose()),
		EmbeddedChannel:newUnsafe() to listOf(EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel-EmbeddedChannel$1)),
		EmbeddedChannel:doWrite(ChannelOutboundBuffer) to listOf(ChannelOutboundBuffer:current(), ReferenceCountUtil:retain(Object), ChannelOutboundBuffer:remove()),
		EmbeddedChannel:access$300(EmbeddedChannel-Throwable) to listOf(EmbeddedChannel:recordException(Throwable)),
		EmbeddedChannel:<clinit>() to listOf(EmbeddedSocketAddress:<init>(), EmbeddedSocketAddress:<init>(), InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		DefaultChannelPipeline$2:run() to listOf(DefaultChannelPipeline:access$000(DefaultChannelPipeline-AbstractChannelHandlerContext-String-AbstractChannelHandlerContext)),
		ChannelOutboundBuffer$Entry:newInstance(Object-int-long-ChannelPromise) to listOf(Recycler:get()),
		ChannelOutboundBuffer$Entry:cancel() to listOf(ReferenceCountUtil:safeRelease(Object)),
		ChannelOutboundBuffer$Entry:recycle() to listOf(Recycler:recycle(Object-Recycler$Handle)),
		ChannelOutboundBuffer$Entry:recycleAndGetNext() to listOf(ChannelOutboundBuffer$Entry:recycle()),
		ChannelOutboundBuffer$Entry:<init>(Recycler$Handle-ChannelOutboundBuffer$1) to listOf(ChannelOutboundBuffer$Entry:<init>(Recycler$Handle)),
		ChannelOutboundBuffer$Entry:<clinit>() to listOf(ChannelOutboundBuffer$Entry$1:<init>()),
		AdaptiveRecvByteBufAllocator$HandleImpl:<init>(int-int-int) to listOf(AdaptiveRecvByteBufAllocator:access$000(int), AdaptiveRecvByteBufAllocator:access$100()),
		AdaptiveRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator) to listOf(ByteBufAllocator:ioBuffer(int)),
		AdaptiveRecvByteBufAllocator$HandleImpl:record(int) to listOf(AdaptiveRecvByteBufAllocator:access$100(), AdaptiveRecvByteBufAllocator:access$100(), AdaptiveRecvByteBufAllocator:access$100()),
		FixedRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator) to listOf(ByteBufAllocator:ioBuffer(int)),
		ChannelHandlerAppender:<init>() to listOf(ChannelHandlerAppender:<init>(boolean)),
		ChannelHandlerAppender:<init>(boolean) to listOf(ChannelHandlerAdapter:<init>()),
		ChannelHandlerAppender:<init>(Iterable) to listOf(ChannelHandlerAppender:<init>(boolean-Iterable)),
		ChannelHandlerAppender:<init>(ChannelHandler[]) to listOf(ChannelHandlerAppender:<init>(boolean-ChannelHandler[])),
		ChannelHandlerAppender:<init>(boolean-Iterable) to listOf(ChannelHandlerAdapter:<init>(), ChannelHandlerAppender:add(Iterable)),
		ChannelHandlerAppender:<init>(boolean-ChannelHandler[]) to listOf(ChannelHandlerAdapter:<init>(), ChannelHandlerAppender:add(ChannelHandler[])),
		ChannelHandlerAppender:add(String-ChannelHandler) to listOf(ChannelHandlerAppender$Entry:<init>(String-ChannelHandler)),
		ChannelHandlerAppender:add(ChannelHandler) to listOf(ChannelHandlerAppender:add(String-ChannelHandler)),
		ChannelHandlerAppender:add(Iterable) to listOf(ChannelHandlerAppender:add(ChannelHandler)),
		ChannelHandlerAppender:add(ChannelHandler[]) to listOf(ChannelHandlerAppender:add(ChannelHandler)),
		ChannelHandlerAppender:handlerAdded(ChannelHandlerContext) to listOf(AbstractChannelHandlerContext:pipeline(), AbstractChannelHandlerContext:name(), DefaultChannelPipeline:generateName(ChannelHandler), DefaultChannelPipeline:addAfter(ChannelHandlerInvoker-String-String-ChannelHandler), DefaultChannelPipeline:remove(ChannelHandler), DefaultChannelPipeline:remove(ChannelHandler)),
		DefaultChannelHandlerInvoker$13:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$13:run() to listOf(ChannelHandlerInvokerUtil:invokeCloseNow(ChannelHandlerContext-ChannelPromise)),
		MultithreadEventLoopGroup:<init>(int-Executor-Object[]) to listOf(MultithreadEventExecutorGroup:<init>(int-Executor-Object[])),
		MultithreadEventLoopGroup:<init>(int-ExecutorServiceFactory-Object[]) to listOf(MultithreadEventExecutorGroup:<init>(int-ExecutorServiceFactory-Object[])),
		MultithreadEventLoopGroup:next() to listOf(MultithreadEventExecutorGroup:next(), MultithreadEventLoopGroup:next()),
		MultithreadEventLoopGroup:register(Channel) to listOf(MultithreadEventLoopGroup:next(), EventLoop:register(Channel)),
		MultithreadEventLoopGroup:register(Channel-ChannelPromise) to listOf(MultithreadEventLoopGroup:next(), EventLoop:register(Channel-ChannelPromise)),
		MultithreadEventLoopGroup:newChild(Executor-Object[]) to listOf(MultithreadEventLoopGroup:newChild(Executor-Object[])),
		MultithreadEventLoopGroup:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getInt(String-int), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object)),
		DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler) to listOf(DefaultChannelHandlerContext:checkNull(ChannelHandler), DefaultChannelHandlerContext:skipFlags(ChannelHandler), AbstractChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-int)),
		AbstractEventLoopGroup:<init>() to listOf(AbstractEventExecutorGroup:<init>()),
		AbstractEventLoopGroup:next() to listOf(AbstractEventLoopGroup:next()),
		ThreadPerChannelEventLoop$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), ThreadPerChannelEventLoop:access$002(ThreadPerChannelEventLoop-Channel), ThreadPerChannelEventLoop:deregister()),
		ThreadPerChannelEventLoop$1:operationComplete(Future) to listOf(ThreadPerChannelEventLoop$1:operationComplete(ChannelFuture)),
		ChannelHandlerAdapter:isSharable() to listOf(InternalThreadLocalMap:get(), InternalThreadLocalMap:handlerSharableCache()),
		ChannelHandlerAdapter:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable)),
		ChannelHandlerAdapter:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelRegistered()),
		ChannelHandlerAdapter:channelUnregistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelUnregistered()),
		ChannelHandlerAdapter:channelActive(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelActive()),
		ChannelHandlerAdapter:channelInactive(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelInactive()),
		ChannelHandlerAdapter:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		ChannelHandlerAdapter:channelReadComplete(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelReadComplete()),
		ChannelHandlerAdapter:userEventTriggered(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireUserEventTriggered(Object)),
		ChannelHandlerAdapter:channelWritabilityChanged(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelWritabilityChanged()),
		ChannelHandlerAdapter:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		ChannelHandlerAdapter:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		ChannelHandlerAdapter:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:disconnect(ChannelPromise)),
		ChannelHandlerAdapter:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		ChannelHandlerAdapter:deregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:deregister(ChannelPromise)),
		ChannelHandlerAdapter:read(ChannelHandlerContext) to listOf(ChannelHandlerContext:read()),
		ChannelHandlerAdapter:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerContext:write(Object-ChannelPromise)),
		ChannelHandlerAdapter:flush(ChannelHandlerContext) to listOf(ChannelHandlerContext:flush()),
		DefaultChannelId:newInstance() to listOf(DefaultChannelId:<init>(), DefaultChannelId:init()),
		DefaultChannelId:defaultMachineId() to listOf(PlatformDependent:throwException(Throwable), InternalLogger:warn(String-Throwable), InternalLogger:debug(String-Object-Object), DefaultChannelId:compareAddresses(byte[]-byte[]), DefaultChannelId:compareAddresses(InetAddress-InetAddress), ThreadLocalRandom:current(), ThreadLocalRandom:nextBytes(byte[]), DefaultChannelId:formatAddress(byte[]), InternalLogger:warn(String-Object)),
		DefaultChannelId:compareAddresses(InetAddress-InetAddress) to listOf(DefaultChannelId:scoreAddress(InetAddress), DefaultChannelId:scoreAddress(InetAddress)),
		DefaultChannelId:defaultProcessId() to listOf(PlatformDependent:getSystemClassLoader(), InternalLogger:debug(String-Throwable), InternalLogger:debug(String-Throwable), ThreadLocalRandom:current(), ThreadLocalRandom:nextInt(int), InternalLogger:warn(String-Object-Object)),
		DefaultChannelId:init() to listOf(DefaultChannelId:writeInt(int-int), DefaultChannelId:writeInt(int-int), DefaultChannelId:writeLong(int-long), ThreadLocalRandom:current(), ThreadLocalRandom:nextInt(), DefaultChannelId:writeInt(int-int)),
		DefaultChannelId:asShortText() to listOf(ByteBufUtil:hexDump(byte[]-int-int)),
		DefaultChannelId:asLongText() to listOf(DefaultChannelId:newLongValue()),
		DefaultChannelId:newLongValue() to listOf(DefaultChannelId:appendHexDumpField(StringBuilder-int-int), DefaultChannelId:appendHexDumpField(StringBuilder-int-int), DefaultChannelId:appendHexDumpField(StringBuilder-int-int), DefaultChannelId:appendHexDumpField(StringBuilder-int-int), DefaultChannelId:appendHexDumpField(StringBuilder-int-int)),
		DefaultChannelId:appendHexDumpField(StringBuilder-int-int) to listOf(ByteBufUtil:hexDump(byte[]-int-int)),
		DefaultChannelId:toString() to listOf(DefaultChannelId:asShortText()),
		DefaultChannelId:compareTo(Object) to listOf(DefaultChannelId:compareTo(ChannelId)),
		DefaultChannelId:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:get(String), InternalLogger:warn(String-Object), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), DefaultChannelId:defaultProcessId(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), SystemPropertyUtil:get(String), DefaultChannelId:parseMachineId(String), InternalLogger:debug(String-Object), InternalLogger:warn(String-Object), DefaultChannelId:defaultMachineId(), InternalLogger:isDebugEnabled(), DefaultChannelId:formatAddress(byte[]), InternalLogger:debug(String-Object)),
		ChannelDuplexHandler:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		ThreadPerChannelEventLoop:<init>(ThreadPerChannelEventLoopGroup) to listOf(SingleThreadEventLoop:<init>(EventLoopGroup-Executor-boolean)),
		ThreadPerChannelEventLoop:register(Channel-ChannelPromise) to listOf(SingleThreadEventLoop:register(Channel-ChannelPromise), ThreadPerChannelEventLoop$1:<init>(ThreadPerChannelEventLoop), ChannelFuture:addListener(GenericFutureListener)),
		ThreadPerChannelEventLoop:run() to listOf(ThreadPerChannelEventLoop:takeTask(), ThreadPerChannelEventLoop:updateLastExecutionTime(), ThreadPerChannelEventLoop:isShuttingDown(), Channel:unsafe(), Channel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), ThreadPerChannelEventLoop:confirmShutdown(), ThreadPerChannelEventLoop:cleanupAndTerminate(boolean), Channel:isRegistered(), ThreadPerChannelEventLoop:runAllTasks(), ThreadPerChannelEventLoop:deregister()),
		DefaultChannelPipeline$4:run() to listOf(DefaultChannelPipeline:access$200(DefaultChannelPipeline-AbstractChannelHandlerContext)),
		AbstractChannel$CloseFuture:<init>(AbstractChannel) to listOf(DefaultChannelPromise:<init>(Channel)),
		AbstractChannel$CloseFuture:setFailure(Throwable) to listOf(AbstractChannel$CloseFuture:setFailure(Throwable)),
		AbstractChannel$CloseFuture:setClosed() to listOf(DefaultChannelPromise:trySuccess()),
		DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel) to listOf(DefaultChannelConfig:<init>(Channel)),
		DefaultSctpServerChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultSctpServerChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultSctpServerChannelConfig:getOption(ChannelOption) to listOf(DefaultSctpServerChannelConfig:getReceiveBufferSize(), DefaultSctpServerChannelConfig:getSendBufferSize(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultSctpServerChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultSctpServerChannelConfig:validate(ChannelOption-Object), DefaultSctpServerChannelConfig:setReceiveBufferSize(int), DefaultSctpServerChannelConfig:setSendBufferSize(int), DefaultSctpServerChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultSctpServerChannelConfig:getSendBufferSize() to listOf(SctpServerChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setSendBufferSize(int) to listOf(SctpServerChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:getReceiveBufferSize() to listOf(SctpServerChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setReceiveBufferSize(int) to listOf(SctpServerChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:getInitMaxStreams() to listOf(SctpServerChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams) to listOf(SctpServerChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultSctpServerChannelConfig:setMaxMessagesPerRead(int)),
		DefaultSctpServerChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultSctpServerChannelConfig:setWriteSpinCount(int)),
		DefaultSctpServerChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultSctpServerChannelConfig:setConnectTimeoutMillis(int)),
		DefaultSctpServerChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultSctpServerChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultSctpServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSctpServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultSctpServerChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultSctpServerChannelConfig:setAutoRead(boolean)),
		DefaultSctpServerChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultSctpServerChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultSctpServerChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultSctpServerChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultSctpServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultSctpServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		SctpMessage:<init>(int-int-ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf)),
		SctpMessage:<init>(MessageInfo-ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf), MessageInfo:streamNumber(), MessageInfo:payloadProtocolID()),
		SctpMessage:isComplete() to listOf(MessageInfo:isComplete()),
		SctpMessage:equals(Object) to listOf(SctpMessage:content(), SctpMessage:content(), ByteBuf:equals(Object)),
		SctpMessage:hashCode() to listOf(SctpMessage:content(), ByteBuf:hashCode()),
		SctpMessage:copy() to listOf(SctpMessage:content(), ByteBuf:copy(), SctpMessage:<init>(int-int-ByteBuf), SctpMessage:content(), ByteBuf:copy(), SctpMessage:<init>(MessageInfo-ByteBuf), SctpMessage:copy()),
		SctpMessage:duplicate() to listOf(SctpMessage:content(), ByteBuf:duplicate(), SctpMessage:<init>(int-int-ByteBuf), SctpMessage:content(), ByteBuf:copy(), SctpMessage:<init>(MessageInfo-ByteBuf), SctpMessage:duplicate()),
		SctpMessage:retain() to listOf(DefaultByteBufHolder:retain(), SctpMessage:retain(), SctpMessage:retain()),
		SctpMessage:retain(int) to listOf(DefaultByteBufHolder:retain(int), SctpMessage:retain(int), SctpMessage:retain(int)),
		SctpMessage:touch() to listOf(DefaultByteBufHolder:touch(), SctpMessage:touch(), SctpMessage:touch()),
		SctpMessage:touch(Object) to listOf(DefaultByteBufHolder:touch(Object), SctpMessage:touch(Object), SctpMessage:touch(Object)),
		SctpMessage:toString() to listOf(SctpMessage:refCnt(), SctpMessage:content(), ByteBufUtil:hexDump(ByteBuf)),
		OioSctpServerChannel:newServerSocket() to listOf(SctpServerChannel:open(), ChannelException:<init>(String-Throwable)),
		OioSctpServerChannel:<init>() to listOf(OioSctpServerChannel:newServerSocket(), OioSctpServerChannel:<init>(SctpServerChannel)),
		OioSctpServerChannel:<init>(SctpServerChannel) to listOf(AbstractOioMessageChannel:<init>(Channel), SctpServerChannel:configureBlocking(boolean), SctpServerChannel:register(Selector-int), OioSctpServerChannel$OioSctpServerChannelConfig:<init>(OioSctpServerChannel-OioSctpServerChannel-SctpServerChannel-OioSctpServerChannel$1), SctpServerChannel:close(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), SctpServerChannel:close(), InternalLogger:warn(String-Throwable)),
		OioSctpServerChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioSctpServerChannel:localAddress()),
		OioSctpServerChannel:isOpen() to listOf(SctpServerChannel:isOpen()),
		OioSctpServerChannel:localAddress0() to listOf(SctpServerChannel:getAllLocalAddresses()),
		OioSctpServerChannel:allLocalAddresses() to listOf(SctpServerChannel:getAllLocalAddresses()),
		OioSctpServerChannel:isActive() to listOf(OioSctpServerChannel:isOpen(), OioSctpServerChannel:localAddress0()),
		OioSctpServerChannel:doBind(SocketAddress) to listOf(SctpServerChannelConfig:getBacklog(), SctpServerChannel:bind(SocketAddress-int)),
		OioSctpServerChannel:doClose() to listOf(InternalLogger:warn(String-Throwable), SctpServerChannel:close()),
		OioSctpServerChannel:doReadMessages(List) to listOf(OioSctpServerChannel:isActive(), SctpServerChannel:accept(), OioSctpChannel:<init>(Channel-SctpChannel), InternalLogger:warn(String-Throwable), SctpChannel:close(), InternalLogger:warn(String-Throwable)),
		OioSctpServerChannel:bindAddress(InetAddress) to listOf(OioSctpServerChannel:newPromise(), OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise) to listOf(OioSctpServerChannel:eventLoop(), EventLoop:inEventLoop(), SctpServerChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpServerChannel:eventLoop(), OioSctpServerChannel$1:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpServerChannel:unbindAddress(InetAddress) to listOf(OioSctpServerChannel:newPromise(), OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(OioSctpServerChannel:eventLoop(), EventLoop:inEventLoop(), SctpServerChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpServerChannel:eventLoop(), OioSctpServerChannel$2:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpServerChannel:remoteAddress() to listOf(OioSctpServerChannel:remoteAddress()),
		OioSctpServerChannel:config() to listOf(OioSctpServerChannel:config()),
		OioSctpServerChannel:access$100(OioSctpServerChannel-boolean) to listOf(OioSctpServerChannel:setReadPending(boolean)),
		OioSctpServerChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		OioSctpChannel:openChannel() to listOf(SctpChannel:open(), ChannelException:<init>(String-Throwable)),
		OioSctpChannel:<init>() to listOf(OioSctpChannel:openChannel(), OioSctpChannel:<init>(SctpChannel)),
		OioSctpChannel:<init>(SctpChannel) to listOf(OioSctpChannel:<init>(Channel-SctpChannel)),
		OioSctpChannel:<init>(Channel-SctpChannel) to listOf(AbstractOioMessageChannel:<init>(Channel), SctpChannel:configureBlocking(boolean), SctpChannel:register(Selector-int), SctpChannel:register(Selector-int), SctpChannel:register(Selector-int), OioSctpChannel$OioSctpChannelConfig:<init>(OioSctpChannel-OioSctpChannel-SctpChannel-OioSctpChannel$1), SctpNotificationHandler:<init>(SctpChannel), SctpChannel:close(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), SctpChannel:close(), InternalLogger:warn(String-Throwable)),
		OioSctpChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioSctpChannel:localAddress()),
		OioSctpChannel:remoteAddress() to listOf(AbstractOioMessageChannel:remoteAddress(), OioSctpChannel:remoteAddress()),
		OioSctpChannel:parent() to listOf(AbstractOioMessageChannel:parent(), OioSctpChannel:parent()),
		OioSctpChannel:isOpen() to listOf(SctpChannel:isOpen()),
		OioSctpChannel:doReadMessages(List) to listOf(OioSctpChannel:unsafe(), Channel$Unsafe:recvBufAllocHandle(), OioSctpChannel:config(), SctpChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBuffer(int-int), SctpChannel:receive(ByteBuffer-Object-NotificationHandler), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), SctpMessage:<init>(MessageInfo-ByteBuf), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release()),
		OioSctpChannel:doWrite(ChannelOutboundBuffer) to listOf(ChannelOutboundBuffer:size(), ChannelOutboundBuffer:current(), SctpMessage:content(), ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-ByteBuffer), OioSctpChannel:association(), SctpMessage:streamIdentifier(), MessageInfo:createOutgoing(Association-SocketAddress-int), SctpMessage:protocolIdentifier(), MessageInfo:payloadProtocolID(int), SctpMessage:streamIdentifier(), MessageInfo:streamNumber(int), SctpChannel:send(ByteBuffer-MessageInfo), ChannelOutboundBuffer:remove()),
		OioSctpChannel:filterOutboundMessage(Object) to listOf(StringUtil:simpleClassName(Object)),
		OioSctpChannel:association() to listOf(SctpChannel:association()),
		OioSctpChannel:isActive() to listOf(OioSctpChannel:isOpen(), OioSctpChannel:association()),
		OioSctpChannel:localAddress0() to listOf(SctpChannel:getAllLocalAddresses()),
		OioSctpChannel:allLocalAddresses() to listOf(SctpChannel:getAllLocalAddresses()),
		OioSctpChannel:remoteAddress0() to listOf(SctpChannel:getRemoteAddresses()),
		OioSctpChannel:allRemoteAddresses() to listOf(SctpChannel:getRemoteAddresses()),
		OioSctpChannel:doBind(SocketAddress) to listOf(SctpChannel:bind(SocketAddress)),
		OioSctpChannel:doConnect(SocketAddress-SocketAddress) to listOf(SctpChannel:bind(SocketAddress), SctpChannel:connect(SocketAddress), SctpChannel:finishConnect(), OioSctpChannel:doClose(), OioSctpChannel:doClose()),
		OioSctpChannel:doDisconnect() to listOf(OioSctpChannel:doClose()),
		OioSctpChannel:doClose() to listOf(OioSctpChannel:closeSelector(String-Selector), OioSctpChannel:closeSelector(String-Selector), OioSctpChannel:closeSelector(String-Selector), SctpChannel:close()),
		OioSctpChannel:closeSelector(String-Selector) to listOf(InternalLogger:warn(String-Throwable)),
		OioSctpChannel:bindAddress(InetAddress) to listOf(OioSctpChannel:newPromise(), OioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel:bindAddress(InetAddress-ChannelPromise) to listOf(OioSctpChannel:eventLoop(), EventLoop:inEventLoop(), SctpChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpChannel:eventLoop(), OioSctpChannel$1:<init>(OioSctpChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpChannel:unbindAddress(InetAddress) to listOf(OioSctpChannel:newPromise(), OioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(OioSctpChannel:eventLoop(), EventLoop:inEventLoop(), SctpChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpChannel:eventLoop(), OioSctpChannel$2:<init>(OioSctpChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpChannel:config() to listOf(OioSctpChannel:config()),
		OioSctpChannel:access$100(OioSctpChannel-boolean) to listOf(OioSctpChannel:setReadPending(boolean)),
		OioSctpChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean), StringUtil:simpleClassName(Class)),
		OioSctpServerChannel$2:run() to listOf(OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel$1:run() to listOf(OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel$2:run() to listOf(OioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel$OioSctpServerChannelConfig:<init>(OioSctpServerChannel-OioSctpServerChannel-SctpServerChannel) to listOf(DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel)),
		OioSctpServerChannel$OioSctpServerChannelConfig:autoReadCleared() to listOf(OioSctpServerChannel:access$100(OioSctpServerChannel-boolean)),
		OioSctpServerChannel$OioSctpServerChannelConfig:<init>(OioSctpServerChannel-OioSctpServerChannel-SctpServerChannel-OioSctpServerChannel$1) to listOf(OioSctpServerChannel$OioSctpServerChannelConfig:<init>(OioSctpServerChannel-OioSctpServerChannel-SctpServerChannel)),
		OioSctpChannel$1:run() to listOf(OioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel$OioSctpChannelConfig:<init>(OioSctpChannel-OioSctpChannel-SctpChannel) to listOf(DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel)),
		OioSctpChannel$OioSctpChannelConfig:autoReadCleared() to listOf(OioSctpChannel:access$100(OioSctpChannel-boolean)),
		OioSctpChannel$OioSctpChannelConfig:<init>(OioSctpChannel-OioSctpChannel-SctpChannel-OioSctpChannel$1) to listOf(OioSctpChannel$OioSctpChannelConfig:<init>(OioSctpChannel-OioSctpChannel-SctpChannel)),
		DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel) to listOf(DefaultChannelConfig:<init>(Channel), PlatformDependent:canEnableTcpNoDelayByDefault(), DefaultSctpChannelConfig:setSctpNoDelay(boolean)),
		DefaultSctpChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultSctpChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultSctpChannelConfig:getOption(ChannelOption) to listOf(DefaultSctpChannelConfig:getReceiveBufferSize(), DefaultSctpChannelConfig:getSendBufferSize(), DefaultSctpChannelConfig:isSctpNoDelay(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultSctpChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultSctpChannelConfig:validate(ChannelOption-Object), DefaultSctpChannelConfig:setReceiveBufferSize(int), DefaultSctpChannelConfig:setSendBufferSize(int), DefaultSctpChannelConfig:setSctpNoDelay(boolean), DefaultSctpChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultSctpChannelConfig:isSctpNoDelay() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setSctpNoDelay(boolean) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:getSendBufferSize() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setSendBufferSize(int) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:getReceiveBufferSize() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setReceiveBufferSize(int) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:getInitMaxStreams() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultSctpChannelConfig:setConnectTimeoutMillis(int)),
		DefaultSctpChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultSctpChannelConfig:setMaxMessagesPerRead(int)),
		DefaultSctpChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultSctpChannelConfig:setWriteSpinCount(int)),
		DefaultSctpChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultSctpChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultSctpChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSctpChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultSctpChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultSctpChannelConfig:setAutoRead(boolean)),
		DefaultSctpChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultSctpChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultSctpChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultSctpChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultSctpChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultSctpChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		SctpNotificationHandler:<init>(SctpChannel) to listOf(AbstractNotificationHandler:<init>()),
		SctpNotificationHandler:handleNotification(AssociationChangeNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification)),
		SctpNotificationHandler:handleNotification(PeerAddressChangeNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification)),
		SctpNotificationHandler:handleNotification(SendFailedNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification)),
		SctpNotificationHandler:handleNotification(ShutdownNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification), SctpChannel:close()),
		SctpNotificationHandler:fireEvent(Notification) to listOf(SctpChannel:pipeline(), ChannelPipeline:fireUserEventTriggered(Object)),
		SctpChannelOption:<clinit>() to listOf(ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String)),
		NioSctpChannel$1:run() to listOf(NioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel$NioSctpChannelConfig:<init>(NioSctpChannel-NioSctpChannel-SctpChannel) to listOf(DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel)),
		NioSctpChannel$NioSctpChannelConfig:autoReadCleared() to listOf(NioSctpChannel:access$100(NioSctpChannel-boolean)),
		NioSctpChannel$NioSctpChannelConfig:<init>(NioSctpChannel-NioSctpChannel-SctpChannel-NioSctpChannel$1) to listOf(NioSctpChannel$NioSctpChannelConfig:<init>(NioSctpChannel-NioSctpChannel-SctpChannel)),
		NioSctpChannel$2:run() to listOf(NioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel$2:run() to listOf(NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel:newSctpChannel() to listOf(SctpChannel:open(), ChannelException:<init>(String-Throwable)),
		NioSctpChannel:<init>() to listOf(NioSctpChannel:newSctpChannel(), NioSctpChannel:<init>(SctpChannel)),
		NioSctpChannel:<init>(SctpChannel) to listOf(NioSctpChannel:<init>(Channel-SctpChannel)),
		NioSctpChannel:<init>(Channel-SctpChannel) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), SctpChannel:configureBlocking(boolean), NioSctpChannel$NioSctpChannelConfig:<init>(NioSctpChannel-NioSctpChannel-SctpChannel-NioSctpChannel$1), SctpNotificationHandler:<init>(SctpChannel), SctpChannel:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioSctpChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioSctpChannel:localAddress()),
		NioSctpChannel:remoteAddress() to listOf(AbstractNioMessageChannel:remoteAddress(), NioSctpChannel:remoteAddress()),
		NioSctpChannel:parent() to listOf(AbstractNioMessageChannel:parent(), NioSctpChannel:parent()),
		NioSctpChannel:association() to listOf(NioSctpChannel:javaChannel(), SctpChannel:association()),
		NioSctpChannel:allLocalAddresses() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getAllLocalAddresses()),
		NioSctpChannel:allRemoteAddresses() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getRemoteAddresses()),
		NioSctpChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioSctpChannel:javaChannel()),
		NioSctpChannel:isActive() to listOf(NioSctpChannel:javaChannel(), SctpChannel:isOpen(), NioSctpChannel:association()),
		NioSctpChannel:localAddress0() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getAllLocalAddresses()),
		NioSctpChannel:remoteAddress0() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getRemoteAddresses()),
		NioSctpChannel:doBind(SocketAddress) to listOf(NioSctpChannel:javaChannel(), SctpChannel:bind(SocketAddress)),
		NioSctpChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioSctpChannel:javaChannel(), SctpChannel:bind(SocketAddress), NioSctpChannel:javaChannel(), SctpChannel:connect(SocketAddress), NioSctpChannel:selectionKey(), NioSctpChannel:doClose(), NioSctpChannel:doClose()),
		NioSctpChannel:doFinishConnect() to listOf(NioSctpChannel:javaChannel(), SctpChannel:finishConnect()),
		NioSctpChannel:doDisconnect() to listOf(NioSctpChannel:doClose()),
		NioSctpChannel:doClose() to listOf(NioSctpChannel:javaChannel(), SctpChannel:close()),
		NioSctpChannel:doReadMessages(List) to listOf(NioSctpChannel:javaChannel(), NioSctpChannel:unsafe(), AbstractNioChannel$NioUnsafe:recvBufAllocHandle(), NioSctpChannel:config(), SctpChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:internalNioBuffer(int-int), SctpChannel:receive(ByteBuffer-Object-NotificationHandler), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), SctpMessage:<init>(MessageInfo-ByteBuf), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release()),
		NioSctpChannel:doWriteMessage(Object-ChannelOutboundBuffer) to listOf(SctpMessage:content(), ByteBuf:readableBytes(), NioSctpChannel:alloc(), ByteBuf:nioBufferCount(), ByteBuf:isDirect(), ByteBufAllocator:isDirectBufferPooled(), ByteBuf:nioBuffer(), ByteBufAllocator:directBuffer(int), ByteBuf:writeBytes(ByteBuf), ByteBuf:nioBuffer(), NioSctpChannel:association(), SctpMessage:streamIdentifier(), MessageInfo:createOutgoing(Association-SocketAddress-int), SctpMessage:protocolIdentifier(), MessageInfo:payloadProtocolID(int), SctpMessage:streamIdentifier(), MessageInfo:streamNumber(int), NioSctpChannel:javaChannel(), SctpChannel:send(ByteBuffer-MessageInfo)),
		NioSctpChannel:filterOutboundMessage(Object) to listOf(SctpMessage:content(), ByteBuf:isDirect(), ByteBuf:nioBufferCount(), SctpMessage:protocolIdentifier(), SctpMessage:streamIdentifier(), NioSctpChannel:newDirectBuffer(ReferenceCounted-ByteBuf), SctpMessage:<init>(int-int-ByteBuf), StringUtil:simpleClassName(Object), StringUtil:simpleClassName(Class)),
		NioSctpChannel:bindAddress(InetAddress) to listOf(NioSctpChannel:newPromise(), NioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel:bindAddress(InetAddress-ChannelPromise) to listOf(NioSctpChannel:eventLoop(), EventLoop:inEventLoop(), NioSctpChannel:javaChannel(), SctpChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpChannel:eventLoop(), NioSctpChannel$1:<init>(NioSctpChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		NioSctpChannel:unbindAddress(InetAddress) to listOf(NioSctpChannel:newPromise(), NioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(NioSctpChannel:eventLoop(), EventLoop:inEventLoop(), NioSctpChannel:javaChannel(), SctpChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpChannel:eventLoop(), NioSctpChannel$2:<init>(NioSctpChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		NioSctpChannel:config() to listOf(NioSctpChannel:config()),
		NioSctpChannel:access$100(NioSctpChannel-boolean) to listOf(NioSctpChannel:setReadPending(boolean)),
		NioSctpChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), InternalLoggerFactory:getInstance(Class)),
		NioSctpServerChannel$1:run() to listOf(NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel$NioSctpServerChannelConfig:<init>(NioSctpServerChannel-NioSctpServerChannel-SctpServerChannel) to listOf(DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel)),
		NioSctpServerChannel$NioSctpServerChannelConfig:autoReadCleared() to listOf(NioSctpServerChannel:access$100(NioSctpServerChannel-boolean)),
		NioSctpServerChannel$NioSctpServerChannelConfig:<init>(NioSctpServerChannel-NioSctpServerChannel-SctpServerChannel-NioSctpServerChannel$1) to listOf(NioSctpServerChannel$NioSctpServerChannelConfig:<init>(NioSctpServerChannel-NioSctpServerChannel-SctpServerChannel)),
		NioSctpServerChannel:newSocket() to listOf(SctpServerChannel:open(), ChannelException:<init>(String-Throwable)),
		NioSctpServerChannel:<init>() to listOf(NioSctpServerChannel:newSocket(), AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), NioSctpServerChannel:javaChannel(), NioSctpServerChannel$NioSctpServerChannelConfig:<init>(NioSctpServerChannel-NioSctpServerChannel-SctpServerChannel-NioSctpServerChannel$1)),
		NioSctpServerChannel:allLocalAddresses() to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:getAllLocalAddresses()),
		NioSctpServerChannel:isActive() to listOf(NioSctpServerChannel:isOpen(), NioSctpServerChannel:allLocalAddresses()),
		NioSctpServerChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioSctpServerChannel:localAddress()),
		NioSctpServerChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioSctpServerChannel:javaChannel()),
		NioSctpServerChannel:localAddress0() to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:getAllLocalAddresses()),
		NioSctpServerChannel:doBind(SocketAddress) to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannelConfig:getBacklog(), SctpServerChannel:bind(SocketAddress-int)),
		NioSctpServerChannel:doClose() to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:close()),
		NioSctpServerChannel:doReadMessages(List) to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:accept(), NioSctpChannel:<init>(Channel-SctpChannel)),
		NioSctpServerChannel:bindAddress(InetAddress) to listOf(NioSctpServerChannel:newPromise(), NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise) to listOf(NioSctpServerChannel:eventLoop(), EventLoop:inEventLoop(), NioSctpServerChannel:javaChannel(), SctpServerChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpServerChannel:eventLoop(), NioSctpServerChannel$1:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		NioSctpServerChannel:unbindAddress(InetAddress) to listOf(NioSctpServerChannel:newPromise(), NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(NioSctpServerChannel:eventLoop(), EventLoop:inEventLoop(), NioSctpServerChannel:javaChannel(), SctpServerChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpServerChannel:eventLoop(), NioSctpServerChannel$2:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		NioSctpServerChannel:remoteAddress() to listOf(NioSctpServerChannel:remoteAddress()),
		NioSctpServerChannel:config() to listOf(NioSctpServerChannel:config()),
		NioSctpServerChannel:access$100(NioSctpServerChannel-boolean) to listOf(NioSctpServerChannel:setReadPending(boolean)),
		NioSctpServerChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		AbstractChannel:<init>(Channel) to listOf(DefaultAttributeMap:<init>(), SucceededChannelFuture:<init>(Channel-EventExecutor), VoidChannelPromise:<init>(Channel-boolean), VoidChannelPromise:<init>(Channel-boolean), AbstractChannel$CloseFuture:<init>(AbstractChannel), DefaultChannelId:newInstance(), AbstractChannel:newUnsafe(), DefaultChannelPipeline:<init>(AbstractChannel)),
		AbstractChannel:<init>(Channel-ChannelId) to listOf(DefaultAttributeMap:<init>(), SucceededChannelFuture:<init>(Channel-EventExecutor), VoidChannelPromise:<init>(Channel-boolean), VoidChannelPromise:<init>(Channel-boolean), AbstractChannel$CloseFuture:<init>(AbstractChannel), AbstractChannel:newUnsafe(), DefaultChannelPipeline:<init>(AbstractChannel)),
		AbstractChannel:isWritable() to listOf(Channel$Unsafe:outboundBuffer(), ChannelOutboundBuffer:isWritable()),
		AbstractChannel:alloc() to listOf(AbstractChannel:config(), ChannelConfig:getAllocator()),
		AbstractChannel:localAddress() to listOf(AbstractChannel:unsafe(), Channel$Unsafe:localAddress()),
		AbstractChannel:remoteAddress() to listOf(AbstractChannel:unsafe(), Channel$Unsafe:remoteAddress()),
		AbstractChannel:bind(SocketAddress) to listOf(DefaultChannelPipeline:bind(SocketAddress)),
		AbstractChannel:connect(SocketAddress) to listOf(DefaultChannelPipeline:connect(SocketAddress)),
		AbstractChannel:connect(SocketAddress-SocketAddress) to listOf(DefaultChannelPipeline:connect(SocketAddress-SocketAddress)),
		AbstractChannel:disconnect() to listOf(DefaultChannelPipeline:disconnect()),
		AbstractChannel:close() to listOf(DefaultChannelPipeline:close()),
		AbstractChannel:deregister() to listOf(AbstractChannel$PausableChannelEventLoop:rejectNewTasks(), DefaultChannelPipeline:deregister()),
		AbstractChannel:flush() to listOf(DefaultChannelPipeline:flush()),
		AbstractChannel:bind(SocketAddress-ChannelPromise) to listOf(DefaultChannelPipeline:bind(SocketAddress-ChannelPromise)),
		AbstractChannel:connect(SocketAddress-ChannelPromise) to listOf(DefaultChannelPipeline:connect(SocketAddress-ChannelPromise)),
		AbstractChannel:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(DefaultChannelPipeline:connect(SocketAddress-SocketAddress-ChannelPromise)),
		AbstractChannel:disconnect(ChannelPromise) to listOf(DefaultChannelPipeline:disconnect(ChannelPromise)),
		AbstractChannel:close(ChannelPromise) to listOf(DefaultChannelPipeline:close(ChannelPromise)),
		AbstractChannel:deregister(ChannelPromise) to listOf(AbstractChannel$PausableChannelEventLoop:rejectNewTasks(), DefaultChannelPipeline:deregister(ChannelPromise)),
		AbstractChannel:read() to listOf(DefaultChannelPipeline:read()),
		AbstractChannel:write(Object) to listOf(DefaultChannelPipeline:write(Object)),
		AbstractChannel:write(Object-ChannelPromise) to listOf(DefaultChannelPipeline:write(Object-ChannelPromise)),
		AbstractChannel:writeAndFlush(Object) to listOf(DefaultChannelPipeline:writeAndFlush(Object)),
		AbstractChannel:writeAndFlush(Object-ChannelPromise) to listOf(DefaultChannelPipeline:writeAndFlush(Object-ChannelPromise)),
		AbstractChannel:newPromise() to listOf(DefaultChannelPromise:<init>(Channel)),
		AbstractChannel:newProgressivePromise() to listOf(DefaultChannelProgressivePromise:<init>(Channel)),
		AbstractChannel:newFailedFuture(Throwable) to listOf(FailedChannelFuture:<init>(Channel-EventExecutor-Throwable)),
		AbstractChannel:compareTo(Channel) to listOf(AbstractChannel:id(), Channel:id(), ChannelId:compareTo(Object)),
		AbstractChannel:toString() to listOf(AbstractChannel:isActive(), AbstractChannel:remoteAddress(), AbstractChannel:localAddress(), ChannelId:asShortText(), ChannelId:asShortText(), ChannelId:asShortText()),
		AbstractChannel:estimatorHandle() to listOf(AbstractChannel:config(), ChannelConfig:getMessageSizeEstimator(), MessageSizeEstimator:newHandle()),
		AbstractChannel:compareTo(Object) to listOf(AbstractChannel:compareTo(Channel)),
		AbstractChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf$1:newObject(Recycler$Handle) to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle-ThreadLocalPooledDirectByteBuf$1), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf$1:newObject(Recycler$Handle)),
		DefaultMessageSizeEstimator$HandleImpl:size(Object) to listOf(ByteBuf:readableBytes(), ByteBufHolder:content(), ByteBuf:readableBytes()),
		DefaultMessageSizeEstimator$HandleImpl:<init>(int-DefaultMessageSizeEstimator$1) to listOf(DefaultMessageSizeEstimator$HandleImpl:<init>(int)),
		ChannelOutboundBuffer$1:<init>() to listOf(FastThreadLocal:<init>()),
		ChannelOutboundBuffer$1:initialValue() to listOf(ChannelOutboundBuffer$1:initialValue()),
		AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		AbstractServerChannel$DefaultServerUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(AbstractServerChannel$DefaultServerUnsafe:safeSetFailure(ChannelPromise-Throwable)),
		AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel-AbstractServerChannel$1) to listOf(AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel)),
		ThreadPerChannelEventLoopGroup:<init>() to listOf(ThreadPerChannelEventLoopGroup:<init>(int)),
		ThreadPerChannelEventLoopGroup:<init>(int) to listOf(ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[])),
		ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[]) to listOf(ThreadPerTaskExecutor:<init>(ThreadFactory), ThreadPerChannelEventLoopGroup:<init>(int-Executor-Object[])),
		ThreadPerChannelEventLoopGroup:<init>(int-Executor-Object[]) to listOf(AbstractEventExecutorGroup:<init>(), PlatformDependent:newConcurrentHashMap(), DefaultPromise:<init>(EventExecutor), ThreadPerChannelEventLoopGroup$1:<init>(ThreadPerChannelEventLoopGroup), ChannelException:<init>(String), ChannelException:setStackTrace(StackTraceElement[])),
		ThreadPerChannelEventLoopGroup:newChild(Object[]) to listOf(ThreadPerChannelEventLoop:<init>(ThreadPerChannelEventLoopGroup)),
		ThreadPerChannelEventLoopGroup:next() to listOf(ThreadPerChannelEventLoopGroup:next()),
		ThreadPerChannelEventLoopGroup:shutdownGracefully(long-long-TimeUnit) to listOf(EventLoop:shutdownGracefully(long-long-TimeUnit), EventLoop:shutdownGracefully(long-long-TimeUnit), ThreadPerChannelEventLoopGroup:isTerminated(), Promise:trySuccess(Object), ThreadPerChannelEventLoopGroup:terminationFuture()),
		ThreadPerChannelEventLoopGroup:shutdown() to listOf(EventLoop:shutdown(), EventLoop:shutdown(), ThreadPerChannelEventLoopGroup:isTerminated(), Promise:trySuccess(Object)),
		ThreadPerChannelEventLoopGroup:isShuttingDown() to listOf(EventLoop:isShuttingDown(), EventLoop:isShuttingDown()),
		ThreadPerChannelEventLoopGroup:isShutdown() to listOf(EventLoop:isShutdown(), EventLoop:isShutdown()),
		ThreadPerChannelEventLoopGroup:isTerminated() to listOf(EventLoop:isTerminated(), EventLoop:isTerminated()),
		ThreadPerChannelEventLoopGroup:awaitTermination(long-TimeUnit) to listOf(ThreadPerChannelEventLoopGroup:isTerminated(), EventLoop:awaitTermination(long-TimeUnit), ThreadPerChannelEventLoopGroup:isTerminated(), EventLoop:awaitTermination(long-TimeUnit), ThreadPerChannelEventLoopGroup:isTerminated()),
		ThreadPerChannelEventLoopGroup:register(Channel) to listOf(ThreadPerChannelEventLoopGroup:nextChild(), DefaultChannelPromise:<init>(Channel-EventExecutor), EventLoop:register(Channel-ChannelPromise), FailedChannelFuture:<init>(Channel-EventExecutor-Throwable)),
		ThreadPerChannelEventLoopGroup:register(Channel-ChannelPromise) to listOf(ThreadPerChannelEventLoopGroup:nextChild(), EventLoop:register(Channel-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		ThreadPerChannelEventLoopGroup:nextChild() to listOf(ThreadPerChannelEventLoopGroup:newChild(Object[]), EventLoop:terminationFuture(), Future:addListener(GenericFutureListener)),
		ChannelPipelineException:<init>() to listOf(ChannelException:<init>()),
		ChannelPipelineException:<init>(String-Throwable) to listOf(ChannelException:<init>(String-Throwable)),
		ChannelPipelineException:<init>(String) to listOf(ChannelException:<init>(String)),
		ChannelPipelineException:<init>(Throwable) to listOf(ChannelException:<init>(Throwable)),
		DefaultChannelHandlerInvoker$15:run() to listOf(ChannelHandlerInvokerUtil:invokeReadNow(ChannelHandlerContext)),
		DefaultChannelHandlerInvoker$5:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Throwable) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$5:run() to listOf(ChannelHandlerInvokerUtil:invokeExceptionCaughtNow(ChannelHandlerContext-Throwable)),
		DefaultEventLoop:<init>() to listOf(DefaultEventLoop:<init>(EventLoopGroup)),
		DefaultEventLoop:<init>(Executor) to listOf(DefaultEventLoop:<init>(EventLoopGroup-Executor)),
		DefaultEventLoop:<init>(EventLoopGroup) to listOf(DefaultExecutorServiceFactory:<init>(Class), DefaultExecutorServiceFactory:newExecutorService(int), DefaultEventLoop:<init>(EventLoopGroup-Executor)),
		DefaultEventLoop:<init>(EventLoopGroup-Executor) to listOf(SingleThreadEventLoop:<init>(EventLoopGroup-Executor-boolean)),
		DefaultEventLoop:run() to listOf(DefaultEventLoop:takeTask(), DefaultEventLoop:updateLastExecutionTime(), DefaultEventLoop:confirmShutdown(), DefaultEventLoop:cleanupAndTerminate(boolean), DefaultEventLoop:scheduleExecution()),
		PausableChannelEventExecutor:invokeFlush(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeFlush(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeChannelRegistered(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeChannelRegistered(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeChannelUnregistered(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeChannelUnregistered(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeChannelActive(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeChannelActive(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeChannelInactive(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeChannelInactive(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeExceptionCaught(ChannelHandlerContext-Throwable) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeExceptionCaught(ChannelHandlerContext-Throwable)),
		PausableChannelEventExecutor:invokeUserEventTriggered(ChannelHandlerContext-Object) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeUserEventTriggered(ChannelHandlerContext-Object)),
		PausableChannelEventExecutor:invokeChannelRead(ChannelHandlerContext-Object) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeChannelRead(ChannelHandlerContext-Object)),
		PausableChannelEventExecutor:invokeChannelReadComplete(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeChannelReadComplete(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeChannelWritabilityChanged(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeChannelWritabilityChanged(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise)),
		PausableChannelEventExecutor:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise)),
		PausableChannelEventExecutor:invokeDisconnect(ChannelHandlerContext-ChannelPromise) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeDisconnect(ChannelHandlerContext-ChannelPromise)),
		PausableChannelEventExecutor:invokeClose(ChannelHandlerContext-ChannelPromise) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeClose(ChannelHandlerContext-ChannelPromise)),
		PausableChannelEventExecutor:invokeDeregister(ChannelHandlerContext-ChannelPromise) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeDeregister(ChannelHandlerContext-ChannelPromise)),
		PausableChannelEventExecutor:invokeRead(ChannelHandlerContext) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeRead(ChannelHandlerContext)),
		PausableChannelEventExecutor:invokeWrite(ChannelHandlerContext-Object-ChannelPromise) to listOf(PausableChannelEventExecutor:unwrapInvoker(), ChannelHandlerInvoker:invokeWrite(ChannelHandlerContext-Object-ChannelPromise)),
		PausableChannelEventExecutor:next() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:next()),
		PausableChannelEventExecutor:children() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:children()),
		PausableChannelEventExecutor:parent() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:parent()),
		PausableChannelEventExecutor:inEventLoop() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:inEventLoop()),
		PausableChannelEventExecutor:inEventLoop(Thread) to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:inEventLoop(Thread)),
		PausableChannelEventExecutor:newPromise() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:newPromise()),
		PausableChannelEventExecutor:newProgressivePromise() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:newProgressivePromise()),
		PausableChannelEventExecutor:newSucceededFuture(Object) to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:newSucceededFuture(Object)),
		PausableChannelEventExecutor:newFailedFuture(Throwable) to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:newFailedFuture(Throwable)),
		PausableChannelEventExecutor:isShuttingDown() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:isShuttingDown()),
		PausableChannelEventExecutor:shutdownGracefully() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:shutdownGracefully()),
		PausableChannelEventExecutor:shutdownGracefully(long-long-TimeUnit) to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:shutdownGracefully(long-long-TimeUnit)),
		PausableChannelEventExecutor:terminationFuture() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:terminationFuture()),
		PausableChannelEventExecutor:shutdown() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:shutdown()),
		PausableChannelEventExecutor:shutdownNow() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:shutdownNow()),
		PausableChannelEventExecutor:submit(Runnable) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:submit(Runnable), PausableChannelEventExecutor:submit(Runnable)),
		PausableChannelEventExecutor:submit(Runnable-Object) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:submit(Runnable-Object), PausableChannelEventExecutor:submit(Runnable-Object)),
		PausableChannelEventExecutor:submit(Callable) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:submit(Callable), PausableChannelEventExecutor:submit(Callable)),
		PausableChannelEventExecutor:schedule(Runnable-long-TimeUnit) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), PausableChannelEventExecutor:channel(), PausableChannelEventExecutor$ChannelRunnableEventExecutor:<init>(Channel-Runnable), EventExecutor:schedule(Runnable-long-TimeUnit), PausableChannelEventExecutor:schedule(Runnable-long-TimeUnit)),
		PausableChannelEventExecutor:schedule(Callable-long-TimeUnit) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), PausableChannelEventExecutor:channel(), PausableChannelEventExecutor$ChannelCallableEventExecutor:<init>(Channel-Callable), EventExecutor:schedule(Callable-long-TimeUnit), PausableChannelEventExecutor:schedule(Callable-long-TimeUnit)),
		PausableChannelEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), PausableChannelEventExecutor:channel(), PausableChannelEventExecutor$ChannelRunnableEventExecutor:<init>(Channel-Runnable), EventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), PausableChannelEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		PausableChannelEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), PausableChannelEventExecutor:channel(), PausableChannelEventExecutor$ChannelRunnableEventExecutor:<init>(Channel-Runnable), EventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), PausableChannelEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		PausableChannelEventExecutor:isShutdown() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:isShutdown()),
		PausableChannelEventExecutor:isTerminated() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:isTerminated()),
		PausableChannelEventExecutor:awaitTermination(long-TimeUnit) to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:awaitTermination(long-TimeUnit)),
		PausableChannelEventExecutor:invokeAll(Collection) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:invokeAll(Collection)),
		PausableChannelEventExecutor:invokeAll(Collection-long-TimeUnit) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:invokeAll(Collection-long-TimeUnit)),
		PausableChannelEventExecutor:invokeAny(Collection) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:invokeAny(Collection)),
		PausableChannelEventExecutor:invokeAny(Collection-long-TimeUnit) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:invokeAny(Collection-long-TimeUnit)),
		PausableChannelEventExecutor:execute(Runnable) to listOf(PausableChannelEventExecutor:isAcceptingNewTasks(), PausableChannelEventExecutor:unwrap(), EventExecutor:execute(Runnable)),
		PausableChannelEventExecutor:close() to listOf(PausableChannelEventExecutor:unwrap(), EventExecutor:close()),
		VoidChannelPromise:<init>(Channel-boolean) to listOf(AbstractFuture:<init>()),
		VoidChannelPromise:addListener(GenericFutureListener) to listOf(VoidChannelPromise:fail(), VoidChannelPromise:addListener(GenericFutureListener), VoidChannelPromise:addListener(GenericFutureListener), VoidChannelPromise:addListener(GenericFutureListener), VoidChannelPromise:addListener(GenericFutureListener)),
		VoidChannelPromise:addListeners(GenericFutureListener[]) to listOf(VoidChannelPromise:fail(), VoidChannelPromise:addListeners(GenericFutureListener[]), VoidChannelPromise:addListeners(GenericFutureListener[]), VoidChannelPromise:addListeners(GenericFutureListener[]), VoidChannelPromise:addListeners(GenericFutureListener[])),
		VoidChannelPromise:await() to listOf(VoidChannelPromise:await(), VoidChannelPromise:await(), VoidChannelPromise:await(), VoidChannelPromise:await()),
		VoidChannelPromise:await(long-TimeUnit) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:await(long) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:awaitUninterruptibly() to listOf(VoidChannelPromise:fail(), VoidChannelPromise:awaitUninterruptibly(), VoidChannelPromise:awaitUninterruptibly(), VoidChannelPromise:awaitUninterruptibly(), VoidChannelPromise:awaitUninterruptibly()),
		VoidChannelPromise:awaitUninterruptibly(long-TimeUnit) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:awaitUninterruptibly(long) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:sync() to listOf(VoidChannelPromise:fail(), VoidChannelPromise:sync(), VoidChannelPromise:sync(), VoidChannelPromise:sync(), VoidChannelPromise:sync()),
		VoidChannelPromise:syncUninterruptibly() to listOf(VoidChannelPromise:fail(), VoidChannelPromise:syncUninterruptibly(), VoidChannelPromise:syncUninterruptibly(), VoidChannelPromise:syncUninterruptibly(), VoidChannelPromise:syncUninterruptibly()),
		VoidChannelPromise:setFailure(Throwable) to listOf(VoidChannelPromise:fireException(Throwable), VoidChannelPromise:setFailure(Throwable), VoidChannelPromise:setFailure(Throwable)),
		VoidChannelPromise:tryFailure(Throwable) to listOf(VoidChannelPromise:fireException(Throwable)),
		VoidChannelPromise:unvoid() to listOf(DefaultChannelPromise:<init>(Channel), VoidChannelPromise$1:<init>(VoidChannelPromise), ChannelPromise:addListener(GenericFutureListener)),
		VoidChannelPromise:fireException(Throwable) to listOf(Channel:isRegistered(), Channel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable)),
		VoidChannelPromise:getNow() to listOf(VoidChannelPromise:getNow()),
		VoidChannelPromise:removeListeners(GenericFutureListener[]) to listOf(VoidChannelPromise:removeListeners(GenericFutureListener[]), VoidChannelPromise:removeListeners(GenericFutureListener[]), VoidChannelPromise:removeListeners(GenericFutureListener[]), VoidChannelPromise:removeListeners(GenericFutureListener[])),
		VoidChannelPromise:removeListener(GenericFutureListener) to listOf(VoidChannelPromise:removeListener(GenericFutureListener), VoidChannelPromise:removeListener(GenericFutureListener), VoidChannelPromise:removeListener(GenericFutureListener), VoidChannelPromise:removeListener(GenericFutureListener)),
		VoidChannelPromise:setSuccess() to listOf(VoidChannelPromise:setSuccess()),
		VoidChannelPromise:setSuccess(Void) to listOf(VoidChannelPromise:setSuccess(Void)),
		VoidChannelPromise:trySuccess(Object) to listOf(VoidChannelPromise:trySuccess(Void)),
		VoidChannelPromise:setSuccess(Object) to listOf(VoidChannelPromise:setSuccess(Void)),
		VoidChannelPromise:access$000(VoidChannelPromise-Throwable) to listOf(VoidChannelPromise:fireException(Throwable)),
		DefaultChannelHandlerInvoker$7:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Object) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$7:run() to listOf(ChannelHandlerInvokerUtil:invokeChannelReadNow(ChannelHandlerContext-Object)),
		ChannelFutureListener$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:channel(), Channel:close()),
		ChannelFutureListener$1:operationComplete(Future) to listOf(ChannelFutureListener$1:operationComplete(ChannelFuture)),
		DefaultChannelPipeline$HeadContext:<init>(DefaultChannelPipeline) to listOf(AbstractChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-int), DefaultChannelPipeline:channel(), Channel:unsafe()),
		DefaultChannelPipeline$HeadContext:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(Channel$Unsafe:bind(SocketAddress-ChannelPromise)),
		DefaultChannelPipeline$HeadContext:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(Channel$Unsafe:connect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelPipeline$HeadContext:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(Channel$Unsafe:disconnect(ChannelPromise)),
		DefaultChannelPipeline$HeadContext:close(ChannelHandlerContext-ChannelPromise) to listOf(Channel$Unsafe:close(ChannelPromise)),
		DefaultChannelPipeline$HeadContext:deregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:channel(), Channel:eventLoop(), PausableEventExecutor:isAcceptingNewTasks(), ChannelHandlerContext:channel(), Channel:eventLoop(), EventLoop:unwrap(), DefaultChannelPipeline$HeadContext$1:<init>(DefaultChannelPipeline$HeadContext-ChannelPromise), EventLoop:execute(Runnable)),
		DefaultChannelPipeline$HeadContext:read(ChannelHandlerContext) to listOf(Channel$Unsafe:beginRead()),
		DefaultChannelPipeline$HeadContext:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(Channel$Unsafe:write(Object-ChannelPromise)),
		DefaultChannelPipeline$HeadContext:flush(ChannelHandlerContext) to listOf(Channel$Unsafe:flush()),
		DefaultChannelPipeline$HeadContext:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline$HeadContext:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelRegistered()),
		DefaultChannelPipeline$HeadContext:channelUnregistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelUnregistered()),
		DefaultChannelPipeline$HeadContext:channelActive(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelActive()),
		DefaultChannelPipeline$HeadContext:channelInactive(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelInactive()),
		DefaultChannelPipeline$HeadContext:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		DefaultChannelPipeline$HeadContext:channelReadComplete(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelReadComplete()),
		DefaultChannelPipeline$HeadContext:userEventTriggered(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireUserEventTriggered(Object)),
		DefaultChannelPipeline$HeadContext:channelWritabilityChanged(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelWritabilityChanged()),
		DefaultChannelPipeline$HeadContext:<clinit>() to listOf(DefaultChannelPipeline$HeadContext:skipFlags0(Class), DefaultChannelPipeline:access$500(Class)),
		DefaultChannelHandlerInvoker$10:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$10:run() to listOf(ChannelHandlerInvokerUtil:invokeBindNow(ChannelHandlerContext-SocketAddress-ChannelPromise)),
		DefaultChannelHandlerInvoker$16:run() to listOf(ChannelHandlerInvokerUtil:invokeFlushNow(ChannelHandlerContext)),
		ChannelFutureListener:<clinit>() to listOf(ChannelFutureListener$1:<init>(), ChannelFutureListener$2:<init>(), ChannelFutureListener$3:<init>()),
		DefaultChannelProgressivePromise:<init>(Channel) to listOf(DefaultProgressivePromise:<init>()),
		DefaultChannelProgressivePromise:<init>(Channel-EventExecutor) to listOf(DefaultProgressivePromise:<init>(EventExecutor)),
		DefaultChannelProgressivePromise:executor() to listOf(DefaultProgressivePromise:executor(), DefaultChannelProgressivePromise:channel(), Channel:eventLoop()),
		DefaultChannelProgressivePromise:setSuccess() to listOf(DefaultChannelProgressivePromise:setSuccess(Void), DefaultChannelProgressivePromise:setSuccess()),
		DefaultChannelProgressivePromise:setSuccess(Void) to listOf(DefaultProgressivePromise:setSuccess(Object), DefaultChannelProgressivePromise:setSuccess(Void)),
		DefaultChannelProgressivePromise:trySuccess() to listOf(DefaultChannelProgressivePromise:trySuccess(Object)),
		DefaultChannelProgressivePromise:setFailure(Throwable) to listOf(DefaultProgressivePromise:setFailure(Throwable), DefaultChannelProgressivePromise:setFailure(Throwable), DefaultChannelProgressivePromise:setFailure(Throwable), DefaultChannelProgressivePromise:setFailure(Throwable)),
		DefaultChannelProgressivePromise:setProgress(long-long) to listOf(DefaultProgressivePromise:setProgress(long-long), DefaultChannelProgressivePromise:setProgress(long-long)),
		DefaultChannelProgressivePromise:addListener(GenericFutureListener) to listOf(DefaultProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener)),
		DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]) to listOf(DefaultProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[])),
		DefaultChannelProgressivePromise:removeListener(GenericFutureListener) to listOf(DefaultProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener)),
		DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]) to listOf(DefaultProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[])),
		DefaultChannelProgressivePromise:sync() to listOf(DefaultProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync()),
		DefaultChannelProgressivePromise:syncUninterruptibly() to listOf(DefaultProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly()),
		DefaultChannelProgressivePromise:await() to listOf(DefaultProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await()),
		DefaultChannelProgressivePromise:awaitUninterruptibly() to listOf(DefaultProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly()),
		DefaultChannelProgressivePromise:checkDeadLock() to listOf(DefaultChannelProgressivePromise:channel(), Channel:isRegistered(), DefaultProgressivePromise:checkDeadLock()),
		DefaultChannelProgressivePromise:setSuccess(Object) to listOf(DefaultChannelProgressivePromise:setSuccess(Void), DefaultChannelProgressivePromise:setSuccess(Void)),
		DefaultChannelProgressivePromise:unvoid() to listOf(DefaultChannelProgressivePromise:unvoid()),
		DefaultChannelProgressivePromise:promise() to listOf(DefaultChannelProgressivePromise:promise()),
		AbstractChannel$AbstractUnsafe$6:<init>(AbstractChannel$AbstractUnsafe-ChannelOutboundBuffer-boolean-ChannelPromise) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$6:run() to listOf(AbstractChannel:doClose(), AbstractChannel$AbstractUnsafe$6$1:<init>(AbstractChannel$AbstractUnsafe$6-Throwable), AbstractChannel$AbstractUnsafe:access$700(AbstractChannel$AbstractUnsafe-Runnable)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:newInstance() to listOf(Recycler:get(), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:setRefCnt(int)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle) to listOf(UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:deallocate() to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:capacity(), UnpooledUnsafeDirectByteBuf:deallocate(), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:clear(), Recycler:recycle(Object-Recycler$Handle)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle-ThreadLocalPooledDirectByteBuf$1) to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:<clinit>() to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf$1:<init>()),
		DefaultFileRegion:<init>(FileChannel-long-long) to listOf(AbstractReferenceCounted:<init>()),
		DefaultFileRegion:<init>(File-long-long) to listOf(AbstractReferenceCounted:<init>()),
		DefaultFileRegion:open() to listOf(DefaultFileRegion:isOpen(), DefaultFileRegion:refCnt()),
		DefaultFileRegion:transferTo(WritableByteChannel-long) to listOf(DefaultFileRegion:refCnt(), IllegalReferenceCountException:<init>(int), DefaultFileRegion:open()),
		DefaultFileRegion:deallocate() to listOf(InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		DefaultFileRegion:retain() to listOf(AbstractReferenceCounted:retain(), DefaultFileRegion:retain()),
		DefaultFileRegion:retain(int) to listOf(AbstractReferenceCounted:retain(int), DefaultFileRegion:retain(int)),
		DefaultFileRegion:touch() to listOf(DefaultFileRegion:touch()),
		DefaultFileRegion:touch(Object) to listOf(DefaultFileRegion:touch(Object)),
		DefaultFileRegion:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		FileDescriptor:close() to listOf(FileDescriptor:close(int)),
		DomainSocketReadMode:values() to listOf(DomainSocketReadMode[]:clone()),
		DomainSocketReadMode:<clinit>() to listOf(DomainSocketReadMode:<init>(String-int), DomainSocketReadMode:<init>(String-int)),
		DomainSocketAddress:<init>(File) to listOf(DomainSocketAddress:<init>(String)),
		DomainSocketAddress:toString() to listOf(DomainSocketAddress:path()),
		AbstractOioChannel$1:run() to listOf(AbstractOioChannel:isReadPending(), AbstractOioChannel:config(), ChannelConfig:isAutoRead(), AbstractOioChannel:setReadPending(boolean), AbstractOioChannel:doRead()),
		AbstractOioMessageChannel:<init>(Channel) to listOf(AbstractOioChannel:<init>(Channel)),
		AbstractOioMessageChannel:doRead() to listOf(AbstractOioMessageChannel:config(), AbstractOioMessageChannel:pipeline(), ChannelConfig:getMaxMessagesPerRead(), AbstractOioMessageChannel:doReadMessages(List), ChannelPipeline:fireChannelRead(Object), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelReadComplete(), AbstractOioMessageChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioMessageChannel:isOpen(), AbstractOioMessageChannel:unsafe(), AbstractOioMessageChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioMessageChannel:isActive(), AbstractOioMessageChannel:read()),
		OioEventLoopGroup:<init>() to listOf(OioEventLoopGroup:<init>(int)),
		OioEventLoopGroup:<init>(int) to listOf(OioEventLoopGroup:<init>(int-ThreadFactory)),
		OioEventLoopGroup:<init>(int-Executor) to listOf(ThreadPerChannelEventLoopGroup:<init>(int-Executor-Object[])),
		OioEventLoopGroup:<init>(int-ThreadFactory) to listOf(ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[])),
		AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		AbstractOioChannel$DefaultOioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractOioChannel$DefaultOioUnsafe:ensureOpen(ChannelPromise), AbstractOioChannel:isActive(), AbstractOioChannel:doConnect(SocketAddress-SocketAddress), AbstractOioChannel$DefaultOioUnsafe:safeSetSuccess(ChannelPromise), AbstractOioChannel:isActive(), AbstractOioChannel:pipeline(), ChannelPipeline:fireChannelActive(), AbstractOioChannel$DefaultOioUnsafe:annotateConnectException(Throwable-SocketAddress), AbstractOioChannel$DefaultOioUnsafe:safeSetFailure(ChannelPromise-Throwable), AbstractOioChannel$DefaultOioUnsafe:closeIfClosed()),
		AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel-AbstractOioChannel$1) to listOf(AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel)),
		AbstractOioByteChannel:<init>(Channel) to listOf(AbstractOioChannel:<init>(Channel)),
		AbstractOioByteChannel:doRead() to listOf(AbstractOioByteChannel:checkInputShutdown(), AbstractOioByteChannel:config(), AbstractOioByteChannel:pipeline(), AbstractOioByteChannel:unsafe(), Channel$Unsafe:recvBufAllocHandle(), AbstractOioByteChannel:alloc(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), AbstractOioByteChannel:doReadBytes(ByteBuf), AbstractOioByteChannel:available(), ByteBuf:isWritable(), ByteBuf:capacity(), ByteBuf:maxCapacity(), ChannelPipeline:fireChannelRead(Object), AbstractOioByteChannel:alloc(), ByteBufAllocator:buffer(), ByteBuf:writerIndex(), ByteBuf:capacity(int), ByteBuf:ensureWritable(int), ChannelConfig:isAutoRead(), RecvByteBufAllocator$Handle:record(int), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractOioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isOpen(), AbstractOioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isActive(), AbstractOioByteChannel:read(), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractOioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isOpen(), AbstractOioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isActive(), AbstractOioByteChannel:read(), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractOioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isOpen(), AbstractOioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isActive(), AbstractOioByteChannel:read()),
		AbstractOioByteChannel:doWrite(ChannelOutboundBuffer) to listOf(ChannelOutboundBuffer:current(), ByteBuf:readableBytes(), AbstractOioByteChannel:doWriteBytes(ByteBuf), ByteBuf:readableBytes(), ChannelOutboundBuffer:progress(long), ChannelOutboundBuffer:remove(), FileRegion:transfered(), AbstractOioByteChannel:doWriteFileRegion(FileRegion), FileRegion:transfered(), ChannelOutboundBuffer:progress(long), ChannelOutboundBuffer:remove(), StringUtil:simpleClassName(Object), ChannelOutboundBuffer:remove(Throwable)),
		AbstractOioByteChannel:filterOutboundMessage(Object) to listOf(StringUtil:simpleClassName(Object)),
		AbstractOioByteChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class)),
		OioByteStreamChannel:<init>(Channel) to listOf(AbstractOioByteChannel:<init>(Channel)),
		OioByteStreamChannel:doReadBytes(ByteBuf) to listOf(OioByteStreamChannel:available(), ByteBuf:maxWritableBytes(), ByteBuf:writeBytes(InputStream-int)),
		OioByteStreamChannel:doWriteBytes(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readBytes(OutputStream-int)),
		OioByteStreamChannel:doWriteFileRegion(FileRegion) to listOf(FileRegion:transferTo(WritableByteChannel-long), OioByteStreamChannel:checkEOF(FileRegion), FileRegion:count()),
		OioByteStreamChannel:checkEOF(FileRegion) to listOf(FileRegion:transfered(), FileRegion:count(), FileRegion:count(), FileRegion:transfered()),
		OioByteStreamChannel:<clinit>() to listOf(OioByteStreamChannel$1:<init>(), OioByteStreamChannel$2:<init>()),
		AbstractOioChannel:<init>(Channel) to listOf(AbstractChannel:<init>(Channel), AbstractOioChannel$1:<init>(AbstractOioChannel)),
		AbstractOioChannel:newUnsafe() to listOf(AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel-AbstractOioChannel$1)),
		AbstractOioChannel:doBeginRead() to listOf(AbstractOioChannel:isReadPending(), AbstractOioChannel:setReadPending(boolean), AbstractOioChannel:eventLoop(), EventLoop:execute(Runnable)),
		AbstractServerChannel:<init>() to listOf(AbstractChannel:<init>(Channel)),
		AbstractServerChannel:newUnsafe() to listOf(AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel-AbstractServerChannel$1)),
		AbstractServerChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		AbstractChannel$PausableChannelEventLoop:<init>(AbstractChannel-EventLoop) to listOf(PausableChannelEventExecutor:<init>()),
		AbstractChannel$PausableChannelEventLoop:parent() to listOf(AbstractChannel$PausableChannelEventLoop:unwrap(), EventLoop:parent(), AbstractChannel$PausableChannelEventLoop:parent()),
		AbstractChannel$PausableChannelEventLoop:next() to listOf(AbstractChannel$PausableChannelEventLoop:unwrap(), EventLoop:next(), AbstractChannel$PausableChannelEventLoop:next()),
		AbstractChannel$PausableChannelEventLoop:register(Channel) to listOf(AbstractChannel$PausableChannelEventLoop:unwrap(), EventLoop:register(Channel)),
		AbstractChannel$PausableChannelEventLoop:register(Channel-ChannelPromise) to listOf(AbstractChannel$PausableChannelEventLoop:unwrap(), EventLoop:register(Channel-ChannelPromise)),
		AbstractChannel$PausableChannelEventLoop:unwrapInvoker() to listOf(EventLoop:asInvoker()),
		AbstractChannel$PausableChannelEventLoop:unwrap() to listOf(AbstractChannel$PausableChannelEventLoop:unwrap()),
		SimpleChannelInboundHandler:<init>() to listOf(SimpleChannelInboundHandler:<init>(boolean)),
		SimpleChannelInboundHandler:<init>(boolean) to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		SimpleChannelInboundHandler:<init>(Class) to listOf(SimpleChannelInboundHandler:<init>(Class-boolean)),
		SimpleChannelInboundHandler:<init>(Class-boolean) to listOf(ChannelHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		SimpleChannelInboundHandler:acceptInboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		SimpleChannelInboundHandler:channelRead(ChannelHandlerContext-Object) to listOf(SimpleChannelInboundHandler:acceptInboundMessage(Object), SimpleChannelInboundHandler:messageReceived(ChannelHandlerContext-Object), ChannelHandlerContext:fireChannelRead(Object), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		UdtChannelOption:<clinit>() to listOf(ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String)),
		UdtMessage:<init>(ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf)),
		UdtMessage:copy() to listOf(UdtMessage:content(), ByteBuf:copy(), UdtMessage:<init>(ByteBuf), UdtMessage:copy()),
		UdtMessage:duplicate() to listOf(UdtMessage:content(), ByteBuf:duplicate(), UdtMessage:<init>(ByteBuf), UdtMessage:duplicate()),
		UdtMessage:retain() to listOf(DefaultByteBufHolder:retain(), UdtMessage:retain(), UdtMessage:retain()),
		UdtMessage:retain(int) to listOf(DefaultByteBufHolder:retain(int), UdtMessage:retain(int), UdtMessage:retain(int)),
		UdtMessage:touch() to listOf(DefaultByteBufHolder:touch(), UdtMessage:touch(), UdtMessage:touch()),
		UdtMessage:touch(Object) to listOf(DefaultByteBufHolder:touch(Object), UdtMessage:touch(Object), UdtMessage:touch(Object)),
		DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean) to listOf(DefaultChannelConfig:<init>(Channel), DefaultUdtChannelConfig:apply(ChannelUDT)),
		DefaultUdtChannelConfig:apply(ChannelUDT) to listOf(ChannelUDT:socketUDT(), DefaultUdtChannelConfig:isReuseAddress(), SocketUDT:setReuseAddress(boolean), DefaultUdtChannelConfig:getSendBufferSize(), SocketUDT:setSendBufferSize(int), DefaultUdtChannelConfig:getSoLinger(), SocketUDT:setSoLinger(boolean-int), DefaultUdtChannelConfig:getSoLinger(), SocketUDT:setSoLinger(boolean-int), DefaultUdtChannelConfig:getProtocolReceiveBufferSize(), SocketUDT:setOption(OptionUDT-Object), DefaultUdtChannelConfig:getProtocolSendBufferSize(), SocketUDT:setOption(OptionUDT-Object), DefaultUdtChannelConfig:getSystemReceiveBufferSize(), SocketUDT:setOption(OptionUDT-Object), DefaultUdtChannelConfig:getSystemSendBufferSize(), SocketUDT:setOption(OptionUDT-Object)),
		DefaultUdtChannelConfig:getOption(ChannelOption) to listOf(DefaultUdtChannelConfig:getProtocolReceiveBufferSize(), DefaultUdtChannelConfig:getProtocolSendBufferSize(), DefaultUdtChannelConfig:getSystemReceiveBufferSize(), DefaultUdtChannelConfig:getSystemSendBufferSize(), DefaultUdtChannelConfig:getReceiveBufferSize(), DefaultUdtChannelConfig:getSendBufferSize(), DefaultUdtChannelConfig:isReuseAddress(), DefaultUdtChannelConfig:getSoLinger(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultUdtChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultUdtChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultUdtChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultUdtChannelConfig:validate(ChannelOption-Object), DefaultUdtChannelConfig:setProtocolReceiveBufferSize(int), DefaultUdtChannelConfig:setProtocolSendBufferSize(int), DefaultUdtChannelConfig:setSystemReceiveBufferSize(int), DefaultUdtChannelConfig:setSystemSendBufferSize(int), DefaultUdtChannelConfig:setReceiveBufferSize(int), DefaultUdtChannelConfig:setSendBufferSize(int), DefaultUdtChannelConfig:setReuseAddress(boolean), DefaultUdtChannelConfig:setSoLinger(int), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultUdtChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultUdtChannelConfig:setConnectTimeoutMillis(int)),
		DefaultUdtChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultUdtChannelConfig:setMaxMessagesPerRead(int)),
		DefaultUdtChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultUdtChannelConfig:setWriteSpinCount(int)),
		DefaultUdtChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultUdtChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultUdtChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultUdtChannelConfig:setAutoRead(boolean)),
		DefaultUdtChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultUdtChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultUdtChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultUdtChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultUdtChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultUdtChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		DefaultUdtServerChannelConfig:<init>(UdtChannel-ChannelUDT-boolean) to listOf(DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), DefaultUdtServerChannelConfig:apply(ChannelUDT)),
		DefaultUdtServerChannelConfig:getOption(ChannelOption) to listOf(DefaultUdtServerChannelConfig:getBacklog(), DefaultUdtChannelConfig:getOption(ChannelOption)),
		DefaultUdtServerChannelConfig:getOptions() to listOf(DefaultUdtChannelConfig:getOptions(), DefaultUdtServerChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultUdtServerChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultUdtServerChannelConfig:validate(ChannelOption-Object), DefaultUdtServerChannelConfig:setBacklog(int), DefaultUdtChannelConfig:setOption(ChannelOption-Object)),
		DefaultUdtServerChannelConfig:setProtocolReceiveBufferSize(int) to listOf(DefaultUdtChannelConfig:setProtocolReceiveBufferSize(int), DefaultUdtServerChannelConfig:setProtocolReceiveBufferSize(int)),
		DefaultUdtServerChannelConfig:setProtocolSendBufferSize(int) to listOf(DefaultUdtChannelConfig:setProtocolSendBufferSize(int), DefaultUdtServerChannelConfig:setProtocolSendBufferSize(int)),
		DefaultUdtServerChannelConfig:setReceiveBufferSize(int) to listOf(DefaultUdtChannelConfig:setReceiveBufferSize(int), DefaultUdtServerChannelConfig:setReceiveBufferSize(int)),
		DefaultUdtServerChannelConfig:setReuseAddress(boolean) to listOf(DefaultUdtChannelConfig:setReuseAddress(boolean), DefaultUdtServerChannelConfig:setReuseAddress(boolean)),
		DefaultUdtServerChannelConfig:setSendBufferSize(int) to listOf(DefaultUdtChannelConfig:setSendBufferSize(int), DefaultUdtServerChannelConfig:setSendBufferSize(int)),
		DefaultUdtServerChannelConfig:setSoLinger(int) to listOf(DefaultUdtChannelConfig:setSoLinger(int), DefaultUdtServerChannelConfig:setSoLinger(int)),
		DefaultUdtServerChannelConfig:setSystemReceiveBufferSize(int) to listOf(DefaultUdtChannelConfig:setSystemReceiveBufferSize(int), DefaultUdtServerChannelConfig:setSystemReceiveBufferSize(int)),
		DefaultUdtServerChannelConfig:setSystemSendBufferSize(int) to listOf(DefaultUdtChannelConfig:setSystemSendBufferSize(int), DefaultUdtServerChannelConfig:setSystemSendBufferSize(int)),
		DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultUdtChannelConfig:setConnectTimeoutMillis(int), DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int), DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int)),
		DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultUdtChannelConfig:setMaxMessagesPerRead(int), DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int), DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int)),
		DefaultUdtServerChannelConfig:setWriteSpinCount(int) to listOf(DefaultUdtChannelConfig:setWriteSpinCount(int), DefaultUdtServerChannelConfig:setWriteSpinCount(int), DefaultUdtServerChannelConfig:setWriteSpinCount(int)),
		DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultUdtChannelConfig:setAllocator(ByteBufAllocator), DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator), DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultUdtServerChannelConfig:setAutoRead(boolean) to listOf(DefaultUdtChannelConfig:setAutoRead(boolean), DefaultUdtServerChannelConfig:setAutoRead(boolean), DefaultUdtServerChannelConfig:setAutoRead(boolean)),
		DefaultUdtServerChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultUdtChannelConfig:setWriteBufferLowWaterMark(int), DefaultUdtServerChannelConfig:setWriteBufferLowWaterMark(int), DefaultUdtServerChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultUdtServerChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultUdtChannelConfig:setWriteBufferHighWaterMark(int), DefaultUdtServerChannelConfig:setWriteBufferHighWaterMark(int), DefaultUdtServerChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultUdtServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultUdtChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultUdtServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultUdtServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		NioUdtByteAcceptorChannel:<init>() to listOf(NioUdtAcceptorChannel:<init>(TypeUDT)),
		NioUdtByteAcceptorChannel:doReadMessages(List) to listOf(NioUdtByteAcceptorChannel:javaChannel(), ServerSocketChannelUDT:accept(), NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtByteAcceptorChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		NioUdtMessageRendezvousChannel:<init>() to listOf(NioUdtProvider:newRendezvousChannelUDT(TypeUDT), NioUdtMessageConnectorChannel:<init>(SocketChannelUDT)),
		NioUdtByteConnectorChannel$1:<clinit>() to listOf(StatusUDT:values(), StatusUDT:ordinal(), StatusUDT:ordinal()),
		NioUdtProvider:channelUDT(Channel) to listOf(NioUdtByteAcceptorChannel:javaChannel(), NioUdtByteConnectorChannel:javaChannel(), NioUdtByteRendezvousChannel:javaChannel(), NioUdtMessageAcceptorChannel:javaChannel(), NioUdtMessageConnectorChannel:javaChannel(), NioUdtMessageRendezvousChannel:javaChannel()),
		NioUdtProvider:newAcceptorChannelUDT(TypeUDT) to listOf(SelectorProviderUDT:from(TypeUDT), SelectorProviderUDT:openServerSocketChannel(), ChannelException:<init>(String-Throwable)),
		NioUdtProvider:newConnectorChannelUDT(TypeUDT) to listOf(SelectorProviderUDT:from(TypeUDT), SelectorProviderUDT:openSocketChannel(), ChannelException:<init>(String-Throwable)),
		NioUdtProvider:newRendezvousChannelUDT(TypeUDT) to listOf(SelectorProviderUDT:from(TypeUDT), SelectorProviderUDT:openRendezvousChannel(), ChannelException:<init>(String-Throwable)),
		NioUdtProvider:socketUDT(Channel) to listOf(NioUdtProvider:channelUDT(Channel), ChannelUDT:socketUDT()),
		NioUdtProvider:newChannel() to listOf(KindUDT:ordinal(), TypeUDT:ordinal(), NioUdtMessageAcceptorChannel:<init>(), NioUdtByteAcceptorChannel:<init>(), TypeUDT:ordinal(), NioUdtMessageConnectorChannel:<init>(), NioUdtByteConnectorChannel:<init>(), TypeUDT:ordinal(), NioUdtMessageRendezvousChannel:<init>(), NioUdtByteRendezvousChannel:<init>(), NioUdtProvider:newChannel()),
		NioUdtProvider:<clinit>() to listOf(NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT)),
		NioUdtProvider$1:<clinit>() to listOf(KindUDT:values(), KindUDT:ordinal(), KindUDT:ordinal(), KindUDT:ordinal(), TypeUDT:values(), TypeUDT:ordinal(), TypeUDT:ordinal()),
		NioUdtMessageConnectorChannel$1:<clinit>() to listOf(StatusUDT:values(), StatusUDT:ordinal(), StatusUDT:ordinal()),
		NioUdtMessageConnectorChannel:<init>() to listOf(NioUdtMessageConnectorChannel:<init>(TypeUDT)),
		NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), SocketChannelUDT:configureBlocking(boolean), SocketChannelUDT:socketUDT(), SocketUDT:status(), StatusUDT:ordinal(), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), SocketChannelUDT:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioUdtMessageConnectorChannel:<init>(SocketChannelUDT) to listOf(NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtMessageConnectorChannel:<init>(TypeUDT) to listOf(NioUdtProvider:newConnectorChannelUDT(TypeUDT), NioUdtMessageConnectorChannel:<init>(SocketChannelUDT)),
		NioUdtMessageConnectorChannel:doBind(SocketAddress) to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:bind(SocketAddress)),
		NioUdtMessageConnectorChannel:doClose() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:close()),
		NioUdtMessageConnectorChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioUdtMessageConnectorChannel:doBind(SocketAddress), NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:connect(SocketAddress), NioUdtMessageConnectorChannel:selectionKey(), NioUdtMessageConnectorChannel:selectionKey(), NioUdtMessageConnectorChannel:doClose(), NioUdtMessageConnectorChannel:doClose()),
		NioUdtMessageConnectorChannel:doDisconnect() to listOf(NioUdtMessageConnectorChannel:doClose()),
		NioUdtMessageConnectorChannel:doFinishConnect() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:finishConnect(), NioUdtMessageConnectorChannel:selectionKey(), NioUdtMessageConnectorChannel:selectionKey()),
		NioUdtMessageConnectorChannel:doReadMessages(List) to listOf(UdtChannelConfig:getReceiveBufferSize(), UdtChannelConfig:getAllocator(), ByteBufAllocator:directBuffer(int), NioUdtMessageConnectorChannel:javaChannel(), ByteBuf:writeBytes(ScatteringByteChannel-int), ByteBuf:release(), NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:close(), ChannelException:<init>(String), UdtMessage:<init>(ByteBuf)),
		NioUdtMessageConnectorChannel:doWriteMessage(Object-ChannelOutboundBuffer) to listOf(UdtMessage:content(), ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), NioUdtMessageConnectorChannel:javaChannel(), ByteBuf:nioBuffer(), SocketChannelUDT:write(ByteBuffer), NioUdtMessageConnectorChannel:javaChannel(), ByteBuf:nioBuffers(), SocketChannelUDT:write(ByteBuffer[])),
		NioUdtMessageConnectorChannel:isActive() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:isOpen(), SocketChannelUDT:isConnectFinished()),
		NioUdtMessageConnectorChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioUdtMessageConnectorChannel:javaChannel()),
		NioUdtMessageConnectorChannel:localAddress0() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getLocalSocketAddress()),
		NioUdtMessageConnectorChannel:remoteAddress0() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getRemoteSocketAddress()),
		NioUdtMessageConnectorChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioUdtMessageConnectorChannel:localAddress()),
		NioUdtMessageConnectorChannel:remoteAddress() to listOf(AbstractNioMessageChannel:remoteAddress(), NioUdtMessageConnectorChannel:remoteAddress()),
		NioUdtMessageConnectorChannel:config() to listOf(NioUdtMessageConnectorChannel:config()),
		NioUdtMessageConnectorChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		NioUdtMessageAcceptorChannel:<init>() to listOf(NioUdtAcceptorChannel:<init>(TypeUDT)),
		NioUdtMessageAcceptorChannel:doReadMessages(List) to listOf(NioUdtMessageAcceptorChannel:javaChannel(), ServerSocketChannelUDT:accept(), NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtMessageAcceptorChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		NioUdtAcceptorChannel:<init>(ServerSocketChannelUDT) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), ServerSocketChannelUDT:configureBlocking(boolean), DefaultUdtServerChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), ServerSocketChannelUDT:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioUdtAcceptorChannel:<init>(TypeUDT) to listOf(NioUdtProvider:newAcceptorChannelUDT(TypeUDT), NioUdtAcceptorChannel:<init>(ServerSocketChannelUDT)),
		NioUdtAcceptorChannel:doBind(SocketAddress) to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:socket(), UdtServerChannelConfig:getBacklog(), NioServerSocketUDT:bind(SocketAddress-int)),
		NioUdtAcceptorChannel:doClose() to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:close()),
		NioUdtAcceptorChannel:isActive() to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:socket(), NioServerSocketUDT:isBound()),
		NioUdtAcceptorChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioUdtAcceptorChannel:javaChannel()),
		NioUdtAcceptorChannel:localAddress0() to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:socket(), NioServerSocketUDT:getLocalSocketAddress()),
		NioUdtAcceptorChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioUdtAcceptorChannel:localAddress()),
		NioUdtAcceptorChannel:remoteAddress() to listOf(NioUdtAcceptorChannel:remoteAddress()),
		NioUdtAcceptorChannel:config() to listOf(NioUdtAcceptorChannel:config(), NioUdtAcceptorChannel:config()),
		NioUdtAcceptorChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		NioUdtByteConnectorChannel:<init>() to listOf(NioUdtByteConnectorChannel:<init>(TypeUDT)),
		NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT) to listOf(AbstractNioByteChannel:<init>(Channel-SelectableChannel), SocketChannelUDT:configureBlocking(boolean), SocketChannelUDT:socketUDT(), SocketUDT:status(), StatusUDT:ordinal(), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), SocketChannelUDT:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioUdtByteConnectorChannel:<init>(SocketChannelUDT) to listOf(NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtByteConnectorChannel:<init>(TypeUDT) to listOf(NioUdtProvider:newConnectorChannelUDT(TypeUDT), NioUdtByteConnectorChannel:<init>(SocketChannelUDT)),
		NioUdtByteConnectorChannel:doBind(SocketAddress) to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:bind(SocketAddress)),
		NioUdtByteConnectorChannel:doClose() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:close()),
		NioUdtByteConnectorChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioUdtByteConnectorChannel:doBind(SocketAddress), NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:connect(SocketAddress), NioUdtByteConnectorChannel:selectionKey(), NioUdtByteConnectorChannel:selectionKey(), NioUdtByteConnectorChannel:doClose(), NioUdtByteConnectorChannel:doClose()),
		NioUdtByteConnectorChannel:doDisconnect() to listOf(NioUdtByteConnectorChannel:doClose()),
		NioUdtByteConnectorChannel:doFinishConnect() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:finishConnect(), NioUdtByteConnectorChannel:selectionKey(), NioUdtByteConnectorChannel:selectionKey()),
		NioUdtByteConnectorChannel:doReadBytes(ByteBuf) to listOf(NioUdtByteConnectorChannel:javaChannel(), ByteBuf:writableBytes(), ByteBuf:writeBytes(ScatteringByteChannel-int)),
		NioUdtByteConnectorChannel:doWriteBytes(ByteBuf) to listOf(ByteBuf:readableBytes(), NioUdtByteConnectorChannel:javaChannel(), ByteBuf:readBytes(GatheringByteChannel-int)),
		NioUdtByteConnectorChannel:isActive() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:isOpen(), SocketChannelUDT:isConnectFinished()),
		NioUdtByteConnectorChannel:javaChannel() to listOf(AbstractNioByteChannel:javaChannel(), NioUdtByteConnectorChannel:javaChannel()),
		NioUdtByteConnectorChannel:localAddress0() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getLocalSocketAddress()),
		NioUdtByteConnectorChannel:remoteAddress0() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getRemoteSocketAddress()),
		NioUdtByteConnectorChannel:localAddress() to listOf(AbstractNioByteChannel:localAddress(), NioUdtByteConnectorChannel:localAddress()),
		NioUdtByteConnectorChannel:remoteAddress() to listOf(AbstractNioByteChannel:remoteAddress(), NioUdtByteConnectorChannel:remoteAddress()),
		NioUdtByteConnectorChannel:config() to listOf(NioUdtByteConnectorChannel:config()),
		NioUdtByteConnectorChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		NioUdtByteRendezvousChannel:<init>() to listOf(NioUdtProvider:newRendezvousChannelUDT(TypeUDT), NioUdtByteConnectorChannel:<init>(SocketChannelUDT)),
		ChannelInitializer:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		ChannelInitializer:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelHandlerContext:channel(), ChannelInitializer:initChannel(Channel), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:fireChannelRegistered(), ChannelPipeline:context(ChannelHandler), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:close(), ChannelHandlerContext:channel(), InternalLogger:warn(String-Throwable), ChannelPipeline:context(ChannelHandler), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:close(), ChannelPipeline:context(ChannelHandler), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:close()),
		ChannelInitializer:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:newInstance() to listOf(Recycler:get(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:setRefCnt(int)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<init>(Recycler$Handle) to listOf(UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:deallocate() to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:capacity(), UnpooledDirectByteBuf:deallocate(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:clear(), Recycler:recycle(Object-Recycler$Handle)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<init>(Recycler$Handle-ThreadLocalPooledDirectByteBuf$1) to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<init>(Recycler$Handle)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<clinit>() to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf$1:<init>()),
		DefaultChannelHandlerInvoker$4:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$4:run() to listOf(ChannelHandlerInvokerUtil:invokeChannelInactiveNow(ChannelHandlerContext)),
		AbstractChannel$AbstractUnsafe:<init>(AbstractChannel) to listOf(ChannelOutboundBuffer:<init>(AbstractChannel)),
		AbstractChannel$AbstractUnsafe:recvBufAllocHandle() to listOf(AbstractChannel:config(), ChannelConfig:getRecvByteBufAllocator(), RecvByteBufAllocator:newHandle()),
		AbstractChannel$AbstractUnsafe:invoker() to listOf(AbstractChannel:eventLoop(), EventLoop:asInvoker(), PausableChannelEventExecutor:unwrapInvoker()),
		AbstractChannel$AbstractUnsafe:localAddress() to listOf(AbstractChannel:localAddress0()),
		AbstractChannel$AbstractUnsafe:remoteAddress() to listOf(AbstractChannel:remoteAddress0()),
		AbstractChannel$AbstractUnsafe:register(EventLoop-ChannelPromise) to listOf(AbstractChannel:isRegistered(), ChannelPromise:setFailure(Throwable), AbstractChannel:isCompatible(EventLoop), ChannelPromise:setFailure(Throwable), AbstractChannel:access$000(AbstractChannel), AbstractChannel$PausableChannelEventLoop:<init>(AbstractChannel-EventLoop), AbstractChannel:access$002(AbstractChannel-AbstractChannel$PausableChannelEventLoop), AbstractChannel:access$000(AbstractChannel), EventLoop:inEventLoop(), AbstractChannel$AbstractUnsafe:register0(ChannelPromise), AbstractChannel$AbstractUnsafe$1:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), EventLoop:execute(Runnable), AbstractChannel:access$200(), InternalLogger:warn(String-Object-Object), AbstractChannel$AbstractUnsafe:closeForcibly(), AbstractChannel:access$300(AbstractChannel), AbstractChannel$CloseFuture:setClosed(), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable)),
		AbstractChannel$AbstractUnsafe:register0(ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise), AbstractChannel:doRegister(), AbstractChannel:access$402(AbstractChannel-boolean), AbstractChannel:access$000(AbstractChannel), AbstractChannel$PausableChannelEventLoop:acceptNewTasks(), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelRegistered(), AbstractChannel:isActive(), AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelActive(), AbstractChannel$AbstractUnsafe:closeForcibly(), AbstractChannel:access$300(AbstractChannel), AbstractChannel$CloseFuture:setClosed(), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable)),
		AbstractChannel$AbstractUnsafe:bind(SocketAddress-ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise), AbstractChannel:config(), ChannelConfig:getOption(ChannelOption), PlatformDependent:isWindows(), PlatformDependent:isRoot(), AbstractChannel:access$200(), InternalLogger:warn(String), AbstractChannel:isActive(), AbstractChannel:doBind(SocketAddress), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), AbstractChannel$AbstractUnsafe:closeIfClosed(), AbstractChannel:isActive(), AbstractChannel$AbstractUnsafe$2:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:disconnect(ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractChannel:isActive(), AbstractChannel:doDisconnect(), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), AbstractChannel$AbstractUnsafe:closeIfClosed(), AbstractChannel:isActive(), AbstractChannel$AbstractUnsafe$3:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel$AbstractUnsafe:closeIfClosed()),
		AbstractChannel$AbstractUnsafe:close(ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractChannel$AbstractUnsafe$4:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel:access$300(AbstractChannel), AbstractChannel$AbstractUnsafe$5:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), AbstractChannel$CloseFuture:addListener(GenericFutureListener), AbstractChannel:access$300(AbstractChannel), AbstractChannel$CloseFuture:isDone(), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:isActive(), AbstractChannel$AbstractUnsafe:closeExecutor(), AbstractChannel$AbstractUnsafe$6:<init>(AbstractChannel$AbstractUnsafe-ChannelOutboundBuffer-boolean-ChannelPromise), AbstractChannel:doClose(), AbstractChannel$AbstractUnsafe:closeAndDeregister(ChannelOutboundBuffer-boolean-ChannelPromise-Throwable)),
		AbstractChannel$AbstractUnsafe:closeAndDeregister(ChannelOutboundBuffer-boolean-ChannelPromise-Throwable) to listOf(ChannelOutboundBuffer:failFlushed(Throwable), ChannelOutboundBuffer:close(ClosedChannelException), AbstractChannel:isActive(), AbstractChannel$AbstractUnsafe$7:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel$AbstractUnsafe$8:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel:access$300(AbstractChannel), AbstractChannel$CloseFuture:setClosed(), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:isActive(), AbstractChannel$AbstractUnsafe$7:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel$AbstractUnsafe$8:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel:access$300(AbstractChannel), AbstractChannel$CloseFuture:setClosed(), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:closeForcibly() to listOf(AbstractChannel:doClose(), AbstractChannel:access$200(), InternalLogger:warn(String-Throwable)),
		AbstractChannel$AbstractUnsafe:deregister(ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractChannel:access$400(AbstractChannel), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:doDeregister(), AbstractChannel:access$400(AbstractChannel), AbstractChannel:access$402(AbstractChannel-boolean), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelUnregistered(), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), AbstractChannel:access$200(), InternalLogger:warn(String-Throwable), AbstractChannel:access$400(AbstractChannel), AbstractChannel:access$402(AbstractChannel-boolean), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelUnregistered(), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:access$400(AbstractChannel), AbstractChannel:access$402(AbstractChannel-boolean), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise), AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelUnregistered(), AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:beginRead() to listOf(AbstractChannel:isActive(), AbstractChannel:doBeginRead(), AbstractChannel$AbstractUnsafe$9:<init>(AbstractChannel$AbstractUnsafe-Exception), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:close(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:write(Object-ChannelPromise) to listOf(AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), ReferenceCountUtil:release(Object), AbstractChannel:filterOutboundMessage(Object), AbstractChannel:estimatorHandle(), MessageSizeEstimator$Handle:size(Object), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable), ReferenceCountUtil:release(Object), ChannelOutboundBuffer:addMessage(Object-int-ChannelPromise)),
		AbstractChannel$AbstractUnsafe:flush() to listOf(ChannelOutboundBuffer:addFlush(), AbstractChannel$AbstractUnsafe:flush0()),
		AbstractChannel$AbstractUnsafe:flush0() to listOf(ChannelOutboundBuffer:isEmpty(), AbstractChannel:isActive(), AbstractChannel:isOpen(), ChannelOutboundBuffer:failFlushed(Throwable), ChannelOutboundBuffer:failFlushed(Throwable), AbstractChannel:doWrite(ChannelOutboundBuffer), ChannelOutboundBuffer:failFlushed(Throwable)),
		AbstractChannel$AbstractUnsafe:voidPromise() to listOf(AbstractChannel:access$800(AbstractChannel)),
		AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise) to listOf(AbstractChannel:isOpen(), AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable)),
		AbstractChannel$AbstractUnsafe:safeSetSuccess(ChannelPromise) to listOf(ChannelPromise:trySuccess(), AbstractChannel:access$200(), InternalLogger:warn(String-Object)),
		AbstractChannel$AbstractUnsafe:safeSetFailure(ChannelPromise-Throwable) to listOf(ChannelPromise:tryFailure(Throwable), AbstractChannel:access$200(), InternalLogger:warn(String-Object-Object)),
		AbstractChannel$AbstractUnsafe:closeIfClosed() to listOf(AbstractChannel:isOpen(), AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:close(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:invokeLater(Runnable) to listOf(AbstractChannel:eventLoop(), EventLoop:unwrap(), EventLoop:execute(Runnable), AbstractChannel:access$200(), InternalLogger:warn(String-Throwable)),
		AbstractChannel$AbstractUnsafe:access$100(AbstractChannel$AbstractUnsafe-ChannelPromise) to listOf(AbstractChannel$AbstractUnsafe:register0(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:access$600(AbstractChannel$AbstractUnsafe-ChannelOutboundBuffer-boolean-ChannelPromise-Throwable) to listOf(AbstractChannel$AbstractUnsafe:closeAndDeregister(ChannelOutboundBuffer-boolean-ChannelPromise-Throwable)),
		AbstractChannel$AbstractUnsafe:access$700(AbstractChannel$AbstractUnsafe-Runnable) to listOf(AbstractChannel$AbstractUnsafe:invokeLater(Runnable)),
		DefaultChannelPipeline$3:run() to listOf(DefaultChannelPipeline:access$100(DefaultChannelPipeline-AbstractChannelHandlerContext)),
		ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf$1:newObject(Recycler$Handle) to listOf(ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:<init>(Recycler$Handle-ThreadLocalPooledDirectByteBuf$1), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf$1:newObject(Recycler$Handle)),
		EventLoopException:<init>() to listOf(ChannelException:<init>()),
		EventLoopException:<init>(String-Throwable) to listOf(ChannelException:<init>(String-Throwable)),
		EventLoopException:<init>(String) to listOf(ChannelException:<init>(String)),
		EventLoopException:<init>(Throwable) to listOf(ChannelException:<init>(Throwable)),
		CompleteChannelFuture:<init>(Channel-EventExecutor) to listOf(CompleteFuture:<init>(EventExecutor)),
		CompleteChannelFuture:executor() to listOf(CompleteFuture:executor(), CompleteChannelFuture:channel(), Channel:eventLoop()),
		CompleteChannelFuture:addListener(GenericFutureListener) to listOf(CompleteFuture:addListener(GenericFutureListener), CompleteChannelFuture:addListener(GenericFutureListener)),
		CompleteChannelFuture:addListeners(GenericFutureListener[]) to listOf(CompleteFuture:addListeners(GenericFutureListener[]), CompleteChannelFuture:addListeners(GenericFutureListener[])),
		CompleteChannelFuture:removeListener(GenericFutureListener) to listOf(CompleteFuture:removeListener(GenericFutureListener), CompleteChannelFuture:removeListener(GenericFutureListener)),
		CompleteChannelFuture:removeListeners(GenericFutureListener[]) to listOf(CompleteFuture:removeListeners(GenericFutureListener[]), CompleteChannelFuture:removeListeners(GenericFutureListener[])),
		CompleteChannelFuture:awaitUninterruptibly() to listOf(CompleteChannelFuture:awaitUninterruptibly()),
		CompleteChannelFuture:syncUninterruptibly() to listOf(CompleteChannelFuture:syncUninterruptibly()),
		CompleteChannelFuture:sync() to listOf(CompleteChannelFuture:sync()),
		CompleteChannelFuture:await() to listOf(CompleteChannelFuture:await()),
		CompleteChannelFuture:getNow() to listOf(CompleteChannelFuture:getNow()),
		DefaultChannelPipeline$TailContext:<init>(DefaultChannelPipeline) to listOf(AbstractChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-int)),
		DefaultChannelPipeline$TailContext:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(InternalLogger:warn(String-Throwable)),
		DefaultChannelPipeline$TailContext:channelRead(ChannelHandlerContext-Object) to listOf(InternalLogger:debug(String-Object), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		DefaultChannelPipeline$TailContext:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		DefaultChannelPipeline$TailContext:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelPipeline$TailContext:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:disconnect(ChannelPromise)),
		DefaultChannelPipeline$TailContext:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		DefaultChannelPipeline$TailContext:deregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:deregister(ChannelPromise)),
		DefaultChannelPipeline$TailContext:read(ChannelHandlerContext) to listOf(ChannelHandlerContext:read()),
		DefaultChannelPipeline$TailContext:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerContext:write(Object-ChannelPromise)),
		DefaultChannelPipeline$TailContext:flush(ChannelHandlerContext) to listOf(ChannelHandlerContext:flush()),
		DefaultChannelPipeline$TailContext:<clinit>() to listOf(DefaultChannelPipeline$TailContext:skipFlags0(Class), DefaultChannelPipeline:access$500(Class)),
		ChannelOutboundBuffer$2:run() to listOf(ChannelPipeline:fireChannelWritabilityChanged()),
		ChannelFlushPromiseNotifier:<init>() to listOf(ChannelFlushPromiseNotifier:<init>(boolean)),
		ChannelFlushPromiseNotifier:add(ChannelPromise-long) to listOf(ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long), ChannelFlushPromiseNotifier$DefaultFlushCheckpoint:<init>(long-ChannelPromise)),
		ChannelFlushPromiseNotifier:notifyPromises() to listOf(ChannelFlushPromiseNotifier:notifyPromises0(Throwable)),
		ChannelFlushPromiseNotifier:notifyPromises(Throwable) to listOf(ChannelFlushPromiseNotifier:notifyPromises(), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:tryFailure(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:setFailure(Throwable)),
		ChannelFlushPromiseNotifier:notifyPromises(Throwable-Throwable) to listOf(ChannelFlushPromiseNotifier:notifyPromises0(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:tryFailure(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:setFailure(Throwable)),
		ChannelFlushPromiseNotifier:notifyFlushFutures(Throwable-Throwable) to listOf(ChannelFlushPromiseNotifier:notifyPromises(Throwable-Throwable)),
		ChannelFlushPromiseNotifier:notifyPromises0(Throwable) to listOf(ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:trySuccess(), ChannelPromise:setSuccess(), ChannelPromise:tryFailure(Throwable), ChannelPromise:setFailure(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long)),
		DefaultChannelPipeline:<init>(AbstractChannel) to listOf(DefaultChannelPipeline$TailContext:<init>(DefaultChannelPipeline), DefaultChannelPipeline$HeadContext:<init>(DefaultChannelPipeline)),
		DefaultChannelPipeline:addFirst(String-ChannelHandler) to listOf(DefaultChannelPipeline:addFirst(ChannelHandlerInvoker-String-ChannelHandler)),
		DefaultChannelPipeline:addFirst(EventExecutorGroup-String-ChannelHandler) to listOf(DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelPipeline:findInvoker(EventExecutorGroup), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addFirst0(String-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addFirst(ChannelHandlerInvoker-String-ChannelHandler) to listOf(DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addFirst0(String-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addFirst0(String-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addLast(String-ChannelHandler) to listOf(DefaultChannelPipeline:addLast(ChannelHandlerInvoker-String-ChannelHandler)),
		DefaultChannelPipeline:addLast(EventExecutorGroup-String-ChannelHandler) to listOf(DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelPipeline:findInvoker(EventExecutorGroup), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addLast0(String-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addLast(ChannelHandlerInvoker-String-ChannelHandler) to listOf(DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addLast0(String-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addLast0(String-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addBefore(String-String-ChannelHandler) to listOf(DefaultChannelPipeline:addBefore(ChannelHandlerInvoker-String-String-ChannelHandler)),
		DefaultChannelPipeline:addBefore(EventExecutorGroup-String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelPipeline:findInvoker(EventExecutorGroup), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addBefore0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addBefore(ChannelHandlerInvoker-String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addBefore0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addBefore0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addAfter(String-String-ChannelHandler) to listOf(DefaultChannelPipeline:addAfter(ChannelHandlerInvoker-String-String-ChannelHandler)),
		DefaultChannelPipeline:addAfter(EventExecutorGroup-String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelPipeline:findInvoker(EventExecutorGroup), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addAfter0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addAfter(ChannelHandlerInvoker-String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), DefaultChannelPipeline:addAfter0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addAfter0(String-AbstractChannelHandlerContext-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:addFirst(ChannelHandler[]) to listOf(DefaultChannelPipeline:addFirst(ChannelHandlerInvoker-ChannelHandler[])),
		DefaultChannelPipeline:addFirst(EventExecutorGroup-ChannelHandler[]) to listOf(DefaultChannelPipeline:generateName(ChannelHandler), DefaultChannelPipeline:addFirst(EventExecutorGroup-String-ChannelHandler)),
		DefaultChannelPipeline:addFirst(ChannelHandlerInvoker-ChannelHandler[]) to listOf(DefaultChannelPipeline:addFirst(ChannelHandlerInvoker-String-ChannelHandler)),
		DefaultChannelPipeline:addLast(ChannelHandler[]) to listOf(DefaultChannelPipeline:addLast(ChannelHandlerInvoker-ChannelHandler[])),
		DefaultChannelPipeline:addLast(EventExecutorGroup-ChannelHandler[]) to listOf(DefaultChannelPipeline:generateName(ChannelHandler), DefaultChannelPipeline:addLast(EventExecutorGroup-String-ChannelHandler)),
		DefaultChannelPipeline:addLast(ChannelHandlerInvoker-ChannelHandler[]) to listOf(DefaultChannelPipeline:addLast(ChannelHandlerInvoker-String-ChannelHandler)),
		DefaultChannelPipeline:findInvoker(EventExecutorGroup) to listOf(EventExecutorGroup:next(), EventLoop:asInvoker(), DefaultChannelHandlerInvoker:<init>(EventExecutor)),
		DefaultChannelPipeline:generateName(ChannelHandler) to listOf(DefaultChannelPipeline:generateName0(Class)),
		DefaultChannelPipeline:generateName0(Class) to listOf(StringUtil:simpleClassName(Class)),
		DefaultChannelPipeline:remove(ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(ChannelHandler), DefaultChannelPipeline:remove(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:remove(String) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:remove(AbstractChannelHandlerContext), AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:remove(Class) to listOf(DefaultChannelPipeline:getContextOrDie(Class), DefaultChannelPipeline:remove(AbstractChannelHandlerContext), AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:remove(AbstractChannelHandlerContext) to listOf(AbstractChannelHandlerContext:channel(), Channel:isRegistered(), AbstractChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelPipeline:remove0(AbstractChannelHandlerContext), AbstractChannelHandlerContext:executor(), DefaultChannelPipeline$1:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), EventExecutor:submit(Runnable), DefaultChannelPipeline:waitForFuture(Future)),
		DefaultChannelPipeline:remove0(AbstractChannelHandlerContext) to listOf(AbstractChannelHandlerContext:name(), DefaultChannelPipeline:callHandlerRemoved(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:removeFirst() to listOf(DefaultChannelPipeline:remove(AbstractChannelHandlerContext), AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:removeLast() to listOf(DefaultChannelPipeline:remove(AbstractChannelHandlerContext), AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:replace(ChannelHandler-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(ChannelHandler), DefaultChannelPipeline:replace(AbstractChannelHandlerContext-String-ChannelHandler)),
		DefaultChannelPipeline:replace(String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:replace(AbstractChannelHandlerContext-String-ChannelHandler)),
		DefaultChannelPipeline:replace(Class-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(Class), DefaultChannelPipeline:replace(AbstractChannelHandlerContext-String-ChannelHandler)),
		DefaultChannelPipeline:replace(AbstractChannelHandlerContext-String-ChannelHandler) to listOf(AbstractChannelHandlerContext:name(), AbstractChannelHandlerContext:name(), DefaultChannelPipeline:filterName(String-ChannelHandler), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-ChannelHandlerInvoker-String-ChannelHandler), AbstractChannelHandlerContext:channel(), Channel:isRegistered(), AbstractChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelPipeline:replace0(AbstractChannelHandlerContext-String-AbstractChannelHandlerContext), AbstractChannelHandlerContext:handler(), AbstractChannelHandlerContext:executor(), DefaultChannelPipeline$2:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext-String-AbstractChannelHandlerContext), EventExecutor:submit(Runnable), DefaultChannelPipeline:waitForFuture(Future), AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:replace0(AbstractChannelHandlerContext-String-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), AbstractChannelHandlerContext:name(), AbstractChannelHandlerContext:name(), DefaultChannelPipeline:callHandlerAdded(AbstractChannelHandlerContext), DefaultChannelPipeline:callHandlerRemoved(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandlerAdapter:isSharable(), ChannelPipelineException:<init>(String)),
		DefaultChannelPipeline:callHandlerAdded(AbstractChannelHandlerContext) to listOf(AbstractChannelHandlerContext:channel(), Channel:isRegistered(), AbstractChannelHandlerContext:executor(), EventExecutor:inEventLoop(), AbstractChannelHandlerContext:executor(), DefaultChannelPipeline$3:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelPipeline:callHandlerAdded0(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:callHandlerAdded0(AbstractChannelHandlerContext) to listOf(AbstractChannelHandlerContext:handler(), ChannelHandler:handlerAdded(ChannelHandlerContext), DefaultChannelPipeline:remove(AbstractChannelHandlerContext), InternalLogger:isWarnEnabled(), AbstractChannelHandlerContext:name(), InternalLogger:warn(String-Throwable), AbstractChannelHandlerContext:handler(), ChannelPipelineException:<init>(String-Throwable), DefaultChannelPipeline:fireExceptionCaught(Throwable), AbstractChannelHandlerContext:handler(), ChannelPipelineException:<init>(String-Throwable), DefaultChannelPipeline:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline:callHandlerRemoved(AbstractChannelHandlerContext) to listOf(AbstractChannelHandlerContext:channel(), Channel:isRegistered(), AbstractChannelHandlerContext:executor(), EventExecutor:inEventLoop(), AbstractChannelHandlerContext:executor(), DefaultChannelPipeline$4:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelPipeline:callHandlerRemoved0(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:callHandlerRemoved0(AbstractChannelHandlerContext) to listOf(AbstractChannelHandlerContext:handler(), ChannelHandler:handlerRemoved(ChannelHandlerContext), AbstractChannelHandlerContext:setRemoved(), AbstractChannelHandlerContext:handler(), ChannelPipelineException:<init>(String-Throwable), DefaultChannelPipeline:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline:waitForFuture(Future) to listOf(PlatformDependent:throwException(Throwable)),
		DefaultChannelPipeline:first() to listOf(DefaultChannelPipeline:firstContext(), ChannelHandlerContext:handler()),
		DefaultChannelPipeline:last() to listOf(AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:get(String) to listOf(DefaultChannelPipeline:context(String), ChannelHandlerContext:handler()),
		DefaultChannelPipeline:get(Class) to listOf(DefaultChannelPipeline:context(Class), ChannelHandlerContext:handler()),
		DefaultChannelPipeline:context(ChannelHandler) to listOf(AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:context(Class) to listOf(AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:names() to listOf(AbstractChannelHandlerContext:name()),
		DefaultChannelPipeline:toMap() to listOf(AbstractChannelHandlerContext:name(), AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:iterator() to listOf(DefaultChannelPipeline:toMap()),
		DefaultChannelPipeline:toString() to listOf(StringUtil:simpleClassName(Object), AbstractChannelHandlerContext:name(), AbstractChannelHandlerContext:handler()),
		DefaultChannelPipeline:fireChannelRegistered() to listOf(AbstractChannelHandlerContext:fireChannelRegistered()),
		DefaultChannelPipeline:fireChannelUnregistered() to listOf(AbstractChannelHandlerContext:fireChannelUnregistered(), AbstractChannel:isOpen(), DefaultChannelPipeline:destroy()),
		DefaultChannelPipeline:destroy() to listOf(DefaultChannelPipeline:destroyUp(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:destroyUp(AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:destroyDown(Thread-AbstractChannelHandlerContext), AbstractChannelHandlerContext:executor(), EventExecutor:inEventLoop(Thread), EventExecutor:unwrap(), DefaultChannelPipeline$5:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelPipeline:destroyDown(Thread-AbstractChannelHandlerContext) to listOf(AbstractChannelHandlerContext:executor(), EventExecutor:inEventLoop(Thread), DefaultChannelPipeline:remove0(AbstractChannelHandlerContext), EventExecutor:unwrap(), DefaultChannelPipeline$6:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelPipeline:fireChannelActive() to listOf(AbstractChannelHandlerContext:fireChannelActive(), AbstractChannel:config(), ChannelConfig:isAutoRead(), AbstractChannel:read()),
		DefaultChannelPipeline:fireChannelInactive() to listOf(AbstractChannelHandlerContext:fireChannelInactive()),
		DefaultChannelPipeline:fireExceptionCaught(Throwable) to listOf(AbstractChannelHandlerContext:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline:fireUserEventTriggered(Object) to listOf(AbstractChannelHandlerContext:fireUserEventTriggered(Object)),
		DefaultChannelPipeline:fireChannelRead(Object) to listOf(AbstractChannelHandlerContext:fireChannelRead(Object)),
		DefaultChannelPipeline:fireChannelReadComplete() to listOf(AbstractChannelHandlerContext:fireChannelReadComplete(), AbstractChannel:config(), ChannelConfig:isAutoRead(), DefaultChannelPipeline:read()),
		DefaultChannelPipeline:fireChannelWritabilityChanged() to listOf(AbstractChannelHandlerContext:fireChannelWritabilityChanged()),
		DefaultChannelPipeline:bind(SocketAddress) to listOf(AbstractChannelHandlerContext:bind(SocketAddress)),
		DefaultChannelPipeline:connect(SocketAddress) to listOf(AbstractChannelHandlerContext:connect(SocketAddress)),
		DefaultChannelPipeline:connect(SocketAddress-SocketAddress) to listOf(AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress)),
		DefaultChannelPipeline:disconnect() to listOf(AbstractChannelHandlerContext:disconnect()),
		DefaultChannelPipeline:close() to listOf(AbstractChannelHandlerContext:close()),
		DefaultChannelPipeline:deregister() to listOf(AbstractChannelHandlerContext:deregister()),
		DefaultChannelPipeline:flush() to listOf(AbstractChannelHandlerContext:flush()),
		DefaultChannelPipeline:bind(SocketAddress-ChannelPromise) to listOf(AbstractChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		DefaultChannelPipeline:connect(SocketAddress-ChannelPromise) to listOf(AbstractChannelHandlerContext:connect(SocketAddress-ChannelPromise)),
		DefaultChannelPipeline:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelPipeline:disconnect(ChannelPromise) to listOf(AbstractChannelHandlerContext:disconnect(ChannelPromise)),
		DefaultChannelPipeline:close(ChannelPromise) to listOf(AbstractChannelHandlerContext:close(ChannelPromise)),
		DefaultChannelPipeline:deregister(ChannelPromise) to listOf(AbstractChannelHandlerContext:deregister(ChannelPromise)),
		DefaultChannelPipeline:read() to listOf(AbstractChannelHandlerContext:read()),
		DefaultChannelPipeline:write(Object) to listOf(AbstractChannelHandlerContext:write(Object)),
		DefaultChannelPipeline:write(Object-ChannelPromise) to listOf(AbstractChannelHandlerContext:write(Object-ChannelPromise)),
		DefaultChannelPipeline:writeAndFlush(Object-ChannelPromise) to listOf(AbstractChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		DefaultChannelPipeline:writeAndFlush(Object) to listOf(AbstractChannelHandlerContext:writeAndFlush(Object)),
		DefaultChannelPipeline:filterName(String-ChannelHandler) to listOf(DefaultChannelPipeline:generateName(ChannelHandler)),
		DefaultChannelPipeline:getContextOrDie(String) to listOf(DefaultChannelPipeline:context(String)),
		DefaultChannelPipeline:getContextOrDie(ChannelHandler) to listOf(DefaultChannelPipeline:context(ChannelHandler)),
		DefaultChannelPipeline:getContextOrDie(Class) to listOf(DefaultChannelPipeline:context(Class)),
		DefaultChannelPipeline:access$000(DefaultChannelPipeline-AbstractChannelHandlerContext-String-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:replace0(AbstractChannelHandlerContext-String-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:access$100(DefaultChannelPipeline-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:callHandlerAdded0(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:access$200(DefaultChannelPipeline-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:callHandlerRemoved0(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:access$300(DefaultChannelPipeline-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:destroyUp(AbstractChannelHandlerContext)),
		DefaultChannelPipeline:access$400(DefaultChannelPipeline-Thread-AbstractChannelHandlerContext) to listOf(DefaultChannelPipeline:destroyDown(Thread-AbstractChannelHandlerContext)),
		DefaultChannelPipeline:access$500(Class) to listOf(DefaultChannelPipeline:generateName0(Class)),
		DefaultChannelPipeline:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractChannel$AbstractUnsafe$4:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$4:run() to listOf(AbstractChannel$AbstractUnsafe:close(ChannelPromise)),
		AbstractChannelHandlerContext$PausableChannelEventExecutor0:<init>(AbstractChannelHandlerContext) to listOf(PausableChannelEventExecutor:<init>()),
		AbstractChannelHandlerContext$PausableChannelEventExecutor0:rejectNewTasks() to listOf(AbstractChannelHandlerContext$PausableChannelEventExecutor0:channel(), Channel:eventLoop(), PausableEventExecutor:rejectNewTasks()),
		AbstractChannelHandlerContext$PausableChannelEventExecutor0:acceptNewTasks() to listOf(AbstractChannelHandlerContext$PausableChannelEventExecutor0:channel(), Channel:eventLoop(), PausableEventExecutor:acceptNewTasks()),
		AbstractChannelHandlerContext$PausableChannelEventExecutor0:isAcceptingNewTasks() to listOf(AbstractChannelHandlerContext$PausableChannelEventExecutor0:channel(), Channel:eventLoop(), PausableEventExecutor:isAcceptingNewTasks()),
		AbstractChannelHandlerContext$PausableChannelEventExecutor0:channel() to listOf(AbstractChannelHandlerContext:channel()),
		AbstractChannelHandlerContext$PausableChannelEventExecutor0:unwrap() to listOf(AbstractChannelHandlerContext$PausableChannelEventExecutor0:unwrapInvoker(), ChannelHandlerInvoker:executor()),
		AbstractChannelHandlerContext$PausableChannelEventExecutor0:<init>(AbstractChannelHandlerContext-AbstractChannelHandlerContext$1) to listOf(AbstractChannelHandlerContext$PausableChannelEventExecutor0:<init>(AbstractChannelHandlerContext)),
		AdaptiveRecvByteBufAllocator:<init>() to listOf(AdaptiveRecvByteBufAllocator:<init>(int-int-int)),
		AdaptiveRecvByteBufAllocator:<init>(int-int-int) to listOf(AdaptiveRecvByteBufAllocator:getSizeTableIndex(int), AdaptiveRecvByteBufAllocator:getSizeTableIndex(int)),
		AdaptiveRecvByteBufAllocator:newHandle() to listOf(AdaptiveRecvByteBufAllocator$HandleImpl:<init>(int-int-int)),
		AdaptiveRecvByteBufAllocator:access$000(int) to listOf(AdaptiveRecvByteBufAllocator:getSizeTableIndex(int)),
		AdaptiveRecvByteBufAllocator:<clinit>() to listOf(AdaptiveRecvByteBufAllocator:<init>()),
		PendingWriteQueue:<init>(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:unsafe(), Channel$Unsafe:outboundBuffer(), ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:getMessageSizeEstimator(), MessageSizeEstimator:newHandle()),
		PendingWriteQueue:isEmpty() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop()),
		PendingWriteQueue:size() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop()),
		PendingWriteQueue:add(Object-ChannelPromise) to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), MessageSizeEstimator$Handle:size(Object), PendingWriteQueue$PendingWrite:newInstance(Object-int-ChannelPromise), PendingWriteQueue$PendingWrite:access$002(PendingWriteQueue$PendingWrite-PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$100(PendingWriteQueue$PendingWrite), ChannelOutboundBuffer:incrementPendingOutboundBytes(long)),
		PendingWriteQueue:removeAndFailAll(Throwable) to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), PendingWriteQueue$PendingWrite:access$000(PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$200(PendingWriteQueue$PendingWrite), ReferenceCountUtil:safeRelease(Object), PendingWriteQueue$PendingWrite:access$300(PendingWriteQueue$PendingWrite), PendingWriteQueue:recycle(PendingWriteQueue$PendingWrite-boolean), PendingWriteQueue:safeFail(ChannelPromise-Throwable), PendingWriteQueue:assertEmpty()),
		PendingWriteQueue:removeAndFail(Throwable) to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), PendingWriteQueue$PendingWrite:access$200(PendingWriteQueue$PendingWrite), ReferenceCountUtil:safeRelease(Object), PendingWriteQueue$PendingWrite:access$300(PendingWriteQueue$PendingWrite), PendingWriteQueue:safeFail(ChannelPromise-Throwable), PendingWriteQueue:recycle(PendingWriteQueue$PendingWrite-boolean)),
		PendingWriteQueue:removeAndWriteAll() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), PendingWriteQueue:removeAndWrite(), ChannelHandlerContext:newPromise(), ChannelPromiseAggregator:<init>(ChannelPromise), PendingWriteQueue$PendingWrite:access$000(PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$200(PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$300(PendingWriteQueue$PendingWrite), PendingWriteQueue:recycle(PendingWriteQueue$PendingWrite-boolean), ChannelHandlerContext:write(Object-ChannelPromise), ChannelPromiseAggregator:add(Promise[]), PendingWriteQueue:assertEmpty()),
		PendingWriteQueue:removeAndWrite() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), PendingWriteQueue$PendingWrite:access$200(PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$300(PendingWriteQueue$PendingWrite), PendingWriteQueue:recycle(PendingWriteQueue$PendingWrite-boolean), ChannelHandlerContext:write(Object-ChannelPromise)),
		PendingWriteQueue:remove() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), PendingWriteQueue$PendingWrite:access$300(PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$200(PendingWriteQueue$PendingWrite), ReferenceCountUtil:safeRelease(Object), PendingWriteQueue:recycle(PendingWriteQueue$PendingWrite-boolean)),
		PendingWriteQueue:current() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), PendingWriteQueue$PendingWrite:access$200(PendingWriteQueue$PendingWrite)),
		PendingWriteQueue:recycle(PendingWriteQueue$PendingWrite-boolean) to listOf(PendingWriteQueue$PendingWrite:access$000(PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$100(PendingWriteQueue$PendingWrite), PendingWriteQueue$PendingWrite:access$400(PendingWriteQueue$PendingWrite), ChannelOutboundBuffer:decrementPendingOutboundBytes(long)),
		PendingWriteQueue:safeFail(ChannelPromise-Throwable) to listOf(ChannelPromise:tryFailure(Throwable), InternalLogger:warn(String-Object-Object)),
		PendingWriteQueue:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractEventLoop:<init>() to listOf(AbstractEventExecutor:<init>()),
		AbstractEventLoop:<init>(EventLoopGroup) to listOf(AbstractEventExecutor:<init>(EventExecutorGroup)),
		AbstractEventLoop:parent() to listOf(AbstractEventExecutor:parent(), AbstractEventLoop:parent()),
		AbstractEventLoop:next() to listOf(AbstractEventExecutor:next(), AbstractEventLoop:next()),
		AbstractEventLoop:unwrap() to listOf(AbstractEventLoop:unwrap()),
		DefaultChannelPipeline$5:<init>(DefaultChannelPipeline-AbstractChannelHandlerContext) to listOf(OneTimeTask:<init>()),
		DefaultChannelPipeline$5:run() to listOf(DefaultChannelPipeline:access$300(DefaultChannelPipeline-AbstractChannelHandlerContext)),
		DefaultChannelHandlerInvoker$3:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$3:run() to listOf(ChannelHandlerInvokerUtil:invokeChannelActiveNow(ChannelHandlerContext)),
		DefaultChannelHandlerInvoker$1:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$1:run() to listOf(ChannelHandlerInvokerUtil:invokeChannelRegisteredNow(ChannelHandlerContext)),
		ChannelOutboundBuffer$Entry$1:<init>() to listOf(Recycler:<init>()),
		ChannelOutboundBuffer$Entry$1:newObject(Recycler$Handle) to listOf(ChannelOutboundBuffer$Entry:<init>(Recycler$Handle-ChannelOutboundBuffer$1), ChannelOutboundBuffer$Entry$1:newObject(Recycler$Handle)),
		VoidChannelPromise$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), VoidChannelPromise:access$000(VoidChannelPromise-Throwable)),
		VoidChannelPromise$1:operationComplete(Future) to listOf(VoidChannelPromise$1:operationComplete(ChannelFuture)),
		AbstractChannel$AbstractUnsafe$9:<init>(AbstractChannel$AbstractUnsafe-Exception) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$9:run() to listOf(AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireExceptionCaught(Throwable)),
		DefaultChannelHandlerInvoker$6:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-Object) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$6:run() to listOf(ChannelHandlerInvokerUtil:invokeUserEventTriggeredNow(ChannelHandlerContext-Object)),
		AbstractChannel$AbstractUnsafe$1:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$1:run() to listOf(AbstractChannel$AbstractUnsafe:access$100(AbstractChannel$AbstractUnsafe-ChannelPromise)),
		EpollDatagramChannel:<init>() to listOf(Native:socketDgramFd(), AbstractEpollChannel:<init>(int-int), EpollDatagramChannelConfig:<init>(EpollDatagramChannel)),
		EpollDatagramChannel:<init>(FileDescriptor) to listOf(AbstractEpollChannel:<init>(Channel-FileDescriptor-int-boolean), EpollDatagramChannelConfig:<init>(EpollDatagramChannel), FileDescriptor:intValue(), Native:localAddress(int)),
		EpollDatagramChannel:remoteAddress() to listOf(AbstractEpollChannel:remoteAddress(), EpollDatagramChannel:remoteAddress()),
		EpollDatagramChannel:localAddress() to listOf(AbstractEpollChannel:localAddress(), EpollDatagramChannel:localAddress()),
		EpollDatagramChannel:isActive() to listOf(EpollDatagramChannel:fd(), FileDescriptor:isOpen(), EpollDatagramChannelConfig:getOption(ChannelOption), EpollDatagramChannel:isRegistered()),
		EpollDatagramChannel:joinGroup(InetAddress) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:joinGroup(InetAddress-ChannelPromise)),
		EpollDatagramChannel:joinGroup(InetAddress-ChannelPromise) to listOf(EpollDatagramChannel:localAddress(), EpollDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		EpollDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		EpollDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(EpollDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		EpollDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		EpollDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		EpollDatagramChannel:leaveGroup(InetAddress) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:leaveGroup(InetAddress-ChannelPromise)),
		EpollDatagramChannel:leaveGroup(InetAddress-ChannelPromise) to listOf(EpollDatagramChannel:localAddress(), EpollDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		EpollDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		EpollDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(EpollDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		EpollDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		EpollDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		EpollDatagramChannel:block(InetAddress-NetworkInterface-InetAddress) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		EpollDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		EpollDatagramChannel:block(InetAddress-InetAddress) to listOf(EpollDatagramChannel:newPromise(), EpollDatagramChannel:block(InetAddress-InetAddress-ChannelPromise)),
		EpollDatagramChannel:block(InetAddress-InetAddress-ChannelPromise) to listOf(EpollDatagramChannel:localAddress(), EpollDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		EpollDatagramChannel:newUnsafe() to listOf(EpollDatagramChannel$EpollDatagramChannelUnsafe:<init>(EpollDatagramChannel), EpollDatagramChannel:newUnsafe()),
		EpollDatagramChannel:doBind(SocketAddress) to listOf(EpollDatagramChannel:checkResolvable(InetSocketAddress), EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:bind(int-SocketAddress), Native:localAddress(int)),
		EpollDatagramChannel:doWrite(ChannelOutboundBuffer) to listOf(ChannelOutboundBuffer:current(), EpollDatagramChannel:clearFlag(int), ChannelOutboundBuffer:size(), NativeDatagramPacketArray:getInstance(ChannelOutboundBuffer), NativeDatagramPacketArray:count(), NativeDatagramPacketArray:packets(), EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:sendmmsg(int-NativeDatagramPacketArray$NativeDatagramPacket[]-int-int), EpollDatagramChannel:setFlag(int), ChannelOutboundBuffer:remove(), EpollDatagramChannel:config(), EpollDatagramChannelConfig:getWriteSpinCount(), EpollDatagramChannel:doWriteMessage(Object), ChannelOutboundBuffer:remove(), EpollDatagramChannel:setFlag(int), ChannelOutboundBuffer:remove(Throwable)),
		EpollDatagramChannel:doWriteMessage(Object) to listOf(AddressedEnvelope:content(), AddressedEnvelope:recipient(), ByteBuf:readableBytes(), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), EpollDatagramChannel:fd(), FileDescriptor:intValue(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), Native:sendToAddress(int-long-int-int-InetAddress-int), IovArrayThreadLocal:get(CompositeByteBuf), IovArray:count(), EpollDatagramChannel:fd(), FileDescriptor:intValue(), IovArray:memoryAddress(int), Native:sendToAddresses(int-long-int-InetAddress-int), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:internalNioBuffer(int-int), EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:sendTo(int-ByteBuffer-int-int-InetAddress-int)),
		EpollDatagramChannel:filterOutboundMessage(Object) to listOf(DatagramPacket:content(), ByteBuf:hasMemoryAddress(), ByteBuf:isDirect(), CompositeByteBuf:isDirect(), CompositeByteBuf:nioBufferCount(), EpollDatagramChannel:newDirectBuffer(Object-ByteBuf), DatagramPacket:recipient(), DatagramPacket:<init>(ByteBuf-InetSocketAddress), ByteBuf:hasMemoryAddress(), PlatformDependent:hasUnsafe(), ByteBuf:isDirect(), CompositeByteBuf:isDirect(), CompositeByteBuf:nioBufferCount(), EpollDatagramChannel:newDirectBuffer(ByteBuf), ByteBuf:hasMemoryAddress(), EpollDatagramChannel:newDirectBuffer(ByteBuf), ByteBuf:hasMemoryAddress(), AddressedEnvelope:content(), AddressedEnvelope:recipient(), AddressedEnvelope:recipient(), AddressedEnvelope:content(), ByteBuf:hasMemoryAddress(), CompositeByteBuf:isDirect(), CompositeByteBuf:nioBufferCount(), EpollDatagramChannel:newDirectBuffer(Object-ByteBuf), AddressedEnvelope:recipient(), DefaultAddressedEnvelope:<init>(Object-SocketAddress), StringUtil:simpleClassName(Object)),
		EpollDatagramChannel:isOpen() to listOf(AbstractEpollChannel:isOpen()),
		EpollDatagramChannel:config() to listOf(EpollDatagramChannel:config(), EpollDatagramChannel:config(), EpollDatagramChannel:config()),
		EpollDatagramChannel:remoteAddress0() to listOf(EpollDatagramChannel:remoteAddress0()),
		EpollDatagramChannel:localAddress0() to listOf(EpollDatagramChannel:localAddress0()),
		EpollDatagramChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class)),
		EpollEventArray:<init>(int) to listOf(EpollEventArray:allocate(int)),
		EpollEventArray:allocate(int) to listOf(PlatformDependent:allocateMemory(long)),
		EpollEventArray:increase() to listOf(EpollEventArray:free(), EpollEventArray:allocate(int)),
		EpollEventArray:free() to listOf(PlatformDependent:freeMemory(long)),
		EpollEventArray:events(int) to listOf(PlatformDependent:getInt(long)),
		EpollEventArray:fd(int) to listOf(PlatformDependent:getInt(long)),
		EpollEventArray:<clinit>() to listOf(Native:sizeofEpollEvent(), Native:offsetofEpollData()),
		EpollServerSocketChannel:<init>() to listOf(Native:socketStreamFd(), AbstractEpollServerChannel:<init>(int), EpollServerSocketChannelConfig:<init>(EpollServerSocketChannel)),
		EpollServerSocketChannel:<init>(FileDescriptor) to listOf(AbstractEpollServerChannel:<init>(FileDescriptor), EpollServerSocketChannelConfig:<init>(EpollServerSocketChannel), FileDescriptor:intValue(), Native:localAddress(int)),
		EpollServerSocketChannel:doBind(SocketAddress) to listOf(EpollServerSocketChannel:checkResolvable(InetSocketAddress), EpollServerSocketChannel:fd(), FileDescriptor:intValue(), Native:bind(int-SocketAddress), Native:localAddress(int), EpollServerSocketChannelConfig:getBacklog(), Native:listen(int-int)),
		EpollServerSocketChannel:remoteAddress() to listOf(AbstractEpollServerChannel:remoteAddress(), EpollServerSocketChannel:remoteAddress()),
		EpollServerSocketChannel:localAddress() to listOf(AbstractEpollServerChannel:localAddress(), EpollServerSocketChannel:localAddress()),
		EpollServerSocketChannel:newChildChannel(int-byte[]-int-int) to listOf(Native:address(byte[]-int-int), EpollSocketChannel:<init>(Channel-int-InetSocketAddress)),
		EpollServerSocketChannel:config() to listOf(EpollServerSocketChannel:config(), EpollServerSocketChannel:config(), EpollServerSocketChannel:config()),
		EpollServerSocketChannel:localAddress0() to listOf(EpollServerSocketChannel:localAddress0()),
		NativeDatagramPacketArray:<init>() to listOf(NativeDatagramPacketArray$NativeDatagramPacket:<init>()),
		NativeDatagramPacketArray:add(DatagramPacket) to listOf(DatagramPacket:content(), ByteBuf:readableBytes(), DatagramPacket:recipient(), NativeDatagramPacketArray$NativeDatagramPacket:access$300(NativeDatagramPacketArray$NativeDatagramPacket-ByteBuf-InetSocketAddress)),
		NativeDatagramPacketArray:processMessage(Object) to listOf(NativeDatagramPacketArray:add(DatagramPacket)),
		NativeDatagramPacketArray:getInstance(ChannelOutboundBuffer) to listOf(FastThreadLocal:get(), ChannelOutboundBuffer:forEachFlushedMessage(ChannelOutboundBuffer$MessageProcessor)),
		NativeDatagramPacketArray:<init>(NativeDatagramPacketArray$1) to listOf(NativeDatagramPacketArray:<init>()),
		NativeDatagramPacketArray:<clinit>() to listOf(NativeDatagramPacketArray$1:<init>()),
		EpollSocketChannel:<init>(Channel-int-InetSocketAddress) to listOf(AbstractEpollStreamChannel:<init>(Channel-int), EpollSocketChannelConfig:<init>(EpollSocketChannel), Native:localAddress(int)),
		EpollSocketChannel:<init>() to listOf(Native:socketStreamFd(), AbstractEpollStreamChannel:<init>(int), EpollSocketChannelConfig:<init>(EpollSocketChannel)),
		EpollSocketChannel:<init>(FileDescriptor) to listOf(AbstractEpollStreamChannel:<init>(FileDescriptor), EpollSocketChannelConfig:<init>(EpollSocketChannel), FileDescriptor:intValue(), Native:remoteAddress(int), FileDescriptor:intValue(), Native:localAddress(int)),
		EpollSocketChannel:tcpInfo() to listOf(EpollTcpInfo:<init>(), EpollSocketChannel:tcpInfo(EpollTcpInfo)),
		EpollSocketChannel:tcpInfo(EpollTcpInfo) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:tcpInfo(int-EpollTcpInfo)),
		EpollSocketChannel:remoteAddress() to listOf(AbstractEpollStreamChannel:remoteAddress(), EpollSocketChannel:remoteAddress()),
		EpollSocketChannel:localAddress() to listOf(AbstractEpollStreamChannel:localAddress(), EpollSocketChannel:localAddress()),
		EpollSocketChannel:remoteAddress0() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:remoteAddress(int)),
		EpollSocketChannel:doBind(SocketAddress) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:bind(int-SocketAddress), Native:localAddress(int)),
		EpollSocketChannel:isInputShutdown() to listOf(EpollSocketChannel:isInputShutdown0()),
		EpollSocketChannel:isOutputShutdown() to listOf(EpollSocketChannel:isOutputShutdown0()),
		EpollSocketChannel:shutdownOutput() to listOf(EpollSocketChannel:newPromise(), EpollSocketChannel:shutdownOutput(ChannelPromise)),
		EpollSocketChannel:shutdownOutput(ChannelPromise) to listOf(EpollSocketChannel:unsafe(), EpollSocketChannel$EpollSocketChannelUnsafe:closeExecutor(), EpollSocketChannel$1:<init>(EpollSocketChannel-ChannelPromise), EpollSocketChannel:eventLoop(), EventLoop:inEventLoop(), EpollSocketChannel:shutdownOutput0(ChannelPromise), EpollSocketChannel$2:<init>(EpollSocketChannel-ChannelPromise), EventLoop:execute(Runnable)),
		EpollSocketChannel:parent() to listOf(AbstractEpollStreamChannel:parent(), EpollSocketChannel:parent()),
		EpollSocketChannel:newUnsafe() to listOf(EpollSocketChannel$EpollSocketChannelUnsafe:<init>(EpollSocketChannel-EpollSocketChannel$1), EpollSocketChannel:newUnsafe()),
		EpollSocketChannel:doConnect(SocketAddress-SocketAddress) to listOf(EpollSocketChannel:checkResolvable(InetSocketAddress), EpollSocketChannel:checkResolvable(InetSocketAddress), AbstractEpollStreamChannel:doConnect(SocketAddress-SocketAddress), EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:localAddress(int)),
		EpollSocketChannel:config() to listOf(EpollSocketChannel:config(), EpollSocketChannel:config(), EpollSocketChannel:config()),
		Native:newConnectionResetException(String-int) to listOf(Native:newIOException(String-int)),
		Native:ioResult(String-int-IOException) to listOf(Native:newIOException(String-int)),
		Native:epollWait(int-EpollEventArray-int) to listOf(EpollEventArray:memoryAddress(), EpollEventArray:length(), Native:epollWait0(int-long-int-int), Native:newIOException(String-int)),
		Native:close(int) to listOf(Native:close0(int), Native:newIOException(String-int)),
		Native:write(int-ByteBuffer-int-int) to listOf(Native:write0(int-ByteBuffer-int-int), Native:ioResult(String-int-IOException)),
		Native:writeAddress(int-long-int-int) to listOf(Native:writeAddress0(int-long-int-int), Native:ioResult(String-int-IOException)),
		Native:writev(int-ByteBuffer[]-int-int) to listOf(Native:writev0(int-ByteBuffer[]-int-int), Native:ioResult(String-int-IOException)),
		Native:writevAddresses(int-long-int) to listOf(Native:writevAddresses0(int-long-int), Native:ioResult(String-int-IOException)),
		Native:read(int-ByteBuffer-int-int) to listOf(Native:read0(int-ByteBuffer-int-int), Native:ioResult(String-int-IOException)),
		Native:readAddress(int-long-int-int) to listOf(Native:readAddress0(int-long-int-int), Native:ioResult(String-int-IOException)),
		Native:sendfile(int-DefaultFileRegion-long-long-long) to listOf(DefaultFileRegion:open(), Native:sendfile0(int-DefaultFileRegion-long-long-long), Native:ioResult(String-int-IOException)),
		Native:sendTo(int-ByteBuffer-int-int-InetAddress-int) to listOf(Native:ipv4MappedIpv6Address(byte[]), Native:sendTo0(int-ByteBuffer-int-int-byte[]-int-int), Native:ioResult(String-int-IOException)),
		Native:sendToAddress(int-long-int-int-InetAddress-int) to listOf(Native:ipv4MappedIpv6Address(byte[]), Native:sendToAddress0(int-long-int-int-byte[]-int-int), Native:ioResult(String-int-IOException)),
		Native:sendToAddresses(int-long-int-InetAddress-int) to listOf(Native:ipv4MappedIpv6Address(byte[]), Native:sendToAddresses(int-long-int-byte[]-int-int), Native:ioResult(String-int-IOException)),
		Native:sendmmsg(int-NativeDatagramPacketArray$NativeDatagramPacket[]-int-int) to listOf(Native:sendmmsg0(int-NativeDatagramPacketArray$NativeDatagramPacket[]-int-int), Native:ioResult(String-int-IOException)),
		Native:socketStreamFd() to listOf(Native:socketStream(), Native:newIOException(String-int), ChannelException:<init>(Throwable)),
		Native:socketDgramFd() to listOf(Native:socketDgram(), Native:newIOException(String-int), ChannelException:<init>(Throwable)),
		Native:socketDomainFd() to listOf(Native:socketDomain(), Native:newIOException(String-int), ChannelException:<init>(Throwable)),
		Native:bind(int-SocketAddress) to listOf(Native:toNativeInetAddress(InetAddress), Native:bind(int-byte[]-int-int), Native:newIOException(String-int), DomainSocketAddress:path(), Native:bindDomainSocket(int-String), Native:newIOException(String-int)),
		Native:listen(int-int) to listOf(Native:listen0(int-int), Native:newIOException(String-int)),
		Native:connect(int-SocketAddress) to listOf(Native:toNativeInetAddress(InetAddress), Native:connect(int-byte[]-int-int), DomainSocketAddress:path(), Native:connectDomainSocket(int-String), Native:newIOException(String-int)),
		Native:finishConnect(int) to listOf(Native:finishConnect0(int), Native:newIOException(String-int)),
		Native:remoteAddress(int) to listOf(Native:remoteAddress0(int), Native:address(byte[]-int-int)),
		Native:localAddress(int) to listOf(Native:localAddress0(int), Native:address(byte[]-int-int)),
		Native:address(byte[]-int-int) to listOf(Native:decodeInt(byte[]-int), Native:decodeInt(byte[]-int)),
		Native:accept(int-byte[]) to listOf(Native:accept0(int-byte[]), Native:newIOException(String-int)),
		Native:recvFd(int) to listOf(Native:recvFd0(int), Native:newIOException(String-int)),
		Native:sendFd(int-int) to listOf(Native:sendFd0(int-int), Native:newIOException(String-int)),
		Native:shutdown(int-boolean-boolean) to listOf(Native:shutdown0(int-boolean-boolean), Native:newIOException(String-int)),
		Native:tcpInfo(int-EpollTcpInfo) to listOf(Native:tcpInfo0(int-int[])),
		Native:toNativeInetAddress(InetAddress) to listOf(Native$NativeInetAddress:<init>(byte[]-int), Native:ipv4MappedIpv6Address(byte[]), Native$NativeInetAddress:<init>(byte[])),
		Native:<clinit>() to listOf(SystemPropertyUtil:get(String), PlatformDependent:getClassLoader(Class), NativeLibraryLoader:load(String-ClassLoader), Native:epollin(), Native:epollout(), Native:epollrdhup(), Native:epollet(), Native:iovMax(), Native:uioMaxIov(), Native:isSupportingSendmmsg(), Native:errnoEBADF(), Native:errnoEPIPE(), Native:errnoECONNRESET(), Native:errnoEAGAIN(), Native:errnoEWOULDBLOCK(), Native:errnoEINPROGRESS(), Native:strError(int), Native:newConnectionResetException(String-int), Native:newConnectionResetException(String-int), Native:newConnectionResetException(String-int), Native:newConnectionResetException(String-int), Native:newConnectionResetException(String-int), Native:newConnectionResetException(String-int), Native:newConnectionResetException(String-int)),
		AbstractEpollStreamChannel$EpollStreamUnsafe$2:operationComplete(ChannelFuture) to listOf(ChannelFuture:isCancelled(), AbstractEpollStreamChannel$EpollStreamUnsafe:access$200(AbstractEpollStreamChannel$EpollStreamUnsafe), AbstractEpollStreamChannel$EpollStreamUnsafe:access$200(AbstractEpollStreamChannel$EpollStreamUnsafe), AbstractEpollStreamChannel$EpollStreamUnsafe:access$102(AbstractEpollStreamChannel$EpollStreamUnsafe-ChannelPromise), AbstractEpollStreamChannel$EpollStreamUnsafe:voidPromise(), AbstractEpollStreamChannel$EpollStreamUnsafe:close(ChannelPromise)),
		AbstractEpollStreamChannel$EpollStreamUnsafe$2:operationComplete(Future) to listOf(AbstractEpollStreamChannel$EpollStreamUnsafe$2:operationComplete(ChannelFuture)),
		EpollDatagramChannelConfig:<init>(EpollDatagramChannel) to listOf(EpollChannelConfig:<init>(AbstractEpollChannel), EpollDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		EpollDatagramChannelConfig:getOptions() to listOf(EpollChannelConfig:getOptions(), EpollDatagramChannelConfig:getOptions(Map-ChannelOption[])),
		EpollDatagramChannelConfig:getOption(ChannelOption) to listOf(EpollDatagramChannelConfig:isBroadcast(), EpollDatagramChannelConfig:getReceiveBufferSize(), EpollDatagramChannelConfig:getSendBufferSize(), EpollDatagramChannelConfig:isReuseAddress(), EpollDatagramChannelConfig:isLoopbackModeDisabled(), EpollDatagramChannelConfig:getInterface(), EpollDatagramChannelConfig:getNetworkInterface(), EpollDatagramChannelConfig:getTimeToLive(), EpollDatagramChannelConfig:getTrafficClass(), EpollDatagramChannelConfig:isReusePort(), EpollChannelConfig:getOption(ChannelOption)),
		EpollDatagramChannelConfig:setOption(ChannelOption-Object) to listOf(EpollDatagramChannelConfig:validate(ChannelOption-Object), EpollDatagramChannelConfig:setBroadcast(boolean), EpollDatagramChannelConfig:setReceiveBufferSize(int), EpollDatagramChannelConfig:setSendBufferSize(int), EpollDatagramChannelConfig:setReuseAddress(boolean), EpollDatagramChannelConfig:setLoopbackModeDisabled(boolean), EpollDatagramChannelConfig:setInterface(InetAddress), EpollDatagramChannelConfig:setNetworkInterface(NetworkInterface), EpollDatagramChannelConfig:setTimeToLive(int), EpollDatagramChannelConfig:setTrafficClass(int), EpollDatagramChannelConfig:setActiveOnOpen(boolean), EpollDatagramChannelConfig:setReusePort(boolean), EpollChannelConfig:setOption(ChannelOption-Object)),
		EpollDatagramChannelConfig:setActiveOnOpen(boolean) to listOf(AbstractEpollChannel:isRegistered()),
		EpollDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(EpollChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		EpollDatagramChannelConfig:setWriteBufferLowWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferLowWaterMark(int), EpollDatagramChannelConfig:setWriteBufferLowWaterMark(int), EpollDatagramChannelConfig:setWriteBufferLowWaterMark(int)),
		EpollDatagramChannelConfig:setWriteBufferHighWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferHighWaterMark(int), EpollDatagramChannelConfig:setWriteBufferHighWaterMark(int), EpollDatagramChannelConfig:setWriteBufferHighWaterMark(int)),
		EpollDatagramChannelConfig:setAutoRead(boolean) to listOf(EpollChannelConfig:setAutoRead(boolean), EpollDatagramChannelConfig:setAutoRead(boolean), EpollDatagramChannelConfig:setAutoRead(boolean), EpollDatagramChannelConfig:setAutoRead(boolean)),
		EpollDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(EpollChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		EpollDatagramChannelConfig:setWriteSpinCount(int) to listOf(EpollChannelConfig:setWriteSpinCount(int), EpollDatagramChannelConfig:setWriteSpinCount(int), EpollDatagramChannelConfig:setWriteSpinCount(int), EpollDatagramChannelConfig:setWriteSpinCount(int)),
		EpollDatagramChannelConfig:setAllocator(ByteBufAllocator) to listOf(EpollChannelConfig:setAllocator(ByteBufAllocator), EpollDatagramChannelConfig:setAllocator(ByteBufAllocator), EpollDatagramChannelConfig:setAllocator(ByteBufAllocator), EpollDatagramChannelConfig:setAllocator(ByteBufAllocator)),
		EpollDatagramChannelConfig:setConnectTimeoutMillis(int) to listOf(EpollChannelConfig:setConnectTimeoutMillis(int), EpollDatagramChannelConfig:setConnectTimeoutMillis(int), EpollDatagramChannelConfig:setConnectTimeoutMillis(int), EpollDatagramChannelConfig:setConnectTimeoutMillis(int)),
		EpollDatagramChannelConfig:setMaxMessagesPerRead(int) to listOf(EpollChannelConfig:setMaxMessagesPerRead(int), EpollDatagramChannelConfig:setMaxMessagesPerRead(int), EpollDatagramChannelConfig:setMaxMessagesPerRead(int), EpollDatagramChannelConfig:setMaxMessagesPerRead(int)),
		EpollDatagramChannelConfig:getSendBufferSize() to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:getSendBufferSize(int)),
		EpollDatagramChannelConfig:setSendBufferSize(int) to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:setSendBufferSize(int-int), EpollDatagramChannelConfig:setSendBufferSize(int)),
		EpollDatagramChannelConfig:getReceiveBufferSize() to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:getReceiveBufferSize(int)),
		EpollDatagramChannelConfig:setReceiveBufferSize(int) to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:setReceiveBufferSize(int-int), EpollDatagramChannelConfig:setReceiveBufferSize(int)),
		EpollDatagramChannelConfig:getTrafficClass() to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:getTrafficClass(int)),
		EpollDatagramChannelConfig:setTrafficClass(int) to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:setTrafficClass(int-int), EpollDatagramChannelConfig:setTrafficClass(int)),
		EpollDatagramChannelConfig:isReuseAddress() to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:isReuseAddress(int)),
		EpollDatagramChannelConfig:setReuseAddress(boolean) to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:setReuseAddress(int-int), EpollDatagramChannelConfig:setReuseAddress(boolean)),
		EpollDatagramChannelConfig:isBroadcast() to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:isBroadcast(int)),
		EpollDatagramChannelConfig:setBroadcast(boolean) to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:setBroadcast(int-int), EpollDatagramChannelConfig:setBroadcast(boolean)),
		EpollDatagramChannelConfig:setTimeToLive(int) to listOf(EpollDatagramChannelConfig:setTimeToLive(int)),
		EpollDatagramChannelConfig:setInterface(InetAddress) to listOf(EpollDatagramChannelConfig:setInterface(InetAddress)),
		EpollDatagramChannelConfig:setNetworkInterface(NetworkInterface) to listOf(EpollDatagramChannelConfig:setNetworkInterface(NetworkInterface)),
		EpollDatagramChannelConfig:setEpollMode(EpollMode) to listOf(EpollChannelConfig:setEpollMode(EpollMode), EpollDatagramChannelConfig:setEpollMode(EpollMode)),
		EpollDatagramChannelConfig:isReusePort() to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:isReusePort(int)),
		EpollDatagramChannelConfig:setReusePort(boolean) to listOf(EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:setReusePort(int-int)),
		EpollDatagramChannelConfig:<clinit>() to listOf(FixedRecvByteBufAllocator:<init>(int)),
		EpollSocketChannel$EpollSocketChannelUnsafe:<init>(EpollSocketChannel) to listOf(AbstractEpollStreamChannel$EpollStreamUnsafe:<init>(AbstractEpollStreamChannel)),
		EpollSocketChannel$EpollSocketChannelUnsafe:closeExecutor() to listOf(EpollSocketChannel:config(), EpollSocketChannelConfig:getSoLinger()),
		EpollSocketChannel$EpollSocketChannelUnsafe:<init>(EpollSocketChannel-EpollSocketChannel$1) to listOf(EpollSocketChannel$EpollSocketChannelUnsafe:<init>(EpollSocketChannel)),
		EpollChannelConfig$1:<clinit>() to listOf(EpollMode:values(), EpollMode:ordinal(), EpollMode:ordinal()),
		IovArrayThreadLocal:get(ChannelOutboundBuffer) to listOf(FastThreadLocal:get(), IovArray:clear(), ChannelOutboundBuffer:forEachFlushedMessage(ChannelOutboundBuffer$MessageProcessor)),
		IovArrayThreadLocal:get(CompositeByteBuf) to listOf(FastThreadLocal:get(), IovArray:clear(), IovArray:add(CompositeByteBuf)),
		IovArrayThreadLocal:<clinit>() to listOf(IovArrayThreadLocal$1:<init>()),
		AbstractEpollChannel:<init>(int-int) to listOf(AbstractEpollChannel:<init>(Channel-int-int-boolean)),
		AbstractEpollChannel:<init>(Channel-int-int-boolean) to listOf(FileDescriptor:<init>(int), AbstractEpollChannel:<init>(Channel-FileDescriptor-int-boolean)),
		AbstractEpollChannel:<init>(Channel-FileDescriptor-int-boolean) to listOf(AbstractChannel:<init>(Channel)),
		AbstractEpollChannel:setFlag(int) to listOf(AbstractEpollChannel:isFlagSet(int), AbstractEpollChannel:modifyEvents()),
		AbstractEpollChannel:clearFlag(int) to listOf(AbstractEpollChannel:isFlagSet(int), AbstractEpollChannel:modifyEvents()),
		AbstractEpollChannel:doClose() to listOf(AbstractEpollChannel:doDeregister(), FileDescriptor:close()),
		AbstractEpollChannel:doDisconnect() to listOf(AbstractEpollChannel:doClose()),
		AbstractEpollChannel:isOpen() to listOf(FileDescriptor:isOpen()),
		AbstractEpollChannel:doDeregister() to listOf(AbstractEpollChannel:eventLoop(), EventLoop:unwrap(), EpollEventLoop:remove(AbstractEpollChannel)),
		AbstractEpollChannel:doBeginRead() to listOf(AbstractEpollChannel:unsafe(), AbstractEpollChannel:setFlag(int)),
		AbstractEpollChannel:clearEpollIn() to listOf(AbstractEpollChannel:isRegistered(), AbstractEpollChannel:eventLoop(), AbstractEpollChannel:unsafe(), EventLoop:inEventLoop(), AbstractEpollChannel$AbstractEpollUnsafe:clearEpollIn0(), AbstractEpollChannel$1:<init>(AbstractEpollChannel-AbstractEpollChannel$AbstractEpollUnsafe), EventLoop:execute(Runnable)),
		AbstractEpollChannel:modifyEvents() to listOf(AbstractEpollChannel:isOpen(), AbstractEpollChannel:isRegistered(), AbstractEpollChannel:eventLoop(), EventLoop:unwrap(), EpollEventLoop:modify(AbstractEpollChannel)),
		AbstractEpollChannel:doRegister() to listOf(AbstractEpollChannel:eventLoop(), EventLoop:unwrap(), EpollEventLoop:add(AbstractEpollChannel)),
		AbstractEpollChannel:newDirectBuffer(ByteBuf) to listOf(AbstractEpollChannel:newDirectBuffer(Object-ByteBuf)),
		AbstractEpollChannel:newDirectBuffer(Object-ByteBuf) to listOf(ByteBuf:readableBytes(), ReferenceCountUtil:safeRelease(Object), AbstractEpollChannel:alloc(), ByteBufAllocator:isDirectBufferPooled(), AbstractEpollChannel:newDirectBuffer0(Object-ByteBuf-ByteBufAllocator-int), ByteBufUtil:threadLocalDirectBuffer(), AbstractEpollChannel:newDirectBuffer0(Object-ByteBuf-ByteBufAllocator-int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ReferenceCountUtil:safeRelease(Object)),
		AbstractEpollChannel:newDirectBuffer0(Object-ByteBuf-ByteBufAllocator-int) to listOf(ByteBufAllocator:directBuffer(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ReferenceCountUtil:safeRelease(Object)),
		AbstractEpollChannel:doReadBytes(ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:hasMemoryAddress(), FileDescriptor:intValue(), ByteBuf:memoryAddress(), ByteBuf:capacity(), Native:readAddress(int-long-int-int), ByteBuf:writableBytes(), ByteBuf:internalNioBuffer(int-int), FileDescriptor:intValue(), Native:read(int-ByteBuffer-int-int), ByteBuf:writerIndex(int)),
		AbstractEpollChannel:doWriteBytes(ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), FileDescriptor:intValue(), Native:writeAddress(int-long-int-int), ByteBuf:nioBufferCount(), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:internalNioBuffer(int-int), ByteBuf:nioBuffer(), FileDescriptor:intValue(), Native:write(int-ByteBuffer-int-int), AbstractEpollChannel:setFlag(int)),
		AbstractEpollChannel:newUnsafe() to listOf(AbstractEpollChannel:newUnsafe()),
		AbstractEpollChannel:config() to listOf(AbstractEpollChannel:config()),
		AbstractEpollChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		Native$NativeInetAddress:<init>(byte[]) to listOf(Native$NativeInetAddress:<init>(byte[]-int)),
		EpollSocketChannel$1:<init>(EpollSocketChannel-ChannelPromise) to listOf(OneTimeTask:<init>()),
		EpollSocketChannel$1:run() to listOf(EpollSocketChannel:shutdownOutput0(ChannelPromise)),
		EpollDomainSocketChannelConfig:<init>(AbstractEpollChannel) to listOf(EpollChannelConfig:<init>(AbstractEpollChannel)),
		EpollDomainSocketChannelConfig:getOptions() to listOf(EpollChannelConfig:getOptions(), EpollDomainSocketChannelConfig:getOptions(Map-ChannelOption[])),
		EpollDomainSocketChannelConfig:getOption(ChannelOption) to listOf(EpollDomainSocketChannelConfig:getReadMode(), EpollChannelConfig:getOption(ChannelOption)),
		EpollDomainSocketChannelConfig:setOption(ChannelOption-Object) to listOf(EpollDomainSocketChannelConfig:validate(ChannelOption-Object), EpollDomainSocketChannelConfig:setReadMode(DomainSocketReadMode), EpollChannelConfig:setOption(ChannelOption-Object)),
		EpollDomainSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(EpollChannelConfig:setMaxMessagesPerRead(int), EpollDomainSocketChannelConfig:setMaxMessagesPerRead(int), EpollDomainSocketChannelConfig:setMaxMessagesPerRead(int), EpollDomainSocketChannelConfig:setMaxMessagesPerRead(int)),
		EpollDomainSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(EpollChannelConfig:setConnectTimeoutMillis(int), EpollDomainSocketChannelConfig:setConnectTimeoutMillis(int), EpollDomainSocketChannelConfig:setConnectTimeoutMillis(int), EpollDomainSocketChannelConfig:setConnectTimeoutMillis(int)),
		EpollDomainSocketChannelConfig:setWriteSpinCount(int) to listOf(EpollChannelConfig:setWriteSpinCount(int), EpollDomainSocketChannelConfig:setWriteSpinCount(int), EpollDomainSocketChannelConfig:setWriteSpinCount(int), EpollDomainSocketChannelConfig:setWriteSpinCount(int)),
		EpollDomainSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(EpollChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollDomainSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollDomainSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollDomainSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		EpollDomainSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(EpollChannelConfig:setAllocator(ByteBufAllocator), EpollDomainSocketChannelConfig:setAllocator(ByteBufAllocator), EpollDomainSocketChannelConfig:setAllocator(ByteBufAllocator), EpollDomainSocketChannelConfig:setAllocator(ByteBufAllocator)),
		EpollDomainSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(EpollChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollDomainSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollDomainSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollDomainSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		EpollDomainSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferLowWaterMark(int), EpollDomainSocketChannelConfig:setWriteBufferLowWaterMark(int), EpollDomainSocketChannelConfig:setWriteBufferLowWaterMark(int), EpollDomainSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		EpollDomainSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferHighWaterMark(int), EpollDomainSocketChannelConfig:setWriteBufferHighWaterMark(int), EpollDomainSocketChannelConfig:setWriteBufferHighWaterMark(int), EpollDomainSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		EpollDomainSocketChannelConfig:setAutoRead(boolean) to listOf(EpollChannelConfig:setAutoRead(boolean), EpollDomainSocketChannelConfig:setAutoRead(boolean), EpollDomainSocketChannelConfig:setAutoRead(boolean), EpollDomainSocketChannelConfig:setAutoRead(boolean)),
		EpollDomainSocketChannelConfig:setEpollMode(EpollMode) to listOf(EpollChannelConfig:setEpollMode(EpollMode), EpollDomainSocketChannelConfig:setEpollMode(EpollMode)),
		EpollDomainSocketChannelConfig:setReadMode(DomainSocketReadMode) to listOf(EpollDomainSocketChannelConfig:setReadMode(DomainSocketReadMode)),
		EpollServerDomainSocketChannel:<init>() to listOf(Native:socketDomainFd(), AbstractEpollServerChannel:<init>(int), EpollServerChannelConfig:<init>(AbstractEpollChannel)),
		EpollServerDomainSocketChannel:<init>(FileDescriptor) to listOf(AbstractEpollServerChannel:<init>(FileDescriptor), EpollServerChannelConfig:<init>(AbstractEpollChannel)),
		EpollServerDomainSocketChannel:newChildChannel(int-byte[]-int-int) to listOf(EpollDomainSocketChannel:<init>(Channel-int)),
		EpollServerDomainSocketChannel:doBind(SocketAddress) to listOf(EpollServerDomainSocketChannel:fd(), FileDescriptor:intValue(), Native:bind(int-SocketAddress), EpollServerChannelConfig:getBacklog(), Native:listen(int-int)),
		EpollServerDomainSocketChannel:doClose() to listOf(AbstractEpollServerChannel:doClose(), DomainSocketAddress:path(), InternalLogger:isDebugEnabled(), DomainSocketAddress:path(), InternalLogger:debug(String-Object), DomainSocketAddress:path(), InternalLogger:isDebugEnabled(), DomainSocketAddress:path(), InternalLogger:debug(String-Object)),
		EpollServerDomainSocketChannel:remoteAddress() to listOf(AbstractEpollServerChannel:remoteAddress(), EpollServerDomainSocketChannel:remoteAddress()),
		EpollServerDomainSocketChannel:localAddress() to listOf(AbstractEpollServerChannel:localAddress(), EpollServerDomainSocketChannel:localAddress()),
		EpollServerDomainSocketChannel:config() to listOf(EpollServerDomainSocketChannel:config(), EpollServerDomainSocketChannel:config()),
		EpollServerDomainSocketChannel:localAddress0() to listOf(EpollServerDomainSocketChannel:localAddress0()),
		EpollServerDomainSocketChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:<init>(AbstractEpollStreamChannel) to listOf(AbstractEpollChannel$AbstractEpollUnsafe:<init>(AbstractEpollChannel)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:closeOnRead(ChannelPipeline) to listOf(AbstractEpollStreamChannel:access$002(AbstractEpollStreamChannel-boolean), AbstractEpollStreamChannel:isOpen(), AbstractEpollStreamChannel:config(), EpollChannelConfig:getOption(ChannelOption), AbstractEpollStreamChannel$EpollStreamUnsafe:clearEpollIn0(), ChannelPipeline:fireUserEventTriggered(Object), AbstractEpollStreamChannel$EpollStreamUnsafe:voidPromise(), AbstractEpollStreamChannel$EpollStreamUnsafe:close(ChannelPromise)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:handleReadException(ChannelPipeline-ByteBuf-Throwable-boolean) to listOf(ByteBuf:isReadable(), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractEpollStreamChannel$EpollStreamUnsafe:closeOnRead(ChannelPipeline)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractEpollStreamChannel$EpollStreamUnsafe:ensureOpen(ChannelPromise), AbstractEpollStreamChannel:isActive(), AbstractEpollStreamChannel:doConnect(SocketAddress-SocketAddress), AbstractEpollStreamChannel$EpollStreamUnsafe:fulfillConnectPromise(ChannelPromise-boolean), AbstractEpollStreamChannel:config(), EpollChannelConfig:getConnectTimeoutMillis(), AbstractEpollStreamChannel:eventLoop(), AbstractEpollStreamChannel$EpollStreamUnsafe$1:<init>(AbstractEpollStreamChannel$EpollStreamUnsafe-SocketAddress), EventLoop:schedule(Runnable-long-TimeUnit), AbstractEpollStreamChannel$EpollStreamUnsafe$2:<init>(AbstractEpollStreamChannel$EpollStreamUnsafe), ChannelPromise:addListener(GenericFutureListener), AbstractEpollStreamChannel$EpollStreamUnsafe:closeIfClosed(), AbstractEpollStreamChannel$EpollStreamUnsafe:annotateConnectException(Throwable-SocketAddress), ChannelPromise:tryFailure(Throwable)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:fulfillConnectPromise(ChannelPromise-boolean) to listOf(ChannelPromise:trySuccess(), AbstractEpollStreamChannel:isActive(), AbstractEpollStreamChannel:pipeline(), ChannelPipeline:fireChannelActive(), AbstractEpollStreamChannel$EpollStreamUnsafe:voidPromise(), AbstractEpollStreamChannel$EpollStreamUnsafe:close(ChannelPromise)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:fulfillConnectPromise(ChannelPromise-Throwable) to listOf(ChannelPromise:tryFailure(Throwable), AbstractEpollStreamChannel$EpollStreamUnsafe:closeIfClosed()),
		AbstractEpollStreamChannel$EpollStreamUnsafe:finishConnect() to listOf(AbstractEpollStreamChannel:eventLoop(), EventLoop:inEventLoop(), AbstractEpollStreamChannel:isActive(), AbstractEpollStreamChannel$EpollStreamUnsafe:doFinishConnect(), AbstractEpollStreamChannel$EpollStreamUnsafe:fulfillConnectPromise(ChannelPromise-boolean), AbstractEpollStreamChannel$EpollStreamUnsafe:annotateConnectException(Throwable-SocketAddress), AbstractEpollStreamChannel$EpollStreamUnsafe:fulfillConnectPromise(ChannelPromise-Throwable)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:epollOutReady() to listOf(AbstractEpollStreamChannel$EpollStreamUnsafe:finishConnect(), AbstractEpollChannel$AbstractEpollUnsafe:epollOutReady()),
		AbstractEpollStreamChannel$EpollStreamUnsafe:doFinishConnect() to listOf(AbstractEpollStreamChannel:fd(), FileDescriptor:intValue(), Native:finishConnect(int), AbstractEpollStreamChannel:clearFlag(int), AbstractEpollStreamChannel:setFlag(int)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:epollRdHupReady() to listOf(AbstractEpollStreamChannel:isActive(), AbstractEpollStreamChannel$EpollStreamUnsafe:epollInReady(), AbstractEpollStreamChannel:pipeline(), AbstractEpollStreamChannel$EpollStreamUnsafe:closeOnRead(ChannelPipeline)),
		AbstractEpollStreamChannel$EpollStreamUnsafe:epollInReady() to listOf(AbstractEpollStreamChannel:config(), AbstractEpollStreamChannel:isFlagSet(int), ChannelConfig:isAutoRead(), AbstractEpollStreamChannel$EpollStreamUnsafe:clearEpollIn0(), AbstractEpollStreamChannel:pipeline(), ChannelConfig:getAllocator(), ChannelConfig:getRecvByteBufAllocator(), RecvByteBufAllocator:newHandle(), ChannelConfig:getMaxMessagesPerRead(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writableBytes(), AbstractEpollStreamChannel:doReadBytes(ByteBuf), ByteBuf:release(), ChannelPipeline:fireChannelRead(Object), RecvByteBufAllocator$Handle:record(int), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelReadComplete(), RecvByteBufAllocator$Handle:record(int), AbstractEpollStreamChannel$EpollStreamUnsafe:closeOnRead(ChannelPipeline), ChannelConfig:isAutoRead(), AbstractEpollStreamChannel$EpollStreamUnsafe:clearEpollIn0(), AbstractEpollStreamChannel$EpollStreamUnsafe:handleReadException(ChannelPipeline-ByteBuf-Throwable-boolean), AbstractEpollStreamChannel:eventLoop(), AbstractEpollStreamChannel$EpollStreamUnsafe$3:<init>(AbstractEpollStreamChannel$EpollStreamUnsafe), EventLoop:execute(Runnable), ChannelConfig:isAutoRead(), AbstractEpollStreamChannel$EpollStreamUnsafe:clearEpollIn0(), ChannelConfig:isAutoRead(), AbstractEpollStreamChannel$EpollStreamUnsafe:clearEpollIn0()),
		AbstractEpollServerChannel$EpollServerSocketUnsafe:<init>(AbstractEpollServerChannel) to listOf(AbstractEpollChannel$AbstractEpollUnsafe:<init>(AbstractEpollChannel)),
		AbstractEpollServerChannel$EpollServerSocketUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		AbstractEpollServerChannel$EpollServerSocketUnsafe:epollInReady() to listOf(AbstractEpollServerChannel:eventLoop(), EventLoop:inEventLoop(), AbstractEpollServerChannel:isFlagSet(int), AbstractEpollServerChannel:config(), ChannelConfig:isAutoRead(), AbstractEpollServerChannel$EpollServerSocketUnsafe:clearEpollIn0(), AbstractEpollServerChannel:pipeline(), ChannelConfig:getMaxMessagesPerRead(), AbstractEpollServerChannel:fd(), FileDescriptor:intValue(), Native:accept(int-byte[]), AbstractEpollServerChannel:newChildChannel(int-byte[]-int-int), ChannelPipeline:fireChannelRead(Object), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelConfig:isAutoRead(), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelConfig:isAutoRead(), AbstractEpollServerChannel$EpollServerSocketUnsafe:clearEpollIn0(), ChannelConfig:isAutoRead(), AbstractEpollServerChannel$EpollServerSocketUnsafe:clearEpollIn0()),
		EpollDomainSocketChannel$EpollDomainUnsafe$1:run() to listOf(EpollDomainSocketChannel$EpollDomainUnsafe:epollInReady()),
		NativeDatagramPacketArray$NativeDatagramPacket:<init>() to listOf(IovArray:<init>()),
		NativeDatagramPacketArray$NativeDatagramPacket:release() to listOf(IovArray:release()),
		NativeDatagramPacketArray$NativeDatagramPacket:init(ByteBuf-InetSocketAddress) to listOf(IovArray:clear(), IovArray:add(ByteBuf), IovArray:memoryAddress(int), IovArray:count(), Native:ipv4MappedIpv6Address(byte[])),
		NativeDatagramPacketArray$NativeDatagramPacket:access$200(NativeDatagramPacketArray$NativeDatagramPacket) to listOf(NativeDatagramPacketArray$NativeDatagramPacket:release()),
		NativeDatagramPacketArray$NativeDatagramPacket:access$300(NativeDatagramPacketArray$NativeDatagramPacket-ByteBuf-InetSocketAddress) to listOf(NativeDatagramPacketArray$NativeDatagramPacket:init(ByteBuf-InetSocketAddress)),
		EpollChannelOption:<clinit>() to listOf(ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String)),
		AbstractEpollChannel$1:<init>(AbstractEpollChannel-AbstractEpollChannel$AbstractEpollUnsafe) to listOf(OneTimeTask:<init>()),
		AbstractEpollChannel$1:run() to listOf(AbstractEpollChannel:config(), EpollChannelConfig:isAutoRead(), AbstractEpollChannel$AbstractEpollUnsafe:clearEpollIn0()),
		IovArrayThreadLocal$1:<init>() to listOf(FastThreadLocal:<init>()),
		IovArrayThreadLocal$1:initialValue() to listOf(IovArray:<init>(), IovArrayThreadLocal$1:initialValue()),
		IovArrayThreadLocal$1:onRemoval(IovArray) to listOf(IovArray:release()),
		IovArrayThreadLocal$1:onRemoval(Object) to listOf(IovArrayThreadLocal$1:onRemoval(IovArray)),
		EpollEventLoop:<init>(EventLoopGroup-Executor-int) to listOf(SingleThreadEventLoop:<init>(EventLoopGroup-Executor-boolean), IntObjectHashMap:<init>(int), EpollEventArray:<init>(int), EpollEventArray:<init>(int), Native:epollCreate(), Native:eventFd(), Native:epollCtlAdd(int-int-int), Native:close(int), Native:close(int), Native:close(int), Native:close(int)),
		EpollEventLoop:wakeup(boolean) to listOf(Native:eventFdWrite(int-long)),
		EpollEventLoop:add(AbstractEpollChannel) to listOf(EpollEventLoop:inEventLoop(), AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:epollCtlAdd(int-int-int), IntObjectMap:put(int-Object)),
		EpollEventLoop:modify(AbstractEpollChannel) to listOf(EpollEventLoop:inEventLoop(), AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:epollCtlMod(int-int-int)),
		EpollEventLoop:remove(AbstractEpollChannel) to listOf(EpollEventLoop:inEventLoop(), AbstractEpollChannel:isOpen(), AbstractEpollChannel:fd(), FileDescriptor:intValue(), IntObjectMap:remove(int), AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:epollCtlDel(int-int)),
		EpollEventLoop:newTaskQueue() to listOf(PlatformDependent:newMpscQueue()),
		EpollEventLoop:epollWait(boolean) to listOf(EpollEventLoop:delayNanos(long), Native:epollWait(int-EpollEventArray-int), Native:epollWait(int-EpollEventArray-int), EpollEventLoop:hasTasks(), EpollEventLoop:hasScheduledTasks()),
		EpollEventLoop:run() to listOf(EpollEventLoop:hasTasks(), Native:epollWait(int-EpollEventArray-int), EpollEventLoop:epollWait(boolean), Native:eventFdWrite(int-long), EpollEventLoop:processReady(EpollEventArray-int), EpollEventLoop:runAllTasks(), EpollEventLoop:processReady(EpollEventArray-int), EpollEventLoop:runAllTasks(long), EpollEventArray:length(), EpollEventArray:increase(), EpollEventLoop:isShuttingDown(), EpollEventLoop:closeAll(), EpollEventLoop:confirmShutdown(), EpollEventLoop:cleanupAndTerminate(boolean), InternalLogger:warn(String-Throwable), EpollEventLoop:scheduleExecution()),
		EpollEventLoop:closeAll() to listOf(Native:epollWait(int-EpollEventArray-int), IntObjectMap:size(), IntObjectMap:entries(), IntObjectMap$Entry:value(), AbstractEpollChannel:unsafe(), AbstractEpollChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		EpollEventLoop:processReady(EpollEventArray-int) to listOf(EpollEventArray:fd(int), Native:eventFdRead(int), EpollEventArray:events(int), IntObjectMap:get(int), AbstractEpollChannel:isOpen(), AbstractEpollChannel:unsafe(), AbstractEpollChannel$AbstractEpollUnsafe:epollRdHupReady(), AbstractEpollChannel:isOpen(), AbstractEpollChannel$AbstractEpollUnsafe:epollOutReady(), AbstractEpollChannel:isOpen(), AbstractEpollChannel$AbstractEpollUnsafe:epollInReady(), Native:epollCtlDel(int-int)),
		EpollEventLoop:cleanup() to listOf(Native:close(int), InternalLogger:warn(String-Throwable), Native:close(int), InternalLogger:warn(String-Throwable), EpollEventArray:free(), EpollEventArray:free()),
		EpollEventLoop:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		AbstractEpollStreamChannel$EpollStreamUnsafe$3:run() to listOf(AbstractEpollStreamChannel$EpollStreamUnsafe:epollInReady()),
		AbstractEpollStreamChannel:<init>(Channel-int) to listOf(AbstractEpollChannel:<init>(Channel-int-int-boolean)),
		AbstractEpollStreamChannel:<init>(int) to listOf(AbstractEpollChannel:<init>(int-int)),
		AbstractEpollStreamChannel:<init>(FileDescriptor) to listOf(FileDescriptor:intValue(), Native:getSoError(int), AbstractEpollChannel:<init>(Channel-FileDescriptor-int-boolean)),
		AbstractEpollStreamChannel:newUnsafe() to listOf(AbstractEpollStreamChannel$EpollStreamUnsafe:<init>(AbstractEpollStreamChannel), AbstractEpollStreamChannel:newUnsafe()),
		AbstractEpollStreamChannel:writeBytes(ChannelOutboundBuffer-ByteBuf-int) to listOf(ByteBuf:readableBytes(), ChannelOutboundBuffer:remove(), ByteBuf:hasMemoryAddress(), ByteBuf:nioBufferCount(), AbstractEpollStreamChannel:doWriteBytes(ByteBuf-int), ChannelOutboundBuffer:removeBytes(long), ByteBuf:nioBuffers(), AbstractEpollStreamChannel:writeBytesMultiple(ChannelOutboundBuffer-ByteBuffer[]-int-long-int)),
		AbstractEpollStreamChannel:writeBytesMultiple(ChannelOutboundBuffer-IovArray-int) to listOf(IovArray:size(), IovArray:count(), AbstractEpollStreamChannel:fd(), FileDescriptor:intValue(), IovArray:memoryAddress(int), Native:writevAddresses(int-long-int), IovArray:processWritten(int-long), AbstractEpollStreamChannel:setFlag(int), ChannelOutboundBuffer:removeBytes(long)),
		AbstractEpollStreamChannel:writeBytesMultiple(ChannelOutboundBuffer-ByteBuffer[]-int-long-int) to listOf(AbstractEpollStreamChannel:fd(), FileDescriptor:intValue(), Native:writev(int-ByteBuffer[]-int-int), ChannelOutboundBuffer:removeBytes(long), AbstractEpollStreamChannel:setFlag(int)),
		AbstractEpollStreamChannel:writeFileRegion(ChannelOutboundBuffer-DefaultFileRegion-int) to listOf(DefaultFileRegion:count(), DefaultFileRegion:transfered(), ChannelOutboundBuffer:remove(), DefaultFileRegion:position(), DefaultFileRegion:transfered(), AbstractEpollStreamChannel:fd(), FileDescriptor:intValue(), Native:sendfile(int-DefaultFileRegion-long-long-long), DefaultFileRegion:transfered(), ChannelOutboundBuffer:progress(long), ChannelOutboundBuffer:remove(), AbstractEpollStreamChannel:setFlag(int)),
		AbstractEpollStreamChannel:doWrite(ChannelOutboundBuffer) to listOf(AbstractEpollStreamChannel:config(), EpollChannelConfig:getWriteSpinCount(), ChannelOutboundBuffer:size(), AbstractEpollStreamChannel:clearFlag(int), ChannelOutboundBuffer:current(), AbstractEpollStreamChannel:doWriteMultiple(ChannelOutboundBuffer-int), AbstractEpollStreamChannel:doWriteSingle(ChannelOutboundBuffer-int)),
		AbstractEpollStreamChannel:doWriteSingle(ChannelOutboundBuffer-int) to listOf(ChannelOutboundBuffer:current(), AbstractEpollStreamChannel:writeBytes(ChannelOutboundBuffer-ByteBuf-int), AbstractEpollStreamChannel:writeFileRegion(ChannelOutboundBuffer-DefaultFileRegion-int)),
		AbstractEpollStreamChannel:doWriteMultiple(ChannelOutboundBuffer-int) to listOf(PlatformDependent:hasUnsafe(), IovArrayThreadLocal:get(ChannelOutboundBuffer), IovArray:count(), AbstractEpollStreamChannel:writeBytesMultiple(ChannelOutboundBuffer-IovArray-int), ChannelOutboundBuffer:removeBytes(long), ChannelOutboundBuffer:nioBuffers(), ChannelOutboundBuffer:nioBufferCount(), ChannelOutboundBuffer:nioBufferSize(), AbstractEpollStreamChannel:writeBytesMultiple(ChannelOutboundBuffer-ByteBuffer[]-int-long-int), ChannelOutboundBuffer:removeBytes(long)),
		AbstractEpollStreamChannel:filterOutboundMessage(Object) to listOf(ByteBuf:hasMemoryAddress(), PlatformDependent:hasUnsafe(), ByteBuf:isDirect(), CompositeByteBuf:isDirect(), CompositeByteBuf:nioBufferCount(), AbstractEpollStreamChannel:newDirectBuffer(ByteBuf), ByteBuf:hasMemoryAddress(), AbstractEpollStreamChannel:newDirectBuffer(ByteBuf), ByteBuf:hasMemoryAddress(), StringUtil:simpleClassName(Object)),
		AbstractEpollStreamChannel:isOutputShutdown0() to listOf(AbstractEpollStreamChannel:isActive()),
		AbstractEpollStreamChannel:shutdownOutput0(ChannelPromise) to listOf(AbstractEpollStreamChannel:fd(), FileDescriptor:intValue(), Native:shutdown(int-boolean-boolean), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		AbstractEpollStreamChannel:doConnect(SocketAddress-SocketAddress) to listOf(AbstractEpollStreamChannel:fd(), FileDescriptor:intValue(), Native:bind(int-SocketAddress), AbstractEpollStreamChannel:fd(), FileDescriptor:intValue(), Native:connect(int-SocketAddress), AbstractEpollStreamChannel:setFlag(int), AbstractEpollStreamChannel:doClose(), AbstractEpollStreamChannel:doClose()),
		AbstractEpollStreamChannel:isOpen() to listOf(AbstractEpollChannel:isOpen()),
		AbstractEpollStreamChannel:metadata() to listOf(AbstractEpollChannel:metadata()),
		AbstractEpollStreamChannel:isActive() to listOf(AbstractEpollChannel:isActive()),
		AbstractEpollStreamChannel:<clinit>() to listOf(StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class)),
		Epoll:<clinit>() to listOf(Native:epollCreate(), Native:eventFd(), Native:close(int), Native:close(int), Native:close(int), Native:close(int), Native:close(int), Native:close(int)),
		EpollDomainSocketChannel$EpollDomainUnsafe:<init>(EpollDomainSocketChannel) to listOf(AbstractEpollStreamChannel$EpollStreamUnsafe:<init>(AbstractEpollStreamChannel)),
		EpollDomainSocketChannel$EpollDomainUnsafe:epollInReady() to listOf(EpollDomainSocketChannel:config(), EpollDomainSocketChannelConfig:getReadMode(), DomainSocketReadMode:ordinal(), AbstractEpollStreamChannel$EpollStreamUnsafe:epollInReady(), EpollDomainSocketChannel$EpollDomainUnsafe:epollInReadFd()),
		EpollDomainSocketChannel$EpollDomainUnsafe:epollInReadFd() to listOf(EpollDomainSocketChannel:isFlagSet(int), EpollDomainSocketChannel:config(), ChannelConfig:isAutoRead(), EpollDomainSocketChannel$EpollDomainUnsafe:clearEpollIn0(), EpollDomainSocketChannel:pipeline(), ChannelConfig:getMaxMessagesPerRead(), EpollDomainSocketChannel:fd(), FileDescriptor:intValue(), Native:recvFd(int), EpollDomainSocketChannel$EpollDomainUnsafe:voidPromise(), EpollDomainSocketChannel$EpollDomainUnsafe:close(ChannelPromise), ChannelConfig:isAutoRead(), EpollDomainSocketChannel$EpollDomainUnsafe:clearEpollIn0(), FileDescriptor:<init>(int), ChannelPipeline:fireChannelRead(Object), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelConfig:isAutoRead(), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelReadComplete(), ChannelConfig:isAutoRead(), EpollDomainSocketChannel$EpollDomainUnsafe:clearEpollIn0(), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), EpollDomainSocketChannel:eventLoop(), EpollDomainSocketChannel$EpollDomainUnsafe$1:<init>(EpollDomainSocketChannel$EpollDomainUnsafe), EventLoop:execute(Runnable), ChannelConfig:isAutoRead(), EpollDomainSocketChannel$EpollDomainUnsafe:clearEpollIn0(), ChannelConfig:isAutoRead(), EpollDomainSocketChannel$EpollDomainUnsafe:clearEpollIn0()),
		EpollDomainSocketChannel$EpollDomainUnsafe:<init>(EpollDomainSocketChannel-EpollDomainSocketChannel$1) to listOf(EpollDomainSocketChannel$EpollDomainUnsafe:<init>(EpollDomainSocketChannel)),
		NativeDatagramPacketArray$1:<init>() to listOf(FastThreadLocal:<init>()),
		NativeDatagramPacketArray$1:initialValue() to listOf(NativeDatagramPacketArray:<init>(NativeDatagramPacketArray$1), NativeDatagramPacketArray$1:initialValue()),
		NativeDatagramPacketArray$1:onRemoval(NativeDatagramPacketArray) to listOf(NativeDatagramPacketArray:access$100(NativeDatagramPacketArray), NativeDatagramPacketArray$NativeDatagramPacket:access$200(NativeDatagramPacketArray$NativeDatagramPacket)),
		NativeDatagramPacketArray$1:onRemoval(Object) to listOf(NativeDatagramPacketArray$1:onRemoval(NativeDatagramPacketArray)),
		EpollServerSocketChannelConfig:<init>(EpollServerSocketChannel) to listOf(EpollServerChannelConfig:<init>(AbstractEpollChannel), EpollServerSocketChannelConfig:setReuseAddress(boolean)),
		EpollServerSocketChannelConfig:getOptions() to listOf(EpollServerChannelConfig:getOptions(), EpollServerSocketChannelConfig:getOptions(Map-ChannelOption[])),
		EpollServerSocketChannelConfig:getOption(ChannelOption) to listOf(EpollServerSocketChannelConfig:isReusePort(), EpollServerChannelConfig:getOption(ChannelOption)),
		EpollServerSocketChannelConfig:setOption(ChannelOption-Object) to listOf(EpollServerSocketChannelConfig:validate(ChannelOption-Object), EpollServerSocketChannelConfig:setReusePort(boolean), EpollServerChannelConfig:setOption(ChannelOption-Object)),
		EpollServerSocketChannelConfig:setReuseAddress(boolean) to listOf(EpollServerChannelConfig:setReuseAddress(boolean), EpollServerSocketChannelConfig:setReuseAddress(boolean), EpollServerSocketChannelConfig:setReuseAddress(boolean)),
		EpollServerSocketChannelConfig:setReceiveBufferSize(int) to listOf(EpollServerChannelConfig:setReceiveBufferSize(int), EpollServerSocketChannelConfig:setReceiveBufferSize(int), EpollServerSocketChannelConfig:setReceiveBufferSize(int)),
		EpollServerSocketChannelConfig:setBacklog(int) to listOf(EpollServerChannelConfig:setBacklog(int), EpollServerSocketChannelConfig:setBacklog(int), EpollServerSocketChannelConfig:setBacklog(int)),
		EpollServerSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(EpollServerChannelConfig:setConnectTimeoutMillis(int), EpollServerSocketChannelConfig:setConnectTimeoutMillis(int), EpollServerSocketChannelConfig:setConnectTimeoutMillis(int), EpollServerSocketChannelConfig:setConnectTimeoutMillis(int), EpollServerSocketChannelConfig:setConnectTimeoutMillis(int)),
		EpollServerSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(EpollServerChannelConfig:setMaxMessagesPerRead(int), EpollServerSocketChannelConfig:setMaxMessagesPerRead(int), EpollServerSocketChannelConfig:setMaxMessagesPerRead(int), EpollServerSocketChannelConfig:setMaxMessagesPerRead(int), EpollServerSocketChannelConfig:setMaxMessagesPerRead(int)),
		EpollServerSocketChannelConfig:setWriteSpinCount(int) to listOf(EpollServerChannelConfig:setWriteSpinCount(int), EpollServerSocketChannelConfig:setWriteSpinCount(int), EpollServerSocketChannelConfig:setWriteSpinCount(int), EpollServerSocketChannelConfig:setWriteSpinCount(int), EpollServerSocketChannelConfig:setWriteSpinCount(int)),
		EpollServerSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(EpollServerChannelConfig:setAllocator(ByteBufAllocator), EpollServerSocketChannelConfig:setAllocator(ByteBufAllocator), EpollServerSocketChannelConfig:setAllocator(ByteBufAllocator), EpollServerSocketChannelConfig:setAllocator(ByteBufAllocator), EpollServerSocketChannelConfig:setAllocator(ByteBufAllocator)),
		EpollServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(EpollServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		EpollServerSocketChannelConfig:setAutoRead(boolean) to listOf(EpollServerChannelConfig:setAutoRead(boolean), EpollServerSocketChannelConfig:setAutoRead(boolean), EpollServerSocketChannelConfig:setAutoRead(boolean), EpollServerSocketChannelConfig:setAutoRead(boolean), EpollServerSocketChannelConfig:setAutoRead(boolean)),
		EpollServerSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(EpollServerChannelConfig:setWriteBufferHighWaterMark(int), EpollServerSocketChannelConfig:setWriteBufferHighWaterMark(int), EpollServerSocketChannelConfig:setWriteBufferHighWaterMark(int), EpollServerSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		EpollServerSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(EpollServerChannelConfig:setWriteBufferLowWaterMark(int), EpollServerSocketChannelConfig:setWriteBufferLowWaterMark(int), EpollServerSocketChannelConfig:setWriteBufferLowWaterMark(int), EpollServerSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		EpollServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(EpollServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		EpollServerSocketChannelConfig:isReusePort() to listOf(AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:isReusePort(int)),
		EpollServerSocketChannelConfig:setReusePort(boolean) to listOf(AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:setReusePort(int-int)),
		EpollServerSocketChannelConfig:setPerformancePreferences(int-int-int) to listOf(EpollServerSocketChannelConfig:setPerformancePreferences(int-int-int)),
		EpollDatagramChannel$EpollDatagramChannelUnsafe:<init>(EpollDatagramChannel) to listOf(AbstractEpollChannel$AbstractEpollUnsafe:<init>(AbstractEpollChannel)),
		EpollDatagramChannel$EpollDatagramChannelUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(EpollDatagramChannel:isActive(), EpollDatagramChannel:doBind(SocketAddress), AbstractEpollChannel:checkResolvable(InetSocketAddress), EpollDatagramChannel:access$002(EpollDatagramChannel-InetSocketAddress), EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:localAddress(int), EpollDatagramChannel:access$102(EpollDatagramChannel-InetSocketAddress), EpollDatagramChannel:isActive(), EpollDatagramChannel:pipeline(), ChannelPipeline:fireChannelActive(), EpollDatagramChannel:doClose(), ChannelPromise:setSuccess(), EpollDatagramChannel:access$202(EpollDatagramChannel-boolean), EpollDatagramChannel:doClose(), ChannelPromise:setSuccess(), EpollDatagramChannel:access$202(EpollDatagramChannel-boolean), ChannelPromise:setFailure(Throwable)),
		EpollDatagramChannel$EpollDatagramChannelUnsafe:epollInReady() to listOf(EpollDatagramChannel:eventLoop(), EventLoop:inEventLoop(), EpollDatagramChannel:config(), EpollDatagramChannel:isFlagSet(int), DatagramChannelConfig:isAutoRead(), EpollDatagramChannel$EpollDatagramChannelUnsafe:clearEpollIn0(), EpollDatagramChannel:unsafe(), Channel$Unsafe:recvBufAllocHandle(), EpollDatagramChannel:pipeline(), DatagramChannelConfig:getMaxMessagesPerRead(), DatagramChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writerIndex(), ByteBuf:hasMemoryAddress(), EpollDatagramChannel:fd(), FileDescriptor:intValue(), ByteBuf:memoryAddress(), ByteBuf:capacity(), Native:recvFromAddress(int-long-int-int), ByteBuf:writableBytes(), ByteBuf:internalNioBuffer(int-int), EpollDatagramChannel:fd(), FileDescriptor:intValue(), Native:recvFrom(int-ByteBuffer-int-int), ByteBuf:release(), DatagramChannelConfig:isAutoRead(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), RecvByteBufAllocator$Handle:record(int), EpollDatagramChannel$EpollDatagramChannelUnsafe:localAddress(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), ByteBuf:release(), DatagramChannelConfig:isAutoRead(), ByteBuf:release(), DatagramChannelConfig:isAutoRead(), ByteBuf:release(), DatagramChannelConfig:isAutoRead(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), DatagramChannelConfig:isAutoRead(), EpollDatagramChannel:clearEpollIn(), DatagramChannelConfig:isAutoRead(), EpollDatagramChannel:clearEpollIn()),
		IovArray:<init>() to listOf(PlatformDependent:allocateMemory(long)),
		IovArray:add(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:memoryAddress(), ByteBuf:readerIndex(), IovArray:add(long-int-int)),
		IovArray:add(long-int-int) to listOf(IovArray:memoryAddress(int), PlatformDependent:putLong(long-long), PlatformDependent:putLong(long-long), PlatformDependent:putInt(long-int), PlatformDependent:putInt(long-int)),
		IovArray:add(CompositeByteBuf) to listOf(CompositeByteBuf:nioBuffers(), PlatformDependent:directBufferAddress(ByteBuffer), IovArray:add(long-int-int)),
		IovArray:processWritten(int-long) to listOf(IovArray:memoryAddress(int), PlatformDependent:getLong(long), PlatformDependent:getLong(long), PlatformDependent:putLong(long-long), PlatformDependent:putLong(long-long), PlatformDependent:getInt(long), PlatformDependent:getInt(long), PlatformDependent:putInt(long-int), PlatformDependent:putInt(long-int)),
		IovArray:release() to listOf(PlatformDependent:freeMemory(long)),
		IovArray:processMessage(Object) to listOf(IovArray:add(CompositeByteBuf), IovArray:add(ByteBuf)),
		IovArray:<clinit>() to listOf(PlatformDependent:addressSize()),
		EpollEventLoopGroup:<init>() to listOf(EpollEventLoopGroup:<init>(int)),
		EpollEventLoopGroup:<init>(int) to listOf(EpollEventLoopGroup:<init>(int-Executor)),
		EpollEventLoopGroup:<init>(int-Executor) to listOf(EpollEventLoopGroup:<init>(int-Executor-int)),
		EpollEventLoopGroup:<init>(int-ExecutorServiceFactory) to listOf(EpollEventLoopGroup:<init>(int-ExecutorServiceFactory-int)),
		EpollEventLoopGroup:<init>(int-Executor-int) to listOf(MultithreadEventLoopGroup:<init>(int-Executor-Object[])),
		EpollEventLoopGroup:<init>(int-ExecutorServiceFactory-int) to listOf(MultithreadEventLoopGroup:<init>(int-ExecutorServiceFactory-Object[])),
		EpollEventLoopGroup:setIoRatio(int) to listOf(EpollEventLoopGroup:children(), EpollEventLoop:setIoRatio(int)),
		EpollEventLoopGroup:newChild(Executor-Object[]) to listOf(EpollEventLoop:<init>(EventLoopGroup-Executor-int), EpollEventLoopGroup:newChild(Executor-Object[])),
		AbstractEpollServerChannel:<init>(int) to listOf(AbstractEpollChannel:<init>(int-int)),
		AbstractEpollServerChannel:<init>(FileDescriptor) to listOf(FileDescriptor:intValue(), Native:getSoError(int), AbstractEpollChannel:<init>(Channel-FileDescriptor-int-boolean)),
		AbstractEpollServerChannel:newUnsafe() to listOf(AbstractEpollServerChannel$EpollServerSocketUnsafe:<init>(AbstractEpollServerChannel), AbstractEpollServerChannel:newUnsafe()),
		AbstractEpollServerChannel:isOpen() to listOf(AbstractEpollChannel:isOpen()),
		AbstractEpollServerChannel:metadata() to listOf(AbstractEpollChannel:metadata()),
		AbstractEpollServerChannel:isActive() to listOf(AbstractEpollChannel:isActive()),
		AbstractEpollServerChannel:remoteAddress0() to listOf(AbstractEpollServerChannel:remoteAddress0()),
		EpollChannelConfig:<init>(AbstractEpollChannel) to listOf(DefaultChannelConfig:<init>(Channel)),
		EpollChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), EpollChannelConfig:getOptions(Map-ChannelOption[])),
		EpollChannelConfig:getOption(ChannelOption) to listOf(EpollChannelConfig:getEpollMode(), DefaultChannelConfig:getOption(ChannelOption)),
		EpollChannelConfig:setOption(ChannelOption-Object) to listOf(EpollChannelConfig:validate(ChannelOption-Object), EpollChannelConfig:setEpollMode(EpollMode), DefaultChannelConfig:setOption(ChannelOption-Object)),
		EpollChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), EpollChannelConfig:setConnectTimeoutMillis(int)),
		EpollChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), EpollChannelConfig:setMaxMessagesPerRead(int)),
		EpollChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), EpollChannelConfig:setWriteSpinCount(int)),
		EpollChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), EpollChannelConfig:setAllocator(ByteBufAllocator)),
		EpollChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		EpollChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), EpollChannelConfig:setAutoRead(boolean)),
		EpollChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), EpollChannelConfig:setWriteBufferHighWaterMark(int)),
		EpollChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), EpollChannelConfig:setWriteBufferLowWaterMark(int)),
		EpollChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		EpollChannelConfig:getEpollMode() to listOf(AbstractEpollChannel:isFlagSet(int)),
		EpollChannelConfig:setEpollMode(EpollMode) to listOf(EpollMode:ordinal(), EpollChannelConfig:checkChannelNotRegistered(), AbstractEpollChannel:setFlag(int), EpollChannelConfig:checkChannelNotRegistered(), AbstractEpollChannel:clearFlag(int)),
		EpollChannelConfig:checkChannelNotRegistered() to listOf(AbstractEpollChannel:isRegistered()),
		EpollChannelConfig:autoReadCleared() to listOf(AbstractEpollChannel:clearEpollIn()),
		AbstractEpollStreamChannel$EpollStreamUnsafe$1:run() to listOf(AbstractEpollStreamChannel$EpollStreamUnsafe:access$100(AbstractEpollStreamChannel$EpollStreamUnsafe), ConnectTimeoutException:<init>(String), ChannelPromise:tryFailure(Throwable), AbstractEpollStreamChannel$EpollStreamUnsafe:voidPromise(), AbstractEpollStreamChannel$EpollStreamUnsafe:close(ChannelPromise)),
		EpollDomainSocketChannel:<init>() to listOf(Native:socketDomainFd(), AbstractEpollStreamChannel:<init>(int), EpollDomainSocketChannelConfig:<init>(AbstractEpollChannel)),
		EpollDomainSocketChannel:<init>(Channel-FileDescriptor) to listOf(FileDescriptor:intValue(), AbstractEpollStreamChannel:<init>(Channel-int), EpollDomainSocketChannelConfig:<init>(AbstractEpollChannel)),
		EpollDomainSocketChannel:<init>(FileDescriptor) to listOf(AbstractEpollStreamChannel:<init>(FileDescriptor), EpollDomainSocketChannelConfig:<init>(AbstractEpollChannel)),
		EpollDomainSocketChannel:<init>(Channel-int) to listOf(AbstractEpollStreamChannel:<init>(Channel-int), EpollDomainSocketChannelConfig:<init>(AbstractEpollChannel)),
		EpollDomainSocketChannel:newUnsafe() to listOf(EpollDomainSocketChannel$EpollDomainUnsafe:<init>(EpollDomainSocketChannel-EpollDomainSocketChannel$1), EpollDomainSocketChannel:newUnsafe()),
		EpollDomainSocketChannel:doBind(SocketAddress) to listOf(EpollDomainSocketChannel:fd(), FileDescriptor:intValue(), Native:bind(int-SocketAddress)),
		EpollDomainSocketChannel:doConnect(SocketAddress-SocketAddress) to listOf(AbstractEpollStreamChannel:doConnect(SocketAddress-SocketAddress)),
		EpollDomainSocketChannel:remoteAddress() to listOf(AbstractEpollStreamChannel:remoteAddress(), EpollDomainSocketChannel:remoteAddress()),
		EpollDomainSocketChannel:localAddress() to listOf(AbstractEpollStreamChannel:localAddress(), EpollDomainSocketChannel:localAddress()),
		EpollDomainSocketChannel:doWriteSingle(ChannelOutboundBuffer-int) to listOf(ChannelOutboundBuffer:current(), EpollDomainSocketChannel:fd(), FileDescriptor:intValue(), FileDescriptor:intValue(), Native:sendFd(int-int), ChannelOutboundBuffer:remove(), AbstractEpollStreamChannel:doWriteSingle(ChannelOutboundBuffer-int)),
		EpollDomainSocketChannel:filterOutboundMessage(Object) to listOf(AbstractEpollStreamChannel:filterOutboundMessage(Object)),
		EpollDomainSocketChannel:config() to listOf(EpollDomainSocketChannel:config(), EpollDomainSocketChannel:config(), EpollDomainSocketChannel:config()),
		EpollDomainSocketChannel:remoteAddress0() to listOf(EpollDomainSocketChannel:remoteAddress0()),
		EpollDomainSocketChannel:localAddress0() to listOf(EpollDomainSocketChannel:localAddress0()),
		EpollDomainSocketChannel$1:<clinit>() to listOf(DomainSocketReadMode:values(), DomainSocketReadMode:ordinal(), DomainSocketReadMode:ordinal()),
		AbstractEpollChannel$AbstractEpollUnsafe:<init>(AbstractEpollChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		AbstractEpollChannel$AbstractEpollUnsafe:flush0() to listOf(AbstractEpollChannel:isFlagSet(int), AbstractChannel$AbstractUnsafe:flush0()),
		AbstractEpollChannel$AbstractEpollUnsafe:epollOutReady() to listOf(AbstractChannel$AbstractUnsafe:flush0()),
		AbstractEpollChannel$AbstractEpollUnsafe:clearEpollIn0() to listOf(AbstractEpollChannel:access$000(AbstractEpollChannel), AbstractEpollChannel:clearFlag(int)),
		EpollSocketChannelConfig:<init>(EpollSocketChannel) to listOf(EpollChannelConfig:<init>(AbstractEpollChannel), PlatformDependent:canEnableTcpNoDelayByDefault(), EpollSocketChannelConfig:setTcpNoDelay(boolean)),
		EpollSocketChannelConfig:getOptions() to listOf(EpollChannelConfig:getOptions(), EpollSocketChannelConfig:getOptions(Map-ChannelOption[])),
		EpollSocketChannelConfig:getOption(ChannelOption) to listOf(EpollSocketChannelConfig:getReceiveBufferSize(), EpollSocketChannelConfig:getSendBufferSize(), EpollSocketChannelConfig:isTcpNoDelay(), EpollSocketChannelConfig:isKeepAlive(), EpollSocketChannelConfig:isReuseAddress(), EpollSocketChannelConfig:getSoLinger(), EpollSocketChannelConfig:getTrafficClass(), EpollSocketChannelConfig:isAllowHalfClosure(), EpollSocketChannelConfig:isTcpCork(), EpollSocketChannelConfig:getTcpKeepIdle(), EpollSocketChannelConfig:getTcpKeepIntvl(), EpollSocketChannelConfig:getTcpKeepCnt(), EpollChannelConfig:getOption(ChannelOption)),
		EpollSocketChannelConfig:setOption(ChannelOption-Object) to listOf(EpollSocketChannelConfig:validate(ChannelOption-Object), EpollSocketChannelConfig:setReceiveBufferSize(int), EpollSocketChannelConfig:setSendBufferSize(int), EpollSocketChannelConfig:setTcpNoDelay(boolean), EpollSocketChannelConfig:setKeepAlive(boolean), EpollSocketChannelConfig:setReuseAddress(boolean), EpollSocketChannelConfig:setSoLinger(int), EpollSocketChannelConfig:setTrafficClass(int), EpollSocketChannelConfig:setAllowHalfClosure(boolean), EpollSocketChannelConfig:setTcpCork(boolean), EpollSocketChannelConfig:setTcpKeepIdle(int), EpollSocketChannelConfig:setTcpKeepCntl(int), EpollSocketChannelConfig:setTcpKeepIntvl(int), EpollChannelConfig:setOption(ChannelOption-Object)),
		EpollSocketChannelConfig:getReceiveBufferSize() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:getReceiveBufferSize(int)),
		EpollSocketChannelConfig:getSendBufferSize() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:getSendBufferSize(int)),
		EpollSocketChannelConfig:getSoLinger() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:getSoLinger(int)),
		EpollSocketChannelConfig:getTrafficClass() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:getTrafficClass(int)),
		EpollSocketChannelConfig:isKeepAlive() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:isKeepAlive(int)),
		EpollSocketChannelConfig:isReuseAddress() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:isReuseAddress(int)),
		EpollSocketChannelConfig:isTcpNoDelay() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:isTcpNoDelay(int)),
		EpollSocketChannelConfig:isTcpCork() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:isTcpCork(int)),
		EpollSocketChannelConfig:getTcpKeepIdle() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:getTcpKeepIdle(int)),
		EpollSocketChannelConfig:getTcpKeepIntvl() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:getTcpKeepIntvl(int)),
		EpollSocketChannelConfig:getTcpKeepCnt() to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:getTcpKeepCnt(int)),
		EpollSocketChannelConfig:setKeepAlive(boolean) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setKeepAlive(int-int), EpollSocketChannelConfig:setKeepAlive(boolean)),
		EpollSocketChannelConfig:setReceiveBufferSize(int) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setReceiveBufferSize(int-int), EpollSocketChannelConfig:setReceiveBufferSize(int)),
		EpollSocketChannelConfig:setReuseAddress(boolean) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setReuseAddress(int-int), EpollSocketChannelConfig:setReuseAddress(boolean)),
		EpollSocketChannelConfig:setSendBufferSize(int) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setSendBufferSize(int-int), EpollSocketChannelConfig:setSendBufferSize(int)),
		EpollSocketChannelConfig:setSoLinger(int) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setSoLinger(int-int), EpollSocketChannelConfig:setSoLinger(int)),
		EpollSocketChannelConfig:setTcpNoDelay(boolean) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setTcpNoDelay(int-int), EpollSocketChannelConfig:setTcpNoDelay(boolean)),
		EpollSocketChannelConfig:setTcpCork(boolean) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setTcpCork(int-int)),
		EpollSocketChannelConfig:setTrafficClass(int) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setTrafficClass(int-int), EpollSocketChannelConfig:setTrafficClass(int)),
		EpollSocketChannelConfig:setTcpKeepIdle(int) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setTcpKeepIdle(int-int)),
		EpollSocketChannelConfig:setTcpKeepIntvl(int) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setTcpKeepIntvl(int-int)),
		EpollSocketChannelConfig:setTcpKeepCntl(int) to listOf(EpollSocketChannel:fd(), FileDescriptor:intValue(), Native:setTcpKeepCnt(int-int)),
		EpollSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(EpollChannelConfig:setConnectTimeoutMillis(int), EpollSocketChannelConfig:setConnectTimeoutMillis(int), EpollSocketChannelConfig:setConnectTimeoutMillis(int), EpollSocketChannelConfig:setConnectTimeoutMillis(int)),
		EpollSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(EpollChannelConfig:setMaxMessagesPerRead(int), EpollSocketChannelConfig:setMaxMessagesPerRead(int), EpollSocketChannelConfig:setMaxMessagesPerRead(int), EpollSocketChannelConfig:setMaxMessagesPerRead(int)),
		EpollSocketChannelConfig:setWriteSpinCount(int) to listOf(EpollChannelConfig:setWriteSpinCount(int), EpollSocketChannelConfig:setWriteSpinCount(int), EpollSocketChannelConfig:setWriteSpinCount(int), EpollSocketChannelConfig:setWriteSpinCount(int)),
		EpollSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(EpollChannelConfig:setAllocator(ByteBufAllocator), EpollSocketChannelConfig:setAllocator(ByteBufAllocator), EpollSocketChannelConfig:setAllocator(ByteBufAllocator), EpollSocketChannelConfig:setAllocator(ByteBufAllocator)),
		EpollSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(EpollChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		EpollSocketChannelConfig:setAutoRead(boolean) to listOf(EpollChannelConfig:setAutoRead(boolean), EpollSocketChannelConfig:setAutoRead(boolean), EpollSocketChannelConfig:setAutoRead(boolean), EpollSocketChannelConfig:setAutoRead(boolean)),
		EpollSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferHighWaterMark(int), EpollSocketChannelConfig:setWriteBufferHighWaterMark(int), EpollSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		EpollSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferLowWaterMark(int), EpollSocketChannelConfig:setWriteBufferLowWaterMark(int), EpollSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		EpollSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(EpollChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		EpollSocketChannelConfig:setEpollMode(EpollMode) to listOf(EpollChannelConfig:setEpollMode(EpollMode), EpollSocketChannelConfig:setEpollMode(EpollMode)),
		EpollSocketChannelConfig:setAllowHalfClosure(boolean) to listOf(EpollSocketChannelConfig:setAllowHalfClosure(boolean)),
		EpollSocketChannelConfig:setPerformancePreferences(int-int-int) to listOf(EpollSocketChannelConfig:setPerformancePreferences(int-int-int)),
		EpollServerChannelConfig:<init>(AbstractEpollChannel) to listOf(EpollChannelConfig:<init>(AbstractEpollChannel)),
		EpollServerChannelConfig:getOptions() to listOf(EpollChannelConfig:getOptions(), EpollServerChannelConfig:getOptions(Map-ChannelOption[])),
		EpollServerChannelConfig:getOption(ChannelOption) to listOf(EpollServerChannelConfig:getReceiveBufferSize(), EpollServerChannelConfig:isReuseAddress(), EpollServerChannelConfig:getBacklog(), EpollChannelConfig:getOption(ChannelOption)),
		EpollServerChannelConfig:setOption(ChannelOption-Object) to listOf(EpollServerChannelConfig:validate(ChannelOption-Object), EpollServerChannelConfig:setReceiveBufferSize(int), EpollServerChannelConfig:setReuseAddress(boolean), EpollServerChannelConfig:setBacklog(int), EpollChannelConfig:setOption(ChannelOption-Object)),
		EpollServerChannelConfig:isReuseAddress() to listOf(AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:isReuseAddress(int)),
		EpollServerChannelConfig:setReuseAddress(boolean) to listOf(AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:setReuseAddress(int-int)),
		EpollServerChannelConfig:getReceiveBufferSize() to listOf(AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:getReceiveBufferSize(int)),
		EpollServerChannelConfig:setReceiveBufferSize(int) to listOf(AbstractEpollChannel:fd(), FileDescriptor:intValue(), Native:setReceiveBufferSize(int-int)),
		EpollServerChannelConfig:setConnectTimeoutMillis(int) to listOf(EpollChannelConfig:setConnectTimeoutMillis(int), EpollServerChannelConfig:setConnectTimeoutMillis(int), EpollServerChannelConfig:setConnectTimeoutMillis(int)),
		EpollServerChannelConfig:setMaxMessagesPerRead(int) to listOf(EpollChannelConfig:setMaxMessagesPerRead(int), EpollServerChannelConfig:setMaxMessagesPerRead(int), EpollServerChannelConfig:setMaxMessagesPerRead(int)),
		EpollServerChannelConfig:setWriteSpinCount(int) to listOf(EpollChannelConfig:setWriteSpinCount(int), EpollServerChannelConfig:setWriteSpinCount(int), EpollServerChannelConfig:setWriteSpinCount(int)),
		EpollServerChannelConfig:setAllocator(ByteBufAllocator) to listOf(EpollChannelConfig:setAllocator(ByteBufAllocator), EpollServerChannelConfig:setAllocator(ByteBufAllocator), EpollServerChannelConfig:setAllocator(ByteBufAllocator)),
		EpollServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(EpollChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), EpollServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		EpollServerChannelConfig:setAutoRead(boolean) to listOf(EpollChannelConfig:setAutoRead(boolean), EpollServerChannelConfig:setAutoRead(boolean), EpollServerChannelConfig:setAutoRead(boolean)),
		EpollServerChannelConfig:setWriteBufferHighWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferHighWaterMark(int), EpollServerChannelConfig:setWriteBufferHighWaterMark(int), EpollServerChannelConfig:setWriteBufferHighWaterMark(int)),
		EpollServerChannelConfig:setWriteBufferLowWaterMark(int) to listOf(EpollChannelConfig:setWriteBufferLowWaterMark(int), EpollServerChannelConfig:setWriteBufferLowWaterMark(int), EpollServerChannelConfig:setWriteBufferLowWaterMark(int)),
		EpollServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(EpollChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), EpollServerChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		EpollServerChannelConfig:setEpollMode(EpollMode) to listOf(EpollChannelConfig:setEpollMode(EpollMode), EpollServerChannelConfig:setEpollMode(EpollMode)),
		EpollMode:values() to listOf(EpollMode[]:clone()),
		EpollMode:<clinit>() to listOf(EpollMode:<init>(String-int), EpollMode:<init>(String-int)),
		EpollSocketChannel$2:<init>(EpollSocketChannel-ChannelPromise) to listOf(OneTimeTask:<init>()),
		EpollSocketChannel$2:run() to listOf(EpollSocketChannel:shutdownOutput0(ChannelPromise)),
		PendingWriteQueue$PendingWrite$1:<init>() to listOf(Recycler:<init>()),
		PendingWriteQueue$PendingWrite$1:newObject(Recycler$Handle) to listOf(PendingWriteQueue$PendingWrite:<init>(Recycler$Handle-PendingWriteQueue$1), PendingWriteQueue$PendingWrite$1:newObject(Recycler$Handle)),
		AbstractChannel$AbstractUnsafe$6$1:<init>(AbstractChannel$AbstractUnsafe$6-Throwable) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$6$1:run() to listOf(AbstractChannel$AbstractUnsafe:access$600(AbstractChannel$AbstractUnsafe-ChannelOutboundBuffer-boolean-ChannelPromise-Throwable)),
		DefaultChannelHandlerInvoker$WriteTask:newInstance(ChannelHandlerContext-Object-int-ChannelPromise) to listOf(Recycler:get()),
		DefaultChannelHandlerInvoker$WriteTask:<init>(Recycler$Handle) to listOf(RecyclableMpscLinkedQueueNode:<init>(Recycler$Handle)),
		DefaultChannelHandlerInvoker$WriteTask:run() to listOf(ChannelHandlerContext:channel(), Channel:unsafe(), Channel$Unsafe:outboundBuffer(), ChannelOutboundBuffer:decrementPendingOutboundBytes(long), ChannelHandlerInvokerUtil:invokeWriteNow(ChannelHandlerContext-Object-ChannelPromise)),
		DefaultChannelHandlerInvoker$WriteTask:value() to listOf(DefaultChannelHandlerInvoker$WriteTask:value()),
		DefaultChannelHandlerInvoker$WriteTask:access$000(ChannelHandlerContext-Object-int-ChannelPromise) to listOf(DefaultChannelHandlerInvoker$WriteTask:newInstance(ChannelHandlerContext-Object-int-ChannelPromise)),
		DefaultChannelHandlerInvoker$WriteTask:<init>(Recycler$Handle-DefaultChannelHandlerInvoker$1) to listOf(DefaultChannelHandlerInvoker$WriteTask:<init>(Recycler$Handle)),
		DefaultChannelHandlerInvoker$WriteTask:<clinit>() to listOf(DefaultChannelHandlerInvoker$WriteTask$1:<init>()),
		RxtxChannel$RxtxUnsafe$1:run() to listOf(RxtxChannel:doInit(), RxtxChannel$RxtxUnsafe:access$100(RxtxChannel$RxtxUnsafe-ChannelPromise), RxtxChannel:isActive(), RxtxChannel:pipeline(), ChannelPipeline:fireChannelActive(), RxtxChannel$RxtxUnsafe:access$200(RxtxChannel$RxtxUnsafe-ChannelPromise-Throwable), RxtxChannel$RxtxUnsafe:access$300(RxtxChannel$RxtxUnsafe)),
		DefaultRxtxChannelConfig:<init>(RxtxChannel) to listOf(DefaultChannelConfig:<init>(Channel)),
		DefaultRxtxChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultRxtxChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultRxtxChannelConfig:getOption(ChannelOption) to listOf(DefaultRxtxChannelConfig:getBaudrate(), DefaultRxtxChannelConfig:isDtr(), DefaultRxtxChannelConfig:isRts(), DefaultRxtxChannelConfig:getStopbits(), DefaultRxtxChannelConfig:getDatabits(), DefaultRxtxChannelConfig:getParitybit(), DefaultRxtxChannelConfig:getWaitTimeMillis(), DefaultRxtxChannelConfig:getReadTimeout(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultRxtxChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultRxtxChannelConfig:validate(ChannelOption-Object), DefaultRxtxChannelConfig:setBaudrate(int), DefaultRxtxChannelConfig:setDtr(boolean), DefaultRxtxChannelConfig:setRts(boolean), DefaultRxtxChannelConfig:setStopbits(RxtxChannelConfig$Stopbits), DefaultRxtxChannelConfig:setDatabits(RxtxChannelConfig$Databits), DefaultRxtxChannelConfig:setParitybit(RxtxChannelConfig$Paritybit), DefaultRxtxChannelConfig:setWaitTimeMillis(int), DefaultRxtxChannelConfig:setReadTimeout(int), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultRxtxChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultRxtxChannelConfig:setConnectTimeoutMillis(int)),
		DefaultRxtxChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultRxtxChannelConfig:setMaxMessagesPerRead(int)),
		DefaultRxtxChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultRxtxChannelConfig:setWriteSpinCount(int)),
		DefaultRxtxChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultRxtxChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultRxtxChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultRxtxChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultRxtxChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultRxtxChannelConfig:setAutoRead(boolean)),
		DefaultRxtxChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultRxtxChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultRxtxChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultRxtxChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultRxtxChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultRxtxChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		RxtxChannelConfig$Paritybit:values() to listOf(RxtxChannelConfig$Paritybit[]:clone()),
		RxtxChannelConfig$Paritybit:valueOf(int) to listOf(RxtxChannelConfig$Paritybit:values()),
		RxtxChannelConfig$Paritybit:<clinit>() to listOf(RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int)),
		RxtxChannelOption:<clinit>() to listOf(ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String), ChannelOption:valueOf(Class-String)),
		RxtxChannel$RxtxUnsafe:<init>(RxtxChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		RxtxChannel$RxtxUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setUncancellable(), RxtxChannel$RxtxUnsafe:ensureOpen(ChannelPromise), RxtxChannel:isActive(), RxtxChannel:doConnect(SocketAddress-SocketAddress), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannel:eventLoop(), RxtxChannel$RxtxUnsafe$1:<init>(RxtxChannel$RxtxUnsafe-ChannelPromise-boolean), EventLoop:schedule(Runnable-long-TimeUnit), RxtxChannel:doInit(), RxtxChannel$RxtxUnsafe:safeSetSuccess(ChannelPromise), RxtxChannel:isActive(), RxtxChannel:pipeline(), ChannelPipeline:fireChannelActive(), RxtxChannel$RxtxUnsafe:safeSetFailure(ChannelPromise-Throwable), RxtxChannel$RxtxUnsafe:closeIfClosed()),
		RxtxChannel$RxtxUnsafe:<init>(RxtxChannel-RxtxChannel$1) to listOf(RxtxChannel$RxtxUnsafe:<init>(RxtxChannel)),
		RxtxChannel$RxtxUnsafe:access$100(RxtxChannel$RxtxUnsafe-ChannelPromise) to listOf(RxtxChannel$RxtxUnsafe:safeSetSuccess(ChannelPromise)),
		RxtxChannel$RxtxUnsafe:access$200(RxtxChannel$RxtxUnsafe-ChannelPromise-Throwable) to listOf(RxtxChannel$RxtxUnsafe:safeSetFailure(ChannelPromise-Throwable)),
		RxtxChannel$RxtxUnsafe:access$300(RxtxChannel$RxtxUnsafe) to listOf(RxtxChannel$RxtxUnsafe:closeIfClosed()),
		RxtxChannelConfig$Stopbits:values() to listOf(RxtxChannelConfig$Stopbits[]:clone()),
		RxtxChannelConfig$Stopbits:valueOf(int) to listOf(RxtxChannelConfig$Stopbits:values()),
		RxtxChannelConfig$Stopbits:<clinit>() to listOf(RxtxChannelConfig$Stopbits:<init>(String-int-int), RxtxChannelConfig$Stopbits:<init>(String-int-int), RxtxChannelConfig$Stopbits:<init>(String-int-int)),
		RxtxChannel:<init>() to listOf(OioByteStreamChannel:<init>(Channel), DefaultRxtxChannelConfig:<init>(RxtxChannel)),
		RxtxChannel:newUnsafe() to listOf(RxtxChannel$RxtxUnsafe:<init>(RxtxChannel-RxtxChannel$1)),
		RxtxChannel:doConnect(SocketAddress-SocketAddress) to listOf(RxtxDeviceAddress:value(), CommPortIdentifier:getPortIdentifier(String), CommPortIdentifier:open(String-int), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), CommPort:enableReceiveTimeout(int)),
		RxtxChannel:doInit() to listOf(RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannelConfig$Databits:value(), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannelConfig$Stopbits:value(), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannelConfig$Paritybit:value(), SerialPort:setSerialPortParams(int-int-int-int), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), SerialPort:setDTR(boolean), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), SerialPort:setRTS(boolean), SerialPort:getInputStream(), SerialPort:getOutputStream(), RxtxChannel:activate(InputStream-OutputStream)),
		RxtxChannel:localAddress() to listOf(OioByteStreamChannel:localAddress(), RxtxChannel:localAddress()),
		RxtxChannel:remoteAddress() to listOf(OioByteStreamChannel:remoteAddress(), RxtxChannel:remoteAddress()),
		RxtxChannel:doDisconnect() to listOf(RxtxChannel:doClose()),
		RxtxChannel:doClose() to listOf(OioByteStreamChannel:doClose(), SerialPort:removeEventListener(), SerialPort:close(), SerialPort:removeEventListener(), SerialPort:close()),
		RxtxChannel:remoteAddress0() to listOf(RxtxChannel:remoteAddress0()),
		RxtxChannel:localAddress0() to listOf(RxtxChannel:localAddress0()),
		RxtxChannel:config() to listOf(RxtxChannel:config()),
		RxtxChannel:<clinit>() to listOf(RxtxDeviceAddress:<init>(String)),
		RxtxChannelConfig$Databits:values() to listOf(RxtxChannelConfig$Databits[]:clone()),
		RxtxChannelConfig$Databits:valueOf(int) to listOf(RxtxChannelConfig$Databits:values()),
		RxtxChannelConfig$Databits:<clinit>() to listOf(RxtxChannelConfig$Databits:<init>(String-int-int), RxtxChannelConfig$Databits:<init>(String-int-int), RxtxChannelConfig$Databits:<init>(String-int-int), RxtxChannelConfig$Databits:<init>(String-int-int)),
		DefaultChannelHandlerInvoker$WriteTask$1:<init>() to listOf(Recycler:<init>()),
		DefaultChannelHandlerInvoker$WriteTask$1:newObject(Recycler$Handle) to listOf(DefaultChannelHandlerInvoker$WriteTask:<init>(Recycler$Handle-DefaultChannelHandlerInvoker$1), DefaultChannelHandlerInvoker$WriteTask$1:newObject(Recycler$Handle)),
		ThreadLocalPooledDirectByteBuf:newInstance() to listOf(PlatformDependent:hasUnsafe(), ThreadLocalPooledDirectByteBuf$ThreadLocalUnsafeDirectByteBuf:newInstance(), ThreadLocalPooledDirectByteBuf$ThreadLocalDirectByteBuf:newInstance()),
		ThreadLocalPooledDirectByteBuf:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getInt(String-int), InternalLogger:debug(String-Object)),
		ChannelOption$1:<init>() to listOf(ConstantPool:<init>()),
		ChannelOption$1:newConstant(int-String) to listOf(ChannelOption:<init>(int-String-ChannelOption$1), ChannelOption$1:newConstant(int-String)),
		DefaultMessageSizeEstimator:<init>(int) to listOf(DefaultMessageSizeEstimator$HandleImpl:<init>(int-DefaultMessageSizeEstimator$1)),
		DefaultMessageSizeEstimator:<clinit>() to listOf(DefaultMessageSizeEstimator:<init>(int)),
		DefaultChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultChannelConfig:getOptions(Map-ChannelOption[]) to listOf(DefaultChannelConfig:getOption(ChannelOption)),
		DefaultChannelConfig:setOptions(Map) to listOf(DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultChannelConfig:getOption(ChannelOption) to listOf(DefaultChannelConfig:getConnectTimeoutMillis(), DefaultChannelConfig:getMaxMessagesPerRead(), DefaultChannelConfig:getWriteSpinCount(), DefaultChannelConfig:getAllocator(), DefaultChannelConfig:getRecvByteBufAllocator(), DefaultChannelConfig:isAutoRead(), DefaultChannelConfig:getWriteBufferHighWaterMark(), DefaultChannelConfig:getWriteBufferLowWaterMark(), DefaultChannelConfig:getMessageSizeEstimator()),
		DefaultChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultChannelConfig:validate(ChannelOption-Object), DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultChannelConfig:setWriteSpinCount(int), DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultChannelConfig:setAutoRead(boolean), DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		DefaultChannelConfig:validate(ChannelOption-Object) to listOf(ChannelOption:validate(Object)),
		DefaultChannelConfig:setAutoRead(boolean) to listOf(Channel:read(), DefaultChannelConfig:autoReadCleared()),
		DefaultChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:getWriteBufferLowWaterMark(), DefaultChannelConfig:getWriteBufferLowWaterMark()),
		DefaultChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:getWriteBufferHighWaterMark(), DefaultChannelConfig:getWriteBufferHighWaterMark()),
		DefaultChannelConfig:<clinit>() to listOf(PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		PausableChannelEventExecutor$ChannelCallableEventExecutor:executor() to listOf(Channel:eventLoop()),
		PausableChannelEventExecutor$ChannelRunnableEventExecutor:executor() to listOf(Channel:eventLoop()),
		AbstractChannelHandlerContext$1:<init>() to listOf(FastThreadLocal:<init>()),
		AbstractChannelHandlerContext$1:initialValue() to listOf(AbstractChannelHandlerContext$1:initialValue()),
		DefaultChannelHandlerInvoker$12:<init>(DefaultChannelHandlerInvoker-ChannelHandlerContext-ChannelPromise) to listOf(OneTimeTask:<init>()),
		DefaultChannelHandlerInvoker$12:run() to listOf(ChannelHandlerInvokerUtil:invokeDisconnectNow(ChannelHandlerContext-ChannelPromise)),
		ChannelPromiseAggregator:<init>(ChannelPromise) to listOf(PromiseAggregator:<init>(Promise)),
		AbstractChannel$AbstractUnsafe$5:operationComplete(ChannelFuture) to listOf(ChannelPromise:setSuccess()),
		AbstractChannel$AbstractUnsafe$5:operationComplete(Future) to listOf(AbstractChannel$AbstractUnsafe$5:operationComplete(ChannelFuture)),
		PendingWriteQueue$PendingWrite:newInstance(Object-int-ChannelPromise) to listOf(Recycler:get()),
		PendingWriteQueue$PendingWrite:recycle() to listOf(Recycler:recycle(Object-Recycler$Handle)),
		PendingWriteQueue$PendingWrite:access$400(PendingWriteQueue$PendingWrite) to listOf(PendingWriteQueue$PendingWrite:recycle()),
		PendingWriteQueue$PendingWrite:<init>(Recycler$Handle-PendingWriteQueue$1) to listOf(PendingWriteQueue$PendingWrite:<init>(Recycler$Handle)),
		PendingWriteQueue$PendingWrite:<clinit>() to listOf(PendingWriteQueue$PendingWrite$1:<init>()),
		AbstractChannelHandlerContext:skipFlags(ChannelHandler) to listOf(FastThreadLocal:get(), AbstractChannelHandlerContext:skipFlags0(Class)),
		AbstractChannelHandlerContext:skipFlags0(Class) to listOf(AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), AbstractChannelHandlerContext:isSkippable(Class-String-Class[]), PlatformDependent:throwException(Throwable)),
		AbstractChannelHandlerContext:alloc() to listOf(AbstractChannelHandlerContext:channel(), Channel:config(), ChannelConfig:getAllocator()),
		AbstractChannelHandlerContext:executor() to listOf(AbstractChannelHandlerContext:channel(), Channel:eventLoop(), AbstractChannelHandlerContext:wrappedEventLoop()),
		AbstractChannelHandlerContext:invoker() to listOf(AbstractChannelHandlerContext:channel(), Channel:eventLoop(), EventLoop:asInvoker(), AbstractChannelHandlerContext:wrappedEventLoop()),
		AbstractChannelHandlerContext:wrappedEventLoop() to listOf(AbstractChannelHandlerContext$PausableChannelEventExecutor0:<init>(AbstractChannelHandlerContext-AbstractChannelHandlerContext$1)),
		AbstractChannelHandlerContext:attr(AttributeKey) to listOf(AbstractChannel:attr(AttributeKey)),
		AbstractChannelHandlerContext:hasAttr(AttributeKey) to listOf(AbstractChannel:hasAttr(AttributeKey)),
		AbstractChannelHandlerContext:fireChannelRegistered() to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeChannelRegistered(ChannelHandlerContext)),
		AbstractChannelHandlerContext:fireChannelUnregistered() to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeChannelUnregistered(ChannelHandlerContext)),
		AbstractChannelHandlerContext:fireChannelActive() to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeChannelActive(ChannelHandlerContext)),
		AbstractChannelHandlerContext:fireChannelInactive() to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeChannelInactive(ChannelHandlerContext)),
		AbstractChannelHandlerContext:fireExceptionCaught(Throwable) to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeExceptionCaught(ChannelHandlerContext-Throwable)),
		AbstractChannelHandlerContext:fireUserEventTriggered(Object) to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeUserEventTriggered(ChannelHandlerContext-Object)),
		AbstractChannelHandlerContext:fireChannelRead(Object) to listOf(AbstractChannelHandlerContext:findContextInbound(), ReferenceCountUtil:touch(Object-Object), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeChannelRead(ChannelHandlerContext-Object)),
		AbstractChannelHandlerContext:fireChannelReadComplete() to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeChannelReadComplete(ChannelHandlerContext), AbstractChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), AbstractChannelHandlerContext:read()),
		AbstractChannelHandlerContext:fireChannelWritabilityChanged() to listOf(AbstractChannelHandlerContext:findContextInbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeChannelWritabilityChanged(ChannelHandlerContext)),
		AbstractChannelHandlerContext:bind(SocketAddress) to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		AbstractChannelHandlerContext:connect(SocketAddress) to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:connect(SocketAddress-ChannelPromise)),
		AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress) to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		AbstractChannelHandlerContext:disconnect() to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:disconnect(ChannelPromise)),
		AbstractChannelHandlerContext:close() to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:close(ChannelPromise)),
		AbstractChannelHandlerContext:deregister() to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:deregister(ChannelPromise)),
		AbstractChannelHandlerContext:bind(SocketAddress-ChannelPromise) to listOf(AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeBind(ChannelHandlerContext-SocketAddress-ChannelPromise)),
		AbstractChannelHandlerContext:connect(SocketAddress-ChannelPromise) to listOf(AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		AbstractChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeConnect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise)),
		AbstractChannelHandlerContext:disconnect(ChannelPromise) to listOf(AbstractChannelHandlerContext:channel(), Channel:metadata(), ChannelMetadata:hasDisconnect(), AbstractChannelHandlerContext:close(ChannelPromise), AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeDisconnect(ChannelHandlerContext-ChannelPromise)),
		AbstractChannelHandlerContext:close(ChannelPromise) to listOf(AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeClose(ChannelHandlerContext-ChannelPromise)),
		AbstractChannelHandlerContext:deregister(ChannelPromise) to listOf(AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeDeregister(ChannelHandlerContext-ChannelPromise)),
		AbstractChannelHandlerContext:read() to listOf(AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeRead(ChannelHandlerContext)),
		AbstractChannelHandlerContext:write(Object) to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:write(Object-ChannelPromise)),
		AbstractChannelHandlerContext:write(Object-ChannelPromise) to listOf(AbstractChannelHandlerContext:findContextOutbound(), ReferenceCountUtil:touch(Object-Object), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeWrite(ChannelHandlerContext-Object-ChannelPromise)),
		AbstractChannelHandlerContext:flush() to listOf(AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeFlush(ChannelHandlerContext)),
		AbstractChannelHandlerContext:writeAndFlush(Object-ChannelPromise) to listOf(AbstractChannelHandlerContext:findContextOutbound(), ReferenceCountUtil:touch(Object-Object), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeWrite(ChannelHandlerContext-Object-ChannelPromise), AbstractChannelHandlerContext:findContextOutbound(), AbstractChannelHandlerContext:invoker(), ChannelHandlerInvoker:invokeFlush(ChannelHandlerContext)),
		AbstractChannelHandlerContext:writeAndFlush(Object) to listOf(AbstractChannelHandlerContext:newPromise(), AbstractChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		AbstractChannelHandlerContext:newPromise() to listOf(AbstractChannelHandlerContext:channel(), AbstractChannelHandlerContext:executor(), DefaultChannelPromise:<init>(Channel-EventExecutor)),
		AbstractChannelHandlerContext:newProgressivePromise() to listOf(AbstractChannelHandlerContext:channel(), AbstractChannelHandlerContext:executor(), DefaultChannelProgressivePromise:<init>(Channel-EventExecutor)),
		AbstractChannelHandlerContext:newSucceededFuture() to listOf(AbstractChannelHandlerContext:channel(), AbstractChannelHandlerContext:executor(), SucceededChannelFuture:<init>(Channel-EventExecutor)),
		AbstractChannelHandlerContext:newFailedFuture(Throwable) to listOf(AbstractChannelHandlerContext:channel(), AbstractChannelHandlerContext:executor(), FailedChannelFuture:<init>(Channel-EventExecutor-Throwable)),
		AbstractChannelHandlerContext:voidPromise() to listOf(AbstractChannel:voidPromise()),
		AbstractChannelHandlerContext:toString() to listOf(StringUtil:simpleClassName(Class)),
		AbstractChannelHandlerContext:<clinit>() to listOf(AbstractChannelHandlerContext$1:<init>(), PlatformDependent:newAtomicReferenceFieldUpdater(Class-String)),
		AbstractChannel$AbstractUnsafe$2:<init>(AbstractChannel$AbstractUnsafe) to listOf(OneTimeTask:<init>()),
		AbstractChannel$AbstractUnsafe$2:run() to listOf(AbstractChannel:access$500(AbstractChannel), DefaultChannelPipeline:fireChannelActive()),
		SucceededChannelFuture:<init>(Channel-EventExecutor) to listOf(CompleteChannelFuture:<init>(Channel-EventExecutor)),
		NioEventLoop:<init>(NioEventLoopGroup-Executor-SelectorProvider) to listOf(SingleThreadEventLoop:<init>(EventLoopGroup-Executor-boolean), NioEventLoop:openSelector()),
		NioEventLoop:openSelector() to listOf(ChannelException:<init>(String-Throwable), SelectedSelectionKeySet:<init>(), PlatformDependent:getSystemClassLoader(), InternalLogger:trace(String-Object), InternalLogger:trace(String-Object-Object)),
		NioEventLoop:newTaskQueue() to listOf(PlatformDependent:newMpscQueue()),
		NioEventLoop:register(SelectableChannel-int-NioTask) to listOf(NioEventLoop:isShutdown(), EventLoopException:<init>(String-Throwable)),
		NioEventLoop:rebuildSelector() to listOf(NioEventLoop:inEventLoop(), NioEventLoop$1:<init>(NioEventLoop), NioEventLoop:execute(Runnable), NioEventLoop:openSelector(), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable), AbstractNioChannel:unsafe(), AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), InternalLogger:info(String)),
		NioEventLoop:run() to listOf(NioEventLoop:hasTasks(), NioEventLoop:selectNow(), NioEventLoop:select(boolean), NioEventLoop:processSelectedKeys(), NioEventLoop:runAllTasks(), NioEventLoop:processSelectedKeys(), NioEventLoop:runAllTasks(long), NioEventLoop:isShuttingDown(), NioEventLoop:closeAll(), NioEventLoop:confirmShutdown(), NioEventLoop:cleanupAndTerminate(boolean), InternalLogger:warn(String-Throwable), NioEventLoop:scheduleExecution()),
		NioEventLoop:processSelectedKeys() to listOf(SelectedSelectionKeySet:flip(), NioEventLoop:processSelectedKeysOptimized(SelectionKey[]), NioEventLoop:processSelectedKeysPlain(Set)),
		NioEventLoop:cleanup() to listOf(InternalLogger:warn(String-Throwable)),
		NioEventLoop:pollTask() to listOf(SingleThreadEventLoop:pollTask(), NioEventLoop:selectAgain()),
		NioEventLoop:processSelectedKeysPlain(Set) to listOf(NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel), NioEventLoop:processSelectedKey(SelectionKey-NioTask), NioEventLoop:selectAgain()),
		NioEventLoop:processSelectedKeysOptimized(SelectionKey[]) to listOf(NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel), NioEventLoop:processSelectedKey(SelectionKey-NioTask), NioEventLoop:selectAgain(), SelectedSelectionKeySet:flip()),
		NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel) to listOf(AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise), AbstractNioChannel$NioUnsafe:read(), AbstractNioChannel:isOpen(), AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:forceFlush(), AbstractNioChannel$NioUnsafe:finishConnect(), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise)),
		NioEventLoop:processSelectedKey(SelectionKey-NioTask) to listOf(NioTask:channelReady(SelectableChannel-SelectionKey), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable)),
		NioEventLoop:closeAll() to listOf(NioEventLoop:selectAgain(), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), AbstractNioChannel:unsafe(), AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise)),
		NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable) to listOf(NioTask:channelUnregistered(SelectableChannel-Throwable), InternalLogger:warn(String-Throwable)),
		NioEventLoop:select(boolean) to listOf(NioEventLoop:delayNanos(long), NioEventLoop:hasTasks(), NioEventLoop:hasScheduledTasks(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), InternalLogger:warn(String-Object), NioEventLoop:rebuildSelector(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Throwable)),
		NioEventLoop:selectAgain() to listOf(InternalLogger:warn(String-Throwable)),
		NioEventLoop:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getBoolean(String-boolean), SystemPropertyUtil:get(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), SystemPropertyUtil:getInt(String-int), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object)),
		NioEventLoop$1:run() to listOf(NioEventLoop:rebuildSelector()),
		AbstractNioByteChannel:<init>(Channel-SelectableChannel) to listOf(AbstractNioChannel:<init>(Channel-SelectableChannel-int)),
		AbstractNioByteChannel:newUnsafe() to listOf(AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel), AbstractNioByteChannel:newUnsafe()),
		AbstractNioByteChannel:doWrite(ChannelOutboundBuffer) to listOf(ChannelOutboundBuffer:current(), AbstractNioByteChannel:clearOpWrite(), ByteBuf:readableBytes(), ChannelOutboundBuffer:remove(), AbstractNioByteChannel:config(), ChannelConfig:getWriteSpinCount(), AbstractNioByteChannel:doWriteBytes(ByteBuf), ByteBuf:isReadable(), ChannelOutboundBuffer:progress(long), ChannelOutboundBuffer:remove(), AbstractNioByteChannel:incompleteWrite(boolean), FileRegion:transfered(), FileRegion:count(), AbstractNioByteChannel:config(), ChannelConfig:getWriteSpinCount(), AbstractNioByteChannel:doWriteFileRegion(FileRegion), FileRegion:transfered(), FileRegion:count(), ChannelOutboundBuffer:progress(long), ChannelOutboundBuffer:remove(), AbstractNioByteChannel:incompleteWrite(boolean)),
		AbstractNioByteChannel:filterOutboundMessage(Object) to listOf(ByteBuf:isDirect(), AbstractNioByteChannel:newDirectBuffer(ByteBuf), StringUtil:simpleClassName(Object)),
		AbstractNioByteChannel:incompleteWrite(boolean) to listOf(AbstractNioByteChannel:setOpWrite(), AbstractNioByteChannel$1:<init>(AbstractNioByteChannel), AbstractNioByteChannel:eventLoop(), EventLoop:execute(Runnable)),
		AbstractNioByteChannel:setOpWrite() to listOf(AbstractNioByteChannel:selectionKey()),
		AbstractNioByteChannel:clearOpWrite() to listOf(AbstractNioByteChannel:selectionKey()),
		AbstractNioByteChannel:<clinit>() to listOf(StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class)),
		AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(ChannelFuture) to listOf(ChannelFuture:isCancelled(), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel$AbstractNioUnsafe:voidPromise(), AbstractNioChannel$AbstractNioUnsafe:close(ChannelPromise)),
		AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(Future) to listOf(AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(ChannelFuture)),
		AbstractNioChannel:<init>(Channel-SelectableChannel-int) to listOf(AbstractChannel:<init>(Channel), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		AbstractNioChannel:unsafe() to listOf(AbstractChannel:unsafe(), AbstractNioChannel:unsafe()),
		AbstractNioChannel:doRegister() to listOf(AbstractNioChannel:javaChannel(), AbstractNioChannel:eventLoop(), EventLoop:unwrap(), AbstractNioChannel:eventLoop(), EventLoop:unwrap(), NioEventLoop:selectNow()),
		AbstractNioChannel:doDeregister() to listOf(AbstractNioChannel:eventLoop(), EventLoop:unwrap(), AbstractNioChannel:selectionKey(), NioEventLoop:cancel(SelectionKey)),
		AbstractNioChannel:newDirectBuffer(ByteBuf) to listOf(ByteBuf:readableBytes(), ReferenceCountUtil:safeRelease(Object), AbstractNioChannel:alloc(), ByteBufAllocator:isDirectBufferPooled(), ByteBufAllocator:directBuffer(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ReferenceCountUtil:safeRelease(Object), ByteBufUtil:threadLocalDirectBuffer(), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ReferenceCountUtil:safeRelease(Object)),
		AbstractNioChannel:newDirectBuffer(ReferenceCounted-ByteBuf) to listOf(ByteBuf:readableBytes(), ReferenceCountUtil:safeRelease(Object), AbstractNioChannel:alloc(), ByteBufAllocator:isDirectBufferPooled(), ByteBufAllocator:directBuffer(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ReferenceCountUtil:safeRelease(Object), ByteBufUtil:threadLocalDirectBuffer(), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ReferenceCountUtil:safeRelease(Object), ByteBuf:retain(), ReferenceCountUtil:safeRelease(Object)),
		AbstractNioChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		AbstractNioChannel$AbstractNioUnsafe:removeReadOp() to listOf(AbstractNioChannel:selectionKey()),
		AbstractNioChannel$AbstractNioUnsafe:ch() to listOf(AbstractNioChannel:javaChannel()),
		AbstractNioChannel$AbstractNioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setUncancellable(), AbstractNioChannel$AbstractNioUnsafe:ensureOpen(ChannelPromise), AbstractNioChannel:access$000(AbstractNioChannel), AbstractNioChannel:isActive(), AbstractNioChannel:doConnect(SocketAddress-SocketAddress), AbstractNioChannel$AbstractNioUnsafe:fulfillConnectPromise(ChannelPromise-boolean), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel:access$102(AbstractNioChannel-SocketAddress), AbstractNioChannel:config(), ChannelConfig:getConnectTimeoutMillis(), AbstractNioChannel:eventLoop(), AbstractNioChannel$AbstractNioUnsafe$1:<init>(AbstractNioChannel$AbstractNioUnsafe-SocketAddress), EventLoop:schedule(Runnable-long-TimeUnit), AbstractNioChannel:access$202(AbstractNioChannel-ScheduledFuture), AbstractNioChannel$AbstractNioUnsafe$2:<init>(AbstractNioChannel$AbstractNioUnsafe), ChannelPromise:addListener(GenericFutureListener), AbstractNioChannel$AbstractNioUnsafe:annotateConnectException(Throwable-SocketAddress), ChannelPromise:tryFailure(Throwable), AbstractNioChannel$AbstractNioUnsafe:closeIfClosed()),
		AbstractNioChannel$AbstractNioUnsafe:fulfillConnectPromise(ChannelPromise-boolean) to listOf(ChannelPromise:trySuccess(), AbstractNioChannel:isActive(), AbstractNioChannel:pipeline(), ChannelPipeline:fireChannelActive(), AbstractNioChannel$AbstractNioUnsafe:voidPromise(), AbstractNioChannel$AbstractNioUnsafe:close(ChannelPromise)),
		AbstractNioChannel$AbstractNioUnsafe:fulfillConnectPromise(ChannelPromise-Throwable) to listOf(ChannelPromise:tryFailure(Throwable), AbstractNioChannel$AbstractNioUnsafe:closeIfClosed()),
		AbstractNioChannel$AbstractNioUnsafe:finishConnect() to listOf(AbstractNioChannel:eventLoop(), EventLoop:inEventLoop(), AbstractNioChannel:isActive(), AbstractNioChannel:doFinishConnect(), AbstractNioChannel:access$000(AbstractNioChannel), AbstractNioChannel$AbstractNioUnsafe:fulfillConnectPromise(ChannelPromise-boolean), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel:access$000(AbstractNioChannel), AbstractNioChannel:access$100(AbstractNioChannel), AbstractNioChannel$AbstractNioUnsafe:annotateConnectException(Throwable-SocketAddress), AbstractNioChannel$AbstractNioUnsafe:fulfillConnectPromise(ChannelPromise-Throwable), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise)),
		AbstractNioChannel$AbstractNioUnsafe:flush0() to listOf(AbstractNioChannel$AbstractNioUnsafe:isFlushPending(), AbstractChannel$AbstractUnsafe:flush0()),
		AbstractNioChannel$AbstractNioUnsafe:forceFlush() to listOf(AbstractChannel$AbstractUnsafe:flush0()),
		AbstractNioChannel$AbstractNioUnsafe:isFlushPending() to listOf(AbstractNioChannel:selectionKey()),
		NioEventLoopGroup:<init>() to listOf(NioEventLoopGroup:<init>(int)),
		NioEventLoopGroup:<init>(int) to listOf(NioEventLoopGroup:<init>(int-Executor)),
		NioEventLoopGroup:<init>(int-Executor) to listOf(NioEventLoopGroup:<init>(int-Executor-SelectorProvider)),
		NioEventLoopGroup:<init>(int-ExecutorServiceFactory) to listOf(NioEventLoopGroup:<init>(int-ExecutorServiceFactory-SelectorProvider)),
		NioEventLoopGroup:<init>(int-Executor-SelectorProvider) to listOf(MultithreadEventLoopGroup:<init>(int-Executor-Object[])),
		NioEventLoopGroup:<init>(int-ExecutorServiceFactory-SelectorProvider) to listOf(MultithreadEventLoopGroup:<init>(int-ExecutorServiceFactory-Object[])),
		NioEventLoopGroup:setIoRatio(int) to listOf(NioEventLoopGroup:children(), NioEventLoop:setIoRatio(int)),
		NioEventLoopGroup:rebuildSelectors() to listOf(NioEventLoopGroup:children(), NioEventLoop:rebuildSelector()),
		NioEventLoopGroup:newChild(Executor-Object[]) to listOf(NioEventLoop:<init>(NioEventLoopGroup-Executor-SelectorProvider), NioEventLoopGroup:newChild(Executor-Object[])),
		AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel) to listOf(AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel)),
		AbstractNioByteChannel$NioByteUnsafe:closeOnRead(ChannelPipeline) to listOf(AbstractNioByteChannel:selectionKey(), AbstractNioByteChannel:setInputShutdown(), AbstractNioByteChannel:isOpen(), AbstractNioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractNioByteChannel$NioByteUnsafe:voidPromise(), AbstractNioByteChannel$NioByteUnsafe:close(ChannelPromise)),
		AbstractNioByteChannel$NioByteUnsafe:handleReadException(ChannelPipeline-ByteBuf-Throwable-boolean) to listOf(ByteBuf:isReadable(), AbstractNioByteChannel:setReadPending(boolean), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractNioByteChannel$NioByteUnsafe:closeOnRead(ChannelPipeline)),
		AbstractNioByteChannel$NioByteUnsafe:read() to listOf(AbstractNioByteChannel:config(), ChannelConfig:isAutoRead(), AbstractNioByteChannel:isReadPending(), AbstractNioByteChannel$NioByteUnsafe:removeReadOp(), AbstractNioByteChannel:pipeline(), ChannelConfig:getAllocator(), ChannelConfig:getMaxMessagesPerRead(), AbstractNioByteChannel$NioByteUnsafe:recvBufAllocHandle(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writableBytes(), AbstractNioByteChannel:doReadBytes(ByteBuf), ByteBuf:release(), AbstractNioByteChannel:setReadPending(boolean), ChannelPipeline:fireChannelRead(Object), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelReadComplete(), RecvByteBufAllocator$Handle:record(int), AbstractNioByteChannel$NioByteUnsafe:closeOnRead(ChannelPipeline), ChannelConfig:isAutoRead(), AbstractNioByteChannel:isReadPending(), AbstractNioByteChannel$NioByteUnsafe:removeReadOp(), AbstractNioByteChannel$NioByteUnsafe:handleReadException(ChannelPipeline-ByteBuf-Throwable-boolean), ChannelConfig:isAutoRead(), AbstractNioByteChannel:isReadPending(), AbstractNioByteChannel$NioByteUnsafe:removeReadOp(), ChannelConfig:isAutoRead(), AbstractNioByteChannel:isReadPending(), AbstractNioByteChannel$NioByteUnsafe:removeReadOp()),
		AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int) to listOf(AbstractNioChannel:<init>(Channel-SelectableChannel-int)),
		AbstractNioMessageChannel:newUnsafe() to listOf(AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel-AbstractNioMessageChannel$1), AbstractNioMessageChannel:newUnsafe()),
		AbstractNioMessageChannel:doWrite(ChannelOutboundBuffer) to listOf(AbstractNioMessageChannel:selectionKey(), ChannelOutboundBuffer:current(), AbstractNioMessageChannel:config(), ChannelConfig:getWriteSpinCount(), AbstractNioMessageChannel:doWriteMessage(Object-ChannelOutboundBuffer), ChannelOutboundBuffer:remove(), AbstractNioMessageChannel:continueOnWriteError(), ChannelOutboundBuffer:remove(Throwable)),
		AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel) to listOf(AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel)),
		AbstractNioMessageChannel$NioMessageUnsafe:read() to listOf(AbstractNioMessageChannel:eventLoop(), EventLoop:inEventLoop(), AbstractNioMessageChannel:config(), ChannelConfig:isAutoRead(), AbstractNioMessageChannel:isReadPending(), AbstractNioMessageChannel$NioMessageUnsafe:removeReadOp(), ChannelConfig:getMaxMessagesPerRead(), AbstractNioMessageChannel:pipeline(), AbstractNioMessageChannel:doReadMessages(List), ChannelConfig:isAutoRead(), AbstractNioMessageChannel:setReadPending(boolean), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractNioMessageChannel:isOpen(), AbstractNioMessageChannel$NioMessageUnsafe:voidPromise(), AbstractNioMessageChannel$NioMessageUnsafe:close(ChannelPromise), ChannelConfig:isAutoRead(), AbstractNioMessageChannel:isReadPending(), AbstractNioMessageChannel$NioMessageUnsafe:removeReadOp(), ChannelConfig:isAutoRead(), AbstractNioMessageChannel:isReadPending(), AbstractNioMessageChannel$NioMessageUnsafe:removeReadOp()),
		AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel-AbstractNioMessageChannel$1) to listOf(AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel)),
		AbstractNioByteChannel$1:run() to listOf(AbstractNioByteChannel:flush()),
		SelectedSelectionKeySet:add(SelectionKey) to listOf(SelectedSelectionKeySet:doubleCapacityA(), SelectedSelectionKeySet:doubleCapacityB()),
		SelectedSelectionKeySet:add(Object) to listOf(SelectedSelectionKeySet:add(SelectionKey)),
		AbstractNioChannel$AbstractNioUnsafe$1:<init>(AbstractNioChannel$AbstractNioUnsafe-SocketAddress) to listOf(OneTimeTask:<init>()),
		AbstractNioChannel$AbstractNioUnsafe$1:run() to listOf(AbstractNioChannel:access$000(AbstractNioChannel), ConnectTimeoutException:<init>(String), ChannelPromise:tryFailure(Throwable), AbstractNioChannel$AbstractNioUnsafe:voidPromise(), AbstractNioChannel$AbstractNioUnsafe:close(ChannelPromise)),
		ChannelInboundHandlerAdapter:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		DefaultEventLoopGroup:<init>() to listOf(DefaultEventLoopGroup:<init>(int)),
		DefaultEventLoopGroup:<init>(int) to listOf(DefaultEventLoopGroup:<init>(int-Executor)),
		DefaultEventLoopGroup:<init>(int-Executor) to listOf(MultithreadEventLoopGroup:<init>(int-Executor-Object[])),
		DefaultEventLoopGroup:<init>(int-ExecutorServiceFactory) to listOf(MultithreadEventLoopGroup:<init>(int-ExecutorServiceFactory-Object[])),
		DefaultEventLoopGroup:newChild(Executor-Object[]) to listOf(DefaultEventLoop:<init>(EventLoopGroup-Executor), DefaultEventLoopGroup:newChild(Executor-Object[])),
		DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket) to listOf(DefaultChannelConfig:<init>(Channel)),
		DefaultServerSocketChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultServerSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultServerSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultServerSocketChannelConfig:getReceiveBufferSize(), DefaultServerSocketChannelConfig:isReuseAddress(), DefaultServerSocketChannelConfig:getBacklog(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultServerSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultServerSocketChannelConfig:validate(ChannelOption-Object), DefaultServerSocketChannelConfig:setReceiveBufferSize(int), DefaultServerSocketChannelConfig:setReuseAddress(boolean), DefaultServerSocketChannelConfig:setBacklog(int), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultServerSocketChannelConfig:isReuseAddress() to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:setReuseAddress(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:getReceiveBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:setReceiveBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultServerSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultServerSocketChannelConfig:setWriteSpinCount(int)),
		DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultServerSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultServerSocketChannelConfig:setAutoRead(boolean)),
		DefaultServerSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultServerSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultServerSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultServerSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		DefaultSocketChannelConfig:<init>(SocketChannel-Socket) to listOf(DefaultChannelConfig:<init>(Channel), PlatformDependent:canEnableTcpNoDelayByDefault(), DefaultSocketChannelConfig:setTcpNoDelay(boolean)),
		DefaultSocketChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultSocketChannelConfig:getReceiveBufferSize(), DefaultSocketChannelConfig:getSendBufferSize(), DefaultSocketChannelConfig:isTcpNoDelay(), DefaultSocketChannelConfig:isKeepAlive(), DefaultSocketChannelConfig:isReuseAddress(), DefaultSocketChannelConfig:getSoLinger(), DefaultSocketChannelConfig:getTrafficClass(), DefaultSocketChannelConfig:isAllowHalfClosure(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultSocketChannelConfig:validate(ChannelOption-Object), DefaultSocketChannelConfig:setReceiveBufferSize(int), DefaultSocketChannelConfig:setSendBufferSize(int), DefaultSocketChannelConfig:setTcpNoDelay(boolean), DefaultSocketChannelConfig:setKeepAlive(boolean), DefaultSocketChannelConfig:setReuseAddress(boolean), DefaultSocketChannelConfig:setSoLinger(int), DefaultSocketChannelConfig:setTrafficClass(int), DefaultSocketChannelConfig:setAllowHalfClosure(boolean), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultSocketChannelConfig:getReceiveBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:getSendBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:getSoLinger() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:getTrafficClass() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:isKeepAlive() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:isReuseAddress() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:isTcpNoDelay() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setKeepAlive(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setReceiveBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setReuseAddress(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setSendBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setSoLinger(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setTcpNoDelay(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setTrafficClass(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultSocketChannelConfig:setWriteSpinCount(int)),
		DefaultSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultSocketChannelConfig:setAutoRead(boolean)),
		DefaultSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket) to listOf(DefaultChannelConfig:<init>(Channel), DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultDatagramChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultDatagramChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultDatagramChannelConfig:getOption(ChannelOption) to listOf(DefaultDatagramChannelConfig:isBroadcast(), DefaultDatagramChannelConfig:getReceiveBufferSize(), DefaultDatagramChannelConfig:getSendBufferSize(), DefaultDatagramChannelConfig:isReuseAddress(), DefaultDatagramChannelConfig:isLoopbackModeDisabled(), DefaultDatagramChannelConfig:getInterface(), DefaultDatagramChannelConfig:getNetworkInterface(), DefaultDatagramChannelConfig:getTimeToLive(), DefaultDatagramChannelConfig:getTrafficClass(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultDatagramChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultDatagramChannelConfig:validate(ChannelOption-Object), DefaultDatagramChannelConfig:setBroadcast(boolean), DefaultDatagramChannelConfig:setReceiveBufferSize(int), DefaultDatagramChannelConfig:setSendBufferSize(int), DefaultDatagramChannelConfig:setReuseAddress(boolean), DefaultDatagramChannelConfig:setLoopbackModeDisabled(boolean), DefaultDatagramChannelConfig:setInterface(InetAddress), DefaultDatagramChannelConfig:setNetworkInterface(NetworkInterface), DefaultDatagramChannelConfig:setTimeToLive(int), DefaultDatagramChannelConfig:setTrafficClass(int), DefaultDatagramChannelConfig:setActiveOnOpen(boolean), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultDatagramChannelConfig:setActiveOnOpen(boolean) to listOf(Channel:isRegistered()),
		DefaultDatagramChannelConfig:isBroadcast() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setBroadcast(boolean) to listOf(PlatformDependent:isWindows(), PlatformDependent:isRoot(), InternalLogger:warn(String), ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getInterface() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setInterface(InetAddress) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:isLoopbackModeDisabled() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setLoopbackModeDisabled(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getNetworkInterface() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setNetworkInterface(NetworkInterface) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:isReuseAddress() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setReuseAddress(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getReceiveBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setReceiveBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getSendBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setSendBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getTimeToLive() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setTimeToLive(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getTrafficClass() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setTrafficClass(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultDatagramChannelConfig:setWriteSpinCount(int)),
		DefaultDatagramChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultDatagramChannelConfig:setConnectTimeoutMillis(int)),
		DefaultDatagramChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultDatagramChannelConfig:setMaxMessagesPerRead(int)),
		DefaultDatagramChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultDatagramChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultDatagramChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultDatagramChannelConfig:setAutoRead(boolean)),
		DefaultDatagramChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultDatagramChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultDatagramChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultDatagramChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultDatagramChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		DefaultDatagramChannelConfig:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), FixedRecvByteBufAllocator:<init>(int)),
		OioSocketChannel:<init>() to listOf(OioSocketChannel:<init>(Socket)),
		OioSocketChannel:<init>(Socket) to listOf(OioSocketChannel:<init>(Channel-Socket)),
		OioSocketChannel:<init>(Channel-Socket) to listOf(OioByteStreamChannel:<init>(Channel), DefaultOioSocketChannelConfig:<init>(OioSocketChannel-Socket), OioSocketChannel:activate(InputStream-OutputStream), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), InternalLogger:warn(String-Throwable)),
		OioSocketChannel:parent() to listOf(OioByteStreamChannel:parent(), OioSocketChannel:parent()),
		OioSocketChannel:isInputShutdown() to listOf(OioByteStreamChannel:isInputShutdown()),
		OioSocketChannel:isOutputShutdown() to listOf(OioSocketChannel:isActive()),
		OioSocketChannel:shutdownOutput() to listOf(OioSocketChannel:newPromise(), OioSocketChannel:shutdownOutput(ChannelPromise)),
		OioSocketChannel:doReadBytes(ByteBuf) to listOf(OioByteStreamChannel:doReadBytes(ByteBuf)),
		OioSocketChannel:shutdownOutput(ChannelPromise) to listOf(OioSocketChannel:eventLoop(), EventLoop:inEventLoop(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSocketChannel$1:<init>(OioSocketChannel-ChannelPromise), EventLoop:execute(Runnable)),
		OioSocketChannel:localAddress() to listOf(OioByteStreamChannel:localAddress(), OioSocketChannel:localAddress()),
		OioSocketChannel:remoteAddress() to listOf(OioByteStreamChannel:remoteAddress(), OioSocketChannel:remoteAddress()),
		OioSocketChannel:doConnect(SocketAddress-SocketAddress) to listOf(OioSocketChannel:config(), OioSocketChannelConfig:getConnectTimeoutMillis(), OioSocketChannel:activate(InputStream-OutputStream), OioSocketChannel:doClose(), ConnectTimeoutException:<init>(String), ConnectTimeoutException:setStackTrace(StackTraceElement[]), OioSocketChannel:doClose()),
		OioSocketChannel:doDisconnect() to listOf(OioSocketChannel:doClose()),
		OioSocketChannel:checkInputShutdown() to listOf(OioSocketChannel:isInputShutdown(), OioSocketChannel:config(), OioSocketChannelConfig:getSoTimeout()),
		OioSocketChannel:setReadPending(boolean) to listOf(OioByteStreamChannel:setReadPending(boolean)),
		OioSocketChannel:config() to listOf(OioSocketChannel:config(), OioSocketChannel:config()),
		OioSocketChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		OioDatagramChannel:newSocket() to listOf(ChannelException:<init>(String-Throwable)),
		OioDatagramChannel:<init>() to listOf(OioDatagramChannel:newSocket(), OioDatagramChannel:<init>(MulticastSocket)),
		OioDatagramChannel:<init>(MulticastSocket) to listOf(AbstractOioMessageChannel:<init>(Channel), ChannelException:<init>(String-Throwable), DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket)),
		OioDatagramChannel:isActive() to listOf(OioDatagramChannel:isOpen(), DatagramChannelConfig:getOption(ChannelOption), OioDatagramChannel:isRegistered()),
		OioDatagramChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioDatagramChannel:localAddress()),
		OioDatagramChannel:remoteAddress() to listOf(AbstractOioMessageChannel:remoteAddress(), OioDatagramChannel:remoteAddress()),
		OioDatagramChannel:doConnect(SocketAddress-SocketAddress) to listOf(InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		OioDatagramChannel:doReadMessages(List) to listOf(OioDatagramChannel:config(), OioDatagramChannel:unsafe(), Channel$Unsafe:recvBufAllocHandle(), DatagramChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:guess(), ByteBufAllocator:heapBuffer(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:capacity(), RecvByteBufAllocator$Handle:record(int), ByteBuf:writerIndex(int), OioDatagramChannel:localAddress(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), ByteBuf:release(), ByteBuf:release(), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:release(), ByteBuf:release()),
		OioDatagramChannel:doWrite(ChannelOutboundBuffer) to listOf(ChannelOutboundBuffer:current(), AddressedEnvelope:recipient(), AddressedEnvelope:content(), ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), ChannelOutboundBuffer:remove(), ChannelOutboundBuffer:remove(Throwable)),
		OioDatagramChannel:filterOutboundMessage(Object) to listOf(AddressedEnvelope:content(), StringUtil:simpleClassName(Object)),
		OioDatagramChannel:joinGroup(InetAddress) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:joinGroup(InetAddress-ChannelPromise)),
		OioDatagramChannel:joinGroup(InetAddress-ChannelPromise) to listOf(OioDatagramChannel:ensureBound(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(OioDatagramChannel:ensureBound(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:ensureBound() to listOf(OioDatagramChannel:isActive()),
		OioDatagramChannel:leaveGroup(InetAddress) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:leaveGroup(InetAddress-ChannelPromise)),
		OioDatagramChannel:leaveGroup(InetAddress-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:block(InetAddress-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:config() to listOf(OioDatagramChannel:config()),
		OioDatagramChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class)),
		DefaultOioSocketChannelConfig:<init>(SocketChannel-Socket) to listOf(DefaultSocketChannelConfig:<init>(SocketChannel-Socket)),
		DefaultOioSocketChannelConfig:<init>(OioSocketChannel-Socket) to listOf(DefaultSocketChannelConfig:<init>(SocketChannel-Socket)),
		DefaultOioSocketChannelConfig:getOptions() to listOf(DefaultSocketChannelConfig:getOptions(), DefaultOioSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultOioSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultOioSocketChannelConfig:getSoTimeout(), DefaultSocketChannelConfig:getOption(ChannelOption)),
		DefaultOioSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultOioSocketChannelConfig:validate(ChannelOption-Object), DefaultOioSocketChannelConfig:setSoTimeout(int), DefaultSocketChannelConfig:setOption(ChannelOption-Object)),
		DefaultOioSocketChannelConfig:setSoTimeout(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultOioSocketChannelConfig:getSoTimeout() to listOf(ChannelException:<init>(Throwable)),
		DefaultOioSocketChannelConfig:setTcpNoDelay(boolean) to listOf(DefaultSocketChannelConfig:setTcpNoDelay(boolean), DefaultOioSocketChannelConfig:setTcpNoDelay(boolean)),
		DefaultOioSocketChannelConfig:setSoLinger(int) to listOf(DefaultSocketChannelConfig:setSoLinger(int), DefaultOioSocketChannelConfig:setSoLinger(int)),
		DefaultOioSocketChannelConfig:setSendBufferSize(int) to listOf(DefaultSocketChannelConfig:setSendBufferSize(int), DefaultOioSocketChannelConfig:setSendBufferSize(int)),
		DefaultOioSocketChannelConfig:setReceiveBufferSize(int) to listOf(DefaultSocketChannelConfig:setReceiveBufferSize(int), DefaultOioSocketChannelConfig:setReceiveBufferSize(int)),
		DefaultOioSocketChannelConfig:setKeepAlive(boolean) to listOf(DefaultSocketChannelConfig:setKeepAlive(boolean), DefaultOioSocketChannelConfig:setKeepAlive(boolean)),
		DefaultOioSocketChannelConfig:setTrafficClass(int) to listOf(DefaultSocketChannelConfig:setTrafficClass(int), DefaultOioSocketChannelConfig:setTrafficClass(int)),
		DefaultOioSocketChannelConfig:setReuseAddress(boolean) to listOf(DefaultSocketChannelConfig:setReuseAddress(boolean), DefaultOioSocketChannelConfig:setReuseAddress(boolean)),
		DefaultOioSocketChannelConfig:setPerformancePreferences(int-int-int) to listOf(DefaultSocketChannelConfig:setPerformancePreferences(int-int-int), DefaultOioSocketChannelConfig:setPerformancePreferences(int-int-int)),
		DefaultOioSocketChannelConfig:setAllowHalfClosure(boolean) to listOf(DefaultSocketChannelConfig:setAllowHalfClosure(boolean), DefaultOioSocketChannelConfig:setAllowHalfClosure(boolean)),
		DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultOioSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultSocketChannelConfig:setWriteSpinCount(int), DefaultOioSocketChannelConfig:setWriteSpinCount(int), DefaultOioSocketChannelConfig:setWriteSpinCount(int)),
		DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultOioSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultSocketChannelConfig:setAutoRead(boolean), DefaultOioSocketChannelConfig:setAutoRead(boolean), DefaultOioSocketChannelConfig:setAutoRead(boolean)),
		DefaultOioSocketChannelConfig:autoReadCleared() to listOf(OioSocketChannel:setReadPending(boolean)),
		DefaultOioSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultSocketChannelConfig:setWriteBufferHighWaterMark(int), DefaultOioSocketChannelConfig:setWriteBufferHighWaterMark(int), DefaultOioSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultOioSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultSocketChannelConfig:setWriteBufferLowWaterMark(int), DefaultOioSocketChannelConfig:setWriteBufferLowWaterMark(int), DefaultOioSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultOioSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultOioSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultOioSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		DefaultOioServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket) to listOf(DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket)),
		DefaultOioServerSocketChannelConfig:<init>(OioServerSocketChannel-ServerSocket) to listOf(DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket)),
		DefaultOioServerSocketChannelConfig:getOptions() to listOf(DefaultServerSocketChannelConfig:getOptions(), DefaultOioServerSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultOioServerSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultOioServerSocketChannelConfig:getSoTimeout(), DefaultServerSocketChannelConfig:getOption(ChannelOption)),
		DefaultOioServerSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultOioServerSocketChannelConfig:validate(ChannelOption-Object), DefaultOioServerSocketChannelConfig:setSoTimeout(int), DefaultServerSocketChannelConfig:setOption(ChannelOption-Object)),
		DefaultOioServerSocketChannelConfig:setSoTimeout(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultOioServerSocketChannelConfig:getSoTimeout() to listOf(ChannelException:<init>(Throwable)),
		DefaultOioServerSocketChannelConfig:setBacklog(int) to listOf(DefaultServerSocketChannelConfig:setBacklog(int), DefaultOioServerSocketChannelConfig:setBacklog(int)),
		DefaultOioServerSocketChannelConfig:setReuseAddress(boolean) to listOf(DefaultServerSocketChannelConfig:setReuseAddress(boolean), DefaultOioServerSocketChannelConfig:setReuseAddress(boolean)),
		DefaultOioServerSocketChannelConfig:setReceiveBufferSize(int) to listOf(DefaultServerSocketChannelConfig:setReceiveBufferSize(int), DefaultOioServerSocketChannelConfig:setReceiveBufferSize(int)),
		DefaultOioServerSocketChannelConfig:setPerformancePreferences(int-int-int) to listOf(DefaultServerSocketChannelConfig:setPerformancePreferences(int-int-int), DefaultOioServerSocketChannelConfig:setPerformancePreferences(int-int-int)),
		DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultOioServerSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultServerSocketChannelConfig:setWriteSpinCount(int), DefaultOioServerSocketChannelConfig:setWriteSpinCount(int), DefaultOioServerSocketChannelConfig:setWriteSpinCount(int)),
		DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultOioServerSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultServerSocketChannelConfig:setAutoRead(boolean), DefaultOioServerSocketChannelConfig:setAutoRead(boolean), DefaultOioServerSocketChannelConfig:setAutoRead(boolean)),
		DefaultOioServerSocketChannelConfig:autoReadCleared() to listOf(OioServerSocketChannel:setReadPending(boolean)),
		DefaultOioServerSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultServerSocketChannelConfig:setWriteBufferHighWaterMark(int), DefaultOioServerSocketChannelConfig:setWriteBufferHighWaterMark(int), DefaultOioServerSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultOioServerSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultServerSocketChannelConfig:setWriteBufferLowWaterMark(int), DefaultOioServerSocketChannelConfig:setWriteBufferLowWaterMark(int), DefaultOioServerSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultOioServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator) to listOf(DefaultServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultOioServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator), DefaultOioServerSocketChannelConfig:setMessageSizeEstimator(MessageSizeEstimator)),
		OioServerSocketChannel:newServerSocket() to listOf(ChannelException:<init>(String-Throwable)),
		OioServerSocketChannel:<init>() to listOf(OioServerSocketChannel:newServerSocket(), OioServerSocketChannel:<init>(ServerSocket)),
		OioServerSocketChannel:<init>(ServerSocket) to listOf(AbstractOioMessageChannel:<init>(Channel), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), DefaultOioServerSocketChannelConfig:<init>(OioServerSocketChannel-ServerSocket)),
		OioServerSocketChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioServerSocketChannel:localAddress()),
		OioServerSocketChannel:isActive() to listOf(OioServerSocketChannel:isOpen()),
		OioServerSocketChannel:doBind(SocketAddress) to listOf(OioServerSocketChannelConfig:getBacklog()),
		OioServerSocketChannel:doReadMessages(List) to listOf(OioSocketChannel:<init>(Channel-Socket), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		OioServerSocketChannel:setReadPending(boolean) to listOf(AbstractOioMessageChannel:setReadPending(boolean)),
		OioServerSocketChannel:remoteAddress() to listOf(OioServerSocketChannel:remoteAddress()),
		OioServerSocketChannel:config() to listOf(OioServerSocketChannel:config(), OioServerSocketChannel:config()),
		OioServerSocketChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		OioSocketChannel$1:run() to listOf(OioSocketChannel:shutdownOutput(ChannelPromise)),
		DatagramPacket:<init>(ByteBuf-InetSocketAddress) to listOf(DefaultAddressedEnvelope:<init>(Object-SocketAddress)),
		DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress) to listOf(DefaultAddressedEnvelope:<init>(Object-SocketAddress-SocketAddress)),
		DatagramPacket:copy() to listOf(DatagramPacket:content(), ByteBuf:copy(), DatagramPacket:recipient(), DatagramPacket:sender(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), DatagramPacket:copy()),
		DatagramPacket:duplicate() to listOf(DatagramPacket:content(), ByteBuf:duplicate(), DatagramPacket:recipient(), DatagramPacket:sender(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), DatagramPacket:duplicate()),
		DatagramPacket:retain() to listOf(DefaultAddressedEnvelope:retain(), DatagramPacket:retain(), DatagramPacket:retain(), DatagramPacket:retain()),
		DatagramPacket:retain(int) to listOf(DefaultAddressedEnvelope:retain(int), DatagramPacket:retain(int), DatagramPacket:retain(int), DatagramPacket:retain(int)),
		DatagramPacket:touch() to listOf(DefaultAddressedEnvelope:touch(), DatagramPacket:touch(), DatagramPacket:touch(), DatagramPacket:touch()),
		DatagramPacket:touch(Object) to listOf(DefaultAddressedEnvelope:touch(Object), DatagramPacket:touch(Object), DatagramPacket:touch(Object), DatagramPacket:touch(Object)),
		DatagramPacket:content() to listOf(DefaultAddressedEnvelope:content()),
		NioSocketChannel$1:<init>(NioSocketChannel-ChannelPromise) to listOf(OneTimeTask:<init>()),
		NioSocketChannel$1:run() to listOf(NioSocketChannel:access$100(NioSocketChannel-ChannelPromise)),
		NioServerSocketChannel$NioServerSocketChannelConfig:<init>(NioServerSocketChannel-NioServerSocketChannel-ServerSocket) to listOf(DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket)),
		NioServerSocketChannel$NioServerSocketChannelConfig:autoReadCleared() to listOf(NioServerSocketChannel:access$100(NioServerSocketChannel-boolean)),
		NioServerSocketChannel$NioServerSocketChannelConfig:<init>(NioServerSocketChannel-NioServerSocketChannel-ServerSocket-NioServerSocketChannel$1) to listOf(NioServerSocketChannel$NioServerSocketChannelConfig:<init>(NioServerSocketChannel-NioServerSocketChannel-ServerSocket)),
		NioServerSocketChannel:newSocket(SelectorProvider) to listOf(ChannelException:<init>(String-Throwable)),
		NioServerSocketChannel:<init>() to listOf(NioServerSocketChannel:newSocket(SelectorProvider), NioServerSocketChannel:<init>(ServerSocketChannel)),
		NioServerSocketChannel:<init>(SelectorProvider) to listOf(NioServerSocketChannel:newSocket(SelectorProvider), NioServerSocketChannel:<init>(ServerSocketChannel)),
		NioServerSocketChannel:<init>(ServerSocketChannel) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), NioServerSocketChannel:javaChannel(), NioServerSocketChannel$NioServerSocketChannelConfig:<init>(NioServerSocketChannel-NioServerSocketChannel-ServerSocket-NioServerSocketChannel$1)),
		NioServerSocketChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioServerSocketChannel:localAddress()),
		NioServerSocketChannel:isActive() to listOf(NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:localAddress0() to listOf(NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:doBind(SocketAddress) to listOf(NioServerSocketChannel:javaChannel(), ServerSocketChannelConfig:getBacklog()),
		NioServerSocketChannel:doClose() to listOf(NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:doReadMessages(List) to listOf(NioServerSocketChannel:javaChannel(), NioSocketChannel:<init>(Channel-SocketChannel), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		NioServerSocketChannel:remoteAddress() to listOf(NioServerSocketChannel:remoteAddress()),
		NioServerSocketChannel:config() to listOf(NioServerSocketChannel:config()),
		NioServerSocketChannel:access$100(NioServerSocketChannel-boolean) to listOf(NioServerSocketChannel:setReadPending(boolean)),
		NioServerSocketChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), InternalLoggerFactory:getInstance(Class)),
		NioSocketChannel$2:<init>(NioSocketChannel-ChannelPromise) to listOf(OneTimeTask:<init>()),
		NioSocketChannel$2:run() to listOf(NioSocketChannel:access$100(NioSocketChannel-ChannelPromise)),
		ProtocolFamilyConverter$1:<clinit>() to listOf(InternetProtocolFamily:values(), InternetProtocolFamily:ordinal(), InternetProtocolFamily:ordinal()),
		NioDatagramChannel:newSocket(SelectorProvider) to listOf(ChannelException:<init>(String-Throwable)),
		NioDatagramChannel:newSocket(SelectorProvider-InternetProtocolFamily) to listOf(NioDatagramChannel:newSocket(SelectorProvider), NioDatagramChannel:checkJavaVersion(), ProtocolFamilyConverter:convert(InternetProtocolFamily), ChannelException:<init>(String-Throwable)),
		NioDatagramChannel:checkJavaVersion() to listOf(PlatformDependent:javaVersion()),
		NioDatagramChannel:<init>() to listOf(NioDatagramChannel:newSocket(SelectorProvider), NioDatagramChannel:<init>(DatagramChannel)),
		NioDatagramChannel:<init>(SelectorProvider) to listOf(NioDatagramChannel:newSocket(SelectorProvider), NioDatagramChannel:<init>(DatagramChannel)),
		NioDatagramChannel:<init>(InternetProtocolFamily) to listOf(NioDatagramChannel:newSocket(SelectorProvider-InternetProtocolFamily), NioDatagramChannel:<init>(DatagramChannel)),
		NioDatagramChannel:<init>(SelectorProvider-InternetProtocolFamily) to listOf(NioDatagramChannel:newSocket(SelectorProvider-InternetProtocolFamily), NioDatagramChannel:<init>(DatagramChannel)),
		NioDatagramChannel:<init>(DatagramChannel) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), NioDatagramChannelConfig:<init>(NioDatagramChannel-DatagramChannel)),
		NioDatagramChannel:isActive() to listOf(NioDatagramChannel:javaChannel(), DatagramChannelConfig:getOption(ChannelOption), NioDatagramChannel:isRegistered()),
		NioDatagramChannel:isConnected() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioDatagramChannel:javaChannel()),
		NioDatagramChannel:localAddress0() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:remoteAddress0() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doBind(SocketAddress) to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioDatagramChannel:javaChannel(), NioDatagramChannel:javaChannel(), NioDatagramChannel:doClose(), NioDatagramChannel:doClose()),
		NioDatagramChannel:doDisconnect() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doClose() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doReadMessages(List) to listOf(NioDatagramChannel:javaChannel(), NioDatagramChannel:config(), NioDatagramChannel:unsafe(), AbstractNioChannel$NioUnsafe:recvBufAllocHandle(), DatagramChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:internalNioBuffer(int-int), ByteBuf:release(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), RecvByteBufAllocator$Handle:record(int), NioDatagramChannel:localAddress(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:release(), ByteBuf:release()),
		NioDatagramChannel:doWriteMessage(Object-ChannelOutboundBuffer) to listOf(AddressedEnvelope:recipient(), AddressedEnvelope:content(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:internalNioBuffer(int-int), NioDatagramChannel:javaChannel(), NioDatagramChannel:javaChannel()),
		NioDatagramChannel:filterOutboundMessage(Object) to listOf(DatagramPacket:content(), NioDatagramChannel:isSingleDirectBuffer(ByteBuf), NioDatagramChannel:newDirectBuffer(ReferenceCounted-ByteBuf), DatagramPacket:recipient(), DatagramPacket:<init>(ByteBuf-InetSocketAddress), NioDatagramChannel:isSingleDirectBuffer(ByteBuf), NioDatagramChannel:newDirectBuffer(ByteBuf), AddressedEnvelope:content(), AddressedEnvelope:content(), NioDatagramChannel:isSingleDirectBuffer(ByteBuf), NioDatagramChannel:newDirectBuffer(ReferenceCounted-ByteBuf), AddressedEnvelope:recipient(), DefaultAddressedEnvelope:<init>(Object-SocketAddress), StringUtil:simpleClassName(Object)),
		NioDatagramChannel:isSingleDirectBuffer(ByteBuf) to listOf(ByteBuf:isDirect(), ByteBuf:nioBufferCount()),
		NioDatagramChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioDatagramChannel:localAddress()),
		NioDatagramChannel:remoteAddress() to listOf(AbstractNioMessageChannel:remoteAddress(), NioDatagramChannel:remoteAddress()),
		NioDatagramChannel:joinGroup(InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:joinGroup(InetAddress-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetAddress-ChannelPromise) to listOf(NioDatagramChannel:localAddress(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(NioDatagramChannel:checkJavaVersion(), NioDatagramChannel:javaChannel(), NioDatagramChannel:javaChannel(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:leaveGroup(InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:leaveGroup(InetAddress-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetAddress-ChannelPromise) to listOf(NioDatagramChannel:localAddress(), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(NioDatagramChannel:checkJavaVersion(), ChannelPromise:setSuccess()),
		NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(NioDatagramChannel:checkJavaVersion(), ChannelPromise:setFailure(Throwable), ChannelPromise:setSuccess()),
		NioDatagramChannel:block(InetAddress-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise)),
		NioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise) to listOf(NioDatagramChannel:localAddress(), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:setReadPending(boolean) to listOf(AbstractNioMessageChannel:setReadPending(boolean)),
		NioDatagramChannel:config() to listOf(NioDatagramChannel:config()),
		NioDatagramChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class), StringUtil:simpleClassName(Class)),
		NioSocketChannel:newSocket(SelectorProvider) to listOf(ChannelException:<init>(String-Throwable)),
		NioSocketChannel:<init>() to listOf(NioSocketChannel:<init>(SelectorProvider)),
		NioSocketChannel:<init>(SelectorProvider) to listOf(NioSocketChannel:newSocket(SelectorProvider), NioSocketChannel:<init>(SocketChannel)),
		NioSocketChannel:<init>(SocketChannel) to listOf(NioSocketChannel:<init>(Channel-SocketChannel)),
		NioSocketChannel:<init>(Channel-SocketChannel) to listOf(AbstractNioByteChannel:<init>(Channel-SelectableChannel), NioSocketChannel$NioSocketChannelConfig:<init>(NioSocketChannel-NioSocketChannel-Socket-NioSocketChannel$1)),
		NioSocketChannel:parent() to listOf(AbstractNioByteChannel:parent(), NioSocketChannel:parent()),
		NioSocketChannel:javaChannel() to listOf(AbstractNioByteChannel:javaChannel(), NioSocketChannel:javaChannel()),
		NioSocketChannel:isActive() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:isInputShutdown() to listOf(AbstractNioByteChannel:isInputShutdown()),
		NioSocketChannel:localAddress() to listOf(AbstractNioByteChannel:localAddress(), NioSocketChannel:localAddress()),
		NioSocketChannel:remoteAddress() to listOf(AbstractNioByteChannel:remoteAddress(), NioSocketChannel:remoteAddress()),
		NioSocketChannel:isOutputShutdown() to listOf(NioSocketChannel:javaChannel(), NioSocketChannel:isActive()),
		NioSocketChannel:shutdownOutput() to listOf(NioSocketChannel:newPromise(), NioSocketChannel:shutdownOutput(ChannelPromise)),
		NioSocketChannel:shutdownOutput(ChannelPromise) to listOf(NioSocketChannel:unsafe(), NioSocketChannel$NioSocketChannelUnsafe:closeExecutor(), NioSocketChannel$1:<init>(NioSocketChannel-ChannelPromise), NioSocketChannel:eventLoop(), EventLoop:inEventLoop(), NioSocketChannel:shutdownOutput0(ChannelPromise), NioSocketChannel$2:<init>(NioSocketChannel-ChannelPromise), EventLoop:execute(Runnable)),
		NioSocketChannel:shutdownOutput0(ChannelPromise) to listOf(NioSocketChannel:javaChannel(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		NioSocketChannel:localAddress0() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:remoteAddress0() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doBind(SocketAddress) to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioSocketChannel:javaChannel(), NioSocketChannel:javaChannel(), NioSocketChannel:selectionKey(), NioSocketChannel:doClose(), NioSocketChannel:doClose()),
		NioSocketChannel:doFinishConnect() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doDisconnect() to listOf(NioSocketChannel:doClose()),
		NioSocketChannel:doClose() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doReadBytes(ByteBuf) to listOf(NioSocketChannel:javaChannel(), ByteBuf:writableBytes(), ByteBuf:writeBytes(ScatteringByteChannel-int)),
		NioSocketChannel:doWriteBytes(ByteBuf) to listOf(ByteBuf:readableBytes(), NioSocketChannel:javaChannel(), ByteBuf:readBytes(GatheringByteChannel-int)),
		NioSocketChannel:doWriteFileRegion(FileRegion) to listOf(FileRegion:transfered(), NioSocketChannel:javaChannel(), FileRegion:transferTo(WritableByteChannel-long)),
		NioSocketChannel:doWrite(ChannelOutboundBuffer) to listOf(ChannelOutboundBuffer:size(), NioSocketChannel:clearOpWrite(), ChannelOutboundBuffer:nioBuffers(), ChannelOutboundBuffer:nioBufferCount(), ChannelOutboundBuffer:nioBufferSize(), NioSocketChannel:javaChannel(), AbstractNioByteChannel:doWrite(ChannelOutboundBuffer), NioSocketChannel:config(), SocketChannelConfig:getWriteSpinCount(), NioSocketChannel:config(), SocketChannelConfig:getWriteSpinCount(), ChannelOutboundBuffer:removeBytes(long), NioSocketChannel:incompleteWrite(boolean)),
		NioSocketChannel:newUnsafe() to listOf(NioSocketChannel$NioSocketChannelUnsafe:<init>(NioSocketChannel-NioSocketChannel$1), NioSocketChannel:newUnsafe()),
		NioSocketChannel:config() to listOf(NioSocketChannel:config()),
		NioSocketChannel:access$100(NioSocketChannel-ChannelPromise) to listOf(NioSocketChannel:shutdownOutput0(ChannelPromise)),
		NioSocketChannel:access$300(NioSocketChannel-boolean) to listOf(NioSocketChannel:setReadPending(boolean)),
		NioSocketChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		NioSocketChannel$NioSocketChannelConfig:<init>(NioSocketChannel-NioSocketChannel-Socket) to listOf(DefaultSocketChannelConfig:<init>(SocketChannel-Socket)),
		NioSocketChannel$NioSocketChannelConfig:autoReadCleared() to listOf(NioSocketChannel:access$300(NioSocketChannel-boolean)),
		NioSocketChannel$NioSocketChannelConfig:<init>(NioSocketChannel-NioSocketChannel-Socket-NioSocketChannel$1) to listOf(NioSocketChannel$NioSocketChannelConfig:<init>(NioSocketChannel-NioSocketChannel-Socket)),
		NioSocketChannel$NioSocketChannelUnsafe:<init>(NioSocketChannel) to listOf(AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel)),
		NioSocketChannel$NioSocketChannelUnsafe:closeExecutor() to listOf(NioSocketChannel:config(), SocketChannelConfig:getSoLinger()),
		NioSocketChannel$NioSocketChannelUnsafe:<init>(NioSocketChannel-NioSocketChannel$1) to listOf(NioSocketChannel$NioSocketChannelUnsafe:<init>(NioSocketChannel)),
		NioDatagramChannelConfig:<init>(NioDatagramChannel-DatagramChannel) to listOf(DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket)),
		NioDatagramChannelConfig:getTimeToLive() to listOf(NioDatagramChannelConfig:getOption0(Object)),
		NioDatagramChannelConfig:setTimeToLive(int) to listOf(NioDatagramChannelConfig:setOption0(Object-Object)),
		NioDatagramChannelConfig:getInterface() to listOf(NioDatagramChannelConfig:getNetworkInterface()),
		NioDatagramChannelConfig:setInterface(InetAddress) to listOf(NioDatagramChannelConfig:setNetworkInterface(NetworkInterface), ChannelException:<init>(Throwable)),
		NioDatagramChannelConfig:getNetworkInterface() to listOf(NioDatagramChannelConfig:getOption0(Object)),
		NioDatagramChannelConfig:setNetworkInterface(NetworkInterface) to listOf(NioDatagramChannelConfig:setOption0(Object-Object)),
		NioDatagramChannelConfig:isLoopbackModeDisabled() to listOf(NioDatagramChannelConfig:getOption0(Object)),
		NioDatagramChannelConfig:setLoopbackModeDisabled(boolean) to listOf(NioDatagramChannelConfig:setOption0(Object-Object)),
		NioDatagramChannelConfig:setAutoRead(boolean) to listOf(DefaultDatagramChannelConfig:setAutoRead(boolean), NioDatagramChannelConfig:setAutoRead(boolean)),
		NioDatagramChannelConfig:autoReadCleared() to listOf(NioDatagramChannel:setReadPending(boolean)),
		NioDatagramChannelConfig:getOption0(Object) to listOf(PlatformDependent:javaVersion(), ChannelException:<init>(Throwable)),
		NioDatagramChannelConfig:setOption0(Object-Object) to listOf(PlatformDependent:javaVersion(), ChannelException:<init>(Throwable)),
		NioDatagramChannelConfig:<clinit>() to listOf(PlatformDependent:getClassLoader(Class)),
		ProtocolFamilyConverter:convert(InternetProtocolFamily) to listOf(InternetProtocolFamily:ordinal()),
		ChannelInputShutdownEvent:<clinit>() to listOf(ChannelInputShutdownEvent:<init>()),
		InternetProtocolFamily:values() to listOf(InternetProtocolFamily[]:clone()),
		InternetProtocolFamily:<clinit>() to listOf(InternetProtocolFamily:<init>(String-int), InternetProtocolFamily:<init>(String-int)),
		ChannelOption:valueOf(String) to listOf(ConstantPool:valueOf(String)),
		ChannelOption:valueOf(Class-String) to listOf(ConstantPool:valueOf(Class-String)),
		ChannelOption:exists(String) to listOf(ConstantPool:exists(String)),
		ChannelOption:newInstance(String) to listOf(ConstantPool:newInstance(String)),
		ChannelOption:<init>(int-String) to listOf(AbstractConstant:<init>(int-String)),
		ChannelOption:<init>(int-String-ChannelOption$1) to listOf(ChannelOption:<init>(int-String)),
		ChannelOption:<clinit>() to listOf(ChannelOption$1:<init>(), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String), ChannelOption:valueOf(String)),
		LocalChannel$5:run() to listOf(LocalChannel:access$000(LocalChannel), LocalChannel:access$400(LocalChannel-ChannelPipeline)),
		LocalChannel$6:<clinit>() to listOf(LocalChannel$State:values(), LocalChannel$State:ordinal(), LocalChannel$State:ordinal(), LocalChannel$State:ordinal()),
		LocalChannel$4:run() to listOf(LocalChannel:unsafe(), LocalChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		LocalChannel:<init>() to listOf(AbstractChannel:<init>(Channel), DefaultChannelConfig:<init>(Channel), LocalChannel$1:<init>(LocalChannel), LocalChannel$2:<init>(LocalChannel)),
		LocalChannel:<init>(LocalServerChannel-LocalChannel) to listOf(AbstractChannel:<init>(Channel), DefaultChannelConfig:<init>(Channel), LocalChannel$1:<init>(LocalChannel), LocalChannel$2:<init>(LocalChannel), LocalServerChannel:localAddress(), LocalChannel:localAddress()),
		LocalChannel:parent() to listOf(AbstractChannel:parent(), LocalChannel:parent()),
		LocalChannel:localAddress() to listOf(AbstractChannel:localAddress(), LocalChannel:localAddress()),
		LocalChannel:remoteAddress() to listOf(AbstractChannel:remoteAddress(), LocalChannel:remoteAddress()),
		LocalChannel:newUnsafe() to listOf(LocalChannel$LocalUnsafe:<init>(LocalChannel-LocalChannel$1)),
		LocalChannel:doRegister() to listOf(LocalChannel:parent(), LocalChannel:parent(), LocalChannel:parent(), LocalServerChannel:localAddress(), LocalChannel:eventLoop(), LocalChannel$3:<init>(LocalChannel-LocalChannel), EventLoop:execute(Runnable), LocalChannel:eventLoop(), EventLoop:unwrap(), SingleThreadEventLoop:addShutdownHook(Runnable)),
		LocalChannel:doBind(SocketAddress) to listOf(LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress)),
		LocalChannel:doDisconnect() to listOf(LocalChannel:doClose()),
		LocalChannel:doClose() to listOf(LocalChannel:parent(), LocalChannelRegistry:unregister(LocalAddress), LocalChannel:isActive(), LocalChannel:eventLoop(), EventLoop:inEventLoop(), LocalChannel:unsafe(), LocalChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), LocalChannel:eventLoop(), LocalChannel$4:<init>(LocalChannel-LocalChannel), EventLoop:execute(Runnable)),
		LocalChannel:doDeregister() to listOf(LocalChannel:eventLoop(), EventLoop:unwrap(), SingleThreadEventLoop:removeShutdownHook(Runnable)),
		LocalChannel:doBeginRead() to listOf(LocalChannel:pipeline(), InternalThreadLocalMap:get(), InternalThreadLocalMap:localChannelReaderStackDepth(), InternalThreadLocalMap:setLocalChannelReaderStackDepth(int), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), InternalThreadLocalMap:setLocalChannelReaderStackDepth(int), InternalThreadLocalMap:setLocalChannelReaderStackDepth(int), LocalChannel:eventLoop(), EventLoop:execute(Runnable)),
		LocalChannel:doWrite(ChannelOutboundBuffer) to listOf(LocalChannel$State:ordinal(), LocalChannel:pipeline(), LocalChannel:eventLoop(), LocalChannel:eventLoop(), ChannelOutboundBuffer:current(), ReferenceCountUtil:retain(Object), ChannelOutboundBuffer:remove(), LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline), ChannelOutboundBuffer:size(), ChannelOutboundBuffer:current(), ReferenceCountUtil:retain(Object), ChannelOutboundBuffer:remove(), LocalChannel$5:<init>(LocalChannel-LocalChannel-Object[]-ChannelPipeline), EventLoop:execute(Runnable)),
		LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline) to listOf(ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete()),
		LocalChannel:access$400(LocalChannel-ChannelPipeline) to listOf(LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline)),
		LocalChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		LocalServerChannel:<init>() to listOf(AbstractServerChannel:<init>(), DefaultChannelConfig:<init>(Channel), LocalServerChannel$1:<init>(LocalServerChannel)),
		LocalServerChannel:localAddress() to listOf(AbstractServerChannel:localAddress(), LocalServerChannel:localAddress()),
		LocalServerChannel:remoteAddress() to listOf(AbstractServerChannel:remoteAddress(), LocalServerChannel:remoteAddress()),
		LocalServerChannel:doRegister() to listOf(LocalServerChannel:eventLoop(), EventLoop:unwrap(), SingleThreadEventLoop:addShutdownHook(Runnable)),
		LocalServerChannel:doBind(SocketAddress) to listOf(LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress)),
		LocalServerChannel:doClose() to listOf(LocalChannelRegistry:unregister(LocalAddress)),
		LocalServerChannel:doDeregister() to listOf(LocalServerChannel:eventLoop(), EventLoop:unwrap(), SingleThreadEventLoop:removeShutdownHook(Runnable)),
		LocalServerChannel:doBeginRead() to listOf(LocalServerChannel:pipeline(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete()),
		LocalServerChannel:serve(LocalChannel) to listOf(LocalChannel:<init>(LocalServerChannel-LocalChannel), LocalServerChannel:eventLoop(), EventLoop:inEventLoop(), LocalServerChannel:serve0(LocalChannel), LocalServerChannel:eventLoop(), LocalServerChannel$2:<init>(LocalServerChannel-LocalChannel), EventLoop:execute(Runnable)),
		LocalServerChannel:serve0(LocalChannel) to listOf(LocalServerChannel:pipeline(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete()),
		LocalServerChannel:access$000(LocalServerChannel-LocalChannel) to listOf(LocalServerChannel:serve0(LocalChannel)),
		LocalAddress:compareTo(Object) to listOf(LocalAddress:compareTo(LocalAddress)),
		LocalAddress:<clinit>() to listOf(LocalAddress:<init>(String)),
		LocalChannel$State:values() to listOf(LocalChannel$State[]:clone()),
		LocalChannel$State:<clinit>() to listOf(LocalChannel$State:<init>(String-int), LocalChannel$State:<init>(String-int), LocalChannel$State:<init>(String-int), LocalChannel$State:<init>(String-int)),
		LocalChannel$3:run() to listOf(LocalChannel:access$202(LocalChannel-boolean), LocalChannel:pipeline(), ChannelPipeline:fireChannelActive(), LocalChannel:access$300(LocalChannel), ChannelPromise:setSuccess()),
		LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress) to listOf(ChannelException:<init>(String), StringUtil:simpleClassName(Object), ChannelException:<init>(String), LocalAddress:equals(Object), LocalAddress:<init>(Channel), ChannelException:<init>(String)),
		LocalChannelRegistry:<clinit>() to listOf(PlatformDependent:newConcurrentHashMap()),
		LocalChannel$2:run() to listOf(LocalChannel:unsafe(), LocalChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		LocalChannel$LocalUnsafe:<init>(LocalChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		LocalChannel$LocalUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setUncancellable(), LocalChannel$LocalUnsafe:ensureOpen(ChannelPromise), LocalChannel:access$500(LocalChannel), LocalChannel$LocalUnsafe:safeSetFailure(ChannelPromise-Throwable), LocalChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), LocalChannel:access$300(LocalChannel), LocalChannel:access$302(LocalChannel-ChannelPromise), LocalChannel:access$500(LocalChannel), LocalAddress:<init>(Channel), LocalChannel:doBind(SocketAddress), LocalChannel$LocalUnsafe:safeSetFailure(ChannelPromise-Throwable), LocalChannel$LocalUnsafe:voidPromise(), LocalChannel$LocalUnsafe:close(ChannelPromise), LocalChannelRegistry:get(SocketAddress), ChannelException:<init>(String), LocalChannel$LocalUnsafe:safeSetFailure(ChannelPromise-Throwable), LocalChannel$LocalUnsafe:voidPromise(), LocalChannel$LocalUnsafe:close(ChannelPromise), LocalServerChannel:serve(LocalChannel), LocalChannel:access$602(LocalChannel-LocalChannel)),
		LocalChannel$LocalUnsafe:<init>(LocalChannel-LocalChannel$1) to listOf(LocalChannel$LocalUnsafe:<init>(LocalChannel)),
		LocalServerChannel$1:run() to listOf(LocalServerChannel:unsafe(), LocalServerChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		LocalServerChannel$2:run() to listOf(LocalServerChannel:access$000(LocalServerChannel-LocalChannel)),
		LocalChannel$1:run() to listOf(LocalChannel:pipeline(), LocalChannel:access$000(LocalChannel), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete()),
		FixedRecvByteBufAllocator:<init>(int) to listOf(FixedRecvByteBufAllocator$HandleImpl:<init>(int)),
		ServerBootstrap$ServerBootstrapAcceptor$2:run() to listOf(ChannelConfig:setAutoRead(boolean)),
		ServerBootstrap$ServerBootstrapAcceptor$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), ServerBootstrap$ServerBootstrapAcceptor:access$100(Channel-Throwable)),
		ServerBootstrap$ServerBootstrapAcceptor$1:operationComplete(Future) to listOf(ServerBootstrap$ServerBootstrapAcceptor$1:operationComplete(ChannelFuture)),
		ServerBootstrap$1:<init>(ServerBootstrap-EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]) to listOf(ChannelInitializer:<init>()),
		ServerBootstrap$1:initChannel(Channel) to listOf(Channel:pipeline(), ServerBootstrap$ServerBootstrapAcceptor:<init>(EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), ChannelPipeline:addLast(ChannelHandler[])),
		Bootstrap$1:operationComplete(Future) to listOf(Future:cause(), Channel:close(), Future:cause(), ChannelPromise:setFailure(Throwable), Future:getNow(), Bootstrap:access$000(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise)),
		AbstractBootstrap$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:cause(), AbstractBootstrap$PendingRegistrationPromise:setFailure(Throwable), Channel:eventLoop(), AbstractBootstrap$PendingRegistrationPromise:access$102(AbstractBootstrap$PendingRegistrationPromise-EventExecutor), AbstractBootstrap:access$200(ChannelFuture-Channel-SocketAddress-ChannelPromise)),
		AbstractBootstrap$1:operationComplete(Future) to listOf(AbstractBootstrap$1:operationComplete(ChannelFuture)),
		AbstractBootstrap$2:run() to listOf(ChannelFuture:isSuccess(), Channel:bind(SocketAddress-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		Bootstrap$3:run() to listOf(ChannelFuture:isSuccess(), Channel:connect(SocketAddress-ChannelPromise), Channel:connect(SocketAddress-SocketAddress-ChannelPromise), ChannelPromise:addListener(GenericFutureListener), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		AbstractBootstrap$PendingRegistrationPromise:<init>(Channel) to listOf(DefaultChannelPromise:<init>(Channel)),
		AbstractBootstrap$PendingRegistrationPromise:<init>(Channel-AbstractBootstrap$1) to listOf(AbstractBootstrap$PendingRegistrationPromise:<init>(Channel)),
		Bootstrap:<init>() to listOf(AbstractBootstrap:<init>()),
		Bootstrap:<init>(Bootstrap) to listOf(AbstractBootstrap:<init>(AbstractBootstrap)),
		Bootstrap:connect() to listOf(Bootstrap:validate(), Bootstrap:localAddress(), Bootstrap:doResolveAndConnect(SocketAddress-SocketAddress)),
		Bootstrap:connect(String-int) to listOf(Bootstrap:connect(SocketAddress)),
		Bootstrap:connect(InetAddress-int) to listOf(Bootstrap:connect(SocketAddress)),
		Bootstrap:connect(SocketAddress) to listOf(Bootstrap:validate(), Bootstrap:localAddress(), Bootstrap:doResolveAndConnect(SocketAddress-SocketAddress)),
		Bootstrap:connect(SocketAddress-SocketAddress) to listOf(Bootstrap:validate(), Bootstrap:doResolveAndConnect(SocketAddress-SocketAddress)),
		Bootstrap:doResolveAndConnect(SocketAddress-SocketAddress) to listOf(Bootstrap:initAndRegister(), ChannelFuture:cause(), ChannelFuture:channel(), Channel:eventLoop(), NameResolverGroup:getResolver(EventExecutor), NameResolver:isSupported(SocketAddress), NameResolver:isResolved(SocketAddress), Channel:newPromise(), Bootstrap:doConnect(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), NameResolver:resolve(SocketAddress), Future:cause(), Channel:close(), Channel:newFailedFuture(Throwable), Future:isDone(), Future:getNow(), Channel:newPromise(), Bootstrap:doConnect(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), Channel:newPromise(), Bootstrap$1:<init>(Bootstrap-Channel-ChannelPromise-SocketAddress-ChannelFuture), Future:addListener(GenericFutureListener)),
		Bootstrap:doConnect(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise) to listOf(ChannelFuture:isDone(), Bootstrap:doConnect0(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), Bootstrap$2:<init>(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		Bootstrap:doConnect0(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise) to listOf(ChannelPromise:channel(), Channel:eventLoop(), Bootstrap$3:<init>(ChannelFuture-SocketAddress-Channel-SocketAddress-ChannelPromise), EventLoop:execute(Runnable)),
		Bootstrap:init(Channel) to listOf(Channel:pipeline(), Bootstrap:handler(), ChannelPipeline:addLast(ChannelHandler[]), Bootstrap:options(), Channel:config(), ChannelConfig:setOption(ChannelOption-Object), InternalLogger:warn(String), InternalLogger:warn(String-Throwable), Bootstrap:attrs(), Channel:attr(AttributeKey), Attribute:set(Object)),
		Bootstrap:validate() to listOf(AbstractBootstrap:validate(), Bootstrap:handler(), Bootstrap:validate()),
		Bootstrap:clone() to listOf(Bootstrap:<init>(Bootstrap), Bootstrap:clone(), Bootstrap:clone()),
		Bootstrap:toString() to listOf(AbstractBootstrap:toString(), AbstractBootstrap:toString()),
		Bootstrap:access$000(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise) to listOf(Bootstrap:doConnect(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise)),
		Bootstrap:access$100(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise) to listOf(Bootstrap:doConnect0(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise)),
		Bootstrap:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		Bootstrap$2:operationComplete(ChannelFuture) to listOf(Bootstrap:access$100(SocketAddress-SocketAddress-ChannelFuture-ChannelPromise)),
		Bootstrap$2:operationComplete(Future) to listOf(Bootstrap$2:operationComplete(ChannelFuture)),
		ServerBootstrap:<init>() to listOf(AbstractBootstrap:<init>()),
		ServerBootstrap:<init>(ServerBootstrap) to listOf(AbstractBootstrap:<init>(AbstractBootstrap)),
		ServerBootstrap:group(EventLoopGroup) to listOf(ServerBootstrap:group(EventLoopGroup-EventLoopGroup), ServerBootstrap:group(EventLoopGroup)),
		ServerBootstrap:group(EventLoopGroup-EventLoopGroup) to listOf(AbstractBootstrap:group(EventLoopGroup)),
		ServerBootstrap:init(Channel) to listOf(ServerBootstrap:options(), Channel:config(), ChannelConfig:setOptions(Map), ServerBootstrap:attrs(), Channel:attr(AttributeKey), Attribute:set(Object), Channel:pipeline(), ServerBootstrap:handler(), ServerBootstrap:handler(), ChannelPipeline:addLast(ChannelHandler[]), ServerBootstrap:newOptionArray(int), ServerBootstrap:newAttrArray(int), ServerBootstrap$1:<init>(ServerBootstrap-EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), ChannelPipeline:addLast(ChannelHandler[])),
		ServerBootstrap:validate() to listOf(AbstractBootstrap:validate(), InternalLogger:warn(String), ServerBootstrap:group(), ServerBootstrap:validate()),
		ServerBootstrap:clone() to listOf(ServerBootstrap:<init>(ServerBootstrap), ServerBootstrap:clone(), ServerBootstrap:clone()),
		ServerBootstrap:toString() to listOf(AbstractBootstrap:toString(), StringUtil:simpleClassName(Object)),
		ServerBootstrap:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractBootstrap:channel(Class) to listOf(ReflectiveChannelFactory:<init>(Class), AbstractBootstrap:channelFactory(ChannelFactory)),
		AbstractBootstrap:channelFactory(ChannelFactory) to listOf(AbstractBootstrap:channelFactory(ChannelFactory)),
		AbstractBootstrap:localAddress(int) to listOf(AbstractBootstrap:localAddress(SocketAddress)),
		AbstractBootstrap:localAddress(String-int) to listOf(AbstractBootstrap:localAddress(SocketAddress)),
		AbstractBootstrap:localAddress(InetAddress-int) to listOf(AbstractBootstrap:localAddress(SocketAddress)),
		AbstractBootstrap:register() to listOf(AbstractBootstrap:validate(), AbstractBootstrap:initAndRegister()),
		AbstractBootstrap:bind() to listOf(AbstractBootstrap:validate(), AbstractBootstrap:doBind(SocketAddress)),
		AbstractBootstrap:bind(int) to listOf(AbstractBootstrap:bind(SocketAddress)),
		AbstractBootstrap:bind(String-int) to listOf(AbstractBootstrap:bind(SocketAddress)),
		AbstractBootstrap:bind(InetAddress-int) to listOf(AbstractBootstrap:bind(SocketAddress)),
		AbstractBootstrap:bind(SocketAddress) to listOf(AbstractBootstrap:validate(), AbstractBootstrap:doBind(SocketAddress)),
		AbstractBootstrap:doBind(SocketAddress) to listOf(AbstractBootstrap:initAndRegister(), ChannelFuture:channel(), ChannelFuture:cause(), ChannelFuture:isDone(), Channel:newPromise(), AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise), AbstractBootstrap$PendingRegistrationPromise:<init>(Channel-AbstractBootstrap$1), AbstractBootstrap$1:<init>(AbstractBootstrap-AbstractBootstrap$PendingRegistrationPromise-Channel-ChannelFuture-SocketAddress), ChannelFuture:addListener(GenericFutureListener)),
		AbstractBootstrap:initAndRegister() to listOf(AbstractBootstrap:channelFactory(), ChannelFactory:newChannel(), AbstractBootstrap:init(Channel), Channel:unsafe(), Channel$Unsafe:closeForcibly(), DefaultChannelPromise:<init>(Channel-EventExecutor), DefaultChannelPromise:setFailure(Throwable), AbstractBootstrap:group(), EventLoopGroup:register(Channel), ChannelFuture:cause(), Channel:isRegistered(), Channel:close(), Channel:unsafe(), Channel$Unsafe:closeForcibly()),
		AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise) to listOf(Channel:eventLoop(), AbstractBootstrap$2:<init>(ChannelFuture-Channel-SocketAddress-ChannelPromise), EventLoop:execute(Runnable)),
		AbstractBootstrap:toString() to listOf(StringUtil:simpleClassName(Object), StringUtil:simpleClassName(Object)),
		AbstractBootstrap:clone() to listOf(AbstractBootstrap:clone()),
		AbstractBootstrap:access$200(ChannelFuture-Channel-SocketAddress-ChannelPromise) to listOf(AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise)),
		ServerBootstrap$ServerBootstrapAcceptor:<init>(EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]) to listOf(ChannelHandlerAdapter:<init>()),
		ServerBootstrap$ServerBootstrapAcceptor:channelRead(ChannelHandlerContext-Object) to listOf(Channel:pipeline(), ChannelPipeline:addLast(ChannelHandler[]), Channel:config(), ChannelConfig:setOption(ChannelOption-Object), ServerBootstrap:access$000(), InternalLogger:warn(String), ServerBootstrap:access$000(), InternalLogger:warn(String-Throwable), Channel:attr(AttributeKey), Attribute:set(Object), EventLoopGroup:register(Channel), ServerBootstrap$ServerBootstrapAcceptor$1:<init>(ServerBootstrap$ServerBootstrapAcceptor-Channel), ChannelFuture:addListener(GenericFutureListener), ServerBootstrap$ServerBootstrapAcceptor:forceClose(Channel-Throwable)),
		ServerBootstrap$ServerBootstrapAcceptor:forceClose(Channel-Throwable) to listOf(Channel:unsafe(), Channel$Unsafe:closeForcibly(), ServerBootstrap:access$000(), InternalLogger:warn(String-Throwable)),
		ServerBootstrap$ServerBootstrapAcceptor:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), ChannelConfig:setAutoRead(boolean), ChannelHandlerContext:channel(), Channel:eventLoop(), ServerBootstrap$ServerBootstrapAcceptor$2:<init>(ServerBootstrap$ServerBootstrapAcceptor-ChannelConfig), EventLoop:schedule(Runnable-long-TimeUnit), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		ServerBootstrap$ServerBootstrapAcceptor:access$100(Channel-Throwable) to listOf(ServerBootstrap$ServerBootstrapAcceptor:forceClose(Channel-Throwable)),
		NoopNameResolverGroup:<init>() to listOf(NameResolverGroup:<init>()),
		NoopNameResolverGroup:newResolver(EventExecutor) to listOf(NoopNameResolver:<init>(EventExecutor)),
		NoopNameResolverGroup:<clinit>() to listOf(NoopNameResolverGroup:<init>()),
		DefaultNameResolver:<init>(EventExecutor) to listOf(SimpleNameResolver:<init>(EventExecutor)),
		DefaultNameResolver:doResolve(InetSocketAddress-Promise) to listOf(Promise:setSuccess(Object), Promise:setFailure(Throwable)),
		DefaultNameResolver:doResolve(SocketAddress-Promise) to listOf(DefaultNameResolver:doResolve(InetSocketAddress-Promise)),
		DefaultNameResolver:doIsResolved(SocketAddress) to listOf(DefaultNameResolver:doIsResolved(InetSocketAddress)),
		SimpleNameResolver:<init>(EventExecutor) to listOf(TypeParameterMatcher:find(Object-Class-String)),
		SimpleNameResolver:<init>(EventExecutor-Class) to listOf(TypeParameterMatcher:get(Class)),
		SimpleNameResolver:isSupported(SocketAddress) to listOf(TypeParameterMatcher:match(Object)),
		SimpleNameResolver:isResolved(SocketAddress) to listOf(SimpleNameResolver:isSupported(SocketAddress), SimpleNameResolver:doIsResolved(SocketAddress)),
		SimpleNameResolver:resolve(String-int) to listOf(SimpleNameResolver:resolve(SocketAddress)),
		SimpleNameResolver:resolve(String-int-Promise) to listOf(SimpleNameResolver:resolve(SocketAddress-Promise)),
		SimpleNameResolver:resolve(SocketAddress) to listOf(SimpleNameResolver:isSupported(SocketAddress), SimpleNameResolver:executor(), EventExecutor:newFailedFuture(Throwable), SimpleNameResolver:isResolved(SocketAddress), EventExecutor:newSucceededFuture(Object), SimpleNameResolver:executor(), EventExecutor:newPromise(), SimpleNameResolver:doResolve(SocketAddress-Promise), SimpleNameResolver:executor(), EventExecutor:newFailedFuture(Throwable)),
		SimpleNameResolver:resolve(SocketAddress-Promise) to listOf(SimpleNameResolver:isSupported(SocketAddress), Promise:setFailure(Throwable), SimpleNameResolver:isResolved(SocketAddress), Promise:setSuccess(Object), SimpleNameResolver:doResolve(SocketAddress-Promise), Promise:setFailure(Throwable)),
		DefaultNameResolverGroup:<init>() to listOf(NameResolverGroup:<init>()),
		DefaultNameResolverGroup:newResolver(EventExecutor) to listOf(DefaultNameResolver:<init>(EventExecutor)),
		DefaultNameResolverGroup:<clinit>() to listOf(DefaultNameResolverGroup:<init>()),
		NameResolverGroup:getResolver(EventExecutor) to listOf(EventExecutor:isShuttingDown(), EventExecutor:unwrap(), NameResolverGroup:getResolver0(EventExecutor)),
		NameResolverGroup:getResolver0(EventExecutor) to listOf(NameResolverGroup:newResolver(EventExecutor), EventExecutor:terminationFuture(), NameResolverGroup$1:<init>(NameResolverGroup-EventExecutor-NameResolver), Future:addListener(GenericFutureListener)),
		NameResolverGroup:close() to listOf(NameResolver:close(), InternalLogger:warn(String-Throwable)),
		NameResolverGroup:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		NameResolverGroup$1:operationComplete(Future) to listOf(NameResolverGroup:access$000(NameResolverGroup), NameResolver:close()),
		NoopNameResolver:<init>(EventExecutor) to listOf(SimpleNameResolver:<init>(EventExecutor)),
		NoopNameResolver:doResolve(SocketAddress-Promise) to listOf(Promise:setSuccess(Object)),
		DnsQueryContext:<init>(DnsNameResolver-Iterable-DnsQuestion-Promise) to listOf(DnsQueryContext:allocateId(), DnsNameResolver:isRecursionDesired(), DnsNameResolver:maxTriesPerQuery(), DnsNameResolver:maxPayloadSizeClass(), DnsResource:<init>(String-DnsType-DnsClass-long-ByteBuf)),
		DnsQueryContext:allocateId() to listOf(ThreadLocalRandom:current(), ThreadLocalRandom:nextInt(int)),
		DnsQueryContext:query() to listOf(DnsQueryContext:cache(DnsQuestion-Throwable), Promise:tryFailure(Throwable), DnsQuery:<init>(int-InetSocketAddress), DnsQuery:addQuestion(DnsQuestion), DnsQuery:header(), DnsQueryHeader:setRecursionDesired(boolean), DnsQuery:addAdditionalResource(DnsResource), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object[]), DnsQueryContext:sendQuery(DnsQuery-InetSocketAddress)),
		DnsQueryContext:sendQuery(DnsQuery-InetSocketAddress) to listOf(ChannelFuture:isDone(), DnsQueryContext:writeQuery(DnsQuery-InetSocketAddress), DnsQueryContext$1:<init>(DnsQueryContext-DnsQuery-InetSocketAddress), ChannelFuture:addListener(GenericFutureListener)),
		DnsQueryContext:writeQuery(DnsQuery-InetSocketAddress) to listOf(DatagramChannel:writeAndFlush(Object), ChannelFuture:isDone(), DnsQueryContext:onQueryWriteCompletion(ChannelFuture-InetSocketAddress), DnsQueryContext$2:<init>(DnsQueryContext-ChannelFuture-InetSocketAddress), ChannelFuture:addListener(GenericFutureListener)),
		DnsQueryContext:onQueryWriteCompletion(ChannelFuture-InetSocketAddress) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), DnsQueryContext:retry(InetSocketAddress-String), DnsNameResolver:queryTimeoutMillis(), DatagramChannel:eventLoop(), DnsQueryContext$3:<init>(DnsQueryContext-InetSocketAddress-long), EventLoop:schedule(Runnable-long-TimeUnit)),
		DnsQueryContext:retry(InetSocketAddress-String) to listOf(Promise:isCancelled(), DnsQueryContext:query()),
		DnsQueryContext:cache(DnsQuestion-Throwable) to listOf(DnsNameResolver:negativeTtl(), DnsNameResolver$DnsCacheEntry:<init>(Throwable), DnsNameResolver:cache(DnsQuestion-DnsNameResolver$DnsCacheEntry-long)),
		DnsQueryContext:access$000(DnsQueryContext-DnsQuery-InetSocketAddress) to listOf(DnsQueryContext:writeQuery(DnsQuery-InetSocketAddress)),
		DnsQueryContext:access$200(DnsQueryContext-ChannelFuture-InetSocketAddress) to listOf(DnsQueryContext:onQueryWriteCompletion(ChannelFuture-InetSocketAddress)),
		DnsQueryContext:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		DnsServerAddresses:sequential(Iterable) to listOf(DnsServerAddresses:sanitize(Iterable), DnsServerAddresses:sequential0(InetSocketAddress[])),
		DnsServerAddresses:sequential(InetSocketAddress[]) to listOf(DnsServerAddresses:sanitize(InetSocketAddress[]), DnsServerAddresses:sequential0(InetSocketAddress[])),
		DnsServerAddresses:sequential0(InetSocketAddress[]) to listOf(DnsServerAddresses$1:<init>(InetSocketAddress[])),
		DnsServerAddresses:shuffled(Iterable) to listOf(DnsServerAddresses:sanitize(Iterable), DnsServerAddresses:shuffled0(InetSocketAddress[])),
		DnsServerAddresses:shuffled(InetSocketAddress[]) to listOf(DnsServerAddresses:sanitize(InetSocketAddress[]), DnsServerAddresses:shuffled0(InetSocketAddress[])),
		DnsServerAddresses:shuffled0(InetSocketAddress[]) to listOf(DnsServerAddresses:singleton(InetSocketAddress), DnsServerAddresses$2:<init>(InetSocketAddress[])),
		DnsServerAddresses:rotational(Iterable) to listOf(DnsServerAddresses:sanitize(Iterable), DnsServerAddresses:rotational0(InetSocketAddress[])),
		DnsServerAddresses:rotational(InetSocketAddress[]) to listOf(DnsServerAddresses:sanitize(InetSocketAddress[]), DnsServerAddresses:rotational0(InetSocketAddress[])),
		DnsServerAddresses:rotational0(InetSocketAddress[]) to listOf(DnsServerAddresses$RotationalAddresses:<init>(InetSocketAddress[])),
		DnsServerAddresses:singleton(InetSocketAddress) to listOf(DnsServerAddresses$3:<init>(InetSocketAddress)),
		DnsServerAddresses:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Object)),
		DnsServerAddresses$ShuffledAddressIterator:<init>(InetSocketAddress[]) to listOf(DnsServerAddresses$ShuffledAddressIterator:shuffle()),
		DnsServerAddresses$ShuffledAddressIterator:shuffle() to listOf(ThreadLocalRandom:current()),
		DnsServerAddresses$ShuffledAddressIterator:next() to listOf(DnsServerAddresses$ShuffledAddressIterator:shuffle(), DnsServerAddresses$ShuffledAddressIterator:next()),
		DnsNameResolverGroup:<init>(Class-InetSocketAddress) to listOf(DnsNameResolverGroup:<init>(Class-InetSocketAddress-InetSocketAddress)),
		DnsNameResolverGroup:<init>(Class-InetSocketAddress-InetSocketAddress) to listOf(ReflectiveChannelFactory:<init>(Class), DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-InetSocketAddress)),
		DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress) to listOf(DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-InetSocketAddress)),
		DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-InetSocketAddress) to listOf(DnsServerAddresses:singleton(InetSocketAddress), DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-Iterable)),
		DnsNameResolverGroup:<init>(Class-Iterable) to listOf(DnsNameResolverGroup:<init>(Class-InetSocketAddress-Iterable)),
		DnsNameResolverGroup:<init>(Class-InetSocketAddress-Iterable) to listOf(ReflectiveChannelFactory:<init>(Class), DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-Iterable)),
		DnsNameResolverGroup:<init>(ChannelFactory-Iterable) to listOf(DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-Iterable)),
		DnsNameResolverGroup:<init>(ChannelFactory-InetSocketAddress-Iterable) to listOf(NameResolverGroup:<init>()),
		DnsNameResolverGroup:newResolver(EventExecutor) to listOf(StringUtil:simpleClassName(Object), StringUtil:simpleClassName(Class), DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-Iterable)),
		DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress) to listOf(DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress-InetSocketAddress)),
		DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress-InetSocketAddress) to listOf(ReflectiveChannelFactory:<init>(Class), DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-InetSocketAddress)),
		DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress) to listOf(DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-InetSocketAddress)),
		DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-InetSocketAddress) to listOf(DnsServerAddresses:singleton(InetSocketAddress), DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-Iterable)),
		DnsNameResolver:<init>(EventLoop-Class-Iterable) to listOf(DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress-Iterable)),
		DnsNameResolver:<init>(EventLoop-Class-InetSocketAddress-Iterable) to listOf(ReflectiveChannelFactory:<init>(Class), DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-Iterable)),
		DnsNameResolver:<init>(EventLoop-ChannelFactory-Iterable) to listOf(DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-Iterable)),
		DnsNameResolver:<init>(EventLoop-ChannelFactory-InetSocketAddress-Iterable) to listOf(SimpleNameResolver:<init>(EventExecutor), PlatformDependent:newConcurrentHashMap(), DnsNameResolver$DnsResponseHandler:<init>(DnsNameResolver-DnsNameResolver$1), DnsNameResolver:newChannel(ChannelFactory-InetSocketAddress), ChannelFuture:channel(), DnsNameResolver:setMaxPayloadSize(int)),
		DnsNameResolver:newChannel(ChannelFactory-InetSocketAddress) to listOf(Bootstrap:<init>(), DnsNameResolver:executor(), Bootstrap:group(EventLoopGroup), Bootstrap:channelFactory(ChannelFactory), DnsNameResolver$1:<init>(DnsNameResolver), Bootstrap:handler(ChannelHandler), Bootstrap:bind(SocketAddress), ChannelFuture:channel(), Channel:closeFuture(), DnsNameResolver$2:<init>(DnsNameResolver), ChannelFuture:addListener(GenericFutureListener)),
		DnsNameResolver:setResolveAddressTypes(InternetProtocolFamily[]) to listOf(InternetProtocolFamily:values()),
		DnsNameResolver:setResolveAddressTypes(Iterable) to listOf(InternetProtocolFamily:values()),
		DnsNameResolver:setMaxPayloadSize(int) to listOf(DnsClass:valueOf(int), DatagramChannel:config(), FixedRecvByteBufAllocator:<init>(int), DatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DnsNameResolver:clearCache() to listOf(DnsNameResolver$DnsCacheEntry:release()),
		DnsNameResolver:clearCache(DnsQuestion) to listOf(DnsNameResolver$DnsCacheEntry:release()),
		DnsNameResolver:close() to listOf(DatagramChannel:close()),
		DnsNameResolver:executor() to listOf(SimpleNameResolver:executor(), DnsNameResolver:executor()),
		DnsNameResolver:doResolve(InetSocketAddress-Promise) to listOf(DnsNameResolver:hostname(InetSocketAddress), DnsNameResolverContext:<init>(DnsNameResolver-String-int-Promise), DnsNameResolverContext:resolve()),
		DnsNameResolver:hostname(InetSocketAddress) to listOf(PlatformDependent:javaVersion()),
		DnsNameResolver:query(DnsQuestion) to listOf(DnsNameResolver:query(Iterable-DnsQuestion)),
		DnsNameResolver:query(DnsQuestion-Promise) to listOf(DnsNameResolver:query(Iterable-DnsQuestion-Promise)),
		DnsNameResolver:query(Iterable-DnsQuestion) to listOf(DatagramChannel:eventLoop(), DnsResponse:retain(), EventLoop:newSucceededFuture(Object), EventLoop:newFailedFuture(Throwable), EventLoop:newPromise(), DnsNameResolver:query0(Iterable-DnsQuestion-Promise)),
		DnsNameResolver:query(Iterable-DnsQuestion-Promise) to listOf(DnsResponse:retain(), Promise:setSuccess(Object), Promise:setFailure(Throwable), DnsNameResolver:query0(Iterable-DnsQuestion-Promise)),
		DnsNameResolver:query0(Iterable-DnsQuestion-Promise) to listOf(DnsQueryContext:<init>(DnsNameResolver-Iterable-DnsQuestion-Promise), DnsQueryContext:query(), Promise:setFailure(Throwable)),
		DnsNameResolver:cache(DnsQuestion-DnsNameResolver$DnsCacheEntry-long) to listOf(DnsNameResolver$DnsCacheEntry:release(), DatagramChannel:eventLoop(), DnsNameResolver$3:<init>(DnsNameResolver-DnsQuestion), EventLoop:schedule(Runnable-long-TimeUnit), DnsNameResolver:clearCache(DnsQuestion), DnsNameResolver$DnsCacheEntry:release(), DnsNameResolver:clearCache(DnsQuestion), DnsNameResolver$DnsCacheEntry:release()),
		DnsNameResolver:doResolve(SocketAddress-Promise) to listOf(DnsNameResolver:doResolve(InetSocketAddress-Promise)),
		DnsNameResolver:doIsResolved(SocketAddress) to listOf(DnsNameResolver:doIsResolved(InetSocketAddress)),
		DnsNameResolver:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:get(String), InternalLogger:debug(String), InternalLogger:debug(String), DnsResponseDecoder:<init>(), DnsQueryEncoder:<init>()),
		DnsNameResolver$2:operationComplete(ChannelFuture) to listOf(DnsNameResolver:clearCache()),
		DnsNameResolver$2:operationComplete(Future) to listOf(DnsNameResolver$2:operationComplete(ChannelFuture)),
		DnsServerAddresses$3$1:next() to listOf(DnsServerAddresses$3$1:next()),
		DnsServerAddresses$2:iterator() to listOf(DnsServerAddresses$ShuffledAddressIterator:<init>(InetSocketAddress[])),
		DnsNameResolver$DnsResponseHandler:<init>(DnsNameResolver) to listOf(ChannelHandlerAdapter:<init>()),
		DnsNameResolver$DnsResponseHandler:channelRead(ChannelHandlerContext-Object) to listOf(DnsResponse:header(), DnsResponseHeader:id(), DnsNameResolver:access$400(), InternalLogger:isDebugEnabled(), DnsNameResolver:access$400(), DnsResponse:sender(), InternalLogger:debug(String-Object[]), DnsNameResolver:access$400(), InternalLogger:isWarnEnabled(), DnsNameResolver:access$400(), InternalLogger:warn(String-Object), ReferenceCountUtil:safeRelease(Object), DnsResponse:questions(), DnsNameResolver:access$400(), InternalLogger:warn(String-Object), ReferenceCountUtil:safeRelease(Object), DnsQueryContext:question(), DnsQuestion:equals(Object), DnsNameResolver:access$400(), InternalLogger:warn(String-Object), ReferenceCountUtil:safeRelease(Object), DnsQueryContext:timeoutFuture(), ScheduledFuture:cancel(boolean), DnsResponse:header(), DnsResponseHeader:responseCode(), DnsNameResolver$DnsResponseHandler:cache(DnsQuestion-DnsResponse), DnsQueryContext:promise(), Promise:setUncancellable(), DnsResponse:retain(), Promise:setSuccess(Object), DnsResponse:sender(), DnsResponse:header(), DnsResponseHeader:responseCode(), DnsResponse:answers(), DnsResponse:authorityResources(), DnsQueryContext:retry(InetSocketAddress-String), ReferenceCountUtil:safeRelease(Object), ReferenceCountUtil:safeRelease(Object)),
		DnsNameResolver$DnsResponseHandler:cache(DnsQuestion-DnsResponse) to listOf(DnsNameResolver:maxTtl(), DnsResponse:answers(), DnsResource:timeToLive(), DnsNameResolver:minTtl(), DnsNameResolver$DnsCacheEntry:<init>(DnsResponse), DnsNameResolver:cache(DnsQuestion-DnsNameResolver$DnsCacheEntry-long)),
		DnsNameResolver$DnsResponseHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(DnsNameResolver:access$400(), InternalLogger:warn(String-Throwable)),
		DnsNameResolver$DnsResponseHandler:<init>(DnsNameResolver-DnsNameResolver$1) to listOf(DnsNameResolver$DnsResponseHandler:<init>(DnsNameResolver)),
		DnsServerAddresses$1:iterator() to listOf(DnsServerAddresses$SequentialAddressIterator:<init>(InetSocketAddress[]-int)),
		DnsNameResolver$3:<init>(DnsNameResolver-DnsQuestion) to listOf(OneTimeTask:<init>()),
		DnsNameResolver$3:run() to listOf(DnsNameResolver:clearCache(DnsQuestion)),
		DnsQueryContext$3:<init>(DnsQueryContext-InetSocketAddress-long) to listOf(OneTimeTask:<init>()),
		DnsQueryContext$3:run() to listOf(DnsQueryContext:access$100(DnsQueryContext), Promise:isDone(), DnsQueryContext:retry(InetSocketAddress-String)),
		DnsNameResolverContext:<init>(DnsNameResolver-String-int-Promise) to listOf(DnsNameResolver:maxQueriesPerResolve(), DnsNameResolver:resolveAddressTypesUnsafe()),
		DnsNameResolverContext:resolve() to listOf(InternetProtocolFamily:ordinal(), DnsQuestion:<init>(String-DnsType), DnsNameResolverContext:query(Iterable-DnsQuestion)),
		DnsNameResolverContext:query(Iterable-DnsQuestion) to listOf(Promise:isCancelled(), DnsNameResolver:query(Iterable-DnsQuestion), DnsNameResolverContext$2:<init>(DnsNameResolverContext-DnsQuestion), Future:addListener(GenericFutureListener)),
		DnsNameResolverContext:onResponse(DnsQuestion-DnsResponse) to listOf(DnsQuestion:type(), DnsNameResolverContext:onResponseAorAAAA(DnsType-DnsQuestion-DnsResponse), DnsNameResolverContext:onResponseCNAME(DnsQuestion-DnsResponse), ReferenceCountUtil:safeRelease(Object), ReferenceCountUtil:safeRelease(Object)),
		DnsNameResolverContext:onResponseAorAAAA(DnsType-DnsQuestion-DnsResponse) to listOf(DnsNameResolverContext:buildAliasMap(DnsResponse), DnsResponse:answers(), DnsResource:type(), DnsQuestion:name(), DnsResource:name(), DnsResource:content(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), DnsResponse:sender(), DnsNameResolverContext:addTrace(InetSocketAddress-String), DnsNameResolverContext:onResponseCNAME(DnsQuestion-DnsResponse-Map-boolean)),
		DnsNameResolverContext:onResponseCNAME(DnsQuestion-DnsResponse) to listOf(DnsNameResolverContext:buildAliasMap(DnsResponse), DnsNameResolverContext:onResponseCNAME(DnsQuestion-DnsResponse-Map-boolean)),
		DnsNameResolverContext:onResponseCNAME(DnsQuestion-DnsResponse-Map-boolean) to listOf(DnsQuestion:name(), DnsResponse:sender(), DnsNameResolverContext:followCname(InetSocketAddress-String-String), DnsResponse:sender(), DnsNameResolverContext:addTrace(InetSocketAddress-String)),
		DnsNameResolverContext:buildAliasMap(DnsResponse) to listOf(DnsResponse:answers(), DnsResource:type(), DnsResource:content(), DnsNameResolverContext:decodeDomainName(ByteBuf), DnsResource:name()),
		DnsNameResolverContext:tryToFinishResolve() to listOf(DnsNameResolverContext:gotPreferredAddress(), DnsNameResolverContext:finishResolve(), DnsQuestion:<init>(String-DnsType-DnsClass), DnsNameResolverContext:query(Iterable-DnsQuestion), DnsNameResolverContext:finishResolve()),
		DnsNameResolverContext:gotPreferredAddress() to listOf(InternetProtocolFamily:ordinal()),
		DnsNameResolverContext:finishResolve() to listOf(Future:cancel(boolean), Future:addListener(GenericFutureListener), InternetProtocolFamily:ordinal(), DnsNameResolverContext:finishResolveWithIPv4(), DnsNameResolverContext:finishResolveWithIPv6(), Promise:tryFailure(Throwable)),
		DnsNameResolverContext:finishResolveWithIPv4() to listOf(Promise:trySuccess(Object)),
		DnsNameResolverContext:finishResolveWithIPv6() to listOf(Promise:trySuccess(Object)),
		DnsNameResolverContext:decodeDomainName(ByteBuf) to listOf(ByteBuf:markReaderIndex(), ByteBuf:writerIndex(), ByteBuf:readUnsignedByte(), ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(int), ByteBuf:resetReaderIndex(), ByteBuf:readerIndex(), ByteBuf:toString(int-int-Charset), ByteBuf:skipBytes(int), ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(int), ByteBuf:resetReaderIndex(), ByteBuf:resetReaderIndex(), ByteBuf:resetReaderIndex()),
		DnsNameResolverContext:followCname(InetSocketAddress-String-String) to listOf(DnsQuestion:<init>(String-DnsType-DnsClass), DnsNameResolverContext:query(Iterable-DnsQuestion), DnsQuestion:<init>(String-DnsType-DnsClass), DnsNameResolverContext:query(Iterable-DnsQuestion)),
		DnsNameResolverContext:access$200(DnsNameResolverContext-Throwable) to listOf(DnsNameResolverContext:addTrace(Throwable)),
		DnsNameResolverContext:<clinit>() to listOf(DnsNameResolverContext$1:<init>()),
		DnsServerAddresses$SequentialAddressIterator:next() to listOf(DnsServerAddresses$SequentialAddressIterator:next()),
		DnsQueryContext$2:operationComplete(ChannelFuture) to listOf(DnsQueryContext:access$200(DnsQueryContext-ChannelFuture-InetSocketAddress)),
		DnsQueryContext$2:operationComplete(Future) to listOf(DnsQueryContext$2:operationComplete(ChannelFuture)),
		DnsQueryContext$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), DnsQueryContext:access$000(DnsQueryContext-DnsQuery-InetSocketAddress), DnsQueryContext:access$100(DnsQueryContext), ChannelFuture:cause(), Promise:tryFailure(Throwable)),
		DnsQueryContext$1:operationComplete(Future) to listOf(DnsQueryContext$1:operationComplete(ChannelFuture)),
		DnsNameResolver$1:<init>(DnsNameResolver) to listOf(ChannelInitializer:<init>()),
		DnsNameResolver$1:initChannel(DatagramChannel) to listOf(DatagramChannel:pipeline(), DnsNameResolver:access$100(), DnsNameResolver:access$200(), DnsNameResolver:access$300(DnsNameResolver), ChannelPipeline:addLast(ChannelHandler[])),
		DnsNameResolver$1:initChannel(Channel) to listOf(DnsNameResolver$1:initChannel(DatagramChannel)),
		DnsNameResolverContext$3:<clinit>() to listOf(InternetProtocolFamily:values(), InternetProtocolFamily:ordinal(), InternetProtocolFamily:ordinal()),
		DnsServerAddresses$3:<init>(InetSocketAddress) to listOf(DnsServerAddresses$3$1:<init>(DnsServerAddresses$3)),
		DnsNameResolverContext$1:operationComplete(Future) to listOf(Future:isSuccess(), Future:getNow(), DnsResponse:release()),
		DnsNameResolverContext$2:operationComplete(Future) to listOf(DnsNameResolverContext:access$000(DnsNameResolverContext), DnsNameResolverContext:access$100(DnsNameResolverContext), Promise:isDone(), Future:isSuccess(), Future:getNow(), DnsNameResolverContext:onResponse(DnsQuestion-DnsResponse), Future:cause(), DnsNameResolverContext:access$200(DnsNameResolverContext-Throwable), DnsNameResolverContext:tryToFinishResolve(), DnsNameResolverContext:tryToFinishResolve()),
		DnsNameResolver$DnsCacheEntry:<init>(DnsResponse) to listOf(DnsResponse:retain()),
		DnsNameResolver$DnsCacheEntry:release() to listOf(ReferenceCountUtil:safeRelease(Object), ScheduledFuture:cancel(boolean)),
		DnsServerAddresses$RotationalAddresses:iterator() to listOf(DnsServerAddresses$SequentialAddressIterator:<init>(InetSocketAddress[]-int)),
		DnsServerAddresses$RotationalAddresses:<clinit>() to listOf(PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		AttributeKey:valueOf(String) to listOf(ConstantPool:valueOf(String)),
		AttributeKey:exists(String) to listOf(ConstantPool:exists(String)),
		AttributeKey:newInstance(String) to listOf(ConstantPool:newInstance(String)),
		AttributeKey:valueOf(Class-String) to listOf(ConstantPool:valueOf(Class-String)),
		AttributeKey:<init>(int-String) to listOf(AbstractConstant:<init>(int-String)),
		AttributeKey:<init>(int-String-AttributeKey$1) to listOf(AttributeKey:<init>(int-String)),
		AttributeKey:<clinit>() to listOf(AttributeKey$1:<init>()),
		ReferenceCountUtil:retain(Object) to listOf(ReferenceCounted:retain()),
		ReferenceCountUtil:retain(Object-int) to listOf(ReferenceCounted:retain(int)),
		ReferenceCountUtil:touch(Object) to listOf(ReferenceCounted:touch()),
		ReferenceCountUtil:touch(Object-Object) to listOf(ReferenceCounted:touch(Object)),
		ReferenceCountUtil:release(Object) to listOf(ReferenceCounted:release()),
		ReferenceCountUtil:release(Object-int) to listOf(ReferenceCounted:release(int)),
		ReferenceCountUtil:safeRelease(Object) to listOf(ReferenceCountUtil:release(Object), InternalLogger:warn(String-Object-Object)),
		ReferenceCountUtil:safeRelease(Object-int) to listOf(ReferenceCountUtil:release(Object-int), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Object[])),
		ReferenceCountUtil:releaseLater(Object) to listOf(ReferenceCountUtil:releaseLater(Object-int)),
		ReferenceCountUtil:releaseLater(Object-int) to listOf(ReferenceCountUtil$ReleasingTask:<init>(ReferenceCounted-int), ThreadDeathWatcher:watch(Thread-Runnable)),
		ReferenceCountUtil:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		Recycler$1:<init>(Recycler) to listOf(FastThreadLocal:<init>()),
		Recycler$1:initialValue() to listOf(Recycler:access$000(Recycler), Recycler$Stack:<init>(Recycler-Thread-int), Recycler$1:initialValue()),
		ConstantPool:valueOf(Class-String) to listOf(ConstantPool:valueOf(String)),
		ConstantPool:valueOf(String) to listOf(ConstantPool:newConstant(int-String)),
		ConstantPool:exists(String) to listOf(ObjectUtil:checkNotNull(Object-String)),
		ConstantPool:newInstance(String) to listOf(ConstantPool:newConstant(int-String)),
		Recycler$DefaultHandle:recycle(Object) to listOf(Recycler$Stack:push(Recycler$DefaultHandle), Recycler:access$500(), FastThreadLocal:get(), Recycler$WeakOrderQueue:<init>(Recycler$Stack-Thread), Recycler$WeakOrderQueue:add(Recycler$DefaultHandle)),
		Version:identify() to listOf(Version:identify(ClassLoader)),
		Version:identify(ClassLoader) to listOf(PlatformDependent:getContextClassLoader(), Version:parseIso8601(String), Version:parseIso8601(String), Version:<init>(String-String-long-long-String-String-String)),
		Version:main(String[]) to listOf(Version:identify()),
		Recycler$2:<init>() to listOf(FastThreadLocal:<init>()),
		Recycler$2:initialValue() to listOf(Recycler$2:initialValue()),
		HashedWheelTimer$HashedWheelTimeout:<init>(HashedWheelTimer-TimerTask-long) to listOf(MpscLinkedQueueNode:<init>()),
		HashedWheelTimer$HashedWheelTimeout:cancel() to listOf(HashedWheelTimer$HashedWheelTimeout:compareAndSetState(int-int), HashedWheelTimer:access$1000(HashedWheelTimer), HashedWheelTimer$HashedWheelTimeout$1:<init>(HashedWheelTimer$HashedWheelTimeout)),
		HashedWheelTimer$HashedWheelTimeout:isCancelled() to listOf(HashedWheelTimer$HashedWheelTimeout:state()),
		HashedWheelTimer$HashedWheelTimeout:isExpired() to listOf(HashedWheelTimer$HashedWheelTimeout:state()),
		HashedWheelTimer$HashedWheelTimeout:expire() to listOf(HashedWheelTimer$HashedWheelTimeout:compareAndSetState(int-int), TimerTask:run(Timeout), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		HashedWheelTimer$HashedWheelTimeout:toString() to listOf(HashedWheelTimer:access$200(HashedWheelTimer), StringUtil:simpleClassName(Object), HashedWheelTimer$HashedWheelTimeout:isCancelled(), HashedWheelTimer$HashedWheelTimeout:task()),
		HashedWheelTimer$HashedWheelTimeout:value() to listOf(HashedWheelTimer$HashedWheelTimeout:value()),
		HashedWheelTimer$HashedWheelTimeout:<clinit>() to listOf(PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		Recycler$WeakOrderQueue$Link:<init>(Recycler$1) to listOf(Recycler$WeakOrderQueue$Link:<init>()),
		ResourceLeakDetector$Level:values() to listOf(ResourceLeakDetector$Level[]:clone()),
		ResourceLeakDetector$Level:<clinit>() to listOf(ResourceLeakDetector$Level:<init>(String-int), ResourceLeakDetector$Level:<init>(String-int), ResourceLeakDetector$Level:<init>(String-int), ResourceLeakDetector$Level:<init>(String-int)),
		ScheduledFutureTask:deadlineNanos(long) to listOf(ScheduledFutureTask:nanoTime()),
		ScheduledFutureTask:<init>(EventExecutor-Callable-long-long) to listOf(EventExecutor:unwrap(), PromiseTask:<init>(EventExecutor-Callable)),
		ScheduledFutureTask:<init>(EventExecutor-Callable-long) to listOf(EventExecutor:unwrap(), PromiseTask:<init>(EventExecutor-Callable)),
		ScheduledFutureTask:delayNanos() to listOf(ScheduledFutureTask:deadlineNanos(), ScheduledFutureTask:nanoTime()),
		ScheduledFutureTask:delayNanos(long) to listOf(ScheduledFutureTask:deadlineNanos()),
		ScheduledFutureTask:getDelay(TimeUnit) to listOf(ScheduledFutureTask:delayNanos()),
		ScheduledFutureTask:compareTo(Delayed) to listOf(ScheduledFutureTask:deadlineNanos(), ScheduledFutureTask:deadlineNanos()),
		ScheduledFutureTask:run() to listOf(ScheduledFutureTask:executor(), EventExecutor:inEventLoop(), ScheduledFutureTask:isMigrationPending(), ScheduledFutureTask:scheduleWithNewExecutor(), ScheduledFutureTask:needsLaterExecution(), ScheduledFutureTask:executor(), EventExecutor:isShutdown(), ScheduledFutureTask:nanoTime(), ScheduledFutureTask:isCancelled(), ScheduledFutureTask:executor(), ScheduledFutureTask:setUncancellableInternal(), ScheduledFutureTask:setSuccessInternal(Object), ScheduledFutureTask:isCancelled(), ScheduledFutureTask:executor(), EventExecutor:isShutdown(), ScheduledFutureTask:nanoTime(), ScheduledFutureTask:isCancelled(), ScheduledFutureTask:executor(), ScheduledFutureTask:setFailureInternal(Throwable)),
		ScheduledFutureTask:toStringBuilder() to listOf(PromiseTask:toStringBuilder()),
		ScheduledFutureTask:needsLaterExecution() to listOf(CallableEventExecutorAdapter:executor(), CallableEventExecutorAdapter:executor(), PausableEventExecutor:isAcceptingNewTasks()),
		ScheduledFutureTask:isMigrationPending() to listOf(ScheduledFutureTask:isCancelled(), ScheduledFutureTask:executor(), CallableEventExecutorAdapter:executor(), EventExecutor:unwrap()),
		ScheduledFutureTask:scheduleWithNewExecutor() to listOf(CallableEventExecutorAdapter:executor(), EventExecutor:unwrap(), EventExecutor:isShutdown(), SingleThreadEventExecutor:scheduledTaskQueue(), ScheduledFutureTask$1:<init>(ScheduledFutureTask-Queue), EventExecutor:execute(Runnable)),
		ScheduledFutureTask:compareTo(Object) to listOf(ScheduledFutureTask:compareTo(Delayed)),
		DefaultThreadFactory$DefaultRunnableDecorator:run() to listOf(FastThreadLocal:removeAll(), FastThreadLocal:removeAll()),
		DefaultEventExecutor:<init>() to listOf(DefaultEventExecutor:<init>(EventExecutorGroup)),
		DefaultEventExecutor:<init>(Executor) to listOf(DefaultEventExecutor:<init>(EventExecutorGroup-Executor)),
		DefaultEventExecutor:<init>(EventExecutorGroup) to listOf(DefaultExecutorServiceFactory:<init>(Class), DefaultExecutorServiceFactory:newExecutorService(int), DefaultEventExecutor:<init>(EventExecutorGroup-Executor)),
		DefaultEventExecutor:<init>(EventExecutorGroup-Executor) to listOf(SingleThreadEventExecutor:<init>(EventExecutorGroup-Executor-boolean)),
		DefaultEventExecutor:run() to listOf(DefaultEventExecutor:takeTask(), DefaultEventExecutor:updateLastExecutionTime(), DefaultEventExecutor:confirmShutdown(), DefaultEventExecutor:cleanupAndTerminate(boolean), DefaultEventExecutor:scheduleExecution()),
		MultithreadEventExecutorGroup$1:operationComplete(Future) to listOf(MultithreadEventExecutorGroup:access$200(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$300(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$400(MultithreadEventExecutorGroup), Promise:setSuccess(Object)),
		DefaultExecutorServiceFactory$DefaultForkJoinWorkerThreadFactory:newThread(ForkJoinPool) to listOf(DefaultExecutorServiceFactory$DefaultForkJoinWorkerThread:<init>(ForkJoinPool), ForkJoinWorkerThread:setName(String), ForkJoinWorkerThread:setPriority(int)),
		ScheduledFutureTask$1:<init>(ScheduledFutureTask-Queue) to listOf(OneTimeTask:<init>()),
		ScheduledFutureTask$1:run() to listOf(ScheduledFutureTask:nanoTime(), ScheduledFutureTask:access$002(ScheduledFutureTask-long), ScheduledFutureTask:isCancelled()),
		DefaultPromise:<init>(EventExecutor) to listOf(AbstractFuture:<init>()),
		DefaultPromise:<init>() to listOf(AbstractFuture:<init>()),
		DefaultPromise:isCancelled() to listOf(DefaultPromise:isCancelled0(Object)),
		DefaultPromise:isDone() to listOf(DefaultPromise:isDone0(Object)),
		DefaultPromise:addListener(GenericFutureListener) to listOf(DefaultPromise:isDone(), DefaultPromise:notifyLateListener(GenericFutureListener), DefaultPromise:isDone(), DefaultFutureListeners:add(GenericFutureListener), DefaultFutureListeners:<init>(GenericFutureListener-GenericFutureListener), DefaultPromise:notifyLateListener(GenericFutureListener), DefaultPromise:addListener(GenericFutureListener)),
		DefaultPromise:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultPromise:addListeners(GenericFutureListener[])),
		DefaultPromise:removeListener(GenericFutureListener) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultFutureListeners:remove(GenericFutureListener), DefaultPromise:removeListener(GenericFutureListener)),
		DefaultPromise:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultPromise:removeListeners(GenericFutureListener[])),
		DefaultPromise:sync() to listOf(DefaultPromise:await(), DefaultPromise:rethrowIfFailed(), DefaultPromise:sync()),
		DefaultPromise:syncUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultPromise:rethrowIfFailed(), DefaultPromise:syncUninterruptibly()),
		DefaultPromise:rethrowIfFailed() to listOf(DefaultPromise:cause(), PlatformDependent:throwException(Throwable)),
		DefaultPromise:await() to listOf(DefaultPromise:isDone(), DefaultPromise:toString(), DefaultPromise:isDone(), DefaultPromise:checkDeadLock(), DefaultPromise:incWaiters(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters(), DefaultPromise:await()),
		DefaultPromise:await(long-TimeUnit) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:await(long) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:awaitUninterruptibly() to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:checkDeadLock(), DefaultPromise:incWaiters(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters(), DefaultPromise:awaitUninterruptibly()),
		DefaultPromise:awaitUninterruptibly(long-TimeUnit) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:awaitUninterruptibly(long) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:await0(long-boolean) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:toString(), DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:checkDeadLock(), DefaultPromise:incWaiters(), DefaultPromise:isDone(), DefaultPromise:decWaiters(), DefaultPromise:isDone(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters()),
		DefaultPromise:checkDeadLock() to listOf(DefaultPromise:executor(), EventExecutor:inEventLoop(), DefaultPromise:toString(), BlockingOperationException:<init>(String)),
		DefaultPromise:setSuccess(Object) to listOf(DefaultPromise:setSuccess0(Object), DefaultPromise:notifyListeners()),
		DefaultPromise:trySuccess(Object) to listOf(DefaultPromise:setSuccess0(Object), DefaultPromise:notifyListeners()),
		DefaultPromise:setFailure(Throwable) to listOf(DefaultPromise:setFailure0(Throwable), DefaultPromise:notifyListeners()),
		DefaultPromise:tryFailure(Throwable) to listOf(DefaultPromise:setFailure0(Throwable), DefaultPromise:notifyListeners()),
		DefaultPromise:cancel(boolean) to listOf(DefaultPromise:isDone0(Object), DefaultPromise:isDone0(Object), DefaultPromise:hasWaiters(), DefaultPromise:notifyListeners()),
		DefaultPromise:setUncancellable() to listOf(DefaultPromise:isDone0(Object), DefaultPromise:isCancelled0(Object), DefaultPromise:isDone0(Object), DefaultPromise:isCancelled0(Object)),
		DefaultPromise:setFailure0(Throwable) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise$CauseHolder:<init>(Throwable), DefaultPromise:hasWaiters()),
		DefaultPromise:setSuccess0(Object) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:hasWaiters()),
		DefaultPromise:notifyListeners() to listOf(DefaultPromise:executor(), EventExecutor:inEventLoop(), InternalThreadLocalMap:get(), InternalThreadLocalMap:futureListenerStackDepth(), InternalThreadLocalMap:setFutureListenerStackDepth(int), DefaultPromise:notifyListeners0(Future-DefaultFutureListeners), DefaultPromise:notifyListener0(Future-GenericFutureListener), InternalThreadLocalMap:setFutureListenerStackDepth(int), InternalThreadLocalMap:setFutureListenerStackDepth(int), DefaultPromise$1:<init>(DefaultPromise-DefaultFutureListeners), DefaultPromise:execute(EventExecutor-Runnable), DefaultPromise$2:<init>(DefaultPromise-GenericFutureListener), DefaultPromise:execute(EventExecutor-Runnable)),
		DefaultPromise:notifyListeners0(Future-DefaultFutureListeners) to listOf(DefaultFutureListeners:listeners(), DefaultFutureListeners:size(), DefaultPromise:notifyListener0(Future-GenericFutureListener)),
		DefaultPromise:notifyLateListener(GenericFutureListener) to listOf(DefaultPromise:executor(), EventExecutor:inEventLoop(), InternalThreadLocalMap:get(), InternalThreadLocalMap:futureListenerStackDepth(), InternalThreadLocalMap:setFutureListenerStackDepth(int), DefaultPromise:notifyListener0(Future-GenericFutureListener), InternalThreadLocalMap:setFutureListenerStackDepth(int), InternalThreadLocalMap:setFutureListenerStackDepth(int), DefaultPromise$LateListeners:<init>(DefaultPromise), DefaultPromise$LateListeners:add(Object), DefaultPromise:execute(EventExecutor-Runnable), DefaultPromise$LateListenerNotifier:<init>(DefaultPromise-GenericFutureListener), DefaultPromise:execute(EventExecutor-Runnable)),
		DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener) to listOf(EventExecutor:inEventLoop(), InternalThreadLocalMap:get(), InternalThreadLocalMap:futureListenerStackDepth(), InternalThreadLocalMap:setFutureListenerStackDepth(int), DefaultPromise:notifyListener0(Future-GenericFutureListener), InternalThreadLocalMap:setFutureListenerStackDepth(int), InternalThreadLocalMap:setFutureListenerStackDepth(int), DefaultPromise$3:<init>(Future-GenericFutureListener), DefaultPromise:execute(EventExecutor-Runnable)),
		DefaultPromise:execute(EventExecutor-Runnable) to listOf(EventExecutor:execute(Runnable), InternalLogger:error(String-Throwable)),
		DefaultPromise:notifyListener0(Future-GenericFutureListener) to listOf(GenericFutureListener:operationComplete(Future), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		DefaultPromise:progressiveListeners() to listOf(DefaultFutureListeners:progressiveSize(), DefaultFutureListeners:listeners(), DefaultFutureListeners:listeners()),
		DefaultPromise:notifyProgressiveListeners(long-long) to listOf(DefaultPromise:progressiveListeners(), DefaultPromise:executor(), EventExecutor:inEventLoop(), DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long), DefaultPromise$4:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), DefaultPromise:execute(EventExecutor-Runnable), DefaultPromise$5:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener-long-long), DefaultPromise:execute(EventExecutor-Runnable)),
		DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long) to listOf(DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long)),
		DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long) to listOf(GenericProgressiveFutureListener:operationProgressed(ProgressiveFuture-long-long), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		DefaultPromise:toString() to listOf(DefaultPromise:toStringBuilder()),
		DefaultPromise:toStringBuilder() to listOf(StringUtil:simpleClassName(Object)),
		DefaultPromise:access$000(Future-DefaultFutureListeners) to listOf(DefaultPromise:notifyListeners0(Future-DefaultFutureListeners)),
		DefaultPromise:access$200(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long) to listOf(DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long)),
		DefaultPromise:access$300(ProgressiveFuture-GenericProgressiveFutureListener-long-long) to listOf(DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long)),
		DefaultPromise:access$400(EventExecutor-Runnable) to listOf(DefaultPromise:execute(EventExecutor-Runnable)),
		DefaultPromise:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), InternalLoggerFactory:getInstance(String), Signal:valueOf(Class-String), Signal:valueOf(Class-String), DefaultPromise$CauseHolder:<init>(Throwable)),
		DefaultThreadFactory:<init>(Class) to listOf(DefaultThreadFactory:<init>(Class-boolean-int)),
		DefaultThreadFactory:<init>(String) to listOf(DefaultThreadFactory:<init>(String-boolean-int)),
		DefaultThreadFactory:<init>(Class-boolean) to listOf(DefaultThreadFactory:<init>(Class-boolean-int)),
		DefaultThreadFactory:<init>(String-boolean) to listOf(DefaultThreadFactory:<init>(String-boolean-int)),
		DefaultThreadFactory:<init>(Class-int) to listOf(DefaultThreadFactory:<init>(Class-boolean-int)),
		DefaultThreadFactory:<init>(String-int) to listOf(DefaultThreadFactory:<init>(String-boolean-int)),
		DefaultThreadFactory:<init>(Class-boolean-int) to listOf(DefaultThreadFactory:toPoolName(Class), DefaultThreadFactory:<init>(String-boolean-int)),
		DefaultThreadFactory:toPoolName(Class) to listOf(StringUtil:simpleClassName(Class)),
		DefaultThreadFactory:newThread(Runnable) to listOf(DefaultThreadFactory$DefaultRunnableDecorator:<init>(Runnable), DefaultThreadFactory:newThread(Runnable-String)),
		DefaultThreadFactory:newThread(Runnable-String) to listOf(FastThreadLocalThread:<init>(Runnable-String)),
		MultithreadEventExecutorGroup$GenericEventExecutorChooser:next() to listOf(MultithreadEventExecutorGroup:access$300(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$500(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$300(MultithreadEventExecutorGroup)),
		MultithreadEventExecutorGroup$GenericEventExecutorChooser:<init>(MultithreadEventExecutorGroup-MultithreadEventExecutorGroup$1) to listOf(MultithreadEventExecutorGroup$GenericEventExecutorChooser:<init>(MultithreadEventExecutorGroup)),
		AbstractScheduledEventExecutor$1:run() to listOf(AbstractScheduledEventExecutor:scheduledTaskQueue()),
		AbstractEventExecutor:<init>() to listOf(AbstractEventExecutor:<init>(EventExecutorGroup)),
		AbstractEventExecutor:inEventLoop() to listOf(AbstractEventExecutor:inEventLoop(Thread)),
		AbstractEventExecutor:shutdownGracefully() to listOf(AbstractEventExecutor:shutdownGracefully(long-long-TimeUnit)),
		AbstractEventExecutor:shutdownNow() to listOf(AbstractEventExecutor:shutdown()),
		AbstractEventExecutor:newPromise() to listOf(DefaultPromise:<init>(EventExecutor)),
		AbstractEventExecutor:newProgressivePromise() to listOf(DefaultProgressivePromise:<init>(EventExecutor)),
		AbstractEventExecutor:newSucceededFuture(Object) to listOf(SucceededFuture:<init>(EventExecutor-Object)),
		AbstractEventExecutor:newFailedFuture(Throwable) to listOf(FailedFuture:<init>(EventExecutor-Throwable)),
		AbstractEventExecutor:submit(Runnable) to listOf(AbstractEventExecutor:submit(Runnable)),
		AbstractEventExecutor:submit(Runnable-Object) to listOf(AbstractEventExecutor:submit(Runnable-Object)),
		AbstractEventExecutor:submit(Callable) to listOf(AbstractEventExecutor:submit(Callable)),
		AbstractEventExecutor:newTaskFor(Runnable-Object) to listOf(PromiseTask:<init>(EventExecutor-Runnable-Object)),
		AbstractEventExecutor:newTaskFor(Callable) to listOf(PromiseTask:<init>(EventExecutor-Callable)),
		AbstractEventExecutor:schedule(Runnable-long-TimeUnit) to listOf(AbstractEventExecutor:schedule(Runnable-long-TimeUnit)),
		AbstractEventExecutor:schedule(Callable-long-TimeUnit) to listOf(AbstractEventExecutor:schedule(Callable-long-TimeUnit)),
		AbstractEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		AbstractEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		AbstractEventExecutor:close() to listOf(AbstractEventExecutor:shutdownGracefully(), Future:syncUninterruptibly()),
		FastThreadLocal:removeAll() to listOf(InternalThreadLocalMap:getIfSet(), InternalThreadLocalMap:indexedVariable(int), FastThreadLocal:remove(InternalThreadLocalMap), InternalThreadLocalMap:remove(), InternalThreadLocalMap:remove()),
		FastThreadLocal:size() to listOf(InternalThreadLocalMap:getIfSet(), InternalThreadLocalMap:size()),
		FastThreadLocal:destroy() to listOf(InternalThreadLocalMap:destroy()),
		FastThreadLocal:addToVariablesToRemove(InternalThreadLocalMap-FastThreadLocal) to listOf(InternalThreadLocalMap:indexedVariable(int), InternalThreadLocalMap:setIndexedVariable(int-Object)),
		FastThreadLocal:removeFromVariablesToRemove(InternalThreadLocalMap-FastThreadLocal) to listOf(InternalThreadLocalMap:indexedVariable(int)),
		FastThreadLocal:<init>() to listOf(InternalThreadLocalMap:nextVariableIndex()),
		FastThreadLocal:get() to listOf(InternalThreadLocalMap:get(), FastThreadLocal:get(InternalThreadLocalMap)),
		FastThreadLocal:get(InternalThreadLocalMap) to listOf(InternalThreadLocalMap:indexedVariable(int), FastThreadLocal:initialize(InternalThreadLocalMap)),
		FastThreadLocal:initialize(InternalThreadLocalMap) to listOf(FastThreadLocal:initialValue(), PlatformDependent:throwException(Throwable), InternalThreadLocalMap:setIndexedVariable(int-Object), FastThreadLocal:addToVariablesToRemove(InternalThreadLocalMap-FastThreadLocal)),
		FastThreadLocal:set(Object) to listOf(InternalThreadLocalMap:get(), FastThreadLocal:set(InternalThreadLocalMap-Object), FastThreadLocal:remove()),
		FastThreadLocal:set(InternalThreadLocalMap-Object) to listOf(InternalThreadLocalMap:setIndexedVariable(int-Object), FastThreadLocal:addToVariablesToRemove(InternalThreadLocalMap-FastThreadLocal), FastThreadLocal:remove(InternalThreadLocalMap)),
		FastThreadLocal:isSet() to listOf(InternalThreadLocalMap:getIfSet(), FastThreadLocal:isSet(InternalThreadLocalMap)),
		FastThreadLocal:isSet(InternalThreadLocalMap) to listOf(InternalThreadLocalMap:isIndexedVariableSet(int)),
		FastThreadLocal:remove() to listOf(InternalThreadLocalMap:getIfSet(), FastThreadLocal:remove(InternalThreadLocalMap)),
		FastThreadLocal:remove(InternalThreadLocalMap) to listOf(InternalThreadLocalMap:removeIndexedVariable(int), FastThreadLocal:removeFromVariablesToRemove(InternalThreadLocalMap-FastThreadLocal), FastThreadLocal:onRemoval(Object), PlatformDependent:throwException(Throwable)),
		FastThreadLocal:<clinit>() to listOf(InternalThreadLocalMap:nextVariableIndex()),
		MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser:next() to listOf(MultithreadEventExecutorGroup:access$300(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$500(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$300(MultithreadEventExecutorGroup)),
		MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser:<init>(MultithreadEventExecutorGroup-MultithreadEventExecutorGroup$1) to listOf(MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser:<init>(MultithreadEventExecutorGroup)),
		PromiseAggregator:<init>(Promise) to listOf(PromiseAggregator:<init>(Promise-boolean)),
		PromiseAggregator:add(Promise[]) to listOf(Promise:addListener(GenericFutureListener)),
		PromiseAggregator:operationComplete(Future) to listOf(Promise:setSuccess(Object), Future:isSuccess(), Future:cause(), Promise:setFailure(Throwable), Promise:setFailure(Throwable), Promise:setSuccess(Object)),
		SingleThreadEventExecutor$3:run() to listOf(SingleThreadEventExecutor:access$300(SingleThreadEventExecutor)),
		AbstractEventExecutorGroup:submit(Runnable) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:submit(Runnable), AbstractEventExecutorGroup:submit(Runnable)),
		AbstractEventExecutorGroup:submit(Runnable-Object) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:submit(Runnable-Object), AbstractEventExecutorGroup:submit(Runnable-Object)),
		AbstractEventExecutorGroup:submit(Callable) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:submit(Callable), AbstractEventExecutorGroup:submit(Callable)),
		AbstractEventExecutorGroup:schedule(Runnable-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:schedule(Runnable-long-TimeUnit), AbstractEventExecutorGroup:schedule(Runnable-long-TimeUnit)),
		AbstractEventExecutorGroup:schedule(Callable-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:schedule(Callable-long-TimeUnit), AbstractEventExecutorGroup:schedule(Callable-long-TimeUnit)),
		AbstractEventExecutorGroup:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), AbstractEventExecutorGroup:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		AbstractEventExecutorGroup:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), AbstractEventExecutorGroup:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		AbstractEventExecutorGroup:shutdownGracefully() to listOf(AbstractEventExecutorGroup:shutdownGracefully(long-long-TimeUnit)),
		AbstractEventExecutorGroup:shutdownNow() to listOf(AbstractEventExecutorGroup:shutdown()),
		AbstractEventExecutorGroup:invokeAll(Collection) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAll(Collection)),
		AbstractEventExecutorGroup:invokeAll(Collection-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAll(Collection-long-TimeUnit)),
		AbstractEventExecutorGroup:invokeAny(Collection) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAny(Collection)),
		AbstractEventExecutorGroup:invokeAny(Collection-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAny(Collection-long-TimeUnit)),
		AbstractEventExecutorGroup:execute(Runnable) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:execute(Runnable)),
		AbstractEventExecutorGroup:close() to listOf(AbstractEventExecutorGroup:shutdownGracefully(), Future:syncUninterruptibly()),
		SingleThreadEventExecutor$4:run() to listOf(SingleThreadEventExecutor:access$300(SingleThreadEventExecutor)),
		MultithreadEventExecutorGroup:<init>(int-ExecutorServiceFactory-Object[]) to listOf(ExecutorServiceFactory:newExecutorService(int), MultithreadEventExecutorGroup:<init>(int-Executor-boolean-Object[])),
		MultithreadEventExecutorGroup:<init>(int-Executor-Object[]) to listOf(MultithreadEventExecutorGroup:<init>(int-Executor-boolean-Object[])),
		MultithreadEventExecutorGroup:<init>(int-Executor-boolean-Object[]) to listOf(AbstractEventExecutorGroup:<init>(), DefaultPromise:<init>(EventExecutor), MultithreadEventExecutorGroup:newDefaultExecutorService(int), MultithreadEventExecutorGroup:isPowerOfTwo(int), MultithreadEventExecutorGroup$PowerOfTwoEventExecutorChooser:<init>(MultithreadEventExecutorGroup-MultithreadEventExecutorGroup$1), MultithreadEventExecutorGroup$GenericEventExecutorChooser:<init>(MultithreadEventExecutorGroup-MultithreadEventExecutorGroup$1), MultithreadEventExecutorGroup:newChild(Executor-Object[]), EventExecutor:shutdownGracefully(), EventExecutor:isTerminated(), EventExecutor:awaitTermination(long-TimeUnit), EventExecutor:shutdownGracefully(), EventExecutor:isTerminated(), EventExecutor:awaitTermination(long-TimeUnit), MultithreadEventExecutorGroup$1:<init>(MultithreadEventExecutorGroup-boolean-Executor), EventExecutor:terminationFuture(), Future:addListener(GenericFutureListener)),
		MultithreadEventExecutorGroup:newDefaultExecutorService(int) to listOf(DefaultExecutorServiceFactory:<init>(Class), DefaultExecutorServiceFactory:newExecutorService(int)),
		MultithreadEventExecutorGroup:next() to listOf(MultithreadEventExecutorGroup$EventExecutorChooser:next()),
		MultithreadEventExecutorGroup:shutdownGracefully(long-long-TimeUnit) to listOf(EventExecutor:shutdownGracefully(long-long-TimeUnit), MultithreadEventExecutorGroup:terminationFuture()),
		MultithreadEventExecutorGroup:shutdown() to listOf(EventExecutor:shutdown()),
		MultithreadEventExecutorGroup:isShuttingDown() to listOf(EventExecutor:isShuttingDown()),
		MultithreadEventExecutorGroup:isShutdown() to listOf(EventExecutor:isShutdown()),
		MultithreadEventExecutorGroup:isTerminated() to listOf(EventExecutor:isTerminated()),
		MultithreadEventExecutorGroup:awaitTermination(long-TimeUnit) to listOf(EventExecutor:awaitTermination(long-TimeUnit), MultithreadEventExecutorGroup:isTerminated()),
		PromiseNotifier:<init>(Promise[]) to listOf(Promise[]:clone()),
		PromiseNotifier:operationComplete(Future) to listOf(Future:isSuccess(), Future:get(), Promise:setSuccess(Object), Future:cause(), Promise:setFailure(Throwable)),
		AbstractScheduledEventExecutor:<init>() to listOf(AbstractEventExecutor:<init>()),
		AbstractScheduledEventExecutor:<init>(EventExecutorGroup) to listOf(AbstractEventExecutor:<init>(EventExecutorGroup)),
		AbstractScheduledEventExecutor:nanoTime() to listOf(ScheduledFutureTask:nanoTime()),
		AbstractScheduledEventExecutor:cancelScheduledTasks() to listOf(AbstractScheduledEventExecutor:inEventLoop(), AbstractScheduledEventExecutor:isNullOrEmpty(Queue), ScheduledFutureTask:cancel(boolean)),
		AbstractScheduledEventExecutor:pollScheduledTask() to listOf(AbstractScheduledEventExecutor:nanoTime(), AbstractScheduledEventExecutor:pollScheduledTask(long)),
		AbstractScheduledEventExecutor:pollScheduledTask(long) to listOf(AbstractScheduledEventExecutor:inEventLoop(), ScheduledFutureTask:deadlineNanos()),
		AbstractScheduledEventExecutor:nextScheduledTaskNano() to listOf(ScheduledFutureTask:deadlineNanos(), AbstractScheduledEventExecutor:nanoTime()),
		AbstractScheduledEventExecutor:hasScheduledTasks() to listOf(ScheduledFutureTask:deadlineNanos(), AbstractScheduledEventExecutor:nanoTime()),
		AbstractScheduledEventExecutor:schedule(Runnable-long-TimeUnit) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), AbstractScheduledEventExecutor:toCallable(Runnable), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Callable-long), AbstractScheduledEventExecutor:schedule(ScheduledFutureTask), AbstractScheduledEventExecutor:schedule(Runnable-long-TimeUnit)),
		AbstractScheduledEventExecutor:schedule(Callable-long-TimeUnit) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Callable-long), AbstractScheduledEventExecutor:schedule(ScheduledFutureTask), AbstractScheduledEventExecutor:schedule(Callable-long-TimeUnit)),
		AbstractScheduledEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), AbstractScheduledEventExecutor:toCallable(Runnable), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Callable-long-long), AbstractScheduledEventExecutor:schedule(ScheduledFutureTask), AbstractScheduledEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		AbstractScheduledEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(ObjectUtil:checkNotNull(Object-String), ObjectUtil:checkNotNull(Object-String), AbstractScheduledEventExecutor:toCallable(Runnable), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Callable-long-long), AbstractScheduledEventExecutor:schedule(ScheduledFutureTask), AbstractScheduledEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		AbstractScheduledEventExecutor:schedule(ScheduledFutureTask) to listOf(AbstractScheduledEventExecutor:inEventLoop(), AbstractScheduledEventExecutor:scheduledTaskQueue(), AbstractScheduledEventExecutor$1:<init>(AbstractScheduledEventExecutor-ScheduledFutureTask), AbstractScheduledEventExecutor:execute(Runnable)),
		AbstractScheduledEventExecutor:purgeCancelledScheduledTasks() to listOf(AbstractScheduledEventExecutor:isNullOrEmpty(Queue), ScheduledFutureTask:isCancelled()),
		AbstractScheduledEventExecutor:toCallable(Runnable) to listOf(AbstractScheduledEventExecutor$RunnableToCallableAdapter:<init>(RunnableEventExecutorAdapter)),
		SingleThreadEventExecutor:<init>(EventExecutorGroup-Executor-boolean) to listOf(AbstractScheduledEventExecutor:<init>(EventExecutorGroup), DefaultPromise:<init>(EventExecutor), SingleThreadEventExecutor$2:<init>(SingleThreadEventExecutor), SingleThreadEventExecutor:newTaskQueue()),
		SingleThreadEventExecutor:pollTask() to listOf(SingleThreadEventExecutor:inEventLoop()),
		SingleThreadEventExecutor:takeTask() to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:peekScheduledTask(), ScheduledFutureTask:delayNanos(), SingleThreadEventExecutor:fetchFromScheduledTaskQueue()),
		SingleThreadEventExecutor:fetchFromScheduledTaskQueue() to listOf(SingleThreadEventExecutor:hasScheduledTasks(), AbstractScheduledEventExecutor:nanoTime(), SingleThreadEventExecutor:pollScheduledTask(long)),
		SingleThreadEventExecutor:peekTask() to listOf(SingleThreadEventExecutor:inEventLoop()),
		SingleThreadEventExecutor:hasTasks() to listOf(SingleThreadEventExecutor:inEventLoop()),
		SingleThreadEventExecutor:addTask(Runnable) to listOf(SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:reject()),
		SingleThreadEventExecutor:runAllTasks() to listOf(SingleThreadEventExecutor:fetchFromScheduledTaskQueue(), SingleThreadEventExecutor:pollTask(), InternalLogger:warn(String-Throwable), SingleThreadEventExecutor:pollTask(), ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:runAllTasks(long) to listOf(SingleThreadEventExecutor:fetchFromScheduledTaskQueue(), SingleThreadEventExecutor:pollTask(), ScheduledFutureTask:nanoTime(), InternalLogger:warn(String-Throwable), ScheduledFutureTask:nanoTime(), SingleThreadEventExecutor:pollTask(), ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:delayNanos(long) to listOf(SingleThreadEventExecutor:peekScheduledTask(), ScheduledFutureTask:delayNanos(long)),
		SingleThreadEventExecutor:updateLastExecutionTime() to listOf(ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:addShutdownHook(Runnable) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor$3:<init>(SingleThreadEventExecutor-Runnable), SingleThreadEventExecutor:execute(Runnable)),
		SingleThreadEventExecutor:removeShutdownHook(Runnable) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor$4:<init>(SingleThreadEventExecutor-Runnable), SingleThreadEventExecutor:execute(Runnable)),
		SingleThreadEventExecutor:runShutdownHooks() to listOf(InternalLogger:warn(String-Throwable), ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:shutdownGracefully(long-long-TimeUnit) to listOf(SingleThreadEventExecutor:isShuttingDown(), SingleThreadEventExecutor:terminationFuture(), SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:isShuttingDown(), SingleThreadEventExecutor:terminationFuture(), SingleThreadEventExecutor:scheduleExecution(), SingleThreadEventExecutor:wakeup(boolean), SingleThreadEventExecutor:terminationFuture()),
		SingleThreadEventExecutor:shutdown() to listOf(SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:isShuttingDown(), SingleThreadEventExecutor:scheduleExecution(), SingleThreadEventExecutor:wakeup(boolean)),
		SingleThreadEventExecutor:confirmShutdown() to listOf(SingleThreadEventExecutor:isShuttingDown(), SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:cancelScheduledTasks(), ScheduledFutureTask:nanoTime(), SingleThreadEventExecutor:runAllTasks(), SingleThreadEventExecutor:runShutdownHooks(), SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:wakeup(boolean), ScheduledFutureTask:nanoTime(), SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:wakeup(boolean)),
		SingleThreadEventExecutor:awaitTermination(long-TimeUnit) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:isTerminated()),
		SingleThreadEventExecutor:execute(Runnable) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:addTask(Runnable), SingleThreadEventExecutor:startExecution(), SingleThreadEventExecutor:addTask(Runnable), SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:removeTask(Runnable), SingleThreadEventExecutor:reject(), SingleThreadEventExecutor:wakesUpForTask(Runnable), SingleThreadEventExecutor:wakeup(boolean)),
		SingleThreadEventExecutor:cleanupAndTerminate(boolean) to listOf(InternalLogger:error(String), SingleThreadEventExecutor:confirmShutdown(), SingleThreadEventExecutor:cleanup(), InternalLogger:warn(String), Promise:setSuccess(Object), InternalLogger:warn(String), Promise:setSuccess(Object), SingleThreadEventExecutor:cleanup(), InternalLogger:warn(String), Promise:setSuccess(Object), InternalLogger:warn(String), Promise:setSuccess(Object)),
		SingleThreadEventExecutor:startExecution() to listOf(SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor-SingleThreadEventExecutor$1), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Callable-long-long), SingleThreadEventExecutor:schedule(ScheduledFutureTask), SingleThreadEventExecutor:scheduleExecution()),
		SingleThreadEventExecutor:scheduleExecution() to listOf(SingleThreadEventExecutor:updateThread(Thread)),
		SingleThreadEventExecutor:access$000(SingleThreadEventExecutor-Thread) to listOf(SingleThreadEventExecutor:updateThread(Thread)),
		SingleThreadEventExecutor:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SingleThreadEventExecutor$1:<init>(), PlatformDependent:newAtomicIntegerFieldUpdater(Class-String), PlatformDependent:newAtomicReferenceFieldUpdater(Class-String)),
		DefaultPromise$3:run() to listOf(DefaultPromise:notifyListener0(Future-GenericFutureListener)),
		AbstractScheduledEventExecutor$RunnableToCallableAdapter:executor() to listOf(RunnableEventExecutorAdapter:executor()),
		AbstractScheduledEventExecutor$RunnableToCallableAdapter:call() to listOf(RunnableEventExecutorAdapter:run(), AbstractScheduledEventExecutor$RunnableToCallableAdapter:call()),
		CompleteFuture:<init>(EventExecutor) to listOf(AbstractFuture:<init>()),
		CompleteFuture:addListener(GenericFutureListener) to listOf(CompleteFuture:executor(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener)),
		CompleteFuture:addListeners(GenericFutureListener[]) to listOf(CompleteFuture:executor(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener)),
		DefaultPromise$LateListeners:run() to listOf(DefaultPromise:access$100(DefaultPromise), DefaultPromise$LateListeners:poll(), DefaultPromise:notifyListener0(Future-GenericFutureListener), DefaultPromise:executor(), DefaultPromise:access$400(EventExecutor-Runnable)),
		DefaultPromise$LateListenerNotifier:run() to listOf(DefaultPromise:access$500(DefaultPromise), DefaultPromise$LateListeners:<init>(DefaultPromise), DefaultPromise:access$502(DefaultPromise-DefaultPromise$LateListeners), DefaultPromise$LateListeners:add(Object), DefaultPromise$LateListeners:run()),
		GlobalEventExecutor:<init>() to listOf(AbstractScheduledEventExecutor:<init>(), GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor-GlobalEventExecutor$1), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Callable-long-long), DefaultThreadFactory:<init>(Class), GlobalEventExecutor$TaskRunner:<init>(GlobalEventExecutor), FailedFuture:<init>(EventExecutor-Throwable), GlobalEventExecutor:scheduledTaskQueue()),
		GlobalEventExecutor:takeTask() to listOf(GlobalEventExecutor:peekScheduledTask(), ScheduledFutureTask:delayNanos(), GlobalEventExecutor:fetchFromScheduledTaskQueue()),
		GlobalEventExecutor:fetchFromScheduledTaskQueue() to listOf(GlobalEventExecutor:hasScheduledTasks(), AbstractScheduledEventExecutor:nanoTime(), GlobalEventExecutor:pollScheduledTask(long)),
		GlobalEventExecutor:shutdownGracefully(long-long-TimeUnit) to listOf(GlobalEventExecutor:terminationFuture()),
		GlobalEventExecutor:execute(Runnable) to listOf(GlobalEventExecutor:addTask(Runnable), GlobalEventExecutor:inEventLoop(), GlobalEventExecutor:startThread()),
		GlobalEventExecutor:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), GlobalEventExecutor:<init>()),
		SingleThreadEventExecutor$PurgeTask:run() to listOf(SingleThreadEventExecutor:purgeCancelledScheduledTasks()),
		SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor-SingleThreadEventExecutor$1) to listOf(SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor)),
		GlobalEventExecutor$TaskRunner:run() to listOf(GlobalEventExecutor:takeTask(), GlobalEventExecutor:access$100(), InternalLogger:warn(String-Throwable), GlobalEventExecutor:access$200(GlobalEventExecutor), GlobalEventExecutor:access$200(GlobalEventExecutor)),
		DefaultPromise$4:run() to listOf(DefaultPromise:access$200(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long)),
		ImmediateExecutor:<clinit>() to listOf(ImmediateExecutor:<init>()),
		DefaultPromise$1:run() to listOf(DefaultPromise:access$000(Future-DefaultFutureListeners), DefaultPromise:access$102(DefaultPromise-Object)),
		SingleThreadEventExecutor$2:run() to listOf(SingleThreadEventExecutor:access$000(SingleThreadEventExecutor-Thread), SingleThreadEventExecutor:access$100(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-boolean), SingleThreadEventExecutor:updateLastExecutionTime(), SingleThreadEventExecutor:run(), SingleThreadEventExecutor:access$200(), InternalLogger:warn(String-Throwable), SingleThreadEventExecutor:cleanupAndTerminate(boolean)),
		DefaultExecutorServiceFactory:<init>(Class) to listOf(DefaultExecutorServiceFactory:toName(Class), DefaultExecutorServiceFactory:<init>(String)),
		DefaultExecutorServiceFactory:newExecutorService(int) to listOf(DefaultExecutorServiceFactory$DefaultForkJoinWorkerThreadFactory:<init>(String), DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:access$000(), ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean)),
		DefaultExecutorServiceFactory:toName(Class) to listOf(StringUtil:simpleClassName(Class)),
		DefaultExecutorServiceFactory:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		DefaultEventExecutorGroup:<init>(int) to listOf(DefaultEventExecutorGroup:<init>(int-Executor)),
		DefaultEventExecutorGroup:<init>(int-Executor) to listOf(MultithreadEventExecutorGroup:<init>(int-Executor-Object[])),
		DefaultEventExecutorGroup:<init>(int-ExecutorServiceFactory) to listOf(MultithreadEventExecutorGroup:<init>(int-ExecutorServiceFactory-Object[])),
		DefaultEventExecutorGroup:newChild(Executor-Object[]) to listOf(DefaultEventExecutor:<init>(EventExecutorGroup-Executor)),
		FailedFuture:<init>(EventExecutor-Throwable) to listOf(CompleteFuture:<init>(EventExecutor)),
		FailedFuture:sync() to listOf(PlatformDependent:throwException(Throwable)),
		FailedFuture:syncUninterruptibly() to listOf(PlatformDependent:throwException(Throwable)),
		ImmediateEventExecutor$ImmediatePromise:<init>(EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor)),
		DefaultPromise$5:run() to listOf(DefaultPromise:access$300(ProgressiveFuture-GenericProgressiveFutureListener-long-long)),
		ImmediateEventExecutor:<init>() to listOf(AbstractEventExecutor:<init>(), FailedFuture:<init>(EventExecutor-Throwable)),
		ImmediateEventExecutor:shutdownGracefully(long-long-TimeUnit) to listOf(ImmediateEventExecutor:terminationFuture()),
		ImmediateEventExecutor:newPromise() to listOf(ImmediateEventExecutor$ImmediatePromise:<init>(EventExecutor)),
		ImmediateEventExecutor:newProgressivePromise() to listOf(ImmediateEventExecutor$ImmediateProgressivePromise:<init>(EventExecutor)),
		ImmediateEventExecutor:<clinit>() to listOf(ImmediateEventExecutor:<init>()),
		ImmediateEventExecutor$ImmediateProgressivePromise:<init>(EventExecutor) to listOf(DefaultProgressivePromise:<init>(EventExecutor)),
		GlobalEventExecutor$PurgeTask:run() to listOf(GlobalEventExecutor:purgeCancelledScheduledTasks()),
		GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor-GlobalEventExecutor$1) to listOf(GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor)),
		DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:uncaughtException(Thread-Throwable) to listOf(DefaultExecutorServiceFactory:access$100(), InternalLogger:isErrorEnabled(), DefaultExecutorServiceFactory:access$100(), InternalLogger:error(String-Object-Object)),
		DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:<clinit>() to listOf(DefaultExecutorServiceFactory$DefaultUncaughtExceptionHandler:<init>()),
		DefaultProgressivePromise:<init>(EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor)),
		DefaultProgressivePromise:<init>() to listOf(DefaultPromise:<init>()),
		DefaultProgressivePromise:setProgress(long-long) to listOf(DefaultProgressivePromise:isDone(), DefaultProgressivePromise:notifyProgressiveListeners(long-long)),
		DefaultProgressivePromise:tryProgress(long-long) to listOf(DefaultProgressivePromise:isDone(), DefaultProgressivePromise:isDone(), DefaultProgressivePromise:notifyProgressiveListeners(long-long)),
		DefaultProgressivePromise:addListener(GenericFutureListener) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultProgressivePromise:addListener(GenericFutureListener), DefaultProgressivePromise:addListener(GenericFutureListener), DefaultProgressivePromise:addListener(GenericFutureListener)),
		DefaultProgressivePromise:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListeners(GenericFutureListener[]), DefaultProgressivePromise:addListeners(GenericFutureListener[]), DefaultProgressivePromise:addListeners(GenericFutureListener[]), DefaultProgressivePromise:addListeners(GenericFutureListener[])),
		DefaultProgressivePromise:removeListener(GenericFutureListener) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultProgressivePromise:removeListener(GenericFutureListener), DefaultProgressivePromise:removeListener(GenericFutureListener), DefaultProgressivePromise:removeListener(GenericFutureListener)),
		DefaultProgressivePromise:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListeners(GenericFutureListener[]), DefaultProgressivePromise:removeListeners(GenericFutureListener[]), DefaultProgressivePromise:removeListeners(GenericFutureListener[]), DefaultProgressivePromise:removeListeners(GenericFutureListener[])),
		DefaultProgressivePromise:sync() to listOf(DefaultPromise:sync(), DefaultProgressivePromise:sync(), DefaultProgressivePromise:sync(), DefaultProgressivePromise:sync()),
		DefaultProgressivePromise:syncUninterruptibly() to listOf(DefaultPromise:syncUninterruptibly(), DefaultProgressivePromise:syncUninterruptibly(), DefaultProgressivePromise:syncUninterruptibly(), DefaultProgressivePromise:syncUninterruptibly()),
		DefaultProgressivePromise:await() to listOf(DefaultPromise:await(), DefaultProgressivePromise:await(), DefaultProgressivePromise:await(), DefaultProgressivePromise:await()),
		DefaultProgressivePromise:awaitUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultProgressivePromise:awaitUninterruptibly(), DefaultProgressivePromise:awaitUninterruptibly(), DefaultProgressivePromise:awaitUninterruptibly()),
		DefaultProgressivePromise:setSuccess(Object) to listOf(DefaultPromise:setSuccess(Object), DefaultProgressivePromise:setSuccess(Object)),
		DefaultProgressivePromise:setFailure(Throwable) to listOf(DefaultPromise:setFailure(Throwable), DefaultProgressivePromise:setFailure(Throwable)),
		PromiseTask:toCallable(Runnable-Object) to listOf(PromiseTask$RunnableAdapter:<init>(Runnable-Object)),
		PromiseTask:<init>(EventExecutor-Runnable-Object) to listOf(PromiseTask:toCallable(Runnable-Object), PromiseTask:<init>(EventExecutor-Callable)),
		PromiseTask:<init>(EventExecutor-Callable) to listOf(DefaultPromise:<init>(EventExecutor)),
		PromiseTask:run() to listOf(PromiseTask:setUncancellableInternal(), PromiseTask:setSuccessInternal(Object), PromiseTask:setFailureInternal(Throwable)),
		PromiseTask:setFailureInternal(Throwable) to listOf(DefaultPromise:setFailure(Throwable)),
		PromiseTask:tryFailureInternal(Throwable) to listOf(DefaultPromise:tryFailure(Throwable)),
		PromiseTask:setSuccessInternal(Object) to listOf(DefaultPromise:setSuccess(Object)),
		PromiseTask:trySuccessInternal(Object) to listOf(DefaultPromise:trySuccess(Object)),
		PromiseTask:setUncancellableInternal() to listOf(DefaultPromise:setUncancellable()),
		PromiseTask:toStringBuilder() to listOf(DefaultPromise:toStringBuilder()),
		DefaultPromise$2:run() to listOf(DefaultPromise:notifyListener0(Future-GenericFutureListener), DefaultPromise:access$102(DefaultPromise-Object)),
		AbstractFuture:get() to listOf(AbstractFuture:await(), AbstractFuture:cause(), AbstractFuture:getNow()),
		AbstractFuture:get(long-TimeUnit) to listOf(AbstractFuture:await(long-TimeUnit), AbstractFuture:cause(), AbstractFuture:getNow()),
		DefaultExecutorServiceFactory$DefaultForkJoinWorkerThread:<init>(ForkJoinPool) to listOf(ForkJoinWorkerThread:<init>(ForkJoinPool)),
		SucceededFuture:<init>(EventExecutor-Object) to listOf(CompleteFuture:<init>(EventExecutor)),
		Recycler$WeakOrderQueue:<init>(Recycler$Stack-Thread) to listOf(Recycler:access$600(), Recycler$WeakOrderQueue$Link:<init>(Recycler$1), Recycler$Stack:access$800(Recycler$Stack), Recycler$Stack:access$802(Recycler$Stack-Recycler$WeakOrderQueue)),
		Recycler$WeakOrderQueue:add(Recycler$DefaultHandle) to listOf(Recycler$DefaultHandle:access$902(Recycler$DefaultHandle-int), Recycler$WeakOrderQueue$Link:get(), Recycler$WeakOrderQueue$Link:<init>(Recycler$1), Recycler$WeakOrderQueue$Link:access$1002(Recycler$WeakOrderQueue$Link-Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:get(), Recycler$WeakOrderQueue$Link:access$1100(Recycler$WeakOrderQueue$Link), Recycler$DefaultHandle:access$202(Recycler$DefaultHandle-Recycler$Stack), Recycler$WeakOrderQueue$Link:lazySet(int)),
		Recycler$WeakOrderQueue:hasFinalData() to listOf(Recycler$WeakOrderQueue$Link:access$1200(Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:get()),
		Recycler$WeakOrderQueue:transfer(Recycler$Stack) to listOf(Recycler$WeakOrderQueue$Link:access$1200(Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:access$1000(Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:access$1000(Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:access$1200(Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:get(), Recycler$Stack:access$400(Recycler$Stack), Recycler$Stack:access$300(Recycler$Stack), Recycler$Stack:increaseCapacity(int), Recycler$WeakOrderQueue$Link:access$1100(Recycler$WeakOrderQueue$Link), Recycler$Stack:access$300(Recycler$Stack), Recycler$DefaultHandle:access$1300(Recycler$DefaultHandle), Recycler$DefaultHandle:access$900(Recycler$DefaultHandle), Recycler$DefaultHandle:access$1302(Recycler$DefaultHandle-int), Recycler$DefaultHandle:access$1300(Recycler$DefaultHandle), Recycler$DefaultHandle:access$900(Recycler$DefaultHandle), Recycler$DefaultHandle:access$202(Recycler$DefaultHandle-Recycler$Stack), Recycler$Stack:access$402(Recycler$Stack-int), Recycler$WeakOrderQueue$Link:access$1000(Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:access$1000(Recycler$WeakOrderQueue$Link), Recycler$WeakOrderQueue$Link:access$1202(Recycler$WeakOrderQueue$Link-int)),
		DomainNameMapping:<init>(Object) to listOf(DomainNameMapping:<init>(int-Object)),
		DomainNameMapping:add(String-Object) to listOf(DomainNameMapping:normalizeHostname(String)),
		DomainNameMapping:normalizeHostname(String) to listOf(DomainNameMapping:needsNormalization(String)),
		DomainNameMapping:map(String) to listOf(DomainNameMapping:normalizeHostname(String), DomainNameMapping:matches(String-String)),
		DomainNameMapping:toString() to listOf(StringUtil:simpleClassName(Object)),
		DomainNameMapping:map(Object) to listOf(DomainNameMapping:map(String)),
		HashedWheelTimer:<init>() to listOf(HashedWheelTimer:<init>(ThreadFactory)),
		HashedWheelTimer:<init>(long-TimeUnit) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit)),
		HashedWheelTimer:<init>(long-TimeUnit-int) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int)),
		HashedWheelTimer:<init>(ThreadFactory) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit)),
		HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int)),
		HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int) to listOf(HashedWheelTimer$Worker:<init>(HashedWheelTimer-HashedWheelTimer$1), PlatformDependent:newMpscQueue(), PlatformDependent:newMpscQueue(), HashedWheelTimer:createWheel(int), ResourceLeakDetector:open(Object)),
		HashedWheelTimer:createWheel(int) to listOf(HashedWheelTimer:normalizeTicksPerWheel(int), HashedWheelTimer$HashedWheelBucket:<init>(HashedWheelTimer$1)),
		HashedWheelTimer:stop() to listOf(ResourceLeak:close(), ResourceLeak:close(), HashedWheelTimer$Worker:unprocessedTimeouts()),
		HashedWheelTimer:newTimeout(TimerTask-long-TimeUnit) to listOf(HashedWheelTimer:start(), HashedWheelTimer$HashedWheelTimeout:<init>(HashedWheelTimer-TimerTask-long)),
		HashedWheelTimer:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ResourceLeakDetector:<init>(Class-int-long), PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		IllegalReferenceCountException:<init>(int) to listOf(IllegalReferenceCountException:<init>(String)),
		IllegalReferenceCountException:<init>(int-int) to listOf(IllegalReferenceCountException:<init>(String)),
		AbstractReferenceCounted:retain() to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int)),
		AbstractReferenceCounted:retain(int) to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int)),
		AbstractReferenceCounted:touch() to listOf(AbstractReferenceCounted:touch(Object)),
		AbstractReferenceCounted:release() to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCounted:deallocate()),
		AbstractReferenceCounted:release(int) to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCounted:deallocate()),
		AbstractReferenceCounted:<clinit>() to listOf(PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		NetUtil:createByteArrayFromIpAddressString(String) to listOf(NetUtil:isValidIpV4Address(String), NetUtil:isValidIpV6Address(String), NetUtil:convertToBytes(String-byte[]-int)),
		NetUtil:convertToBytes(String-byte[]-int) to listOf(NetUtil:getIntValue(char), NetUtil:getIntValue(char), NetUtil:getIntValue(char), NetUtil:getIntValue(char)),
		NetUtil:bytesToIpAddress(byte[]-int-int) to listOf(StringUtil:toHexString(Appendable-byte[]-int-int), StringUtil:toHexString(Appendable-byte[]-int-int)),
		NetUtil:isValidIpV6Address(String) to listOf(NetUtil:isValidIp4Word(String), NetUtil:isValidHexChar(char), NetUtil:isValidIp4Word(String)),
		NetUtil:getByName(CharSequence) to listOf(NetUtil:getByName(CharSequence-boolean)),
		NetUtil:getByName(CharSequence-boolean) to listOf(NetUtil:isValidNumericChar(char), NetUtil:isValidNumericChar(char), NetUtil:isValidNumericChar(char), NetUtil:isValidNumericChar(char), NetUtil:isValidNumericChar(char), NetUtil:isValidNumericChar(char), NetUtil:isValidHexChar(char), NetUtil:isValidNumericChar(char), NetUtil:getIntValue(char)),
		NetUtil:toAddressString(InetAddress) to listOf(NetUtil:toAddressString(InetAddress-boolean)),
		NetUtil:toAddressString(InetAddress-boolean) to listOf(NetUtil:inRangeEndExclusive(int-int-int), NetUtil:inRangeEndExclusive(int-int-int), NetUtil:inRangeEndExclusive(int-int-int), NetUtil:inRangeEndExclusive(int-int-int)),
		NetUtil:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), PlatformDependent:throwException(Throwable), PlatformDependent:throwException(Throwable), InternalLogger:warn(String-Throwable), InternalLogger:warn(String), InternalLogger:warn(String-Throwable), InternalLogger:debug(String-Object[]), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), PlatformDependent:isWindows(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), InternalLogger:debug(String-Object-Object), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object)),
		CharsetUtil:getEncoder(Charset) to listOf(InternalThreadLocalMap:get(), InternalThreadLocalMap:charsetEncoderCache()),
		CharsetUtil:getDecoder(Charset) to listOf(InternalThreadLocalMap:get(), InternalThreadLocalMap:charsetDecoderCache()),
		ThreadDeathWatcher$Entry:<init>(Thread-Runnable-boolean) to listOf(MpscLinkedQueueNode:<init>()),
		ThreadDeathWatcher$Entry:value() to listOf(ThreadDeathWatcher$Entry:value()),
		ReferenceCountUtil$ReleasingTask:run() to listOf(ReferenceCounted:release(int), ReferenceCountUtil:access$000(), InternalLogger:warn(String-Object), ReferenceCountUtil:access$000(), InternalLogger:debug(String-Object), ReferenceCountUtil:access$000(), InternalLogger:warn(String-Object-Object)),
		ReferenceCountUtil$ReleasingTask:toString() to listOf(StringUtil:simpleClassName(Object), ReferenceCounted:refCnt()),
		DefaultAttributeMap:attr(AttributeKey) to listOf(DefaultAttributeMap:index(AttributeKey), DefaultAttributeMap$DefaultAttribute:<init>(AttributeKey), DefaultAttributeMap$DefaultAttribute:access$000(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$100(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$200(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:<init>(DefaultAttributeMap$DefaultAttribute-AttributeKey), DefaultAttributeMap$DefaultAttribute:access$202(DefaultAttributeMap$DefaultAttribute-DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$302(DefaultAttributeMap$DefaultAttribute-DefaultAttributeMap$DefaultAttribute)),
		DefaultAttributeMap:hasAttr(AttributeKey) to listOf(DefaultAttributeMap:index(AttributeKey), DefaultAttributeMap$DefaultAttribute:access$100(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$000(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$200(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$000(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$100(DefaultAttributeMap$DefaultAttribute), DefaultAttributeMap$DefaultAttribute:access$200(DefaultAttributeMap$DefaultAttribute)),
		DefaultAttributeMap:index(AttributeKey) to listOf(AttributeKey:id()),
		DefaultAttributeMap:<clinit>() to listOf(PlatformDependent:newAtomicReferenceFieldUpdater(Class-String)),
		Recycler:<init>() to listOf(Recycler:<init>(int)),
		Recycler:<init>(int) to listOf(Recycler$1:<init>(Recycler)),
		Recycler:get() to listOf(FastThreadLocal:get(), Recycler$Stack:pop(), Recycler$Stack:newHandle(), Recycler:newObject(Recycler$Handle), Recycler$DefaultHandle:access$102(Recycler$DefaultHandle-Object), Recycler$DefaultHandle:access$100(Recycler$DefaultHandle)),
		Recycler:recycle(Object-Recycler$Handle) to listOf(Recycler$DefaultHandle:access$200(Recycler$DefaultHandle), Recycler$DefaultHandle:recycle(Object)),
		Recycler:threadLocalCapacity() to listOf(FastThreadLocal:get(), Recycler$Stack:access$300(Recycler$Stack)),
		Recycler:threadLocalSize() to listOf(FastThreadLocal:get(), Recycler$Stack:access$400(Recycler$Stack)),
		Recycler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getInt(String-int), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), Recycler$2:<init>()),
		HashedWheelTimer$HashedWheelTimeout$1:run() to listOf(HashedWheelTimer$HashedWheelBucket:remove(HashedWheelTimer$HashedWheelTimeout)),
		Signal$SignalConstant:<init>(int-String) to listOf(AbstractConstant:<init>(int-String)),
		ThreadDeathWatcher:watch(Thread-Runnable) to listOf(ThreadDeathWatcher:schedule(Thread-Runnable-boolean)),
		ThreadDeathWatcher:unwatch(Thread-Runnable) to listOf(ThreadDeathWatcher:schedule(Thread-Runnable-boolean)),
		ThreadDeathWatcher:schedule(Thread-Runnable-boolean) to listOf(ThreadDeathWatcher$Entry:<init>(Thread-Runnable-boolean)),
		ThreadDeathWatcher:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), DefaultThreadFactory:<init>(Class-boolean-int), PlatformDependent:newMpscQueue(), ThreadDeathWatcher$Watcher:<init>(ThreadDeathWatcher$1)),
		ResourceLeakDetector:<init>(Class) to listOf(StringUtil:simpleClassName(Class), ResourceLeakDetector:<init>(String)),
		ResourceLeakDetector:<init>(String) to listOf(ResourceLeakDetector:<init>(String-int-long)),
		ResourceLeakDetector:<init>(Class-int-long) to listOf(StringUtil:simpleClassName(Class), ResourceLeakDetector:<init>(String-int-long)),
		ResourceLeakDetector:<init>(String-int-long) to listOf(ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object), ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object), PlatformDependent:newConcurrentHashMap(), ResourceLeakDetector$DefaultResourceLeak:access$002(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak), ResourceLeakDetector$DefaultResourceLeak:access$102(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak)),
		ResourceLeakDetector:open(Object) to listOf(ResourceLeakDetector$Level:ordinal(), ResourceLeakDetector$Level:ordinal(), ResourceLeakDetector:reportLeak(ResourceLeakDetector$Level), ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object), ResourceLeakDetector:reportLeak(ResourceLeakDetector$Level), ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object)),
		ResourceLeakDetector:reportLeak(ResourceLeakDetector$Level) to listOf(InternalLogger:isErrorEnabled(), ResourceLeakDetector$DefaultResourceLeak:close(), InternalLogger:error(String), ResourceLeakDetector$DefaultResourceLeak:clear(), ResourceLeakDetector$DefaultResourceLeak:close(), ResourceLeakDetector$DefaultResourceLeak:toString(), ResourceLeakDetector$Level:name(), StringUtil:simpleClassName(Object), InternalLogger:error(String-Object[]), InternalLogger:error(String-Object-Object)),
		ResourceLeakDetector:newRecord(Object-int) to listOf(ResourceLeakHint:toHintString()),
		ResourceLeakDetector:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ResourceLeakDetector$Level:name(), SystemPropertyUtil:get(String-String), ResourceLeakDetector$Level:name(), ResourceLeakDetector$Level:ordinal(), InternalLogger:isDebugEnabled(), ResourceLeakDetector$Level:name(), InternalLogger:debug(String-Object-Object)),
		HashedWheelTimer$Worker:run() to listOf(HashedWheelTimer:access$202(HashedWheelTimer-long), HashedWheelTimer:access$200(HashedWheelTimer), HashedWheelTimer:access$202(HashedWheelTimer-long), HashedWheelTimer:access$300(HashedWheelTimer), HashedWheelTimer$Worker:waitForNextTick(), HashedWheelTimer:access$400(HashedWheelTimer), HashedWheelTimer$Worker:processCancelledTasks(), HashedWheelTimer:access$500(HashedWheelTimer), HashedWheelTimer$Worker:transferTimeoutsToBuckets(), HashedWheelTimer$HashedWheelBucket:expireTimeouts(long), HashedWheelTimer:access$600(), HashedWheelTimer:access$500(HashedWheelTimer), HashedWheelTimer$HashedWheelBucket:clearTimeouts(Set), HashedWheelTimer:access$700(HashedWheelTimer), HashedWheelTimer$HashedWheelTimeout:isCancelled(), HashedWheelTimer$Worker:processCancelledTasks()),
		HashedWheelTimer$Worker:transferTimeoutsToBuckets() to listOf(HashedWheelTimer:access$700(HashedWheelTimer), HashedWheelTimer$HashedWheelTimeout:state(), HashedWheelTimer$HashedWheelTimeout:access$800(HashedWheelTimer$HashedWheelTimeout), HashedWheelTimer:access$900(HashedWheelTimer), HashedWheelTimer:access$500(HashedWheelTimer), HashedWheelTimer:access$400(HashedWheelTimer), HashedWheelTimer:access$500(HashedWheelTimer), HashedWheelTimer$HashedWheelBucket:addTimeout(HashedWheelTimer$HashedWheelTimeout)),
		HashedWheelTimer$Worker:processCancelledTasks() to listOf(HashedWheelTimer:access$1000(HashedWheelTimer), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		HashedWheelTimer$Worker:waitForNextTick() to listOf(HashedWheelTimer:access$900(HashedWheelTimer), HashedWheelTimer:access$200(HashedWheelTimer), PlatformDependent:isWindows(), HashedWheelTimer:access$600()),
		HashedWheelTimer$Worker:<init>(HashedWheelTimer-HashedWheelTimer$1) to listOf(HashedWheelTimer$Worker:<init>(HashedWheelTimer)),
		Signal$1:<init>() to listOf(ConstantPool:<init>()),
		Signal$1:newConstant(int-String) to listOf(Signal:<init>(int-String-Signal$1), Signal$1:newConstant(int-String)),
		IntObjectHashMap$IteratorImpl:scanNext() to listOf(IntObjectHashMap:access$200(IntObjectHashMap), IntObjectHashMap:access$200(IntObjectHashMap)),
		IntObjectHashMap$IteratorImpl:hasNext() to listOf(IntObjectHashMap$IteratorImpl:scanNext(), IntObjectHashMap:access$300(IntObjectHashMap)),
		IntObjectHashMap$IteratorImpl:next() to listOf(IntObjectHashMap$IteratorImpl:hasNext(), IntObjectHashMap$IteratorImpl:scanNext(), IntObjectHashMap$IteratorImpl:next()),
		IntObjectHashMap$IteratorImpl:remove() to listOf(IntObjectHashMap:access$400(IntObjectHashMap-int)),
		IntObjectHashMap$IteratorImpl:key() to listOf(IntObjectHashMap:access$300(IntObjectHashMap)),
		IntObjectHashMap$IteratorImpl:value() to listOf(IntObjectHashMap:access$200(IntObjectHashMap), IntObjectHashMap:access$500(Object)),
		IntObjectHashMap$IteratorImpl:setValue(Object) to listOf(IntObjectHashMap:access$200(IntObjectHashMap), IntObjectHashMap:access$600(Object)),
		IntObjectHashMap$IteratorImpl:<init>(IntObjectHashMap-IntObjectHashMap$1) to listOf(IntObjectHashMap$IteratorImpl:<init>(IntObjectHashMap)),
		PrimitiveCollections:unmodifiableIntObjectMap(IntObjectMap) to listOf(PrimitiveCollections$UnmodifiableIntObjectMap:<init>(IntObjectMap)),
		PrimitiveCollections:<clinit>() to listOf(PrimitiveCollections$EmptyIntObjectMap:<init>(PrimitiveCollections$1)),
		IntObjectHashMap:<init>() to listOf(IntObjectHashMap:<init>(int-float)),
		IntObjectHashMap:<init>(int) to listOf(IntObjectHashMap:<init>(int-float)),
		IntObjectHashMap:<init>(int-float) to listOf(IntObjectHashMap:adjustCapacity(int), IntObjectHashMap:calcMaxSize(int)),
		IntObjectHashMap:get(int) to listOf(IntObjectHashMap:indexOf(int), IntObjectHashMap:toExternal(Object)),
		IntObjectHashMap:put(int-Object) to listOf(IntObjectHashMap:hashIndex(int), IntObjectHashMap:toInternal(Object), IntObjectHashMap:growSize(), IntObjectHashMap:toInternal(Object), IntObjectHashMap:toExternal(Object), IntObjectHashMap:probeNext(int)),
		IntObjectHashMap:putAll(IntObjectMap) to listOf(IntObjectHashMap:put(int-Object), IntObjectMap:entries(), IntObjectMap$Entry:key(), IntObjectMap$Entry:value(), IntObjectHashMap:put(int-Object)),
		IntObjectHashMap:remove(int) to listOf(IntObjectHashMap:indexOf(int), IntObjectHashMap:removeAt(int), IntObjectHashMap:toExternal(Object)),
		IntObjectHashMap:containsKey(int) to listOf(IntObjectHashMap:indexOf(int)),
		IntObjectHashMap:containsValue(Object) to listOf(IntObjectHashMap:toInternal(Object)),
		IntObjectHashMap:iterator() to listOf(IntObjectHashMap$IteratorImpl:<init>(IntObjectHashMap-IntObjectHashMap$1)),
		IntObjectHashMap:keys() to listOf(IntObjectHashMap:size()),
		IntObjectHashMap:values(Class) to listOf(IntObjectHashMap:size()),
		IntObjectHashMap:values() to listOf(IntObjectHashMap$1:<init>(IntObjectHashMap)),
		IntObjectHashMap:equals(Object) to listOf(IntObjectMap:size(), IntObjectMap:get(int)),
		IntObjectHashMap:indexOf(int) to listOf(IntObjectHashMap:hashIndex(int), IntObjectHashMap:probeNext(int)),
		IntObjectHashMap:growSize() to listOf(IntObjectHashMap:adjustCapacity(int), IntObjectHashMap:rehash(int), IntObjectHashMap:rehash(int)),
		IntObjectHashMap:removeAt(int) to listOf(IntObjectHashMap:probeNext(int), IntObjectHashMap:hashIndex(int), IntObjectHashMap:probeNext(int)),
		IntObjectHashMap:rehash(int) to listOf(IntObjectHashMap:calcMaxSize(int), IntObjectHashMap:hashIndex(int), IntObjectHashMap:toInternal(Object), IntObjectHashMap:probeNext(int)),
		IntObjectHashMap:toString() to listOf(IntObjectHashMap:keyToString(int)),
		IntObjectHashMap:access$400(IntObjectHashMap-int) to listOf(IntObjectHashMap:removeAt(int)),
		IntObjectHashMap:access$500(Object) to listOf(IntObjectHashMap:toExternal(Object)),
		IntObjectHashMap:access$600(Object) to listOf(IntObjectHashMap:toInternal(Object)),
		IntObjectHashMap$1:iterator() to listOf(IntObjectHashMap$1$1:<init>(IntObjectHashMap$1)),
		IntObjectHashMap$1:size() to listOf(IntObjectHashMap:access$100(IntObjectHashMap)),
		PrimitiveCollections$UnmodifiableIntObjectMap$EntryImpl:key() to listOf(IntObjectMap$Entry:key()),
		PrimitiveCollections$UnmodifiableIntObjectMap$EntryImpl:value() to listOf(IntObjectMap$Entry:value()),
		PrimitiveCollections$EmptyIntObjectMap:<init>(PrimitiveCollections$1) to listOf(PrimitiveCollections$EmptyIntObjectMap:<init>()),
		PrimitiveCollections$UnmodifiableIntObjectMap:get(int) to listOf(IntObjectMap:get(int)),
		PrimitiveCollections$UnmodifiableIntObjectMap:size() to listOf(IntObjectMap:size()),
		PrimitiveCollections$UnmodifiableIntObjectMap:isEmpty() to listOf(IntObjectMap:isEmpty()),
		PrimitiveCollections$UnmodifiableIntObjectMap:containsKey(int) to listOf(IntObjectMap:containsKey(int)),
		PrimitiveCollections$UnmodifiableIntObjectMap:containsValue(Object) to listOf(IntObjectMap:containsValue(Object)),
		PrimitiveCollections$UnmodifiableIntObjectMap:iterator() to listOf(IntObjectMap:entries(), PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:<init>(PrimitiveCollections$UnmodifiableIntObjectMap-Iterator)),
		PrimitiveCollections$UnmodifiableIntObjectMap:keys() to listOf(IntObjectMap:keys()),
		PrimitiveCollections$UnmodifiableIntObjectMap:values(Class) to listOf(IntObjectMap:values(Class)),
		PrimitiveCollections$UnmodifiableIntObjectMap:values() to listOf(IntObjectMap:values()),
		PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:next() to listOf(PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:hasNext(), PrimitiveCollections$UnmodifiableIntObjectMap$EntryImpl:<init>(PrimitiveCollections$UnmodifiableIntObjectMap-IntObjectMap$Entry), PrimitiveCollections$UnmodifiableIntObjectMap$IteratorImpl:next()),
		IntObjectHashMap$1$1:<init>(IntObjectHashMap$1) to listOf(IntObjectHashMap:iterator()),
		IntObjectHashMap$1$1:next() to listOf(IntObjectMap$Entry:value()),
		AttributeKey$1:<init>() to listOf(ConstantPool:<init>()),
		AttributeKey$1:newConstant(int-String) to listOf(AttributeKey:<init>(int-String-AttributeKey$1), AttributeKey$1:newConstant(int-String)),
		ThreadDeathWatcher$Watcher:run() to listOf(ThreadDeathWatcher$Watcher:fetchWatchees(), ThreadDeathWatcher$Watcher:notifyWatchees(), ThreadDeathWatcher$Watcher:fetchWatchees(), ThreadDeathWatcher$Watcher:notifyWatchees(), ThreadDeathWatcher:access$100(), ThreadDeathWatcher:access$200(), ThreadDeathWatcher:access$100(), ThreadDeathWatcher:access$200()),
		ThreadDeathWatcher$Watcher:fetchWatchees() to listOf(ThreadDeathWatcher:access$100()),
		ThreadDeathWatcher$Watcher:notifyWatchees() to listOf(ThreadDeathWatcher:access$300(), InternalLogger:warn(String-Throwable)),
		ThreadDeathWatcher$Watcher:<init>(ThreadDeathWatcher$1) to listOf(ThreadDeathWatcher$Watcher:<init>()),
		AbstractConstant:toString() to listOf(AbstractConstant:name()),
		AbstractConstant:compareTo(AbstractConstant) to listOf(AbstractConstant:hashCode(), AbstractConstant:hashCode(), AbstractConstant:uniquifier(), AbstractConstant:uniquifier()),
		AbstractConstant:uniquifier() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent:directBufferAddress(ByteBuffer), ThreadLocalRandom:current(), ThreadLocalRandom:nextLong()),
		AbstractConstant:compareTo(Object) to listOf(AbstractConstant:compareTo(AbstractConstant)),
		DefaultAttributeMap$DefaultAttribute:setIfAbsent(Object) to listOf(DefaultAttributeMap$DefaultAttribute:compareAndSet(Object-Object), DefaultAttributeMap$DefaultAttribute:get()),
		DefaultAttributeMap$DefaultAttribute:getAndRemove() to listOf(DefaultAttributeMap$DefaultAttribute:getAndSet(Object), DefaultAttributeMap$DefaultAttribute:remove0()),
		DefaultAttributeMap$DefaultAttribute:remove() to listOf(DefaultAttributeMap$DefaultAttribute:set(Object), DefaultAttributeMap$DefaultAttribute:remove0()),
		Signal:valueOf(String) to listOf(ConstantPool:valueOf(String)),
		Signal:valueOf(Class-String) to listOf(ConstantPool:valueOf(Class-String)),
		Signal:<init>(int-String) to listOf(Signal$SignalConstant:<init>(int-String)),
		Signal:id() to listOf(Signal$SignalConstant:id()),
		Signal:name() to listOf(Signal$SignalConstant:name()),
		Signal:compareTo(Signal) to listOf(Signal$SignalConstant:compareTo(AbstractConstant)),
		Signal:toString() to listOf(Signal:name()),
		Signal:compareTo(Object) to listOf(Signal:compareTo(Signal)),
		Signal:<init>(int-String-Signal$1) to listOf(Signal:<init>(int-String)),
		Signal:<clinit>() to listOf(Signal$1:<init>()),
		ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object) to listOf(ResourceLeakDetector:access$200(ResourceLeakDetector), ResourceLeakDetector:getLevel(), ResourceLeakDetector$Level:ordinal(), ResourceLeakDetector$Level:ordinal(), ResourceLeakDetector:newRecord(Object-int), ResourceLeakDetector:access$300(ResourceLeakDetector), ResourceLeakDetector:access$300(ResourceLeakDetector), ResourceLeakDetector:access$300(ResourceLeakDetector), ResourceLeakDetector:access$300(ResourceLeakDetector), ResourceLeakDetector:access$300(ResourceLeakDetector), ResourceLeakDetector:access$408(ResourceLeakDetector)),
		ResourceLeakDetector$DefaultResourceLeak:record() to listOf(ResourceLeakDetector$DefaultResourceLeak:record0(Object-int)),
		ResourceLeakDetector$DefaultResourceLeak:record(Object) to listOf(ResourceLeakDetector$DefaultResourceLeak:record0(Object-int)),
		ResourceLeakDetector$DefaultResourceLeak:record0(Object-int) to listOf(ResourceLeakDetector:newRecord(Object-int)),
		ResourceLeakDetector$DefaultResourceLeak:close() to listOf(ResourceLeakDetector:access$300(ResourceLeakDetector), ResourceLeakDetector:access$410(ResourceLeakDetector)),
		Recycler$Stack:<init>(Recycler-Thread-int) to listOf(Recycler:access$1400()),
		Recycler$Stack:pop() to listOf(Recycler$Stack:scavenge(), Recycler$DefaultHandle:access$900(Recycler$DefaultHandle), Recycler$DefaultHandle:access$1300(Recycler$DefaultHandle), Recycler$DefaultHandle:access$1302(Recycler$DefaultHandle-int), Recycler$DefaultHandle:access$902(Recycler$DefaultHandle-int)),
		Recycler$Stack:scavenge() to listOf(Recycler$Stack:scavengeSome()),
		Recycler$Stack:scavengeSome() to listOf(Recycler$WeakOrderQueue:transfer(Recycler$Stack), Recycler$WeakOrderQueue:access$1500(Recycler$WeakOrderQueue), Recycler$WeakOrderQueue:access$1600(Recycler$WeakOrderQueue), Recycler$WeakOrderQueue:hasFinalData(), Recycler$WeakOrderQueue:transfer(Recycler$Stack), Recycler$WeakOrderQueue:access$1502(Recycler$WeakOrderQueue-Recycler$WeakOrderQueue)),
		Recycler$Stack:push(Recycler$DefaultHandle) to listOf(Recycler$DefaultHandle:access$1300(Recycler$DefaultHandle), Recycler$DefaultHandle:access$900(Recycler$DefaultHandle), Recycler:access$1700(), Recycler$DefaultHandle:access$902(Recycler$DefaultHandle-int), Recycler$DefaultHandle:access$1302(Recycler$DefaultHandle-int)),
		Recycler$Stack:newHandle() to listOf(Recycler$DefaultHandle:<init>(Recycler$Stack)),
		HashedWheelTimer$HashedWheelBucket:expireTimeouts(long) to listOf(HashedWheelTimer$HashedWheelTimeout:access$800(HashedWheelTimer$HashedWheelTimeout), HashedWheelTimer$HashedWheelTimeout:expire(), HashedWheelTimer$HashedWheelTimeout:access$800(HashedWheelTimer$HashedWheelTimeout), HashedWheelTimer$HashedWheelTimeout:isCancelled(), HashedWheelTimer$HashedWheelBucket:remove(HashedWheelTimer$HashedWheelTimeout)),
		HashedWheelTimer$HashedWheelBucket:clearTimeouts(Set) to listOf(HashedWheelTimer$HashedWheelBucket:pollTimeout(), HashedWheelTimer$HashedWheelTimeout:isExpired(), HashedWheelTimer$HashedWheelTimeout:isCancelled()),
		HashedWheelTimer$HashedWheelBucket:<init>(HashedWheelTimer$1) to listOf(HashedWheelTimer$HashedWheelBucket:<init>()),
		PlatformDependent0$1:run() to listOf(PlatformDependent0$1:run()),
		MpscLinkedQueue$1:<init>(MpscLinkedQueue) to listOf(MpscLinkedQueue:access$000(MpscLinkedQueue)),
		MpscLinkedQueue$1:next() to listOf(MpscLinkedQueueNode:value(), MpscLinkedQueueNode:next()),
		MpscLinkedQueue$DefaultNode:<init>(Object) to listOf(MpscLinkedQueueNode:<init>()),
		PlatformDependent0:throwException(Throwable) to listOf(Unsafe:throwException(Throwable)),
		PlatformDependent0:freeDirectBuffer(ByteBuffer) to listOf(Cleaner0:freeDirectBuffer(ByteBuffer)),
		PlatformDependent0:directBufferAddress(ByteBuffer) to listOf(PlatformDependent0:getLong(Object-long)),
		PlatformDependent0:arrayBaseOffset() to listOf(Unsafe:arrayBaseOffset(Class)),
		PlatformDependent0:getObject(Object-long) to listOf(Unsafe:getObject(Object-long)),
		PlatformDependent0:getObjectVolatile(Object-long) to listOf(Unsafe:getObjectVolatile(Object-long)),
		PlatformDependent0:getInt(Object-long) to listOf(Unsafe:getInt(Object-long)),
		PlatformDependent0:getLong(Object-long) to listOf(Unsafe:getLong(Object-long)),
		PlatformDependent0:objectFieldOffset(Field) to listOf(Unsafe:objectFieldOffset(Field)),
		PlatformDependent0:getByte(long) to listOf(Unsafe:getByte(long)),
		PlatformDependent0:getShort(long) to listOf(Unsafe:getShort(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long)),
		PlatformDependent0:getInt(long) to listOf(Unsafe:getInt(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long)),
		PlatformDependent0:getLong(long) to listOf(Unsafe:getLong(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long)),
		PlatformDependent0:putOrderedObject(Object-long-Object) to listOf(Unsafe:putOrderedObject(Object-long-Object)),
		PlatformDependent0:putByte(long-byte) to listOf(Unsafe:putByte(long-byte)),
		PlatformDependent0:putShort(long-short) to listOf(Unsafe:putShort(long-short), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte)),
		PlatformDependent0:putInt(long-int) to listOf(Unsafe:putInt(long-int), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte)),
		PlatformDependent0:putLong(long-long) to listOf(Unsafe:putLong(long-long), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte)),
		PlatformDependent0:copyMemory(long-long-long) to listOf(Unsafe:copyMemory(long-long-long)),
		PlatformDependent0:copyMemory(Object-long-Object-long-long) to listOf(Unsafe:copyMemory(Object-long-Object-long-long)),
		PlatformDependent0:newAtomicReferenceFieldUpdater(Class-String) to listOf(UnsafeAtomicReferenceFieldUpdater:<init>(Unsafe-Class-String)),
		PlatformDependent0:newAtomicIntegerFieldUpdater(Class-String) to listOf(UnsafeAtomicIntegerFieldUpdater:<init>(Unsafe-Class-String)),
		PlatformDependent0:newAtomicLongFieldUpdater(Class-String) to listOf(UnsafeAtomicLongFieldUpdater:<init>(Unsafe-Class-String)),
		PlatformDependent0:getClassLoader(Class) to listOf(PlatformDependent0$1:<init>(Class)),
		PlatformDependent0:getContextClassLoader() to listOf(PlatformDependent0$2:<init>()),
		PlatformDependent0:getSystemClassLoader() to listOf(PlatformDependent0$3:<init>()),
		PlatformDependent0:addressSize() to listOf(Unsafe:addressSize()),
		PlatformDependent0:allocateMemory(long) to listOf(Unsafe:allocateMemory(long)),
		PlatformDependent0:freeMemory(long) to listOf(Unsafe:freeMemory(long)),
		PlatformDependent0:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String), InternalLogger:debug(String), InternalLogger:debug(String), PlatformDependent0:objectFieldOffset(Field), SystemPropertyUtil:get(String-String), InternalLogger:debug(String-Object)),
		RecyclableArrayList:newInstance() to listOf(RecyclableArrayList:newInstance(int)),
		RecyclableArrayList:newInstance(int) to listOf(Recycler:get(), RecyclableArrayList:ensureCapacity(int)),
		RecyclableArrayList:<init>(Recycler$Handle) to listOf(RecyclableArrayList:<init>(Recycler$Handle-int)),
		RecyclableArrayList:addAll(Collection) to listOf(RecyclableArrayList:checkNullElements(Collection)),
		RecyclableArrayList:addAll(int-Collection) to listOf(RecyclableArrayList:checkNullElements(Collection)),
		RecyclableArrayList:recycle() to listOf(RecyclableArrayList:clear(), Recycler:recycle(Object-Recycler$Handle)),
		RecyclableArrayList:<init>(Recycler$Handle-RecyclableArrayList$1) to listOf(RecyclableArrayList:<init>(Recycler$Handle)),
		RecyclableArrayList:<clinit>() to listOf(RecyclableArrayList$1:<init>()),
		ThreadLocalRandom:getInitialSeedUniquifier() to listOf(InternalLogger:warn(String), InternalLogger:warn(String-Object)),
		ThreadLocalRandom:newSeed() to listOf(ThreadLocalRandom:getInitialSeedUniquifier(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), InternalLogger:debug(String)),
		ThreadLocalRandom:<init>() to listOf(ThreadLocalRandom:newSeed()),
		ThreadLocalRandom:current() to listOf(InternalThreadLocalMap:get(), InternalThreadLocalMap:random()),
		ThreadLocalRandom:nextInt(int-int) to listOf(ThreadLocalRandom:nextInt(int)),
		ThreadLocalRandom:nextLong(long) to listOf(ThreadLocalRandom:next(int), ThreadLocalRandom:nextInt(int)),
		ThreadLocalRandom:nextLong(long-long) to listOf(ThreadLocalRandom:nextLong(long)),
		ThreadLocalRandom:nextDouble(double) to listOf(ThreadLocalRandom:nextDouble()),
		ThreadLocalRandom:nextDouble(double-double) to listOf(ThreadLocalRandom:nextDouble()),
		ThreadLocalRandom:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getLong(String-long), ThreadLocalRandom$1:<init>(String), ThreadLocalRandom$2:<init>()),
		TypeParameterMatcher$ReflectiveMatcher:<init>(Class) to listOf(TypeParameterMatcher:<init>()),
		InternalThreadLocalMap:getIfSet() to listOf(FastThreadLocalAccess:threadLocalMap()),
		InternalThreadLocalMap:get() to listOf(InternalThreadLocalMap:fastGet(FastThreadLocalAccess), InternalThreadLocalMap:slowGet()),
		InternalThreadLocalMap:fastGet(FastThreadLocalAccess) to listOf(FastThreadLocalAccess:threadLocalMap(), InternalThreadLocalMap:<init>(), FastThreadLocalAccess:setThreadLocalMap(InternalThreadLocalMap)),
		InternalThreadLocalMap:slowGet() to listOf(InternalThreadLocalMap:<init>()),
		InternalThreadLocalMap:remove() to listOf(FastThreadLocalAccess:setThreadLocalMap(InternalThreadLocalMap)),
		InternalThreadLocalMap:<init>() to listOf(InternalThreadLocalMap:newIndexedVariableTable(), UnpaddedInternalThreadLocalMap:<init>(Object[])),
		InternalThreadLocalMap:random() to listOf(ThreadLocalRandom:<init>()),
		InternalThreadLocalMap:setIndexedVariable(int-Object) to listOf(InternalThreadLocalMap:expandIndexedVariableTableAndSet(int-Object)),
		RecyclableMpscLinkedQueueNode:<init>(Recycler$Handle) to listOf(MpscLinkedQueueNode:<init>()),
		RecyclableMpscLinkedQueueNode:unlink() to listOf(MpscLinkedQueueNode:unlink(), Recycler$Handle:recycle(Object)),
		ThreadLocalRandom$1:run() to listOf(ThreadLocalRandom:access$002(long), ThreadLocalRandom:access$100()),
		TypeParameterMatcher:get(Class) to listOf(InternalThreadLocalMap:get(), InternalThreadLocalMap:typeParameterMatcherGetCache(), PlatformDependent:hasJavassist(), JavassistTypeParameterMatcherGenerator:generate(Class), TypeParameterMatcher:match(Object), TypeParameterMatcher$ReflectiveMatcher:<init>(Class)),
		TypeParameterMatcher:find(Object-Class-String) to listOf(InternalThreadLocalMap:get(), InternalThreadLocalMap:typeParameterMatcherFindCache(), TypeParameterMatcher:find0(Object-Class-String), TypeParameterMatcher:get(Class)),
		TypeParameterMatcher:find0(Object-Class-String) to listOf(TypeParameterMatcher:fail(Class-String), TypeParameterMatcher:fail(Class-String)),
		TypeParameterMatcher:<clinit>() to listOf(NoOpTypeParameterMatcher:<init>()),
		StringUtil:byteToHexStringPadded(Appendable-int) to listOf(StringUtil:byteToHexStringPadded(int), PlatformDependent:throwException(Throwable)),
		StringUtil:toHexStringPadded(byte[]) to listOf(StringUtil:toHexStringPadded(byte[]-int-int)),
		StringUtil:toHexStringPadded(byte[]-int-int) to listOf(StringUtil:toHexStringPadded(Appendable-byte[]-int-int)),
		StringUtil:toHexStringPadded(Appendable-byte[]) to listOf(StringUtil:toHexStringPadded(Appendable-byte[]-int-int)),
		StringUtil:toHexStringPadded(Appendable-byte[]-int-int) to listOf(StringUtil:byteToHexStringPadded(Appendable-int)),
		StringUtil:byteToHexString(Appendable-int) to listOf(StringUtil:byteToHexString(int), PlatformDependent:throwException(Throwable)),
		StringUtil:toHexString(byte[]) to listOf(StringUtil:toHexString(byte[]-int-int)),
		StringUtil:toHexString(byte[]-int-int) to listOf(StringUtil:toHexString(Appendable-byte[]-int-int)),
		StringUtil:toHexString(Appendable-byte[]) to listOf(StringUtil:toHexString(Appendable-byte[]-int-int)),
		StringUtil:toHexString(Appendable-byte[]-int-int) to listOf(StringUtil:byteToHexString(Appendable-int), StringUtil:toHexStringPadded(Appendable-byte[]-int-int)),
		StringUtil:simpleClassName(Object) to listOf(StringUtil:simpleClassName(Class)),
		StringUtil:escapeCsv(CharSequence) to listOf(ObjectUtil:checkNotNull(Object-String), StringUtil:isDoubleQuote(char), StringUtil:isDoubleQuote(char), StringUtil:isDoubleQuote(char), StringUtil:isDoubleQuote(char)),
		JavassistTypeParameterMatcherGenerator:appendClassPath(ClassPath) to listOf(ClassPool:appendClassPath(ClassPath)),
		JavassistTypeParameterMatcherGenerator:appendClassPath(String) to listOf(ClassPool:appendClassPath(String)),
		JavassistTypeParameterMatcherGenerator:generate(Class) to listOf(PlatformDependent:getContextClassLoader(), PlatformDependent:getSystemClassLoader(), JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader)),
		JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader) to listOf(JavassistTypeParameterMatcherGenerator:typeName(Class), ClassPool:getAndRename(String-String), CtClass:getModifiers(), CtClass:setModifiers(int), CtClass:getDeclaredMethod(String), CtMethod:setBody(String), CtClass:toBytecode(), CtClass:detach(), InternalLogger:debug(String-Object)),
		JavassistTypeParameterMatcherGenerator:typeName(Class) to listOf(JavassistTypeParameterMatcherGenerator:typeName(Class)),
		JavassistTypeParameterMatcherGenerator:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ClassPool:<init>(boolean), ClassClassPath:<init>(Class), ClassPool:appendClassPath(ClassPath)),
		UnsafeAtomicReferenceFieldUpdater:<init>(Unsafe-Class-String) to listOf(Unsafe:objectFieldOffset(Field)),
		UnsafeAtomicReferenceFieldUpdater:compareAndSet(Object-Object-Object) to listOf(Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		UnsafeAtomicReferenceFieldUpdater:weakCompareAndSet(Object-Object-Object) to listOf(Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		UnsafeAtomicReferenceFieldUpdater:set(Object-Object) to listOf(Unsafe:putObjectVolatile(Object-long-Object)),
		UnsafeAtomicReferenceFieldUpdater:lazySet(Object-Object) to listOf(Unsafe:putOrderedObject(Object-long-Object)),
		UnsafeAtomicReferenceFieldUpdater:get(Object) to listOf(Unsafe:getObjectVolatile(Object-long)),
		OneTimeTask:<init>() to listOf(MpscLinkedQueueNode:<init>()),
		OneTimeTask:value() to listOf(OneTimeTask:value()),
		PlatformDependent0$2:run() to listOf(PlatformDependent0$2:run()),
		MpscLinkedQueueTailRef:<init>() to listOf(MpscLinkedQueuePad1:<init>()),
		MpscLinkedQueueTailRef:<clinit>() to listOf(PlatformDependent:newAtomicReferenceFieldUpdater(Class-String)),
		MpscLinkedQueueNode:clearMaybe() to listOf(MpscLinkedQueueNode:value()),
		MpscLinkedQueueNode:unlink() to listOf(MpscLinkedQueueNode:setNext(MpscLinkedQueueNode)),
		MpscLinkedQueueNode:<clinit>() to listOf(PlatformDependent:newAtomicReferenceFieldUpdater(Class-String)),
		Cleaner0:freeDirectBuffer(ByteBuffer) to listOf(PlatformDependent0:getObject(Object-long), Cleaner:clean()),
		Cleaner0:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), PlatformDependent0:hasUnsafe(), Cleaner:clean(), PlatformDependent0:objectFieldOffset(Field), InternalLogger:debug(String-Object), Cleaner0:freeDirectBuffer(ByteBuffer)),
		AppendableCharSequence:subSequence(int-int) to listOf(AppendableCharSequence:<init>(char[]), AppendableCharSequence:subSequence(int-int)),
		AppendableCharSequence:append(char) to listOf(AppendableCharSequence:append(char)),
		AppendableCharSequence:append(CharSequence) to listOf(AppendableCharSequence:append(CharSequence-int-int), AppendableCharSequence:append(CharSequence)),
		AppendableCharSequence:append(CharSequence-int-int) to listOf(AppendableCharSequence:expand(char[]-int-int), AppendableCharSequence:append(CharSequence-int-int)),
		UnsafeAtomicIntegerFieldUpdater:<init>(Unsafe-Class-String) to listOf(Unsafe:objectFieldOffset(Field)),
		UnsafeAtomicIntegerFieldUpdater:compareAndSet(Object-int-int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		UnsafeAtomicIntegerFieldUpdater:weakCompareAndSet(Object-int-int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		UnsafeAtomicIntegerFieldUpdater:set(Object-int) to listOf(Unsafe:putIntVolatile(Object-long-int)),
		UnsafeAtomicIntegerFieldUpdater:lazySet(Object-int) to listOf(Unsafe:putOrderedInt(Object-long-int)),
		UnsafeAtomicIntegerFieldUpdater:get(Object) to listOf(Unsafe:getIntVolatile(Object-long)),
		ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchEntriesTask:compute() to listOf(ConcurrentHashMapV8$SearchEntriesTask:addToPendingCount(int), ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchEntriesTask:fork(), ConcurrentHashMapV8$SearchEntriesTask:advance(), ConcurrentHashMapV8$SearchEntriesTask:propagateCompletion(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$SearchEntriesTask:quietlyCompleteRoot()),
		ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchValuesTask:compute() to listOf(ConcurrentHashMapV8$SearchValuesTask:addToPendingCount(int), ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchValuesTask:fork(), ConcurrentHashMapV8$SearchValuesTask:advance(), ConcurrentHashMapV8$SearchValuesTask:propagateCompletion(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$SearchValuesTask:quietlyCompleteRoot()),
		ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8$TreeNode:find(int-Object) to listOf(ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class)),
		ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class) to listOf(ConcurrentHashMapV8:comparableClassFor(Object), ConcurrentHashMapV8:compareComparables(Class-Object-Object), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class)),
		CountedCompleter:<init>(CountedCompleter-int) to listOf(ForkJoinTask:<init>()),
		CountedCompleter:<init>(CountedCompleter) to listOf(ForkJoinTask:<init>()),
		CountedCompleter:<init>() to listOf(ForkJoinTask:<init>()),
		CountedCompleter:addToPendingCount(int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:compareAndSetPendingCount(int-int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:decrementPendingCountUnlessZero() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:tryComplete() to listOf(CountedCompleter:onCompletion(CountedCompleter), CountedCompleter:quietlyComplete(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:propagateCompletion() to listOf(CountedCompleter:quietlyComplete(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:complete(Object) to listOf(CountedCompleter:setRawResult(Object), CountedCompleter:onCompletion(CountedCompleter), CountedCompleter:quietlyComplete(), CountedCompleter:tryComplete()),
		CountedCompleter:firstComplete() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:nextComplete() to listOf(CountedCompleter:firstComplete(), CountedCompleter:quietlyComplete()),
		CountedCompleter:quietlyCompleteRoot() to listOf(CountedCompleter:quietlyComplete()),
		CountedCompleter:internalPropagateException(Throwable) to listOf(CountedCompleter:onExceptionalCompletion(Throwable-CountedCompleter), CountedCompleter:recordExceptionalCompletion(Throwable)),
		CountedCompleter:exec() to listOf(CountedCompleter:compute()),
		CountedCompleter:getUnsafe() to listOf(Unsafe:getUnsafe(), CountedCompleter$1:<init>()),
		CountedCompleter:<clinit>() to listOf(CountedCompleter:getUnsafe(), Unsafe:objectFieldOffset(Field)),
		ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]) to listOf(CountedCompleter:<init>(CountedCompleter)),
		ConcurrentHashMapV8$BulkTask:advance() to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int)),
		ConcurrentHashMapV8$EntryIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntryIterator:next() to listOf(ConcurrentHashMapV8$EntryIterator:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$EntryIterator:next()),
		ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$BaseIterator:advance()),
		ConcurrentHashMapV8$BaseIterator:remove() to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ForkJoinTask$1:run() to listOf(ForkJoinTask$1:run()),
		CountedCompleter$1:run() to listOf(CountedCompleter$1:run()),
		ForkJoinTask$AdaptedRunnableAction:<init>(Runnable) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$AdaptedRunnableAction:run() to listOf(ForkJoinTask$AdaptedRunnableAction:invoke()),
		ForkJoinTask$AdaptedRunnableAction:setRawResult(Object) to listOf(ForkJoinTask$AdaptedRunnableAction:setRawResult(Void)),
		ForkJoinTask$AdaptedRunnableAction:getRawResult() to listOf(ForkJoinTask$AdaptedRunnableAction:getRawResult()),
		ConcurrentHashMapV8$ReservationNode:<init>() to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int)),
		ConcurrentHashMapV8$EntrySpliterator:trySplit() to listOf(ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySpliterator:forEachRemaining(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$EntrySpliterator:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$EntrySpliterator:tryAdvance(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$EntrySpliterator:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$Action:apply(Object)),
		ForkJoinWorkerThread:<init>(ForkJoinPool) to listOf(ForkJoinPool:registerWorker(ForkJoinWorkerThread)),
		ForkJoinWorkerThread:run() to listOf(ForkJoinWorkerThread:onStart(), ForkJoinPool:runWorker(ForkJoinPool$WorkQueue), ForkJoinWorkerThread:onTermination(Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinWorkerThread:onTermination(Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinWorkerThread:onTermination(Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable)),
		ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:advance(), ConcurrentHashMapV8$ObjectByObjectToDouble:apply(Object-Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$1:run() to listOf(ConcurrentHashMapV8$1:run()),
		ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceKeysToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceKeysToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceKeysToIntTask:fork(), ConcurrentHashMapV8$MapReduceKeysToIntTask:advance(), ConcurrentHashMapV8$ObjectToInt:apply(Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceKeysToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8$ForwardingNode:find(int-Object) to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:find(int-Object)),
		ForkJoinPool:acquirePlock() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ThreadLocalRandom:current(), ThreadLocalRandom:nextInt(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinPool:tryAddWorker() to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$ForkJoinWorkerThreadFactory:newThread(ForkJoinPool), ForkJoinWorkerThread:start(), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable)),
		ForkJoinPool:registerWorker(ForkJoinWorkerThread) to listOf(ForkJoinWorkerThread:setDaemon(boolean), ForkJoinWorkerThread:setUncaughtExceptionHandler(Thread$UncaughtExceptionHandler), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool$WorkQueue:<init>(ForkJoinPool-ForkJoinWorkerThread-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), ForkJoinWorkerThread:setName(String)),
		ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool:tryTerminate(boolean-boolean), ForkJoinPool$WorkQueue:cancelAll(), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object), ForkJoinPool:tryAddWorker(), ForkJoinTask:helpExpungeStaleExceptions(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinPool:externalPush(ForkJoinTask) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:putOrderedObject(Object-long-Object), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool:fullExternalPush(ForkJoinTask)),
		ForkJoinPool:fullExternalPush(ForkJoinTask) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool$Submitter:<init>(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool$WorkQueue:growArray(), Unsafe:putOrderedObject(Object-long-Object), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool$WorkQueue:<init>(ForkJoinPool-ForkJoinWorkerThread-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int)),
		ForkJoinPool:incrementActiveCount() to listOf(Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue) to listOf(ForkJoinPool:tryAddWorker(), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object)),
		ForkJoinPool:runWorker(ForkJoinPool$WorkQueue) to listOf(ForkJoinPool$WorkQueue:growArray(), ForkJoinPool:scan(ForkJoinPool$WorkQueue-int)),
		ForkJoinPool:scan(ForkJoinPool$WorkQueue-int) to listOf(Unsafe:getObjectVolatile(Object-long), ForkJoinPool:helpRelease(long-ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue-ForkJoinPool$WorkQueue-int), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool$WorkQueue:runTask(ForkJoinTask), ForkJoinPool:awaitWork(ForkJoinPool$WorkQueue-long-int), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:awaitWork(ForkJoinPool$WorkQueue-long-int) to listOf(ForkJoinPool:tryTerminate(boolean-boolean), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:putObject(Object-long-Object), Unsafe:park(boolean-long), Unsafe:putObject(Object-long-Object), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:helpRelease(long-ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue-ForkJoinPool$WorkQueue-int) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object)),
		ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask) to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int), ForkJoinTask:doExec(), ForkJoinPool$WorkQueue:pop()),
		ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter) to listOf(ForkJoinPool$WorkQueue:internalPopAndExecCC(CountedCompleter), ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter)),
		ForkJoinPool:tryCompensate(long) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$ForkJoinWorkerThreadFactory:newThread(ForkJoinPool), ForkJoinWorkerThread:start(), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable)),
		ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask) to listOf(ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask), ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter), ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinPool:tryCompensate(long), ForkJoinTask:trySetSignal(), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:helpJoinOnce(ForkJoinPool$WorkQueue-ForkJoinTask) to listOf(ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask), ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter), ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask)),
		ForkJoinPool:findNonEmptyStealQueue() to listOf(ThreadLocalRandom:current(), ThreadLocalRandom:nextInt()),
		ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue) to listOf(ForkJoinPool$WorkQueue:nextLocalTask(), ForkJoinTask:doExec(), ForkJoinPool:findNonEmptyStealQueue(), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$WorkQueue:pollAt(int), ForkJoinTask:doExec(), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:nextTaskFor(ForkJoinPool$WorkQueue) to listOf(ForkJoinPool$WorkQueue:nextLocalTask(), ForkJoinPool:findNonEmptyStealQueue(), ForkJoinPool$WorkQueue:pollAt(int)),
		ForkJoinPool:tryTerminate(boolean-boolean) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), ForkJoinPool$WorkQueue:isEmpty(), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$WorkQueue:cancelAll(), Unsafe:unpark(Object), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object)),
		ForkJoinPool:tryExternalUnpush(ForkJoinTask) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ForkJoinPool:externalHelpComplete(CountedCompleter) to listOf(ForkJoinPool$WorkQueue:externalPopAndExecCC(CountedCompleter), ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter)),
		ForkJoinPool:<init>() to listOf(ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean)),
		ForkJoinPool:<init>(int) to listOf(ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean)),
		ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean) to listOf(ForkJoinPool:checkParallelism(int), ForkJoinPool:checkFactory(ForkJoinPool$ForkJoinWorkerThreadFactory), ForkJoinPool:nextPoolId(), ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-int-String), ForkJoinPool:checkPermission()),
		ForkJoinPool:invoke(ForkJoinTask) to listOf(ForkJoinPool:externalPush(ForkJoinTask), ForkJoinTask:join()),
		ForkJoinPool:execute(ForkJoinTask) to listOf(ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinPool:execute(Runnable) to listOf(ForkJoinTask$RunnableExecuteAction:<init>(Runnable), ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinPool:submit(ForkJoinTask) to listOf(ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinPool:submit(Callable) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinPool:submit(Callable)),
		ForkJoinPool:submit(Runnable-Object) to listOf(ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinPool:submit(Runnable-Object)),
		ForkJoinPool:submit(Runnable) to listOf(ForkJoinTask$AdaptedRunnableAction:<init>(Runnable), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinPool:submit(Runnable)),
		ForkJoinPool:invokeAll(Collection) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinTask:quietlyJoin()),
		ForkJoinPool:getRunningThreadCount() to listOf(ForkJoinPool$WorkQueue:isApparentlyUnblocked()),
		ForkJoinPool:getQueuedTaskCount() to listOf(ForkJoinPool$WorkQueue:queueSize()),
		ForkJoinPool:getQueuedSubmissionCount() to listOf(ForkJoinPool$WorkQueue:queueSize()),
		ForkJoinPool:hasQueuedSubmissions() to listOf(ForkJoinPool$WorkQueue:isEmpty()),
		ForkJoinPool:pollSubmission() to listOf(ForkJoinPool$WorkQueue:poll()),
		ForkJoinPool:drainTasksTo(Collection) to listOf(ForkJoinPool$WorkQueue:poll()),
		ForkJoinPool:toString() to listOf(ForkJoinPool$WorkQueue:queueSize(), ForkJoinPool$WorkQueue:isApparentlyUnblocked()),
		ForkJoinPool:shutdown() to listOf(ForkJoinPool:checkPermission(), ForkJoinPool:tryTerminate(boolean-boolean)),
		ForkJoinPool:shutdownNow() to listOf(ForkJoinPool:checkPermission(), ForkJoinPool:tryTerminate(boolean-boolean)),
		ForkJoinPool:awaitTermination(long-TimeUnit) to listOf(ForkJoinPool:awaitQuiescence(long-TimeUnit), ForkJoinPool:isTerminated(), ForkJoinPool:isTerminated()),
		ForkJoinPool:awaitQuiescence(long-TimeUnit) to listOf(ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue), ForkJoinPool:isQuiescent(), ForkJoinPool$WorkQueue:pollAt(int), ForkJoinTask:doExec()),
		ForkJoinPool:quiesceCommonPool() to listOf(ForkJoinPool:awaitQuiescence(long-TimeUnit)),
		ForkJoinPool:managedBlock(ForkJoinPool$ManagedBlocker) to listOf(ForkJoinPool$ManagedBlocker:isReleasable(), ForkJoinPool:tryCompensate(long), ForkJoinPool$ManagedBlocker:isReleasable(), ForkJoinPool$ManagedBlocker:block(), ForkJoinPool:incrementActiveCount(), ForkJoinPool:incrementActiveCount(), ForkJoinPool$ManagedBlocker:isReleasable(), ForkJoinPool$ManagedBlocker:block()),
		ForkJoinPool:newTaskFor(Runnable-Object) to listOf(ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object)),
		ForkJoinPool:newTaskFor(Callable) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable)),
		ForkJoinPool:makeCommonPool() to listOf(ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-int-String)),
		ForkJoinPool:getUnsafe() to listOf(Unsafe:getUnsafe(), ForkJoinPool$2:<init>()),
		ForkJoinPool:access$000() to listOf(ForkJoinPool:getUnsafe()),
		ForkJoinPool:access$100() to listOf(ForkJoinPool:makeCommonPool()),
		ForkJoinPool:<clinit>() to listOf(ForkJoinPool:getUnsafe(), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:arrayBaseOffset(Class), Unsafe:arrayIndexScale(Class), ForkJoinPool$DefaultForkJoinWorkerThreadFactory:<init>(), ForkJoinPool$1:<init>()),
		ForkJoinTask$RunnableExecuteAction:<init>(Runnable) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$RunnableExecuteAction:internalPropagateException(Throwable) to listOf(ForkJoinTask$RunnableExecuteAction:rethrow(Throwable)),
		ForkJoinTask$RunnableExecuteAction:setRawResult(Object) to listOf(ForkJoinTask$RunnableExecuteAction:setRawResult(Void)),
		ForkJoinTask$RunnableExecuteAction:getRawResult() to listOf(ForkJoinTask$RunnableExecuteAction:getRawResult()),
		ForkJoinTask:setCompletion(int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:doExec() to listOf(ForkJoinTask:exec(), ForkJoinTask:setExceptionalCompletion(Throwable), ForkJoinTask:setCompletion(int)),
		ForkJoinTask:trySetSignal() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:externalAwaitDone() to listOf(ForkJoinPool:externalHelpComplete(CountedCompleter), ForkJoinPool:tryExternalUnpush(ForkJoinTask), ForkJoinTask:doExec(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:externalInterruptibleAwaitDone() to listOf(ForkJoinPool:externalHelpComplete(CountedCompleter), ForkJoinPool:tryExternalUnpush(ForkJoinTask), ForkJoinTask:doExec(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:doJoin() to listOf(ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask), ForkJoinTask:doExec(), ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinTask:externalAwaitDone()),
		ForkJoinTask:doInvoke() to listOf(ForkJoinTask:doExec(), ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinTask:externalAwaitDone()),
		ForkJoinTask:recordExceptionalCompletion(Throwable) to listOf(ForkJoinTask:expungeStaleExceptions(), ForkJoinTask$ExceptionNode:<init>(ForkJoinTask-Throwable-ForkJoinTask$ExceptionNode), ForkJoinTask$ExceptionNode:get(), ForkJoinTask:setCompletion(int)),
		ForkJoinTask:setExceptionalCompletion(Throwable) to listOf(ForkJoinTask:recordExceptionalCompletion(Throwable), ForkJoinTask:internalPropagateException(Throwable)),
		ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask) to listOf(ForkJoinTask:cancel(boolean)),
		ForkJoinTask:clearExceptionalCompletion() to listOf(ForkJoinTask$ExceptionNode:get(), ForkJoinTask:expungeStaleExceptions()),
		ForkJoinTask:getThrowableException() to listOf(ForkJoinTask:expungeStaleExceptions(), ForkJoinTask$ExceptionNode:get()),
		ForkJoinTask:expungeStaleExceptions() to listOf(ForkJoinTask$ExceptionNode:get()),
		ForkJoinTask:helpExpungeStaleExceptions() to listOf(ForkJoinTask:expungeStaleExceptions()),
		ForkJoinTask:rethrow(Throwable) to listOf(ForkJoinTask:uncheckedThrow(Throwable)),
		ForkJoinTask:reportException(int) to listOf(ForkJoinTask:getThrowableException(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinTask:fork() to listOf(ForkJoinPool$WorkQueue:push(ForkJoinTask), ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinTask:join() to listOf(ForkJoinTask:doJoin(), ForkJoinTask:reportException(int), ForkJoinTask:getRawResult()),
		ForkJoinTask:invoke() to listOf(ForkJoinTask:doInvoke(), ForkJoinTask:reportException(int), ForkJoinTask:getRawResult()),
		ForkJoinTask:invokeAll(ForkJoinTask-ForkJoinTask) to listOf(ForkJoinTask:fork(), ForkJoinTask:doInvoke(), ForkJoinTask:reportException(int), ForkJoinTask:doJoin(), ForkJoinTask:reportException(int)),
		ForkJoinTask:invokeAll(ForkJoinTask[]) to listOf(ForkJoinTask:fork(), ForkJoinTask:doInvoke(), ForkJoinTask:getException(), ForkJoinTask:cancel(boolean), ForkJoinTask:doJoin(), ForkJoinTask:getException(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinTask:invokeAll(Collection) to listOf(ForkJoinTask:invokeAll(ForkJoinTask[]), ForkJoinTask:fork(), ForkJoinTask:doInvoke(), ForkJoinTask:getException(), ForkJoinTask:cancel(boolean), ForkJoinTask:doJoin(), ForkJoinTask:getException(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinTask:cancel(boolean) to listOf(ForkJoinTask:setCompletion(int)),
		ForkJoinTask:getException() to listOf(ForkJoinTask:getThrowableException()),
		ForkJoinTask:completeExceptionally(Throwable) to listOf(ForkJoinTask:setExceptionalCompletion(Throwable)),
		ForkJoinTask:complete(Object) to listOf(ForkJoinTask:setRawResult(Object), ForkJoinTask:setExceptionalCompletion(Throwable), ForkJoinTask:setCompletion(int)),
		ForkJoinTask:quietlyComplete() to listOf(ForkJoinTask:setCompletion(int)),
		ForkJoinTask:get() to listOf(ForkJoinTask:doJoin(), ForkJoinTask:externalInterruptibleAwaitDone(), ForkJoinTask:getThrowableException(), ForkJoinTask:getRawResult()),
		ForkJoinTask:get(long-TimeUnit) to listOf(ForkJoinPool:helpJoinOnce(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinPool:externalHelpComplete(CountedCompleter), ForkJoinPool:tryExternalUnpush(ForkJoinTask), ForkJoinTask:doExec(), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), ForkJoinPool:tryCompensate(long), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:incrementActiveCount(), ForkJoinPool:incrementActiveCount(), ForkJoinTask:getThrowableException(), ForkJoinTask:getRawResult()),
		ForkJoinTask:quietlyJoin() to listOf(ForkJoinTask:doJoin()),
		ForkJoinTask:quietlyInvoke() to listOf(ForkJoinTask:doInvoke()),
		ForkJoinTask:helpQuiesce() to listOf(ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue), ForkJoinPool:quiesceCommonPool()),
		ForkJoinTask:reinitialize() to listOf(ForkJoinTask:clearExceptionalCompletion()),
		ForkJoinTask:tryUnfork() to listOf(ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask), ForkJoinPool:tryExternalUnpush(ForkJoinTask)),
		ForkJoinTask:getQueuedTaskCount() to listOf(ForkJoinPool:commonSubmitterQueue(), ForkJoinPool$WorkQueue:queueSize()),
		ForkJoinTask:getSurplusQueuedTaskCount() to listOf(ForkJoinPool:getSurplusQueuedTaskCount()),
		ForkJoinTask:peekNextLocalTask() to listOf(ForkJoinPool:commonSubmitterQueue(), ForkJoinPool$WorkQueue:peek()),
		ForkJoinTask:pollNextLocalTask() to listOf(ForkJoinPool$WorkQueue:nextLocalTask()),
		ForkJoinTask:pollTask() to listOf(ForkJoinPool:nextTaskFor(ForkJoinPool$WorkQueue)),
		ForkJoinTask:setForkJoinTaskTag(short) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:compareAndSetForkJoinTaskTag(short-short) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:adapt(Runnable) to listOf(ForkJoinTask$AdaptedRunnableAction:<init>(Runnable)),
		ForkJoinTask:adapt(Runnable-Object) to listOf(ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object)),
		ForkJoinTask:adapt(Callable) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable)),
		ForkJoinTask:writeObject(ObjectOutputStream) to listOf(ForkJoinTask:getException()),
		ForkJoinTask:readObject(ObjectInputStream) to listOf(ForkJoinTask:setExceptionalCompletion(Throwable)),
		ForkJoinTask:getUnsafe() to listOf(Unsafe:getUnsafe(), ForkJoinTask$1:<init>()),
		ForkJoinTask:<clinit>() to listOf(ForkJoinTask:getUnsafe(), Unsafe:objectFieldOffset(Field)),
		ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceKeysToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceKeysToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:advance(), ConcurrentHashMapV8$ObjectToDouble:apply(Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$CollectionView:clear() to listOf(ConcurrentHashMapV8:clear()),
		ConcurrentHashMapV8$CollectionView:size() to listOf(ConcurrentHashMapV8:size()),
		ConcurrentHashMapV8$CollectionView:isEmpty() to listOf(ConcurrentHashMapV8:isEmpty()),
		ConcurrentHashMapV8$CollectionView:toArray() to listOf(ConcurrentHashMapV8:mappingCount(), ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:toArray(Object[]) to listOf(ConcurrentHashMapV8:mappingCount(), ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:toString() to listOf(ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:containsAll(Collection) to listOf(ConcurrentHashMapV8$CollectionView:contains(Object)),
		ConcurrentHashMapV8$CollectionView:removeAll(Collection) to listOf(ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:retainAll(Collection) to listOf(ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object) to listOf(ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8$KeySetView:contains(Object) to listOf(ConcurrentHashMapV8:containsKey(Object)),
		ConcurrentHashMapV8$KeySetView:remove(Object) to listOf(ConcurrentHashMapV8:remove(Object)),
		ConcurrentHashMapV8$KeySetView:iterator() to listOf(ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$KeySetView:add(Object) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8$KeySetView:addAll(Collection) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8$KeySetView:hashCode() to listOf(ConcurrentHashMapV8$KeySetView:iterator()),
		ConcurrentHashMapV8$KeySetView:equals(Object) to listOf(ConcurrentHashMapV8$KeySetView:containsAll(Collection)),
		ConcurrentHashMapV8$KeySetView:spliterator166() to listOf(ConcurrentHashMapV8:sumCount(), ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$KeySetView:forEach(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$KeySetView:getMap() to listOf(ConcurrentHashMapV8$CollectionView:getMap()),
		ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceMappingsToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceMappingsToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceMappingsToLongTask:fork(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:advance(), ConcurrentHashMapV8$ObjectByObjectToLong:apply(Object-Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceMappingsToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceKeysTask:fork(), ConcurrentHashMapV8$MapReduceKeysTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceKeysTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ReduceKeysTask:compute() to listOf(ConcurrentHashMapV8$ReduceKeysTask:addToPendingCount(int), ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceKeysTask:fork(), ConcurrentHashMapV8$ReduceKeysTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$ReduceKeysTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedValueTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedValueTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedValueTask:fork(), ConcurrentHashMapV8$ForEachTransformedValueTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedValueTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachMappingTask:compute() to listOf(ConcurrentHashMapV8$ForEachMappingTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction), ConcurrentHashMapV8$ForEachMappingTask:fork(), ConcurrentHashMapV8$ForEachMappingTask:advance(), ConcurrentHashMapV8$BiAction:apply(Object-Object), ConcurrentHashMapV8$ForEachMappingTask:propagateCompletion()),
		ConcurrentHashMapV8$ValuesView:<init>(ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8$ValuesView:contains(Object) to listOf(ConcurrentHashMapV8:containsValue(Object)),
		ConcurrentHashMapV8$ValuesView:remove(Object) to listOf(ConcurrentHashMapV8$ValuesView:iterator()),
		ConcurrentHashMapV8$ValuesView:iterator() to listOf(ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$ValuesView:spliterator166() to listOf(ConcurrentHashMapV8:sumCount(), ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$ValuesView:forEach(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceValuesToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceValuesToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceValuesToIntTask:fork(), ConcurrentHashMapV8$MapReduceValuesToIntTask:advance(), ConcurrentHashMapV8$ObjectToInt:apply(Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceValuesToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ForkJoinPool$2:run() to listOf(ForkJoinPool$2:run()),
		ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceMappingsTask:fork(), ConcurrentHashMapV8$MapReduceMappingsTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceMappingsTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedMappingTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedMappingTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedMappingTask:fork(), ConcurrentHashMapV8$ForEachTransformedMappingTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedMappingTask:propagateCompletion()),
		ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceEntriesToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceEntriesToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceEntriesToLongTask:fork(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:advance(), ConcurrentHashMapV8$ObjectToLong:apply(Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceEntriesToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:advance(), ConcurrentHashMapV8$ObjectToDouble:apply(Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ForkJoinPool$EmptyTask:<init>() to listOf(ForkJoinTask:<init>()),
		ForkJoinPool$EmptyTask:setRawResult(Object) to listOf(ForkJoinPool$EmptyTask:setRawResult(Void)),
		ForkJoinPool$EmptyTask:getRawResult() to listOf(ForkJoinPool$EmptyTask:getRawResult()),
		ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachKeyTask:compute() to listOf(ConcurrentHashMapV8$ForEachKeyTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachKeyTask:fork(), ConcurrentHashMapV8$ForEachKeyTask:advance(), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachKeyTask:propagateCompletion()),
		ForkJoinPool$DefaultForkJoinWorkerThreadFactory:newThread(ForkJoinPool) to listOf(ForkJoinWorkerThread:<init>(ForkJoinPool)),
		ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$AdaptedRunnable:run() to listOf(ForkJoinTask$AdaptedRunnable:invoke()),
		ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int) to listOf(Unsafe:getObjectVolatile(Object-long)),
		ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node) to listOf(Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node) to listOf(Unsafe:putObjectVolatile(Object-long-Object)),
		ConcurrentHashMapV8:<init>(int) to listOf(ConcurrentHashMapV8:tableSizeFor(int)),
		ConcurrentHashMapV8:<init>(Map) to listOf(ConcurrentHashMapV8:putAll(Map)),
		ConcurrentHashMapV8:<init>(int-float) to listOf(ConcurrentHashMapV8:<init>(int-float-int)),
		ConcurrentHashMapV8:<init>(int-float-int) to listOf(ConcurrentHashMapV8:tableSizeFor(int)),
		ConcurrentHashMapV8:size() to listOf(ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:isEmpty() to listOf(ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:get(Object) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:find(int-Object)),
		ConcurrentHashMapV8:containsKey(Object) to listOf(ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:containsValue(Object) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:put(Object-Object) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8:putVal(Object-Object-boolean) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:putAll(Map) to listOf(ConcurrentHashMapV8:tryPresize(int), ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8:remove(Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:replaceNode(Object-Object-Object) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:clear() to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:keySet() to listOf(ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object), ConcurrentHashMapV8:keySet()),
		ConcurrentHashMapV8:values() to listOf(ConcurrentHashMapV8$ValuesView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8:entrySet() to listOf(ConcurrentHashMapV8$EntrySetView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8:hashCode() to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:toString() to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:equals(Object) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:writeObject(ObjectOutputStream) to listOf(ConcurrentHashMapV8$Segment:<init>(float), ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:readObject(ObjectInputStream) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tableSizeFor(int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:putIfAbsent(Object-Object) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8:remove(Object-Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:replace(Object-Object-Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:replace(Object-Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:getOrDefault(Object-Object) to listOf(ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:forEach(ConcurrentHashMapV8$BiAction) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$BiAction:apply(Object-Object)),
		ConcurrentHashMapV8:replaceAll(ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:replaceNode(Object-Object-Object), ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:computeIfAbsent(Object-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$ReservationNode:<init>(), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:computeIfPresent(Object-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:compute(Object-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$ReservationNode:<init>(), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:merge(Object-Object-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:contains(Object) to listOf(ConcurrentHashMapV8:containsValue(Object)),
		ConcurrentHashMapV8:keys() to listOf(ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8:elements() to listOf(ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8:mappingCount() to listOf(ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:newKeySet() to listOf(ConcurrentHashMapV8:<init>(), ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object)),
		ConcurrentHashMapV8:newKeySet(int) to listOf(ConcurrentHashMapV8:<init>(int), ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object)),
		ConcurrentHashMapV8:keySet(Object) to listOf(ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object)),
		ConcurrentHashMapV8:initTable() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ConcurrentHashMapV8:addCount(long-int) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), InternalThreadLocalMap:get(), InternalThreadLocalMap:counterHashCode(), Unsafe:compareAndSwapLong(Object-long-long-long), ConcurrentHashMapV8:fullAddCount(InternalThreadLocalMap-long-IntegerHolder-boolean), ConcurrentHashMapV8:sumCount(), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8:tryPresize(int) to listOf(ConcurrentHashMapV8:tableSizeFor(int), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]) to listOf(ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]), Unsafe:putOrderedInt(Object-long-int), ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:batchFor(long) to listOf(ConcurrentHashMapV8:sumCount(), ForkJoinPool:getCommonPoolParallelism()),
		ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiAction) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction), ConcurrentHashMapV8$ForEachMappingTask:invoke()),
		ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedMappingTask:invoke()),
		ConcurrentHashMapV8:search(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference), ConcurrentHashMapV8$SearchMappingsTask:invoke()),
		ConcurrentHashMapV8:reduce(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceMappingsTask:invoke()),
		ConcurrentHashMapV8:reduceToDouble(long-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceToLong(long-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceMappingsToLongTask:invoke()),
		ConcurrentHashMapV8:reduceToInt(long-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceMappingsToIntTask:invoke()),
		ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachKeyTask:invoke()),
		ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedKeyTask:invoke()),
		ConcurrentHashMapV8:searchKeys(long-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchKeysTask:invoke()),
		ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceKeysTask:invoke()),
		ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceKeysTask:invoke()),
		ConcurrentHashMapV8:reduceKeysToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceKeysToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceKeysToLongTask:invoke()),
		ConcurrentHashMapV8:reduceKeysToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceKeysToIntTask:invoke()),
		ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachValueTask:invoke()),
		ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedValueTask:invoke()),
		ConcurrentHashMapV8:searchValues(long-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchValuesTask:invoke()),
		ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceValuesTask:invoke()),
		ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceValuesTask:invoke()),
		ConcurrentHashMapV8:reduceValuesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceValuesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceValuesToLongTask:invoke()),
		ConcurrentHashMapV8:reduceValuesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceValuesToIntTask:invoke()),
		ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachEntryTask:invoke()),
		ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedEntryTask:invoke()),
		ConcurrentHashMapV8:searchEntries(long-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchEntriesTask:invoke()),
		ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceEntriesTask:invoke()),
		ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceEntriesTask:invoke()),
		ConcurrentHashMapV8:reduceEntriesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceEntriesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceEntriesToLongTask:invoke()),
		ConcurrentHashMapV8:reduceEntriesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceEntriesToIntTask:invoke()),
		ConcurrentHashMapV8:fullAddCount(InternalThreadLocalMap-long-IntegerHolder-boolean) to listOf(IntegerHolder:<init>(), InternalThreadLocalMap:setCounterHashCode(IntegerHolder), ConcurrentHashMapV8$CounterCell:<init>(long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8$CounterCell:<init>(long), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ConcurrentHashMapV8:getUnsafe() to listOf(Unsafe:getUnsafe(), ConcurrentHashMapV8$1:<init>()),
		ConcurrentHashMapV8:access$000() to listOf(ConcurrentHashMapV8:getUnsafe()),
		ConcurrentHashMapV8:<clinit>() to listOf(ConcurrentHashMapV8:getUnsafe(), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:arrayBaseOffset(Class), Unsafe:arrayIndexScale(Class)),
		ForkJoinPool$WorkQueue:isEmpty() to listOf(Unsafe:getObject(Object-long)),
		ForkJoinPool$WorkQueue:push(ForkJoinTask) to listOf(Unsafe:putOrderedObject(Object-long-Object), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool$WorkQueue:growArray()),
		ForkJoinPool$WorkQueue:growArray() to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putObjectVolatile(Object-long-Object)),
		ForkJoinPool$WorkQueue:pop() to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ForkJoinPool$WorkQueue:pollAt(int) to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int)),
		ForkJoinPool$WorkQueue:poll() to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int)),
		ForkJoinPool$WorkQueue:nextLocalTask() to listOf(ForkJoinPool$WorkQueue:pop(), ForkJoinPool$WorkQueue:poll()),
		ForkJoinPool$WorkQueue:peek() to listOf(Unsafe:getObjectVolatile(Object-long)),
		ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask) to listOf(Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ForkJoinPool$WorkQueue:cancelAll() to listOf(ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), ForkJoinPool$WorkQueue:poll(), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask)),
		ForkJoinPool$WorkQueue:pollAndExecAll() to listOf(ForkJoinPool$WorkQueue:poll(), ForkJoinTask:doExec()),
		ForkJoinPool$WorkQueue:runTask(ForkJoinTask) to listOf(ForkJoinTask:doExec(), ForkJoinPool$WorkQueue:pollAndExecAll(), Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), ForkJoinTask:doExec()),
		ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), ForkJoinPool$EmptyTask:<init>(), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:compareAndSwapObject(Object-long-Object-Object), ForkJoinTask:doExec()),
		ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter) to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int), CountedCompleter:doExec()),
		ForkJoinPool$WorkQueue:externalPopAndExecCC(CountedCompleter) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapObject(Object-long-Object-Object), CountedCompleter:doExec()),
		ForkJoinPool$WorkQueue:internalPopAndExecCC(CountedCompleter) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), CountedCompleter:doExec()),
		ForkJoinPool$WorkQueue:<clinit>() to listOf(ForkJoinPool:access$000(), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:arrayBaseOffset(Class), Unsafe:arrayIndexScale(Class)),
		ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:comparableClassFor(Object), ConcurrentHashMapV8:compareComparables(Class-Object-Object), ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:lockRoot() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8$TreeBin:contendedLock()),
		ConcurrentHashMapV8$TreeBin:contendedLock() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ConcurrentHashMapV8$TreeBin:find(int-Object) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object) to listOf(ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:comparableClassFor(Object), ConcurrentHashMapV8:compareComparables(Class-Object-Object), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:lockRoot(), ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:lockRoot(), ConcurrentHashMapV8$TreeBin:balanceDeletion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:balanceDeletion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:<clinit>() to listOf(ConcurrentHashMapV8:access$000(), Unsafe:objectFieldOffset(Field)),
		ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceEntriesTask:fork(), ConcurrentHashMapV8$MapReduceEntriesTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceEntriesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchMappingsTask:compute() to listOf(ConcurrentHashMapV8$SearchMappingsTask:addToPendingCount(int), ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference), ConcurrentHashMapV8$SearchMappingsTask:fork(), ConcurrentHashMapV8$SearchMappingsTask:advance(), ConcurrentHashMapV8$SearchMappingsTask:propagateCompletion(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$SearchMappingsTask:quietlyCompleteRoot()),
		ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedEntryTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedEntryTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedEntryTask:fork(), ConcurrentHashMapV8$ForEachTransformedEntryTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedEntryTask:propagateCompletion()),
		ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceKeysToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceKeysToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceKeysToLongTask:fork(), ConcurrentHashMapV8$MapReduceKeysToLongTask:advance(), ConcurrentHashMapV8$ObjectToLong:apply(Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceKeysToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$KeyIterator:next() to listOf(ConcurrentHashMapV8$KeyIterator:advance()),
		ConcurrentHashMapV8$KeyIterator:nextElement() to listOf(ConcurrentHashMapV8$KeyIterator:next()),
		ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$ValueIterator:next() to listOf(ConcurrentHashMapV8$ValueIterator:advance()),
		ConcurrentHashMapV8$ValueIterator:nextElement() to listOf(ConcurrentHashMapV8$ValueIterator:next()),
		ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int)),
		ConcurrentHashMapV8$KeySpliterator:trySplit() to listOf(ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$KeySpliterator:forEachRemaining(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$KeySpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$KeySpliterator:tryAdvance(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$KeySpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ForkJoinTask$ExceptionNode:<init>(ForkJoinTask-Throwable-ForkJoinTask$ExceptionNode) to listOf(ForkJoinTask:access$000()),
		ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ReduceEntriesTask:compute() to listOf(ConcurrentHashMapV8$ReduceEntriesTask:addToPendingCount(int), ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceEntriesTask:fork(), ConcurrentHashMapV8$ReduceEntriesTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$ReduceEntriesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ReduceEntriesTask:getRawResult() to listOf(ConcurrentHashMapV8$ReduceEntriesTask:getRawResult()),
		ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int)),
		ConcurrentHashMapV8$ValueSpliterator:trySplit() to listOf(ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$ValueSpliterator:forEachRemaining(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$ValueSpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$ValueSpliterator:tryAdvance(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$ValueSpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachEntryTask:compute() to listOf(ConcurrentHashMapV8$ForEachEntryTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachEntryTask:fork(), ConcurrentHashMapV8$ForEachEntryTask:advance(), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachEntryTask:propagateCompletion()),
		ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceValuesToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceValuesToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceValuesToLongTask:fork(), ConcurrentHashMapV8$MapReduceValuesToLongTask:advance(), ConcurrentHashMapV8$ObjectToLong:apply(Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceValuesToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceValuesToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceValuesToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:advance(), ConcurrentHashMapV8$ObjectToDouble:apply(Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ForkJoinTask$AdaptedCallable:<init>(Callable) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$AdaptedCallable:run() to listOf(ForkJoinTask$AdaptedCallable:invoke()),
		ForkJoinPool$1:run() to listOf(ForkJoinPool:access$100(), ForkJoinPool$1:run()),
		ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ReduceValuesTask:compute() to listOf(ConcurrentHashMapV8$ReduceValuesTask:addToPendingCount(int), ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceValuesTask:fork(), ConcurrentHashMapV8$ReduceValuesTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$ReduceValuesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapEntry:setValue(Object) to listOf(ConcurrentHashMapV8:put(Object-Object)),
		ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceEntriesToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceEntriesToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceEntriesToIntTask:fork(), ConcurrentHashMapV8$MapReduceEntriesToIntTask:advance(), ConcurrentHashMapV8$ObjectToInt:apply(Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceEntriesToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceMappingsToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceMappingsToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceMappingsToIntTask:fork(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:advance(), ConcurrentHashMapV8$ObjectByObjectToInt:apply(Object-Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceMappingsToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$EntrySetView:<init>(ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySetView:contains(Object) to listOf(ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8$EntrySetView:remove(Object) to listOf(ConcurrentHashMapV8:remove(Object-Object)),
		ConcurrentHashMapV8$EntrySetView:iterator() to listOf(ConcurrentHashMapV8$EntryIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySetView:add(Map$Entry) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8$EntrySetView:addAll(Collection) to listOf(ConcurrentHashMapV8$EntrySetView:add(Map$Entry)),
		ConcurrentHashMapV8$EntrySetView:hashCode() to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Node:hashCode()),
		ConcurrentHashMapV8$EntrySetView:equals(Object) to listOf(ConcurrentHashMapV8$EntrySetView:containsAll(Collection)),
		ConcurrentHashMapV8$EntrySetView:spliterator166() to listOf(ConcurrentHashMapV8:sumCount(), ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySetView:forEach(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$EntrySetView:add(Object) to listOf(ConcurrentHashMapV8$EntrySetView:add(Map$Entry)),
		ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceValuesTask:fork(), ConcurrentHashMapV8$MapReduceValuesTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceValuesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedKeyTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedKeyTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedKeyTask:fork(), ConcurrentHashMapV8$ForEachTransformedKeyTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedKeyTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachValueTask:compute() to listOf(ConcurrentHashMapV8$ForEachValueTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachValueTask:fork(), ConcurrentHashMapV8$ForEachValueTask:advance(), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachValueTask:propagateCompletion()),
		ConcurrentHashMapV8$Traverser:advance() to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int)),
		ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchKeysTask:compute() to listOf(ConcurrentHashMapV8$SearchKeysTask:addToPendingCount(int), ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchKeysTask:fork(), ConcurrentHashMapV8$SearchKeysTask:advance(), ConcurrentHashMapV8$SearchKeysTask:propagateCompletion(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$SearchKeysTask:quietlyCompleteRoot()),
		MpscLinkedQueueHeadRef:<init>() to listOf(MpscLinkedQueuePad0:<init>()),
		MpscLinkedQueueHeadRef:<clinit>() to listOf(PlatformDependent:newAtomicReferenceFieldUpdater(Class-String)),
		MpscLinkedQueue:<init>() to listOf(MpscLinkedQueueTailRef:<init>(), MpscLinkedQueue$DefaultNode:<init>(Object), MpscLinkedQueue:setHeadRef(MpscLinkedQueueNode), MpscLinkedQueue:setTailRef(MpscLinkedQueueNode)),
		MpscLinkedQueue:peekNode() to listOf(MpscLinkedQueue:headRef(), MpscLinkedQueueNode:next(), MpscLinkedQueue:tailRef(), MpscLinkedQueueNode:next()),
		MpscLinkedQueue:offer(Object) to listOf(MpscLinkedQueueNode:setNext(MpscLinkedQueueNode), MpscLinkedQueue$DefaultNode:<init>(Object), MpscLinkedQueue:getAndSetTailRef(MpscLinkedQueueNode), MpscLinkedQueueNode:setNext(MpscLinkedQueueNode)),
		MpscLinkedQueue:poll() to listOf(MpscLinkedQueue:peekNode(), MpscLinkedQueue:headRef(), MpscLinkedQueue:lazySetHeadRef(MpscLinkedQueueNode), MpscLinkedQueueNode:unlink(), MpscLinkedQueueNode:clearMaybe()),
		MpscLinkedQueue:peek() to listOf(MpscLinkedQueue:peekNode(), MpscLinkedQueueNode:value()),
		MpscLinkedQueue:size() to listOf(MpscLinkedQueue:peekNode(), MpscLinkedQueueNode:next()),
		MpscLinkedQueue:isEmpty() to listOf(MpscLinkedQueue:peekNode()),
		MpscLinkedQueue:contains(Object) to listOf(MpscLinkedQueue:peekNode(), MpscLinkedQueueNode:value(), MpscLinkedQueueNode:next()),
		MpscLinkedQueue:iterator() to listOf(MpscLinkedQueue$1:<init>(MpscLinkedQueue)),
		MpscLinkedQueue:add(Object) to listOf(MpscLinkedQueue:offer(Object)),
		MpscLinkedQueue:remove() to listOf(MpscLinkedQueue:poll()),
		MpscLinkedQueue:element() to listOf(MpscLinkedQueue:peek()),
		MpscLinkedQueue:toArray() to listOf(MpscLinkedQueue:size(), MpscLinkedQueue:iterator()),
		MpscLinkedQueue:toArray(Object[]) to listOf(MpscLinkedQueue:size(), MpscLinkedQueue:iterator()),
		MpscLinkedQueue:containsAll(Collection) to listOf(MpscLinkedQueue:contains(Object)),
		MpscLinkedQueue:addAll(Collection) to listOf(MpscLinkedQueue:add(Object)),
		MpscLinkedQueue:clear() to listOf(MpscLinkedQueue:poll()),
		MpscLinkedQueue:writeObject(ObjectOutputStream) to listOf(MpscLinkedQueue:iterator()),
		MpscLinkedQueue:readObject(ObjectInputStream) to listOf(MpscLinkedQueue$DefaultNode:<init>(Object), MpscLinkedQueue:setHeadRef(MpscLinkedQueueNode), MpscLinkedQueue:setTailRef(MpscLinkedQueueNode), MpscLinkedQueue:add(Object)),
		MpscLinkedQueue:access$000(MpscLinkedQueue) to listOf(MpscLinkedQueue:peekNode()),
		NativeLibraryLoader:tmpdir() to listOf(SystemPropertyUtil:get(String), NativeLibraryLoader:toDirectory(String), InternalLogger:debug(String), SystemPropertyUtil:get(String), NativeLibraryLoader:toDirectory(String), InternalLogger:debug(String), NativeLibraryLoader:isWindows(), NativeLibraryLoader:toDirectory(String), InternalLogger:debug(String), NativeLibraryLoader:toDirectory(String), InternalLogger:debug(String), NativeLibraryLoader:toDirectory(String), InternalLogger:debug(String), NativeLibraryLoader:toDirectory(String), InternalLogger:debug(String), NativeLibraryLoader:isWindows(), InternalLogger:warn(String)),
		NativeLibraryLoader:load(String-ClassLoader) to listOf(NativeLibraryLoader:isOSX()),
		NativeLibraryLoader:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:get(String-String), SystemPropertyUtil:get(String), InternalLogger:debug(String), NativeLibraryLoader:tmpdir(), InternalLogger:debug(String)),
		NoOpTypeParameterMatcher:<init>() to listOf(TypeParameterMatcher:<init>()),
		PendingWrite$1:<init>() to listOf(Recycler:<init>()),
		PendingWrite$1:newObject(Recycler$Handle) to listOf(PendingWrite:<init>(Recycler$Handle-PendingWrite$1), PendingWrite$1:newObject(Recycler$Handle)),
		MpscLinkedQueuePad1:<init>() to listOf(MpscLinkedQueueHeadRef:<init>()),
		ConcurrentSet:<init>() to listOf(PlatformDependent:newConcurrentHashMap()),
		PendingWrite:newInstance(Object-Promise) to listOf(Recycler:get()),
		PendingWrite:recycle() to listOf(Recycler:recycle(Object-Recycler$Handle)),
		PendingWrite:failAndRecycle(Throwable) to listOf(ReferenceCountUtil:release(Object), Promise:setFailure(Throwable), PendingWrite:recycle()),
		PendingWrite:successAndRecycle() to listOf(Promise:setSuccess(Object), PendingWrite:recycle()),
		PendingWrite:recycleAndGet() to listOf(PendingWrite:recycle()),
		PendingWrite:<init>(Recycler$Handle-PendingWrite$1) to listOf(PendingWrite:<init>(Recycler$Handle)),
		PendingWrite:<clinit>() to listOf(PendingWrite$1:<init>()),
		SystemPropertyUtil$1:run() to listOf(SystemPropertyUtil$1:run()),
		JdkLogger:<init>(Logger) to listOf(AbstractInternalLogger:<init>(String)),
		JdkLogger:trace(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:log(String-Level-String-Throwable) to listOf(JdkLogger:name(), JdkLogger:fillCallerData(String-LogRecord)),
		JdkLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		JdkLoggerFactory:newInstance(String) to listOf(JdkLogger:<init>(Logger)),
		CommonsLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		CommonsLoggerFactory:newInstance(String) to listOf(LogFactory:getLog(String), CommonsLogger:<init>(Log-String)),
		Log4JLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		Log4JLoggerFactory:newInstance(String) to listOf(Logger:getLogger(String), Log4JLogger:<init>(Logger)),
		Log4JLogger:<init>(Logger) to listOf(Logger:getName(), AbstractInternalLogger:<init>(String), Log4JLogger:isTraceCapable()),
		Log4JLogger:isTraceCapable() to listOf(Logger:isTraceEnabled()),
		Log4JLogger:isTraceEnabled() to listOf(Logger:isTraceEnabled(), Logger:isDebugEnabled()),
		Log4JLogger:trace(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Object) to listOf(Log4JLogger:isTraceEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Object-Object) to listOf(Log4JLogger:isTraceEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Object[]) to listOf(Log4JLogger:isTraceEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isDebugEnabled() to listOf(Logger:isDebugEnabled()),
		Log4JLogger:debug(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Object) to listOf(Logger:isDebugEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Object-Object) to listOf(Logger:isDebugEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Object[]) to listOf(Logger:isDebugEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isInfoEnabled() to listOf(Logger:isInfoEnabled()),
		Log4JLogger:info(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Object) to listOf(Logger:isInfoEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Object-Object) to listOf(Logger:isInfoEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Object[]) to listOf(Logger:isInfoEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isWarnEnabled() to listOf(Logger:isEnabledFor(Priority)),
		Log4JLogger:warn(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Object-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Object[]) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isErrorEnabled() to listOf(Logger:isEnabledFor(Priority)),
		Log4JLogger:error(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Object-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Object[]) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		InternalLogLevel:values() to listOf(InternalLogLevel[]:clone()),
		InternalLogLevel:<clinit>() to listOf(InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int)),
		Slf4JLogger:<init>(Logger) to listOf(Logger:getName(), AbstractInternalLogger:<init>(String)),
		Slf4JLogger:isTraceEnabled() to listOf(Logger:isTraceEnabled()),
		Slf4JLogger:trace(String) to listOf(Logger:trace(String)),
		Slf4JLogger:trace(String-Object) to listOf(Logger:trace(String-Object)),
		Slf4JLogger:trace(String-Object-Object) to listOf(Logger:trace(String-Object-Object)),
		Slf4JLogger:trace(String-Object[]) to listOf(Logger:trace(String-Object[])),
		Slf4JLogger:trace(String-Throwable) to listOf(Logger:trace(String-Throwable)),
		Slf4JLogger:isDebugEnabled() to listOf(Logger:isDebugEnabled()),
		Slf4JLogger:debug(String) to listOf(Logger:debug(String)),
		Slf4JLogger:debug(String-Object) to listOf(Logger:debug(String-Object)),
		Slf4JLogger:debug(String-Object-Object) to listOf(Logger:debug(String-Object-Object)),
		Slf4JLogger:debug(String-Object[]) to listOf(Logger:debug(String-Object[])),
		Slf4JLogger:debug(String-Throwable) to listOf(Logger:debug(String-Throwable)),
		Slf4JLogger:isInfoEnabled() to listOf(Logger:isInfoEnabled()),
		Slf4JLogger:info(String) to listOf(Logger:info(String)),
		Slf4JLogger:info(String-Object) to listOf(Logger:info(String-Object)),
		Slf4JLogger:info(String-Object-Object) to listOf(Logger:info(String-Object-Object)),
		Slf4JLogger:info(String-Object[]) to listOf(Logger:info(String-Object[])),
		Slf4JLogger:info(String-Throwable) to listOf(Logger:info(String-Throwable)),
		Slf4JLogger:isWarnEnabled() to listOf(Logger:isWarnEnabled()),
		Slf4JLogger:warn(String) to listOf(Logger:warn(String)),
		Slf4JLogger:warn(String-Object) to listOf(Logger:warn(String-Object)),
		Slf4JLogger:warn(String-Object[]) to listOf(Logger:warn(String-Object[])),
		Slf4JLogger:warn(String-Object-Object) to listOf(Logger:warn(String-Object-Object)),
		Slf4JLogger:warn(String-Throwable) to listOf(Logger:warn(String-Throwable)),
		Slf4JLogger:isErrorEnabled() to listOf(Logger:isErrorEnabled()),
		Slf4JLogger:error(String) to listOf(Logger:error(String)),
		Slf4JLogger:error(String-Object) to listOf(Logger:error(String-Object)),
		Slf4JLogger:error(String-Object-Object) to listOf(Logger:error(String-Object-Object)),
		Slf4JLogger:error(String-Object[]) to listOf(Logger:error(String-Object[])),
		Slf4JLogger:error(String-Throwable) to listOf(Logger:error(String-Throwable)),
		AbstractInternalLogger$1:<clinit>() to listOf(InternalLogLevel:values(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal()),
		FormattingTuple:<init>(String) to listOf(FormattingTuple:<init>(String-Object[]-Throwable)),
		FormattingTuple:<init>(String-Object[]-Throwable) to listOf(FormattingTuple:trimmedCopy(Object[])),
		FormattingTuple:<clinit>() to listOf(FormattingTuple:<init>(String)),
		Slf4JLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		Slf4JLoggerFactory:<init>(boolean) to listOf(InternalLoggerFactory:<init>(), Slf4JLoggerFactory$1:<init>(Slf4JLoggerFactory-StringBuffer), LoggerFactory:getILoggerFactory()),
		Slf4JLoggerFactory:newInstance(String) to listOf(LoggerFactory:getLogger(String), Slf4JLogger:<init>(Logger)),
		MessageFormatter:format(String-Object) to listOf(MessageFormatter:arrayFormat(String-Object[])),
		MessageFormatter:format(String-Object-Object) to listOf(MessageFormatter:arrayFormat(String-Object[])),
		MessageFormatter:arrayFormat(String-Object[]) to listOf(MessageFormatter:getThrowableCandidate(Object[]), FormattingTuple:<init>(String-Object[]-Throwable), FormattingTuple:<init>(String), FormattingTuple:<init>(String-Object[]-Throwable), FormattingTuple:<init>(String-Object[]-Throwable), MessageFormatter:isEscapedDelimeter(String-int), MessageFormatter:isDoubleEscaped(String-int), MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map), MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map), FormattingTuple:<init>(String-Object[]-Throwable), FormattingTuple:<init>(String-Object[]-Throwable)),
		MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map) to listOf(MessageFormatter:safeObjectAppend(StringBuffer-Object), MessageFormatter:booleanArrayAppend(StringBuffer-boolean[]), MessageFormatter:byteArrayAppend(StringBuffer-byte[]), MessageFormatter:charArrayAppend(StringBuffer-char[]), MessageFormatter:shortArrayAppend(StringBuffer-short[]), MessageFormatter:intArrayAppend(StringBuffer-int[]), MessageFormatter:longArrayAppend(StringBuffer-long[]), MessageFormatter:floatArrayAppend(StringBuffer-float[]), MessageFormatter:doubleArrayAppend(StringBuffer-double[]), MessageFormatter:objectArrayAppend(StringBuffer-Object[]-Map)),
		MessageFormatter:objectArrayAppend(StringBuffer-Object[]-Map) to listOf(MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map)),
		AbstractInternalLogger:isEnabled(InternalLogLevel) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:isTraceEnabled(), AbstractInternalLogger:isDebugEnabled(), AbstractInternalLogger:isInfoEnabled(), AbstractInternalLogger:isWarnEnabled(), AbstractInternalLogger:isErrorEnabled()),
		AbstractInternalLogger:trace(Throwable) to listOf(AbstractInternalLogger:trace(String-Throwable)),
		AbstractInternalLogger:debug(Throwable) to listOf(AbstractInternalLogger:debug(String-Throwable)),
		AbstractInternalLogger:info(Throwable) to listOf(AbstractInternalLogger:info(String-Throwable)),
		AbstractInternalLogger:warn(Throwable) to listOf(AbstractInternalLogger:warn(String-Throwable)),
		AbstractInternalLogger:error(Throwable) to listOf(AbstractInternalLogger:error(String-Throwable)),
		AbstractInternalLogger:log(InternalLogLevel-String-Throwable) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Throwable), AbstractInternalLogger:debug(String-Throwable), AbstractInternalLogger:info(String-Throwable), AbstractInternalLogger:warn(String-Throwable), AbstractInternalLogger:error(String-Throwable)),
		AbstractInternalLogger:log(InternalLogLevel-Throwable) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(Throwable), AbstractInternalLogger:debug(Throwable), AbstractInternalLogger:info(Throwable), AbstractInternalLogger:warn(Throwable), AbstractInternalLogger:error(Throwable)),
		AbstractInternalLogger:log(InternalLogLevel-String) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String), AbstractInternalLogger:debug(String), AbstractInternalLogger:info(String), AbstractInternalLogger:warn(String), AbstractInternalLogger:error(String)),
		AbstractInternalLogger:log(InternalLogLevel-String-Object) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Object), AbstractInternalLogger:debug(String-Object), AbstractInternalLogger:info(String-Object), AbstractInternalLogger:warn(String-Object), AbstractInternalLogger:error(String-Object)),
		AbstractInternalLogger:log(InternalLogLevel-String-Object-Object) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Object-Object), AbstractInternalLogger:debug(String-Object-Object), AbstractInternalLogger:info(String-Object-Object), AbstractInternalLogger:warn(String-Object-Object), AbstractInternalLogger:error(String-Object-Object)),
		AbstractInternalLogger:log(InternalLogLevel-String-Object[]) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Object[]), AbstractInternalLogger:debug(String-Object[]), AbstractInternalLogger:info(String-Object[]), AbstractInternalLogger:warn(String-Object[]), AbstractInternalLogger:error(String-Object[])),
		AbstractInternalLogger:readResolve() to listOf(AbstractInternalLogger:name(), InternalLoggerFactory:getInstance(String)),
		AbstractInternalLogger:toString() to listOf(StringUtil:simpleClassName(Object), AbstractInternalLogger:name()),
		InternalLoggerFactory:newDefaultFactory(String) to listOf(Slf4JLoggerFactory:<init>(boolean), InternalLoggerFactory:newInstance(String), InternalLogger:debug(String), Log4JLoggerFactory:<init>(), InternalLoggerFactory:newInstance(String), InternalLogger:debug(String), JdkLoggerFactory:<init>(), InternalLoggerFactory:newInstance(String), InternalLogger:debug(String)),
		InternalLoggerFactory:getInstance(Class) to listOf(InternalLoggerFactory:getInstance(String)),
		InternalLoggerFactory:getInstance(String) to listOf(InternalLoggerFactory:getDefaultFactory(), InternalLoggerFactory:newInstance(String)),
		InternalLoggerFactory:<clinit>() to listOf(InternalLoggerFactory:newDefaultFactory(String)),
		CommonsLogger:<init>(Log-String) to listOf(AbstractInternalLogger:<init>(String)),
		CommonsLogger:isTraceEnabled() to listOf(Log:isTraceEnabled()),
		CommonsLogger:trace(String) to listOf(Log:trace(Object)),
		CommonsLogger:trace(String-Object) to listOf(Log:isTraceEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:trace(Object-Throwable)),
		CommonsLogger:trace(String-Object-Object) to listOf(Log:isTraceEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:trace(Object-Throwable)),
		CommonsLogger:trace(String-Object[]) to listOf(Log:isTraceEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:trace(Object-Throwable)),
		CommonsLogger:trace(String-Throwable) to listOf(Log:trace(Object-Throwable)),
		CommonsLogger:isDebugEnabled() to listOf(Log:isDebugEnabled()),
		CommonsLogger:debug(String) to listOf(Log:debug(Object)),
		CommonsLogger:debug(String-Object) to listOf(Log:isDebugEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:debug(Object-Throwable)),
		CommonsLogger:debug(String-Object-Object) to listOf(Log:isDebugEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:debug(Object-Throwable)),
		CommonsLogger:debug(String-Object[]) to listOf(Log:isDebugEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:debug(Object-Throwable)),
		CommonsLogger:debug(String-Throwable) to listOf(Log:debug(Object-Throwable)),
		CommonsLogger:isInfoEnabled() to listOf(Log:isInfoEnabled()),
		CommonsLogger:info(String) to listOf(Log:info(Object)),
		CommonsLogger:info(String-Object) to listOf(Log:isInfoEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:info(Object-Throwable)),
		CommonsLogger:info(String-Object-Object) to listOf(Log:isInfoEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:info(Object-Throwable)),
		CommonsLogger:info(String-Object[]) to listOf(Log:isInfoEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:info(Object-Throwable)),
		CommonsLogger:info(String-Throwable) to listOf(Log:info(Object-Throwable)),
		CommonsLogger:isWarnEnabled() to listOf(Log:isWarnEnabled()),
		CommonsLogger:warn(String) to listOf(Log:warn(Object)),
		CommonsLogger:warn(String-Object) to listOf(Log:isWarnEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:warn(Object-Throwable)),
		CommonsLogger:warn(String-Object-Object) to listOf(Log:isWarnEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:warn(Object-Throwable)),
		CommonsLogger:warn(String-Object[]) to listOf(Log:isWarnEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:warn(Object-Throwable)),
		CommonsLogger:warn(String-Throwable) to listOf(Log:warn(Object-Throwable)),
		CommonsLogger:isErrorEnabled() to listOf(Log:isErrorEnabled()),
		CommonsLogger:error(String) to listOf(Log:error(Object)),
		CommonsLogger:error(String-Object) to listOf(Log:isErrorEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:error(Object-Throwable)),
		CommonsLogger:error(String-Object-Object) to listOf(Log:isErrorEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:error(Object-Throwable)),
		CommonsLogger:error(String-Object[]) to listOf(Log:isErrorEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:error(Object-Throwable)),
		CommonsLogger:error(String-Throwable) to listOf(Log:error(Object-Throwable)),
		PlatformDependent:isRoot() to listOf(PlatformDependent:isRoot0()),
		PlatformDependent:allocateMemory(long) to listOf(PlatformDependent0:allocateMemory(long)),
		PlatformDependent:freeMemory(long) to listOf(PlatformDependent0:freeMemory(long)),
		PlatformDependent:throwException(Throwable) to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:throwException(Throwable), PlatformDependent:throwException0(Throwable)),
		PlatformDependent:newConcurrentHashMap() to listOf(ConcurrentHashMapV8:<init>()),
		PlatformDependent:newConcurrentHashMap(int) to listOf(ConcurrentHashMapV8:<init>(int)),
		PlatformDependent:newConcurrentHashMap(int-float) to listOf(ConcurrentHashMapV8:<init>(int-float)),
		PlatformDependent:newConcurrentHashMap(int-float-int) to listOf(ConcurrentHashMapV8:<init>(int-float-int)),
		PlatformDependent:newConcurrentHashMap(Map) to listOf(ConcurrentHashMapV8:<init>(Map)),
		PlatformDependent:freeDirectBuffer(ByteBuffer) to listOf(PlatformDependent:hasUnsafe(), PlatformDependent:isAndroid(), PlatformDependent0:freeDirectBuffer(ByteBuffer)),
		PlatformDependent:directBufferAddress(ByteBuffer) to listOf(PlatformDependent0:directBufferAddress(ByteBuffer)),
		PlatformDependent:getObject(Object-long) to listOf(PlatformDependent0:getObject(Object-long)),
		PlatformDependent:getObjectVolatile(Object-long) to listOf(PlatformDependent0:getObjectVolatile(Object-long)),
		PlatformDependent:getInt(Object-long) to listOf(PlatformDependent0:getInt(Object-long)),
		PlatformDependent:objectFieldOffset(Field) to listOf(PlatformDependent0:objectFieldOffset(Field)),
		PlatformDependent:getByte(long) to listOf(PlatformDependent0:getByte(long)),
		PlatformDependent:getShort(long) to listOf(PlatformDependent0:getShort(long)),
		PlatformDependent:getInt(long) to listOf(PlatformDependent0:getInt(long)),
		PlatformDependent:getLong(long) to listOf(PlatformDependent0:getLong(long)),
		PlatformDependent:putOrderedObject(Object-long-Object) to listOf(PlatformDependent0:putOrderedObject(Object-long-Object)),
		PlatformDependent:putByte(long-byte) to listOf(PlatformDependent0:putByte(long-byte)),
		PlatformDependent:putShort(long-short) to listOf(PlatformDependent0:putShort(long-short)),
		PlatformDependent:putInt(long-int) to listOf(PlatformDependent0:putInt(long-int)),
		PlatformDependent:putLong(long-long) to listOf(PlatformDependent0:putLong(long-long)),
		PlatformDependent:copyMemory(long-long-long) to listOf(PlatformDependent0:copyMemory(long-long-long)),
		PlatformDependent:copyMemory(byte[]-int-long-long) to listOf(PlatformDependent0:copyMemory(Object-long-Object-long-long)),
		PlatformDependent:copyMemory(long-byte[]-int-long) to listOf(PlatformDependent0:copyMemory(Object-long-Object-long-long)),
		PlatformDependent:newAtomicReferenceFieldUpdater(Class-String) to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:newAtomicReferenceFieldUpdater(Class-String)),
		PlatformDependent:newAtomicIntegerFieldUpdater(Class-String) to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:newAtomicIntegerFieldUpdater(Class-String)),
		PlatformDependent:newAtomicLongFieldUpdater(Class-String) to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:newAtomicLongFieldUpdater(Class-String)),
		PlatformDependent:newMpscQueue() to listOf(MpscLinkedQueue:<init>()),
		PlatformDependent:getClassLoader(Class) to listOf(PlatformDependent0:getClassLoader(Class)),
		PlatformDependent:getContextClassLoader() to listOf(PlatformDependent0:getContextClassLoader()),
		PlatformDependent:getSystemClassLoader() to listOf(PlatformDependent0:getSystemClassLoader()),
		PlatformDependent:isAndroid0() to listOf(PlatformDependent:getSystemClassLoader(), InternalLogger:debug(String)),
		PlatformDependent:isWindows0() to listOf(SystemPropertyUtil:get(String-String), InternalLogger:debug(String)),
		PlatformDependent:isRoot0() to listOf(PlatformDependent:isWindows(), InternalLogger:debug(String-Object), InternalLogger:debug(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:debug(String)),
		PlatformDependent:javaVersion0() to listOf(PlatformDependent:isAndroid(), PlatformDependent:getClassLoader(Class), PlatformDependent:getClassLoader(Class), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object)),
		PlatformDependent:hasUnsafe0() to listOf(SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String-Object), PlatformDependent:isAndroid(), InternalLogger:debug(String), InternalLogger:debug(String), SystemPropertyUtil:contains(String), SystemPropertyUtil:getBoolean(String-boolean), SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String), PlatformDependent0:hasUnsafe(), InternalLogger:debug(String-Object)),
		PlatformDependent:arrayBaseOffset0() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:arrayBaseOffset()),
		PlatformDependent:maxDirectMemory0() to listOf(PlatformDependent:getSystemClassLoader(), PlatformDependent:getSystemClassLoader(), PlatformDependent:getSystemClassLoader(), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object)),
		PlatformDependent:hasJavassist0() to listOf(PlatformDependent:isAndroid(), SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String-Object), InternalLogger:debug(String), PlatformDependent:getClassLoader(Class), JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader), InternalLogger:debug(String), InternalLogger:debug(String), InternalLogger:debug(String)),
		PlatformDependent:tmpdir0() to listOf(SystemPropertyUtil:get(String), PlatformDependent:toDirectory(String), InternalLogger:debug(String-Object), SystemPropertyUtil:get(String), PlatformDependent:toDirectory(String), InternalLogger:debug(String-Object), PlatformDependent:isWindows(), PlatformDependent:toDirectory(String), InternalLogger:debug(String-Object), PlatformDependent:toDirectory(String), InternalLogger:debug(String-Object), PlatformDependent:toDirectory(String), InternalLogger:debug(String-Object), PlatformDependent:toDirectory(String), InternalLogger:debug(String-Object), PlatformDependent:isWindows(), InternalLogger:warn(String-Object)),
		PlatformDependent:bitMode0() to listOf(SystemPropertyUtil:getInt(String-int), InternalLogger:debug(String-Object), SystemPropertyUtil:getInt(String-int), InternalLogger:debug(String-Object), SystemPropertyUtil:getInt(String-int), InternalLogger:debug(String-Object), SystemPropertyUtil:get(String-String), InternalLogger:debug(String-Object-Object), SystemPropertyUtil:get(String-String)),
		PlatformDependent:addressSize0() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:addressSize()),
		PlatformDependent:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), PlatformDependent:isAndroid0(), PlatformDependent:isWindows0(), PlatformDependent:javaVersion0(), PlatformDependent:isAndroid(), PlatformDependent:hasUnsafe0(), SystemPropertyUtil:getBoolean(String-boolean), PlatformDependent:maxDirectMemory0(), PlatformDependent:arrayBaseOffset0(), PlatformDependent:hasJavassist0(), PlatformDependent:tmpdir0(), PlatformDependent:bitMode0(), PlatformDependent:addressSize0(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), PlatformDependent:hasUnsafe(), PlatformDependent:isAndroid(), InternalLogger:info(String)),
		RecyclableArrayList$1:<init>() to listOf(Recycler:<init>()),
		RecyclableArrayList$1:newObject(Recycler$Handle) to listOf(RecyclableArrayList:<init>(Recycler$Handle-RecyclableArrayList$1), RecyclableArrayList$1:newObject(Recycler$Handle)),
		ThreadLocalRandom$2:uncaughtException(Thread-Throwable) to listOf(ThreadLocalRandom:access$200(), InternalLogger:debug(String-Object-Object)),
		SystemPropertyUtil:contains(String) to listOf(SystemPropertyUtil:get(String)),
		SystemPropertyUtil:get(String) to listOf(SystemPropertyUtil:get(String-String)),
		SystemPropertyUtil:get(String-String) to listOf(SystemPropertyUtil$1:<init>(String), SystemPropertyUtil:log(String-Exception)),
		SystemPropertyUtil:getBoolean(String-boolean) to listOf(SystemPropertyUtil:get(String), SystemPropertyUtil:log(String)),
		SystemPropertyUtil:getInt(String-int) to listOf(SystemPropertyUtil:get(String), SystemPropertyUtil:log(String)),
		SystemPropertyUtil:getLong(String-long) to listOf(SystemPropertyUtil:get(String), SystemPropertyUtil:log(String)),
		SystemPropertyUtil:log(String) to listOf(InternalLogger:warn(String)),
		SystemPropertyUtil:log(String-Exception) to listOf(InternalLogger:warn(String-Throwable)),
		SystemPropertyUtil:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		PlatformDependent0$3:run() to listOf(PlatformDependent0$3:run()),
		UnsafeAtomicLongFieldUpdater:<init>(Unsafe-Class-String) to listOf(Unsafe:objectFieldOffset(Field)),
		UnsafeAtomicLongFieldUpdater:compareAndSet(Object-long-long) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long)),
		UnsafeAtomicLongFieldUpdater:weakCompareAndSet(Object-long-long) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long)),
		UnsafeAtomicLongFieldUpdater:set(Object-long) to listOf(Unsafe:putLongVolatile(Object-long-long)),
		UnsafeAtomicLongFieldUpdater:lazySet(Object-long) to listOf(Unsafe:putOrderedLong(Object-long-long)),
		UnsafeAtomicLongFieldUpdater:get(Object) to listOf(Unsafe:getLongVolatile(Object-long)),
		UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int)),
		UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int)),
		UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledHeapByteBuf:setArray(byte[]), UnpooledHeapByteBuf:setIndex(int-int)),
		UnpooledHeapByteBuf:capacity() to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:capacity(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:maxCapacity(), UnpooledHeapByteBuf:setArray(byte[]), UnpooledHeapByteBuf:readerIndex(), UnpooledHeapByteBuf:writerIndex(), UnpooledHeapByteBuf:writerIndex(int), UnpooledHeapByteBuf:setIndex(int-int), UnpooledHeapByteBuf:setArray(byte[])),
		UnpooledHeapByteBuf:array() to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledHeapByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledHeapByteBuf:getBytes(int-byte[]-int-int), ByteBuf:setBytes(int-byte[]-int-int)),
		UnpooledHeapByteBuf:getBytes(int-byte[]-int-int) to listOf(UnpooledHeapByteBuf:checkDstIndex(int-int-int-int)),
		UnpooledHeapByteBuf:getBytes(int-ByteBuffer) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:capacity()),
		UnpooledHeapByteBuf:getBytes(int-OutputStream-int) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:internalNioBuffer()),
		UnpooledHeapByteBuf:readBytes(GatheringByteChannel-int) to listOf(UnpooledHeapByteBuf:checkReadableBytes(int), UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		UnpooledHeapByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledHeapByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledHeapByteBuf:setBytes(int-byte[]-int-int), ByteBuf:getBytes(int-byte[]-int-int)),
		UnpooledHeapByteBuf:setBytes(int-byte[]-int-int) to listOf(UnpooledHeapByteBuf:checkSrcIndex(int-int-int-int)),
		UnpooledHeapByteBuf:setBytes(int-ByteBuffer) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:setBytes(int-InputStream-int) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:internalNioBuffer()),
		UnpooledHeapByteBuf:nioBuffer(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:nioBuffers(int-int) to listOf(UnpooledHeapByteBuf:nioBuffer(int-int)),
		UnpooledHeapByteBuf:internalNioBuffer(int-int) to listOf(UnpooledHeapByteBuf:checkIndex(int-int), UnpooledHeapByteBuf:internalNioBuffer()),
		UnpooledHeapByteBuf:getByte(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getByte(int)),
		UnpooledHeapByteBuf:getShort(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getShort(int)),
		UnpooledHeapByteBuf:getUnsignedMedium(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getUnsignedMedium(int)),
		UnpooledHeapByteBuf:getInt(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getInt(int)),
		UnpooledHeapByteBuf:getLong(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getLong(int)),
		UnpooledHeapByteBuf:setByte(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setByte(int-int)),
		UnpooledHeapByteBuf:setShort(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setShort(int-int)),
		UnpooledHeapByteBuf:setMedium(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setMedium(int-int)),
		UnpooledHeapByteBuf:setInt(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setInt(int-int)),
		UnpooledHeapByteBuf:setLong(int-long) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setLong(int-long)),
		UnpooledHeapByteBuf:copy(int-int) to listOf(UnpooledHeapByteBuf:checkIndex(int-int), UnpooledHeapByteBuf:alloc(), UnpooledHeapByteBuf:maxCapacity(), UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int)),
		PoolThreadCache$NormalMemoryRegionCache:<init>(int) to listOf(PoolThreadCache$MemoryRegionCache:<init>(int)),
		PoolThreadCache$NormalMemoryRegionCache:initBuf(PoolChunk-long-PooledByteBuf-int) to listOf(PoolChunk:initBuf(PooledByteBuf-long-int)),
		WrappedByteBuf:<init>(ByteBuf) to listOf(ByteBuf:<init>()),
		WrappedByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		WrappedByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		WrappedByteBuf:capacity() to listOf(ByteBuf:capacity()),
		WrappedByteBuf:capacity(int) to listOf(ByteBuf:capacity(int)),
		WrappedByteBuf:maxCapacity() to listOf(ByteBuf:maxCapacity()),
		WrappedByteBuf:alloc() to listOf(ByteBuf:alloc()),
		WrappedByteBuf:order() to listOf(ByteBuf:order()),
		WrappedByteBuf:order(ByteOrder) to listOf(ByteBuf:order(ByteOrder)),
		WrappedByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		WrappedByteBuf:readerIndex() to listOf(ByteBuf:readerIndex()),
		WrappedByteBuf:readerIndex(int) to listOf(ByteBuf:readerIndex(int)),
		WrappedByteBuf:writerIndex() to listOf(ByteBuf:writerIndex()),
		WrappedByteBuf:writerIndex(int) to listOf(ByteBuf:writerIndex(int)),
		WrappedByteBuf:setIndex(int-int) to listOf(ByteBuf:setIndex(int-int)),
		WrappedByteBuf:readableBytes() to listOf(ByteBuf:readableBytes()),
		WrappedByteBuf:writableBytes() to listOf(ByteBuf:writableBytes()),
		WrappedByteBuf:maxWritableBytes() to listOf(ByteBuf:maxWritableBytes()),
		WrappedByteBuf:isReadable() to listOf(ByteBuf:isReadable()),
		WrappedByteBuf:isWritable() to listOf(ByteBuf:isWritable()),
		WrappedByteBuf:clear() to listOf(ByteBuf:clear()),
		WrappedByteBuf:markReaderIndex() to listOf(ByteBuf:markReaderIndex()),
		WrappedByteBuf:resetReaderIndex() to listOf(ByteBuf:resetReaderIndex()),
		WrappedByteBuf:markWriterIndex() to listOf(ByteBuf:markWriterIndex()),
		WrappedByteBuf:resetWriterIndex() to listOf(ByteBuf:resetWriterIndex()),
		WrappedByteBuf:discardReadBytes() to listOf(ByteBuf:discardReadBytes()),
		WrappedByteBuf:discardSomeReadBytes() to listOf(ByteBuf:discardSomeReadBytes()),
		WrappedByteBuf:ensureWritable(int) to listOf(ByteBuf:ensureWritable(int)),
		WrappedByteBuf:ensureWritable(int-boolean) to listOf(ByteBuf:ensureWritable(int-boolean)),
		WrappedByteBuf:getBoolean(int) to listOf(ByteBuf:getBoolean(int)),
		WrappedByteBuf:getByte(int) to listOf(ByteBuf:getByte(int)),
		WrappedByteBuf:getUnsignedByte(int) to listOf(ByteBuf:getUnsignedByte(int)),
		WrappedByteBuf:getShort(int) to listOf(ByteBuf:getShort(int)),
		WrappedByteBuf:getUnsignedShort(int) to listOf(ByteBuf:getUnsignedShort(int)),
		WrappedByteBuf:getMedium(int) to listOf(ByteBuf:getMedium(int)),
		WrappedByteBuf:getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		WrappedByteBuf:getInt(int) to listOf(ByteBuf:getInt(int)),
		WrappedByteBuf:getUnsignedInt(int) to listOf(ByteBuf:getUnsignedInt(int)),
		WrappedByteBuf:getLong(int) to listOf(ByteBuf:getLong(int)),
		WrappedByteBuf:getChar(int) to listOf(ByteBuf:getChar(int)),
		WrappedByteBuf:getFloat(int) to listOf(ByteBuf:getFloat(int)),
		WrappedByteBuf:getDouble(int) to listOf(ByteBuf:getDouble(int)),
		WrappedByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:getBytes(int-ByteBuf)),
		WrappedByteBuf:getBytes(int-ByteBuf-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int)),
		WrappedByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		WrappedByteBuf:getBytes(int-byte[]) to listOf(ByteBuf:getBytes(int-byte[])),
		WrappedByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		WrappedByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		WrappedByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		WrappedByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		WrappedByteBuf:setBoolean(int-boolean) to listOf(ByteBuf:setBoolean(int-boolean)),
		WrappedByteBuf:setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		WrappedByteBuf:setShort(int-int) to listOf(ByteBuf:setShort(int-int)),
		WrappedByteBuf:setMedium(int-int) to listOf(ByteBuf:setMedium(int-int)),
		WrappedByteBuf:setInt(int-int) to listOf(ByteBuf:setInt(int-int)),
		WrappedByteBuf:setLong(int-long) to listOf(ByteBuf:setLong(int-long)),
		WrappedByteBuf:setChar(int-int) to listOf(ByteBuf:setChar(int-int)),
		WrappedByteBuf:setFloat(int-float) to listOf(ByteBuf:setFloat(int-float)),
		WrappedByteBuf:setDouble(int-double) to listOf(ByteBuf:setDouble(int-double)),
		WrappedByteBuf:setBytes(int-ByteBuf) to listOf(ByteBuf:setBytes(int-ByteBuf)),
		WrappedByteBuf:setBytes(int-ByteBuf-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int)),
		WrappedByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int-int)),
		WrappedByteBuf:setBytes(int-byte[]) to listOf(ByteBuf:setBytes(int-byte[])),
		WrappedByteBuf:setBytes(int-byte[]-int-int) to listOf(ByteBuf:setBytes(int-byte[]-int-int)),
		WrappedByteBuf:setBytes(int-ByteBuffer) to listOf(ByteBuf:setBytes(int-ByteBuffer)),
		WrappedByteBuf:setBytes(int-InputStream-int) to listOf(ByteBuf:setBytes(int-InputStream-int)),
		WrappedByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		WrappedByteBuf:setZero(int-int) to listOf(ByteBuf:setZero(int-int)),
		WrappedByteBuf:readBoolean() to listOf(ByteBuf:readBoolean()),
		WrappedByteBuf:readByte() to listOf(ByteBuf:readByte()),
		WrappedByteBuf:readUnsignedByte() to listOf(ByteBuf:readUnsignedByte()),
		WrappedByteBuf:readShort() to listOf(ByteBuf:readShort()),
		WrappedByteBuf:readUnsignedShort() to listOf(ByteBuf:readUnsignedShort()),
		WrappedByteBuf:readMedium() to listOf(ByteBuf:readMedium()),
		WrappedByteBuf:readUnsignedMedium() to listOf(ByteBuf:readUnsignedMedium()),
		WrappedByteBuf:readInt() to listOf(ByteBuf:readInt()),
		WrappedByteBuf:readUnsignedInt() to listOf(ByteBuf:readUnsignedInt()),
		WrappedByteBuf:readLong() to listOf(ByteBuf:readLong()),
		WrappedByteBuf:readChar() to listOf(ByteBuf:readChar()),
		WrappedByteBuf:readFloat() to listOf(ByteBuf:readFloat()),
		WrappedByteBuf:readDouble() to listOf(ByteBuf:readDouble()),
		WrappedByteBuf:readBytes(int) to listOf(ByteBuf:readBytes(int)),
		WrappedByteBuf:readSlice(int) to listOf(ByteBuf:readSlice(int)),
		WrappedByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:readBytes(ByteBuf)),
		WrappedByteBuf:readBytes(ByteBuf-int) to listOf(ByteBuf:readBytes(ByteBuf-int)),
		WrappedByteBuf:readBytes(ByteBuf-int-int) to listOf(ByteBuf:readBytes(ByteBuf-int-int)),
		WrappedByteBuf:readBytes(byte[]) to listOf(ByteBuf:readBytes(byte[])),
		WrappedByteBuf:readBytes(byte[]-int-int) to listOf(ByteBuf:readBytes(byte[]-int-int)),
		WrappedByteBuf:readBytes(ByteBuffer) to listOf(ByteBuf:readBytes(ByteBuffer)),
		WrappedByteBuf:readBytes(OutputStream-int) to listOf(ByteBuf:readBytes(OutputStream-int)),
		WrappedByteBuf:readBytes(GatheringByteChannel-int) to listOf(ByteBuf:readBytes(GatheringByteChannel-int)),
		WrappedByteBuf:skipBytes(int) to listOf(ByteBuf:skipBytes(int)),
		WrappedByteBuf:writeBoolean(boolean) to listOf(ByteBuf:writeBoolean(boolean)),
		WrappedByteBuf:writeByte(int) to listOf(ByteBuf:writeByte(int)),
		WrappedByteBuf:writeShort(int) to listOf(ByteBuf:writeShort(int)),
		WrappedByteBuf:writeMedium(int) to listOf(ByteBuf:writeMedium(int)),
		WrappedByteBuf:writeInt(int) to listOf(ByteBuf:writeInt(int)),
		WrappedByteBuf:writeLong(long) to listOf(ByteBuf:writeLong(long)),
		WrappedByteBuf:writeChar(int) to listOf(ByteBuf:writeChar(int)),
		WrappedByteBuf:writeFloat(float) to listOf(ByteBuf:writeFloat(float)),
		WrappedByteBuf:writeDouble(double) to listOf(ByteBuf:writeDouble(double)),
		WrappedByteBuf:writeBytes(ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf)),
		WrappedByteBuf:writeBytes(ByteBuf-int) to listOf(ByteBuf:writeBytes(ByteBuf-int)),
		WrappedByteBuf:writeBytes(ByteBuf-int-int) to listOf(ByteBuf:writeBytes(ByteBuf-int-int)),
		WrappedByteBuf:writeBytes(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		WrappedByteBuf:writeBytes(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		WrappedByteBuf:writeBytes(ByteBuffer) to listOf(ByteBuf:writeBytes(ByteBuffer)),
		WrappedByteBuf:writeBytes(InputStream-int) to listOf(ByteBuf:writeBytes(InputStream-int)),
		WrappedByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(ByteBuf:writeBytes(ScatteringByteChannel-int)),
		WrappedByteBuf:writeZero(int) to listOf(ByteBuf:writeZero(int)),
		WrappedByteBuf:indexOf(int-int-byte) to listOf(ByteBuf:indexOf(int-int-byte)),
		WrappedByteBuf:bytesBefore(byte) to listOf(ByteBuf:bytesBefore(byte)),
		WrappedByteBuf:bytesBefore(int-byte) to listOf(ByteBuf:bytesBefore(int-byte)),
		WrappedByteBuf:bytesBefore(int-int-byte) to listOf(ByteBuf:bytesBefore(int-int-byte)),
		WrappedByteBuf:forEachByte(ByteBufProcessor) to listOf(ByteBuf:forEachByte(ByteBufProcessor)),
		WrappedByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		WrappedByteBuf:forEachByteDesc(ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(ByteBufProcessor)),
		WrappedByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		WrappedByteBuf:copy() to listOf(ByteBuf:copy()),
		WrappedByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int)),
		WrappedByteBuf:slice() to listOf(ByteBuf:slice()),
		WrappedByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int)),
		WrappedByteBuf:duplicate() to listOf(ByteBuf:duplicate()),
		WrappedByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		WrappedByteBuf:nioBuffer() to listOf(ByteBuf:nioBuffer()),
		WrappedByteBuf:nioBuffer(int-int) to listOf(ByteBuf:nioBuffer(int-int)),
		WrappedByteBuf:nioBuffers() to listOf(ByteBuf:nioBuffers()),
		WrappedByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		WrappedByteBuf:internalNioBuffer(int-int) to listOf(ByteBuf:internalNioBuffer(int-int)),
		WrappedByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		WrappedByteBuf:array() to listOf(ByteBuf:array()),
		WrappedByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		WrappedByteBuf:toString(Charset) to listOf(ByteBuf:toString(Charset)),
		WrappedByteBuf:toString(int-int-Charset) to listOf(ByteBuf:toString(int-int-Charset)),
		WrappedByteBuf:hashCode() to listOf(ByteBuf:hashCode()),
		WrappedByteBuf:equals(Object) to listOf(ByteBuf:equals(Object)),
		WrappedByteBuf:compareTo(ByteBuf) to listOf(ByteBuf:compareTo(ByteBuf)),
		WrappedByteBuf:toString() to listOf(StringUtil:simpleClassName(Object), ByteBuf:toString()),
		WrappedByteBuf:retain(int) to listOf(ByteBuf:retain(int), WrappedByteBuf:retain(int)),
		WrappedByteBuf:retain() to listOf(ByteBuf:retain(), WrappedByteBuf:retain()),
		WrappedByteBuf:touch() to listOf(ByteBuf:touch(), WrappedByteBuf:touch()),
		WrappedByteBuf:touch(Object) to listOf(ByteBuf:touch(Object), WrappedByteBuf:touch(Object)),
		WrappedByteBuf:isReadable(int) to listOf(ByteBuf:isReadable(int)),
		WrappedByteBuf:isWritable(int) to listOf(ByteBuf:isWritable(int)),
		WrappedByteBuf:refCnt() to listOf(ByteBuf:refCnt()),
		WrappedByteBuf:release() to listOf(ByteBuf:release()),
		WrappedByteBuf:release(int) to listOf(ByteBuf:release(int)),
		WrappedByteBuf:compareTo(Object) to listOf(WrappedByteBuf:compareTo(ByteBuf)),
		UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledUnsafeDirectByteBuf:allocateDirect(int), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer)),
		UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledUnsafeDirectByteBuf:writerIndex(int)),
		UnpooledUnsafeDirectByteBuf:freeDirect(ByteBuffer) to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer)),
		UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer) to listOf(UnpooledUnsafeDirectByteBuf:freeDirect(ByteBuffer), PlatformDependent:directBufferAddress(ByteBuffer)),
		UnpooledUnsafeDirectByteBuf:capacity(int) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:maxCapacity(), UnpooledUnsafeDirectByteBuf:readerIndex(), UnpooledUnsafeDirectByteBuf:writerIndex(), UnpooledUnsafeDirectByteBuf:allocateDirect(int), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledUnsafeDirectByteBuf:allocateDirect(int), UnpooledUnsafeDirectByteBuf:writerIndex(int), UnpooledUnsafeDirectByteBuf:setIndex(int-int), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer)),
		UnpooledUnsafeDirectByteBuf:memoryAddress() to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible()),
		UnpooledUnsafeDirectByteBuf:_getByte(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long)),
		UnpooledUnsafeDirectByteBuf:_getShort(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getShort(long)),
		UnpooledUnsafeDirectByteBuf:_getUnsignedMedium(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long), PlatformDependent:getByte(long), PlatformDependent:getByte(long)),
		UnpooledUnsafeDirectByteBuf:_getInt(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getInt(long)),
		UnpooledUnsafeDirectByteBuf:_getLong(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getLong(long)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), UnpooledUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), UnpooledUnsafeDirectByteBuf:addr(int), ByteBuf:array(), ByteBuf:arrayOffset(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:setBytes(int-ByteBuf-int-int)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer) to listOf(UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int), UnpooledUnsafeDirectByteBuf:capacity(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:readBytes(ByteBuffer) to listOf(UnpooledUnsafeDirectByteBuf:checkReadableBytes(int), UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		UnpooledUnsafeDirectByteBuf:_setByte(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte)),
		UnpooledUnsafeDirectByteBuf:_setShort(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putShort(long-short)),
		UnpooledUnsafeDirectByteBuf:_setMedium(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte)),
		UnpooledUnsafeDirectByteBuf:_setInt(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putInt(long-int)),
		UnpooledUnsafeDirectByteBuf:_setLong(int-long) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putLong(long-long)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:getBytes(int-ByteBuf-int-int)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:readBytes(GatheringByteChannel-int) to listOf(UnpooledUnsafeDirectByteBuf:checkReadableBytes(int), UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-InputStream-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:nioBuffers(int-int) to listOf(UnpooledUnsafeDirectByteBuf:nioBuffer(int-int)),
		UnpooledUnsafeDirectByteBuf:copy(int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:alloc(), UnpooledUnsafeDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), ByteBuf:hasMemoryAddress(), UnpooledUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:setIndex(int-int), ByteBuf:writeBytes(ByteBuf-int-int)),
		UnpooledUnsafeDirectByteBuf:internalNioBuffer(int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:nioBuffer(int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int)),
		UnpooledUnsafeDirectByteBuf:deallocate() to listOf(UnpooledUnsafeDirectByteBuf:freeDirect(ByteBuffer)),
		UnpooledUnsafeDirectByteBuf:newSwappedByteBuf() to listOf(UnsafeDirectSwappedByteBuf:<init>(AbstractByteBuf)),
		PoolThreadCache$SubPageMemoryRegionCache:<init>(int) to listOf(PoolThreadCache$MemoryRegionCache:<init>(int)),
		PoolThreadCache$SubPageMemoryRegionCache:initBuf(PoolChunk-long-PooledByteBuf-int) to listOf(PoolChunk:initBufWithSubpage(PooledByteBuf-long-int)),
		ByteBufInputStream:<init>(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufInputStream:<init>(ByteBuf-int)),
		ByteBufInputStream:<init>(ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:markReaderIndex()),
		ByteBufInputStream:readBytes() to listOf(ByteBuf:readerIndex()),
		ByteBufInputStream:available() to listOf(ByteBuf:readerIndex()),
		ByteBufInputStream:mark(int) to listOf(ByteBuf:markReaderIndex()),
		ByteBufInputStream:read() to listOf(ByteBuf:isReadable(), ByteBuf:readByte()),
		ByteBufInputStream:read(byte[]-int-int) to listOf(ByteBufInputStream:available(), ByteBuf:readBytes(byte[]-int-int)),
		ByteBufInputStream:reset() to listOf(ByteBuf:resetReaderIndex()),
		ByteBufInputStream:skip(long) to listOf(ByteBufInputStream:skipBytes(int), ByteBufInputStream:skipBytes(int)),
		ByteBufInputStream:readBoolean() to listOf(ByteBufInputStream:checkAvailable(int), ByteBufInputStream:read()),
		ByteBufInputStream:readByte() to listOf(ByteBuf:isReadable(), ByteBuf:readByte()),
		ByteBufInputStream:readChar() to listOf(ByteBufInputStream:readShort()),
		ByteBufInputStream:readDouble() to listOf(ByteBufInputStream:readLong()),
		ByteBufInputStream:readFloat() to listOf(ByteBufInputStream:readInt()),
		ByteBufInputStream:readFully(byte[]) to listOf(ByteBufInputStream:readFully(byte[]-int-int)),
		ByteBufInputStream:readFully(byte[]-int-int) to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readBytes(byte[]-int-int)),
		ByteBufInputStream:readInt() to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readInt()),
		ByteBufInputStream:readLine() to listOf(ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:getUnsignedByte(int), ByteBuf:skipBytes(int)),
		ByteBufInputStream:readLong() to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readLong()),
		ByteBufInputStream:readShort() to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readShort()),
		ByteBufInputStream:readUnsignedByte() to listOf(ByteBufInputStream:readByte()),
		ByteBufInputStream:readUnsignedShort() to listOf(ByteBufInputStream:readShort()),
		ByteBufInputStream:skipBytes(int) to listOf(ByteBufInputStream:available(), ByteBuf:skipBytes(int)),
		ByteBufInputStream:checkAvailable(int) to listOf(ByteBufInputStream:available(), ByteBufInputStream:available()),
		SlicedByteBuf:<init>(ByteBuf-int-int) to listOf(AbstractDerivedByteBuf:<init>(int), ByteBuf:capacity(), ByteBuf:unwrap(), SlicedByteBuf:writerIndex(int)),
		SlicedByteBuf:alloc() to listOf(ByteBuf:alloc()),
		SlicedByteBuf:order() to listOf(ByteBuf:order()),
		SlicedByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		SlicedByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		SlicedByteBuf:array() to listOf(ByteBuf:array()),
		SlicedByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		SlicedByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		SlicedByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		SlicedByteBuf:_getByte(int) to listOf(ByteBuf:getByte(int)),
		SlicedByteBuf:_getShort(int) to listOf(ByteBuf:getShort(int)),
		SlicedByteBuf:_getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		SlicedByteBuf:_getInt(int) to listOf(ByteBuf:getInt(int)),
		SlicedByteBuf:_getLong(int) to listOf(ByteBuf:getLong(int)),
		SlicedByteBuf:duplicate() to listOf(ByteBuf:slice(int-int), SlicedByteBuf:readerIndex(), SlicedByteBuf:writerIndex(), ByteBuf:setIndex(int-int)),
		SlicedByteBuf:copy(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:copy(int-int)),
		SlicedByteBuf:slice(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:slice(int-int)),
		SlicedByteBuf:getBytes(int-ByteBuf-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-ByteBuf-int-int)),
		SlicedByteBuf:getBytes(int-byte[]-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-byte[]-int-int)),
		SlicedByteBuf:getBytes(int-ByteBuffer) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-ByteBuffer)),
		SlicedByteBuf:_setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		SlicedByteBuf:_setShort(int-int) to listOf(ByteBuf:setShort(int-int)),
		SlicedByteBuf:_setMedium(int-int) to listOf(ByteBuf:setMedium(int-int)),
		SlicedByteBuf:_setInt(int-int) to listOf(ByteBuf:setInt(int-int)),
		SlicedByteBuf:_setLong(int-long) to listOf(ByteBuf:setLong(int-long)),
		SlicedByteBuf:setBytes(int-byte[]-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-byte[]-int-int)),
		SlicedByteBuf:setBytes(int-ByteBuf-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-ByteBuf-int-int)),
		SlicedByteBuf:setBytes(int-ByteBuffer) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-ByteBuffer)),
		SlicedByteBuf:getBytes(int-OutputStream-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-OutputStream-int)),
		SlicedByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-GatheringByteChannel-int)),
		SlicedByteBuf:setBytes(int-InputStream-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-InputStream-int)),
		SlicedByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		SlicedByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		SlicedByteBuf:nioBuffer(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:nioBuffer(int-int)),
		SlicedByteBuf:nioBuffers(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:nioBuffers(int-int)),
		SlicedByteBuf:internalNioBuffer(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), SlicedByteBuf:nioBuffer(int-int)),
		SlicedByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		SlicedByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		EmptyByteBuf:<init>(ByteBufAllocator) to listOf(EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder)),
		EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder) to listOf(ByteBuf:<init>(), StringUtil:simpleClassName(Object)),
		EmptyByteBuf:order(ByteOrder) to listOf(EmptyByteBuf:order(), EmptyByteBuf:alloc(), EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder)),
		EmptyByteBuf:readerIndex(int) to listOf(EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:writerIndex(int) to listOf(EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:setIndex(int-int) to listOf(EmptyByteBuf:checkIndex(int), EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:writableBytes(), EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-ByteBuf-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-ByteBuf-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-byte[]) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-byte[]-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-ByteBuffer) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-OutputStream-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ByteBuf-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ByteBuf-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-byte[]) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-byte[]-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ByteBuffer) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-InputStream-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setZero(int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:readBytes(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readSlice(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:writableBytes(), EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuf-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuf-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(byte[]) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(byte[]-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuffer) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(OutputStream-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(GatheringByteChannel-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:skipBytes(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ByteBuf-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ByteBuf-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(byte[]) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(byte[]-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ByteBuffer) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(InputStream-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeZero(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:indexOf(int-int-byte) to listOf(EmptyByteBuf:checkIndex(int), EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:bytesBefore(int-byte) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:bytesBefore(int-int-byte) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:copy(int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:slice(int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:nioBuffer(int-int) to listOf(EmptyByteBuf:checkIndex(int-int), EmptyByteBuf:nioBuffer()),
		EmptyByteBuf:nioBuffers(int-int) to listOf(EmptyByteBuf:checkIndex(int-int), EmptyByteBuf:nioBuffers()),
		EmptyByteBuf:memoryAddress() to listOf(EmptyByteBuf:hasMemoryAddress()),
		EmptyByteBuf:toString(int-int-Charset) to listOf(EmptyByteBuf:checkIndex(int-int), EmptyByteBuf:toString(Charset)),
		EmptyByteBuf:equals(Object) to listOf(ByteBuf:isReadable()),
		EmptyByteBuf:compareTo(ByteBuf) to listOf(ByteBuf:isReadable()),
		EmptyByteBuf:touch(Object) to listOf(EmptyByteBuf:touch(Object)),
		EmptyByteBuf:touch() to listOf(EmptyByteBuf:touch()),
		EmptyByteBuf:retain(int) to listOf(EmptyByteBuf:retain(int)),
		EmptyByteBuf:retain() to listOf(EmptyByteBuf:retain()),
		EmptyByteBuf:compareTo(Object) to listOf(EmptyByteBuf:compareTo(ByteBuf)),
		EmptyByteBuf:<clinit>() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent:directBufferAddress(ByteBuffer)),
		PoolArena:<init>(PooledByteBufAllocator-int-int-int-int) to listOf(PoolArena:newSubpagePoolArray(int), PoolArena:newSubpagePoolHead(int), PoolArena:newSubpagePoolArray(int), PoolArena:newSubpagePoolHead(int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int)),
		PoolArena:newSubpagePoolHead(int) to listOf(PoolSubpage:<init>(int)),
		PoolArena:allocate(PoolThreadCache-int-int) to listOf(PoolArena:newByteBuf(int), PoolArena:allocate(PoolThreadCache-PooledByteBuf-int)),
		PoolArena:allocate(PoolThreadCache-PooledByteBuf-int) to listOf(PoolArena:normalizeCapacity(int), PoolArena:isTinyOrSmall(int), PoolArena:isTiny(int), PoolThreadCache:allocateTiny(PoolArena-PooledByteBuf-int-int), PoolArena:tinyIdx(int), PoolThreadCache:allocateSmall(PoolArena-PooledByteBuf-int-int), PoolArena:smallIdx(int), PoolSubpage:allocate(), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int), PoolThreadCache:allocateNormal(PoolArena-PooledByteBuf-int-int), PoolArena:allocateHuge(PooledByteBuf-int), PoolArena:allocateNormal(PooledByteBuf-int-int)),
		PoolArena:allocateNormal(PooledByteBuf-int-int) to listOf(PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolArena:newChunk(int-int-int-int), PoolChunk:allocate(int), PoolChunk:initBuf(PooledByteBuf-long-int), PoolChunkList:add(PoolChunk)),
		PoolArena:allocateHuge(PooledByteBuf-int) to listOf(PoolArena:newUnpooledChunk(int), PooledByteBuf:initUnpooled(PoolChunk-int)),
		PoolArena:free(PoolChunk-long-int-boolean) to listOf(PoolArena:destroyChunk(PoolChunk), PooledByteBufAllocator$PoolThreadLocalCache:get(), PoolThreadCache:add(PoolArena-PoolChunk-long-int), PoolChunkList:free(PoolChunk-long)),
		PoolArena:findSubpagePoolHead(int) to listOf(PoolArena:isTiny(int)),
		PoolArena:normalizeCapacity(int) to listOf(PoolArena:isTiny(int)),
		PoolArena:reallocate(PooledByteBuf-int-boolean) to listOf(PooledByteBuf:maxCapacity(), PooledByteBuf:readerIndex(), PooledByteBuf:writerIndex(), PooledByteBufAllocator$PoolThreadLocalCache:get(), PoolArena:allocate(PoolThreadCache-PooledByteBuf-int), PoolArena:memoryCopy(Object-int-Object-int-int), PoolArena:memoryCopy(Object-int-Object-int-int), PooledByteBuf:setIndex(int-int), PoolArena:free(PoolChunk-long-int-boolean)),
		ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer) to listOf(AbstractReferenceCountedByteBuf:<init>(int), StringUtil:simpleClassName(Object), ReadOnlyByteBufferBuf:writerIndex(int)),
		ReadOnlyByteBufferBuf:getByte(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getByte(int)),
		ReadOnlyByteBufferBuf:getShort(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getShort(int)),
		ReadOnlyByteBufferBuf:getUnsignedMedium(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getUnsignedMedium(int)),
		ReadOnlyByteBufferBuf:_getUnsignedMedium(int) to listOf(ReadOnlyByteBufferBuf:getByte(int), ReadOnlyByteBufferBuf:getByte(int), ReadOnlyByteBufferBuf:getByte(int)),
		ReadOnlyByteBufferBuf:getInt(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getInt(int)),
		ReadOnlyByteBufferBuf:getLong(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getLong(int)),
		ReadOnlyByteBufferBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), ReadOnlyByteBufferBuf:checkDstIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ReadOnlyByteBufferBuf:getBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), ReadOnlyByteBufferBuf:getBytes(int-ByteBuffer), ByteBuf:setBytes(int-ByteBuf-int-int)),
		ReadOnlyByteBufferBuf:getBytes(int-byte[]-int-int) to listOf(ReadOnlyByteBufferBuf:checkDstIndex(int-int-int-int), ReadOnlyByteBufferBuf:internalNioBuffer()),
		ReadOnlyByteBufferBuf:getBytes(int-ByteBuffer) to listOf(ReadOnlyByteBufferBuf:checkIndex(int), ReadOnlyByteBufferBuf:capacity(), ReadOnlyByteBufferBuf:internalNioBuffer()),
		ReadOnlyByteBufferBuf:capacity() to listOf(ReadOnlyByteBufferBuf:maxCapacity()),
		ReadOnlyByteBufferBuf:getBytes(int-OutputStream-int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:internalNioBuffer()),
		ReadOnlyByteBufferBuf:getBytes(int-GatheringByteChannel-int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:internalNioBuffer()),
		ReadOnlyByteBufferBuf:copy(int-int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:internalNioBuffer(), ReadOnlyByteBufferBuf:order(), ReadOnlyByteBufferBuf:alloc(), ReadOnlyByteBufferBuf:maxCapacity(), UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int)),
		ReadOnlyByteBufferBuf:nioBuffers(int-int) to listOf(ReadOnlyByteBufferBuf:nioBuffer(int-int)),
		ReadOnlyByteBufferBuf:internalNioBuffer(int-int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:internalNioBuffer()),
		SwappedByteBuf:<init>(ByteBuf) to listOf(ByteBuf:<init>(), ByteBuf:order()),
		SwappedByteBuf:unwrap() to listOf(ByteBuf:unwrap()),
		SwappedByteBuf:alloc() to listOf(ByteBuf:alloc()),
		SwappedByteBuf:capacity() to listOf(ByteBuf:capacity()),
		SwappedByteBuf:capacity(int) to listOf(ByteBuf:capacity(int)),
		SwappedByteBuf:maxCapacity() to listOf(ByteBuf:maxCapacity()),
		SwappedByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		SwappedByteBuf:readerIndex() to listOf(ByteBuf:readerIndex()),
		SwappedByteBuf:readerIndex(int) to listOf(ByteBuf:readerIndex(int)),
		SwappedByteBuf:writerIndex() to listOf(ByteBuf:writerIndex()),
		SwappedByteBuf:writerIndex(int) to listOf(ByteBuf:writerIndex(int)),
		SwappedByteBuf:setIndex(int-int) to listOf(ByteBuf:setIndex(int-int)),
		SwappedByteBuf:readableBytes() to listOf(ByteBuf:readableBytes()),
		SwappedByteBuf:writableBytes() to listOf(ByteBuf:writableBytes()),
		SwappedByteBuf:maxWritableBytes() to listOf(ByteBuf:maxWritableBytes()),
		SwappedByteBuf:isReadable() to listOf(ByteBuf:isReadable()),
		SwappedByteBuf:isReadable(int) to listOf(ByteBuf:isReadable(int)),
		SwappedByteBuf:isWritable() to listOf(ByteBuf:isWritable()),
		SwappedByteBuf:isWritable(int) to listOf(ByteBuf:isWritable(int)),
		SwappedByteBuf:clear() to listOf(ByteBuf:clear()),
		SwappedByteBuf:markReaderIndex() to listOf(ByteBuf:markReaderIndex()),
		SwappedByteBuf:resetReaderIndex() to listOf(ByteBuf:resetReaderIndex()),
		SwappedByteBuf:markWriterIndex() to listOf(ByteBuf:markWriterIndex()),
		SwappedByteBuf:resetWriterIndex() to listOf(ByteBuf:resetWriterIndex()),
		SwappedByteBuf:discardReadBytes() to listOf(ByteBuf:discardReadBytes()),
		SwappedByteBuf:discardSomeReadBytes() to listOf(ByteBuf:discardSomeReadBytes()),
		SwappedByteBuf:ensureWritable(int) to listOf(ByteBuf:ensureWritable(int)),
		SwappedByteBuf:ensureWritable(int-boolean) to listOf(ByteBuf:ensureWritable(int-boolean)),
		SwappedByteBuf:getBoolean(int) to listOf(ByteBuf:getBoolean(int)),
		SwappedByteBuf:getByte(int) to listOf(ByteBuf:getByte(int)),
		SwappedByteBuf:getUnsignedByte(int) to listOf(ByteBuf:getUnsignedByte(int)),
		SwappedByteBuf:getShort(int) to listOf(ByteBuf:getShort(int), ByteBufUtil:swapShort(short)),
		SwappedByteBuf:getUnsignedShort(int) to listOf(SwappedByteBuf:getShort(int)),
		SwappedByteBuf:getMedium(int) to listOf(ByteBuf:getMedium(int), ByteBufUtil:swapMedium(int)),
		SwappedByteBuf:getUnsignedMedium(int) to listOf(SwappedByteBuf:getMedium(int)),
		SwappedByteBuf:getInt(int) to listOf(ByteBuf:getInt(int), ByteBufUtil:swapInt(int)),
		SwappedByteBuf:getUnsignedInt(int) to listOf(SwappedByteBuf:getInt(int)),
		SwappedByteBuf:getLong(int) to listOf(ByteBuf:getLong(int), ByteBufUtil:swapLong(long)),
		SwappedByteBuf:getChar(int) to listOf(SwappedByteBuf:getShort(int)),
		SwappedByteBuf:getFloat(int) to listOf(SwappedByteBuf:getInt(int)),
		SwappedByteBuf:getDouble(int) to listOf(SwappedByteBuf:getLong(int)),
		SwappedByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:getBytes(int-ByteBuf)),
		SwappedByteBuf:getBytes(int-ByteBuf-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int)),
		SwappedByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		SwappedByteBuf:getBytes(int-byte[]) to listOf(ByteBuf:getBytes(int-byte[])),
		SwappedByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		SwappedByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		SwappedByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		SwappedByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		SwappedByteBuf:setBoolean(int-boolean) to listOf(ByteBuf:setBoolean(int-boolean)),
		SwappedByteBuf:setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		SwappedByteBuf:setShort(int-int) to listOf(ByteBufUtil:swapShort(short), ByteBuf:setShort(int-int)),
		SwappedByteBuf:setMedium(int-int) to listOf(ByteBufUtil:swapMedium(int), ByteBuf:setMedium(int-int)),
		SwappedByteBuf:setInt(int-int) to listOf(ByteBufUtil:swapInt(int), ByteBuf:setInt(int-int)),
		SwappedByteBuf:setLong(int-long) to listOf(ByteBufUtil:swapLong(long), ByteBuf:setLong(int-long)),
		SwappedByteBuf:setChar(int-int) to listOf(SwappedByteBuf:setShort(int-int)),
		SwappedByteBuf:setFloat(int-float) to listOf(SwappedByteBuf:setInt(int-int)),
		SwappedByteBuf:setDouble(int-double) to listOf(SwappedByteBuf:setLong(int-long)),
		SwappedByteBuf:setBytes(int-ByteBuf) to listOf(ByteBuf:setBytes(int-ByteBuf)),
		SwappedByteBuf:setBytes(int-ByteBuf-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int)),
		SwappedByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int-int)),
		SwappedByteBuf:setBytes(int-byte[]) to listOf(ByteBuf:setBytes(int-byte[])),
		SwappedByteBuf:setBytes(int-byte[]-int-int) to listOf(ByteBuf:setBytes(int-byte[]-int-int)),
		SwappedByteBuf:setBytes(int-ByteBuffer) to listOf(ByteBuf:setBytes(int-ByteBuffer)),
		SwappedByteBuf:setBytes(int-InputStream-int) to listOf(ByteBuf:setBytes(int-InputStream-int)),
		SwappedByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		SwappedByteBuf:setZero(int-int) to listOf(ByteBuf:setZero(int-int)),
		SwappedByteBuf:readBoolean() to listOf(ByteBuf:readBoolean()),
		SwappedByteBuf:readByte() to listOf(ByteBuf:readByte()),
		SwappedByteBuf:readUnsignedByte() to listOf(ByteBuf:readUnsignedByte()),
		SwappedByteBuf:readShort() to listOf(ByteBuf:readShort(), ByteBufUtil:swapShort(short)),
		SwappedByteBuf:readUnsignedShort() to listOf(SwappedByteBuf:readShort()),
		SwappedByteBuf:readMedium() to listOf(ByteBuf:readMedium(), ByteBufUtil:swapMedium(int)),
		SwappedByteBuf:readUnsignedMedium() to listOf(SwappedByteBuf:readMedium()),
		SwappedByteBuf:readInt() to listOf(ByteBuf:readInt(), ByteBufUtil:swapInt(int)),
		SwappedByteBuf:readUnsignedInt() to listOf(SwappedByteBuf:readInt()),
		SwappedByteBuf:readLong() to listOf(ByteBuf:readLong(), ByteBufUtil:swapLong(long)),
		SwappedByteBuf:readChar() to listOf(SwappedByteBuf:readShort()),
		SwappedByteBuf:readFloat() to listOf(SwappedByteBuf:readInt()),
		SwappedByteBuf:readDouble() to listOf(SwappedByteBuf:readLong()),
		SwappedByteBuf:readBytes(int) to listOf(ByteBuf:readBytes(int), SwappedByteBuf:order(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:readSlice(int) to listOf(ByteBuf:readSlice(int), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:readBytes(ByteBuf)),
		SwappedByteBuf:readBytes(ByteBuf-int) to listOf(ByteBuf:readBytes(ByteBuf-int)),
		SwappedByteBuf:readBytes(ByteBuf-int-int) to listOf(ByteBuf:readBytes(ByteBuf-int-int)),
		SwappedByteBuf:readBytes(byte[]) to listOf(ByteBuf:readBytes(byte[])),
		SwappedByteBuf:readBytes(byte[]-int-int) to listOf(ByteBuf:readBytes(byte[]-int-int)),
		SwappedByteBuf:readBytes(ByteBuffer) to listOf(ByteBuf:readBytes(ByteBuffer)),
		SwappedByteBuf:readBytes(OutputStream-int) to listOf(ByteBuf:readBytes(OutputStream-int)),
		SwappedByteBuf:readBytes(GatheringByteChannel-int) to listOf(ByteBuf:readBytes(GatheringByteChannel-int)),
		SwappedByteBuf:skipBytes(int) to listOf(ByteBuf:skipBytes(int)),
		SwappedByteBuf:writeBoolean(boolean) to listOf(ByteBuf:writeBoolean(boolean)),
		SwappedByteBuf:writeByte(int) to listOf(ByteBuf:writeByte(int)),
		SwappedByteBuf:writeShort(int) to listOf(ByteBufUtil:swapShort(short), ByteBuf:writeShort(int)),
		SwappedByteBuf:writeMedium(int) to listOf(ByteBufUtil:swapMedium(int), ByteBuf:writeMedium(int)),
		SwappedByteBuf:writeInt(int) to listOf(ByteBufUtil:swapInt(int), ByteBuf:writeInt(int)),
		SwappedByteBuf:writeLong(long) to listOf(ByteBufUtil:swapLong(long), ByteBuf:writeLong(long)),
		SwappedByteBuf:writeChar(int) to listOf(SwappedByteBuf:writeShort(int)),
		SwappedByteBuf:writeFloat(float) to listOf(SwappedByteBuf:writeInt(int)),
		SwappedByteBuf:writeDouble(double) to listOf(SwappedByteBuf:writeLong(long)),
		SwappedByteBuf:writeBytes(ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf)),
		SwappedByteBuf:writeBytes(ByteBuf-int) to listOf(ByteBuf:writeBytes(ByteBuf-int)),
		SwappedByteBuf:writeBytes(ByteBuf-int-int) to listOf(ByteBuf:writeBytes(ByteBuf-int-int)),
		SwappedByteBuf:writeBytes(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		SwappedByteBuf:writeBytes(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		SwappedByteBuf:writeBytes(ByteBuffer) to listOf(ByteBuf:writeBytes(ByteBuffer)),
		SwappedByteBuf:writeBytes(InputStream-int) to listOf(ByteBuf:writeBytes(InputStream-int)),
		SwappedByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(ByteBuf:writeBytes(ScatteringByteChannel-int)),
		SwappedByteBuf:writeZero(int) to listOf(ByteBuf:writeZero(int)),
		SwappedByteBuf:indexOf(int-int-byte) to listOf(ByteBuf:indexOf(int-int-byte)),
		SwappedByteBuf:bytesBefore(byte) to listOf(ByteBuf:bytesBefore(byte)),
		SwappedByteBuf:bytesBefore(int-byte) to listOf(ByteBuf:bytesBefore(int-byte)),
		SwappedByteBuf:bytesBefore(int-int-byte) to listOf(ByteBuf:bytesBefore(int-int-byte)),
		SwappedByteBuf:forEachByte(ByteBufProcessor) to listOf(ByteBuf:forEachByte(ByteBufProcessor)),
		SwappedByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		SwappedByteBuf:forEachByteDesc(ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(ByteBufProcessor)),
		SwappedByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		SwappedByteBuf:copy() to listOf(ByteBuf:copy(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:slice() to listOf(ByteBuf:slice(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:duplicate() to listOf(ByteBuf:duplicate(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		SwappedByteBuf:nioBuffer() to listOf(ByteBuf:nioBuffer()),
		SwappedByteBuf:nioBuffer(int-int) to listOf(ByteBuf:nioBuffer(int-int)),
		SwappedByteBuf:internalNioBuffer(int-int) to listOf(SwappedByteBuf:nioBuffer(int-int)),
		SwappedByteBuf:nioBuffers() to listOf(ByteBuf:nioBuffers()),
		SwappedByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		SwappedByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		SwappedByteBuf:array() to listOf(ByteBuf:array()),
		SwappedByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		SwappedByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		SwappedByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		SwappedByteBuf:toString(Charset) to listOf(ByteBuf:toString(Charset)),
		SwappedByteBuf:toString(int-int-Charset) to listOf(ByteBuf:toString(int-int-Charset)),
		SwappedByteBuf:refCnt() to listOf(ByteBuf:refCnt()),
		SwappedByteBuf:retain() to listOf(ByteBuf:retain(), SwappedByteBuf:retain()),
		SwappedByteBuf:retain(int) to listOf(ByteBuf:retain(int), SwappedByteBuf:retain(int)),
		SwappedByteBuf:touch() to listOf(ByteBuf:touch(), SwappedByteBuf:touch()),
		SwappedByteBuf:touch(Object) to listOf(ByteBuf:touch(Object), SwappedByteBuf:touch(Object)),
		SwappedByteBuf:release() to listOf(ByteBuf:release()),
		SwappedByteBuf:release(int) to listOf(ByteBuf:release(int)),
		SwappedByteBuf:hashCode() to listOf(ByteBuf:hashCode()),
		SwappedByteBuf:equals(Object) to listOf(ByteBufUtil:equals(ByteBuf-ByteBuf)),
		SwappedByteBuf:compareTo(ByteBuf) to listOf(ByteBufUtil:compare(ByteBuf-ByteBuf)),
		SwappedByteBuf:compareTo(Object) to listOf(SwappedByteBuf:compareTo(ByteBuf)),
		PoolThreadCache$MemoryRegionCache:<init>(int) to listOf(PoolThreadCache$MemoryRegionCache:powerOfTwo(int), PoolThreadCache$MemoryRegionCache$Entry:<init>(PoolThreadCache$1)),
		PoolThreadCache$MemoryRegionCache:add(PoolChunk-long) to listOf(PoolThreadCache$MemoryRegionCache:nextIdx(int)),
		PoolThreadCache$MemoryRegionCache:allocate(PooledByteBuf-int) to listOf(PoolThreadCache$MemoryRegionCache:initBuf(PoolChunk-long-PooledByteBuf-int), PoolThreadCache$MemoryRegionCache:nextIdx(int)),
		PoolThreadCache$MemoryRegionCache:free() to listOf(PoolThreadCache$MemoryRegionCache:freeEntry(PoolThreadCache$MemoryRegionCache$Entry), PoolThreadCache$MemoryRegionCache:nextIdx(int)),
		PoolThreadCache$MemoryRegionCache:trim() to listOf(PoolThreadCache$MemoryRegionCache:size(), PoolThreadCache$MemoryRegionCache:freeEntry(PoolThreadCache$MemoryRegionCache$Entry), PoolThreadCache$MemoryRegionCache:nextIdx(int)),
		PoolThreadCache$MemoryRegionCache:freeEntry(PoolThreadCache$MemoryRegionCache$Entry) to listOf(PoolChunkList:free(PoolChunk-long)),
		PoolThreadCache$MemoryRegionCache:access$100(PoolThreadCache$MemoryRegionCache) to listOf(PoolThreadCache$MemoryRegionCache:trim()),
		FixedCompositeByteBuf:<init>(ByteBufAllocator-ByteBuf[]) to listOf(AbstractReferenceCountedByteBuf:<init>(int), ByteBuf:isDirect(), ByteBuf:nioBufferCount(), ByteBuf:readableBytes(), ByteBuf:order(), ByteBuf:order(), ByteBuf:nioBufferCount(), ByteBuf:readableBytes(), ByteBuf:isDirect(), FixedCompositeByteBuf:capacity(), FixedCompositeByteBuf:setIndex(int-int)),
		FixedCompositeByteBuf:findComponent(int) to listOf(FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), ByteBuf:readableBytes(), ByteBuf:readableBytes(), FixedCompositeByteBuf$Component:<init>(int-int-ByteBuf)),
		FixedCompositeByteBuf:buffer(int) to listOf(FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component)),
		FixedCompositeByteBuf:getByte(int) to listOf(FixedCompositeByteBuf:_getByte(int)),
		FixedCompositeByteBuf:_getByte(int) to listOf(FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), ByteBuf:getByte(int)),
		FixedCompositeByteBuf:_getShort(int) to listOf(FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$200(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), ByteBuf:getShort(int), FixedCompositeByteBuf:order(), FixedCompositeByteBuf:_getByte(int), FixedCompositeByteBuf:_getByte(int), FixedCompositeByteBuf:_getByte(int), FixedCompositeByteBuf:_getByte(int)),
		FixedCompositeByteBuf:_getUnsignedMedium(int) to listOf(FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$200(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), ByteBuf:getUnsignedMedium(int), FixedCompositeByteBuf:order(), FixedCompositeByteBuf:_getShort(int), FixedCompositeByteBuf:_getByte(int), FixedCompositeByteBuf:_getShort(int), FixedCompositeByteBuf:_getByte(int)),
		FixedCompositeByteBuf:_getInt(int) to listOf(FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$200(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), ByteBuf:getInt(int), FixedCompositeByteBuf:order(), FixedCompositeByteBuf:_getShort(int), FixedCompositeByteBuf:_getShort(int), FixedCompositeByteBuf:_getShort(int), FixedCompositeByteBuf:_getShort(int)),
		FixedCompositeByteBuf:_getLong(int) to listOf(FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$200(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), ByteBuf:getLong(int), FixedCompositeByteBuf:order(), FixedCompositeByteBuf:_getInt(int), FixedCompositeByteBuf:_getInt(int), FixedCompositeByteBuf:_getInt(int), FixedCompositeByteBuf:_getInt(int)),
		FixedCompositeByteBuf:getBytes(int-byte[]-int-int) to listOf(FixedCompositeByteBuf:checkDstIndex(int-int-int-int), FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$300(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), ByteBuf:readableBytes(), ByteBuf:getBytes(int-byte[]-int-int), ByteBuf:readableBytes(), FixedCompositeByteBuf:buffer(int)),
		FixedCompositeByteBuf:getBytes(int-ByteBuffer) to listOf(FixedCompositeByteBuf:checkIndex(int-int), FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$300(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuffer), ByteBuf:readableBytes(), FixedCompositeByteBuf:buffer(int)),
		FixedCompositeByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), FixedCompositeByteBuf:checkDstIndex(int-int-int-int), FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$300(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuf-int-int), ByteBuf:readableBytes(), FixedCompositeByteBuf:buffer(int)),
		FixedCompositeByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(FixedCompositeByteBuf:nioBufferCount(), FixedCompositeByteBuf:internalNioBuffer(int-int), FixedCompositeByteBuf:nioBuffers(int-int)),
		FixedCompositeByteBuf:getBytes(int-OutputStream-int) to listOf(FixedCompositeByteBuf:checkIndex(int-int), FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$300(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), ByteBuf:capacity(), ByteBuf:getBytes(int-OutputStream-int), ByteBuf:readableBytes(), FixedCompositeByteBuf:buffer(int)),
		FixedCompositeByteBuf:copy(int-int) to listOf(FixedCompositeByteBuf:checkIndex(int-int), FixedCompositeByteBuf:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:release(), ByteBuf:release()),
		FixedCompositeByteBuf:nioBuffer(int-int) to listOf(FixedCompositeByteBuf:checkIndex(int-int), FixedCompositeByteBuf:buffer(int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(int-int), FixedCompositeByteBuf:order(), FixedCompositeByteBuf:nioBuffers(int-int)),
		FixedCompositeByteBuf:internalNioBuffer(int-int) to listOf(FixedCompositeByteBuf:buffer(int), ByteBuf:internalNioBuffer(int-int)),
		FixedCompositeByteBuf:nioBuffers(int-int) to listOf(FixedCompositeByteBuf:checkIndex(int-int), RecyclableArrayList:newInstance(int), FixedCompositeByteBuf:findComponent(int), FixedCompositeByteBuf$Component:access$300(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$100(FixedCompositeByteBuf$Component), FixedCompositeByteBuf$Component:access$000(FixedCompositeByteBuf$Component), ByteBuf:capacity(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(int-int), RecyclableArrayList:add(Object), ByteBuf:nioBuffers(int-int), ByteBuf:readableBytes(), FixedCompositeByteBuf:buffer(int), RecyclableArrayList:size(), RecyclableArrayList:toArray(Object[]), RecyclableArrayList:recycle(), RecyclableArrayList:recycle()),
		FixedCompositeByteBuf:deallocate() to listOf(FixedCompositeByteBuf:buffer(int), ByteBuf:release()),
		FixedCompositeByteBuf:toString() to listOf(AbstractReferenceCountedByteBuf:toString()),
		AbstractByteBufAllocator:toLeakAwareBuffer(ByteBuf) to listOf(ResourceLeakDetector:getLevel(), ResourceLeakDetector$Level:ordinal(), ResourceLeakDetector:open(Object), SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak), ResourceLeakDetector:open(Object), AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		AbstractByteBufAllocator:<init>() to listOf(AbstractByteBufAllocator:<init>(boolean)),
		AbstractByteBufAllocator:<init>(boolean) to listOf(PlatformDependent:hasUnsafe(), EmptyByteBuf:<init>(ByteBufAllocator)),
		AbstractByteBufAllocator:buffer() to listOf(AbstractByteBufAllocator:directBuffer(), AbstractByteBufAllocator:heapBuffer()),
		AbstractByteBufAllocator:buffer(int) to listOf(AbstractByteBufAllocator:directBuffer(int), AbstractByteBufAllocator:heapBuffer(int)),
		AbstractByteBufAllocator:buffer(int-int) to listOf(AbstractByteBufAllocator:directBuffer(int-int), AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:ioBuffer() to listOf(PlatformDependent:hasUnsafe(), AbstractByteBufAllocator:directBuffer(int), AbstractByteBufAllocator:heapBuffer(int)),
		AbstractByteBufAllocator:ioBuffer(int) to listOf(PlatformDependent:hasUnsafe(), AbstractByteBufAllocator:directBuffer(int), AbstractByteBufAllocator:heapBuffer(int)),
		AbstractByteBufAllocator:ioBuffer(int-int) to listOf(PlatformDependent:hasUnsafe(), AbstractByteBufAllocator:directBuffer(int-int), AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:heapBuffer() to listOf(AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:heapBuffer(int) to listOf(AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:heapBuffer(int-int) to listOf(AbstractByteBufAllocator:validate(int-int), AbstractByteBufAllocator:newHeapBuffer(int-int)),
		AbstractByteBufAllocator:directBuffer() to listOf(AbstractByteBufAllocator:directBuffer(int-int)),
		AbstractByteBufAllocator:directBuffer(int) to listOf(AbstractByteBufAllocator:directBuffer(int-int)),
		AbstractByteBufAllocator:directBuffer(int-int) to listOf(AbstractByteBufAllocator:validate(int-int), AbstractByteBufAllocator:newDirectBuffer(int-int)),
		AbstractByteBufAllocator:compositeBuffer() to listOf(AbstractByteBufAllocator:compositeDirectBuffer(), AbstractByteBufAllocator:compositeHeapBuffer()),
		AbstractByteBufAllocator:compositeBuffer(int) to listOf(AbstractByteBufAllocator:compositeDirectBuffer(int), AbstractByteBufAllocator:compositeHeapBuffer(int)),
		AbstractByteBufAllocator:compositeHeapBuffer() to listOf(AbstractByteBufAllocator:compositeHeapBuffer(int)),
		AbstractByteBufAllocator:compositeHeapBuffer(int) to listOf(CompositeByteBuf:<init>(ByteBufAllocator-boolean-int)),
		AbstractByteBufAllocator:compositeDirectBuffer() to listOf(AbstractByteBufAllocator:compositeDirectBuffer(int)),
		AbstractByteBufAllocator:compositeDirectBuffer(int) to listOf(CompositeByteBuf:<init>(ByteBufAllocator-boolean-int)),
		AbstractByteBufAllocator:toString() to listOf(StringUtil:simpleClassName(Object)),
		PooledByteBuf:<init>(Recycler$Handle-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int)),
		PooledByteBuf:init(PoolChunk-long-int-int-int) to listOf(PooledByteBuf:setIndex(int-int)),
		PooledByteBuf:initUnpooled(PoolChunk-int) to listOf(PooledByteBuf:setIndex(int-int)),
		PooledByteBuf:capacity(int) to listOf(PooledByteBuf:ensureAccessible(), PooledByteBuf:readerIndex(), PooledByteBuf:writerIndex(), PooledByteBuf:setIndex(int-int), PooledByteBuf:readerIndex(), PooledByteBuf:writerIndex(), PooledByteBuf:setIndex(int-int), PoolArena:reallocate(PooledByteBuf-int-boolean)),
		PooledByteBuf:internalNioBuffer() to listOf(PooledByteBuf:newInternalNioBuffer(Object)),
		PooledByteBuf:deallocate() to listOf(PoolArena:free(PoolChunk-long-int-boolean), PooledByteBuf:recycle()),
		PooledByteBuf:recycle() to listOf(Recycler$Handle:recycle(Object)),
		PoolThreadCache$1:run() to listOf(PoolThreadCache:access$000(PoolThreadCache)),
		PooledHeapByteBuf$1:<init>() to listOf(Recycler:<init>()),
		PooledHeapByteBuf$1:newObject(Recycler$Handle) to listOf(PooledHeapByteBuf:<init>(Recycler$Handle-int-PooledHeapByteBuf$1), PooledHeapByteBuf$1:newObject(Recycler$Handle)),
		AbstractByteBuf:<init>(int) to listOf(ByteBuf:<init>()),
		AbstractByteBuf:writerIndex(int) to listOf(AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:setIndex(int-int) to listOf(AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:isWritable() to listOf(AbstractByteBuf:capacity()),
		AbstractByteBuf:isWritable(int) to listOf(AbstractByteBuf:capacity()),
		AbstractByteBuf:writableBytes() to listOf(AbstractByteBuf:capacity()),
		AbstractByteBuf:maxWritableBytes() to listOf(AbstractByteBuf:maxCapacity()),
		AbstractByteBuf:resetReaderIndex() to listOf(AbstractByteBuf:readerIndex(int)),
		AbstractByteBuf:discardReadBytes() to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:setBytes(int-ByteBuf-int-int), AbstractByteBuf:adjustMarkers(int), AbstractByteBuf:adjustMarkers(int)),
		AbstractByteBuf:discardSomeReadBytes() to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:adjustMarkers(int), AbstractByteBuf:capacity(), AbstractByteBuf:setBytes(int-ByteBuf-int-int), AbstractByteBuf:adjustMarkers(int)),
		AbstractByteBuf:ensureWritable(int) to listOf(AbstractByteBuf:writableBytes(), AbstractByteBuf:alloc(), ByteBufAllocator:calculateNewCapacity(int-int), AbstractByteBuf:capacity(int)),
		AbstractByteBuf:ensureWritable(int-boolean) to listOf(AbstractByteBuf:writableBytes(), AbstractByteBuf:capacity(), AbstractByteBuf:maxCapacity(), AbstractByteBuf:maxCapacity(), AbstractByteBuf:capacity(int), AbstractByteBuf:alloc(), ByteBufAllocator:calculateNewCapacity(int-int), AbstractByteBuf:capacity(int)),
		AbstractByteBuf:order(ByteOrder) to listOf(AbstractByteBuf:order(), AbstractByteBuf:newSwappedByteBuf()),
		AbstractByteBuf:newSwappedByteBuf() to listOf(SwappedByteBuf:<init>(ByteBuf)),
		AbstractByteBuf:getByte(int) to listOf(AbstractByteBuf:checkIndex(int), AbstractByteBuf:_getByte(int)),
		AbstractByteBuf:getBoolean(int) to listOf(AbstractByteBuf:getByte(int)),
		AbstractByteBuf:getUnsignedByte(int) to listOf(AbstractByteBuf:getByte(int)),
		AbstractByteBuf:getShort(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getShort(int)),
		AbstractByteBuf:getUnsignedShort(int) to listOf(AbstractByteBuf:getShort(int)),
		AbstractByteBuf:getUnsignedMedium(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getUnsignedMedium(int)),
		AbstractByteBuf:getMedium(int) to listOf(AbstractByteBuf:getUnsignedMedium(int)),
		AbstractByteBuf:getInt(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getInt(int)),
		AbstractByteBuf:getUnsignedInt(int) to listOf(AbstractByteBuf:getInt(int)),
		AbstractByteBuf:getLong(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getLong(int)),
		AbstractByteBuf:getChar(int) to listOf(AbstractByteBuf:getShort(int)),
		AbstractByteBuf:getFloat(int) to listOf(AbstractByteBuf:getInt(int)),
		AbstractByteBuf:getDouble(int) to listOf(AbstractByteBuf:getLong(int)),
		AbstractByteBuf:getBytes(int-byte[]) to listOf(AbstractByteBuf:getBytes(int-byte[]-int-int)),
		AbstractByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:writableBytes(), AbstractByteBuf:getBytes(int-ByteBuf-int)),
		AbstractByteBuf:getBytes(int-ByteBuf-int) to listOf(ByteBuf:writerIndex(), AbstractByteBuf:getBytes(int-ByteBuf-int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		AbstractByteBuf:setByte(int-int) to listOf(AbstractByteBuf:checkIndex(int), AbstractByteBuf:_setByte(int-int)),
		AbstractByteBuf:setBoolean(int-boolean) to listOf(AbstractByteBuf:setByte(int-int)),
		AbstractByteBuf:setShort(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setShort(int-int)),
		AbstractByteBuf:setChar(int-int) to listOf(AbstractByteBuf:setShort(int-int)),
		AbstractByteBuf:setMedium(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setMedium(int-int)),
		AbstractByteBuf:setInt(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setInt(int-int)),
		AbstractByteBuf:setFloat(int-float) to listOf(AbstractByteBuf:setInt(int-int)),
		AbstractByteBuf:setLong(int-long) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setLong(int-long)),
		AbstractByteBuf:setDouble(int-double) to listOf(AbstractByteBuf:setLong(int-long)),
		AbstractByteBuf:setBytes(int-byte[]) to listOf(AbstractByteBuf:setBytes(int-byte[]-int-int)),
		AbstractByteBuf:setBytes(int-ByteBuf) to listOf(ByteBuf:readableBytes(), AbstractByteBuf:setBytes(int-ByteBuf-int)),
		AbstractByteBuf:setBytes(int-ByteBuf-int) to listOf(AbstractByteBuf:checkIndex(int-int), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), AbstractByteBuf:setBytes(int-ByteBuf-int-int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		AbstractByteBuf:setZero(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:setLong(int-long), AbstractByteBuf:setInt(int-int), AbstractByteBuf:setByte(int-int), AbstractByteBuf:setInt(int-int), AbstractByteBuf:setByte(int-int)),
		AbstractByteBuf:readByte() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getByte(int)),
		AbstractByteBuf:readBoolean() to listOf(AbstractByteBuf:readByte()),
		AbstractByteBuf:readUnsignedByte() to listOf(AbstractByteBuf:readByte()),
		AbstractByteBuf:readShort() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getShort(int)),
		AbstractByteBuf:readUnsignedShort() to listOf(AbstractByteBuf:readShort()),
		AbstractByteBuf:readMedium() to listOf(AbstractByteBuf:readUnsignedMedium()),
		AbstractByteBuf:readUnsignedMedium() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getUnsignedMedium(int)),
		AbstractByteBuf:readInt() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getInt(int)),
		AbstractByteBuf:readUnsignedInt() to listOf(AbstractByteBuf:readInt()),
		AbstractByteBuf:readLong() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getLong(int)),
		AbstractByteBuf:readChar() to listOf(AbstractByteBuf:readShort()),
		AbstractByteBuf:readFloat() to listOf(AbstractByteBuf:readInt()),
		AbstractByteBuf:readDouble() to listOf(AbstractByteBuf:readLong()),
		AbstractByteBuf:readBytes(int) to listOf(AbstractByteBuf:checkReadableBytes(int), Unpooled:buffer(int-int), ByteBuf:writeBytes(ByteBuf-int-int)),
		AbstractByteBuf:readSlice(int) to listOf(AbstractByteBuf:slice(int-int)),
		AbstractByteBuf:readBytes(byte[]-int-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-byte[]-int-int)),
		AbstractByteBuf:readBytes(byte[]) to listOf(AbstractByteBuf:readBytes(byte[]-int-int)),
		AbstractByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:writableBytes(), AbstractByteBuf:readBytes(ByteBuf-int)),
		AbstractByteBuf:readBytes(ByteBuf-int) to listOf(ByteBuf:writableBytes(), ByteBuf:writableBytes(), ByteBuf:writerIndex(), AbstractByteBuf:readBytes(ByteBuf-int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		AbstractByteBuf:readBytes(ByteBuf-int-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-ByteBuf-int-int)),
		AbstractByteBuf:readBytes(ByteBuffer) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-ByteBuffer)),
		AbstractByteBuf:readBytes(GatheringByteChannel-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-GatheringByteChannel-int)),
		AbstractByteBuf:readBytes(OutputStream-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-OutputStream-int)),
		AbstractByteBuf:skipBytes(int) to listOf(AbstractByteBuf:checkReadableBytes(int)),
		AbstractByteBuf:writeBoolean(boolean) to listOf(AbstractByteBuf:writeByte(int)),
		AbstractByteBuf:writeByte(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setByte(int-int)),
		AbstractByteBuf:writeShort(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setShort(int-int)),
		AbstractByteBuf:writeMedium(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setMedium(int-int)),
		AbstractByteBuf:writeInt(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setInt(int-int)),
		AbstractByteBuf:writeLong(long) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setLong(int-long)),
		AbstractByteBuf:writeChar(int) to listOf(AbstractByteBuf:writeShort(int)),
		AbstractByteBuf:writeFloat(float) to listOf(AbstractByteBuf:writeInt(int)),
		AbstractByteBuf:writeDouble(double) to listOf(AbstractByteBuf:writeLong(long)),
		AbstractByteBuf:writeBytes(byte[]-int-int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-byte[]-int-int)),
		AbstractByteBuf:writeBytes(byte[]) to listOf(AbstractByteBuf:writeBytes(byte[]-int-int)),
		AbstractByteBuf:writeBytes(ByteBuf) to listOf(ByteBuf:readableBytes(), AbstractByteBuf:writeBytes(ByteBuf-int)),
		AbstractByteBuf:writeBytes(ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), AbstractByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		AbstractByteBuf:writeBytes(ByteBuf-int-int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-ByteBuf-int-int)),
		AbstractByteBuf:writeBytes(ByteBuffer) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-ByteBuffer)),
		AbstractByteBuf:writeBytes(InputStream-int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-InputStream-int)),
		AbstractByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-ScatteringByteChannel-int)),
		AbstractByteBuf:writeZero(int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:writeLong(long), AbstractByteBuf:writeInt(int), AbstractByteBuf:writeByte(int), AbstractByteBuf:writeInt(int), AbstractByteBuf:writeByte(int)),
		AbstractByteBuf:copy() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:copy(int-int)),
		AbstractByteBuf:duplicate() to listOf(DuplicatedByteBuf:<init>(ByteBuf)),
		AbstractByteBuf:slice() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:slice(int-int)),
		AbstractByteBuf:slice(int-int) to listOf(SlicedByteBuf:<init>(ByteBuf-int-int)),
		AbstractByteBuf:nioBuffer() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:nioBuffer(int-int)),
		AbstractByteBuf:nioBuffers() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:nioBuffers(int-int)),
		AbstractByteBuf:toString(Charset) to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:toString(int-int-Charset)),
		AbstractByteBuf:toString(int-int-Charset) to listOf(AbstractByteBuf:nioBufferCount(), AbstractByteBuf:nioBuffer(int-int), AbstractByteBuf:getBytes(int-ByteBuffer), ByteBufUtil:decodeString(ByteBuffer-Charset)),
		AbstractByteBuf:indexOf(int-int-byte) to listOf(ByteBufUtil:indexOf(ByteBuf-int-int-byte)),
		AbstractByteBuf:bytesBefore(byte) to listOf(AbstractByteBuf:readerIndex(), AbstractByteBuf:readableBytes(), AbstractByteBuf:bytesBefore(int-int-byte)),
		AbstractByteBuf:bytesBefore(int-byte) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:readerIndex(), AbstractByteBuf:bytesBefore(int-int-byte)),
		AbstractByteBuf:bytesBefore(int-int-byte) to listOf(AbstractByteBuf:indexOf(int-int-byte)),
		AbstractByteBuf:forEachByte(ByteBufProcessor) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:_getByte(int), ByteBufProcessor:process(byte), PlatformDependent:throwException(Throwable)),
		AbstractByteBuf:forEachByteDesc(ByteBufProcessor) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:_getByte(int), ByteBufProcessor:process(byte), PlatformDependent:throwException(Throwable)),
		AbstractByteBuf:hashCode() to listOf(ByteBufUtil:hashCode(ByteBuf)),
		AbstractByteBuf:equals(Object) to listOf(ByteBufUtil:equals(ByteBuf-ByteBuf)),
		AbstractByteBuf:compareTo(ByteBuf) to listOf(ByteBufUtil:compare(ByteBuf-ByteBuf)),
		AbstractByteBuf:toString() to listOf(AbstractByteBuf:refCnt(), StringUtil:simpleClassName(Object), StringUtil:simpleClassName(Object), AbstractByteBuf:capacity(), AbstractByteBuf:unwrap()),
		AbstractByteBuf:checkIndex(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:checkIndex(int-int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:checkSrcIndex(int-int-int-int) to listOf(AbstractByteBuf:checkIndex(int-int)),
		AbstractByteBuf:checkDstIndex(int-int-int-int) to listOf(AbstractByteBuf:checkIndex(int-int)),
		AbstractByteBuf:checkReadableBytes(int) to listOf(AbstractByteBuf:ensureAccessible()),
		AbstractByteBuf:ensureAccessible() to listOf(AbstractByteBuf:refCnt(), IllegalReferenceCountException:<init>(int)),
		AbstractByteBuf:compareTo(Object) to listOf(AbstractByteBuf:compareTo(ByteBuf)),
		AbstractByteBuf:<clinit>() to listOf(ResourceLeakDetector:<init>(Class)),
		ByteBuf:touch(Object) to listOf(ByteBuf:touch(Object)),
		ByteBuf:touch() to listOf(ByteBuf:touch()),
		ByteBuf:retain(int) to listOf(ByteBuf:retain(int)),
		ByteBuf:retain() to listOf(ByteBuf:retain()),
		ByteBuf:compareTo(Object) to listOf(ByteBuf:compareTo(ByteBuf)),
		ByteBufOutputStream:<init>(ByteBuf) to listOf(ByteBuf:writerIndex()),
		ByteBufOutputStream:writtenBytes() to listOf(ByteBuf:writerIndex()),
		ByteBufOutputStream:write(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		ByteBufOutputStream:write(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		ByteBufOutputStream:write(int) to listOf(ByteBuf:writeByte(int)),
		ByteBufOutputStream:writeBoolean(boolean) to listOf(ByteBufOutputStream:write(int)),
		ByteBufOutputStream:writeByte(int) to listOf(ByteBufOutputStream:write(int)),
		ByteBufOutputStream:writeBytes(String) to listOf(ByteBufOutputStream:write(int)),
		ByteBufOutputStream:writeChar(int) to listOf(ByteBufOutputStream:writeShort(int)),
		ByteBufOutputStream:writeChars(String) to listOf(ByteBufOutputStream:writeChar(int)),
		ByteBufOutputStream:writeDouble(double) to listOf(ByteBufOutputStream:writeLong(long)),
		ByteBufOutputStream:writeFloat(float) to listOf(ByteBufOutputStream:writeInt(int)),
		ByteBufOutputStream:writeInt(int) to listOf(ByteBuf:writeInt(int)),
		ByteBufOutputStream:writeLong(long) to listOf(ByteBuf:writeLong(long)),
		ByteBufOutputStream:writeShort(int) to listOf(ByteBuf:writeShort(int)),
		AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak) to listOf(WrappedByteBuf:<init>(ByteBuf)),
		AdvancedLeakAwareByteBuf:order(ByteOrder) to listOf(ResourceLeak:record(), AdvancedLeakAwareByteBuf:order(), WrappedByteBuf:order(ByteOrder), AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		AdvancedLeakAwareByteBuf:slice() to listOf(ResourceLeak:record(), WrappedByteBuf:slice(), AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		AdvancedLeakAwareByteBuf:slice(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:slice(int-int), AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		AdvancedLeakAwareByteBuf:duplicate() to listOf(ResourceLeak:record(), WrappedByteBuf:duplicate(), AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		AdvancedLeakAwareByteBuf:readSlice(int) to listOf(ResourceLeak:record(), WrappedByteBuf:readSlice(int), AdvancedLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		AdvancedLeakAwareByteBuf:discardReadBytes() to listOf(ResourceLeak:record(), WrappedByteBuf:discardReadBytes()),
		AdvancedLeakAwareByteBuf:discardSomeReadBytes() to listOf(ResourceLeak:record(), WrappedByteBuf:discardSomeReadBytes()),
		AdvancedLeakAwareByteBuf:ensureWritable(int) to listOf(ResourceLeak:record(), WrappedByteBuf:ensureWritable(int)),
		AdvancedLeakAwareByteBuf:ensureWritable(int-boolean) to listOf(ResourceLeak:record(), WrappedByteBuf:ensureWritable(int-boolean)),
		AdvancedLeakAwareByteBuf:getBoolean(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getBoolean(int)),
		AdvancedLeakAwareByteBuf:getByte(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getByte(int)),
		AdvancedLeakAwareByteBuf:getUnsignedByte(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getUnsignedByte(int)),
		AdvancedLeakAwareByteBuf:getShort(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getShort(int)),
		AdvancedLeakAwareByteBuf:getUnsignedShort(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getUnsignedShort(int)),
		AdvancedLeakAwareByteBuf:getMedium(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getMedium(int)),
		AdvancedLeakAwareByteBuf:getUnsignedMedium(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getUnsignedMedium(int)),
		AdvancedLeakAwareByteBuf:getInt(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getInt(int)),
		AdvancedLeakAwareByteBuf:getUnsignedInt(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getUnsignedInt(int)),
		AdvancedLeakAwareByteBuf:getLong(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getLong(int)),
		AdvancedLeakAwareByteBuf:getChar(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getChar(int)),
		AdvancedLeakAwareByteBuf:getFloat(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getFloat(int)),
		AdvancedLeakAwareByteBuf:getDouble(int) to listOf(ResourceLeak:record(), WrappedByteBuf:getDouble(int)),
		AdvancedLeakAwareByteBuf:getBytes(int-ByteBuf) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-ByteBuf)),
		AdvancedLeakAwareByteBuf:getBytes(int-ByteBuf-int) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-ByteBuf-int)),
		AdvancedLeakAwareByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-ByteBuf-int-int)),
		AdvancedLeakAwareByteBuf:getBytes(int-byte[]) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-byte[])),
		AdvancedLeakAwareByteBuf:getBytes(int-byte[]-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-byte[]-int-int)),
		AdvancedLeakAwareByteBuf:getBytes(int-ByteBuffer) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-ByteBuffer)),
		AdvancedLeakAwareByteBuf:getBytes(int-OutputStream-int) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-OutputStream-int)),
		AdvancedLeakAwareByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ResourceLeak:record(), WrappedByteBuf:getBytes(int-GatheringByteChannel-int)),
		AdvancedLeakAwareByteBuf:setBoolean(int-boolean) to listOf(ResourceLeak:record(), WrappedByteBuf:setBoolean(int-boolean)),
		AdvancedLeakAwareByteBuf:setByte(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setByte(int-int)),
		AdvancedLeakAwareByteBuf:setShort(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setShort(int-int)),
		AdvancedLeakAwareByteBuf:setMedium(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setMedium(int-int)),
		AdvancedLeakAwareByteBuf:setInt(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setInt(int-int)),
		AdvancedLeakAwareByteBuf:setLong(int-long) to listOf(ResourceLeak:record(), WrappedByteBuf:setLong(int-long)),
		AdvancedLeakAwareByteBuf:setChar(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setChar(int-int)),
		AdvancedLeakAwareByteBuf:setFloat(int-float) to listOf(ResourceLeak:record(), WrappedByteBuf:setFloat(int-float)),
		AdvancedLeakAwareByteBuf:setDouble(int-double) to listOf(ResourceLeak:record(), WrappedByteBuf:setDouble(int-double)),
		AdvancedLeakAwareByteBuf:setBytes(int-ByteBuf) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-ByteBuf)),
		AdvancedLeakAwareByteBuf:setBytes(int-ByteBuf-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-ByteBuf-int)),
		AdvancedLeakAwareByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-ByteBuf-int-int)),
		AdvancedLeakAwareByteBuf:setBytes(int-byte[]) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-byte[])),
		AdvancedLeakAwareByteBuf:setBytes(int-byte[]-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-byte[]-int-int)),
		AdvancedLeakAwareByteBuf:setBytes(int-ByteBuffer) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-ByteBuffer)),
		AdvancedLeakAwareByteBuf:setBytes(int-InputStream-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-InputStream-int)),
		AdvancedLeakAwareByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setBytes(int-ScatteringByteChannel-int)),
		AdvancedLeakAwareByteBuf:setZero(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:setZero(int-int)),
		AdvancedLeakAwareByteBuf:readBoolean() to listOf(ResourceLeak:record(), WrappedByteBuf:readBoolean()),
		AdvancedLeakAwareByteBuf:readByte() to listOf(ResourceLeak:record(), WrappedByteBuf:readByte()),
		AdvancedLeakAwareByteBuf:readUnsignedByte() to listOf(ResourceLeak:record(), WrappedByteBuf:readUnsignedByte()),
		AdvancedLeakAwareByteBuf:readShort() to listOf(ResourceLeak:record(), WrappedByteBuf:readShort()),
		AdvancedLeakAwareByteBuf:readUnsignedShort() to listOf(ResourceLeak:record(), WrappedByteBuf:readUnsignedShort()),
		AdvancedLeakAwareByteBuf:readMedium() to listOf(ResourceLeak:record(), WrappedByteBuf:readMedium()),
		AdvancedLeakAwareByteBuf:readUnsignedMedium() to listOf(ResourceLeak:record(), WrappedByteBuf:readUnsignedMedium()),
		AdvancedLeakAwareByteBuf:readInt() to listOf(ResourceLeak:record(), WrappedByteBuf:readInt()),
		AdvancedLeakAwareByteBuf:readUnsignedInt() to listOf(ResourceLeak:record(), WrappedByteBuf:readUnsignedInt()),
		AdvancedLeakAwareByteBuf:readLong() to listOf(ResourceLeak:record(), WrappedByteBuf:readLong()),
		AdvancedLeakAwareByteBuf:readChar() to listOf(ResourceLeak:record(), WrappedByteBuf:readChar()),
		AdvancedLeakAwareByteBuf:readFloat() to listOf(ResourceLeak:record(), WrappedByteBuf:readFloat()),
		AdvancedLeakAwareByteBuf:readDouble() to listOf(ResourceLeak:record(), WrappedByteBuf:readDouble()),
		AdvancedLeakAwareByteBuf:readBytes(int) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(int)),
		AdvancedLeakAwareByteBuf:readBytes(ByteBuf) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(ByteBuf)),
		AdvancedLeakAwareByteBuf:readBytes(ByteBuf-int) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(ByteBuf-int)),
		AdvancedLeakAwareByteBuf:readBytes(ByteBuf-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(ByteBuf-int-int)),
		AdvancedLeakAwareByteBuf:readBytes(byte[]) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(byte[])),
		AdvancedLeakAwareByteBuf:readBytes(byte[]-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(byte[]-int-int)),
		AdvancedLeakAwareByteBuf:readBytes(ByteBuffer) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(ByteBuffer)),
		AdvancedLeakAwareByteBuf:readBytes(OutputStream-int) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(OutputStream-int)),
		AdvancedLeakAwareByteBuf:readBytes(GatheringByteChannel-int) to listOf(ResourceLeak:record(), WrappedByteBuf:readBytes(GatheringByteChannel-int)),
		AdvancedLeakAwareByteBuf:skipBytes(int) to listOf(ResourceLeak:record(), WrappedByteBuf:skipBytes(int)),
		AdvancedLeakAwareByteBuf:writeBoolean(boolean) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBoolean(boolean)),
		AdvancedLeakAwareByteBuf:writeByte(int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeByte(int)),
		AdvancedLeakAwareByteBuf:writeShort(int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeShort(int)),
		AdvancedLeakAwareByteBuf:writeMedium(int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeMedium(int)),
		AdvancedLeakAwareByteBuf:writeInt(int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeInt(int)),
		AdvancedLeakAwareByteBuf:writeLong(long) to listOf(ResourceLeak:record(), WrappedByteBuf:writeLong(long)),
		AdvancedLeakAwareByteBuf:writeChar(int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeChar(int)),
		AdvancedLeakAwareByteBuf:writeFloat(float) to listOf(ResourceLeak:record(), WrappedByteBuf:writeFloat(float)),
		AdvancedLeakAwareByteBuf:writeDouble(double) to listOf(ResourceLeak:record(), WrappedByteBuf:writeDouble(double)),
		AdvancedLeakAwareByteBuf:writeBytes(ByteBuf) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(ByteBuf)),
		AdvancedLeakAwareByteBuf:writeBytes(ByteBuf-int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(ByteBuf-int)),
		AdvancedLeakAwareByteBuf:writeBytes(ByteBuf-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(ByteBuf-int-int)),
		AdvancedLeakAwareByteBuf:writeBytes(byte[]) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(byte[])),
		AdvancedLeakAwareByteBuf:writeBytes(byte[]-int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(byte[]-int-int)),
		AdvancedLeakAwareByteBuf:writeBytes(ByteBuffer) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(ByteBuffer)),
		AdvancedLeakAwareByteBuf:writeBytes(InputStream-int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(InputStream-int)),
		AdvancedLeakAwareByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeBytes(ScatteringByteChannel-int)),
		AdvancedLeakAwareByteBuf:writeZero(int) to listOf(ResourceLeak:record(), WrappedByteBuf:writeZero(int)),
		AdvancedLeakAwareByteBuf:indexOf(int-int-byte) to listOf(ResourceLeak:record(), WrappedByteBuf:indexOf(int-int-byte)),
		AdvancedLeakAwareByteBuf:bytesBefore(byte) to listOf(ResourceLeak:record(), WrappedByteBuf:bytesBefore(byte)),
		AdvancedLeakAwareByteBuf:bytesBefore(int-byte) to listOf(ResourceLeak:record(), WrappedByteBuf:bytesBefore(int-byte)),
		AdvancedLeakAwareByteBuf:bytesBefore(int-int-byte) to listOf(ResourceLeak:record(), WrappedByteBuf:bytesBefore(int-int-byte)),
		AdvancedLeakAwareByteBuf:forEachByte(ByteBufProcessor) to listOf(ResourceLeak:record(), WrappedByteBuf:forEachByte(ByteBufProcessor)),
		AdvancedLeakAwareByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ResourceLeak:record(), WrappedByteBuf:forEachByte(int-int-ByteBufProcessor)),
		AdvancedLeakAwareByteBuf:forEachByteDesc(ByteBufProcessor) to listOf(ResourceLeak:record(), WrappedByteBuf:forEachByteDesc(ByteBufProcessor)),
		AdvancedLeakAwareByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ResourceLeak:record(), WrappedByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		AdvancedLeakAwareByteBuf:copy() to listOf(ResourceLeak:record(), WrappedByteBuf:copy()),
		AdvancedLeakAwareByteBuf:copy(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:copy(int-int)),
		AdvancedLeakAwareByteBuf:nioBufferCount() to listOf(ResourceLeak:record(), WrappedByteBuf:nioBufferCount()),
		AdvancedLeakAwareByteBuf:nioBuffer() to listOf(ResourceLeak:record(), WrappedByteBuf:nioBuffer()),
		AdvancedLeakAwareByteBuf:nioBuffer(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:nioBuffer(int-int)),
		AdvancedLeakAwareByteBuf:nioBuffers() to listOf(ResourceLeak:record(), WrappedByteBuf:nioBuffers()),
		AdvancedLeakAwareByteBuf:nioBuffers(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:nioBuffers(int-int)),
		AdvancedLeakAwareByteBuf:internalNioBuffer(int-int) to listOf(ResourceLeak:record(), WrappedByteBuf:internalNioBuffer(int-int)),
		AdvancedLeakAwareByteBuf:toString(Charset) to listOf(ResourceLeak:record(), WrappedByteBuf:toString(Charset)),
		AdvancedLeakAwareByteBuf:toString(int-int-Charset) to listOf(ResourceLeak:record(), WrappedByteBuf:toString(int-int-Charset)),
		AdvancedLeakAwareByteBuf:capacity(int) to listOf(ResourceLeak:record(), WrappedByteBuf:capacity(int)),
		AdvancedLeakAwareByteBuf:retain() to listOf(ResourceLeak:record(), WrappedByteBuf:retain(), AdvancedLeakAwareByteBuf:retain()),
		AdvancedLeakAwareByteBuf:retain(int) to listOf(ResourceLeak:record(), WrappedByteBuf:retain(int), AdvancedLeakAwareByteBuf:retain(int)),
		AdvancedLeakAwareByteBuf:touch() to listOf(ResourceLeak:record(), AdvancedLeakAwareByteBuf:touch()),
		AdvancedLeakAwareByteBuf:touch(Object) to listOf(ResourceLeak:record(Object), AdvancedLeakAwareByteBuf:touch(Object)),
		AdvancedLeakAwareByteBuf:release() to listOf(WrappedByteBuf:release(), ResourceLeak:close(), ResourceLeak:record()),
		AdvancedLeakAwareByteBuf:release(int) to listOf(WrappedByteBuf:release(int), ResourceLeak:close(), ResourceLeak:record()),
		ByteBufUtil:hexDump(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBufUtil:hexDump(ByteBuf-int-int)),
		ByteBufUtil:hexDump(ByteBuf-int-int) to listOf(ByteBuf:getUnsignedByte(int)),
		ByteBufUtil:hexDump(byte[]) to listOf(ByteBufUtil:hexDump(byte[]-int-int)),
		ByteBufUtil:hashCode(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:order(), ByteBuf:getInt(int), ByteBuf:getInt(int), ByteBufUtil:swapInt(int), ByteBuf:getByte(int)),
		ByteBufUtil:equals(ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:order(), ByteBuf:order(), ByteBuf:getLong(int), ByteBuf:getLong(int), ByteBuf:getLong(int), ByteBuf:getLong(int), ByteBufUtil:swapLong(long), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		ByteBufUtil:compare(ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:order(), ByteBuf:order(), ByteBuf:getUnsignedInt(int), ByteBuf:getUnsignedInt(int), ByteBuf:getUnsignedInt(int), ByteBuf:getInt(int), ByteBufUtil:swapInt(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int)),
		ByteBufUtil:indexOf(ByteBuf-int-int-byte) to listOf(ByteBufUtil:firstIndexOf(ByteBuf-int-int-byte), ByteBufUtil:lastIndexOf(ByteBuf-int-int-byte)),
		ByteBufUtil:readBytes(ByteBufAllocator-ByteBuf-int) to listOf(ByteBufAllocator:buffer(int), ByteBuf:readBytes(ByteBuf), ByteBuf:release(), ByteBuf:release()),
		ByteBufUtil:firstIndexOf(ByteBuf-int-int-byte) to listOf(ByteBuf:capacity(), ByteBuf:getByte(int)),
		ByteBufUtil:lastIndexOf(ByteBuf-int-int-byte) to listOf(ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:getByte(int)),
		ByteBufUtil:writeUtf8(ByteBuf-CharSequence) to listOf(ByteBuf:ensureWritable(int), AbstractByteBuf:_setByte(int-int), AbstractByteBuf:_setByte(int-int), AbstractByteBuf:_setByte(int-int), AbstractByteBuf:_setByte(int-int), AbstractByteBuf:_setByte(int-int), AbstractByteBuf:_setByte(int-int), ByteBuf:writeBytes(byte[])),
		ByteBufUtil:writeAscii(ByteBuf-CharSequence) to listOf(ByteBuf:ensureWritable(int), AbstractByteBuf:_setByte(int-int), ByteBuf:writeBytes(byte[])),
		ByteBufUtil:encodeString(ByteBufAllocator-CharBuffer-Charset) to listOf(ByteBufUtil:encodeString0(ByteBufAllocator-boolean-CharBuffer-Charset)),
		ByteBufUtil:encodeString0(ByteBufAllocator-boolean-CharBuffer-Charset) to listOf(CharsetUtil:getEncoder(Charset), ByteBufAllocator:heapBuffer(int), ByteBufAllocator:buffer(int), ByteBuf:internalNioBuffer(int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ByteBuf:release(), ByteBuf:release()),
		ByteBufUtil:decodeString(ByteBuffer-Charset) to listOf(CharsetUtil:getDecoder(Charset)),
		ByteBufUtil:threadLocalDirectBuffer() to listOf(PlatformDependent:hasUnsafe(), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:newInstance(), ByteBufUtil$ThreadLocalDirectByteBuf:newInstance()),
		ByteBufUtil:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), PlatformDependent:isAndroid(), SystemPropertyUtil:get(String-String), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), SystemPropertyUtil:getInt(String-int), InternalLogger:debug(String-Object)),
		UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer)),
		UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledDirectByteBuf:writerIndex(int)),
		UnpooledDirectByteBuf:freeDirect(ByteBuffer) to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer)),
		UnpooledDirectByteBuf:setByteBuffer(ByteBuffer) to listOf(UnpooledDirectByteBuf:freeDirect(ByteBuffer)),
		UnpooledDirectByteBuf:capacity(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:maxCapacity(), UnpooledDirectByteBuf:readerIndex(), UnpooledDirectByteBuf:writerIndex(), UnpooledDirectByteBuf:allocateDirect(int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledDirectByteBuf:allocateDirect(int), UnpooledDirectByteBuf:writerIndex(int), UnpooledDirectByteBuf:setIndex(int-int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer)),
		UnpooledDirectByteBuf:getByte(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getByte(int)),
		UnpooledDirectByteBuf:getShort(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getShort(int)),
		UnpooledDirectByteBuf:getUnsignedMedium(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getUnsignedMedium(int)),
		UnpooledDirectByteBuf:_getUnsignedMedium(int) to listOf(UnpooledDirectByteBuf:getByte(int), UnpooledDirectByteBuf:getByte(int), UnpooledDirectByteBuf:getByte(int)),
		UnpooledDirectByteBuf:getInt(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getInt(int)),
		UnpooledDirectByteBuf:getLong(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getLong(int)),
		UnpooledDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledDirectByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledDirectByteBuf:getBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), UnpooledDirectByteBuf:getBytes(int-ByteBuffer), ByteBuf:setBytes(int-ByteBuf-int-int)),
		UnpooledDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(UnpooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean)),
		UnpooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean) to listOf(UnpooledDirectByteBuf:checkDstIndex(int-int-int-int), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:readBytes(byte[]-int-int) to listOf(UnpooledDirectByteBuf:checkReadableBytes(int), UnpooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean)),
		UnpooledDirectByteBuf:getBytes(int-ByteBuffer) to listOf(UnpooledDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		UnpooledDirectByteBuf:getBytes(int-ByteBuffer-boolean) to listOf(UnpooledDirectByteBuf:checkIndex(int), UnpooledDirectByteBuf:capacity(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:readBytes(ByteBuffer) to listOf(UnpooledDirectByteBuf:checkReadableBytes(int), UnpooledDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		UnpooledDirectByteBuf:setByte(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setByte(int-int)),
		UnpooledDirectByteBuf:setShort(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setShort(int-int)),
		UnpooledDirectByteBuf:setMedium(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setMedium(int-int)),
		UnpooledDirectByteBuf:_setMedium(int-int) to listOf(UnpooledDirectByteBuf:setByte(int-int), UnpooledDirectByteBuf:setByte(int-int), UnpooledDirectByteBuf:setByte(int-int)),
		UnpooledDirectByteBuf:setInt(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setInt(int-int)),
		UnpooledDirectByteBuf:setLong(int-long) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setLong(int-long)),
		UnpooledDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledDirectByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), UnpooledDirectByteBuf:setBytes(int-ByteBuffer), ByteBuf:getBytes(int-ByteBuf-int-int)),
		UnpooledDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(UnpooledDirectByteBuf:checkSrcIndex(int-int-int-int), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:setBytes(int-ByteBuffer) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:getBytes(int-OutputStream-int) to listOf(UnpooledDirectByteBuf:getBytes(int-OutputStream-int-boolean)),
		UnpooledDirectByteBuf:getBytes(int-OutputStream-int-boolean) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:readBytes(OutputStream-int) to listOf(UnpooledDirectByteBuf:checkReadableBytes(int), UnpooledDirectByteBuf:getBytes(int-OutputStream-int-boolean)),
		UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:readBytes(GatheringByteChannel-int) to listOf(UnpooledDirectByteBuf:checkReadableBytes(int), UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		UnpooledDirectByteBuf:setBytes(int-InputStream-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:nioBuffers(int-int) to listOf(UnpooledDirectByteBuf:nioBuffer(int-int)),
		UnpooledDirectByteBuf:copy(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:alloc(), UnpooledDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), ByteBuf:writeBytes(ByteBuffer)),
		UnpooledDirectByteBuf:internalNioBuffer(int-int) to listOf(UnpooledDirectByteBuf:checkIndex(int-int), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:nioBuffer(int-int) to listOf(UnpooledDirectByteBuf:checkIndex(int-int)),
		UnpooledDirectByteBuf:deallocate() to listOf(UnpooledDirectByteBuf:freeDirect(ByteBuffer)),
		PooledUnsafeDirectByteBuf:newInstance(int) to listOf(Recycler:get(), PooledUnsafeDirectByteBuf:setRefCnt(int), PooledUnsafeDirectByteBuf:maxCapacity(int)),
		PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int) to listOf(PooledByteBuf:<init>(Recycler$Handle-int)),
		PooledUnsafeDirectByteBuf:init(PoolChunk-long-int-int-int) to listOf(PooledByteBuf:init(PoolChunk-long-int-int-int), PooledUnsafeDirectByteBuf:initMemoryAddress()),
		PooledUnsafeDirectByteBuf:initUnpooled(PoolChunk-int) to listOf(PooledByteBuf:initUnpooled(PoolChunk-int), PooledUnsafeDirectByteBuf:initMemoryAddress()),
		PooledUnsafeDirectByteBuf:initMemoryAddress() to listOf(PlatformDependent:directBufferAddress(ByteBuffer)),
		PooledUnsafeDirectByteBuf:_getByte(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long)),
		PooledUnsafeDirectByteBuf:_getShort(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getShort(long)),
		PooledUnsafeDirectByteBuf:_getUnsignedMedium(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long), PlatformDependent:getByte(long), PlatformDependent:getByte(long)),
		PooledUnsafeDirectByteBuf:_getInt(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getInt(long)),
		PooledUnsafeDirectByteBuf:_getLong(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getLong(long)),
		PooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), PooledUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), PooledUnsafeDirectByteBuf:addr(int), ByteBuf:array(), ByteBuf:arrayOffset(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:setBytes(int-ByteBuf-int-int)),
		PooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer) to listOf(PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int), PooledUnsafeDirectByteBuf:capacity(), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:readBytes(ByteBuffer) to listOf(PooledUnsafeDirectByteBuf:checkReadableBytes(int), PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		PooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:readBytes(GatheringByteChannel-int) to listOf(PooledUnsafeDirectByteBuf:checkReadableBytes(int), PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		PooledUnsafeDirectByteBuf:_setByte(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte)),
		PooledUnsafeDirectByteBuf:_setShort(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putShort(long-short)),
		PooledUnsafeDirectByteBuf:_setMedium(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte)),
		PooledUnsafeDirectByteBuf:_setInt(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putInt(long-int)),
		PooledUnsafeDirectByteBuf:_setLong(int-long) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putLong(long-long)),
		PooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:getBytes(int-ByteBuf-int-int)),
		PooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		PooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:setBytes(int-InputStream-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		PooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:copy(int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:alloc(), PooledUnsafeDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), ByteBuf:hasMemoryAddress(), PooledUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:setIndex(int-int), ByteBuf:writeBytes(ByteBuf-int-int)),
		PooledUnsafeDirectByteBuf:nioBuffers(int-int) to listOf(PooledUnsafeDirectByteBuf:nioBuffer(int-int)),
		PooledUnsafeDirectByteBuf:nioBuffer(int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:internalNioBuffer(int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:idx(int), PooledUnsafeDirectByteBuf:internalNioBuffer()),
		PooledUnsafeDirectByteBuf:memoryAddress() to listOf(PooledUnsafeDirectByteBuf:ensureAccessible()),
		PooledUnsafeDirectByteBuf:newSwappedByteBuf() to listOf(UnsafeDirectSwappedByteBuf:<init>(AbstractByteBuf)),
		PooledUnsafeDirectByteBuf:newInternalNioBuffer(Object) to listOf(PooledUnsafeDirectByteBuf:newInternalNioBuffer(ByteBuffer)),
		PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int-PooledUnsafeDirectByteBuf$1) to listOf(PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int)),
		PooledUnsafeDirectByteBuf:<clinit>() to listOf(PooledUnsafeDirectByteBuf$1:<init>()),
		PooledDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		PooledDirectByteBuf$1:newObject(Recycler$Handle) to listOf(PooledDirectByteBuf:<init>(Recycler$Handle-int-PooledDirectByteBuf$1), PooledDirectByteBuf$1:newObject(Recycler$Handle)),
		PoolSubpage:<init>(PoolChunk-int-int-int-int) to listOf(PoolSubpage:init(int)),
		PoolSubpage:init(int) to listOf(PoolSubpage:addToPool()),
		PoolSubpage:allocate() to listOf(PoolSubpage:toHandle(int), PoolSubpage:getNextAvail(), PoolSubpage:removeFromPool(), PoolSubpage:toHandle(int)),
		PoolSubpage:free(int) to listOf(PoolSubpage:setNextAvail(int), PoolSubpage:addToPool(), PoolSubpage:removeFromPool()),
		PoolSubpage:addToPool() to listOf(PoolArena:findSubpagePoolHead(int)),
		PoolSubpage:getNextAvail() to listOf(PoolSubpage:findNextAvail()),
		PoolSubpage:findNextAvail() to listOf(PoolSubpage:findNextAvail0(int-long)),
		UnpooledByteBufAllocator:<init>(boolean) to listOf(AbstractByteBufAllocator:<init>(boolean)),
		UnpooledByteBufAllocator:newHeapBuffer(int-int) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int)),
		UnpooledByteBufAllocator:newDirectBuffer(int-int) to listOf(PlatformDependent:hasUnsafe(), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int), UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int), UnpooledByteBufAllocator:toLeakAwareBuffer(ByteBuf)),
		UnpooledByteBufAllocator:<clinit>() to listOf(PlatformDependent:directBufferPreferred(), UnpooledByteBufAllocator:<init>(boolean)),
		CompositeByteBuf:<init>(ByteBufAllocator-boolean-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), ResourceLeakDetector:open(Object)),
		CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-ByteBuf[]) to listOf(AbstractReferenceCountedByteBuf:<init>(int), CompositeByteBuf:addComponents0(int-ByteBuf[]), CompositeByteBuf:consolidateIfNeeded(), CompositeByteBuf:capacity(), CompositeByteBuf:setIndex(int-int), ResourceLeakDetector:open(Object)),
		CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable) to listOf(AbstractReferenceCountedByteBuf:<init>(int), CompositeByteBuf:addComponents0(int-Iterable), CompositeByteBuf:consolidateIfNeeded(), CompositeByteBuf:capacity(), CompositeByteBuf:setIndex(int-int), ResourceLeakDetector:open(Object)),
		CompositeByteBuf:addComponent(ByteBuf) to listOf(CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents(ByteBuf[]) to listOf(CompositeByteBuf:addComponents0(int-ByteBuf[]), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents(Iterable) to listOf(CompositeByteBuf:addComponents0(int-Iterable), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponent(int-ByteBuf) to listOf(CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponent0(int-ByteBuf) to listOf(CompositeByteBuf:checkComponentIndex(int), ByteBuf:readableBytes(), ByteBuf:order(ByteOrder), ByteBuf:slice(), CompositeByteBuf$Component:<init>(ByteBuf), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:addComponents(int-ByteBuf[]) to listOf(CompositeByteBuf:addComponents0(int-ByteBuf[]), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents0(int-ByteBuf[]) to listOf(CompositeByteBuf:checkComponentIndex(int), CompositeByteBuf:addComponent0(int-ByteBuf)),
		CompositeByteBuf:addComponents(int-Iterable) to listOf(CompositeByteBuf:addComponents0(int-Iterable), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents0(int-Iterable) to listOf(CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:addComponents0(int-ByteBuf[])),
		CompositeByteBuf:consolidateIfNeeded() to listOf(CompositeByteBuf:allocBuffer(int), ByteBuf:writeBytes(ByteBuf), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf$Component:<init>(ByteBuf)),
		CompositeByteBuf:checkComponentIndex(int) to listOf(CompositeByteBuf:ensureAccessible()),
		CompositeByteBuf:checkComponentIndex(int-int) to listOf(CompositeByteBuf:ensureAccessible()),
		CompositeByteBuf:removeComponent(int) to listOf(CompositeByteBuf:checkComponentIndex(int), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:removeComponents(int-int) to listOf(CompositeByteBuf:checkComponentIndex(int-int), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:iterator() to listOf(CompositeByteBuf:ensureAccessible()),
		CompositeByteBuf:decompose(int-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:duplicate(), ByteBuf:readerIndex(int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:writerIndex(int), ByteBuf:duplicate(), ByteBuf:slice()),
		CompositeByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		CompositeByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		CompositeByteBuf:array() to listOf(ByteBuf:array()),
		CompositeByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		CompositeByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress(), ByteBuf:hasMemoryAddress()),
		CompositeByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress(), ByteBuf:memoryAddress()),
		CompositeByteBuf:capacity(int) to listOf(CompositeByteBuf:ensureAccessible(), CompositeByteBuf:maxCapacity(), CompositeByteBuf:capacity(), CompositeByteBuf:allocBuffer(int), ByteBuf:setIndex(int-int), CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:allocBuffer(int), ByteBuf:setIndex(int-int), CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:consolidateIfNeeded(), ByteBuf:slice(int-int), CompositeByteBuf$Component:<init>(ByteBuf), CompositeByteBuf:readerIndex(), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:writerIndex(), CompositeByteBuf:writerIndex(int), CompositeByteBuf:capacity(int)),
		CompositeByteBuf:toComponentIndex(int) to listOf(CompositeByteBuf:checkIndex(int)),
		CompositeByteBuf:toByteIndex(int) to listOf(CompositeByteBuf:checkComponentIndex(int)),
		CompositeByteBuf:getByte(int) to listOf(CompositeByteBuf:_getByte(int)),
		CompositeByteBuf:_getByte(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getByte(int)),
		CompositeByteBuf:_getShort(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getShort(int), CompositeByteBuf:order(), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getByte(int)),
		CompositeByteBuf:_getUnsignedMedium(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getUnsignedMedium(int), CompositeByteBuf:order(), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getByte(int)),
		CompositeByteBuf:_getInt(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getInt(int), CompositeByteBuf:order(), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getShort(int)),
		CompositeByteBuf:_getLong(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getLong(int), CompositeByteBuf:order(), CompositeByteBuf:_getInt(int), CompositeByteBuf:_getInt(int), CompositeByteBuf:_getInt(int), CompositeByteBuf:_getInt(int)),
		CompositeByteBuf:getBytes(int-byte[]-int-int) to listOf(CompositeByteBuf:checkDstIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-byte[]-int-int), CompositeByteBuf:getBytes(int-byte[]-int-int)),
		CompositeByteBuf:getBytes(int-ByteBuffer) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuffer), CompositeByteBuf:getBytes(int-ByteBuffer)),
		CompositeByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), CompositeByteBuf:checkDstIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuf-int-int), CompositeByteBuf:getBytes(int-ByteBuf-int-int)),
		CompositeByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(CompositeByteBuf:nioBufferCount(), CompositeByteBuf:internalNioBuffer(int-int), CompositeByteBuf:nioBuffers(int-int)),
		CompositeByteBuf:getBytes(int-OutputStream-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-OutputStream-int), CompositeByteBuf:getBytes(int-OutputStream-int)),
		CompositeByteBuf:setByte(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setByte(int-int), CompositeByteBuf:setByte(int-int)),
		CompositeByteBuf:_setByte(int-int) to listOf(CompositeByteBuf:setByte(int-int)),
		CompositeByteBuf:setShort(int-int) to listOf(AbstractReferenceCountedByteBuf:setShort(int-int), CompositeByteBuf:setShort(int-int)),
		CompositeByteBuf:_setShort(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setShort(int-int), CompositeByteBuf:order(), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setByte(int-int)),
		CompositeByteBuf:setMedium(int-int) to listOf(AbstractReferenceCountedByteBuf:setMedium(int-int), CompositeByteBuf:setMedium(int-int)),
		CompositeByteBuf:_setMedium(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setMedium(int-int), CompositeByteBuf:order(), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setByte(int-int)),
		CompositeByteBuf:setInt(int-int) to listOf(AbstractReferenceCountedByteBuf:setInt(int-int), CompositeByteBuf:setInt(int-int)),
		CompositeByteBuf:_setInt(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setInt(int-int), CompositeByteBuf:order(), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setShort(int-int)),
		CompositeByteBuf:setLong(int-long) to listOf(AbstractReferenceCountedByteBuf:setLong(int-long), CompositeByteBuf:setLong(int-long)),
		CompositeByteBuf:_setLong(int-long) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setLong(int-long), CompositeByteBuf:order(), CompositeByteBuf:_setInt(int-int), CompositeByteBuf:_setInt(int-int), CompositeByteBuf:_setInt(int-int), CompositeByteBuf:_setInt(int-int)),
		CompositeByteBuf:setBytes(int-byte[]-int-int) to listOf(CompositeByteBuf:checkSrcIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-byte[]-int-int), CompositeByteBuf:setBytes(int-byte[]-int-int)),
		CompositeByteBuf:setBytes(int-ByteBuffer) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-ByteBuffer), CompositeByteBuf:setBytes(int-ByteBuffer)),
		CompositeByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), CompositeByteBuf:checkSrcIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-ByteBuf-int-int), CompositeByteBuf:setBytes(int-ByteBuf-int-int)),
		CompositeByteBuf:setBytes(int-InputStream-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-InputStream-int)),
		CompositeByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		CompositeByteBuf:copy(int-int) to listOf(CompositeByteBuf:checkIndex(int-int), Unpooled:buffer(int), CompositeByteBuf:toComponentIndex(int), CompositeByteBuf:copyTo(int-int-int-ByteBuf)),
		CompositeByteBuf:copyTo(int-int-int-ByteBuf) to listOf(ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuf-int-int), ByteBuf:capacity(), ByteBuf:writerIndex(int)),
		CompositeByteBuf:component(int) to listOf(CompositeByteBuf:internalComponent(int), ByteBuf:duplicate()),
		CompositeByteBuf:componentAtOffset(int) to listOf(CompositeByteBuf:internalComponentAtOffset(int), ByteBuf:duplicate()),
		CompositeByteBuf:internalComponent(int) to listOf(CompositeByteBuf:checkComponentIndex(int)),
		CompositeByteBuf:internalComponentAtOffset(int) to listOf(CompositeByteBuf:findComponent(int)),
		CompositeByteBuf:findComponent(int) to listOf(CompositeByteBuf:checkIndex(int)),
		CompositeByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount(), ByteBuf:nioBufferCount()),
		CompositeByteBuf:internalNioBuffer(int-int) to listOf(ByteBuf:internalNioBuffer(int-int)),
		CompositeByteBuf:nioBuffer(int-int) to listOf(CompositeByteBuf:checkIndex(int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(int-int), CompositeByteBuf:order(), CompositeByteBuf:nioBuffers(int-int)),
		CompositeByteBuf:nioBuffers(int-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(int-int), ByteBuf:nioBuffers(int-int)),
		CompositeByteBuf:consolidate() to listOf(CompositeByteBuf:ensureAccessible(), CompositeByteBuf:numComponents(), CompositeByteBuf:allocBuffer(int), ByteBuf:writeBytes(ByteBuf), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf$Component:<init>(ByteBuf), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:consolidate(int-int) to listOf(CompositeByteBuf:checkComponentIndex(int-int), CompositeByteBuf:allocBuffer(int), ByteBuf:writeBytes(ByteBuf), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf$Component:<init>(ByteBuf), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:discardReadComponents() to listOf(CompositeByteBuf:ensureAccessible(), CompositeByteBuf:readerIndex(), CompositeByteBuf:writerIndex(), CompositeByteBuf:capacity(), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int), CompositeByteBuf:toComponentIndex(int), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:updateComponentOffsets(int), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int)),
		CompositeByteBuf:discardReadBytes() to listOf(CompositeByteBuf:ensureAccessible(), CompositeByteBuf:readerIndex(), CompositeByteBuf:writerIndex(), CompositeByteBuf:capacity(), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int), CompositeByteBuf:toComponentIndex(int), CompositeByteBuf$Component:freeIfNecessary(), ByteBuf:slice(int-int), CompositeByteBuf$Component:<init>(ByteBuf), CompositeByteBuf:updateComponentOffsets(int), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int), CompositeByteBuf:discardReadBytes()),
		CompositeByteBuf:allocBuffer(int) to listOf(CompositeByteBuf:alloc(), ByteBufAllocator:directBuffer(int), CompositeByteBuf:alloc(), ByteBufAllocator:heapBuffer(int)),
		CompositeByteBuf:toString() to listOf(AbstractReferenceCountedByteBuf:toString()),
		CompositeByteBuf:readerIndex(int) to listOf(AbstractReferenceCountedByteBuf:readerIndex(int), CompositeByteBuf:readerIndex(int)),
		CompositeByteBuf:writerIndex(int) to listOf(AbstractReferenceCountedByteBuf:writerIndex(int), CompositeByteBuf:writerIndex(int)),
		CompositeByteBuf:setIndex(int-int) to listOf(AbstractReferenceCountedByteBuf:setIndex(int-int), CompositeByteBuf:setIndex(int-int)),
		CompositeByteBuf:clear() to listOf(AbstractReferenceCountedByteBuf:clear(), CompositeByteBuf:clear()),
		CompositeByteBuf:markReaderIndex() to listOf(AbstractReferenceCountedByteBuf:markReaderIndex(), CompositeByteBuf:markReaderIndex()),
		CompositeByteBuf:resetReaderIndex() to listOf(AbstractReferenceCountedByteBuf:resetReaderIndex(), CompositeByteBuf:resetReaderIndex()),
		CompositeByteBuf:markWriterIndex() to listOf(AbstractReferenceCountedByteBuf:markWriterIndex(), CompositeByteBuf:markWriterIndex()),
		CompositeByteBuf:resetWriterIndex() to listOf(AbstractReferenceCountedByteBuf:resetWriterIndex(), CompositeByteBuf:resetWriterIndex()),
		CompositeByteBuf:ensureWritable(int) to listOf(AbstractReferenceCountedByteBuf:ensureWritable(int), CompositeByteBuf:ensureWritable(int)),
		CompositeByteBuf:getBytes(int-ByteBuf) to listOf(AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf), CompositeByteBuf:getBytes(int-ByteBuf)),
		CompositeByteBuf:getBytes(int-ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf-int), CompositeByteBuf:getBytes(int-ByteBuf-int)),
		CompositeByteBuf:getBytes(int-byte[]) to listOf(AbstractReferenceCountedByteBuf:getBytes(int-byte[]), CompositeByteBuf:getBytes(int-byte[])),
		CompositeByteBuf:setBoolean(int-boolean) to listOf(AbstractReferenceCountedByteBuf:setBoolean(int-boolean), CompositeByteBuf:setBoolean(int-boolean)),
		CompositeByteBuf:setChar(int-int) to listOf(AbstractReferenceCountedByteBuf:setChar(int-int), CompositeByteBuf:setChar(int-int)),
		CompositeByteBuf:setFloat(int-float) to listOf(AbstractReferenceCountedByteBuf:setFloat(int-float), CompositeByteBuf:setFloat(int-float)),
		CompositeByteBuf:setDouble(int-double) to listOf(AbstractReferenceCountedByteBuf:setDouble(int-double), CompositeByteBuf:setDouble(int-double)),
		CompositeByteBuf:setBytes(int-ByteBuf) to listOf(AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf), CompositeByteBuf:setBytes(int-ByteBuf)),
		CompositeByteBuf:setBytes(int-ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf-int), CompositeByteBuf:setBytes(int-ByteBuf-int)),
		CompositeByteBuf:setBytes(int-byte[]) to listOf(AbstractReferenceCountedByteBuf:setBytes(int-byte[]), CompositeByteBuf:setBytes(int-byte[])),
		CompositeByteBuf:setZero(int-int) to listOf(AbstractReferenceCountedByteBuf:setZero(int-int), CompositeByteBuf:setZero(int-int)),
		CompositeByteBuf:readBytes(ByteBuf) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuf), CompositeByteBuf:readBytes(ByteBuf)),
		CompositeByteBuf:readBytes(ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int), CompositeByteBuf:readBytes(ByteBuf-int)),
		CompositeByteBuf:readBytes(ByteBuf-int-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int-int), CompositeByteBuf:readBytes(ByteBuf-int-int)),
		CompositeByteBuf:readBytes(byte[]) to listOf(AbstractReferenceCountedByteBuf:readBytes(byte[]), CompositeByteBuf:readBytes(byte[])),
		CompositeByteBuf:readBytes(byte[]-int-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(byte[]-int-int), CompositeByteBuf:readBytes(byte[]-int-int)),
		CompositeByteBuf:readBytes(ByteBuffer) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuffer), CompositeByteBuf:readBytes(ByteBuffer)),
		CompositeByteBuf:readBytes(OutputStream-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(OutputStream-int), CompositeByteBuf:readBytes(OutputStream-int)),
		CompositeByteBuf:skipBytes(int) to listOf(AbstractReferenceCountedByteBuf:skipBytes(int), CompositeByteBuf:skipBytes(int)),
		CompositeByteBuf:writeBoolean(boolean) to listOf(AbstractReferenceCountedByteBuf:writeBoolean(boolean), CompositeByteBuf:writeBoolean(boolean)),
		CompositeByteBuf:writeByte(int) to listOf(AbstractReferenceCountedByteBuf:writeByte(int), CompositeByteBuf:writeByte(int)),
		CompositeByteBuf:writeShort(int) to listOf(AbstractReferenceCountedByteBuf:writeShort(int), CompositeByteBuf:writeShort(int)),
		CompositeByteBuf:writeMedium(int) to listOf(AbstractReferenceCountedByteBuf:writeMedium(int), CompositeByteBuf:writeMedium(int)),
		CompositeByteBuf:writeInt(int) to listOf(AbstractReferenceCountedByteBuf:writeInt(int), CompositeByteBuf:writeInt(int)),
		CompositeByteBuf:writeLong(long) to listOf(AbstractReferenceCountedByteBuf:writeLong(long), CompositeByteBuf:writeLong(long)),
		CompositeByteBuf:writeChar(int) to listOf(AbstractReferenceCountedByteBuf:writeChar(int), CompositeByteBuf:writeChar(int)),
		CompositeByteBuf:writeFloat(float) to listOf(AbstractReferenceCountedByteBuf:writeFloat(float), CompositeByteBuf:writeFloat(float)),
		CompositeByteBuf:writeDouble(double) to listOf(AbstractReferenceCountedByteBuf:writeDouble(double), CompositeByteBuf:writeDouble(double)),
		CompositeByteBuf:writeBytes(ByteBuf) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuf), CompositeByteBuf:writeBytes(ByteBuf)),
		CompositeByteBuf:writeBytes(ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int), CompositeByteBuf:writeBytes(ByteBuf-int)),
		CompositeByteBuf:writeBytes(ByteBuf-int-int) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int-int), CompositeByteBuf:writeBytes(ByteBuf-int-int)),
		CompositeByteBuf:writeBytes(byte[]) to listOf(AbstractReferenceCountedByteBuf:writeBytes(byte[]), CompositeByteBuf:writeBytes(byte[])),
		CompositeByteBuf:writeBytes(byte[]-int-int) to listOf(AbstractReferenceCountedByteBuf:writeBytes(byte[]-int-int), CompositeByteBuf:writeBytes(byte[]-int-int)),
		CompositeByteBuf:writeBytes(ByteBuffer) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuffer), CompositeByteBuf:writeBytes(ByteBuffer)),
		CompositeByteBuf:writeZero(int) to listOf(AbstractReferenceCountedByteBuf:writeZero(int), CompositeByteBuf:writeZero(int)),
		CompositeByteBuf:retain(int) to listOf(AbstractReferenceCountedByteBuf:retain(int), CompositeByteBuf:retain(int), CompositeByteBuf:retain(int)),
		CompositeByteBuf:retain() to listOf(AbstractReferenceCountedByteBuf:retain(), CompositeByteBuf:retain(), CompositeByteBuf:retain()),
		CompositeByteBuf:touch() to listOf(ResourceLeak:record(), CompositeByteBuf:touch(), CompositeByteBuf:touch()),
		CompositeByteBuf:touch(Object) to listOf(ResourceLeak:record(Object), CompositeByteBuf:touch(Object), CompositeByteBuf:touch(Object)),
		CompositeByteBuf:nioBuffers() to listOf(CompositeByteBuf:readerIndex(), CompositeByteBuf:readableBytes(), CompositeByteBuf:nioBuffers(int-int)),
		CompositeByteBuf:discardSomeReadBytes() to listOf(CompositeByteBuf:discardReadComponents(), CompositeByteBuf:discardSomeReadBytes()),
		CompositeByteBuf:deallocate() to listOf(CompositeByteBuf$Component:freeIfNecessary(), ResourceLeak:close()),
		CompositeByteBuf:<clinit>() to listOf(ByteBuf:nioBuffer()),
		Unpooled:buffer() to listOf(ByteBufAllocator:heapBuffer()),
		Unpooled:directBuffer() to listOf(ByteBufAllocator:directBuffer()),
		Unpooled:buffer(int) to listOf(ByteBufAllocator:heapBuffer(int)),
		Unpooled:directBuffer(int) to listOf(ByteBufAllocator:directBuffer(int)),
		Unpooled:buffer(int-int) to listOf(ByteBufAllocator:heapBuffer(int-int)),
		Unpooled:directBuffer(int-int) to listOf(ByteBufAllocator:directBuffer(int-int)),
		Unpooled:wrappedBuffer(byte[]) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int)),
		Unpooled:wrappedBuffer(byte[]-int-int) to listOf(Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[]), ByteBuf:slice(int-int)),
		Unpooled:wrappedBuffer(ByteBuffer) to listOf(Unpooled:wrappedBuffer(byte[]-int-int), ByteBuf:order(ByteOrder), PlatformDependent:hasUnsafe(), ReadOnlyUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer), ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int), ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int)),
		Unpooled:wrappedBuffer(ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:slice()),
		Unpooled:wrappedBuffer(byte[][]) to listOf(Unpooled:wrappedBuffer(int-byte[][])),
		Unpooled:wrappedBuffer(ByteBuf[]) to listOf(Unpooled:wrappedBuffer(int-ByteBuf[])),
		Unpooled:wrappedBuffer(ByteBuffer[]) to listOf(Unpooled:wrappedBuffer(int-ByteBuffer[])),
		Unpooled:wrappedBuffer(int-byte[][]) to listOf(Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[]), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable)),
		Unpooled:wrappedBuffer(int-ByteBuf[]) to listOf(ByteBuf:isReadable(), ByteBuf:order(ByteOrder), Unpooled:wrappedBuffer(ByteBuf), ByteBuf:isReadable(), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-ByteBuf[])),
		Unpooled:wrappedBuffer(int-ByteBuffer[]) to listOf(Unpooled:wrappedBuffer(ByteBuffer), Unpooled:wrappedBuffer(ByteBuffer), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable)),
		Unpooled:compositeBuffer() to listOf(Unpooled:compositeBuffer(int)),
		Unpooled:compositeBuffer(int) to listOf(CompositeByteBuf:<init>(ByteBufAllocator-boolean-int)),
		Unpooled:copiedBuffer(byte[]) to listOf(byte[]:clone(), Unpooled:wrappedBuffer(byte[])),
		Unpooled:copiedBuffer(byte[]-int-int) to listOf(Unpooled:wrappedBuffer(byte[])),
		Unpooled:copiedBuffer(ByteBuffer) to listOf(Unpooled:wrappedBuffer(byte[]), ByteBuf:order(ByteOrder)),
		Unpooled:copiedBuffer(ByteBuf) to listOf(ByteBuf:readableBytes(), Unpooled:buffer(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		Unpooled:copiedBuffer(byte[][]) to listOf(Unpooled:copiedBuffer(byte[]), Unpooled:wrappedBuffer(byte[])),
		Unpooled:copiedBuffer(ByteBuf[]) to listOf(Unpooled:copiedBuffer(ByteBuf), ByteBuf:readableBytes(), ByteBuf:order(), ByteBuf:order(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]-int-int), Unpooled:wrappedBuffer(byte[]), ByteBuf:order(ByteOrder)),
		Unpooled:copiedBuffer(ByteBuffer[]) to listOf(Unpooled:copiedBuffer(ByteBuffer), Unpooled:wrappedBuffer(byte[]), ByteBuf:order(ByteOrder)),
		Unpooled:copiedBuffer(CharSequence-Charset) to listOf(Unpooled:copiedBuffer(CharBuffer-Charset), Unpooled:copiedBuffer(CharBuffer-Charset)),
		Unpooled:copiedBuffer(CharSequence-int-int-Charset) to listOf(Unpooled:copiedBuffer(char[]-int-int-Charset), Unpooled:copiedBuffer(CharBuffer-Charset), Unpooled:copiedBuffer(CharBuffer-Charset)),
		Unpooled:copiedBuffer(char[]-Charset) to listOf(Unpooled:copiedBuffer(char[]-int-int-Charset)),
		Unpooled:copiedBuffer(char[]-int-int-Charset) to listOf(Unpooled:copiedBuffer(CharBuffer-Charset)),
		Unpooled:copiedBuffer(CharBuffer-Charset) to listOf(ByteBufUtil:encodeString0(ByteBufAllocator-boolean-CharBuffer-Charset)),
		Unpooled:unmodifiableBuffer(ByteBuf) to listOf(ByteBuf:order(), ReadOnlyByteBuf:<init>(ByteBuf), ByteBuf:order(ByteOrder), ReadOnlyByteBuf:<init>(ByteBuf), ReadOnlyByteBuf:order(ByteOrder)),
		Unpooled:copyInt(int) to listOf(Unpooled:buffer(int), ByteBuf:writeInt(int)),
		Unpooled:copyInt(int[]) to listOf(Unpooled:buffer(int), ByteBuf:writeInt(int)),
		Unpooled:copyShort(int) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int)),
		Unpooled:copyShort(short[]) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int)),
		Unpooled:copyShort(int[]) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int)),
		Unpooled:copyMedium(int) to listOf(Unpooled:buffer(int), ByteBuf:writeMedium(int)),
		Unpooled:copyMedium(int[]) to listOf(Unpooled:buffer(int), ByteBuf:writeMedium(int)),
		Unpooled:copyLong(long) to listOf(Unpooled:buffer(int), ByteBuf:writeLong(long)),
		Unpooled:copyLong(long[]) to listOf(Unpooled:buffer(int), ByteBuf:writeLong(long)),
		Unpooled:copyBoolean(boolean) to listOf(Unpooled:buffer(int), ByteBuf:writeBoolean(boolean)),
		Unpooled:copyBoolean(boolean[]) to listOf(Unpooled:buffer(int), ByteBuf:writeBoolean(boolean)),
		Unpooled:copyFloat(float) to listOf(Unpooled:buffer(int), ByteBuf:writeFloat(float)),
		Unpooled:copyFloat(float[]) to listOf(Unpooled:buffer(int), ByteBuf:writeFloat(float)),
		Unpooled:copyDouble(double) to listOf(Unpooled:buffer(int), ByteBuf:writeDouble(double)),
		Unpooled:copyDouble(double[]) to listOf(Unpooled:buffer(int), ByteBuf:writeDouble(double)),
		Unpooled:unreleasableBuffer(ByteBuf) to listOf(UnreleasableByteBuf:<init>(ByteBuf)),
		Unpooled:unmodifiableBuffer(ByteBuf[]) to listOf(FixedCompositeByteBuf:<init>(ByteBufAllocator-ByteBuf[])),
		Unpooled:<clinit>() to listOf(ByteBufAllocator:buffer(int-int)),
		PoolChunk:<init>(PoolArena-Object-int-int-int-int) to listOf(PoolChunk:log2(int), PoolChunk:newSubpageArray(int)),
		PoolChunk:<init>(PoolArena-Object-int) to listOf(PoolChunk:log2(int)),
		PoolChunk:allocate(int) to listOf(PoolChunk:allocateRun(int), PoolChunk:allocateSubpage(int)),
		PoolChunk:updateParentsAlloc(int) to listOf(PoolChunk:value(int), PoolChunk:value(int), PoolChunk:setValue(int-byte)),
		PoolChunk:updateParentsFree(int) to listOf(PoolChunk:depth(int), PoolChunk:value(int), PoolChunk:value(int), PoolChunk:setValue(int-byte), PoolChunk:setValue(int-byte)),
		PoolChunk:allocateNode(int) to listOf(PoolChunk:value(int), PoolChunk:value(int), PoolChunk:value(int), PoolChunk:value(int), PoolChunk:setValue(int-byte), PoolChunk:updateParentsAlloc(int)),
		PoolChunk:allocateRun(int) to listOf(PoolChunk:log2(int), PoolChunk:allocateNode(int), PoolChunk:runLength(int)),
		PoolChunk:allocateSubpage(int) to listOf(PoolChunk:allocateNode(int), PoolChunk:subpageIdx(int), PoolChunk:runOffset(int), PoolSubpage:<init>(PoolChunk-int-int-int-int), PoolSubpage:init(int), PoolSubpage:allocate()),
		PoolChunk:free(long) to listOf(PoolChunk:subpageIdx(int), PoolSubpage:free(int), PoolChunk:runLength(int), PoolChunk:depth(int), PoolChunk:setValue(int-byte), PoolChunk:updateParentsFree(int)),
		PoolChunk:initBuf(PooledByteBuf-long-int) to listOf(PoolChunk:value(int), PoolChunk:runOffset(int), PoolChunk:runLength(int), PooledByteBuf:init(PoolChunk-long-int-int-int), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int)),
		PoolChunk:initBufWithSubpage(PooledByteBuf-long-int) to listOf(PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int)),
		PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int) to listOf(PoolChunk:subpageIdx(int), PoolChunk:runOffset(int), PooledByteBuf:init(PoolChunk-long-int-int-int)),
		PoolChunk:runLength(int) to listOf(PoolChunk:depth(int)),
		PoolChunk:runOffset(int) to listOf(PoolChunk:depth(int), PoolChunk:runLength(int)),
		PoolChunk:toString() to listOf(PoolChunk:usage()),
		PooledHeapByteBuf:newInstance(int) to listOf(Recycler:get(), PooledHeapByteBuf:setRefCnt(int), PooledHeapByteBuf:maxCapacity(int)),
		PooledHeapByteBuf:<init>(Recycler$Handle-int) to listOf(PooledByteBuf:<init>(Recycler$Handle-int)),
		PooledHeapByteBuf:_getByte(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getShort(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getUnsignedMedium(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getInt(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getLong(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledHeapByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), PooledHeapByteBuf:idx(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledHeapByteBuf:getBytes(int-byte[]-int-int), PooledHeapByteBuf:idx(int), ByteBuf:setBytes(int-byte[]-int-int)),
		PooledHeapByteBuf:getBytes(int-byte[]-int-int) to listOf(PooledHeapByteBuf:checkDstIndex(int-int-int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:getBytes(int-ByteBuffer) to listOf(PooledHeapByteBuf:checkIndex(int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:capacity()),
		PooledHeapByteBuf:getBytes(int-OutputStream-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:internalNioBuffer()),
		PooledHeapByteBuf:readBytes(GatheringByteChannel-int) to listOf(PooledHeapByteBuf:checkReadableBytes(int), PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		PooledHeapByteBuf:_setByte(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setShort(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setMedium(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setInt(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setLong(int-long) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledHeapByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PooledHeapByteBuf:idx(int), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledHeapByteBuf:setBytes(int-byte[]-int-int), PooledHeapByteBuf:idx(int), ByteBuf:getBytes(int-byte[]-int-int)),
		PooledHeapByteBuf:setBytes(int-byte[]-int-int) to listOf(PooledHeapByteBuf:checkSrcIndex(int-int-int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-ByteBuffer) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-InputStream-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:internalNioBuffer()),
		PooledHeapByteBuf:copy(int-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:alloc(), PooledHeapByteBuf:maxCapacity(), ByteBufAllocator:heapBuffer(int-int), PooledHeapByteBuf:idx(int), ByteBuf:writeBytes(byte[]-int-int)),
		PooledHeapByteBuf:nioBuffers(int-int) to listOf(PooledHeapByteBuf:nioBuffer(int-int)),
		PooledHeapByteBuf:nioBuffer(int-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:internalNioBuffer(int-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:internalNioBuffer()),
		PooledHeapByteBuf:array() to listOf(PooledHeapByteBuf:ensureAccessible()),
		PooledHeapByteBuf:newInternalNioBuffer(Object) to listOf(PooledHeapByteBuf:newInternalNioBuffer(byte[])),
		PooledHeapByteBuf:<init>(Recycler$Handle-int-PooledHeapByteBuf$1) to listOf(PooledHeapByteBuf:<init>(Recycler$Handle-int)),
		PooledHeapByteBuf:<clinit>() to listOf(PooledHeapByteBuf$1:<init>()),
		PoolArena$HeapArena:<init>(PooledByteBufAllocator-int-int-int-int) to listOf(PoolArena:<init>(PooledByteBufAllocator-int-int-int-int)),
		PoolArena$HeapArena:newChunk(int-int-int-int) to listOf(PoolChunk:<init>(PoolArena-Object-int-int-int-int)),
		PoolArena$HeapArena:newUnpooledChunk(int) to listOf(PoolChunk:<init>(PoolArena-Object-int)),
		PoolArena$HeapArena:newByteBuf(int) to listOf(PooledHeapByteBuf:newInstance(int)),
		PoolArena$HeapArena:memoryCopy(Object-int-Object-int-int) to listOf(PoolArena$HeapArena:memoryCopy(byte[]-int-byte[]-int-int)),
		PooledUnsafeDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		PooledUnsafeDirectByteBuf$1:newObject(Recycler$Handle) to listOf(PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int-PooledUnsafeDirectByteBuf$1), PooledUnsafeDirectByteBuf$1:newObject(Recycler$Handle)),
		PoolThreadCache:<init>(PoolArena-PoolArena-int-int-int-int-int) to listOf(PoolThreadCache$1:<init>(PoolThreadCache), PoolThreadCache:createSubPageCaches(int-int), PoolThreadCache:createSubPageCaches(int-int), PoolThreadCache:log2(int), PoolThreadCache:createNormalCaches(int-int-PoolArena), PoolThreadCache:createSubPageCaches(int-int), PoolThreadCache:createSubPageCaches(int-int), PoolThreadCache:log2(int), PoolThreadCache:createNormalCaches(int-int-PoolArena), ThreadDeathWatcher:watch(Thread-Runnable)),
		PoolThreadCache:createSubPageCaches(int-int) to listOf(PoolThreadCache$SubPageMemoryRegionCache:<init>(int)),
		PoolThreadCache:createNormalCaches(int-int-PoolArena) to listOf(PoolThreadCache$NormalMemoryRegionCache:<init>(int)),
		PoolThreadCache:allocateTiny(PoolArena-PooledByteBuf-int-int) to listOf(PoolThreadCache:cacheForTiny(PoolArena-int), PoolThreadCache:allocate(PoolThreadCache$MemoryRegionCache-PooledByteBuf-int)),
		PoolThreadCache:allocateSmall(PoolArena-PooledByteBuf-int-int) to listOf(PoolThreadCache:cacheForSmall(PoolArena-int), PoolThreadCache:allocate(PoolThreadCache$MemoryRegionCache-PooledByteBuf-int)),
		PoolThreadCache:allocateNormal(PoolArena-PooledByteBuf-int-int) to listOf(PoolThreadCache:cacheForNormal(PoolArena-int), PoolThreadCache:allocate(PoolThreadCache$MemoryRegionCache-PooledByteBuf-int)),
		PoolThreadCache:allocate(PoolThreadCache$MemoryRegionCache-PooledByteBuf-int) to listOf(PoolThreadCache$MemoryRegionCache:allocate(PooledByteBuf-int), PoolThreadCache:trim()),
		PoolThreadCache:add(PoolArena-PoolChunk-long-int) to listOf(PoolArena:isTinyOrSmall(int), PoolArena:isTiny(int), PoolThreadCache:cacheForTiny(PoolArena-int), PoolThreadCache:cacheForSmall(PoolArena-int), PoolThreadCache:cacheForNormal(PoolArena-int), PoolThreadCache$MemoryRegionCache:add(PoolChunk-long)),
		PoolThreadCache:free() to listOf(ThreadDeathWatcher:unwatch(Thread-Runnable), PoolThreadCache:free0()),
		PoolThreadCache:free0() to listOf(PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object)),
		PoolThreadCache:free(PoolThreadCache$MemoryRegionCache[]) to listOf(PoolThreadCache:free(PoolThreadCache$MemoryRegionCache)),
		PoolThreadCache:free(PoolThreadCache$MemoryRegionCache) to listOf(PoolThreadCache$MemoryRegionCache:free()),
		PoolThreadCache:trim() to listOf(PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[]), PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[])),
		PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache[]) to listOf(PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache)),
		PoolThreadCache:trim(PoolThreadCache$MemoryRegionCache) to listOf(PoolThreadCache$MemoryRegionCache:access$100(PoolThreadCache$MemoryRegionCache)),
		PoolThreadCache:cacheForTiny(PoolArena-int) to listOf(PoolArena:tinyIdx(int), PoolArena:isDirect(), PoolThreadCache:cache(PoolThreadCache$MemoryRegionCache[]-int), PoolThreadCache:cache(PoolThreadCache$MemoryRegionCache[]-int)),
		PoolThreadCache:cacheForSmall(PoolArena-int) to listOf(PoolArena:smallIdx(int), PoolArena:isDirect(), PoolThreadCache:cache(PoolThreadCache$MemoryRegionCache[]-int), PoolThreadCache:cache(PoolThreadCache$MemoryRegionCache[]-int)),
		PoolThreadCache:cacheForNormal(PoolArena-int) to listOf(PoolArena:isDirect(), PoolThreadCache:log2(int), PoolThreadCache:cache(PoolThreadCache$MemoryRegionCache[]-int), PoolThreadCache:log2(int), PoolThreadCache:cache(PoolThreadCache$MemoryRegionCache[]-int)),
		PoolThreadCache:access$000(PoolThreadCache) to listOf(PoolThreadCache:free0()),
		PoolThreadCache:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractReferenceCountedByteBuf:<init>(int) to listOf(AbstractByteBuf:<init>(int)),
		AbstractReferenceCountedByteBuf:retain() to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:retain()),
		AbstractReferenceCountedByteBuf:retain(int) to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:retain(int)),
		AbstractReferenceCountedByteBuf:release() to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:deallocate()),
		AbstractReferenceCountedByteBuf:release(int) to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:deallocate()),
		AbstractReferenceCountedByteBuf:touch(Object) to listOf(AbstractReferenceCountedByteBuf:touch(Object)),
		AbstractReferenceCountedByteBuf:touch() to listOf(AbstractReferenceCountedByteBuf:touch()),
		AbstractReferenceCountedByteBuf:<clinit>() to listOf(PlatformDependent:newAtomicIntegerFieldUpdater(Class-String)),
		ByteBufUtil$ThreadLocalDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		ByteBufUtil$ThreadLocalDirectByteBuf$1:newObject(Recycler$Handle) to listOf(ByteBufUtil$ThreadLocalDirectByteBuf:<init>(Recycler$Handle-ByteBufUtil$1), ByteBufUtil$ThreadLocalDirectByteBuf$1:newObject(Recycler$Handle)),
		ReadOnlyByteBuf:<init>(ByteBuf) to listOf(ByteBuf:maxCapacity(), AbstractDerivedByteBuf:<init>(int), ByteBuf:unwrap(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ReadOnlyByteBuf:setIndex(int-int)),
		ReadOnlyByteBuf:alloc() to listOf(ByteBuf:alloc()),
		ReadOnlyByteBuf:order() to listOf(ByteBuf:order()),
		ReadOnlyByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		ReadOnlyByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		ReadOnlyByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		ReadOnlyByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		ReadOnlyByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		ReadOnlyByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		ReadOnlyByteBuf:duplicate() to listOf(ReadOnlyByteBuf:<init>(ByteBuf)),
		ReadOnlyByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int)),
		ReadOnlyByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int), Unpooled:unmodifiableBuffer(ByteBuf)),
		ReadOnlyByteBuf:getByte(int) to listOf(ReadOnlyByteBuf:_getByte(int)),
		ReadOnlyByteBuf:_getByte(int) to listOf(ByteBuf:getByte(int)),
		ReadOnlyByteBuf:getShort(int) to listOf(ReadOnlyByteBuf:_getShort(int)),
		ReadOnlyByteBuf:_getShort(int) to listOf(ByteBuf:getShort(int)),
		ReadOnlyByteBuf:getUnsignedMedium(int) to listOf(ReadOnlyByteBuf:_getUnsignedMedium(int)),
		ReadOnlyByteBuf:_getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		ReadOnlyByteBuf:getInt(int) to listOf(ReadOnlyByteBuf:_getInt(int)),
		ReadOnlyByteBuf:_getInt(int) to listOf(ByteBuf:getInt(int)),
		ReadOnlyByteBuf:getLong(int) to listOf(ReadOnlyByteBuf:_getLong(int)),
		ReadOnlyByteBuf:_getLong(int) to listOf(ByteBuf:getLong(int)),
		ReadOnlyByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		ReadOnlyByteBuf:nioBuffer(int-int) to listOf(ByteBuf:nioBuffer(int-int)),
		ReadOnlyByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		ReadOnlyByteBuf:internalNioBuffer(int-int) to listOf(ReadOnlyByteBuf:nioBuffer(int-int)),
		ReadOnlyByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		ReadOnlyByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		ReadOnlyByteBuf:capacity() to listOf(ByteBuf:capacity()),
		ByteBufProcessor:<clinit>() to listOf(ByteBufProcessor$1:<init>(), ByteBufProcessor$2:<init>(), ByteBufProcessor$3:<init>(), ByteBufProcessor$4:<init>(), ByteBufProcessor$5:<init>(), ByteBufProcessor$6:<init>(), ByteBufProcessor$7:<init>(), ByteBufProcessor$8:<init>(), ByteBufProcessor$9:<init>(), ByteBufProcessor$10:<init>()),
		ByteBufUtil$ThreadLocalDirectByteBuf:newInstance() to listOf(Recycler:get(), ByteBufUtil$ThreadLocalDirectByteBuf:setRefCnt(int)),
		ByteBufUtil$ThreadLocalDirectByteBuf:<init>(Recycler$Handle) to listOf(UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int)),
		ByteBufUtil$ThreadLocalDirectByteBuf:deallocate() to listOf(ByteBufUtil$ThreadLocalDirectByteBuf:capacity(), ByteBufUtil:access$100(), UnpooledDirectByteBuf:deallocate(), ByteBufUtil$ThreadLocalDirectByteBuf:clear(), Recycler:recycle(Object-Recycler$Handle)),
		ByteBufUtil$ThreadLocalDirectByteBuf:<init>(Recycler$Handle-ByteBufUtil$1) to listOf(ByteBufUtil$ThreadLocalDirectByteBuf:<init>(Recycler$Handle)),
		ByteBufUtil$ThreadLocalDirectByteBuf:<clinit>() to listOf(ByteBufUtil$ThreadLocalDirectByteBuf$1:<init>()),
		PooledByteBufAllocator$PoolThreadLocalCache:<init>(PooledByteBufAllocator) to listOf(FastThreadLocal:<init>()),
		PooledByteBufAllocator$PoolThreadLocalCache:initialValue() to listOf(PooledByteBufAllocator:access$000(PooledByteBufAllocator), PooledByteBufAllocator:access$000(PooledByteBufAllocator), PooledByteBufAllocator:access$000(PooledByteBufAllocator), PooledByteBufAllocator:access$100(PooledByteBufAllocator), PooledByteBufAllocator:access$100(PooledByteBufAllocator), PooledByteBufAllocator:access$100(PooledByteBufAllocator), PooledByteBufAllocator:access$200(PooledByteBufAllocator), PooledByteBufAllocator:access$300(PooledByteBufAllocator), PooledByteBufAllocator:access$400(PooledByteBufAllocator), PooledByteBufAllocator:access$500(), PooledByteBufAllocator:access$600(), PoolThreadCache:<init>(PoolArena-PoolArena-int-int-int-int-int), PooledByteBufAllocator$PoolThreadLocalCache:initialValue()),
		PooledByteBufAllocator$PoolThreadLocalCache:onRemoval(PoolThreadCache) to listOf(PoolThreadCache:free()),
		PooledByteBufAllocator$PoolThreadLocalCache:onRemoval(Object) to listOf(PooledByteBufAllocator$PoolThreadLocalCache:onRemoval(PoolThreadCache)),
		AbstractByteBufAllocator$1:<clinit>() to listOf(ResourceLeakDetector$Level:values(), ResourceLeakDetector$Level:ordinal(), ResourceLeakDetector$Level:ordinal(), ResourceLeakDetector$Level:ordinal()),
		ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:newObject(Recycler$Handle) to listOf(ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle-ByteBufUtil$1), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:newObject(Recycler$Handle)),
		ReadOnlyUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer) to listOf(ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), PlatformDependent:directBufferAddress(ByteBuffer)),
		ReadOnlyUnsafeDirectByteBuf:_getByte(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long)),
		ReadOnlyUnsafeDirectByteBuf:_getShort(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getShort(long)),
		ReadOnlyUnsafeDirectByteBuf:_getUnsignedMedium(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long), PlatformDependent:getByte(long), PlatformDependent:getByte(long)),
		ReadOnlyUnsafeDirectByteBuf:_getInt(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getInt(long)),
		ReadOnlyUnsafeDirectByteBuf:_getLong(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getLong(long)),
		ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), ReadOnlyUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), ReadOnlyUnsafeDirectByteBuf:addr(int), ByteBuf:array(), ByteBuf:arrayOffset(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:setBytes(int-ByteBuf-int-int)),
		ReadOnlyUnsafeDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuffer) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int), ReadOnlyUnsafeDirectByteBuf:capacity(), ReadOnlyUnsafeDirectByteBuf:internalNioBuffer()),
		ReadOnlyUnsafeDirectByteBuf:copy(int-int) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), ReadOnlyUnsafeDirectByteBuf:alloc(), ReadOnlyUnsafeDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), ByteBuf:hasMemoryAddress(), ReadOnlyUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:setIndex(int-int), ByteBuf:writeBytes(ByteBuf-int-int)),
		PoolThreadCache$MemoryRegionCache$Entry:<init>(PoolThreadCache$1) to listOf(PoolThreadCache$MemoryRegionCache$Entry:<init>()),
		FixedCompositeByteBuf$Component:<init>(int-int-ByteBuf) to listOf(ByteBuf:readableBytes()),
		PooledDirectByteBuf:newInstance(int) to listOf(Recycler:get(), PooledDirectByteBuf:setRefCnt(int), PooledDirectByteBuf:maxCapacity(int)),
		PooledDirectByteBuf:<init>(Recycler$Handle-int) to listOf(PooledByteBuf:<init>(Recycler$Handle-int)),
		PooledDirectByteBuf:_getByte(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getShort(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getUnsignedMedium(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getInt(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getLong(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledDirectByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledDirectByteBuf:getBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), PooledDirectByteBuf:getBytes(int-ByteBuffer), ByteBuf:setBytes(int-ByteBuf-int-int)),
		PooledDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(PooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean)),
		PooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean) to listOf(PooledDirectByteBuf:checkDstIndex(int-int-int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:readBytes(byte[]-int-int) to listOf(PooledDirectByteBuf:checkReadableBytes(int), PooledDirectByteBuf:getBytes(int-byte[]-int-int-boolean)),
		PooledDirectByteBuf:getBytes(int-ByteBuffer) to listOf(PooledDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		PooledDirectByteBuf:getBytes(int-ByteBuffer-boolean) to listOf(PooledDirectByteBuf:checkIndex(int), PooledDirectByteBuf:capacity(), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:readBytes(ByteBuffer) to listOf(PooledDirectByteBuf:checkReadableBytes(int), PooledDirectByteBuf:getBytes(int-ByteBuffer-boolean)),
		PooledDirectByteBuf:getBytes(int-OutputStream-int) to listOf(PooledDirectByteBuf:getBytes(int-OutputStream-int-boolean)),
		PooledDirectByteBuf:getBytes(int-OutputStream-int-boolean) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:readBytes(OutputStream-int) to listOf(PooledDirectByteBuf:checkReadableBytes(int), PooledDirectByteBuf:getBytes(int-OutputStream-int-boolean)),
		PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:readBytes(GatheringByteChannel-int) to listOf(PooledDirectByteBuf:checkReadableBytes(int), PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int-boolean)),
		PooledDirectByteBuf:_setByte(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setShort(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setMedium(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setInt(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setLong(int-long) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledDirectByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledDirectByteBuf:setBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), PooledDirectByteBuf:setBytes(int-ByteBuffer), ByteBuf:getBytes(int-ByteBuf-int-int)),
		PooledDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(PooledDirectByteBuf:checkSrcIndex(int-int-int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-ByteBuffer) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-InputStream-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:copy(int-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:alloc(), PooledDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), ByteBuf:writeBytes(ByteBuf-int-int)),
		PooledDirectByteBuf:nioBuffer(int-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:nioBuffers(int-int) to listOf(PooledDirectByteBuf:nioBuffer(int-int)),
		PooledDirectByteBuf:internalNioBuffer(int-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:idx(int), PooledDirectByteBuf:internalNioBuffer()),
		PooledDirectByteBuf:newInternalNioBuffer(Object) to listOf(PooledDirectByteBuf:newInternalNioBuffer(ByteBuffer)),
		PooledDirectByteBuf:<init>(Recycler$Handle-int-PooledDirectByteBuf$1) to listOf(PooledDirectByteBuf:<init>(Recycler$Handle-int)),
		PooledDirectByteBuf:<clinit>() to listOf(PooledDirectByteBuf$1:<init>()),
		ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:newInstance() to listOf(Recycler:get(), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:setRefCnt(int)),
		ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle) to listOf(UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int)),
		ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:deallocate() to listOf(ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:capacity(), ByteBufUtil:access$100(), UnpooledUnsafeDirectByteBuf:deallocate(), ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:clear(), Recycler:recycle(Object-Recycler$Handle)),
		ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle-ByteBufUtil$1) to listOf(ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<init>(Recycler$Handle)),
		ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:<clinit>() to listOf(ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:<init>()),
		SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak) to listOf(WrappedByteBuf:<init>(ByteBuf)),
		SimpleLeakAwareByteBuf:release() to listOf(WrappedByteBuf:release(), ResourceLeak:close()),
		SimpleLeakAwareByteBuf:release(int) to listOf(WrappedByteBuf:release(int), ResourceLeak:close()),
		SimpleLeakAwareByteBuf:order(ByteOrder) to listOf(ResourceLeak:record(), SimpleLeakAwareByteBuf:order(), WrappedByteBuf:order(ByteOrder), SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		SimpleLeakAwareByteBuf:slice() to listOf(WrappedByteBuf:slice(), SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		SimpleLeakAwareByteBuf:slice(int-int) to listOf(WrappedByteBuf:slice(int-int), SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		SimpleLeakAwareByteBuf:duplicate() to listOf(WrappedByteBuf:duplicate(), SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		SimpleLeakAwareByteBuf:readSlice(int) to listOf(WrappedByteBuf:readSlice(int), SimpleLeakAwareByteBuf:<init>(ByteBuf-ResourceLeak)),
		SimpleLeakAwareByteBuf:touch(Object) to listOf(SimpleLeakAwareByteBuf:touch(Object)),
		SimpleLeakAwareByteBuf:touch() to listOf(SimpleLeakAwareByteBuf:touch()),
		PoolArena$DirectArena:<init>(PooledByteBufAllocator-int-int-int-int) to listOf(PoolArena:<init>(PooledByteBufAllocator-int-int-int-int)),
		PoolArena$DirectArena:newChunk(int-int-int-int) to listOf(PoolChunk:<init>(PoolArena-Object-int-int-int-int)),
		PoolArena$DirectArena:newUnpooledChunk(int) to listOf(PoolChunk:<init>(PoolArena-Object-int)),
		PoolArena$DirectArena:destroyChunk(PoolChunk) to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer)),
		PoolArena$DirectArena:newByteBuf(int) to listOf(PooledUnsafeDirectByteBuf:newInstance(int), PooledDirectByteBuf:newInstance(int)),
		PoolArena$DirectArena:memoryCopy(ByteBuffer-int-ByteBuffer-int-int) to listOf(PlatformDependent:directBufferAddress(ByteBuffer), PlatformDependent:directBufferAddress(ByteBuffer), PlatformDependent:copyMemory(long-long-long)),
		PoolArena$DirectArena:memoryCopy(Object-int-Object-int-int) to listOf(PoolArena$DirectArena:memoryCopy(ByteBuffer-int-ByteBuffer-int-int)),
		PoolArena$DirectArena:<clinit>() to listOf(PlatformDependent:hasUnsafe()),
		PooledByteBufAllocator:<init>() to listOf(PooledByteBufAllocator:<init>(boolean)),
		PooledByteBufAllocator:<init>(boolean) to listOf(PooledByteBufAllocator:<init>(boolean-int-int-int-int)),
		PooledByteBufAllocator:<init>(int-int-int-int) to listOf(PooledByteBufAllocator:<init>(boolean-int-int-int-int)),
		PooledByteBufAllocator:<init>(boolean-int-int-int-int) to listOf(PooledByteBufAllocator:<init>(boolean-int-int-int-int-int-int-int)),
		PooledByteBufAllocator:<init>(boolean-int-int-int-int-int-int-int) to listOf(AbstractByteBufAllocator:<init>(boolean), PooledByteBufAllocator$PoolThreadLocalCache:<init>(PooledByteBufAllocator), PooledByteBufAllocator:validateAndCalculateChunkSize(int-int), PooledByteBufAllocator:validateAndCalculatePageShifts(int), PooledByteBufAllocator:newArenaArray(int), PoolArena$HeapArena:<init>(PooledByteBufAllocator-int-int-int-int), PooledByteBufAllocator:newArenaArray(int), PoolArena$DirectArena:<init>(PooledByteBufAllocator-int-int-int-int)),
		PooledByteBufAllocator:newHeapBuffer(int-int) to listOf(PooledByteBufAllocator$PoolThreadLocalCache:get(), PoolArena:allocate(PoolThreadCache-int-int), UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int), PooledByteBufAllocator:toLeakAwareBuffer(ByteBuf)),
		PooledByteBufAllocator:newDirectBuffer(int-int) to listOf(PooledByteBufAllocator$PoolThreadLocalCache:get(), PoolArena:allocate(PoolThreadCache-int-int), PlatformDependent:hasUnsafe(), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int), UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int), PooledByteBufAllocator:toLeakAwareBuffer(ByteBuf)),
		PooledByteBufAllocator:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getInt(String-int), PooledByteBufAllocator:validateAndCalculatePageShifts(int), SystemPropertyUtil:getInt(String-int), PooledByteBufAllocator:validateAndCalculateChunkSize(int-int), SystemPropertyUtil:getInt(String-int), PlatformDependent:maxDirectMemory(), SystemPropertyUtil:getInt(String-int), SystemPropertyUtil:getInt(String-int), SystemPropertyUtil:getInt(String-int), SystemPropertyUtil:getInt(String-int), SystemPropertyUtil:getInt(String-int), SystemPropertyUtil:getInt(String-int), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), PlatformDependent:directBufferPreferred(), PooledByteBufAllocator:<init>(boolean)),
		CompositeByteBuf$Component:<init>(ByteBuf) to listOf(ByteBuf:readableBytes()),
		CompositeByteBuf$Component:freeIfNecessary() to listOf(ByteBuf:release()),
		PoolChunkList:allocate(PooledByteBuf-int-int) to listOf(PoolChunk:allocate(int), PoolChunk:initBuf(PooledByteBuf-long-int), PoolChunk:usage(), PoolChunkList:remove(PoolChunk), PoolChunkList:add(PoolChunk)),
		PoolChunkList:free(PoolChunk-long) to listOf(PoolChunk:free(long), PoolChunk:usage(), PoolChunkList:remove(PoolChunk), PoolChunk:usage(), PoolArena:destroyChunk(PoolChunk), PoolChunkList:add(PoolChunk)),
		PoolChunkList:add(PoolChunk) to listOf(PoolChunk:usage(), PoolChunkList:add(PoolChunk)),
		DefaultByteBufHolder:content() to listOf(ByteBuf:refCnt(), ByteBuf:refCnt(), IllegalReferenceCountException:<init>(int)),
		DefaultByteBufHolder:copy() to listOf(ByteBuf:copy(), DefaultByteBufHolder:<init>(ByteBuf)),
		DefaultByteBufHolder:duplicate() to listOf(ByteBuf:duplicate(), DefaultByteBufHolder:<init>(ByteBuf)),
		DefaultByteBufHolder:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultByteBufHolder:retain() to listOf(ByteBuf:retain(), DefaultByteBufHolder:retain()),
		DefaultByteBufHolder:retain(int) to listOf(ByteBuf:retain(int), DefaultByteBufHolder:retain(int)),
		DefaultByteBufHolder:touch() to listOf(ByteBuf:touch(), DefaultByteBufHolder:touch()),
		DefaultByteBufHolder:touch(Object) to listOf(ByteBuf:touch(Object), DefaultByteBufHolder:touch(Object)),
		DefaultByteBufHolder:release() to listOf(ByteBuf:release()),
		DefaultByteBufHolder:release(int) to listOf(ByteBuf:release(int)),
		DefaultByteBufHolder:toString() to listOf(StringUtil:simpleClassName(Object), DefaultByteBufHolder:content(), ByteBuf:toString()),
		UnreleasableByteBuf:<init>(ByteBuf) to listOf(WrappedByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:order(ByteOrder) to listOf(UnreleasableByteBuf:order(), SwappedByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:readSlice(int) to listOf(ByteBuf:readSlice(int), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:slice() to listOf(ByteBuf:slice(), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:duplicate() to listOf(ByteBuf:duplicate(), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:touch(Object) to listOf(UnreleasableByteBuf:touch(Object)),
		UnreleasableByteBuf:touch() to listOf(UnreleasableByteBuf:touch()),
		UnreleasableByteBuf:retain(int) to listOf(UnreleasableByteBuf:retain(int)),
		UnreleasableByteBuf:retain() to listOf(UnreleasableByteBuf:retain()),
		UnsafeDirectSwappedByteBuf:<init>(AbstractByteBuf) to listOf(SwappedByteBuf:<init>(ByteBuf), UnsafeDirectSwappedByteBuf:order()),
		UnsafeDirectSwappedByteBuf:addr(int) to listOf(AbstractByteBuf:memoryAddress()),
		UnsafeDirectSwappedByteBuf:getLong(int) to listOf(AbstractByteBuf:checkIndex(int-int), UnsafeDirectSwappedByteBuf:addr(int), PlatformDependent:getLong(long)),
		UnsafeDirectSwappedByteBuf:getFloat(int) to listOf(UnsafeDirectSwappedByteBuf:getInt(int)),
		UnsafeDirectSwappedByteBuf:getDouble(int) to listOf(UnsafeDirectSwappedByteBuf:getLong(int)),
		UnsafeDirectSwappedByteBuf:getChar(int) to listOf(UnsafeDirectSwappedByteBuf:getShort(int)),
		UnsafeDirectSwappedByteBuf:getUnsignedInt(int) to listOf(UnsafeDirectSwappedByteBuf:getInt(int)),
		UnsafeDirectSwappedByteBuf:getInt(int) to listOf(AbstractByteBuf:checkIndex(int-int), UnsafeDirectSwappedByteBuf:addr(int), PlatformDependent:getInt(long)),
		UnsafeDirectSwappedByteBuf:getUnsignedShort(int) to listOf(UnsafeDirectSwappedByteBuf:getShort(int)),
		UnsafeDirectSwappedByteBuf:getShort(int) to listOf(AbstractByteBuf:checkIndex(int-int), UnsafeDirectSwappedByteBuf:addr(int), PlatformDependent:getShort(long)),
		UnsafeDirectSwappedByteBuf:setShort(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), UnsafeDirectSwappedByteBuf:_setShort(int-int)),
		UnsafeDirectSwappedByteBuf:setInt(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), UnsafeDirectSwappedByteBuf:_setInt(int-int)),
		UnsafeDirectSwappedByteBuf:setLong(int-long) to listOf(AbstractByteBuf:checkIndex(int-int), UnsafeDirectSwappedByteBuf:_setLong(int-long)),
		UnsafeDirectSwappedByteBuf:setChar(int-int) to listOf(UnsafeDirectSwappedByteBuf:setShort(int-int)),
		UnsafeDirectSwappedByteBuf:setFloat(int-float) to listOf(UnsafeDirectSwappedByteBuf:setInt(int-int)),
		UnsafeDirectSwappedByteBuf:setDouble(int-double) to listOf(UnsafeDirectSwappedByteBuf:setLong(int-long)),
		UnsafeDirectSwappedByteBuf:writeShort(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), UnsafeDirectSwappedByteBuf:_setShort(int-int)),
		UnsafeDirectSwappedByteBuf:writeInt(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), UnsafeDirectSwappedByteBuf:_setInt(int-int)),
		UnsafeDirectSwappedByteBuf:writeLong(long) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:ensureWritable(int), UnsafeDirectSwappedByteBuf:_setLong(int-long)),
		UnsafeDirectSwappedByteBuf:writeChar(int) to listOf(UnsafeDirectSwappedByteBuf:writeShort(int)),
		UnsafeDirectSwappedByteBuf:writeFloat(float) to listOf(UnsafeDirectSwappedByteBuf:writeInt(int)),
		UnsafeDirectSwappedByteBuf:writeDouble(double) to listOf(UnsafeDirectSwappedByteBuf:writeLong(long)),
		UnsafeDirectSwappedByteBuf:_setShort(int-int) to listOf(UnsafeDirectSwappedByteBuf:addr(int), PlatformDependent:putShort(long-short)),
		UnsafeDirectSwappedByteBuf:_setInt(int-int) to listOf(UnsafeDirectSwappedByteBuf:addr(int), PlatformDependent:putInt(long-int)),
		UnsafeDirectSwappedByteBuf:_setLong(int-long) to listOf(UnsafeDirectSwappedByteBuf:addr(int), PlatformDependent:putLong(long-long)),
		AbstractDerivedByteBuf:<init>(int) to listOf(AbstractByteBuf:<init>(int)),
		AbstractDerivedByteBuf:refCnt() to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:refCnt()),
		AbstractDerivedByteBuf:retain() to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:retain(), AbstractDerivedByteBuf:retain()),
		AbstractDerivedByteBuf:retain(int) to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:retain(int), AbstractDerivedByteBuf:retain(int)),
		AbstractDerivedByteBuf:touch() to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:touch(), AbstractDerivedByteBuf:touch()),
		AbstractDerivedByteBuf:touch(Object) to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:touch(Object), AbstractDerivedByteBuf:touch(Object)),
		AbstractDerivedByteBuf:release() to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:release()),
		AbstractDerivedByteBuf:release(int) to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:release(int)),
		AbstractDerivedByteBuf:internalNioBuffer(int-int) to listOf(AbstractDerivedByteBuf:nioBuffer(int-int)),
		AbstractDerivedByteBuf:nioBuffer(int-int) to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:nioBuffer(int-int)),
		DuplicatedByteBuf:<init>(ByteBuf) to listOf(ByteBuf:maxCapacity(), AbstractDerivedByteBuf:<init>(int), ByteBuf:readerIndex(), ByteBuf:writerIndex(), DuplicatedByteBuf:setIndex(int-int)),
		DuplicatedByteBuf:alloc() to listOf(ByteBuf:alloc()),
		DuplicatedByteBuf:order() to listOf(ByteBuf:order()),
		DuplicatedByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		DuplicatedByteBuf:capacity() to listOf(ByteBuf:capacity()),
		DuplicatedByteBuf:capacity(int) to listOf(ByteBuf:capacity(int)),
		DuplicatedByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		DuplicatedByteBuf:array() to listOf(ByteBuf:array()),
		DuplicatedByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		DuplicatedByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		DuplicatedByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		DuplicatedByteBuf:getByte(int) to listOf(DuplicatedByteBuf:_getByte(int)),
		DuplicatedByteBuf:_getByte(int) to listOf(ByteBuf:getByte(int)),
		DuplicatedByteBuf:getShort(int) to listOf(DuplicatedByteBuf:_getShort(int)),
		DuplicatedByteBuf:_getShort(int) to listOf(ByteBuf:getShort(int)),
		DuplicatedByteBuf:getUnsignedMedium(int) to listOf(DuplicatedByteBuf:_getUnsignedMedium(int)),
		DuplicatedByteBuf:_getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		DuplicatedByteBuf:getInt(int) to listOf(DuplicatedByteBuf:_getInt(int)),
		DuplicatedByteBuf:_getInt(int) to listOf(ByteBuf:getInt(int)),
		DuplicatedByteBuf:getLong(int) to listOf(DuplicatedByteBuf:_getLong(int)),
		DuplicatedByteBuf:_getLong(int) to listOf(ByteBuf:getLong(int)),
		DuplicatedByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int)),
		DuplicatedByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int)),
		DuplicatedByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		DuplicatedByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		DuplicatedByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		DuplicatedByteBuf:setByte(int-int) to listOf(DuplicatedByteBuf:_setByte(int-int)),
		DuplicatedByteBuf:_setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		DuplicatedByteBuf:setShort(int-int) to listOf(DuplicatedByteBuf:_setShort(int-int)),
		DuplicatedByteBuf:_setShort(int-int) to listOf(ByteBuf:setShort(int-int)),
		DuplicatedByteBuf:setMedium(int-int) to listOf(DuplicatedByteBuf:_setMedium(int-int)),
		DuplicatedByteBuf:_setMedium(int-int) to listOf(ByteBuf:setMedium(int-int)),
		DuplicatedByteBuf:setInt(int-int) to listOf(DuplicatedByteBuf:_setInt(int-int)),
		DuplicatedByteBuf:_setInt(int-int) to listOf(ByteBuf:setInt(int-int)),
		DuplicatedByteBuf:setLong(int-long) to listOf(DuplicatedByteBuf:_setLong(int-long)),
		DuplicatedByteBuf:_setLong(int-long) to listOf(ByteBuf:setLong(int-long)),
		DuplicatedByteBuf:setBytes(int-byte[]-int-int) to listOf(ByteBuf:setBytes(int-byte[]-int-int)),
		DuplicatedByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int-int)),
		DuplicatedByteBuf:setBytes(int-ByteBuffer) to listOf(ByteBuf:setBytes(int-ByteBuffer)),
		DuplicatedByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		DuplicatedByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		DuplicatedByteBuf:setBytes(int-InputStream-int) to listOf(ByteBuf:setBytes(int-InputStream-int)),
		DuplicatedByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		DuplicatedByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		DuplicatedByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		DuplicatedByteBuf:internalNioBuffer(int-int) to listOf(DuplicatedByteBuf:nioBuffer(int-int)),
		DuplicatedByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		DuplicatedByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
	)
)