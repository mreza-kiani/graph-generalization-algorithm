Graph(
	nodes = listOf(ForkJoinPool:findNonEmptyStealQueue(), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ChannelTrafficShapingHandler:<init>(long), NioSctpChannel:doWriteMessages(Object[]-int-int-boolean), Channel:newFailedFuture(Throwable), PlatformDependent:getObject(Object-long), ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), Channel:attr(AttributeKey), ByteBuf:compareTo(ByteBuf), ByteBufProcessor$4:<init>(), FileUpload:addContent(ByteBuf-boolean), DiskFileUpload:getCharset(), RtspVersions:valueOf(String), DefaultHttpContent:<init>(ByteBuf), MixedAttribute:duplicate(), StringDecoder:decode(ChannelHandlerContext-Object-List), SocksCmdResponseDecoder$State[]:clone(), UnreleasableByteBuf:getInt(int), DefaultPromise:setUncancellable(), DiskFileUpload:toString(), Unsafe:objectFieldOffset(Field), ConcurrentSet:contains(Object), NioSocketChannel:eventLoop(), ClientCookieEncoder:encode(String-String), JZlibEncoder:close(ChannelPromise), ForkJoinPool:getSurplusQueuedTaskCount(), HashedWheelTimer$Worker:<init>(HashedWheelTimer), PooledUnsafeDirectByteBuf:_getUnsignedMedium(int), ConcurrentHashMapV8$ValuesView:iterator(), GlobalEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long), DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), MessageLite$Builder:mergeFrom(byte[]-int-int-ExtensionRegistryLite), DiskFileUpload:getName(), AbstractTrafficShapingHandler:toString(), InternalAttribute:hashCode(), LoggingHandler:formatMessage(String-Object), OioServerSocketChannel:doReadMessages(List), ByteBuf:retain(int), HttpContentDecoder:decode(ChannelHandlerContext-HttpObject-List), NetUtil:<clinit>(), AbstractBootstrap:clone(), PlatformDependent:newConcurrentHashMap(int-float-int), WebSocketClientProtocolHandler:decode(ChannelHandlerContext-Object-List), SslHandler$2:run(), SctpMessageToMessageDecoder:acceptInboundMessage(Object), EmptyByteBuf:getFloat(int), RecyclableArrayList:clear(), AbstractChannel:connect(SocketAddress), ServerCookieEncoder:encode(Iterable), SpdyHeaderBlockZlibEncoder:encode(ByteBuf), Attribute:setContent(ByteBuf), GlobalEventExecutor:addTask(Runnable), DefaultChannelGroup:add(Object), AbstractNioMessageChannel:newUnsafe(), ForkJoinTask:doInvoke(), Channel$Unsafe:bind(SocketAddress-ChannelPromise), JavassistTypeParameterMatcherGenerator:appendClassPath(String), DefaultSpdySettingsFrame:getSettings(), PooledDirectByteBuf:_setShort(int-int), SystemPropertyUtil:get(String), ThreadLocalMarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), LocalChannel:doBind(SocketAddress), AbstractEventExecutorGroup:invokeAny(Collection-long-TimeUnit), AbstractByteBuf:ensureWritable(int), ByteBuf:readSlice(int), IdleStateHandler:access$400(IdleStateHandler), TypeParameterMatcher:fail(Class-String), SpdySession$StreamState:setReceiveWindowSizeLowerBound(int), EncoderException:<init>(String-Throwable), HttpHeaders:setDateHeader(HttpMessage-String-Iterable), Log4JLoggerFactory:<init>(), NioSocketChannel$1:<init>(), NioUdtByteConnectorChannel:remoteAddress0(), DefaultChannelPipeline:addAfter0(String-DefaultChannelHandlerContext-DefaultChannelHandlerContext), SocksAuthStatus:<init>(String-int-byte), CloseWebSocketFrame:reasonText(), UnpooledDirectByteBuf:writerIndex(), AbstractMemoryHttpData:getString(), SslHandler$5:<init>(SslHandler-ChannelHandlerContext-ChannelPromise), HttpContentDecoder:channelInactive(ChannelHandlerContext), EmptyByteBuf:readUnsignedMedium(), SpdyProtocolException:setStackTrace(StackTraceElement[]), DefaultHttpResponse:toString(), EmptyByteBuf:writeLong(long), DefaultChannelHandlerContext$1:<init>(DefaultChannelHandlerContext), ByteBufProcessor$10:<init>(), Channel$Unsafe:beginRead(), OioByteStreamChannel:activate(InputStream-OutputStream), SingleThreadEventExecutor:parent(), MemoryFileUpload:toString(), ByteBuf:slice(), OioServerSocketChannel:<init>(ServerSocket), DefaultHttpHeaders$HeaderEntry:getKey(), HttpHeaders$1:set(String-Iterable), LocalServerChannel:pipeline(), Bootstrap$1:operationComplete(Future), DefaultSpdyRstStreamFrame:toString(), UnpooledDirectByteBuf:_setShort(int-int), OioSctpServerChannel:bindAddress(InetAddress), HttpMessage:getDecoderResult(), MarshallingDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), SpdyHeaders:<clinit>(), DefaultChannelHandlerContext:invokeDeregister(ChannelPromise), SocksCmdStatus:<clinit>(), NioSctpServerChannel:newPromise(), DiskFileUpload:isCompleted(), DefaultHttpHeaders:validateHeaderName(String), SwappedByteBuf:setBytes(int-byte[]), AbstractChannel:access$302(AbstractChannel-boolean), JZlibEncoder:close(), PlatformDependent:hasJavassist(), ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), OioByteStreamChannel:localAddress(), SelectedSelectionKeySet:add(SelectionKey), LoggingHandler:channelRead(ChannelHandlerContext-Object), ReplayingDecoderBuffer:getMedium(int), VoidChannelPromise:await(), DiskFileUpload:setContentType(String), DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator), OioSctpServerChannel:localAddress(), InternalLoggerFactory:newInstance(String), ConcurrentHashMapV8:searchEntries(long-ConcurrentHashMapV8$Fun), WebSocketServerHandshaker00:newWebsocketDecoder(), SocksCmdResponse:<init>(SocksCmdStatus-SocksAddressType), MarshallingDecoder:<init>(UnmarshallerProvider-int), MessageToMessageDecoder:decode(ChannelHandlerContext-Object-List), MessageToMessageDecoder:acceptInboundMessage(Object), ReplayingDecoderBuffer:getBytes(int-OutputStream-int), ForkJoinTask:adapt(Runnable), ForkJoinTask$AdaptedRunnableAction:exec(), AbstractChannel:writeAndFlush(Object-ChannelPromise), ConcurrentHashMapV8$CollectionView:contains(Object), NioEventLoop:processSelectedKeysPlain(Set), DefaultUdtChannelConfig:setSendBufferSize(int), SwappedByteBuf:getBytes(int-byte[]-int-int), Inflater:inflateSetDictionary(byte[]-int), PooledUnsafeDirectByteBuf:maxCapacity(), CookieDecoder:<init>(), ObjectDecoderInputStream:readFully(byte[]), HttpContentEncoder:encodeContent(HttpContent-List), Log4JLogger:info(String-Throwable), SocksProtocolVersion:valueOf(String), UTF8Output:<init>(ByteBuf), UnreleasableByteBuf:getFloat(int), WebSocket08FrameEncoder:<clinit>(), ReplayingDecoderBuffer:getBoolean(int), CombinedChannelDuplexHandler:validate(ChannelInboundHandler-ChannelOutboundHandler), LongAdder:decrement(), CommonsLogger:trace(String-Object[]), DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise), SpdyHttpHeaders:getScheme(HttpMessage), ChannelMatchers:is(Channel), MultithreadEventExecutorGroup:awaitTermination(long-TimeUnit), MixedFileUpload:compareTo(Object), AbstractNioChannel:isActive(), DefaultServerSocketChannelConfig:getOptions(Map-ChannelOption[]), CompactObjectInputStream:read(), DefaultFutureListeners:progressiveSize(), SocksAddressType:values(), WebSocket08FrameDecoder:checkUTF8String(ChannelHandlerContext-ByteBuf), ReadOnlyByteBuf:discardReadBytes(), SslHandler:flushNonAppData0(ChannelHandlerContext-boolean), HashedWheelTimer:scheduleTimeout(HashedWheelTimer$HashedWheelTimeout-long), ForkJoinPool:invokeAll(Collection), DefaultChannelHandlerContext$4:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), Log4JLogger:isWarnEnabled(), AbstractOioMessageChannel:localAddress(), UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int), ForkJoinWorkerThread:<init>(ForkJoinPool), DefaultHttpResponse:getStatus(), DefaultLastHttpContent:content(), ConcurrentHashMapV8:merge(Object-Object-ConcurrentHashMapV8$BiFun), ByteBufOutputStream:writeBoolean(boolean), ConcurrentHashMapV8$ForEachMappingTask:propagateCompletion(), SpdySettingsFrame:getIds(), ReplayingDecoderBuffer:writeBytes(ByteBuffer), UnreleasableByteBuf:readMedium(), RxtxChannelConfig$Paritybit:valueOf(int), DefaultChannelPipeline:connect(SocketAddress-SocketAddress), AbstractNioChannel:doRegister(), ReplayingDecoderBuffer:toString(Charset), ByteBuf:getChar(int), SpdyHeaderBlockDecoder:<init>(), Unpooled:copyShort(short[]), HttpHeaders:getIntHeader(HttpMessage-String), LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline), SwappedByteBuf:writeChar(int), JdkLogger:debug(String-Object[]), UdtMessage:retain(), DefaultChannelPipeline:deregister(), JdkZlibEncoder$1:operationComplete(ChannelFuture), ConnectTimeoutException:<init>(String), ConcurrentHashMapV8$MapReduceValuesTask:advance(), SslHandler:unwrap(SSLEngine-ByteBuffer-ByteBuf), ConcurrentHashMapV8$MapReduceMappingsToLongTask:fork(), MultithreadEventExecutorGroup:access$100(MultithreadEventExecutorGroup), SpdyHttpHeaders:getAssociatedToStreamId(HttpMessage), UnpooledDirectByteBuf:checkIndex(int), SctpServerChannel:getAllLocalAddresses(), AbstractEventExecutorGroup:invokeAny(Collection), UnpooledDirectByteBuf:deallocate(), AbstractOioByteChannel:<clinit>(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), AbstractByteBuf:writeLong(long), ChannelDuplexHandler:exceptionCaught(ChannelHandlerContext-Throwable), DefaultOioSocketChannelConfig:validate(ChannelOption-Object), SslHandler$1:run(), ByteToMessageCodec:decodeLast(ChannelHandlerContext-ByteBuf-List), CompressionException:<init>(), DefaultPromise:isDone0(Object), DefaultUdtChannelConfig:getOption(ChannelOption), ByteBufOutputStream:writtenBytes(), DefaultFileRegion:<clinit>(), Recycler$1:initialValue(), AbstractByteBuf:writeMedium(int), SingleThreadEventExecutor:cleanup(), ChannelOutboundHandler:close(ChannelHandlerContext-ChannelPromise), Unmarshaller:finish(), Slf4JLogger:warn(String-Object), AbstractServerChannel:doDisconnect(), SocketChannelUDT:finishConnect(), HttpPostBodyUtil$TransferEncodingMechanism:<clinit>(), Snappy:decodeCopyWith4ByteOffset(byte-ByteBuf-ByteBuf-int), OioByteStreamChannel$2:<init>(), MessageToMessageCodec:acceptInboundMessage(Object), CompactObjectOutputStream:write(int), SctpInboundByteStreamHandler:decode(ChannelHandlerContext-Object-List), ReplayingDecoderBuffer:setDouble(int-double), ResourceLeakException:<init>(String), ConcurrentHashMapV8$ValueIterator:advance(), HttpHeaders:addIntHeader(HttpMessage-String-int), ProtocolFamilyConverter:<init>(), ChunkedWriteHandler$PendingWrite:<init>(Object-ChannelPromise), NioUdtMessageConnectorChannel:doBind(SocketAddress), HttpContent:retain(int), SocksResponseType:values(), DefaultChannelGroupFuture:access$008(DefaultChannelGroupFuture), CompositeByteBuf:setBytes(int-ScatteringByteChannel-int), RxtxChannelConfig$Paritybit:value(), EmbeddedChannel:doClose(), Unsafe:getObject(Object-long), MixedFileUpload:release(), ForkJoinTask:complete(Object), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise), OioSctpChannel:doWrite(Object[]-int-int), MemoryFileUpload:setFilename(String), ByteToMessageCodec:decode(ChannelHandlerContext-ByteBuf-List), WebSocketClientHandshaker00:uri(), JdkZlibEncoder$1:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), MixedAttribute:toString(), EmptyByteBuf:copy(int-int), SocksSubnegotiationVersion:byteValue(), LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), JZlibEncoder:ctx(), ReadOnlyByteBufferBuf:checkIndex(int), DefaultChannelHandlerContext:invokeConnect0(SocketAddress-SocketAddress-ChannelPromise), SnappyFramedEncoder:writeChunkLength(ByteBuf-int), WebSocket08FrameDecoder:unmask(ByteBuf), OioServerSocketChannel:doBind(SocketAddress), DefaultChannelPipeline:fireChannelReadComplete(), ChunkedWriteHandler:access$100(), ConcurrentHashMapV8$ForEachTransformedEntryTask:invoke(), EmptyByteBuf:writeBytes(byte[]-int-int), Base64:alphabet(Base64Dialect), SocksInitResponseDecoder:checkpoint(Object), OioSocketChannel:<init>(Channel-Socket), DefaultSpdyStreamFrame:<init>(int), CookieEncoderUtil:addQuoted(StringBuilder-String-String), DefaultChannelGroup:compareTo(Object), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:advance(), PooledHeapByteBuf:internalNioBuffer(int-int), CompactObjectInputStream:readUTF(), ScheduledFutureTask:getDelay(TimeUnit), DefaultAttributeMap$DefaultAttribute:getAndRemove(), Deflater:deflateSetDictionary(byte[]-int), ByteBuf:readBytes(GatheringByteChannel-int), DefaultChannelGroupFuture:access$000(DefaultChannelGroupFuture), HttpContentEncoder$1:<clinit>(), SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), AbstractChannel$AbstractUnsafe:disconnect(ChannelPromise), SocksAuthResponseDecoder$State:valueOf(String), ConcurrentHashMapV8$SearchKeysTask:invoke(), MultithreadEventLoopGroup:<clinit>(), UdtMessage:content(), HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(Throwable), ReplayingDecoderBuffer:compareTo(ByteBuf), UnreleasableByteBuf:setBytes(int-ByteBuf), LongAdder:add(long), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<init>(String-int), UnreleasableByteBuf:readerIndex(), Logger:getName(), EmbeddedChannel:close(), IdleStateHandler:handlerRemoved(ChannelHandlerContext), ConcurrentHashMapV8$1:run(), DefaultProgressivePromise:addListeners(GenericFutureListener[]), ChunkedNioFile:<init>(File), GlobalEventExecutor$TaskRunner:<init>(GlobalEventExecutor), MultithreadEventLoopGroup:<init>(int-ThreadFactory-Object[]), HttpPostRequestDecoder:removeHttpDataFromClean(InterfaceHttpData), DefaultChannelHandlerContext:freeInbound0(), HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent), ConcurrentHashMapV8$MapReduceEntriesToLongTask:advance(), LimitingByteInput:<clinit>(), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String), SingleThreadEventLoop:register(Channel), ZlibCodecFactory:<init>(), SpdyFrameDecoder:<init>(int-int-SpdyHeaderBlockDecoder), ByteBufUtil:swapShort(short), PingWebSocketFrame:retain(int), SocksAuthRequestDecoder:checkpoint(Object), ConcurrentHashMapV8$MapReduceKeysToLongTask:invoke(), SpdyOrHttpChooser:initPipeline(ChannelHandlerContext), RtspRequestDecoder:createInvalidMessage(), AbstractByteBuf:hashCode(), ReadOnlyByteBufferBuf:_getByte(int), NioUdtMessageConnectorChannel:doDisconnect(), HttpObjectDecoder$State:values(), EmptyByteBuf:readBytes(ByteBuf-int-int), SingleThreadEventExecutor:runAllTasks(long), ConcurrentHashMapV8$MapReduceValuesToIntTask:advance(), AbstractOioByteChannel:doRead(), Cookie:getPorts(), AdaptiveRecvByteBufAllocator$HandleImpl:<init>(int-int-int), SpdySettingsFrame:isPersisted(int), RxtxChannel:eventLoop(), SingleThreadEventLoop:pollTask(), OioSctpChannel:<clinit>(), UnreleasableByteBuf:readShort(), CompositeByteBuf:toNioBuffer(ByteBuf-int-int), WebSocketClientProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List), AbstractNioChannel:config(), WeakReferenceMap:<init>(Map), ConcurrentHashMapV8$Node:equals(Object), SpdyOrHttpChooser:createHttpRequestHandlerForSpdy(), SpdyProtocolException:<init>(), NioServerSocketChannel:doConnect(SocketAddress-SocketAddress), AbstractReferenceCountedByteBuf:release(int), JZlibDecoder:<init>(ZlibWrapper), SpdyHttpHeaders:removeUrl(HttpMessage), SslHandshakeCompletionEvent:<clinit>(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:invoke(), UnreleasableByteBuf:readDouble(), DefaultChannelPipeline:waitForFuture(Future), Unpooled:copiedBuffer(ByteBuffer), AbstractBootstrap:handler(ChannelHandler), IdleStateEvent:<init>(IdleState-boolean), DefaultChannelConfig:getRecvByteBufAllocator(), UnpooledHeapByteBuf:writerIndex(), ForkJoinTask:invoke(), PooledDirectByteBuf:_getByte(int), HttpPostRequestDecoder$MultiPartStatus:values(), SpdyHeaderBlockEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), ReplayingDecoderBuffer:reject(), ConcurrentHashMapV8$KeySpliterator:advance(), ForkJoinTask:completeExceptionally(Throwable), DefaultFullHttpRequest:setProtocolVersion(HttpVersion), CompositeByteBuf:copy(int-int), IdleStateHandler:access$002(IdleStateHandler-boolean), OioSocketChannel:<init>(Socket), Cookie:getComment(), FullHttpMessage:headers(), HttpContentEncoder$Result:<init>(String-EmbeddedChannel), InternalLogger:debug(String-Object-Object), ConcurrentHashMapV8$ReduceEntriesTask:invoke(), UnpooledHeapByteBuf:alloc(), ReplayingDecoderBuffer:writeBytes(ByteBuf), EmptyByteBuf:getBytes(int-byte[]-int-int), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode), DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf[]), HttpContentEncoder$State:ordinal(), OioSocketChannel:localAddress(), DefaultHttpMessage:toString(), Marshaller:start(ByteOutput), SucceededFuture:<init>(EventExecutor-Object), AbstractByteBuf:copy(), WebSocket08FrameDecoder$State[]:clone(), ChunkedWriteHandler$3:operationComplete(Future), ThreadLocalRandom:<init>(), CountedCompleter:recordExceptionalCompletion(Throwable), HttpObjectDecoder:reset(), AbstractEventExecutor:shutdown(), HttpHeaders$1:names(), CompositeByteBuf:_setLong(int-long), SctpNotificationHandler:<init>(SctpChannel), CompatibleMarshallingDecoder:exceptionCaught(ChannelHandlerContext-Throwable), ByteBufInputStream:<init>(ByteBuf-int), ForkJoinWorkerThread:setUncaughtExceptionHandler(Thread$UncaughtExceptionHandler), ForkJoinTask:setExceptionalCompletion(Throwable), UnpooledHeapByteBuf:nioBuffer(int-int), HttpContentEncoder:decode(ChannelHandlerContext-HttpRequest-List), DefaultFullHttpResponse:headers(), SocksAuthResponseDecoder$State:<clinit>(), WebSocket07FrameEncoder:<init>(boolean), HttpPostBodyUtil$TransferEncodingMechanism:name(), DefaultSpdyStreamFrame:setLast(boolean), PoolArena$HeapArena:newChunk(int-int-int-int), ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask), HttpHeaders:removeHeader(HttpMessage-String), ConcurrentHashMapV8$CollectionView:containsAll(Collection), ReadOnlyIterator:remove(), ByteBufUtil:firstIndexOf(ByteBuf-int-int-byte), LocalChannel:doWrite(Object[]-int-int), CompositeByteBuf:capacity(int), ByteBufInputStream:readBoolean(), DefaultThreadFactory:<clinit>(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), SpdyHeadersFrame:isInvalid(), ConcurrentHashMapV8:equals(Object), NioUdtByteConnectorChannel$1:<clinit>(), LongAdder:intValue(), ReplayingDecoderBuffer:forEachByteDesc(ByteBufProcessor), EmptyByteBuf:getShort(int), Logger:warn(String-Object-Object), DefaultSpdySynStreamFrame:setStreamId(int), DefaultChannelPipeline:remove(ChannelHandler), ByteBuf:readChar(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), AbstractChannel:isCompatible(EventLoop), DefaultRxtxChannelConfig:validate(ChannelOption-Object), ConcurrentHashMapV8$KeyIterator:advance(), CompositeByteBuf:iterator(), ConcurrentHashMapV8$MapReduceEntriesTask:invoke(), ForkJoinTask:expungeStaleExceptions(), ReplayingDecoderBuffer:setBytes(int-ByteBuf), EventLoop:shutdownGracefully(long-long-TimeUnit), CompositeByteBuf:checkSrcIndex(int-int-int-int), UnreleasableByteBuf:getUnsignedShort(int), MessageInfo:payloadProtocolID(), DuplicatedByteBuf:_setByte(int-int), HttpHeaders:getHeader(HttpMessage-String), ConcurrentHashMapV8$ValueSpliterator:trySplit(), ObjectDecoderInputStream:close(), NioUdtByteRendezvousChannel:<init>(), ChannelPipeline:fireChannelReadComplete(), DefaultSpdyHeaders:remove(String), PoolArena:memoryCopy(Object-int-Object-int-int), PooledHeapByteBuf:_getByte(int), NioSctpChannel:bindAddress(InetAddress-ChannelPromise), ByteToMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List), IllegalReferenceCountException:<init>(String), PromiseTask:toCallable(Runnable-Object), SctpServerChannel:configureBlocking(boolean), SocksAuthRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List), HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit), AbstractNotificationHandler:<init>(), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), DefaultDatagramChannelConfig:isLoopbackModeDisabled(), Snappy:bitsToEncode(int), NioSctpServerChannel:bindAddress(InetAddress), ReplayingDecoder:internalBuffer(), ServerBootstrap:group(EventLoopGroup-EventLoopGroup), NioDatagramChannelConfig:getTimeToLive(), UnpooledUnsafeDirectByteBuf:readerIndex(), AbstractByteBuf:duplicate(), ByteBuf:resetReaderIndex(), HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int), ChannelMatchers$CompositeMatcher:<init>(ChannelMatcher[]), Logger:info(String), DiskAttribute:compareTo(Object), DefaultSpdyDataFrame:<init>(int-ByteBuf), MixedFileUpload:getContentType(), DefaultCookie:setPorts(int[]), ByteBufInputStream:read(), ReplayingDecoderBuffer:getChar(int), ReferenceMap:putAll(Map), DecoderException:<init>(Throwable), EmptyByteBuf:getBytes(int-OutputStream-int), AbstractByteBuf:isWritable(), UnreleasableByteBuf:readBytes(byte[]-int-int), MemoryAttribute:setContent(ByteBuf), HttpObjectDecoder:findNonWhitespace(String-int), DefaultCookie:<init>(String-String), LongAdder:sum(), SctpMessage:<init>(int-int-ByteBuf), HttpContent:retain(), FileRegion:transfered(), SpdySettingsFrame:removeValue(int), DefaultChannelPipeline$4:run(), DuplicatedByteBuf:_setInt(int-int), DefaultPromise:access$200(Future-GenericFutureListener), DefaultUdtChannelConfig:setAutoRead(boolean), SpdySynStreamFrame:isInvalid(), DefaultHttpHeaders:add(String-Object), WebSocketClientHandshaker07:newWebSocketEncoder(), AbstractInternalLogger:isTraceEnabled(), HttpPostRequestEncoder$WrappedHttpRequest:setDecoderResult(DecoderResult), ConcurrentHashMapV8$SearchMappingsTask:addToPendingCount(int), ForkJoinPool:managedBlock(ForkJoinPool$ManagedBlocker), Unsafe:compareAndSwapInt(Object-long-int-int), NioEventLoop:processSelectedKey(SelectionKey-NioTask), HttpHeaders$Values:<init>(), DefaultChannelHandlerContext:inExceptionCaught(Throwable), ReplayingDecoderBuffer:release(), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), PooledDirectByteBuf:_setLong(int-long), ServerBootstrap:childOption(ChannelOption-Object), TrafficCounter:access$002(TrafficCounter-ScheduledFuture), ReadOnlyByteBufferBuf:capacity(int), TextWebSocketFrame:content(), ReplayingDecoderBuffer:duplicate(), SpdySynStreamFrame:headers(), AbstractChannel:bind(SocketAddress-ChannelPromise), UnpooledHeapByteBuf:setBytes(int-byte[]-int-int), DefaultSpdyHeadersFrame:isLast(), LocalChannel:access$400(LocalChannel), AbstractByteBufAllocator:heapBuffer(int), AbstractInternalLogger:isInfoEnabled(), ForkJoinPool:nextTaskFor(ForkJoinPool$WorkQueue), ObjectDecoderInputStream:available(), GenericProgressiveFutureListener:operationProgressed(ProgressiveFuture-long-long), DefaultChannelHandlerContext$14:<init>(DefaultChannelHandlerContext-ChannelPromise), HttpRequestDecoder:<init>(), WebSocketClientHandshaker:handshake(Channel), DefaultSocketChannelConfig:setSoLinger(int), UnreleasableByteBuf:readableBytes(), DefaultSctpServerChannelConfig:getReceiveBufferSize(), NioUdtMessageConnectorChannel:remoteAddress(), InternetProtocolFamily:<init>(String-int), CountedCompleter:<clinit>(), CachingClassResolver:<init>(ClassResolver-Map), DefaultChannelHandlerContext:invokeBind0(SocketAddress-ChannelPromise), HttpPostRequestDecoder:parseBodyAttributes(), DefaultChannelPromise:<init>(Channel-EventExecutor), UnreleasableByteBuf:capacity(), CommonsLogger:info(String), DefaultChannelHandlerContext:invokeDisconnect0(ChannelPromise), DefaultChannelPromise:setSuccess(Void), SpdySessionStatus:getStatusPhrase(), ForkJoinTask:clearExceptionalCompletion(), PooledDirectByteBuf:_setByte(int-int), VoidChannelPromise:fail(), CommPortIdentifier:open(String-int), MessageFormatter:intArrayAppend(StringBuffer-int[]), ReadOnlyByteBufferBuf:checkDstIndex(int-int-int-int), WebSocketFrame:retain(), NioUdtAcceptorChannel:doClose(), AbstractByteBuf:_getShort(int), ConcurrentHashMapV8$MapReduceEntriesToIntTask:advance(), ConcurrentHashMapV8$ObjectByObjectToInt:apply(Object-Object), UnreleasableByteBuf:writeByte(int), DefaultEventExecutor:updateLastExecutionTime(), ForkJoinTask:exec(), DefaultRxtxChannelConfig:setWaitTimeMillis(int), AbstractByteBuf:_setByte(int-int), ByteBufUtil:swapMedium(int), SctpServerChannel:close(), ReplayingDecoderBuffer:writeBytes(ByteBuf-int), AbstractByteBufAllocator:compositeDirectBuffer(), UnreleasableByteBuf:setByte(int-int), Unpooled:copyDouble(double[]), EncoderException:<init>(String), ZlibUtil:inflaterException(Inflater-String-int), ServerBootstrap:<init>(), NioSctpChannel:isActive(), SSLEngineResult$HandshakeStatus:ordinal(), ChannelHandlerAdapter:isSharable(), NioDatagramChannel:localAddress0(), PoolArena$DirectArena:<init>(PooledByteBufAllocator-int-int-int-int), CtClass:getDeclaredMethod(String), HttpContent:getDecoderResult(), Base64:encode(ByteBuf-int-int-Base64Dialect), GlobalEventExecutor:execute(Runnable), DefaultHttpContent:release(int), PooledDirectByteBuf:alloc(), Unpooled:wrappedBuffer(int-ByteBuffer[]), DefaultFullHttpRequest:getProtocolVersion(), CompleteChannelFuture:removeListeners(GenericFutureListener[]), DefaultFullHttpResponse:copy(), CommonsLogger:error(String-Object-Object), AbstractChannel:newProgressivePromise(), NioSocketChannel:<init>(SocketChannel), OioDatagramChannel:block(InetAddress-InetAddress), HttpContentEncoder$State:<init>(String-int), DefaultChannelHandlerContext:invokeClose(ChannelPromise), NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise), DefaultUdtServerChannelConfig:setSystemSendBufferSize(int), DiskFileUpload:setContentTransferEncoding(String), ForkJoinPool:awaitTermination(long-TimeUnit), SwappedByteBuf:getUnsignedShort(int), DefaultServerSocketChannelConfig:setReceiveBufferSize(int), ProtobufDecoder:<init>(MessageLite-ExtensionRegistry), ReplayingDecoderBuffer:setBytes(int-ByteBuf-int-int), CommonsLogger:debug(String-Object-Object), SnappyFramedDecoder$ChunkType[]:clone(), ByteBuf:hasArray(), ConcurrentHashMapV8$ForEachMappingTask:fork(), DefaultHttpContent:retain(), BinaryWebSocketFrame:isFinalFragment(), WebSocketClientHandshaker08:newWebsocketDecoder(), DefaultFullHttpRequest:setMethod(HttpMethod), ByteBufProcessor$1:<init>(), AbstractByteBuf:resetReaderIndex(), NioServerSocketChannel:javaChannel(), ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask), SwappedByteBuf:getDouble(int), UnsupportedMessageTypeException:<init>(String-Throwable), OioByteStreamChannel:remoteAddress(), HttpPostRequestDecoder:splitHeaderContentType(String), UnreleasableByteBuf:discardSomeReadBytes(), ChannelInboundHandler:channelRead(ChannelHandlerContext-Object), ObjectDecoderInputStream:readDouble(), HttpPostRequestEncoder:cleanFiles(), DiskAttribute:compareTo(InterfaceHttpData), AbstractInternalLogger:toString(), ByteBuf:readableBytes(), ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean), SlicedByteBuf:readerIndex(), ConcurrentHashMapV8$SearchEntriesTask:quietlyCompleteRoot(), InternalAttribute:compareTo(Object), ReplayingDecoderBuffer:readBytes(byte[]), SpdyFrameDecoder:willGenerateFrame(), ChannelHandlerAdapter:<init>(), ConcurrentHashMapV8$ForEachKeyTask:fork(), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String), UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int), OioSctpChannel:doConnect(SocketAddress-SocketAddress), ByteBuf:order(), OioByteStreamChannel:doWriteFileRegion(FileRegion), SocksRequestType:valueOf(String), CommonsLogger:warn(String-Object), NioServerSocketChannel:doFinishConnect(), MixedAttribute:getName(), CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf), ForkJoinTask$AdaptedCallable:run(), HttpContent:setDecoderResult(DecoderResult), AbstractByteBuf:forEachByteDesc(int-int-ByteBufProcessor), ByteToMessageDecoder:isSingleDecode(), PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int), SwappedByteBuf:setLong(int-long), NioDatagramChannelConfig:isLoopbackModeDisabled(), DefaultProgressivePromise:tryProgress(long-long), AbstractByteBufAllocator:compositeBuffer(int), ReplayingDecoderBuffer:readUnsignedInt(), DecoderResult:toString(), ConcurrentHashMapV8$BiFun:apply(Object-Object), AbstractOioChannel:doBeginRead(), ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int), PlatformDependent:getShort(long), MultithreadEventLoopGroup:newDefaultThreadFactory(), ForkJoinTask$RunnableExecuteAction:getRawResult(), MultithreadEventExecutorGroup:newChild(ThreadFactory-Object[]), DefaultChannelHandlerContext:fireChannelActive(), CombinedChannelDuplexHandler:userEventTriggered(ChannelHandlerContext-Object), Cookie:getDomain(), HashedWheelTimer$Worker:fetchExpiredTimeouts(List-Iterator-long), Bootstrap:handler(), ServerBootstrap$1:<init>(ServerBootstrap-EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), DefaultChannelGroup:deregister(ChannelMatcher), AbstractOioChannel$DefaultOioUnsafe:close(ChannelPromise), ConcurrentHashMapV8$MapEntry:toString(), PooledUnsafeDirectByteBuf:_getByte(int), NioEventLoopGroup:newChild(ThreadFactory-Object[]), InternalLogLevel:values(), ByteBufOutputStream:writeChar(int), EventLoop:register(Channel), OioSctpChannel:localAddress(), OioSocketChannel:isOutputShutdown(), Unsafe:putShort(long-short), RecyclableArrayList:<init>(Recycler$Handle-int), ByteArrayDecoder:decode(ChannelHandlerContext-Object-List), MessageLite:getDefaultInstanceForType(), SctpMessageCompletionHandler:decode(ChannelHandlerContext-Object-List), Snappy$State:<clinit>(), PlatformDependent:putInt(long-int), UTF8Output:write(int), DefaultRxtxChannelConfig:isDtr(), PooledHeapByteBuf:<init>(Recycler$Handle-int), VoidChannelPromise:setSuccess(Object), UnreleasableByteBuf:readBytes(OutputStream-int), ByteBuf:discardReadBytes(), RxtxChannel:doDisconnect(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), SslHandler$LazyChannelPromise:tryFailure(Throwable), NioSocketChannel:doWrite(Object[]-int-int), Unpooled:unmodifiableBuffer(ByteBuf), WebSocketServerHandshaker:<clinit>(), FileUpload:getChunk(int), DefaultHttpDataFactory:cleanRequestHttpDatas(HttpRequest), DiskAttribute:duplicate(), SpdyProtocolException:<init>(String-Throwable), DefaultChannelPipeline:addAfter(EventExecutorGroup-String-String-ChannelHandler), ReferenceMap:size(), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), ConcurrentHashMapV8$KeySetView:spliterator(), ByteBuf:writeShort(int), ByteBuf:readBytes(ByteBuffer), CompatibleMarshallingDecoder:<init>(UnmarshallerProvider-int), CompatibleObjectEncoder:<init>(), HttpPostBodyUtil:findNonWhitespace(String-int), CompositeByteBuf:isDirect(), CompositeByteBuf:capacity(), NioUdtByteConnectorChannel:localAddress0(), Channel:deregister(), WebSocket13FrameDecoder:<init>(boolean-boolean-int), ConcurrentHashMapV8:reduceEntriesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ReplayingDecoderBuffer:nioBuffer(), DefaultChannelPipeline:deregister(ChannelPromise), ConcurrentHashMapV8$SearchMappingsTask:propagateCompletion(), DefaultChannelGroupFuture:setFailure(Throwable), MessageInfo:isComplete(), InternetProtocolFamily:values(), ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), PlatformDependent0:getShort(long), ChannelHandlerContext:flush(), NioUdtMessageConnectorChannel:remoteAddress0(), AbstractInternalLogger:trace(String-Object), JdkLogger:<clinit>(), CompleteChannelFuture:await(), SelectedSelectionKeySet:iterator(), NioUdtMessageConnectorChannel:selectionKey(), ResourceLeakDetector$DefaultResourceLeak:access$002(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak), CompositeByteBuf:setShort(int-int), AbstractChannel:disconnect(), EventExecutor:submit(Callable), SpdyHeaders:removeMethod(int-SpdyHeadersFrame), PoolChunk:subpageIdx(int), PooledDirectByteBuf:array(), SwappedByteBuf:ensureWritable(int-boolean), MemoryFileUpload:isCompleted(), AbstractReferenceCounted:retain(), CodedOutputStream:computeRawVarint32Size(int), NioUdtMessageRendezvousChannel:<init>(), AbstractReferenceCountedByteBuf:resetReaderIndex(), CompositeByteBuf:setChar(int-int), ResourceLeakException:hashCode(), WebSocket08FrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf), CloseWebSocketFrame:<init>(boolean-int), ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), UnpooledDirectByteBuf:setBytes(int-InputStream-int), Cookie:setPorts(Iterable), int[]:clone(), PooledUnsafeDirectByteBuf$1:newObject(Recycler$Handle), ConcurrentHashMapV8$ForEachTransformedEntryTask:propagateCompletion(), Slf4JLogger:debug(String-Throwable), SwappedByteBuf:readMedium(), SpdyHeaders:getHeader(SpdyHeadersFrame-String-String), DefaultChannelPipeline:callHandlerAdded0(ChannelHandlerContext), AbstractNioByteChannel:doWrite(Object[]-int-int), RxtxChannel$RxtxUnsafe:<init>(RxtxChannel-RxtxChannel$1), SpdyHeaderBlockDecoder:end(), ChunkedWriteHandler:<init>(int), PlatformDependent0:getLong(long), PlatformDependent:putShort(long-short), NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT), AbstractByteBuf:setByte(int-int), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), DefaultChannelHandlerContext:invokeChannelWritabilityChanged(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:setBoolean(int-boolean), AbstractHttpData:<init>(String-Charset-long), ReplayingDecoderBuffer:getUnsignedMedium(int), Attribute:retain(), AbstractEventExecutor:schedule(Callable-long-TimeUnit), DefaultHttpDataFactory:createAttribute(HttpRequest-String), DefaultSpdyRstStreamFrame:getStreamId(), ConcurrentHashMapV8$ReduceKeysTask:fork(), PooledHeapByteBuf:_setMedium(int-int), DatagramPacket:recipient(), ChannelInitializer:<init>(), AbstractByteBuf:setBytes(int-ScatteringByteChannel-int), ConcurrentSet:remove(Object), Log4JLogger:isInfoEnabled(), DefaultChannelHandlerContext$19:run(), DefaultChannelConfig:getWriteSpinCount(), InternalLoggerFactory:setDefaultFactory(InternalLoggerFactory), AbstractByteBuf:readDouble(), HttpObjectDecoder:skipControlCharacters(ByteBuf), ReadOnlyByteBuf:getBytes(int-byte[]-int-int), DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator), AbstractChannel:isWritable(), CompositeByteBuf:readBytes(ByteBuf), ReferenceMap:containsKey(Object), ConcurrentHashMapV8$ReduceValuesTask:firstComplete(), SSLEngineResult:bytesProduced(), ImmediateEventExecutor$ImmediatePromise:<init>(EventExecutor), SSLEngine:unwrap(ByteBuffer-ByteBuffer), DefaultSpdySynStreamFrame:appendHeaders(StringBuilder), SingleThreadEventExecutor:next(), SocksInitRequestDecoder$State:valueOf(String), ConcurrentHashMapV8:entrySet(), ReplayingDecoderBuffer:writeZero(int), LocalChannelRegistry:<clinit>(), UnpooledDirectByteBuf:setByte(int-int), ServerBootstrap$ServerBootstrapAcceptor$1:<init>(ServerBootstrap$ServerBootstrapAcceptor-ChannelConfig), LineBasedFrameDecoder:<init>(int), ConcurrentHashMapV8$ForEachKeyTask:addToPendingCount(int), ConcurrentHashMapV8$ValuesView:forEach(ConcurrentHashMapV8$Action), DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int), MemoryAttribute:getValue(), ByteInput:read(byte[]-int-int), SocksCmdRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List), QueryStringDecoder:decodeComponent(String-Charset), AbstractByteBuf:setLong(int-long), ByteBuf:readUnsignedShort(), SctpMessage:copy(), AbstractInternalLogger:readResolve(), EmbeddedChannel:localAddress0(), DefaultChannelGroup:write(Object), SpdySession$StreamState:updateReceiveWindowSize(int), WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders), HttpContentDecompressor:<init>(), CloseWebSocketFrame:statusCode(), NioSctpServerChannel:localAddress(), TextWebSocketFrame:fromText(String), SlicedByteBuf:_setMedium(int-int), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), ChannelFlushPromiseNotifier:<init>(), AbstractNioChannel$AbstractNioUnsafe:finishConnect(), Base64Dialect:<init>(String-int-byte[]-byte[]-boolean), PlatformDependent:directBufferPreferred(), DiskFileUpload:getDiskFilename(), MemoryFileUpload:duplicate(), UnreleasableByteBuf:order(ByteOrder), ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter), CombinedChannelDuplexHandler:disconnect(ChannelHandlerContext-ChannelPromise), ServerSocketChannelUDT:configureBlocking(boolean), AbstractChannel$AbstractUnsafe:bind(SocketAddress-ChannelPromise), ContinuationWebSocketFrame:retain(), SpdySession$StreamState:updateSendWindowSize(int), SlicedByteBuf:getBytes(int-ByteBuf-int-int), DefaultSpdyHeaders:<init>(), NioSctpChannel$1:run(), ChunkedFile:readChunk(ChannelHandlerContext), SctpMessage:streamIdentifier(), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int), AbstractDiskHttpData:getByteBuf(), ForkJoinPool:getCommonPoolParallelism(), AbstractByteBuf:getBytes(int-byte[]), EmbeddedChannel:doWrite(Object[]-int-int), SslHandler:access$500(SslHandler), DefaultLastHttpContent:retain(), Slf4JLogger:info(String-Throwable), SwappedByteBuf:slice(int-int), PooledUnsafeDirectByteBuf:nioBuffers(int-int), HttpPostBodyUtil:findWhitespace(String-int), ContinuationWebSocketFrame:retain(int), ForkJoinPool$WorkQueue:nextLocalTask(), HttpHeaders$Names:<init>(), MessageToMessageCodec$2:acceptInboundMessage(Object), DefaultSctpChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), ConcurrentHashMapV8$ForEachTransformedKeyTask:propagateCompletion(), MarshallerFactory:createMarshaller(MarshallingConfiguration), ConcurrentHashMapV8$EntrySetView:hashCode(), SpdyFrameDecoder:readCommonHeader(ByteBuf), Base64Encoder:<init>(boolean-Base64Dialect), SpdyHttpDecoder:decode(ChannelHandlerContext-Object-List), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:compute(), DefaultChannelGroupFuture:<init>(ChannelGroup-Collection-EventExecutor), ByteBuf:setMedium(int-int), UnsupportedMessageTypeException:<init>(String), SSLEngine:closeOutbound(), ForkJoinPool$WorkQueue:<clinit>(), HttpPostRequestEncoder$EncoderMode:valueOf(String), DefaultChannelPipeline:access$100(DefaultChannelPipeline-ChannelHandlerContext), ReplayingDecoderBuffer:isReadable(int), LoggingHandler:<init>(), SpdySynReplyFrame:isInvalid(), PlatformDependent:isWindows(), LocalChannel:eventLoop(), CompositeByteBuf:<clinit>(), UnpooledHeapByteBuf:getShort(int), NioSctpServerChannel:doWriteMessages(Object[]-int-int-boolean), AbstractNioByteChannel:config(), Logger:info(String-Object), DefaultChannelGroupFuture:isPartialSuccess(), ForkJoinPool$WorkQueue:peek(), Log:error(Object), ReplayingDecoderBuffer:bytesBefore(byte), NioDatagramChannel:joinGroup(InetAddress-ChannelPromise), ThreadPerChannelEventLoopGroup:register(Channel), DefaultCookie:setCommentUrl(String), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:compute(), JZlibEncoder:isClosed(), RtspRequestEncoder:encodeAscii(String-ByteBuf), CloseWebSocketFrame:retain(int), PooledDirectByteBuf:newInternalNioBuffer(Object), DefaultByteBufHolder:content(), InternalLoggerFactory:<clinit>(), DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int), ConcurrentHashMapV8$ForEachTransformedEntryTask:addToPendingCount(int), HttpPostRequestDecoder:parseBodyAttributesStandard(), Bootstrap:toString(), OioByteStreamChannel:parent(), ByteBuf:setShort(int-int), Unpooled:copyShort(int), PooledHeapByteBuf:getBytes(int-ByteBuf-int-int), DiskAttribute:hashCode(), DefaultUdtChannelConfig:getOptions(), UnreleasableByteBuf:capacity(int), PooledHeapByteBuf:newInternalNioBuffer(byte[]), Striped64:retryUpdate(long-Striped64$HashCode-boolean), ConcurrentHashMapV8$MapEntry:hashCode(), SSLEngineResult:getStatus(), DefaultChannelProgressivePromise:syncUninterruptibly(), SslHandler:runDelegatedTasks(), DefaultPromise:syncUninterruptibly(), PromiseTask:trySuccessInternal(Object), DefaultHttpContent:refCnt(), SpdySession:receivedReply(int), ConcurrentHashMapV8$ForEachValueTask:advance(), SpdyOrHttpChooser:addHttpHandlers(ChannelHandlerContext), ConcurrentHashMapV8$SearchKeysTask:addToPendingCount(int), AbstractInternalLogger:warn(String-Object-Object), SslHandler$PendingWrite:fail(Throwable), Channel:voidPromise(), HttpPostRequestEncoder:addBodyFileUpload(String-File-String-boolean), ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Action), DefaultHttpDataFactory:<init>(long), WeakReferenceMap:fold(Object), AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel), ForkJoinPool$WorkQueue:internalPopAndExecCC(CountedCompleter), SwappedByteBuf:setInt(int-int), RecyclableArrayList:isEmpty(), DecoderResult:failure(Throwable), PoolSubpage:<init>(int), WebSocketClientHandshaker13:newWebSocketEncoder(), PooledByteBuf:<clinit>(), ReplayingDecoderBuffer:array(), ReplayingDecoderBuffer:setIndex(int-int), Base64:encode(ByteBuf-int-int), DuplicatedByteBuf:_getLong(int), ReplayingDecoderBuffer:discardSomeReadBytes(), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultHttpHeaders:add(String-Iterable), ConcurrentSet:iterator(), PoolChunk:allocateSubpageSimple(int-int-int), AbstractChannel:doRegister(), HttpObjectDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), Attribute:refCnt(), SpdyHeadersFrame:setLast(boolean), GlobalEventExecutor:<init>(), SctpChannel:pipeline(), ByteToMessageDecoder:internalBuffer(), PromiseTask:<init>(EventExecutor-Runnable-Object), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), Unpooled:<init>(), ByteToMessageCodec:encode(ChannelHandlerContext-Object-ByteBuf), NioEventLoop:hasTasks(), LastHttpContent$1:retain(), Unsafe:compareAndSwapObject(Object-long-Object-Object), ReplayingDecoderBuffer:indexOf(int-int-byte), MessageToMessageEncoder:<init>(), HttpContentDecoder:decode(ChannelHandlerContext-Object-List), LoggingHandler:<init>(Class), PlatformDependent:isWindows0(), UnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), ResourceLeakDetector:reportLeak(), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), LoggingHandler:<init>(LogLevel), DefaultChannelHandlerContext$18:run(), HttpObjectAggregator:<clinit>(), HttpContentCompressor:beginEncode(HttpResponse-String), ForkJoinTask:access$000(), Logger:isDebugEnabled(), ConcurrentHashMapV8$MapReduceEntriesTask:compute(), LocalChannel:remoteAddress(), UnreleasableByteBuf:setBytes(int-byte[]), SocksCmdStatus[]:clone(), UniqueName:compareTo(UniqueName), ConcurrentHashMapV8$KeySetView:getMap(), HttpResponseDecoder:isSingleDecode(), Unsafe:getInt(long), AbstractEventExecutor:newSucceededFuture(Object), ConcurrentHashMapV8$SearchValuesTask:fork(), AbstractBootstrap:bind(SocketAddress), SslHandler:engine(), ChannelOption:<init>(String), ByteBuf:getBytes(int-ByteBuf), SslHandler:<init>(SSLEngine), InternalLogger:debug(String-Throwable), LongAdder:<init>(), PromiseTask$RunnableAdapter:call(), PooledDirectByteBuf:newInstance(int), MessageFormatter:shortArrayAppend(StringBuffer-short[]), EventLoop:schedule(Runnable-long-TimeUnit), ReadOnlyByteBuf:_setShort(int-int), ContinuationWebSocketFrame:content(), CommonsLogger:isTraceEnabled(), Cookie:setVersion(int), FileUpload:setContent(InputStream), UnreleasableByteBuf:isWritable(), UnpooledDirectByteBuf:getUnsignedMedium(int), NioSocketChannel:localAddress(), LastHttpContent$1:copy(), Striped64:casBusy(), PlatformDependent0:objectFieldOffset(Field), HttpMethod:hashCode(), HttpPostRequestEncoder:encodeNextChunkMultipart(int), HttpClientCodec:<init>(), ConcurrentHashMapV8:reduceToInt(long-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), SpdyStreamStatus:compareTo(Object), DefaultCookie:getMaxAge(), ConcurrentHashMapV8$MapReduceValuesTask:compute(), AdaptiveRecvByteBufAllocator:access$100(), SingleThreadEventExecutor$2:<init>(SingleThreadEventExecutor), ChannelInboundHandlerAdapter:channelUnregistered(ChannelHandlerContext), DefaultChannelGroup:<clinit>(), NioSocketChannel:doClose(), AbstractChannel$AbstractUnsafe:close(ChannelPromise), Bootstrap:bind(), MixedAttribute:setValue(String), SwappedByteBuf:order(ByteOrder), LocalServerChannel:<init>(), DefaultRxtxChannelConfig:setRts(boolean), DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ReplayingDecoder:state(Object), SingleThreadEventExecutor$3:<init>(SingleThreadEventExecutor-Runnable), CombinedChannelDuplexHandler:exceptionCaught(ChannelHandlerContext-Throwable), CookieDecoder:extractKeyValuePairs(String-List-List), DefaultUdtServerChannelConfig:getBacklog(), HashedWheelTimer$Worker:fetchExpiredTimeouts(List-long), DefaultChannelHandlerContext:alloc(), CompatibleMarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf), HttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), ReplayingDecoderBuffer:writeBytes(byte[]-int-int), NioUdtByteConnectorChannel:localAddress(), DefaultHttpHeaders:get(String), ReplayingDecoderBuffer:setBytes(int-ByteBuf-int), GlobalTrafficShapingHandler:release(), ConcurrentHashMapV8:get(Object), ThreadPerChannelEventLoop:terminationFuture(), NioSocketChannel:<clinit>(), ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask), AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf), DefaultChannelPipeline:fireChannelUnregistered(), CombinedChannelDuplexHandler:channelReadComplete(ChannelHandlerContext), ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object), DuplicatedByteBuf:setInt(int-int), AbstractBootstrap$BootstrapChannelFactory:<init>(Class), LocalServerChannel:access$000(LocalServerChannel-LocalChannel), ZlibWrapper:<clinit>(), NioSctpServerChannel:localAddress0(), JdkLogger:error(String), HttpObjectDecoder:readFixedLengthContent(ByteBuf-List), SlicedByteBuf:_setInt(int-int), ContinuationWebSocketFrame:text(), ReadTimeoutHandler:initialize(ChannelHandlerContext), ObjectDecoderInputStream:readFloat(), ConcurrentHashMapV8$ForEachTransformedKeyTask:fork(), ByteBuf:readBytes(byte[]), AbstractByteBuf:toString(int-int-Charset), DefaultSpdyPingFrame:getId(), AbstractChannel:isRegistered(), TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long), AbstractEventExecutorGroup:shutdownGracefully(), UnpooledUnsafeDirectByteBuf:_setByte(int-int), DefaultHttpMessage:headers(), DefaultChannelGroupFuture:access$108(DefaultChannelGroupFuture), AbstractByteBuf:readUnsignedInt(), MixedFileUpload:toString(), ConcurrentHashMapV8:getUnsafe(), DefaultChannelHandlerContext$8:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext-Object), DefaultChannelHandlerContext:close(ChannelPromise), EmbeddedChannel:writeInbound(Object[]), JdkLogger:trace(String-Object-Object), AbstractReferenceCountedByteBuf:writeChar(int), MessageToByteEncoder:encode(ChannelHandlerContext-Object-ByteBuf), MixedAttribute:getFile(), AbstractEventExecutor:newTaskFor(Callable), LengthFieldPrepender:<init>(int-int), ConcurrentHashMapV8$ReduceEntriesTask:advance(), DefaultChannelHandlerContext:invokeRead(), CookieEncoderUtil:stripTrailingSeparator(StringBuilder), AbstractByteBuf:indexOf(int-int-byte), DuplicatedByteBuf:getLong(int), NioUdtMessageAcceptorChannel:doReadMessages(List), AbstractDiskHttpData:retain(int), JdkLogger:error(String-Object), ChannelFutureListener$1:operationComplete(ChannelFuture), Striped64$HashCode:<init>(), RtspHeaders$Names:<init>(), FileUpload:setContent(ByteBuf), AbstractNioChannel:access$300(AbstractNioChannel), SerialPort:getInputStream(), ReplayingDecoderBuffer:setBoolean(int-boolean), ReadOnlyByteBuf:_setByte(int-int), CloseWebSocketFrame:retain(), HttpHeaders:<init>(), DefaultChannelPipeline:getContextOrDie(Class), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), DefaultUdtChannelConfig:setSoLinger(int), DuplicatedByteBuf:hasMemoryAddress(), ChannelPromiseAggregator:<init>(ChannelPromise), ReplayingDecoderBuffer:ensureWritable(int-boolean), ForkJoinWorkerThread:onTermination(Throwable), NioUdtByteConnectorChannel:<init>(), HttpPostRequestDecoder:readFileUploadByteMultipartStandard(String), ChunkedStream:<init>(InputStream-int), UnreleasableByteBuf:readBytes(ByteBuf-int), ConcurrentHashMapV8$MapReduceKeysToIntTask:addToPendingCount(int), HttpVersion:equals(Object), OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise), HttpObjectDecoder:state(), DefaultSpdyDataFrame:toString(), ReplayingDecoderBuffer:setInt(int-int), SwappedByteBuf:bytesBefore(byte), ByteBuf:<init>(), DefaultChannelHandlerContext$12:<init>(DefaultChannelHandlerContext-SocketAddress-ChannelPromise), ConcurrentHashMapV8$ReduceEntriesTask:fork(), DefaultOioServerSocketChannelConfig:getOptions(Map-ChannelOption[]), RtspResponseDecoder:createInvalidMessage(), PooledHeapByteBuf:nioBuffers(int-int), NioUdtProvider$1:<clinit>(), DefaultChannelHandlerContext:newFailedFuture(Throwable), ConcurrentHashMapV8$MapReduceMappingsTask:advance(), DefaultOioSocketChannelConfig:setSoTimeout(int), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long), AbstractEventExecutor:submit(Runnable-Object), HttpPostRequestEncoder:readChunk(ChannelHandlerContext), ChannelFlushPromiseNotifier:notifyFlushFutures(Throwable-Throwable), HttpClientCodec:access$102(HttpClientCodec-boolean), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest), NioUdtMessageConnectorChannel:doClose(), CompositeByteBuf:memoryAddress(), MemoryAttribute:<init>(String-String), CombinedChannelDuplexHandler:init(ChannelInboundHandler-ChannelOutboundHandler), CompactObjectInputStream:readByte(), CompositeByteBuf:component(int), ReplayingDecoderBuffer:markReaderIndex(), Slf4JLogger:isInfoEnabled(), NioDatagramChannel:joinGroup(InetAddress), AbstractChannel:checkEOF(FileRegion), HttpObjectDecoder$State:<init>(String-int), SslHandler$CloseNotifyListener:<init>(), AbstractNioByteChannel:newUnsafe(), PooledDirectByteBuf$1:newObject(Recycler$Handle), DefaultChannelHandlerContext:access$400(DefaultChannelHandlerContext), AbstractByteBuf:setIndex(int-int), NioSctpChannel:localAddress0(), PooledByteBufAllocator:toString(), Logger:isTraceEnabled(), SpdySessionHandler:<init>(int-boolean), OioDatagramChannel:newFailedFuture(Throwable), Slf4JLogger:info(String-Object-Object), SocketUDT:setOption(OptionUDT-Object), LocalChannel$LocalUnsafe:voidPromise(), ReplayingDecoderBuffer:resetReaderIndex(), NioServerSocketChannel:doClose(), HttpObjectEncoder:encodeHeaders(ByteBuf-HttpHeaders), ConcurrentHashMapV8:computeIfAbsent(Object-ConcurrentHashMapV8$Fun), SwappedByteBuf:readBytes(ByteBuf-int-int), ChannelOutboundBuffer:addFlush(), FileRegion:count(), Channel:pipeline(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener), AbstractChannel:connect(SocketAddress-SocketAddress), Channel$Unsafe:voidPromise(), DefaultChannelHandlerContext:invokeWrite0(Object-ChannelPromise), DefaultSocketChannelConfig:setReuseAddress(boolean), DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), SingleThreadEventExecutor:isShutdown(), AbstractMemoryHttpData:setContent(ByteBuf), SslHandler$6:operationComplete(Future), DiskFileUpload:compareTo(InterfaceHttpData), Log4JLogger:trace(String), ScheduledFutureTask:toCallable(Runnable-Object), ConcurrentHashMapV8$MapReduceEntriesTask:firstComplete(), DefaultChannelHandlerContext:flush(), WebSocketClientProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable), ChannelDuplexHandler:flush(ChannelHandlerContext), DefaultChannelGroupFuture$1:<init>(DefaultChannelGroupFuture), DefaultSocketChannelConfig:isTcpNoDelay(), DefaultPromise:addListeners(GenericFutureListener[]), RtspResponseStatuses:valueOf(int), SwappedByteBuf:readShort(), ForkJoinPool$Submitter:<init>(int), AbstractChannel:access$002(AbstractChannel-EventLoop), DefaultRxtxChannelConfig:setWriteBufferLowWaterMark(int), DefaultSpdyWindowUpdateFrame:setDeltaWindowSize(int), SpdySession:getActiveStreams(), SingleThreadEventExecutor:pollTask(), DefaultChannelHandlerContext:invokeClose0(ChannelPromise), SwappedByteBuf:slice(), AbstractNioChannel$NioUnsafe:read(), SpdyHeaderBlockZlibDecoder:<init>(int-int), DefaultAttributeMap$DefaultAttribute:setIfAbsent(Object), Slf4JLogger:isWarnEnabled(), MultithreadEventLoopGroup:register(Channel-ChannelPromise), ConcurrentHashMapV8$MapEntry:setValue(Object), WebSocket08FrameDecoder:toFrameLength(long), DefaultSctpChannelConfig:validate(ChannelOption-Object), AbstractMemoryHttpData:retain(int), ConcurrentHashMapV8$MapReduceKeysTask:compute(), DefaultChannelHandlerContext$2:run(), SocksCmdRequestDecoder$State:ordinal(), AbstractNioByteChannel:parent(), Inflater:<init>(), PooledDirectByteBuf$1:<init>(), LastHttpContent$1:retain(int), DefaultSpdyHeadersFrame:setInvalid(), QueryStringEncoder:toUri(), DefaultPromise:awaitUninterruptibly(long-TimeUnit), DefaultRxtxChannelConfig:getWaitTimeMillis(), UnpooledHeapByteBuf:nioBuffers(int-int), ClientCookieEncoder:encode(StringBuilder-Cookie), DefaultRxtxChannelConfig:getStopbits(), ChannelException:<init>(String), DefaultSctpChannelConfig:setMaxMessagesPerRead(int), ThreadPerChannelEventLoopGroup$1:operationComplete(Future), RtspObjectDecoder:isContentAlwaysEmpty(HttpMessage), DefaultSctpServerChannelConfig:setWriteSpinCount(int), DefaultUdtServerChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), HttpMessage:headers(), AbstractOioChannel:<init>(Channel), ConcurrentHashMapV8$SearchValuesTask:invoke(), HttpObjectDecoder:findEndOfString(String), CountedCompleter$1:run(), DefaultHttpRequest:setMethod(HttpMethod), HttpClientCodec:<init>(int-int-int-boolean), DefaultSocketChannelConfig:getReceiveBufferSize(), UnpooledHeapByteBuf:ensureAccessible(), MixedAttribute:getCharset(), Channel:writeAndFlush(Object), SpdySynStreamFrame:setUnidirectional(boolean), RecyclableArrayList:checkNullElements(Collection), HttpResponseDecoder:<init>(), NioServerSocketChannel:<init>(), HttpContentDecoder:getTargetContentEncoding(String), PoolArena$HeapArena:memoryCopy(Object-int-Object-int-int), UnreleasableByteBuf:forEachByteDesc(ByteBufProcessor), AbstractTrafficShapingHandler$1:run(), Attribute:duplicate(), HttpPostRequestEncoder:initMixedMultipart(), ReplayingDecoderBuffer:writeMedium(int), DefaultProgressivePromise:executor(), DefaultSpdySynStreamFrame:getStreamId(), WebSocketServerProtocolHandler$1:channelRead(ChannelHandlerContext-Object), ResourceLeakDetector:access$400(ResourceLeakDetector), ChannelHandlerContext:fireChannelActive(), Bootstrap:connect(SocketAddress), ChannelPromise:setSuccess(), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:setTimeZone(TimeZone), HttpPostRequestEncoder$WrappedFullHttpRequest:setMethod(HttpMethod), AbstractBootstrap:localAddress(int), LocalChannel:access$300(LocalChannel-ChannelPipeline), UnpooledHeapByteBuf:array(), OioSocketChannel:newPromise(), ChannelOutboundHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), HttpHeaders:setDate(HttpMessage-Date), SpdyHeaderBlockZlibEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), SctpServerChannel:unbindAddress(InetAddress), DefaultCookie:toString(), LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), HttpClientCodec:access$100(HttpClientCodec), DefaultDatagramChannelConfig:setOption(ChannelOption-Object), ReadOnlyByteBuf:memoryAddress(), SctpChannel:getOption(SctpSocketOption), NioUdtByteConnectorChannel:doClose(), AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel), SingleThreadEventLoop:<init>(EventLoopGroup-ThreadFactory-boolean), AbstractTrafficShapingHandler$ReopenReadTimerTask:run(), ConcurrentHashMapV8$MapReduceValuesTask:firstComplete(), ReadTimeoutException:<init>(), UnpooledDirectByteBuf:getBytes(int-OutputStream-int), OioSocketChannel$1:run(), CompositeByteBuf:readBytes(OutputStream-int), DefaultCookie:isSecure(), DefaultSpdySynStreamFrame:setInvalid(), AbstractServerChannel:<clinit>(), ByteBuf:markReaderIndex(), DefaultUdtChannelConfig:getSystemSendBufferSize(), UnpooledUnsafeDirectByteBuf:ensureAccessible(), NioDatagramChannelConfig:getNetworkInterface(), DefaultSctpServerChannelConfig:setOption(ChannelOption-Object), WebSocketServerHandshaker13:newWebSocketEncoder(), ForkJoinPool$EmptyTask:setRawResult(Object), RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage), Unpooled:copiedBuffer(CharSequence-int-int-Charset), ProtocolFamilyConverter:convert(InternetProtocolFamily), UnpooledHeapByteBuf:_getInt(int), EmptyByteBuf:isReadable(int), EmptyByteBuf:nioBuffers(int-int), CompositeByteBuf:checkComponentIndex(int-int), OioDatagramChannel:doDisconnect(), CompositeByteBuf:setZero(int-int), SctpMessage:toString(), ForkJoinTask$ExceptionNode:<init>(ForkJoinTask-Throwable-ForkJoinTask$ExceptionNode), ByteBuf:writeBytes(byte[]-int-int), WebSocket07FrameDecoder:<init>(boolean-boolean-int), Bootstrap:connect(String-int), SingleThreadEventExecutor:removeShutdownHook(Runnable), AbstractNioChannel:<init>(Channel-SelectableChannel-int), AbstractByteBuf:compareTo(ByteBuf), SpdyFrameEncoder:<init>(int-SpdyHeaderBlockEncoder), LocalServerChannel:serve(LocalChannel), SwappedByteBuf:getMedium(int), EmptyByteBuf:setBytes(int-byte[]-int-int), OioByteStreamChannel$2:write(int), DefaultChannelConfig:getConnectTimeoutMillis(), ByteBuf:setBytes(int-ByteBuf), Future:cause(), AbstractInternalLogger:debug(String-Object[]), PlatformDependent:<init>(), ChunkedWriteHandler$3:<init>(ChunkedWriteHandler-ChunkedWriteHandler$PendingWrite-ChunkedInput), WebSocketServerHandshaker08:newHandshakeResponse(FullHttpRequest-HttpHeaders), ChannelFutureListener$2:<init>(), SocksRequestType:<clinit>(), LocalEventLoopGroup:newChild(ThreadFactory-Object[]), ContinuationWebSocketFrame:aggregatedText(), GlobalTrafficShapingHandler:setTrafficCounter(TrafficCounter), NioUdtMessageConnectorChannel:isActive(), TextWebSocketFrame:text(), WebSocketServerHandshaker00:selectSubprotocol(String), UnreleasableByteBuf:readUnsignedInt(), SslHandler:isEncrypted(ByteBuf), DefaultSpdyPingFrame:setId(int), AbstractByteBufAllocator:ioBuffer(int), DefaultChannelHandlerContext$6:run(), HttpObjectDecoder:readTrailingHeaders(ByteBuf), CompositeByteBuf:_getShort(int), DefaultProgressivePromise:checkDeadLock(), DefaultFutureListeners:size(), Striped64$1:<init>(), DefaultSpdyPingFrame:<init>(int), ConcurrentHashMapV8:batchFor(long), SpdySynStreamFrame:isTruncated(), HttpRequestEncoder:<init>(), ByteBufUtil:hashCode(ByteBuf), ByteBuf:getDouble(int), NioDatagramChannel:<init>(InternetProtocolFamily), DiskAttribute:getName(), SpdyHttpHeaders$Names:<init>(), QueryStringEncoder:<init>(String-Charset), HttpRequest:setUri(String), SocksMessageEncoder:encode(ChannelHandlerContext-Object-ByteBuf), EventExecutor:shutdownGracefully(), ChannelHandlerContext:fireExceptionCaught(Throwable), Unpooled:unreleasableBuffer(ByteBuf), AbstractInternalLogger:error(String-Throwable), ByteBuf:readerIndex(int), AbstractByteBufAllocator:directBuffer(int), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ReplayingDecoderBuffer:bytesBefore(int-byte), MessageLite$Builder:mergeFrom(byte[]-int-int), ConcurrentHashMapV8$MapReduceMappingsToIntTask:addToPendingCount(int), AbstractDerivedByteBuf:<init>(int), PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int), WebSocketClientHandshaker:newWebsocketDecoder(), DuplicatedByteBuf:getBytes(int-ByteBuf-int-int), CompositeByteBuf:consolidateIfNeeded(), SwappedByteBuf:readDouble(), DefaultProgressivePromise:removeListener(GenericFutureListener), PlatformDependent:<clinit>(), ConcurrentHashMapV8$ObjectToInt:apply(Object), DiskFileUpload:length(), SpdyHeaders:getVersion(int-SpdyHeadersFrame), DefaultSctpChannelConfig:getOption(ChannelOption), AbstractReferenceCountedByteBuf:writeFloat(float), Deflater:<init>(), PingWebSocketFrame:<init>(boolean-int-ByteBuf), AbstractTrafficShapingHandler:<init>(long-long), ScheduledFutureTask:isCancelled(), ChannelUDT:socketUDT(), EventExecutor:invokeAny(Collection), InternalLogLevel:<init>(String-int), CommonsLogger:error(String-Object[]), DefaultFullHttpRequest:retain(int), EmptyByteBuf:setBytes(int-byte[]), SpdyHeaders$1:<init>(), Bootstrap$1:operationComplete(ChannelFuture), AbstractReferenceCountedByteBuf:refCnt(), ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf), DefaultOioServerSocketChannelConfig:validate(ChannelOption-Object), AbstractDiskHttpData:renameTo(File), AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), CombinedChannelDuplexHandler:channelActive(ChannelHandlerContext), SlicedByteBuf:_getShort(int), DefaultHttpDataFactory:getList(HttpRequest), ChunkedStream:<init>(InputStream), MixedAttribute:get(), UnpooledUnsafeDirectByteBuf:addr(int), ForkJoinPool:incrementActiveCount(), ChannelPipelineException:<init>(String-Throwable), ThreadLocalUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), SingleThreadEventLoop:next(), ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Action), DefaultRxtxChannelConfig:getOptions(), AbstractByteBuf:readBytes(ByteBuf), ByteBuf:readShort(), AbstractChannel$AbstractUnsafe:write(Object-ChannelPromise), DefaultChannelPipeline:fireChannelRegistered(), SwappedByteBuf:getByte(int), DefaultChannelPipeline:addFirst(EventExecutorGroup-String-ChannelHandler), ObjectDecoder:<init>(ClassResolver), AbstractOioByteChannel:checkInputShutdown(), ResourceLeakDetector$1:<init>(), WebSocketServerHandshaker08:newWebSocketEncoder(), DefaultSctpChannelConfig:setSctpNoDelay(boolean), IdleState:values(), PooledByteBufAllocator:newDirectBuffer(int-int), ForkJoinTask:reportException(int), SslHandler$CloseNotifyListener:operationComplete(Future), DefaultHttpDataFactory:createAttribute(HttpRequest-String-String), AbstractChannel$AbstractUnsafe:access$100(AbstractChannel$AbstractUnsafe-ChannelPromise), OioSctpChannel:doBind(SocketAddress), CompleteFuture:addListeners(GenericFutureListener[]), SpdyOrHttpChooser:getProtocol(SSLEngine), ForkJoinPool:execute(ForkJoinTask), UnpooledUnsafeDirectByteBuf:alloc(), DefaultSpdyHeaders$HeaderEntry:addBefore(DefaultSpdyHeaders$HeaderEntry), SnappyFramedDecoder$1:<clinit>(), AbstractByteBuf:slice(int-int), EmptyByteBuf:getLong(int), EventLoop:isShutdown(), ConcurrentHashMapV8$MapReduceKeysToLongTask:firstComplete(), AbstractFuture:await(long-TimeUnit), LocalServerChannel:doRegister(), LocalChannel:doRegister(), AbstractByteBuf:writeBytes(ScatteringByteChannel-int), ChannelOutboundHandler:flush(ChannelHandlerContext), Attribute:isCompleted(), ChannelPipeline:remove(ChannelHandler), ObjectEncoderOutputStream:writeChar(int), Log:isErrorEnabled(), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), HttpResponseDecoder:createMessage(String[]), DefaultChannelGroupFuture:sync(), LocalChannel$3:run(), ReplayingDecoderBuffer:isDirect(), SpdyHeaders:setHeader(SpdyHeadersFrame-String-Object), PooledUnsafeDirectByteBuf:array(), AbstractDiskHttpData:get(), ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int), PingWebSocketFrame:copy(), ConcurrentHashMapV8$ForEachKeyTask:advance(), DefaultChannelHandlerContext:freeInbound(), NioDatagramChannel:<clinit>(), CompositeByteBuf:internalComponentAtOffset(int), DefaultSctpChannelConfig:setWriteBufferLowWaterMark(int), SctpServerChannelConfig:getBacklog(), JdkLogger:error(String-Throwable), PoolChunk:allocateRun(int-int-int), SocksCmdResponseDecoder:<init>(), WebSocketClientHandshaker13:expectedSubprotocol(), NioEventLoop:rebuildSelector(), ByteBuf:getBytes(int-ByteBuffer), ReplayingDecoderBuffer:setChar(int-int), DefaultChannelPromise:setFailure(Throwable), TrafficCounter:start(), DecompressionException:<init>(String), SctpMessage:content(), SwappedByteBuf:writeBytes(ScatteringByteChannel-int), SpdyDataFrame:setLast(boolean), CompatibleObjectEncoder:<init>(int), DefaultProgressivePromise:await(), MessageLite:newBuilderForType(), NioEventLoop:processSelectedKeysOptimized(SelectionKey[]), CompleteFuture:<init>(EventExecutor), AbstractChannel$AbstractUnsafe$4:run(), ResourceLeakException:<init>(Throwable), SwappedByteBuf:getLong(int), Attribute:getChunk(int), SwappedByteBuf:bytesBefore(int-int-byte), DefaultChannelPipeline$TailHandler:channelRead(ChannelHandlerContext-Object), ChannelOutboundHandlerAdapter:<init>(), SctpChannel:receive(ByteBuffer-Object-NotificationHandler), DefaultProgressivePromise:sync(), FileUpload:release(int), TypeParameterMatcher$2:initialValue(), StringUtil:<clinit>(), EmptyByteBuf:ensureWritable(int-boolean), ForkJoinPool$WorkQueue:push(ForkJoinTask), EmptyByteBuf:bytesBefore(int-int-byte), FileUpload:getString(), CompositeByteBuf:addComponent(int-ByteBuf), ChannelConfig:getConnectTimeoutMillis(), DefaultChannelGroupFuture:tryFailure(Throwable), NioEventLoopGroup:setIoRatio(int), DefaultChannelGroup:flushAndWrite(Object-ChannelMatcher), MultithreadEventExecutorGroup:next(), CommonsLogger:warn(String-Object[]), JdkZlibEncoder$1:operationComplete(Future), HttpPostRequestEncoder$WrappedFullHttpRequest:content(), ChannelDuplexHandler:channelInactive(ChannelHandlerContext), AbstractNioChannel:<clinit>(), AbstractNioMessageChannel:doWrite(Object[]-int-int), AbstractByteBuf:maxCapacity(), UnreleasableByteBuf:markWriterIndex(), HttpContentEncoder:ensureContent(HttpObject), SocksInitRequestDecoder$State[]:clone(), AbstractEventExecutor:iterator(), JdkZlibEncoder$2:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), ChannelFuture:removeListener(GenericFutureListener), LocalChannelRegistry:<init>(), HttpObjectDecoder:isDecodingRequest(), DefaultChannelHandlerContext:fireChannelInactive(), MemoryFileUpload:retain(int), HttpPostBodyUtil$TransferEncodingMechanism:valueOf(String), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<clinit>(), ConcurrentHashMapV8:<init>(int-float-int), PooledByteBuf:readerIndex(), ChunkedStream:close(), OioSocketChannel:doReadBytes(ByteBuf), CompositeByteBuf:_setShort(int-int), UnreleasableByteBuf:bytesBefore(byte), ReplayingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), ConcurrentHashMapV8:replace(Object-Object-Object), AbstractChannel:bind(SocketAddress), SwappedByteBuf:alloc(), TrafficCounter:configure(long), LocalEventLoopGroup:<init>(int-ThreadFactory), CtClass:getModifiers(), OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise), ObjectDecoderInputStream:readBoolean(), ChannelMatchers:compose(ChannelMatcher[]), ConcurrentHashMapV8$TreeNode:find(int-Object), UnsupportedMessageTypeException:<init>(Throwable), FormattingTuple:getThrowable(), LoggingHandler:flush(ChannelHandlerContext), SwappedByteBuf:writeInt(int), SwappedByteBuf:writeBytes(byte[]-int-int), SwappedByteBuf:getUnsignedByte(int), CompositeByteBuf:discardSomeReadBytes(), ChannelOutboundBuffer:<clinit>(), DefaultPromise:incWaiters(), RtspResponseDecoder:createMessage(String[]), HttpClientCodec$Decoder:channelInactive(ChannelHandlerContext), DefaultChannelGroupFuture$1:operationComplete(ChannelFuture), WebSocketServerHandshaker:newHandshakeResponse(FullHttpRequest-HttpHeaders), Base64:decode(ByteBuf-Base64Dialect), ReadOnlyByteBuf:_getShort(int), AbstractBootstrap:attr(AttributeKey-Object), RxtxChannelConfig$Paritybit:values(), PoolArena$DirectArena:memoryCopy(Object-int-Object-int-int), Attribute:setIfAbsent(Object), RxtxChannel:newUnsafe(), Channel:isRegistered(), DefaultDatagramChannelConfig:isBroadcast(), WriteTimeoutException:<init>(), VoidChannelPromise:<init>(Channel-boolean), TextWebSocketFrame:<init>(boolean-int-String), LocalChannel$LocalUnsafe:close(ChannelPromise), JdkZlibEncoder:<init>(ZlibWrapper-int), DefaultHttpHeaders:iterator(), FailedFuture:syncUninterruptibly(), SslHandler:read(ChannelHandlerContext), DefaultSctpChannelConfig:getInitMaxStreams(), SpdySession:noActiveStreams(), NioSctpServerChannel:doFinishConnect(), AbstractDiskHttpData:getChunk(int), UnreleasableByteBuf:nioBuffer(), ObjectDecoderInputStream:mark(int), UnreleasableByteBuf:writeZero(int), HttpContentEncoder:beginEncode(HttpResponse-String), Cookie:getValue(), SpdyStreamStatus:getCode(), SpdyStreamStatus:<init>(int-String), ImmediateEventExecutor:newPromise(), ChannelFlushPromiseNotifier:add(ChannelPromise-int), AbstractByteBuf:setBytes(int-InputStream-int), IdleStateHandler:access$302(IdleStateHandler-boolean), Slf4JLogger:trace(String), SpdyHeaders:getAll(String), ByteBuf:setIndex(int-int), ReadOnlyByteBufferBuf:setBytes(int-InputStream-int), MemoryAttribute:equals(Object), SpdySessionStatus:<clinit>(), EventLoopException:<init>(Throwable), Log4JLoggerFactory:newInstance(String), ForkJoinPool$WorkQueue:growArray(), EmptyByteBuf:getChar(int), ChannelOutboundBuffer:doubleCapacity(), OioSctpChannel:isOpen(), AbstractByteBuf:bytesBefore(byte), AbstractEventExecutor:newProgressivePromise(), SpdyHeaders:<init>(), PooledByteBufAllocator:newArenaArray(int), SocksCmdResponseDecoder$State:values(), SpdyHttpEncoder:<init>(int), NioSctpServerChannel:javaChannel(), Inflater:init(JZlib$WrapperType), Channel$Unsafe:deregister(ChannelPromise), ChunkedNioStream:readChunk(ChannelHandlerContext), ClientCookieEncoder:encode(Cookie), ImmediateExecutor:<clinit>(), MixedFileUpload:length(), ByteBuf:array(), ReadOnlyByteBuf:setBytes(int-ByteBuf-int-int), ReadOnlyByteBuf:_getByte(int), SlicedByteBuf:getBytes(int-GatheringByteChannel-int), SocketChannelUDT:isConnectFinished(), Attribute:content(), AbstractByteBuf:readBytes(ByteBuf-int-int), DefaultSctpChannelConfig:setAutoRead(boolean), SpdyHttpHeaders:getPriority(HttpMessage), DefaultUdtChannelConfig:setMaxMessagesPerRead(int), SpdyHeaderBlockRawEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), NioDatagramChannel:config(), ByteBuf:bytesBefore(int-int-byte), Bootstrap:bind(SocketAddress), ReplayingDecoderBuffer:copy(), ClientCookieEncoder:<init>(), ForkJoinTask:recordExceptionalCompletion(Throwable), MemoryAttribute:setValue(String), ReplayingDecoderBuffer:maxCapacity(), ByteToMessageDecoder:channelInactive(ChannelHandlerContext), ReplayingDecoderBuffer:order(), DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator), AbstractDerivedByteBuf:refCnt(), DefaultLastHttpContent:copy(), ConcurrentHashMapV8:tableSizeFor(int), UnpooledByteBufAllocator:newHeapBuffer(int-int), CaseIgnoringComparator:compare(String-String), DefaultSpdyDataFrame:copy(), SslHandler$4:<init>(SslHandler-ChannelHandlerContext), ObjectDecoderInputStream:readShort(), ConcurrentHashMapV8$ForEachEntryTask:propagateCompletion(), SwappedByteBuf:readInt(), OioSctpServerChannel:allLocalAddresses(), MixedFileUpload:renameTo(File), LineBasedFrameDecoder:findEndOfLine(ByteBuf), OioDatagramChannel:config(), ConcurrentHashMapV8$ObjectByObjectToLong:apply(Object-Object), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8:keys(), DefaultChannelHandlerContext$7:<init>(DefaultChannelHandlerContext-Throwable), WebSocketServerHandshaker00:newWebSocketEncoder(), AbstractChannel:parent(), DefaultCookie:setValue(String), InternalAttribute:compareTo(InterfaceHttpData), Inflater:inflateInit(JZlib$WrapperType), InternalLogger:log(InternalLogLevel-String-Throwable), ReplayingDecoderBuffer:readBytes(GatheringByteChannel-int), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), EncoderException:<init>(), AbstractMemoryHttpData:addContent(ByteBuf-boolean), DefaultServerSocketChannelConfig:setBacklog(int), DiskFileUpload:retain(), UnreleasableByteBuf:getUnsignedInt(int), DelimiterBasedFrameDecoder:indexOf(ByteBuf-ByteBuf), OioSctpChannel:eventLoop(), SocksAuthRequestDecoder$State:<clinit>(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:getRawResult(), CompactObjectOutputStream:writeClassDescriptor(ObjectStreamClass), ByteBuf:getShort(int), AbstractByteBuf:_getInt(int), PlatformDependent:getInt(Object-long), DefaultPromise$6:run(), DefaultHttpHeaders:validateHeaderName0(String), ServerBootstrap:access$000(), SpdyHeaderBlockEncoder:end(), ForkJoinTask:<clinit>(), SwappedByteBuf:arrayOffset(), DefaultOioServerSocketChannelConfig:setWriteSpinCount(int), HttpContentEncoder:<init>(), FileUpload:getCharset(), SwappedByteBuf:writeBytes(ByteBuffer), ReplayingDecoderBuffer:getBytes(int-ByteBuffer), LocalEventLoop:updateLastExecutionTime(), OioServerSocketChannelConfig:getBacklog(), SocketChannelUDT:write(ByteBuffer[]), SocksInitResponseDecoder:<init>(), Bootstrap:options(), ConcurrentHashMapV8$ForEachKeyTask:compute(), IdleStateHandler:channelRegistered(ChannelHandlerContext), HttpContentEncoder$Result:contentEncoder(), NioServerSocketUDT:isBound(), LongAdder:increment(), InternalLoggerFactory:getDefaultFactory(), Attribute:release(), NioSctpChannel:doClose(), AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise), Channel$Unsafe:remoteAddress(), AbstractByteBuf:<clinit>(), ReadOnlyByteBufferBuf:getBytes(int-ByteBuffer), SocksMessageType:<clinit>(), UniqueName:toString(), EmbeddedChannel:ensureOpen(), UnreleasableByteBuf:setBytes(int-ByteBuffer), JZlibEncoder:<init>(ZlibWrapper), ChannelPipeline:fireChannelWritabilityChanged(), RtspResponseDecoder:<init>(int-int-int), DefaultPromise:isDone(), UnreleasableByteBuf:readInt(), CommonsLogger:debug(String-Object), MarshallingDecoder:decode(ChannelHandlerContext-ByteBuf), ThreadLocalRandom:nextLong(long), SctpInboundByteStreamHandler:acceptInboundMessage(SctpMessage), DefaultHttpHeaders:<init>(), HttpObjectDecoder:<init>(int-int-int-boolean), NioEventLoop:confirmShutdown(), Cookie:setDiscard(boolean), Channel:connect(SocketAddress-SocketAddress-ChannelPromise), AbstractByteBuf:getBytes(int-ByteBuf-int-int), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:firstComplete(), NioServerSocketUDT:getLocalSocketAddress(), InternalAttribute:toString(), ConcurrentHashMapV8$ForEachTransformedMappingTask:compute(), Unpooled:copyInt(int[]), SslHandler:access$600(), PooledByteBuf:capacity(int), ForkJoinTask$RunnableExecuteAction:setRawResult(Void), DiskFileUpload:setContent(ByteBuf), ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), SpdyHttpEncoder:encode(ChannelHandlerContext-Object-List), ByteBuf:getMedium(int), EmptyByteBuf:<clinit>(), ReplayingDecoderBuffer:writeByte(int), ObjectEncoderOutputStream:writeUTF(String), SslHandler$CloseNotifyListener:<init>(SslHandler$1), SwappedByteBuf:isReadable(), UnreleasableByteBuf:ensureWritable(int-boolean), HttpRequestEncoder:acceptOutboundMessage(Object), ByteBufOutputStream:<init>(ByteBuf), SwappedByteBuf:setBytes(int-ByteBuf-int-int), DefaultSpdySettingsFrame:<init>(), MarshallerFactory:createUnmarshaller(MarshallingConfiguration), RxtxChannel:activate(InputStream-OutputStream), LocalChannel:localAddress(), TrafficCounter:resetAccounting(long), Channel$Unsafe:register(EventLoop-ChannelPromise), SocksProtocolVersion[]:clone(), FormattingTuple:<init>(String), NioUdtAcceptorChannel:doFinishConnect(), ConcurrentHashMapV8$ForwardingNode:find(int-Object), HttpContentEncoder:encode(ByteBuf-List), ForkJoinTask:uncheckedThrow(Throwable), ConcurrentHashMapV8$ValuesView:spliterator(), DefaultChannelPipeline:fireUserEventTriggered(Object), LocalChannel$4:<init>(LocalChannel-EventLoop-LocalChannel), EmbeddedChannel:pipeline(), ChannelHandlerContext:fireUserEventTriggered(Object), EmbeddedChannel:isActive(), OioSctpServerChannel:doClose(), HttpPostBodyUtil$TransferEncodingMechanism:values(), HashedWheelTimer:start(), AbstractReferenceCountedByteBuf:writeBoolean(boolean), ReferenceMap:entrySet(), HttpPostRequestDecoder:isMultipart(), ChunkedWriteHandler$5:operationComplete(ChannelFuture), NioDatagramChannel:<init>(DatagramChannel), DefaultFullHttpResponse:content(), ConcurrentHashMapV8$MapEntry:equals(Object), UnpooledUnsafeDirectByteBuf:checkIndex(int), GlobalEventExecutor$PurgeTask:run(), HttpResponseStatus:compareTo(Object), OioSocketChannel:doConnect(SocketAddress-SocketAddress), ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), IdleState:valueOf(String), ConcurrentHashMapV8$MapReduceMappingsToIntTask:getRawResult(), PooledUnsafeDirectByteBuf:nioBuffer(int-int), HttpObjectDecoder$State:ordinal(), UnreleasableByteBuf:writeMedium(int), SpdyFrameEncoder:access$000(SpdyFrameEncoder), HashedWheelTimer$HashedWheelTimeout:isCancelled(), ForkJoinPool$WorkQueue:runTask(ForkJoinTask), AbstractByteBuf:readerIndex(int), Base64:encode(ByteBuf-boolean-Base64Dialect), ResourceLeakException:equals(Object), Log4JLogger:warn(String-Object[]), CompleteChannelFuture:<init>(Channel-EventExecutor), SpdySessionHandler:updateInitialReceiveWindowSize(int), AbstractByteBuf:nioBuffer(), ByteBuf:slice(int-int), DatagramPacket:content(), ConcurrentHashMapV8$Node:hashCode(), SwappedByteBuf:getInt(int), DefaultUdtChannelConfig:setSystemSendBufferSize(int), ConcurrentHashMapV8$EntryIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), ChannelFuture:addListener(GenericFutureListener), DefaultCookie:hashCode(), OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress), DefaultSocketChannelConfig:isReuseAddress(), EmptyByteBuf:nioBuffer(), DuplicatedByteBuf:setLong(int-long), NioUdtProvider:<clinit>(), HttpPostRequestDecoder:offer(HttpContent), Attribute:getCharset(), ServerBootstrap:childHandler(ChannelHandler), MixedFileUpload:content(), DefaultChannelProgressivePromise:<init>(Channel), MultithreadEventExecutorGroup$1:operationComplete(Future), Cookie:isHttpOnly(), SpdyHeaders:setHost(SpdyHeadersFrame-String), PoolArena:<clinit>(), WebSocketClientHandshaker$1:<init>(WebSocketClientHandshaker-ChannelPromise), ConcurrentHashMapV8$KeySetView:addAll(Collection), AbstractBootstrap:<init>(), AbstractNioChannel:doConnect(SocketAddress-SocketAddress), Bootstrap:bind(String-int), SwappedByteBuf:bytesBefore(int-byte), WebSocketServerHandshaker$1:<init>(WebSocketServerHandshaker-ChannelPromise), ReadOnlyByteBuf:order(ByteOrder), RecyclableArrayList:recycle(), LoggingHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), OioSctpChannel:closeSelector(String-Selector), AbstractChannel:access$300(AbstractChannel), ScheduledFutureTask:delayNanos(), ConcurrentHashMapV8$ValuesView:<init>(ConcurrentHashMapV8), NioDatagramChannel:doConnect(SocketAddress-SocketAddress), JdkLogger:isErrorEnabled(), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler), DefaultChannelPipeline:access$000(DefaultChannelPipeline-DefaultChannelHandlerContext-String-DefaultChannelHandlerContext), DefaultHttpObject:<init>(), UnreleasableByteBuf:skipBytes(int), ForkJoinPool$1:run(), SocksCmdResponse$1:<clinit>(), ByteBufHolder:duplicate(), AbstractByteBuf:checkReadableBytes(int), DefaultSpdySynReplyFrame:setInvalid(), Slf4JLogger:error(String), SingleThreadEventExecutor:<clinit>(), DiskFileUpload:compareTo(FileUpload), Unpooled:copyBoolean(boolean[]), ReadOnlyByteBuf:array(), LocalServerChannel:serve0(LocalChannel), DefaultDatagramChannelConfig:setWriteBufferLowWaterMark(int), LengthFieldBasedFrameDecoder:getFrameLength(ByteBuf-int), ForkJoinPool:submit(Runnable-Object), ForkJoinPool:commonSubmitterQueue(), ConcurrentHashMapV8$ForEachTransformedMappingTask:fork(), MemoryFileUpload:getContentType(), SingleThreadEventExecutor$3:run(), LoggingHandler:close(ChannelHandlerContext-ChannelPromise), DefaultSpdyHeaders$HeaderEntry:setValue(String), AbstractInternalLogger:info(String-Object), SpdyDataFrame:getStreamId(), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), JZlibDecoder:decode(ChannelHandlerContext-ByteBuf-List), VoidChannelPromise:trySuccess(Void), JZlibEncoder:close(ChannelHandlerContext-ChannelPromise), ClassPool:<init>(boolean), Slf4JLogger:debug(String-Object[]), HttpObjectDecoder:invalidChunk(Exception), SocksInitResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), CompleteChannelFuture:removeListener(GenericFutureListener), AbstractByteBuf:readerIndex(), ChannelFlushPromiseNotifier:notifyFlushFutures(Throwable), DefaultUdtServerChannelConfig:apply(ChannelUDT), ConcurrentHashMapV8:reduceValuesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ChannelOutboundHandler:disconnect(ChannelHandlerContext-ChannelPromise), DefaultChannelPipeline:addLast(ChannelHandler[]), SwappedByteBuf:writeBytes(ByteBuf), Log4JLogger:debug(String-Object), WebSocketClientHandshaker$1:operationComplete(Future), AbstractByteBuf:_getByte(int), DefaultChannelConfig:isAutoRead(), Slf4JLogger:trace(String-Object-Object), ByteInput:read(), Bootstrap:connect(InetAddress-int), ChannelMatchers$ClassMatcher:<init>(Class), AbstractOioMessageChannel:doReadMessages(List), SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor-SingleThreadEventExecutor$1), PooledDirectByteBuf:<init>(Recycler$Handle-int-PooledDirectByteBuf$1), SSLEngine:getSession(), SingleThreadEventExecutor$4:run(), AbstractBootstrap:group(EventLoopGroup), LocalChannel$3:<init>(LocalChannel), HttpObjectDecoder:findWhitespace(String-int), ChannelPipeline:fireChannelActive(), SpdySessionStatus:<init>(int-String), Slf4JLogger:error(String-Object), SocksCmdType:<init>(String-int-byte), NioEventLoopGroup:<init>(int-ThreadFactory-SelectorProvider), InternalAttribute:compareTo(InternalAttribute), ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), ByteBuf:nioBufferCount(), AbstractNioByteChannel:selectionKey(), ScheduledFutureTask:cancel(boolean), ByteBuf:writeZero(int), NioEventLoop:execute(Runnable), AbstractReferenceCountedByteBuf:retain(), UnsupportedMessageTypeException:<init>(Object-Class[]), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), Striped64:<init>(), Logger:trace(String-Object[]), DefaultServerSocketChannelConfig:setWriteSpinCount(int), ConcurrentHashMapV8:remove(Object-Object), AbstractByteBufAllocator:buffer(int), CommonsLoggerFactory:<init>(), DefaultHttpRequest:setProtocolVersion(HttpVersion), AbstractByteBuf:getMedium(int), ProtobufEncoder:encode(ChannelHandlerContext-MessageLiteOrBuilder-List), UnreleasableByteBuf:readByte(), SwappedByteBuf:readUnsignedByte(), DefaultRxtxChannelConfig:setDtr(boolean), ConcurrentHashMapV8$ObjectToDouble:apply(Object), DefaultFullHttpRequest:release(int), OioDatagramChannel:isOpen(), UdtMessage:<init>(ByteBuf), ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), DefaultOioServerSocketChannelConfig:setSoTimeout(int), LocalAddress:compareTo(Object), Log4JLogger:error(String-Object), SctpChannel:open(), FormattingTuple:getMessage(), PoolArena:toString(), ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), EmptyByteBuf:writeMedium(int), WebSocketVersion[]:clone(), SSLException:<init>(String-Throwable), MessageInfo:payloadProtocolID(int), EventExecutor:inEventLoop(), SpdyCodecUtil:validateHeaderName(String), ConcurrentHashMapV8$SearchMappingsTask:fork(), JZlibEncoder:<init>(int), SslHandler$3:operationComplete(Future), WebSocket08FrameDecoder$1:<clinit>(), SystemPropertyUtil:<init>(), ChunkedNioFile:<init>(File-int), AbstractChannel:flush(), HttpPostRequestDecoder:getBodyHttpData(String), TimeoutException:<init>(), LineBasedFrameDecoder:fail(ChannelHandlerContext-String), AbstractByteBuf:getBytes(int-GatheringByteChannel-int), DefaultChannelPipeline$HeadHandler:<init>(Channel$Unsafe), ReplayingDecoder:decode(ChannelHandlerContext-ByteBuf-List), UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int), UnpooledHeapByteBuf:setIndex(int-int), DefaultChannelPipeline$HeadHandler:exceptionCaught(ChannelHandlerContext-Throwable), DefaultHttpHeaders:contains(String), AbstractNioChannel$AbstractNioUnsafe$2:<init>(AbstractNioChannel$AbstractNioUnsafe), NioSocketChannel:shutdownOutput(), ChannelOutboundHandler:handlerAdded(ChannelHandlerContext), PooledDirectByteBuf:memoryAddress(), JdkZlibEncoder:<init>(), HttpMethod:compareTo(HttpMethod), ByteBuf:readInt(), PooledDirectByteBuf:setBytes(int-byte[]-int-int), ChannelPromiseAggregator:add(ChannelPromise[]), LocalChannel:access$200(LocalChannel), UnreleasableByteBuf:setFloat(int-float), ByteBufInputStream:<init>(ByteBuf), CompleteFuture:addListener(GenericFutureListener), DefaultOioSocketChannelConfig:setAutoRead(boolean), HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), DefaultChannelHandlerContext$3:run(), DefaultOioSocketChannelConfig:<init>(SocketChannel-Socket), ServerSocketChannelUDT:socket(), ChannelConfig:setOption(ChannelOption-Object), ChunkedWriteHandler:channelInactive(ChannelHandlerContext), AbstractChannel:calculateMessageSize(Object), HttpPostRequestDecoder:getBodyHttpDatas(String), HttpHeaderDateFormat:parse(String-ParsePosition), MemoryAttribute:getHttpDataType(), ReplayingDecoder:exceptionCaught(ChannelHandlerContext-Throwable), AbstractTrafficShapingHandler:channelRead(ChannelHandlerContext-Object), SpdyStreamStatus:equals(Object), WebSocketFrame:duplicate(), SpdyHttpHeaders:getUrl(HttpMessage), PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int), Unmarshaller:close(), Unsafe:putOrderedInt(Object-long-int), ForkJoinPool:scan(ForkJoinPool$WorkQueue-int), AbstractTrafficShapingHandler$2:run(), DefaultChannelProgressivePromise:promise(), ConcurrentHashMapV8$KeySetView:forEach(ConcurrentHashMapV8$Action), ConcurrentHashMapV8:replaceAll(ConcurrentHashMapV8$BiFun), SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-Object-List), ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction), SwappedByteBuf:readerIndex(), DefaultSpdyGoAwayFrame:<init>(int), UnpooledUnsafeDirectByteBuf:_setMedium(int-int), IdleStateHandler:access$200(IdleStateHandler), ThreadLocalRandom:nextLong(), DefaultUdtChannelConfig:setProtocolReceiveBufferSize(int), InternalLogLevel:ordinal(), SwappedByteBuf:markReaderIndex(), DefaultChannelGroup:hashCode(), WebSocketClientHandshaker13:newHandshakeRequest(), DefaultSocketChannelConfig:<init>(SocketChannel-Socket), RxtxChannelConfig$Paritybit:valueOf(String), DefaultPromise$5:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), DelimiterBasedFrameDecoder:validateDelimiter(ByteBuf), AbstractInternalLogger:isEnabled(InternalLogLevel), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), EmptyByteBuf:getBytes(int-byte[]), SlicedByteBuf:forEachByteDesc(int-int-ByteBufProcessor), SpdySessionHandler:updateConcurrentStreams(int-boolean), NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface), Unpooled:directBuffer(int-int), PooledByteBuf:internalNioBuffer(), SocksAuthScheme:values(), LongAdder:internalReset(long), CharsetUtil:getDecoder(Charset), ConcurrentHashMapV8$Node:toString(), DefaultSpdySynStreamFrame:isUnidirectional(), UnpooledHeapByteBuf:internalNioBuffer(int-int), EventLoopException:<init>(), DefaultChannelGroup:toString(), Unpooled:copyShort(int[]), SlicedByteBuf:forEachByte(int-int-ByteBufProcessor), HttpPostRequestEncoder$WrappedHttpRequest:setMethod(HttpMethod), DefaultChannelConfig:getOption(ChannelOption), Snappy:encode(ByteBuf-ByteBuf-int), HttpPostRequestDecoder:readFileUploadByteMultipart(String), ChunkedNioFile:isEndOfInput(), ByteBuf:setLong(int-long), AbstractMemoryHttpData:retain(), ConcurrentHashMapV8$MapReduceValuesToLongTask:getRawResult(), CompositeByteBuf:retain(), DefaultSocketChannelConfig:setConnectTimeoutMillis(int), PooledHeapByteBuf:maxCapacity(int), SwappedByteBuf:readLong(), DefaultRxtxChannelConfig:setParitybit(RxtxChannelConfig$Paritybit), ChannelMetadata:<init>(boolean), ForkJoinPool$WorkQueue:queueSize(), ChannelInboundHandlerAdapter:userEventTriggered(ChannelHandlerContext-Object), SerialPort:setSerialPortParams(int-int-int-int), AbstractByteBufAllocator:compositeHeapBuffer(int), AbstractEventExecutorGroup:shutdownNow(), SocksAddressType:<clinit>(), CodedInputStream:newInstance(byte[]-int-int), AbstractByteBuf:readableBytes(), HttpResponseDecoder:<clinit>(), ReplayingDecoderBuffer:writeBytes(InputStream-int), AbstractNioByteChannel:isOpen(), Base64Decoder:<init>(Base64Dialect), JavassistTypeParameterMatcherGenerator:typeName(Class), DefaultChannelGroupFuture:addListener(GenericFutureListener), DefaultSpdyHeaders:set(String-Object), UnpooledHeapByteBuf:setBytes(int-ByteBuffer), DefaultEventExecutor:confirmShutdown(), PooledUnsafeDirectByteBuf:_getLong(int), SelectedSelectionKeySet:<init>(), ChannelConfig:isAutoRead(), PooledHeapByteBuf$1:newObject(Recycler$Handle), ByteBuf:internalNioBuffer(int-int), PooledDirectByteBuf:checkDstIndex(int-int-int-int), JdkLogger:info(String-Object), CompositeByteBuf:_getByte(int), CompositeByteBuf:getBytes(int-byte[]-int-int), ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), SpdyHttpResponseStreamIdHandler:<init>(), AbstractReferenceCountedByteBuf:setMedium(int-int), MessageList:messages(), QueryStringDecoder:<init>(URI-Charset-int), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:valueOf(String), IdleState[]:clone(), UnreleasableByteBuf:readerIndex(int), ReplayingDecoderBuffer:setBytes(int-ByteBuffer), NioSocketChannel:parent(), IllegalReferenceCountException:<init>(Throwable), DefaultChannelProgressivePromise:sync(), ChannelMatchers:isNotInstanceOf(Class), ClassResolvers:weakCachingResolver(ClassLoader), ChunkedNioStream:isEndOfInput(), PooledUnsafeDirectByteBuf:capacity(), ReadOnlyUnsafeDirectByteBuf:_getShort(int), UnreleasableByteBuf:readBytes(ByteBuf-int-int), AbstractChannel:localAddress0(), MixedAttribute:setContent(ByteBuf), DefaultChannelGroup:toArray(Object[]), ByteBuf:copy(), ReadOnlyByteBuf:setBytes(int-ByteBuffer), ThreadPerChannelEventLoopGroup$1:<init>(ThreadPerChannelEventLoopGroup), ConcurrentHashMapV8:<init>(int), ChannelOutboundHandler:deregister(ChannelHandlerContext-ChannelPromise), ChannelInboundHandler:handlerRemoved(ChannelHandlerContext), LastHttpContent:<clinit>(), ContextBoundUnmarshallerProvider:<clinit>(), DefaultChannelProgressivePromise:<init>(Channel-EventExecutor), Logger:debug(String), MixedAttribute:retain(), ForkJoinPool:externalHelpComplete(CountedCompleter), SpdyHeaders:getMethod(int-SpdyHeadersFrame), IdleStateHandler:write(ChannelHandlerContext-Object-ChannelPromise), ForkJoinTask:pollNextLocalTask(), ThreadPerChannelEventLoopGroup:awaitTermination(long-TimeUnit), CompositeByteBuf:adjustMarkers(int), EmptyByteBuf:readShort(), SpdyOrHttpChooser:addSpdyHandlers(ChannelHandlerContext-int), WebSocketClientHandshaker07:verify(FullHttpResponse), AbstractBootstrap:option(ChannelOption-Object), PooledUnsafeDirectByteBuf:init(PoolChunk-long-int-int-int), DefaultChannelHandlerContext:writeAndFlush(Object), Striped64$ThreadHashCode:initialValue(), Log:info(Object-Throwable), Base64Dialect:values(), UnreleasableByteBuf:getShort(int), DefaultChannelGroupFuture$1:operationComplete(Future), GlobalEventExecutor:access$100(), DefaultPromise$3:run(), ThreadLocalRandom:nextDouble(double), ByteBufInputStream:readChar(), CombinedIterator:<init>(Iterator-Iterator), CorruptedFrameException:<init>(), SpdySettingsFrame:clearPreviouslyPersistedSettings(), AbstractByteBuf:setBytes(int-ByteBuffer), ConcurrentHashMapV8$ReduceValuesTask:compute(), PooledUnsafeDirectByteBuf:newInstance(int), AbstractInternalLogger:info(String-Throwable), DefaultChannelConfig:getWriteBufferHighWaterMark(), ByteToMessageCodec:checkForSharableAnnotation(), LogLevel:<init>(String-int-InternalLogLevel), MemoryAttribute:copy(), MessageToMessageCodec:handlerRemoved(ChannelHandlerContext), SocksProtocolVersion:fromByte(byte), SocksInitRequestDecoder:state(), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), PromiseTask:tryFailureInternal(Throwable), Snappy:readPreamble(ByteBuf), CharsetUtil$1:initialValue(), WebSocketServerProtocolHandshakeHandler:<init>(String-String-boolean), SwappedByteBuf:writeZero(int), DefaultChannelHandlerContext$17:<init>(DefaultChannelHandlerContext), ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Action), CompositeByteBuf:arrayOffset(), DefaultUdtChannelConfig:getSystemReceiveBufferSize(), ByteBuf:hashCode(), UnreleasableByteBuf:writeBytes(byte[]-int-int), ObjectEncoderOutputStream:writeDouble(double), WebSocket08FrameDecoder:<clinit>(), AbstractReferenceCountedByteBuf:toString(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ReferenceMap:get(Object), DefaultSctpChannelConfig:isSctpNoDelay(), MultithreadEventLoopGroup:next(), UnreleasableByteBuf:setZero(int-int), Slf4JLogger:warn(String-Object[]), DefaultChannelProgressivePromise:checkDeadLock(), Logger:log(String-Priority-Object-Throwable), PooledUnsafeDirectByteBuf:alloc(), InternalLogger:isWarnEnabled(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:firstComplete(), HttpHeaders:<clinit>(), DefaultLastHttpContent:duplicate(), GlobalTrafficShapingHandler:<init>(EventExecutor), RecyclableArrayList:<clinit>(), DefaultFutureListeners:add(GenericFutureListener), UnpooledHeapByteBuf:getLong(int), ByteBuf:readLong(), DefaultChannelPipeline:write(Object-ChannelPromise), OioSocketChannel:doClose(), HttpMessage:setDecoderResult(DecoderResult), HttpPostRequestEncoder$WrappedHttpRequest:getUri(), MultithreadEventExecutorGroup:isShuttingDown(), DefaultHttpMessage:getProtocolVersion(), ServerBootstrap:newOptionArray(int), CompositeByteBuf:addComponents0(int-ByteBuf[]), WebSocketClientHandshaker13:newWebsocketDecoder(), HttpContentDecoder:<init>(), SpdyHeaders$1:add(String-Object), SingleThreadEventExecutor:pendingTasks(), AbstractReferenceCountedByteBuf:release(), ReadOnlyByteBuf:_getUnsignedMedium(int), PooledDirectByteBuf:setBytes(int-ByteBuffer), SocksAddressType:valueOf(String), PooledByteBufAllocator:<init>(int-int-int-int), PoolSubpage:init(int), ConcurrentHashMapV8$SearchEntriesTask:advance(), PooledDirectByteBuf:setBytes(int-InputStream-int), Bootstrap:connect(), EventLoop:register(Channel-ChannelPromise), AbstractByteBuf:discardSomeReadBytes(), Snappy:validateChecksum(int-ByteBuf-int-int), DefaultEventExecutor:takeTask(), NioDatagramChannel:newSocket(InternetProtocolFamily), ConcurrentHashMapV8$KeySpliterator:trySplit(), NioSctpServerChannel:newSocket(), HttpResponseStatus:equals(Object), NioUdtProvider:channelUDT(Channel), Unpooled:compositeBuffer(), DefaultChannelPipeline:getContextOrDie(String), AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel), SocksCmdRequestDecoder$State:valueOf(String), AbstractDiskHttpData:getPostfix(), UnpooledUnsafeDirectByteBuf:_getInt(int), MessageLite$Builder:build(), Unpooled:copyLong(long), TrafficCounter:toString(), PoolArena:newChunk(int-int-int-int), DefaultProgressivePromise:notifyProgressiveListeners(long-long), ForkJoinTask$AdaptedRunnable:invoke(), ByteBufInputStream:available(), OioEventLoopGroup:<init>(), ThreadPerChannelEventLoop:isShuttingDown(), PooledUnsafeDirectByteBuf:idx(int), DefaultChannelGroupFuture:syncUninterruptibly(), GlobalEventExecutor:inEventLoop(), NioDatagramChannel:isConnected(), EmptyByteBuf:getBytes(int-ByteBuf), DefaultPromise:toStringBuilder(), AbstractChannel$AbstractUnsafe$1:run(), SslHandshakeCompletionEvent:<init>(Throwable), ForkJoinTask:cancel(boolean), Base64Dialect:valueOf(String), SpdyFrameEncoder$1:operationComplete(ChannelFuture), UnreleasableByteBuf:maxWritableBytes(), Logger:warn(String-Object), ReadOnlyUnsafeDirectByteBuf:internalNioBuffer(), ReplayingDecoderBuffer:writeBytes(byte[]), UnreleasableByteBuf:ensureWritable(int), OioDatagramChannel:localAddress(), ReadOnlyByteBuf:getBytes(int-OutputStream-int), Attribute:get(), HttpObjectDecoder:checkpoint(), RxtxChannel$RxtxUnsafe$1:<init>(RxtxChannel$RxtxUnsafe-ChannelPromise-boolean), ForkJoinPool:access$100(), JdkLogger:info(String-Throwable), UnreleasableByteBuf:nioBuffer(int-int), SwappedByteBuf:nioBufferCount(), ChunkedWriteHandler$PendingWrite:fail(Throwable), OioSctpServerChannel$1:run(), PongWebSocketFrame:isFinalFragment(), SpdyCodecUtil:isServerId(int), CompositeByteBuf:setDouble(int-double), ChannelFlushPromiseNotifier:increaseWriteCounter(long), ByteBuf:setBytes(int-ByteBuf-int-int), DefaultDatagramChannelConfig:getReceiveBufferSize(), RecyclableArrayList:<init>(Recycler$Handle-RecyclableArrayList$1), SocksCmdResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), AbstractByteBuf:writeChar(int), AbstractDiskHttpData:setContent(InputStream), TooLongFrameException:<init>(), ByteBuf:capacity(int), CommonsLogger:info(String-Object), AbstractByteBuf:readBytes(ByteBuf-int), ByteBuf:hasMemoryAddress(), CompositeByteBuf:ensureWritable(int), HttpVersion:isKeepAliveDefault(), DiskAttribute:copy(), MessageFormatter:isDoubleEscaped(String-int), DefaultOioSocketChannelConfig:setKeepAlive(boolean), AbstractByteBuf:ensureAccessible(), EmptyByteBuf:writeBytes(ByteBuf-int-int), SocksAddressType:<init>(String-int-byte), DefaultDatagramChannelConfig:getInterface(), ConcurrentHashMapV8:reduceEntriesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), SpdyHeaders:setScheme(int-SpdyHeadersFrame-String), CompositeByteBuf:order(), Recycler:newObject(Recycler$Handle), MessageList$1:<init>(), CompositeByteBuf:getBytes(int-ByteBuf), ConcurrentHashMapV8:access$000(), SpdyFrameDecoder$State:values(), SpdyHttpDecoder:putMessage(int-FullHttpMessage), ByteBufInputStream:readShort(), ByteInput:available(), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), EmptyByteBuf:getBytes(int-ByteBuf-int), ReadTimeoutHandler:handlerAdded(ChannelHandlerContext), CountedCompleter:quietlyCompleteRoot(), ReadOnlyByteBuf:setByte(int-int), ObjectEncoderOutputStream:close(), AbstractReferenceCounted:release(int), ChannelConfig:getOption(ChannelOption), ReferenceCounted:refCnt(), DiskFileUpload:<init>(String-String-String-String-Charset-long), HttpContentDecoder:decode(ByteBuf-List), SwappedByteBuf:equals(Object), UnreleasableByteBuf:alloc(), AbstractByteBuf:getUnsignedMedium(int), HashedWheelTimer$HashedWheelTimeout:isExpired(), UnreleasableByteBuf:markReaderIndex(), ByteBuf:writerIndex(), OioSctpServerChannel:config(), CombinedChannelDuplexHandler:handlerRemoved(ChannelHandlerContext), ResourceLeakException:<init>(), ConcurrentHashMapV8:elements(), AbstractByteBuf:forEachByte(int-int-ByteBufProcessor), LocalChannel:<init>(LocalServerChannel-LocalChannel), UnpooledHeapByteBuf:setLong(int-long), UnpooledHeapByteBuf:getUnsignedMedium(int), DefaultSpdySettingsFrame$Setting:setPersist(boolean), OioDatagramChannel:newSocket(), SingleThreadEventExecutor:cancelDelayedTasks(), SwappedByteBuf:readBytes(OutputStream-int), CompositeByteBuf:writeZero(int), PooledDirectByteBuf:_setInt(int-int), Slf4JLogger:warn(String-Throwable), SpdySession:numActiveStreams(), OioByteStreamChannel:available(), GlobalEventExecutor:pendingTasks(), SlicedByteBuf:_setLong(int-long), ByteToMessageCodec:acceptOutboundMessage(Object), EmptyByteBuf:setBytes(int-ByteBuffer), WebSocketServerHandshaker:selectSubprotocol(String), Unpooled:copiedBuffer(ByteBuf), HttpHeaders:getDateHeader(HttpMessage-String), DefaultChannelPipeline:close(ChannelPromise), SocksAuthRequestDecoder$State:values(), ReadOnlyUnsafeDirectByteBuf:addr(int), NioSocketChannel:getNioBufferArray(), ConcurrentHashMapV8:put(Object-Object), DefaultChannelPipeline:writeAndFlush(Object), AbstractDiskHttpData:getString(), DefaultServerSocketChannelConfig:setWriteBufferLowWaterMark(int), AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(ChannelFuture), Logger:trace(String-Throwable), UnreleasableByteBuf:readChar(), ByteBuf:memoryAddress(), Channel:write(Object), HttpPostRequestDecoder:destroy(), ChannelBufferByteOutput:write(byte[]), WebSocket08FrameDecoder$State:valueOf(String), ConcurrentHashMapV8$EntryIterator:advance(), WriteTimeoutHandler$2:operationComplete(Future), InternalAttribute:size(), DefaultFullHttpResponse:retain(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:getRawResult(), NioEventLoop:register(SelectableChannel-int-NioTask), ForkJoinPool:<init>(int), Striped64$HashCode:<clinit>(), DefaultSpdyGoAwayFrame:setStatus(SpdySessionStatus), PrematureChannelClosureException:<init>(String-Throwable), PoolArena$DirectArena:destroyChunk(PoolChunk), NioSocketChannel:selectionKey(), UnreleasableByteBuf:getDouble(int), ReplayingDecoderBuffer:getBytes(int-ByteBuf-int-int), Logger:isEnabledFor(Priority), ServerBootstrap$ServerBootstrapAcceptor$1:run(), DefaultCookie:getPath(), SpdyOrHttpChooser$SelectedProtocol:<clinit>(), FileUpload:getHttpDataType(), DefaultRxtxChannelConfig:getParitybit(), DefaultChannelPromise:addListeners(GenericFutureListener[]), DiskFileUpload:isInMemory(), RxtxChannel$RxtxUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), WebSocketHandshakeException:<init>(String), EmbeddedChannel:runPendingTasks(), ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object), SpdyRstStreamFrame:getStatus(), UnreleasableByteBuf:readBoolean(), MemoryFileUpload:isInMemory(), Slf4JLogger:trace(String-Throwable), Unpooled:copyMedium(int), Channel:metadata(), AbstractBootstrap:initAndRegister(), ThreadLocalRandom:nextInt(), HttpPostRequestDecoder:cleanMixedAttributes(), OioSocketChannel:doDisconnect(), SpdySession:closeRemoteSide(int), DefaultAttributeMap$DefaultAttribute:remove0(), ByteBuf:setByte(int-int), CompositeByteBuf:addComponent0(int-ByteBuf), FullHttpMessage:content(), WebSocketServerHandshaker:version(), Channel:close(), SpdyHeadersFrame:setInvalid(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), WebSocketClientHandshaker07:maxFramePayloadLength(), ChunkedNioStream:close(), ReadOnlyUnsafeDirectByteBuf:<clinit>(), DefaultCookie:setPath(String), ConcurrentHashMapV8$Traverser:advance(), ByteBuf:bytesBefore(byte), SimpleChannelInboundHandler:<init>(Class-boolean), DefaultHttpMessage:setProtocolVersion(HttpVersion), DefaultChannelHandlerContext:invokeWrite(Object-ChannelPromise), ByteBuf:nioBuffers(int-int), SpdyProtocolException:<init>(String), SctpInboundByteStreamHandler:decode(ChannelHandlerContext-SctpMessage-List), HashedWheelTimer$HashedWheelTimeout:cancel(), CompositeByteBuf:setIndex(int-int), HttpPostRequestEncoder:addBodyAttribute(String-String), ReplayingDecoderBuffer:getByte(int), NioEventLoop:isShuttingDown(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:compute(), NioUdtByteAcceptorChannel:javaChannel(), DefaultHttpMessage:<init>(HttpVersion), SimpleChannelInboundHandler:<init>(Class), AbstractByteBuf:getUnsignedInt(int), CommonsLogger:<init>(Log-String), DefaultSpdySynReplyFrame:setLast(boolean), DuplicatedByteBuf:getBytes(int-byte[]-int-int), DatagramPacket:copy(), DuplicatedByteBuf:capacity(int), SctpServerChannel:setOption(SctpSocketOption-Object), NioServerSocketChannel:newSocket(), UTF8Exception:<init>(String), PlatformDependent:newConcurrentHashMap(int), HttpPostRequestDecoder:parseBody(), ByteBuf:maxCapacity(), Unsafe:putObjectVolatile(Object-long-Object), Log4JLogger:info(String-Object[]), DefaultDatagramChannelConfig:setAllocator(ByteBufAllocator), CompleteFuture:removeListener(GenericFutureListener), UdtMessage:release(), DefaultHttpHeaders:hash(String), SpdyHeaders:removeHost(SpdyHeadersFrame), UnreleasableByteBuf:nioBufferCount(), ForkJoinPool$DefaultForkJoinWorkerThreadFactory:<init>(), MemoryFileUpload:getByteBuf(), CompositeByteBuf:writeInt(int), AbstractNioChannel:doFinishConnect(), WebSocketClientHandshaker07:newWebsocketDecoder(), ResourceLeakDetector:<init>(String), OioByteStreamChannel:isInputShutdown(), ReplayingDecoderBuffer:isReadable(), DefaultChannelHandlerContext:fireExceptionCaught(Throwable), HttpObjectDecoder:splitInitialLine(String), ThreadPerChannelEventLoopGroup:access$000(ThreadPerChannelEventLoopGroup), UnreleasableByteBuf:forEachByte(int-int-ByteBufProcessor), SSLEngineResult:bytesConsumed(), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), EmptyByteBuf:writeBoolean(boolean), SpdySessionStatus:getCode(), NioEventLoop:inEventLoop(), UnreleasableByteBuf:getByte(int), AbstractChannel:access$200(), AbstractEventExecutor$EventExecutorIterator:<init>(AbstractEventExecutor), ByteBuf:writeBytes(ByteBuf-int-int), Unpooled:copyDouble(double), DefaultAttributeMap$DefaultAttribute:<init>(Map-AttributeKey), CountedCompleter:internalPropagateException(Throwable), UnreleasableByteBuf:getUnsignedMedium(int), ReadOnlyByteBufferBuf:internalNioBuffer(int-int), SpdyHeaderBlockDecoder:reset(), ScheduledFutureTask:compareTo(Delayed), DefaultChannelHandlerContext:channel(), NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise), ForkJoinTask$AdaptedRunnableAction:getRawResult(), SslHandler$6:operationComplete(ChannelFuture), SpdyHeadersFrame:isLast(), SpdyHttpEncoder:encode(ChannelHandlerContext-HttpObject-List), DuplicatedByteBuf:memoryAddress(), ForkJoinTask$AdaptedRunnableAction:setRawResult(Object), ByteBuf:setDouble(int-double), ForkJoinTask:adapt(Callable), ByteBufProcessor:<clinit>(), DefaultHttpHeaders:validateHeaderValue(String), SpdyHeaders:add(String-Object), AbstractByteBuf:internalNioBuffer(int-int), HttpRequest:setDecoderResult(DecoderResult), AbstractNioChannel$NioUnsafe:finishConnect(), DefaultOioSocketChannelConfig:setTrafficClass(int), ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask), ByteBuf:getUnsignedInt(int), ChannelHandlerContext:disconnect(ChannelPromise), AbstractReferenceCountedByteBuf:writeDouble(double), SSLSession:getApplicationBufferSize(), DefaultSpdyHeaders:add(String-Iterable), ReplayingDecoderBuffer:getBytes(int-ByteBuf), ByteBufOutputStream:writeInt(int), DefaultOioSocketChannelConfig:getOptions(), DefaultChannelPipeline:fireChannelRead(Object), AbstractNioByteChannel:<init>(Channel-SelectableChannel), HttpResponseDecoder:createInvalidMessage(), NetUtil:convertToBytes(String-byte[]-int), ByteBuf:setBytes(int-ScatteringByteChannel-int), ReadOnlyByteBuf:alloc(), WebSocketServerHandshakerFactory:sendUnsupportedWebSocketVersionResponse(Channel), DefaultSpdyStreamFrame:setStreamId(int), WebSocket00FrameDecoder:<init>(), ChannelHandlerContext:fireChannelRegistered(), DefaultSpdySettingsFrame$Setting:getValue(), DefaultChannelPipeline:bind(SocketAddress-ChannelPromise), Log:warn(Object), LocalAddress:<init>(Channel), NioEventLoop:runAllTasks(long), CompactObjectInputStream:<init>(InputStream-ClassResolver), PoolChunk:usage(), Slf4JLogger:trace(String-Object[]), AbstractTrafficShapingHandler:doAccounting(TrafficCounter), ByteBuf:toString(int-int-Charset), NioServerSocketChannel:isActive(), AbstractByteBuf:capacity(), SwappedByteBuf:readBoolean(), SctpChannel:bindAddress(InetAddress), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), SlicedByteBuf:setBytes(int-ScatteringByteChannel-int), VoidChannelPromise:removeListeners(GenericFutureListener[]), DefaultRxtxChannelConfig:getOptions(Map-ChannelOption[]), MemoryAttribute:retain(int), PooledHeapByteBuf:_getInt(int), PingWebSocketFrame:duplicate(), DefaultSpdyPingFrame:toString(), SpdySession:acceptStream(int-byte-boolean-boolean-int-int), PoolArena:allocateHuge(PooledByteBuf-int), AbstractByteBuf:_setShort(int-int), TrafficCounter:resetCumulativeTime(), VoidChannelPromise:setFailure(Throwable), JdkLogger:name(), ConcurrentHashMapV8$ValueSpliterator:forEachRemaining(ConcurrentHashMapV8$Action), SpdySession$PriorityComparator:compare(Object-Object), ChannelPromiseNotifier:<init>(ChannelPromise[]), NioSctpServerChannel:doBind(SocketAddress), DiskAttribute:addContent(ByteBuf-boolean), SslHandler:getEncryptedPacketLength(ByteBuf), ReplayingDecoderBuffer:toString(int-int-Charset), OioSctpChannel:allLocalAddresses(), WebSocket08FrameEncoder:<init>(boolean), DefaultChannelHandlerContext$16:run(), ImmediateEventExecutor:terminationFuture(), SocksCmdRequestDecoder$State:<init>(String-int), AbstractByteBuf:setBytes(int-ByteBuf-int-int), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int), SwappedByteBuf:setDouble(int-double), PooledHeapByteBuf:getBytes(int-byte[]-int-int), WebSocketClientHandshaker08:newHandshakeRequest(), CloseWebSocketFrame:<init>(), ChannelHandlerContext:fireChannelRead(Object), ThreadLocalRandom:nextLong(long-long), HttpHeaders:setIntHeader(HttpMessage-String-Iterable), DefaultChannelPipeline$HeadHandler:write(ChannelHandlerContext-Object-ChannelPromise), ByteBuf:setBytes(int-InputStream-int), DefaultHttpRequest:getDecoderResult(), DefaultSpdyHeaders:hash(String), SwappedByteBuf:resetWriterIndex(), SocksAuthResponseDecoder$State:values(), ForkJoinTask$1:<init>(), DefaultChannelHandlerContext:fireChannelReadComplete(), HttpPostRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus), WebSocketServerProtocolHandshakeHandler$1:operationComplete(ChannelFuture), ByteBuf:writeMedium(int), AbstractNioChannel:unsafe(), Delimiters:lineDelimiter(), ConcurrentHashMapV8$KeyIterator:nextElement(), MessageToMessageCodec:<init>(Class-Class), SocksCmdStatus:valueOf(String), Slf4JLoggerFactory$1:write(int), ForkJoinPool$WorkQueue:cancelAll(), Unsafe:putObject(Object-long-Object), PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int-PooledUnsafeDirectByteBuf$1), AbstractChannel:newPromise(), ByteBufAllocator:compositeBuffer(), SocksCmdResponseDecoder:state(), DefaultSpdySettingsFrame:getIds(), AbstractReferenceCounted:retain(int), JdkLogger:fillCallerData(String-LogRecord), WebSocketFrame:rsv(), ForkJoinTask:doExec(), SlicedByteBuf:nioBufferCount(), SpdySynStreamFrame:getPriority(), ForkJoinTask$RunnableExecuteAction:rethrow(Throwable), FileRegion:release(), Channel:connect(SocketAddress-ChannelPromise), IdleState:<clinit>(), SpdyHeaders:setMethod(int-SpdyHeadersFrame-HttpMethod), SingleThreadEventExecutor:run(), ConcurrentHashMapV8$EntrySpliterator:advance(), WebSocketClientHandshaker08:newWebSocketEncoder(), DefaultSctpServerChannelConfig:setReceiveBufferSize(int), DefaultServerSocketChannelConfig:getReceiveBufferSize(), ChannelDuplexHandler:read(ChannelHandlerContext), FixedRecvByteBufAllocator$HandleImpl:<init>(int), DefaultOioSocketChannelConfig:setPerformancePreferences(int-int-int), SocksCmdRequest:encodeAsByteBuf(ByteBuf), DefaultSpdyGoAwayFrame:<init>(int-int), DefaultSctpChannelConfig:setOption(ChannelOption-Object), UnreleasableByteBuf:getLong(int), DefaultChannelConfig:<init>(Channel), ChannelOption:validate(Object), OioSocketChannel:isOpen(), AbstractOioChannel:eventLoop(), EmptyByteBuf:writerIndex(int), AbstractMemoryHttpData:setContent(InputStream), SocksRequestType[]:clone(), ByteArrayEncoder:encode(ChannelHandlerContext-Object-List), AbstractChannel:isActive(), GlobalEventExecutor:schedule(ScheduledFutureTask), ForkJoinTask$1:run(), DefaultSpdySettingsFrame:isPersistValue(int), PoolArena:allocateNormal(PooledByteBuf-int-int), WebSocketServerHandshaker08:selectSubprotocol(String), SctpMessage:protocolIdentifier(), SpdySession$StreamState:getPendingWrite(), EmptyByteBuf:setChar(int-int), CombinedChannelDuplexHandler:read(ChannelHandlerContext), SctpChannel:finishConnect(), ConcurrentHashMapV8$EntrySetView:addAll(Collection), AbstractReferenceCounted:<init>(), Base64:decodabet(Base64Dialect), CompositeByteBuf:getBytes(int-ByteBuffer), DefaultSpdyHeaders:remove0(int-int-String), SwappedByteBuf:getBytes(int-ByteBuffer), ReplayingDecoderBuffer:forEachByteDesc(int-int-ByteBufProcessor), PoolSubpage:<init>(PoolChunk-int-int-int-int), NioSctpServerChannel:isActive(), UnreleasableByteBuf:readUnsignedByte(), ConcurrentHashMapV8$EntrySetView:forEach(ConcurrentHashMapV8$Action), AbstractByteBuf:writeFloat(float), ThreadPerChannelEventLoop:takeTask(), WebSocketVersion:toHttpHeaderValue(), ReplayingDecoderBuffer:resetWriterIndex(), DefaultPromise:await(long-TimeUnit), DefaultPromise:removeListener(GenericFutureListener), SnappyFramedEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int), ChunkedWriteHandler:resumeTransfer(), TrafficCounter:access$100(TrafficCounter), UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int), Bootstrap:bind(int), DefaultChannelConfig:validate(ChannelOption-Object), QueryStringDecoder:<init>(String-Charset-boolean), ChunkedWriteHandler:access$000(ChunkedWriteHandler-ChannelHandlerContext), SctpChannel:getAllLocalAddresses(), HttpVersion:valueOf(String), ForkJoinTask$RunnableExecuteAction:setRawResult(Object), UnpooledDirectByteBuf:_setLong(int-long), IdleStateHandler:access$300(IdleStateHandler), EmptyArrays:<init>(), ReadOnlyByteBufferBuf:setBytes(int-ByteBuffer), ConcurrentHashMapV8$ObjectToLong:apply(Object), OioDatagramChannel:doClose(), ByteBuf:writeBytes(ByteBuf), HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest), RecyclableArrayList:add(Object), DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean), ReplayingDecoderBuffer:setBytes(int-byte[]-int-int), SocksResponse:<init>(SocksResponseType), MixedFileUpload:duplicate(), SocksSubnegotiationVersion:<clinit>(), ChannelFuture:channel(), ChannelMatchers:<init>(), UnpooledDirectByteBuf:getBytes(int-ByteBuf-int-int), ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), MessageList:ensureCapacity(int), ReadOnlyByteBuf:getUnsignedMedium(int), AbstractChannel:doDisconnect(), OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise), MessageFormatter:isEscapedDelimeter(String-int), SpdySession:removePendingWrite(int), ReferenceCountUtil:<init>(), AbstractTrafficShapingHandler:configure(long-long-long), SingleThreadEventExecutor:<init>(EventExecutorGroup-ThreadFactory-boolean), HttpServerCodec:<init>(int-int-int), ScheduledFutureTask:deadlineNanos(long), SpdyHttpHeaders:removeAssociatedToStreamId(HttpMessage), ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long), EmbeddedChannel:writeOutbound(Object[]), DefaultEventExecutorGroup:<init>(int-ThreadFactory), DefaultChannelHandlerContext:fireChannelRegistered(), SwappedByteBuf:getFloat(int), SocksInitResponseDecoder$State:valueOf(String), AbstractNioChannel$AbstractNioUnsafe:<clinit>(), CompositeByteBuf:readBytes(byte[]), SpdyFrameDecoder:readHeaderBlockFrame(ByteBuf), PoolChunk:runOffset(int), ZlibCodecFactory:newZlibEncoder(int-int-int-byte[]), DefaultChannelPipeline:replace(ChannelHandler-String-ChannelHandler), PooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int), Unpooled:copyInt(int), ConcurrentHashMapV8$MapReduceValuesToLongTask:firstComplete(), DefaultSpdySynReplyFrame:setStreamId(int), SpdyHeaders:contains(String), ByteBuf:writeInt(int), CompleteChannelFuture:sync(), SnappyFramedDecoder$ChunkType:<clinit>(), ReadOnlyByteBufferBuf:_setByte(int-int), CommonsLogger:isDebugEnabled(), DuplicatedByteBuf:nioBuffers(int-int), LocalEventLoop:confirmShutdown(), ByteBuf:equals(Object), RtspRequestDecoder:createMessage(String[]), SpdyFrameEncoder:<init>(int), ByteBufAllocator:heapBuffer(int-int), SocksCommonUtils:<clinit>(), CompositeByteBuf:getBytes(int-GatheringByteChannel-int), HttpRequestDecoder:<init>(int-int-int), AbstractInternalLogger:trace(String-Object[]), Slf4JLogger:warn(String-Object-Object), FullHttpMessage:setDecoderResult(DecoderResult), DefaultHttpHeaders:toString(Object), DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress), WebSocket00FrameDecoder:actualReadableBytes(), ProtobufDecoder:<init>(MessageLite), DatagramPacket:duplicate(), SpdyHeaderBlockEncoder:newInstance(int-int-int-int), HttpMethod:<init>(String), SpdySynStreamFrame:getAssociatedToStreamId(), EmptyByteBuf:readDouble(), DefaultChannelHandlerContext:voidPromise(), ForkJoinTask:getQueuedTaskCount(), ConcurrentHashMapV8$SearchValuesTask:getRawResult(), MixedFileUpload:getHttpDataType(), AbstractChannel$AbstractUnsafe:voidPromise(), HttpPostRequestEncoder:encodeAttribute(String-Charset), AbstractByteBuf:_setMedium(int-int), EventLoopGroup:register(Channel-ChannelPromise), Log4JLogger:info(String), Bootstrap:init(Channel), MultithreadEventExecutorGroup:children(), Snappy$State[]:clone(), FileUpload:setCharset(Charset), NioDatagramChannel:javaChannel(), NioDatagramChannel:leaveGroup(InetAddress), ChannelInboundHandler:userEventTriggered(ChannelHandlerContext-Object), HashedWheelTimer:<init>(ThreadFactory), AbstractNioChannel:pipeline(), EmptyByteBuf:setZero(int-int), CommonsLogger:debug(String-Object[]), AbstractReferenceCountedByteBuf:writeShort(int), MessageToMessageEncoder:write(ChannelHandlerContext-Object-ChannelPromise), PongWebSocketFrame:<init>(ByteBuf), LocalServerChannel:localAddress(), ChannelFlushPromiseNotifier$DefaultFlushCheckpoint:<init>(long-ChannelPromise), LocalEventLoop:run(), MultithreadEventExecutorGroup:shutdownGracefully(long-long-TimeUnit), AbstractByteBuf:equals(Object), EmptyByteBuf:toString(Charset), SwappedByteBuf:readBytes(int), DefaultHttpDataFactory:cleanAllHttpDatas(), DuplicatedByteBuf:_setMedium(int-int), DefaultHttpResponse:appendHeaders(StringBuilder), Logger:isWarnEnabled(), ConcurrentHashMapV8$MapReduceValuesToIntTask:addToPendingCount(int), SpdySession$PriorityComparator:<init>(SpdySession), ChannelMatchers$1:<init>(), UnreleasableByteBuf:<init>(ByteBuf), DefaultChannelConfig:setAllocator(ByteBufAllocator), Unsafe:getLong(Object-long), DefaultSpdyRstStreamFrame:getStatus(), DefaultUdtChannelConfig:setReuseAddress(boolean), ReplayingDecoderBuffer:getDouble(int), SslHandler:close(ChannelHandlerContext-ChannelPromise), ChannelTrafficShapingHandler:<init>(long-long), ForkJoinTask$RunnableExecuteAction:internalPropagateException(Throwable), SwappedByteBuf:writeDouble(double), InterfaceHttpData$HttpDataType:values(), AbstractByteBuf:nioBufferCount(), SocksCmdResponseDecoder$State:ordinal(), AbstractServerChannel$DefaultServerUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), HttpHeaders$1:<init>(), ConcurrentHashMapV8:putVal(Object-Object-boolean), SslHandler$4:operationComplete(Future), NetUtil:<init>(), JdkLogger:<init>(Logger), SingleThreadEventExecutor:inEventLoop(), AbstractByteBuf:checkDstIndex(int-int-int-int), HttpPostRequestEncoder$WrappedFullHttpRequest:setUri(String), EmbeddedChannel$LastInboundHandler:exceptionCaught(ChannelHandlerContext-Throwable), CorruptedFrameException:<init>(String), HttpRequestEncoder:encodeAscii(String-ByteBuf), HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion), DiskAttribute:<init>(String), DefaultSpdySettingsFrame:setValue(int-int-boolean-boolean), DefaultPromise:access$300(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), DiskAttribute:setContent(ByteBuf), Bootstrap:<init>(), ConcurrentHashMapV8$ReduceKeysTask:invoke(), WebSocketServerHandshaker07:maxFramePayloadLength(), DuplicatedByteBuf:forEachByteDesc(int-int-ByteBufProcessor), DefaultChannelHandlerContext:teardownAll(), Base64:encode(ByteBuf-int-int-boolean), HttpHeaders:validateHeaderName(String), UniqueName:validateArgs(Object[]), EmptyByteBuf:writeDouble(double), ForkJoinPool:tryAddWorker(), AbstractByteBuf:readChar(), SocksAuthScheme:<clinit>(), CompositeByteBuf:nioBuffers(int-int), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), WebSocketFrame:<init>(boolean-int-ByteBuf), MixedFileUpload:retain(), UnreleasableByteBuf:order(), SctpMessage:hashCode(), ReadOnlyByteBuf:isDirect(), HashedWheelTimer:createWheel(int), PlatformDependent:hasUnsafe(), ChannelBufferByteInput:read(), ThreadPerChannelEventLoop:confirmShutdown(), ForkJoinTask:peekNextLocalTask(), ChannelGroupException:iterator(), CountedCompleter$1:<init>(), SwappedByteBuf:readUnsignedShort(), HttpObjectEncoder:<init>(), EmptyByteBuf:writeBytes(ByteBuf), HttpHeaders:set(String-Object), AbstractByteBufAllocator:heapBuffer(), SpdySession$StreamState:isRemoteSideClosed(), PoolChunk:parentIdx(int), MixedAttribute:getString(Charset), DuplicatedByteBuf:_setLong(int-long), ChannelConfig:getWriteSpinCount(), PlatformDependent0:copyMemory(long-long-long), ReadOnlyByteBuf:capacity(int), SwappedByteBuf:setZero(int-int), DefaultChannelHandlerContext$11:run(), BinaryWebSocketFrame:<init>(ByteBuf), SnappyFramedDecoder$ChunkType:<init>(String-int), ChunkedInput:isEndOfInput(), SwappedByteBuf:getBytes(int-GatheringByteChannel-int), HashedWheelTimer$HashedWheelTimeout:expire(), ReadOnlyByteBufferBuf:setBytes(int-byte[]-int-int), UnreleasableByteBuf:writeBytes(ByteBuffer), HttpObjectAggregator:setMaxCumulationBufferComponents(int), ForkJoinTask:readObject(ObjectInputStream), PooledUnsafeDirectByteBuf:checkIndex(int), SpdyHeaders:setStatus(int-SpdyHeadersFrame-HttpResponseStatus), PoolChunkList:free(PoolChunk-long), AbstractByteBuf:setChar(int-int), ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-int-String), LengthFieldBasedFrameDecoder:failIfNecessary(boolean), SpdyHeaderBlockZlibDecoder:reset(), SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-Object-List), WebSocketClientProtocolHandler:handlerAdded(ChannelHandlerContext), ForkJoinWorkerThread:onStart(), SwappedByteBuf:readBytes(ByteBuffer), SocksInitRequest:encodeAsByteBuf(ByteBuf), EmbeddedChannel:<init>(ChannelHandler[]), UnpooledUnsafeDirectByteBuf:_setInt(int-int), CompositeByteBuf:addComponents(int-Iterable), EmptyByteBuf:setBytes(int-ScatteringByteChannel-int), SocksAuthStatus:valueOf(String), RxtxChannelConfig$Paritybit[]:clone(), CompositeByteBuf:readerIndex(int), Unpooled:copiedBuffer(ByteBuf[]), ReadOnlyByteBuf:<init>(ByteBuf), ReadOnlyByteBufferBuf:getBytes(int-OutputStream-int), NioUdtAcceptorChannel:<init>(TypeUDT), Signal:expect(Signal), InternalAttribute:setValue(String-int), HttpObjectDecoder:<init>(), ByteBufHolder:content(), WebSocketClientHandshaker00:expectedSubprotocol(), JdkLogger:info(String), ChunkedWriteHandler$5:operationComplete(Future), DefaultChannelHandlerContext:read(), ReadOnlyByteBufferBuf:copy(int-int), ByteBuf:readDouble(), DefaultAddressedEnvelope:release(), DefaultSocketChannelConfig:getOptions(Map-ChannelOption[]), JavassistTypeParameterMatcherGenerator:<clinit>(), ResourceLeakDetector:access$510(ResourceLeakDetector), MultithreadEventLoopGroup:register(Channel), ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object), ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), PlatformDependent0:arrayBaseOffset(), EmptyByteBuf:checkIndex(int-int), DefaultDatagramChannelConfig:setSendBufferSize(int), CompositeByteBuf:writerIndex(), DefaultSpdyHeaders:isEmpty(), CompositeByteBuf:setBytes(int-byte[]), MultithreadEventExecutorGroup:iterator(), ForkJoinPool:quiesceCommonPool(), AbstractByteBuf:checkIndex(int), MixedAttribute:getHttpDataType(), ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]), Base64Encoder:encode(ChannelHandlerContext-Object-List), WebSocket13FrameEncoder:<init>(boolean), SingleThreadEventExecutor:confirmShutdown(), SpdyFrameDecoder:fireProtocolException(ChannelHandlerContext-String), DefaultChannelPromise:trySuccess(Object), DefaultLastHttpContent:appendHeaders(StringBuilder), Unsafe:arrayIndexScale(Class), Promise:trySuccess(Object), SslHandler$LazyChannelPromise:isDone(), ConcurrentHashMapV8$MapReduceMappingsTask:compute(), PoolArena:allocate(PoolThreadCache-PooledByteBuf-int), IdleStateHandler:access$500(IdleStateHandler), SwappedByteBuf:toString(int-int-Charset), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf), ReadOnlyByteBufferBuf:hasArray(), EmptyByteBuf:equals(Object), DefaultSpdyHeaders:add0(int-int-String-String), Logger:error(String), UnpooledHeapByteBuf:setBytes(int-ByteBuf-int-int), MixedFileUpload:getFilename(), DefaultDatagramChannelConfig:validate(ChannelOption-Object), ByteBufInputStream:readLong(), MixedFileUpload:setCharset(Charset), DiskFileUpload:retain(int), MemoryAttribute:compareTo(InterfaceHttpData), ByteBufInputStream:reset(), RtspResponseEncoder:encodeAscii(String-ByteBuf), SimpleChannelInboundHandler:<init>(boolean), WebSocket00FrameDecoder:decodeTextFrame(ChannelHandlerContext-ByteBuf), ForkJoinPool:helpJoinOnce(ForkJoinPool$WorkQueue-ForkJoinTask), MixedAttribute:getByteBuf(), AbstractNioChannel:access$200(AbstractNioChannel), ForkJoinPool:tryExternalUnpush(ForkJoinTask), SpdyHttpHeaders:removeScheme(HttpMessage), DefaultEventExecutorGroup:<init>(int), FailedChannelFuture:sync(), ByteBufInputStream:readUnsignedByte(), ChannelDuplexHandler:userEventTriggered(ChannelHandlerContext-Object), AbstractChannel:doClose(), ScheduledFutureTask:deadlineNanos(), MessageList:size(), ReadOnlyByteBuf:getInt(int), LoggingHandler:<init>(String-LogLevel), DiskAttribute:getValue(), DefaultChannelConfig:getOptions(Map-ChannelOption[]), ConcurrentHashMapV8:searchValues(long-ConcurrentHashMapV8$Fun), EmptyByteBuf:readBytes(int), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), AbstractBootstrap$BootstrapChannelFactory:newChannel(), CompositeByteBuf:internalComponent(int), DefaultUdtChannelConfig:getSendBufferSize(), AbstractEventExecutorGroup:next(), ReplayingDecoderBuffer:refCnt(), GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long), HttpMessage:getProtocolVersion(), HttpResponseStatus:<init>(int-String), CompositeByteBuf:readBytes(byte[]-int-int), PooledDirectByteBuf:setBytes(int-ByteBuf-int-int), ConcurrentHashMapV8:reduce(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), PromiseTask:setFailure(Throwable), HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent-HttpPostRequestEncoder$1), PooledHeapByteBuf:capacity(), SpdyHeaders$1:names(), CompositeByteBuf:allocBuffer(int), EmptyByteBuf:retain(), DefaultChannelPipeline:read(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), DecoderResult:isSuccess(), SocksAuthResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), JdkLogger:isWarnEnabled(), SwappedByteBuf:readBytes(GatheringByteChannel-int), AbstractNioByteChannel:setInputShutdown(), DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel), ObjectEncoderOutputStream:writeInt(int), EmbeddedEventLoop:execute(Runnable), ForkJoinTask$AdaptedCallable:exec(), DefaultSpdySynStreamFrame:isLast(), ChannelMatchers$InvertMatcher:matches(Channel), ProtobufDecoder:<clinit>(), DuplicatedByteBuf:_getShort(int), Unsafe:getInt(Object-long), SocksAuthResponseDecoder$1:<clinit>(), ConcurrentHashMapV8:keySet(), Attribute:compareTo(Object), ChunkedWriteHandler$2:<init>(ChunkedWriteHandler-ChannelHandlerContext-Throwable), NioSocketChannel:newPromise(), HttpVersion:majorVersion(), ObjectDecoderInputStream:<init>(InputStream-int), MessageList:newInstance(), FileUpload:delete(), UnpooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int), LastHttpContent$1:<init>(), ConcurrentHashMapV8:size(), ConcurrentHashMapV8$MapReduceValuesToLongTask:compute(), LocalChannel$5:run(), ByteBufOutputStream:writeUTF(String), PlatformDependent:getLong(long), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), DefaultSocketChannelConfig:setOption(ChannelOption-Object), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:addToPendingCount(int), UnpooledDirectByteBuf:internalNioBuffer(int-int), ConcurrentHashMapV8$MapReduceEntriesToLongTask:invoke(), ChannelOutboundHandler:write(ChannelHandlerContext-Object-ChannelPromise), AbstractOioMessageChannel:<init>(Channel), SocksAuthRequestDecoder:<init>(), NioSocketChannel:remoteAddress0(), DefaultSpdySettingsFrame:getValue(int), ConcurrentHashMapV8$KeySetView:containsAll(Collection), UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer), PooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int), WebSocketFrame:release(), UdtChannelConfig:getReceiveBufferSize(), CompatibleMarshallingDecoder:decode(ChannelHandlerContext-ByteBuf-List), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), DefaultSctpServerChannelConfig:setWriteBufferHighWaterMark(int), ChannelConfig:getMaxMessagesPerRead(), HttpContentEncoder:<clinit>(), SwappedByteBuf:release(), ThreadPerChannelEventLoopGroup:nextChild(), SlicedByteBuf:capacity(int), NioServerSocketChannel:doBind(SocketAddress), SwappedByteBuf:writeFloat(float), AbstractTrafficShapingHandler:<init>(long), CompositeByteBuf:writeBytes(ByteBuffer), DefaultChannelHandlerContext$5:run(), ReadOnlyByteBufferBuf:_setShort(int-int), IdleStateHandler$AllIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), ReferenceCountUtil:retain(Object-int), ByteBufOutputStream:buffer(), SctpChannel:getRemoteAddresses(), AbstractNioChannel:isOpen(), HttpHeaders:getIntHeader(HttpMessage-String-int), HttpHeaderDateFormat:parse(String), DefaultChannelHandlerContext:access$1200(DefaultChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), SpdySettingsFrame:setClearPreviouslyPersistedSettings(boolean), UdtChannelOption:<clinit>(), LogLevel:<clinit>(), HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpObjectAggregator:handlerRemoved(ChannelHandlerContext), SpdyHeaderBlockJZlibEncoder:<init>(int-int-int-int), UTF8Output:write(ByteBuf), MemoryFileUpload:hashCode(), LongAdder:writeObject(ObjectOutputStream), DefaultPromise:notifyListeners(), LoggingHandler:channelRegistered(ChannelHandlerContext), JdkZlibEncoder:<init>(byte[]), ForkJoinPool:externalPush(ForkJoinTask), VoidChannelPromise:removeListener(GenericFutureListener), DefaultSocketChannelConfig:getSendBufferSize(), AbstractEventExecutor:inEventLoop(Thread), NioSocketChannel:doFinishConnect(), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:addToPendingCount(int), RxtxChannelConfig$Paritybit:<init>(String-int-int), HttpObjectDecoder:actualReadableBytes(), AbstractByteBuf:_getUnsignedMedium(int), SctpMessageCompletionHandler:<init>(), AbstractNioMessageChannel$NioMessageUnsafe:<clinit>(), FullHttpRequest:getMethod(), HttpObjectEncoder:encodeInitialLine(ByteBuf-HttpMessage), HttpHeaderDateFormat$1:<init>(), SpdySessionHandler$ClosingChannelFutureListener:operationComplete(Future), AbstractByteBuf:readBytes(byte[]), ReplayingDecoderBuffer:readerIndex(), Unpooled:wrappedBuffer(ByteBuffer), SocksProtocolVersion:values(), SwappedByteBuf:retain(), OioSctpServerChannel:doConnect(SocketAddress-SocketAddress), SpdySessionHandler:write(ChannelHandlerContext-Object-ChannelPromise), EventExecutor:schedule(Callable-long-TimeUnit), ChunkedNioStream:<init>(ReadableByteChannel-int), DefaultUdtServerChannelConfig:setOption(ChannelOption-Object), DefaultChannelHandlerContext$9:run(), DefaultHttpRequest:setUri(String), DefaultSocketChannelConfig:getOption(ChannelOption), NioSocketChannel:javaChannel(), Log4JLogger:trace(String-Object), HttpHeaders$1:add(String-Object), UnpooledUnsafeDirectByteBuf:setBytes(int-InputStream-int), AbstractByteBuf:writeBytes(byte[]), SpdySessionStatus:compareTo(Object), ContextBoundUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), ForkJoinTask:quietlyJoin(), LocalServerChannel:unsafe(), PlatformDependent0:throwException(Throwable), JdkZlibEncoder:<init>(ZlibWrapper), Unpooled:wrappedBuffer(byte[][]), SwappedByteBuf:readUnsignedInt(), AbstractByteBuf:writeBytes(ByteBuffer), LocalChannel:<clinit>(), Snappy:encodeCopyWithOffset(ByteBuf-int-int), SpdyCodecUtil:getSignedInt(ByteBuf-int), ReplayingDecoderBuffer:release(int), SocksResponseType:<init>(String-int), OioSctpServerChannel$2:run(), ChannelBufferByteOutput:write(int), AbstractDiskHttpData:addContent(ByteBuf-boolean), LocalAddress:equals(Object), AbstractFuture:get(), NioEventLoop:newTaskQueue(), ReadOnlyByteBuf:slice(int-int), CloseWebSocketFrame:duplicate(), JZlibEncoder:<init>(int-byte[]), AbstractByteBuf:getChar(int), NioSctpServerChannel:config(), ReplayingDecoderBuffer:nioBuffers(int-int), UnpooledDirectByteBuf:_setByte(int-int), ByteToMessageCodec$1:acceptOutboundMessage(Object), MultithreadEventExecutorGroup:newDefaultThreadFactory(), AbstractChannel$AbstractUnsafe$5:<init>(AbstractChannel$AbstractUnsafe-Exception), IdleStateHandler$ReaderIdleTimeoutTask:run(), CommonsLogger:trace(String-Object), LocalChannel:isOpen(), SpdyHeaders:getHost(SpdyHeadersFrame), SwappedByteBuf:retain(int), AbstractServerChannel:remoteAddress(), ServerBootstrap:options(), ConcurrentHashMapV8$MapReduceValuesTask:invoke(), LoggingHandler:channelActive(ChannelHandlerContext), PooledHeapByteBuf:setBytes(int-InputStream-int), ReadOnlyByteBufferBuf:_getShort(int), ConcurrentHashMapV8$MapReduceKeysToIntTask:fork(), ThreadPerChannelEventLoop:updateLastExecutionTime(), DefaultSpdyGoAwayFrame:getLastGoodStreamId(), DefaultDatagramChannelConfig:setTrafficClass(int), ReadOnlyByteBufferBuf:deallocate(), SingleThreadEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), ChannelPromiseAggregator:operationComplete(Future), LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), AbstractReferenceCountedByteBuf:readBytes(byte[]-int-int), DefaultChannelProgressivePromise:addListener(GenericFutureListener), SpdyHttpDecoder:getMessage(int), RecvByteBufAllocator$Handle:record(int), AbstractNioChannel$NioUnsafe:voidPromise(), InternalAttribute:<init>(Charset), HttpClientCodec:<init>(int-int-int), PoolChunkList:remove(PoolChunk), MixedAttribute:getChunk(int), CompositeByteBuf:consolidate(int-int), PlatformDependent:hasJavassist0(), ForkJoinPool$2:<init>(), AbstractChannel$AbstractUnsafe$5:run(), ChannelInboundHandlerAdapter:channelRead(ChannelHandlerContext-Object), DefaultRxtxChannelConfig:getDatabits(), DefaultChannelPromise:setSuccess(Object), MemoryAttribute:compareTo(Object), VoidChannelPromise:awaitUninterruptibly(long), DefaultServerSocketChannelConfig:setAutoRead(boolean), UnpooledDirectByteBuf:maxCapacity(), SlicedByteBuf:getBytes(int-byte[]-int-int), ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8), SnappyFramedEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), HttpVersion:<clinit>(), ReadOnlyByteBuf:duplicate(), CompositeByteBuf:addComponents(ByteBuf[]), SingleThreadEventExecutor:shutdown(), DefaultChannelHandlerContext:invokeDeregister0(ChannelPromise), DefaultSpdyDataFrame:validate(ByteBuf), HttpContent:content(), Snappy:decodeCopyWith2ByteOffset(byte-ByteBuf-ByteBuf-int), DefaultChannelConfig:setOptions(Map), UnpooledHeapByteBuf:setShort(int-int), AbstractReferenceCountedByteBuf:writerIndex(int), WebSocketClientHandshaker13:uri(), DefaultRxtxChannelConfig:setWriteBufferHighWaterMark(int), EventExecutor:isShuttingDown(), MessageToMessageCodec:channelRead(ChannelHandlerContext-Object), HttpObjectAggregator:<init>(int), CompleteFuture:removeListeners(GenericFutureListener[]), EmptyByteBuf:readUnsignedInt(), JZlibEncoder:<init>(ZlibWrapper-int-int-int), AbstractByteBuf:readSlice(int), QueryStringEncoder:addParam(String-String), SelectedSelectionKeySet:flip(), ReplayingDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), SpdySession$StreamState:putPendingWrite(Object), Log:debug(Object-Throwable), PromiseTask:run(), CombinedIterator:remove(), SocksResponseType:<clinit>(), DuplicatedByteBuf:setBytes(int-ByteBuf-int-int), PoolSubpage:addToPool(), ConcurrentHashMapV8$ForEachValueTask:compute(), MessageList:<init>(Recycler$Handle-int), OioByteStreamChannel:<clinit>(), SpdyHeaders:iterator(), SpdyHttpDecoder:<init>(int-int-Map), ConcurrentHashMapV8$ForEachTransformedKeyTask:advance(), HttpPostRequestEncoder:<init>(HttpRequest-boolean), ReplayingDecoderBuffer:unwrap(), ByteBufOutputStream:writeDouble(double), SwappedByteBuf:setBytes(int-byte[]-int-int), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:fork(), MarshallingDecoder:<init>(UnmarshallerProvider), AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf), PongWebSocketFrame:<init>(), PooledUnsafeDirectByteBuf:setIndex(int-int), DefaultChannelPipeline:close(), LocalChannel:doBeginRead(), TextWebSocketFrame:<init>(), NioUdtMessageRendezvousChannel:javaChannel(), MixedFileUpload:compareTo(InterfaceHttpData), GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long), Recycler$Stack:newArray(int), AbstractOioChannel$DefaultOioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), ReferenceCounted:release(int), ByteBuf:clear(), MessageList:<init>(Recycler$Handle), AbstractOioMessageChannel:pipeline(), CompositeByteBuf:numComponents(), SwappedByteBuf:setBoolean(int-boolean), Slf4JLogger:error(String-Object[]), DiskFileUpload:equals(Object), SctpMessage:isComplete(), NioSctpChannel:<clinit>(), DefaultChannelPipeline:remove(Class), ChannelFlushPromiseNotifier:notifyFlushFutures(), ByteBufAllocator:buffer(), DefaultSpdyDataFrame:release(int), ScheduledFutureTask:run(), CommonsLogger:warn(String), DefaultSpdyHeaders:index(int), PoolChunk:allocateRunSimple(int-int-int), DefaultSpdySettingsFrame:setPersisted(int-boolean), AbstractReferenceCounted:<clinit>(), ZlibCodecFactory:newZlibEncoder(ZlibWrapper), DefaultChannelGroupFuture:access$400(DefaultChannelGroupFuture), DefaultOioServerSocketChannelConfig:setBacklog(int), WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int), SpdySettingsFrame:setValue(int-int-boolean-boolean), ChannelOutboundBuffer:getWritable(), ReferenceMap:<init>(Map), JdkLogger:log(String-Level-String-Throwable), PoolSubpage:findNextAvailable(), UnreleasableByteBuf:writeBytes(ByteBuf-int-int), EmbeddedEventLoop:next(), DefaultChannelHandlerContext$10:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), DefaultChannelHandlerContext:bind(SocketAddress-ChannelPromise), DefaultSctpServerChannelConfig:setWriteBufferLowWaterMark(int), SocksAuthScheme:<init>(String-int-byte), HttpPostRequestEncoder:getNewMultipartDelimiter(), ConcurrentHashMapV8$CollectionView:isEmpty(), AbstractChannel:remoteAddress0(), JdkLogger:error(String-Object[]), SpdyFrameDecoder$State[]:clone(), CountedCompleter:compareAndSetPendingCount(int-int), AbstractReferenceCountedByteBuf:retain(int), ConcurrentHashMapV8:putIfAbsent(Object-Object), DefaultThreadFactory:<init>(Class-int), OioSctpChannel:remoteAddress(), HashedWheelTimer:newTimeout(TimerTask-long-TimeUnit), Attribute:getString(Charset), JavassistTypeParameterMatcherGenerator:appendClassPath(ClassPath), MessageFormatter:charArrayAppend(StringBuffer-char[]), UnreleasableByteBuf:forEachByteDesc(int-int-ByteBufProcessor), UnpooledHeapByteBuf:setBytes(int-InputStream-int), LocalServerChannel:eventLoop(), OioSocketChannel:config(), PooledUnsafeDirectByteBuf:_getShort(int), DefaultHttpResponse:setProtocolVersion(HttpVersion), DefaultChannelPipeline:connect(SocketAddress-SocketAddress-ChannelPromise), ChunkedWriteHandler:discard(Throwable), AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int), HttpObjectDecoder$1:<clinit>(), SlicedByteBuf:writerIndex(int), RecyclableArrayList:size(), ObjectDecoderInputStream:<init>(InputStream), PooledByteBuf:ensureAccessible(), DefaultPromise:isCancelled(), SocksMessageEncoder:encode(ChannelHandlerContext-SocksMessage-ByteBuf), ReplayingDecoderBuffer:readByte(), AbstractDiskHttpData:readFrom(File), HttpPostRequestEncoder$EncoderMode:<init>(String-int), MixedFileUpload:setContentTransferEncoding(String), AbstractReferenceCountedByteBuf:readBytes(ByteBuffer), ReadTimeoutHandler:channelRead(ChannelHandlerContext-Object), LoggerFactory:getILoggerFactory(), EmptyByteBuf:getUnsignedInt(int), OioSctpServerChannel$1:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), PoolArena$HeapArena:<init>(PooledByteBufAllocator-int-int-int-int), AbstractOioByteChannel:doWriteFileRegion(FileRegion), OioSctpServerChannel:<init>(SctpServerChannel), SocksSubnegotiationVersion[]:clone(), Slf4JLogger:trace(String-Object), ChannelException:setStackTrace(StackTraceElement[]), RtspMethods:valueOf(String), ReplayingDecoderBuffer:getBytes(int-byte[]-int-int), DiskFileUpload:getContentType(), ReplayingDecoderBuffer:internalNioBuffer(int-int), ByteBuf:writeBytes(ByteBuffer), CountedCompleter:<init>(CountedCompleter-int), NioServerSocketChannel:localAddress0(), DefaultSpdyRstStreamFrame:setStreamId(int), ConcurrentHashMapV8$MapReduceMappingsTask:addToPendingCount(int), ForkJoinPool$ManagedBlocker:block(), AbstractInternalLogger:warn(String-Object[]), RtspObjectDecoder:<init>(int-int-int), DefaultSpdyHeaders:toString(Object), HttpPostRequestDecoder:loadFieldMultipartStandard(String), AbstractNioMessageChannel:parent(), Logger:debug(String-Throwable), SwappedByteBuf:readChar(), Logger:info(String-Throwable), AbstractChannel:access$500(AbstractChannel), SctpOutboundByteStreamHandler:<init>(int-int), DefaultChannelHandlerContext:fireChannelRead(Object), CompositeByteBuf:consolidate(), InternalLogger:warn(String-Object-Object), ChunkedNioStream:<init>(ReadableByteChannel), NioSctpChannel:<init>(SctpChannel), CompositeByteBuf:internalNioBuffer(int-int), QueryStringDecoder:<init>(URI-Charset), CompleteChannelFuture:addListeners(GenericFutureListener[]), LoggingHandler:<init>(Class-LogLevel), WebSocketProtocolHandler:decode(ChannelHandlerContext-Object-List), AbstractEventExecutorGroup:invokeAll(Collection-long-TimeUnit), OioSctpServerChannel:localAddress0(), WebSocketUtil:base64(byte[]), ReplayingDecoderBuffer:readBytes(ByteBuf-int), DefaultPromise:setFailure(Throwable), Base64Decoder:decode(ChannelHandlerContext-ByteBuf-List), ReferenceMap:values(), ThreadPerChannelEventLoop$1:<init>(ThreadPerChannelEventLoop), NetUtil:getIntValue(char), Slf4JLogger:warn(String), DefaultHttpMessage:appendHeaders(StringBuilder), OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface), Log4JLogger:error(String), UnreleasableByteBuf:resetReaderIndex(), ReadOnlyByteBufferBuf:maxCapacity(), ChannelConfig:setAutoRead(boolean), ByteBufProcessor:process(byte), AbstractNioMessageChannel:javaChannel(), AbstractByteBuf:refCnt(), ObjectEncoderOutputStream:<init>(OutputStream), InternalLogLevel:<clinit>(), ChannelDuplexHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), ForkJoinTask:join(), HttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData), DefaultChannelPromise:checkDeadLock(), SocksAuthResponseDecoder:checkpoint(Object), NioDatagramChannel:doFinishConnect(), NioServerSocketChannel:doDisconnect(), ChannelMatchers:all(), AbstractOioChannel:newUnsafe(), ReadOnlyByteBuf:_setInt(int-int), SocksAddressType:byteValue(), RtspHeaders$Values:<init>(), LoggingHandler:formatByteBuf(String-ByteBuf), SpdySession$PriorityComparator:compare(Integer-Integer), DefaultOioSocketChannelConfig:getOption(ChannelOption), ConcurrentHashMapV8$MapReduceEntriesToLongTask:fork(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:advance(), SwappedByteBuf:forEachByteDesc(int-int-ByteBufProcessor), CharsetUtil:<clinit>(), PromiseTask:setSuccess(Object), HttpContentDecompressor:newContentDecoder(String), SctpNotificationHandler:handleNotification(ShutdownNotification-Object), OioSocketChannel:<init>(), SctpChannelOption:<init>(String), SingleThreadEventExecutor:newTaskQueue(), ProtobufDecoder:decode(ChannelHandlerContext-Object-List), DefaultUdtChannelConfig:isReuseAddress(), UnpooledUnsafeDirectByteBuf:deallocate(), PooledByteBufAllocator$1:initialValue(), SctpServerChannel:register(Selector-int), ForkJoinTask:get(long-TimeUnit), DefaultChannelGroup:isEmpty(), DefaultChannelPipeline$4:<init>(DefaultChannelPipeline-DefaultChannelHandlerContext), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:invoke(), SocksSubnegotiationVersion:valueOf(String), Slf4JLogger:info(String-Object[]), SlicedByteBuf:_setShort(int-int), JZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), DefaultAttributeMap$DefaultAttribute:set(Object), HttpMethod:toString(), ObjectDecoderInputStream:readUnsignedShort(), CommonsLogger:warn(String-Throwable), NioDatagramChannelConfig:getOption0(Object), NioSocketUDT:getLocalSocketAddress(), MixedFileUpload:isInMemory(), ByteBufInputStream:readFully(byte[]-int-int), DefaultPromise:removeListeners(GenericFutureListener[]), SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean), HttpObjectDecoder:readHeader(ByteBuf), AbstractHttpData:getByteBuf(), ReadOnlyByteBufferBuf:getBytes(int-GatheringByteChannel-int), ReplayingDecoderBuffer:nioBuffers(), SwappedByteBuf:readBytes(ByteBuf-int), DefaultRxtxChannelConfig:setAutoRead(boolean), ReadOnlyByteBuf:setInt(int-int), AbstractByteBuf:writeInt(int), OioSocketChannel:shutdownOutput(ChannelPromise), AbstractChannel$CloseFuture:setClosed(), OioSctpServerChannel:isOpen(), DefaultThreadFactory:toPoolName(Class), HttpClientCodec:inboundHandler(), ConcurrentHashMapV8$ReduceEntriesTask:getRawResult(), ChannelPromiseAggregator:operationComplete(ChannelFuture), Unpooled:copiedBuffer(ByteBuffer[]), WebSocketClientHandshaker:verify(FullHttpResponse), Attribute:getValue(), MemoryFileUpload:setContentType(String), ByteToMessageCodec$1:encode(ChannelHandlerContext-Object-ByteBuf), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), JdkLogger:info(String-Object[]), DefaultChannelPromise:channel(), EventLoopException:<init>(String), EmptyByteBuf:retain(int), LoggingHandler:disconnect(ChannelHandlerContext-ChannelPromise), NioSctpChannel:newSctpChannel(), ReplayingDecoderBuffer:getUnsignedInt(int), Bootstrap$2:run(), ByteBuf:getFloat(int), DuplicatedByteBuf:isDirect(), DuplicatedByteBuf:getInt(int), ResourceLeakException:<init>(String-Throwable), StatusUDT:values(), ReplayingDecoderBuffer:readBytes(int), WriteTimeoutHandler:scheduleTimeout(ChannelHandlerContext-ChannelPromise), EmptyByteBuf:order(), SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor), SpdyHeaderBlockRawDecoder:<init>(int-int), NioDatagramChannel:doClose(), OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress), DefaultChannelGroupFuture:awaitUninterruptibly(), DefaultUdtChannelConfig:setOption(ChannelOption-Object), EmptyByteBuf:getBytes(int-ByteBuf-int-int), OioSocketChannelConfig:getSoTimeout(), VoidChannelPromise:setSuccess(), ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8:remove(Object), ReadOnlyByteBufferBuf:isDirect(), DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[]), SocksInitResponseDecoder$State[]:clone(), Log4JLogger:<init>(Logger), ConcurrentHashMapV8$SearchEntriesTask:compute(), EmptyByteBuf:readBytes(GatheringByteChannel-int), AbstractMemoryHttpData:getFile(), WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), QueryStringDecoder:decodeHexNibble(char), RxtxChannel:remoteAddress(), NioDatagramChannel:leaveGroup(InetAddress-ChannelPromise), SpdySynStreamFrame:getStreamId(), DefaultSctpServerChannelConfig:getOptions(Map-ChannelOption[]), OioSctpChannel:parent(), NioDatagramChannel:<init>(), Channel:read(), ForkJoinTask$ExceptionNode:get(), WebSocketClientProtocolHandshakeHandler$1:operationComplete(ChannelFuture), PooledByteBuf:newInternalNioBuffer(Object), ReadTimeoutHandler:<init>(long-TimeUnit), DuplicatedByteBuf:<init>(ByteBuf), PoolArena:findSubpagePoolHead(int), LocalChannel$4$1:run(), DefaultEventExecutor:<init>(DefaultEventExecutorGroup-ThreadFactory), NioUdtByteConnectorChannel:doWriteFileRegion(FileRegion-boolean), ChannelInputShutdownEvent:<clinit>(), WebSocketVersion:valueOf(String), SpdyHeaders$1:set(String-Iterable), IllegalReferenceCountException:<init>(), DefaultSocketChannelConfig:setWriteBufferHighWaterMark(int), DefaultChannelHandlerContext$17:run(), DefaultChannelHandlerContext$10:run(), DefaultChannelProgressivePromise:channel(), UnpooledHeapByteBuf:capacity(), ServerBootstrap:bind(int), SpdyFrameDecoder:<init>(int), DefaultChannelProgressivePromise:await(), CompatibleObjectEncoder:<clinit>(), CombinedChannelDuplexHandler:channelInactive(ChannelHandlerContext), AbstractOioByteChannel:doReadBytes(ByteBuf), AbstractByteBuf:readMedium(), HttpHeaderDateFormat$1:initialValue(), LocalChannel$1:<init>(), ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter), SelectorProviderUDT:from(TypeUDT), DefaultChannelProgressivePromise:trySuccess(), RxtxChannelConfig$Stopbits:values(), NioSocketChannel:<init>(Channel-SocketChannel), SpdySession:getSendWindowSize(int), RecyclableArrayList:newInstance(int), ConcurrentSet:<init>(), DefaultChannelPipeline:addBefore(String-String-ChannelHandler), DefaultPromise:await0(long-boolean), UnreleasableByteBuf:setBytes(int-ScatteringByteChannel-int), SctpChannel:connect(SocketAddress), PoolChunk:free(long), LoggingHandler:format(ChannelHandlerContext-String), ReferenceMap:unfold(Reference), DefaultSctpServerChannelConfig:setAllocator(ByteBufAllocator), HttpClientCodec$Decoder:actualReadableBytes(), ChannelFuture:cause(), UnreleasableByteBuf:writeShort(int), WebSocketFrame:isFinalFragment(), DefaultChannelProgressivePromise:trySuccess(Object), RtspVersions:<init>(), CompositeByteBuf:writeLong(long), DefaultOioServerSocketChannelConfig:setReceiveBufferSize(int), NioServerSocketUDT:bind(SocketAddress-int), SpdySettingsFrame:isPersistValue(int), AbstractFuture:<init>(), PoolChunkList:<clinit>(), CompositeByteBuf:readableBytes(), ChannelOutboundBuffer:decrementPendingOutboundBytes(long), ReplayingDecoderBuffer:capacity(), ClassLoaderClassResolver:resolve(String), MixedFileUpload:getChunk(int), EmptyByteBuf:readSlice(int), Snappy:findMatchingLength(ByteBuf-int-int-int), HttpContentCompressor$1:<clinit>(), DefaultUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), AbstractByteBufAllocator:directBuffer(int-int), UnpooledUnsafeDirectByteBuf:_setShort(int-int), SimpleChannelInboundHandler:acceptInboundMessage(Object), ServerBootstrap:newAttrArray(int), FileUpload:retain(), AbstractInternalLogger:debug(String), UnpooledUnsafeDirectByteBuf:checkIndex(int-int), DefaultSpdyHeaders:get(String), CountedCompleter:addToPendingCount(int), ConcurrentHashMapV8:replaceNode(Object-Object-Object), ByteBuf:ensureWritable(int-boolean), ByteBuf:getBytes(int-OutputStream-int), EmptyByteBuf:readBytes(ByteBuffer), VoidChannelPromise:fireException(Throwable), HttpPostBodyUtil$SeekAheadNoBackArrayException:<init>(), AbstractEventExecutor:shutdownNow(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), CodecException:<init>(String-Throwable), DefaultSpdyHeaders:names(), SwappedByteBuf:capacity(int), OioServerSocketChannel:doConnect(SocketAddress-SocketAddress), ForkJoinTask:trySetSignal(), CompositeByteBuf:hasMemoryAddress(), InternetProtocolFamily:<clinit>(), AbstractEventExecutor$EventExecutorIterator:next(), HttpHeaders:setHeader(HttpMessage-String-Iterable), DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), PromiseTask$RunnableAdapter:toString(), ConcurrentHashMapV8$MapReduceMappingsTask:fork(), SocksAuthRequest:<init>(String-String), CommonsLogger:isWarnEnabled(), ByteBufUtil:swapLong(long), WebSocket00FrameEncoder:<init>(), DefaultProgressivePromise:awaitUninterruptibly(), NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface), ScheduledFutureTask:executor(), ByteBufOutputStream:writeLong(long), ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), PlatformDependent:putLong(long-long), SpdyHeaders:getStatus(int-SpdyHeadersFrame), SpdyFrameDecoder:fireInvalidFrameException(ChannelHandlerContext), EventLoop:isTerminated(), CombinedChannelDuplexHandler:<init>(), SctpChannel:configureBlocking(boolean), AbstractByteBuf:writeBoolean(boolean), UnpooledDirectByteBuf:copy(int-int), PooledHeapByteBuf:_setLong(int-long), DefaultChannelHandlerContext:handler(), HttpContentEncoder$State[]:clone(), OioDatagramChannel:leaveGroup(InetAddress-ChannelPromise), CountedCompleter:doExec(), SwappedByteBuf:getBytes(int-ByteBuf-int), AbstractReferenceCountedByteBuf:markReaderIndex(), DuplicatedByteBuf:getShort(int), AbstractNioChannel:access$100(AbstractNioChannel), SpdyHeaders:getUrl(int-SpdyHeadersFrame), NioSctpChannel:<init>(), CodecException:<init>(), WebSocketUtil:sha1(byte[]), DefaultHttpRequest:getMethod(), HttpObjectDecoder$State:valueOf(String), RxtxChannel:<clinit>(), UnpooledDirectByteBuf:setMedium(int-int), InternalLogger:error(String-Throwable), SocksCmdRequestDecoder$State[]:clone(), DefaultSpdyDataFrame:content(), BinaryWebSocketFrame:content(), DefaultHttpContent:retain(int), NioEventLoop$1:<init>(NioEventLoop), NioEventLoopGroup:rebuildSelectors(), ChannelHandler:exceptionCaught(ChannelHandlerContext-Throwable), DiskAttribute:setCharset(Charset), WebSocketClientHandshaker00:newWebsocketDecoder(), ClassResolvers:softCachingResolver(ClassLoader), CompositeByteBuf:readerIndex(), CombinedChannelDuplexHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int), ReferenceCountUtil:release(Object), DiskAttribute:retain(), EmptyByteBuf:getByte(int), HttpHeaders:set(String-Iterable), SwappedByteBuf:readFloat(), AbstractByteBufAllocator:newHeapBuffer(int-int), TypeParameterMatcher:find(Object-Class-String), CountedCompleter:quietlyComplete(), ByteBuf:setZero(int-int), NioSctpServerChannel:doReadMessages(List), Logger:isErrorEnabled(), UnpooledUnsafeDirectByteBuf:writerIndex(), DuplicatedByteBuf:internalNioBuffer(int-int), ChannelOutboundHandler:handlerRemoved(ChannelHandlerContext), InternalLoggerFactory:getInstance(String), Unpooled:wrappedBuffer(int-byte[][]), AbstractReferenceCountedByteBuf:setBoolean(int-boolean), EmptyByteBuf:getDouble(int), ResourceLeakDetector:access$300(ResourceLeakDetector), CloseWebSocketFrame:<init>(int-String), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:invoke(), ReplayingDecoderBuffer:writeInt(int), AbstractReferenceCountedByteBuf:writeBytes(ByteBuf), EmptyByteBuf:readBoolean(), ForkJoinPool:tryTerminate(boolean-boolean), ReadOnlyByteBufferBuf:_getLong(int), Log4JLogger:info(String-Object-Object), DefaultPromise:notifyListeners0(Future-DefaultFutureListeners), CompactObjectOutputStream:writeUTF(String), DuplicatedByteBuf:setIndex(int-int), PooledByteBuf:writerIndex(), SpdyHeaders:removeUrl(int-SpdyHeadersFrame), DefaultSpdyGoAwayFrame:getStatus(), NioSctpServerChannel:doClose(), PooledHeapByteBuf:setBytes(int-byte[]-int-int), DefaultPromise:progressiveListeners(), HttpHeaders$1:add(String-Iterable), LocalChannel$5:<init>(LocalChannel-Object[]-LocalChannel-ChannelPipeline), AdaptiveRecvByteBufAllocator:getSizeTableIndex(int), AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int), SimpleChannelInboundHandler:channelRead(ChannelHandlerContext-Object), HttpHeaders:add(HttpHeaders), ThreadPerChannelEventLoopGroup:<init>(), PingWebSocketFrame:<init>(), ObjectEncoderOutputStream:writeFloat(float), SpdySession:<init>(), Log4JLogger:warn(String-Object-Object), MemoryAttribute:duplicate(), Logger:warn(String-Object[]), ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ChunkedStream:readChunk(ChannelHandlerContext), ChannelConfig:getAllocator(), ReadOnlyByteBuf:setIndex(int-int), UnreleasableByteBuf:copy(), CompositeByteBuf:alloc(), MarshallerProvider:getMarshaller(ChannelHandlerContext), HttpMethod:<clinit>(), AbstractByteBuf:checkIndex(int-int), SwappedByteBuf:release(int), SlicedByteBuf:hasMemoryAddress(), DefaultRxtxChannelConfig:getReadTimeout(), UnreleasableByteBuf:readUnsignedShort(), CodedOutputStream:writeRawVarint32(int), ThreadLocalRandom:<clinit>(), AbstractReferenceCountedByteBuf:writeMedium(int), PromiseTask:toStringBuilder(), SpdyHeaders$1:entries(), DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket), ConcurrentHashMapV8$SearchMappingsTask:invoke(), ConcurrentHashMapV8$CollectionView:removeAll(Collection), DiskAttribute:equals(Object), AbstractTrafficShapingHandler:<init>(), SslHandler:unwrap(ChannelHandlerContext), AbstractTrafficShapingHandler$1:<init>(AbstractTrafficShapingHandler-ChannelHandlerContext-Object), ConcurrentHashMapV8$ForEachValueTask:invoke(), NioSctpChannel$2:<init>(NioSctpChannel-InetAddress-ChannelPromise), SslHandler:<init>(SSLEngine-boolean), SingleThreadEventExecutor:isShuttingDown(), Unsafe:unpark(Object), ConcurrentHashMapV8$MapReduceEntriesToIntTask:invoke(), ReplayingDecoderBuffer:skipBytes(int), AbstractDiskHttpData:getDiskFilename(), FailedFuture:<init>(EventExecutor-Throwable), ByteBuf:getUnsignedByte(int), PooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int), AbstractByteBuf:ensureWritable(int-boolean), ConcurrentHashMapV8$MapReduceValuesToIntTask:invoke(), Striped64$Cell:<init>(long), CompositeByteBuf:addComponents0(int-Iterable), HttpHeaders:setTransferEncodingChunked(HttpMessage), ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8:reduceToDouble(long-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), PooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int), SslHandler:setHandshakeSuccess(), EventLoop:awaitTermination(long-TimeUnit), SwappedByteBuf:readerIndex(int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer), DefaultSctpChannelConfig:getOptions(Map-ChannelOption[]), SwappedByteBuf:forEachByteDesc(ByteBufProcessor), WebSocketServerHandshaker13:newWebsocketDecoder(), OioSctpChannel:doClose(), Bootstrap$1:<init>(Bootstrap-ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise), DefaultSpdyRstStreamFrame:setLast(boolean), JZlibEncoder$1:operationComplete(ChannelFuture), SpdyHttpHeaders:removePriority(HttpMessage), PoolSubpage:allocate(), DefaultByteBufHolder:<init>(ByteBuf), Bootstrap:access$000(ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise), ChannelFactory:newChannel(), ByteBuf:writeDouble(double), AbstractOioByteChannel:pipeline(), ReplayingDecoderBuffer:setShort(int-int), SSLEngineResult$Status:values(), NioUdtByteConnectorChannel:<clinit>(), SwappedByteBuf:getBoolean(int), DefaultRxtxChannelConfig:getOption(ChannelOption), SlicedByteBuf:alloc(), CompositeByteBuf:getByte(int), CompositeByteBuf:readBytes(ByteBuf-int-int), SpdyDataFrame:content(), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:advance(), ByteBuf:getBytes(int-byte[]-int-int), SpdyOrHttpChooser$1:<clinit>(), AbstractChannel$AbstractUnsafe$2:run(), ChannelMatchers$InstanceMatcher:<init>(Channel), DefaultCookie:compareTo(Cookie), ForkJoinPool$DefaultForkJoinWorkerThreadFactory:newThread(ForkJoinPool), CodecException:<init>(Throwable), SucceededChannelFuture:<init>(Channel-EventExecutor), AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise), OioSctpServerChannel:remoteAddress(), SslHandler:setHandshakeTimeoutMillis(long), Channel:eventLoop(), LoggingHandler:<clinit>(), UnreleasableByteBuf:hasArray(), NioUdtByteConnectorChannel:remoteAddress(), ForkJoinPool:getQueuedTaskCount(), NioSctpChannel:doConnect(SocketAddress-SocketAddress), HttpObjectEncoder:encode(ChannelHandlerContext-HttpObject-List), DefaultHttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData), WebSocketVersion:values(), PooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int), DefaultSpdyHeadersFrame:toString(), UnreleasableByteBuf:hasMemoryAddress(), PlatformDependent0:getByte(long), AbstractInternalLogger:log(InternalLogLevel-String-Throwable), PlatformDependent:getInt(long), DefaultPromise:sync(), HttpContentDecoder:finishDecode(List), HttpVersion:compareTo(HttpVersion), DefaultRxtxChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), AbstractNioByteChannel:remoteAddress(), SwappedByteBuf:writeMedium(int), ConcurrentHashMapV8$ForEachTransformedMappingTask:addToPendingCount(int), UTF8Output:toString(), SocksSubnegotiationVersion:values(), DefaultDatagramChannelConfig:setWriteSpinCount(int), SpdyHeaders:removeVersion(int-SpdyHeadersFrame), HttpClientCodec$Decoder:decode(ChannelHandlerContext-ByteBuf-List), HttpContentEncoder$Result:targetContentEncoding(), OioServerSocketChannel:config(), AbstractEventExecutorGroup:shutdown(), ForkJoinPool:runWorker(ForkJoinPool$WorkQueue), DefaultChannelConfig:setMaxMessagesPerRead(int), ForkJoinPool:getRunningThreadCount(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:compute(), HttpPostRequestEncoder$WrappedHttpRequest:getDecoderResult(), DefaultChannelHandlerContext:fireUserEventTriggered(Object), UnpooledDirectByteBuf:getInt(int), AbstractReferenceCountedByteBuf:readBytes(OutputStream-int), SpdyFrameEncoder:encode(ChannelHandlerContext-SpdyFrame-ByteBuf), Channel:disconnect(), DefaultSctpChannelConfig:getSendBufferSize(), DefaultSpdySettingsFrame$Setting:setValue(int), EmptyByteBuf:setMedium(int-int), SwappedByteBuf:skipBytes(int), PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int), AbstractTrafficShapingHandler:write(ChannelHandlerContext-Object-ChannelPromise), Deflater:deflate(int), HttpHeaders:clearHeaders(HttpMessage), SocketUDT:status(), MemoryFileUpload:getContentTransferEncoding(), MessageFormatter:<init>(), DelimiterBasedFrameDecoder:isSubclass(), AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel-AbstractOioChannel$1), CompositeByteBuf:writeChar(int), ForkJoinPool:checkPermission(), DefaultOioServerSocketChannelConfig:setAutoRead(boolean), SpdyHttpDecoder:createHttpResponse(int-SpdyHeadersFrame), PoolArena$DirectArena:newByteBuf(int), JdkLogger:warn(String-Throwable), DefaultUdtChannelConfig:setConnectTimeoutMillis(int), Slf4JLogger:isErrorEnabled(), NioSctpServerChannel:isOpen(), NioSocketChannel:doBind(SocketAddress), Attribute:retain(int), AbstractBootstrap:init(Channel), MixedFileUpload:delete(), ImmediateEventExecutor:<clinit>(), HttpObjectDecoder:getChunkSize(String), AbstractReferenceCountedByteBuf:setBytes(int-byte[]), AbstractBootstrap:group(), ConcurrentHashMapV8:reduceKeysToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), Unpooled:copiedBuffer(char[]-Charset), DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int), WebSocketClientHandshaker00:<init>(URI-WebSocketVersion-String-HttpHeaders-int), ByteToMessageCodec:<init>(Class), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), DefaultChannelPipeline:addLast(EventExecutorGroup-ChannelHandler[]), ConcurrentHashMapV8:writeObject(ObjectOutputStream), ChannelHandlerContext:pipeline(), FormattingTuple:<clinit>(), AbstractOioMessageChannel:remoteAddress(), AbstractNioChannel$NioUnsafe:forceFlush(), GlobalEventExecutor:terminationFuture(), ChunkedWriteHandler$5:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite), AbstractOioByteChannel:config(), Log4JLogger:warn(String-Object), ChannelPromise[]:clone(), NioUdtMessageConnectorChannel:<init>(SocketChannelUDT), DefaultHttpHeaders$HeaderEntry:setValue(Object), Promise:setSuccess(Object), DefaultSctpServerChannelConfig:setBacklog(int), Attribute:getString(), HttpPostRequestEncoder$WrappedFullHttpRequest:release(int), SnappyFramedEncoder:<init>(), ChunkedFile:close(), ByteBufInputStream:readFully(byte[]), EmptyByteBuf:setLong(int-long), WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise), SpdySessionHandler:close(ChannelHandlerContext-ChannelPromise), ByteBufAllocator:buffer(int), UdtMessage:copy(), NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise), ByteToMessageDecoder:handlerRemoved(ChannelHandlerContext), DefaultChannelPipeline:fireChannelActive(), EmptyByteBuf:writeZero(int), AbstractEventExecutor$EventExecutorIterator:remove(), NioUdtProvider:<init>(TypeUDT-KindUDT), HttpHeaders:entries(), CompatibleMarshallingEncoder:<init>(MarshallerProvider), PooledDirectByteBuf:<clinit>(), ReplayingDecoderBuffer:readerIndex(int), ConcurrentHashMapV8$TreeBin:unlockRoot(), NetUtil:isValidIp4Word(String), ForkJoinTask:get(), DefaultRxtxChannelConfig:isRts(), ConcurrentHashMapV8$ForEachTransformedEntryTask:fork(), DefaultChannelHandlerContext:access$1400(DefaultChannelHandlerContext-ChannelPromise), LongAdder:readObject(ObjectInputStream), HashedWheelTimer$Worker:notifyExpiredTimeouts(List), DefaultChannelPipeline:disconnect(ChannelPromise), AbstractNioByteChannel$NioByteUnsafe:<clinit>(), ReadOnlyByteBufferBuf:nioBuffer(int-int), DefaultUdtServerChannelConfig:setBacklog(int), OioDatagramChannel:doConnect(SocketAddress-SocketAddress), DefaultUdtServerChannelConfig:setReceiveBufferSize(int), SpdySession$StreamState:getReceiveWindowSizeLowerBound(), PlatformDependent:getByte(long), UnreleasableByteBuf:maxCapacity(), LocalChannelRegistry:unregister(LocalAddress), SpdyOrHttpChooser$SelectedProtocol:ordinal(), Log4JLogger:<clinit>(), DuplicatedByteBuf:getByte(int), EmbeddedChannel:<clinit>(), SslHandler:access$700(SslHandler-Throwable), MessageToByteEncoder:<init>(boolean), SocksCmdRequestDecoder$State:<clinit>(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), HttpHeaders:get(String), ScheduledFutureTask:compareTo(Object), UnreleasableByteBuf:getBytes(int-ByteBuf-int-int), ChannelPipelineException:<init>(), SpdySessionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture), DefaultRxtxChannelConfig:setConnectTimeoutMillis(int), AbstractByteBuf:readUnsignedShort(), MessageFormatter:booleanArrayAppend(StringBuffer-boolean[]), ConcurrentSet:isEmpty(), NioSctpServerChannel$1:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), ReplayingDecoderBuffer:writeBytes(ScatteringByteChannel-int), NioSocketChannel$2:<init>(NioSocketChannel-ChannelPromise), PongWebSocketFrame:rsv(), SpdyOrHttpChooser:<init>(int-int), DefaultChannelPipeline:removeFirst(), SpdyFrameDecoder:readControlFrame(ByteBuf), JZlibEncoder:<init>(int-int-int-byte[]), AbstractInternalLogger:error(String), AbstractOioByteChannel:unsafe(), PooledByteBufAllocator:access$000(PooledByteBufAllocator), ByteBufOutputStream:writeFloat(float), AbstractByteBuf:getBytes(int-ByteBuffer), ReadOnlyUnsafeDirectByteBuf:alloc(), AbstractTrafficShapingHandler:<init>(long-long-long), WebSocketServerHandshakerFactory:<init>(String-String-boolean), SpdyFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf), JZlibDecoder:<init>(byte[]), EmbeddedEventLoop:parent(), FullHttpMessage:release(), ConcurrentHashMapV8:reduceKeysToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ForkJoinTask:externalInterruptibleAwaitDone(), MixedFileUpload:retain(int), NioUdtProvider:newConnectorChannelUDT(TypeUDT), ForkJoinPool:isQuiescent(), ReadOnlyByteBuf:capacity(), SpdyHttpHeaders:setStreamId(HttpMessage-int), ConcurrentHashMapV8$MapReduceMappingsToIntTask:advance(), UnreleasableByteBuf:clear(), ReadTimeoutHandler:access$000(ReadTimeoutHandler), DefaultChannelHandlerContext$13:run(), ResourceLeakDetector$DefaultResourceLeak:close(), MemoryAttribute:addContent(ByteBuf-boolean), DefaultChannelHandlerContext:access$1700(DefaultChannelHandlerContext-Object-ChannelPromise), ChannelHandlerContext:handler(), UnreleasableByteBuf:readFloat(), AbstractReferenceCounted:refCnt(), ConcurrentHashMapV8$ForEachTransformedValueTask:invoke(), CountedCompleter:complete(Object), DefaultAddressedEnvelope:refCnt(), ChannelHandlerContext:bind(SocketAddress-ChannelPromise), MixedAttribute:<init>(String-long), DefaultCookie:getName(), Deflater:init(int-int-int-JZlib$WrapperType), ReadOnlyByteBuf:setShort(int-int), DefaultPromise:decWaiters(), EmptyByteBuf:indexOf(int-int-byte), SelectorProviderUDT:openRendezvousChannel(), ReferenceMap:keySet(), DefaultChannelPipeline:write(Object), Channel$Unsafe:localAddress(), NioDatagramChannelConfig:getInterface(), SpdySession:removeStream(int), DefaultChannelGroup:deregister(), NoOpTypeParameterMatcher:<init>(), MessageToMessageDecoder:handlerRemoved(ChannelHandlerContext), HttpContentEncoder:finishEncode(List), HttpHeaders:isEmpty(), ConcurrentHashMapV8$ForEachMappingTask:compute(), DefaultAttributeMap:<clinit>(), CompositeByteBuf:clear(), DefaultMarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration), SocketChannelUDT:bind(SocketAddress), DefaultFullHttpRequest:refCnt(), AbstractReferenceCountedByteBuf:getBytes(int-byte[]), SslHandler:access$400(), ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), EmptyByteBuf:writeBytes(ByteBuffer), ByteBuf:readUnsignedByte(), DefaultChannelPromise:sync(), EmbeddedEventLoop:register(Channel), JdkZlibEncoder:ctx(), WebSocketClientHandshaker08:uri(), SslHandler$7:<clinit>(), ReplayingDecoderBuffer:terminate(), DefaultCookie:compareTo(Object), DefaultPromise$5:run(), DefaultChannelHandlerContext:write(Object), AbstractOioMessageChannel:doRead(), FileUpload:getFile(), SpdyProtocolException:<init>(Throwable), SpdyHttpEncoder:createSynReplyFrame(HttpResponse), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SwappedByteBuf:writeByte(int), PooledByteBuf:maxCapacity(), SpdyHttpHeaders:removeStreamId(HttpMessage), UnreleasableByteBuf:writeBytes(byte[]), ReplayingDecoderBuffer:setBytes(int-ScatteringByteChannel-int), DefaultSctpChannelConfig:setConnectTimeoutMillis(int), AbstractBootstrap:toString(), Cookie:getPath(), SpdyHttpDecoder:decode(ChannelHandlerContext-SpdyFrame-List), ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), HttpContentDecoder:handlerRemoved(ChannelHandlerContext), AbstractEventExecutor:submit(Runnable), DefaultLastHttpContent:toString(), ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), UnreleasableByteBuf:copy(int-int), ClassClassPath:<init>(Class), SslHandler:access$800(SslHandler), ChunkedWriteHandler$4:operationComplete(Future), ConcurrentHashMapV8$ForEachEntryTask:compute(), DiskFileUpload:content(), DefaultProgressivePromise:removeListeners(GenericFutureListener[]), EmptyByteBuf:bytesBefore(int-byte), UnpooledDirectByteBuf:setBytes(int-ByteBuffer), ChannelDuplexHandler:<init>(), NioEventLoopGroup:<init>(int-ThreadFactory), ReplayingDecoderBuffer:readFloat(), SpdyHeaders:setUrl(int-SpdyHeadersFrame-String), WebSocket08FrameDecoder$State:values(), SpdySession:getPendingWrite(int), NioUdtAcceptorChannel:localAddress0(), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), Base64:<init>(), DefaultSpdyHeadersFrame:appendHeaders(StringBuilder), ServerBootstrap:bind(InetAddress-int), SwappedByteBuf:setBytes(int-InputStream-int), Marshaller:close(), ReadOnlyByteBufferBuf:arrayOffset(), Bootstrap:doConnect0(ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise), ObjectDecoderInputStream:readUnsignedByte(), EmbeddedChannel:readOutbound(), NioUdtByteConnectorChannel:isActive(), ForkJoinPool:checkFactory(ForkJoinPool$ForkJoinWorkerThreadFactory), ConcurrentHashMapV8$ObjectByObjectToDouble:apply(Object-Object), DefaultFileRegion:<init>(FileChannel-long-long), ByteBuf:readBytes(byte[]-int-int), PooledDirectByteBuf:maxCapacity(int), SpdyHeaders:setVersion(int-SpdyHeadersFrame-HttpVersion), ClientCookieEncoder:encode(Iterable), SystemPropertyUtil:log(String), MultithreadEventExecutorGroup:access$200(MultithreadEventExecutorGroup), WebSocket00FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-ByteBuf), JdkZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf), GlobalEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:getRawResult(), SingleThreadEventExecutor:peekTask(), AbstractChannel$AbstractUnsafe$2:<init>(AbstractChannel$AbstractUnsafe), LocalEventLoop:takeTask(), SocksCmdResponseDecoder:checkpoint(Object), DefaultHttpRequest:appendHeaders(StringBuilder), DefaultSpdyHeaders:getAll(String), DefaultChannelGroup:write(Object-ChannelMatcher), DefaultHttpHeaders:add0(int-int-String-String), AbstractChannel$AbstractUnsafe:deregister(ChannelPromise), FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf), ByteBufAllocator:directBuffer(int-int), OioDatagramChannel:isActive(), FileUpload:setContentType(String), PlatformDependent0:directBufferAddress(ByteBuffer), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<init>(String-int), AbstractOioChannel:isActive(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:firstComplete(), SslHandler:<init>(SSLEngine-boolean-Executor), CommonsLogger:debug(String-Throwable), CompressionException:<init>(Throwable), MixedAttribute:refCnt(), WebSocketServerHandshakerFactory:<init>(String-String-boolean-int), ConcurrentHashMapV8$CounterCell:<init>(long), IdleStateHandler$1:operationComplete(Future), SocksCmdRequest:protocolVersion(), Log:isDebugEnabled(), DefaultHttpHeaders$HeaderEntry:<init>(int-String-String), SpdyStreamStatus:valueOf(int), VoidChannelPromise:syncUninterruptibly(), HttpObjectDecoder:splitHeader(String), AbstractEventExecutorGroup:scheduleAtFixedRate(Runnable-long-long-TimeUnit), ConcurrentHashMapV8$SearchValuesTask:advance(), AbstractOioByteChannel:isOpen(), DefaultSpdyWindowUpdateFrame:getStreamId(), ChunkedWriteHandler$2:run(), DefaultChannelGroup:close(), ConcurrentHashMapV8:forEach(ConcurrentHashMapV8$BiAction), AbstractNioMessageChannel:config(), ByteBufInputStream:skip(long), PooledByteBuf:setIndex(int-int), ConcurrentHashMapV8$KeySetView:contains(Object), ChannelOutboundBuffer:<init>(AbstractChannel-int), CombinedIterator:hasNext(), HttpObjectDecoder:readLine(ByteBuf-int), ForkJoinTask$AdaptedRunnableAction:run(), NioUdtByteAcceptorChannel:<clinit>(), ChannelPipeline:addLast(ChannelHandler[]), PlatformDependent:directBufferAddress(ByteBuffer), ConcurrentHashMapV8:comparableClassFor(Object), NioUdtByteConnectorChannel:selectionKey(), ServerCookieEncoder:encode(Cookie[]), RxtxChannelOption:<clinit>(), ForkJoinPool:execute(Runnable), HttpClientCodec:access$200(HttpClientCodec), UnreleasableByteBuf:equals(Object), DefaultChannelHandlerContext$11:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), ObjectEncoderOutputStream:size(), WebSocketUtil:randomNumber(int-int), ZlibWrapper[]:clone(), CompositeByteBuf:updateComponentOffsets(int), NioDatagramChannelConfig:setInterface(InetAddress), DefaultSctpChannelConfig:getOptions(), DefaultSctpServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultChannelGroupFuture:trySuccess(Object), ConcurrentHashMapV8$MapReduceEntriesTask:fork(), SslHandler:setCloseNotifyTimeoutMillis(long), LocalAddress:<init>(String), InternalAttribute:getHttpDataType(), SocksCmdType:<clinit>(), IdleStateHandler:channelRead(ChannelHandlerContext-Object), DefaultChannelPipeline:replace(DefaultChannelHandlerContext-String-ChannelHandler), LocalEventLoopGroup:<init>(int), OioSctpChannel:localAddress0(), ScheduledFutureTask:<init>(EventExecutor-Queue-Runnable-Object-long), JdkLogger:trace(String-Throwable), TextWebSocketFrame:<init>(String), StringEncoder:<init>(), DefaultHttpRequest:getProtocolVersion(), SingleThreadEventExecutor:terminationFuture(), Logger:getLogger(String), ReadOnlyByteBuf:_setMedium(int-int), ByteBuf:indexOf(int-int-byte), AbstractOioChannel:pipeline(), AbstractByteBuf:nioBuffers(), ConcurrentHashMapV8$BaseIterator:remove(), DefaultFutureListeners:remove(GenericFutureListener), TypeParameterMatcher$1:<init>(), SpdySynStreamFrame:setLast(boolean), UnreleasableByteBuf:getBytes(int-OutputStream-int), SwappedByteBuf:getBytes(int-byte[]), SocksInitResponseDecoder$1:<clinit>(), ReadTimeoutException:<clinit>(), SwappedByteBuf:discardSomeReadBytes(), MemoryFileUpload:getCharset(), Attribute:isInMemory(), InterfaceHttpData:getName(), WebSocket00FrameDecoder:decodeBinaryFrame(ChannelHandlerContext-byte-ByteBuf), ForkJoinTask:quietlyComplete(), Cookie:setMaxAge(long), DefaultChannelHandlerContext$15:run(), SocksInitResponse:protocolVersion(), OioSctpChannel:isActive(), HttpContentDecoder:<clinit>(), ReadTimeoutHandler:destroy(), HttpHeaders:addDateHeader(HttpMessage-String-Date), JdkLogger:debug(String-Object), Logger:error(String-Throwable), CompositeByteBuf:_getInt(int), DefaultAddressedEnvelope:retain(int), DefaultChannelPipeline:getContextOrDie(ChannelHandler), LocalEventLoopGroup:<init>(), ByteToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise), ForkJoinPool:<init>(), UnreleasableByteBuf:toString(int-int-Charset), AbstractBootstrap:channelFactory(), DefaultChannelHandlerContext:access$1600(DefaultChannelHandlerContext), CompositeByteBuf:writerIndex(int), DefaultChannelPipeline$1:run(), CountedCompleter:propagateCompletion(), DefaultChannelHandlerContext:name(), AbstractChannel$CloseFuture:<init>(AbstractChannel-AbstractChannel), AbstractFuture:getNow(), DefaultChannelPipeline:writeAndFlush(Object-ChannelPromise), SSLEngine:beginHandshake(), InternalLogger:warn(String), ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), LongAdder:longValue(), KindUDT:values(), MixedAttribute:release(int), ConcurrentHashMapV8:computeIfPresent(Object-ConcurrentHashMapV8$BiFun), SpdyHeaders:addHeader(SpdyHeadersFrame-String-Object), DefaultSpdyDataFrame:isLast(), MixedFileUpload:refCnt(), CtClass:toBytecode(), DefaultThreadFactory:<init>(Class-boolean-int), FileUpload:setContent(File), ReplayingDecoderBuffer:readLong(), PooledHeapByteBuf:memoryAddress(), MessageToMessageEncoder:<init>(Class), PooledHeapByteBuf:alloc(), MemoryFileUpload:setContentTransferEncoding(String), SSLEngine:wrap(ByteBuffer-ByteBuffer), Recycler$1:<init>(Recycler), PlatformDependent0:getInt(Object-long), OioServerSocketChannel:doWrite(Object[]-int-int), Snappy:calculateChecksum(ByteBuf), DefaultChannelHandlerContext$2:<init>(DefaultChannelHandlerContext), HttpPostRequestEncoder$WrappedHttpRequest:headers(), ConcurrentHashMapV8:tryPresize(int), SwappedByteBuf:order(), SwappedByteBuf:writeBytes(ByteBuf-int), ByteBuf:readBytes(ByteBuf-int), ByteBufAllocator:ioBuffer(), UnpooledDirectByteBuf:writerIndex(int), AbstractEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), HttpPostRequestDecoder:getBodyHttpDatas(), HashedWheelTimer$Worker:waitForNextTick(), PongWebSocketFrame:content(), SpdyHeaders$1:add(String-Iterable), AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel-AbstractNioMessageChannel$1), Bootstrap:localAddress(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService), DefaultChannelHandlerContext:invokeChannelActive(), NotSslRecordException:<init>(String-Throwable), UnpooledHeapByteBuf:setMedium(int-int), AbstractByteBufAllocator:heapBuffer(int-int), SocksProtocolVersion:<init>(String-int-byte), DefaultLastHttpContent$1:<init>(DefaultLastHttpContent), SslHandler:close(ChannelPromise), SSLEngineResult$Status:ordinal(), Unpooled:copiedBuffer(byte[][]), Cookie:setSecure(boolean), AbstractReferenceCountedByteBuf:markWriterIndex(), ConcurrentHashMapV8$CollectionView:toString(), HttpData:getChunk(int), SwappedByteBuf:writeBytes(byte[]), ReplayingDecoderBuffer:setBytes(int-InputStream-int), ChunkedFile:<init>(RandomAccessFile-long-long-int), QueryStringDecoder:addParam(Map-String-String), UnreleasableByteBuf:writeBytes(InputStream-int), DefaultChannelPipeline:last(), HttpPostRequestDecoder:checkDestroyed(), IdleStateHandler:channelInactive(ChannelHandlerContext), DefaultChannelGroup:close(ChannelMatcher), AttributeKey:<clinit>(), InternalLogger:debug(String), SpdySessionHandler:updateInitialSendWindowSize(int), MessageFormatter:floatArrayAppend(StringBuffer-float[]), AbstractByteBuf:getInt(int), AbstractByteBuf:toString(), DefaultChannelHandlerContext$16:<init>(DefaultChannelHandlerContext-ChannelPromise), DefaultSpdyDataFrame:retain(), ConcurrentHashMapV8$MapReduceValuesTask:fork(), RxtxChannelConfig$Databits:<init>(String-int-int), UnreleasableByteBuf:getBytes(int-ByteBuffer), HttpContentCompressor:<init>(int-int-int), AbstractNioChannel:access$000(AbstractNioChannel), AbstractByteBuf:setZero(int-int), AbstractOioByteChannel:available(), DefaultByteBufHolder:toString(), UnpooledHeapByteBuf:getBytes(int-OutputStream-int), Snappy$State:values(), AbstractTrafficShapingHandler:handlerRemoved(ChannelHandlerContext), MessageToMessageCodec:encode(ChannelHandlerContext-Object-List), ByteBuf:writeBytes(ByteBuf-int), Slf4JLogger:isTraceEnabled(), DefaultHttpResponse:getProtocolVersion(), NetUtil:isValidIpV4Address(String), UnreleasableByteBuf:getUnsignedByte(int), SocksCmdRequestDecoder:<init>(), TypeParameterMatcher$ReflectiveMatcher:<init>(Class), HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage), SocksRequestType:<init>(String-int), FileUpload:copy(), UdtChannelOption:<init>(String), DefaultHttpObject:setDecoderResult(DecoderResult), EmptyByteBuf:readBytes(ByteBuf), DefaultFullHttpResponse:trailingHeaders(), NioEventLoop:processWritable(AbstractNioChannel), TextWebSocketFrame:<init>(boolean-int-ByteBuf), EmptyByteBuf:compareTo(Object), Delimiters:nulDelimiter(), DefaultUdtServerChannelConfig:getOption(ChannelOption), ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue), SocksAddressType[]:clone(), WebSocketServerProtocolHandler:<clinit>(), NioUdtMessageAcceptorChannel:<clinit>(), OioSocketChannel:checkInputShutdown(), SctpMessageToMessageDecoder:<init>(), KindUDT:ordinal(), AbstractByteBuf:readBytes(byte[]-int-int), HttpContentEncoder:cleanup(), MixedAttribute:compareTo(InterfaceHttpData), JdkZlibEncoder:close(), OioSocketChannel:isActive(), AbstractByteBuf:toString(Charset), ChannelOutboundBuffer:<init>(AbstractChannel), ConcurrentHashMapV8$MapReduceEntriesToIntTask:compute(), HttpContentDecoder:fetchDecoderOutput(List), ByteBuf:setInt(int-int), UnpooledUnsafeDirectByteBuf:capacity(), DefaultSpdyHeaders:contains(String), CompositeByteBuf:setBytes(int-ByteBuf), ZlibUtil:convertWrapperType(ZlibWrapper), AbstractChannel:eventLoop(), ReadOnlyByteBufferBuf:nioBuffers(int-int), CompositeByteBuf:nioBuffers(), SslHandler:channelInactive(ChannelHandlerContext), WriteTimeoutHandler:<init>(int), RxtxChannelConfig$Stopbits:<clinit>(), EmbeddedChannel:finish(), DatagramChannelConfig:getRecvByteBufAllocator(), Base64:encode(ByteBuf-boolean), NioSocketChannel:shutdownOutput(ChannelPromise), ForkJoinPool$EmptyTask:setRawResult(Void), DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int), DuplicatedByteBuf:setBytes(int-InputStream-int), EmptyByteBuf:setBoolean(int-boolean), DuplicatedByteBuf:_getUnsignedMedium(int), EmptyByteBuf:setBytes(int-ByteBuf), CombinedChannelDuplexHandler:flush(ChannelHandlerContext), LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress), ClassLoaderClassResolver:<init>(ClassLoader), ThreadPerChannelEventLoopGroup:iterator(), UnpooledHeapByteBuf:readableBytes(), RtspResponseDecoder:<clinit>(), LoggingHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), NioEventLoop:cancel(SelectionKey), OioSocketChannel:<clinit>(), FileUpload:retain(int), AbstractReferenceCounted:release(), ByteBuf:readerIndex(), LocalChannel$LocalUnsafe:<init>(LocalChannel-LocalChannel$1), ChannelPipeline:fireExceptionCaught(Throwable), ForkJoinWorkerThread:start(), UnpooledUnsafeDirectByteBuf:_getLong(int), AbstractByteBuf:nioBuffers(int-int), RxtxChannel:doInit(), SpdySession$StreamState:getSendWindowSize(), SocksAuthStatus:values(), WriteTimeoutHandler$1:<init>(WriteTimeoutHandler-ChannelPromise-ChannelHandlerContext), WebSocketHandshakeException:<init>(String-Throwable), HttpHeaders:isTransferEncodingChunked(HttpMessage), SingleThreadEventExecutor:addShutdownHook(Runnable), NioDatagramChannel:remoteAddress0(), WebSocketServerHandshaker07:newWebSocketEncoder(), DefaultProgressivePromise:setSuccess(Object), DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int), SlicedByteBuf:order(), ResourceLeakDetector:<init>(Class), PromiseTask:executor(), DefaultUdtServerChannelConfig:setProtocolReceiveBufferSize(int), ChannelInboundHandler:channelActive(ChannelHandlerContext), DefaultSpdySettingsFrame:appendSettings(StringBuilder), ScheduledFutureTask:setFailureInternal(Throwable), ConcurrentHashMapV8$ReduceKeysTask:compute(), DefaultChannelPipeline$1:<init>(DefaultChannelPipeline-DefaultChannelHandlerContext), ThreadPerChannelEventLoopGroup:next(), WebSocketServerHandshaker13:newHandshakeResponse(FullHttpRequest-HttpHeaders), HttpContentEncoder$State:valueOf(String), AbstractOioChannel$DefaultOioUnsafe:ensureOpen(ChannelPromise), BlockingOperationException:<init>(String), StringEncoder:<init>(Charset), ForkJoinPool:shutdownNow(), ReplayingDecoderBuffer:arrayOffset(), OioSctpServerChannel:newPromise(), ByteBuf:writeBytes(InputStream-int), SpdySession$StreamState:isLocalSideClosed(), SslHandler$LazyChannelPromise:trySuccess(Object), DefaultUdtChannelConfig:setSystemReceiveBufferSize(int), ConcurrentHashMapV8$MapReduceEntriesTask:addToPendingCount(int), SpdyHttpDecoder:createHttpRequest(int-SpdyHeadersFrame), ReadOnlyByteBufferBuf:getShort(int), SingleThreadEventExecutor:reject(), InternalLogger:isDebugEnabled(), CompleteFuture:await(), DefaultPromise:awaitUninterruptibly(), Log4JLogger:debug(String-Throwable), AbstractTrafficShapingHandler:read(ChannelHandlerContext), ForkJoinPool:pollSubmission(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:addToPendingCount(int), DefaultOioServerSocketChannelConfig:setReuseAddress(boolean), PooledDirectByteBuf:_setMedium(int-int), AbstractNioChannel$NioUnsafe:close(ChannelPromise), ChannelOutboundHandler:read(ChannelHandlerContext), RecyclableArrayList:ensureCapacity(int), SpdyHttpEncoder:createSynStreamFrame(HttpMessage), UniqueName:<clinit>(), HttpClientCodec:access$400(HttpClientCodec), ConcurrentHashMapV8$Fun:apply(Object), DelimiterBasedFrameDecoder:isLineBased(ByteBuf[]), NetUtil:createByteArrayFromIpAddressString(String), ByteBufAllocator:heapBuffer(int), ObjectDecoderInputStream:readUTF(), VoidChannelPromise:sync(), SctpChannel:send(ByteBuffer-MessageInfo), ZlibUtil$1:<clinit>(), MessageFormatter:byteArrayAppend(StringBuffer-byte[]), WebSocketServerProtocolHandler:<init>(String-String), UnpooledUnsafeDirectByteBuf:_getShort(int), SystemPropertyUtil:getLong(String-long), DefaultChannelPipeline:addFirst(EventExecutorGroup-ChannelHandler[]), ChannelInitializer:initChannel(Channel), ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachValueTask:propagateCompletion(), DefaultFullHttpResponse:retain(int), ClassPool:getAndRename(String-String), LoggingHandler:channelUnregistered(ChannelHandlerContext), AbstractBootstrap$1:operationComplete(Future), DefaultAddressedEnvelope:<init>(Object-SocketAddress-SocketAddress), EmptyByteBuf:readBytes(OutputStream-int), DefaultSocketChannelConfig:setTcpNoDelay(boolean), EmptyByteBuf:getBytes(int-ByteBuffer), ChunkedFile:isEndOfInput(), PoolChunk:toString(), RxtxDeviceAddress:<init>(String), WebSocketVersion:<init>(String-int), Log4JLogger:warn(String-Throwable), ByteBuf:forEachByte(ByteBufProcessor), ConcurrentHashMapV8:newKeySet(), SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1), UnpooledHeapByteBuf:_setShort(int-int), RecvByteBufAllocator$Handle:guess(), DefaultChannelPipeline:fireChannelWritabilityChanged(), ReplayingDecoderBuffer:readInt(), ForkJoinTask$RunnableExecuteAction:exec(), Snappy:hash(ByteBuf-int-int), ServerBootstrap:handler(), AbstractTrafficShapingHandler:<clinit>(), SpdySessionHandler:updateSendWindowSize(ChannelHandlerContext-int-int), CompositeByteBuf:setBytes(int-ByteBuffer), VoidChannelPromise:addListeners(GenericFutureListener[]), ReferenceMap:clear(), LengthFieldBasedFrameDecoder:fail(long), PlatformDependent:newConcurrentHashMap(Map), AbstractDiskHttpData:delete(), SpdyHeaders$1:remove(String), HttpDataFactory:createAttribute(HttpRequest-String-String), ChannelMatchers$ClassMatcher:matches(Channel), SocksProtocolVersion:byteValue(), SelectorProviderUDT:openServerSocketChannel(), RxtxChannelConfig$Databits:<clinit>(), AbstractByteBuf:readShort(), DefaultSctpChannelConfig:setAllocator(ByteBufAllocator), RxtxChannel:config(), ByteBuf:writerIndex(int), CountedCompleter:tryComplete(), HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean), LocalServerChannel:remoteAddress(), DefaultCookie:setComment(String), Log:trace(Object), DefaultChannelHandlerContext$15:<init>(DefaultChannelHandlerContext-ChannelPromise), UnreleasableByteBuf:indexOf(int-int-byte), OioDatagramChannel:localAddress0(), ForkJoinTask:setCompletion(int), SingleThreadEventExecutor:delayNanos(long), PoolSubpage:<clinit>(), RtspRequestDecoder:<init>(), HttpPostRequestDecoder$EndOfDataDecoderException:<init>(), OioSocketChannel:parent(), AbstractBootstrap$2:<init>(ChannelFuture-Channel-SocketAddress-ChannelPromise), ConcurrentHashMapV8$MapReduceMappingsToIntTask:firstComplete(), NioEventLoop:<clinit>(), DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultChannelHandlerContext:teardown0(), StringUtil:simpleClassName(Class), DefaultFullHttpResponse:release(), ByteBuf:readBytes(ByteBuf), IdleStateHandler:destroy(), ChannelPromise:setFailure(Throwable), ObjectEncoderOutputStream:write(byte[]), NioDatagramChannel:doWriteMessages(Object[]-int-int-boolean), UnpooledDirectByteBuf:setIndex(int-int), ReplayingDecoderBuffer:checkIndex(int-int), DefaultChannelPipeline:addBefore0(String-DefaultChannelHandlerContext-DefaultChannelHandlerContext), ByteBufUtil:hexDump(ByteBuf), ByteBufUtil:lastIndexOf(ByteBuf-int-int-byte), AbstractChannel:<clinit>(), ObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf), ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), HttpRequest:setMethod(HttpMethod), ConcurrentHashMapV8$MapReduceKeysToLongTask:fork(), ReplayingDecoderBuffer:getBytes(int-byte[]), ReadOnlyByteBuf:getBytes(int-ByteBuf-int-int), ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int), DefaultPromise$CauseHolder:<init>(Throwable-DefaultPromise$1), PooledUnsafeDirectByteBuf:_setLong(int-long), Channel$Unsafe:closeForcibly(), FixedRecvByteBufAllocator:<init>(int), SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-HttpMessage-List), DiskAttribute:get(), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:<init>(), ChunkedWriteHandler$3:operationComplete(ChannelFuture), EmptyByteBuf:setIndex(int-int), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ServerBootstrap:group(), Parser:parseFrom(byte[]-int-int), AbstractChannel$CloseFuture:setSuccess(), DefaultSocketChannelConfig:validate(ChannelOption-Object), ForkJoinPool:acquirePlock(), CompactObjectInputStream:readStreamHeader(), AbstractEventExecutorGroup:<init>(), ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long), HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(String), DefaultChannelPipeline:connect(SocketAddress), AbstractChannel:close(ChannelPromise), SwappedByteBuf:discardReadBytes(), AbstractMemoryHttpData:setContent(File), AbstractChannel:<init>(Channel), SslHandler:channelActive(ChannelHandlerContext), SocksCmdType:fromByte(byte), SwappedByteBuf:unwrap(), CompatibleObjectEncoder:newObjectOutputStream(OutputStream), HttpPostRequestDecoder:findMultipartDisposition(), SpdyHeadersFrame:headers(), ChannelFuture:isSuccess(), ReplayingDecoderBuffer:readBytes(ByteBuffer), MixedFileUpload:addContent(ByteBuf-boolean), ThreadPerChannelEventLoopGroup:<init>(int), AbstractChannel:remoteAddress(), DefaultChannelHandlerContext:access$200(DefaultChannelHandlerContext), UnpooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int), ConcurrentHashMapV8:newKeySet(int), IdleStateHandler:access$102(IdleStateHandler-boolean), ForkJoinPool:invoke(ForkJoinTask), UnpooledHeapByteBuf:writerIndex(int), RxtxChannelConfig$Stopbits:valueOf(String), WebSocketClientHandshaker:setActualSubprotocol(String), MixedFileUpload:<init>(String-String-String-String-Charset-long-long), ServerSocketChannelUDT:accept(), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ImmediateExecutor:<init>(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:invoke(), ReadOnlyIterator:hasNext(), RxtxChannel:doClose(), ScheduledFutureTask:setSuccessInternal(Object), FileUpload:get(), ServerCookieEncoder:encode(Cookie), AbstractOioByteChannel:voidPromise(), HttpHeaders$1:entries(), DefaultHttpDataFactory:<init>(), ByteBuf:writeChar(int), LimitingByteInput:available(), ChunkedWriteHandler:access$300(ChunkedWriteHandler), DefaultChannelHandlerContext:disconnect(ChannelPromise), AbstractByteBuf:readBytes(int), DefaultThreadFactory:<init>(String-boolean), DefaultSpdyDataFrame:release(), FileUpload:isCompleted(), CaseIgnoringComparator:compare(Object-Object), UnpooledDirectByteBuf:_getLong(int), EmptyByteBuf:alloc(), OioDatagramChannel:leaveGroup(InetAddress), QueryStringEncoder$Param:<init>(String-String), HttpHeaderDateFormat:format(Date), HttpClientCodec$Decoder:decrement(Object), AdaptiveRecvByteBufAllocator:newHandle(), ChannelHandlerContext:read(), NioDatagramChannelConfig:setLoopbackModeDisabled(boolean), ReplayingDecoderBuffer:setLong(int-long), SpdyHeaderBlockRawEncoder:setLengthField(ByteBuf-int-int), ObjectDecoderInputStream:readLine(), NioUdtAcceptorChannel:doWriteMessages(Object[]-int-int-boolean), LocalServerChannel$1:<init>(LocalServerChannel), WebSocketClientHandshaker:newHandshakeRequest(), AbstractInternalLogger:info(String-Object-Object), PooledByteBuf:init(PoolChunk-long-int-int-int), CompositeByteBuf:setFloat(int-float), DefaultChannelGroup:flush(), SslHandler:decode(ChannelHandlerContext-ByteBuf-List), SpdyHeaderBlockDecoder:newInstance(int-int), RtspObjectDecoder:<init>(), AbstractReferenceCountedByteBuf:setInt(int-int), ByteBufAllocator:heapBuffer(), NioSocketChannel$2:run(), Unpooled:copiedBuffer(byte[]-int-int), AbstractNioChannel:doDeregister(), SocksCmdRequestDecoder:checkpoint(Object), NioSctpChannel:config(), CodedInputStream:readRawVarint32(), ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), AbstractReferenceCountedByteBuf:writeByte(int), DefaultChannelGroupFuture:removeListener(GenericFutureListener), AbstractChannel:access$700(AbstractChannel), CompatibleMarshallingDecoder:checkpoint(), ConcurrentHashMapV8$ForEachTransformedMappingTask:invoke(), LoggingHandler:logMessage(ChannelHandlerContext-String-Object), CompositeByteBuf:resetReaderIndex(), HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion), SslHandler:access$300(SslHandler), SwappedByteBuf:readBytes(byte[]), OioByteStreamChannel:<init>(Channel), EmptyByteBuf:setBytes(int-ByteBuf-int), QueryStringDecoder:<init>(String-Charset-boolean-int), SslHandler:setHandshakeTimeout(long-TimeUnit), ByteBuf:release(), SerialPort:setDTR(boolean), JdkLogger:debug(String), DefaultChannelPipeline:addBefore(EventExecutorGroup-String-String-ChannelHandler), MessageFormatter:doubleArrayAppend(StringBuffer-double[]), Unpooled:<clinit>(), LoggingHandler:deregister(ChannelHandlerContext-ChannelPromise), WebSocketServerProtocolHandler$ServerHandshakeStateEvent[]:clone(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:addToPendingCount(int), CommonsLogger:warn(String-Object-Object), DefaultChannelHandlerContext$6:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), CountedCompleter:exec(), FileUpload:duplicate(), ConcurrentHashMapV8:reduceKeysToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), SslHandler:setCloseNotifyTimeout(long-TimeUnit), AbstractReferenceCountedByteBuf:writeInt(int), ForkJoinPool:awaitQuiescence(long-TimeUnit), EmptyByteBuf:readChar(), CookieDecoder:decode(String), DefaultSocketChannelConfig:setSendBufferSize(int), Unmarshaller:start(ByteInput), OioByteStreamChannel:doClose(), PlatformDependent:javaVersion0(), AbstractEventExecutorGroup:schedule(Callable-long-TimeUnit), AbstractNioByteChannel$NioByteUnsafe:read(), SingleThreadEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), ConcurrentHashMapV8$1:<init>(), AbstractNioChannel:access$102(AbstractNioChannel-SocketAddress), ForkJoinPool$ForkJoinWorkerThreadFactory:newThread(ForkJoinPool), TrafficCounter:currentWrittenBytes(), CombinedChannelDuplexHandler:channelRegistered(ChannelHandlerContext), EventExecutor:invokeAny(Collection-long-TimeUnit), SslHandler:disconnect(ChannelHandlerContext-ChannelPromise), IllegalReferenceCountException:<init>(int), ReadOnlyByteBufferBuf:setBytes(int-ByteBuf-int-int), ConcurrentHashMapV8$SearchKeysTask:advance(), QueryStringDecoder:<init>(String-boolean), CountedCompleter:<init>(CountedCompleter), SctpChannelConfig:getRecvByteBufAllocator(), SocksAuthResponseDecoder:<init>(), NioSctpServerChannel$2:run(), LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf), HttpHeaders:getHost(HttpMessage-String), DefaultUdtChannelConfig:setAllocator(ByteBufAllocator), DefaultDatagramChannelConfig:setBroadcast(boolean), MixedAttribute:setCharset(Charset), LineBasedFrameDecoder:<init>(int-boolean-boolean), RecyclableArrayList:newInstance(), ForkJoinTask:internalPropagateException(Throwable), PooledByteBuf:deallocate(), CompactObjectOutputStream:writeByte(int), WebSocketServerHandshaker07:newWebsocketDecoder(), SingleThreadEventExecutor:runShutdownHooks(), FormattingTuple:trimmedCopy(Object[]), AbstractBootstrap:access$000(ChannelFuture-Channel-SocketAddress-ChannelPromise), OioSctpChannel:remoteAddress0(), ThreadPerChannelEventLoop:<init>(ThreadPerChannelEventLoopGroup), CompositeByteBuf:resetWriterIndex(), SSLSession:getPacketBufferSize(), ByteBuf:writeByte(int), AbstractChannel:doBeginRead(), AbstractByteBuf:skipBytes(int), Cookie:setHttpOnly(boolean), ChannelPipeline:get(Class), PooledUnsafeDirectByteBuf:arrayOffset(), DefaultFileRegion:deallocate(), HttpPostRequestEncoder$WrappedFullHttpRequest:refCnt(), ForkJoinTask$RunnableExecuteAction:<init>(Runnable), ByteBufInputStream:readLine(), ChannelFuture:isCancelled(), HttpRequestEncoder:encode(ChannelHandlerContext-HttpObject-List), AbstractHttpData:retain(int), ConnectTimeoutException:<init>(), UnreleasableByteBuf:slice(int-int), SerialPort:setRTS(boolean), DefaultChannelHandlerContext:writeAndFlush(Object-ChannelPromise), ForkJoinTask:helpExpungeStaleExceptions(), ChannelMatchers:isInstanceOf(Class), Unpooled:copiedBuffer(CharBuffer-Charset), UnreleasableByteBuf:writeBytes(ByteBuf-int), SingleThreadEventExecutor:takeTask(), Unsafe:park(boolean-long), DefaultSpdySynReplyFrame:isLast(), RecyclableArrayList:add(int-Object), PoolChunk:newSubpageArray(int), WebSocketServerHandshaker08:newWebsocketDecoder(), SpdySettingsFrame:isSet(int), ServerBootstrap:group(EventLoopGroup), DefaultChannelPromise:removeListeners(GenericFutureListener[]), ConcurrentHashMapV8$ForEachTransformedValueTask:addToPendingCount(int), AbstractByteBuf:capacity(int), CombinedChannelDuplexHandler:close(ChannelHandlerContext-ChannelPromise), Unsafe:getUnsafe(), ByteBuf:writeLong(long), ConcurrentHashMapV8:<clinit>(), AbstractInternalLogger:isErrorEnabled(), WebSocketServerProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List), UnreleasableByteBuf:setMedium(int-int), SwappedByteBuf:setFloat(int-float), DefaultChannelGroupFuture:setSuccess(Void), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), DefaultChannelHandlerContext:newPromise(), AbstractChannel$AbstractUnsafe:register0(ChannelPromise), JdkLogger:isTraceEnabled(), Bootstrap:remoteAddress(InetAddress-int), Log:warn(Object-Throwable), DiskFileUpload:setFilename(String), DefaultChannelPipeline:access$200(DefaultChannelPipeline-DefaultChannelHandlerContext), TrafficCounter$TrafficMonitoringTask:run(), SctpServerChannel:bindAddress(InetAddress), SpdyHeaders:removeScheme(int-SpdyHeadersFrame), LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int-boolean), AbstractByteBufAllocator:compositeBuffer(), EmbeddedChannel:newUnsafe(), HttpHeaders:getContentLength(HttpMessage), BinaryWebSocketFrame:copy(), HashedWheelTimer$Worker:run(), ForkJoinTask:getPool(), OioSctpChannel:openChannel(), WebSocketFrame:toString(), ReplayingDecoderBuffer:setCumulation(ByteBuf), SwappedByteBuf:writeBytes(InputStream-int), OioDatagramChannel:remoteAddress(), ConcurrentHashMapV8$ReduceValuesTask:fork(), UnreleasableByteBuf:writableBytes(), UnreleasableByteBuf:memoryAddress(), AbstractByteBuf:setBytes(int-ByteBuf), AbstractOioMessageChannel:unsafe(), HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse), EmbeddedChannel:remoteAddress0(), MixedFileUpload:release(int), SingleThreadEventExecutor$PurgeTask:run(), MessageToByteEncoder:acceptOutboundMessage(Object), EmptyByteBuf:checkLength(int), HashedWheelTimer$HashedWheelTimeout:<init>(HashedWheelTimer-TimerTask-long), DefaultChannelGroup:clear(), PooledDirectByteBuf:getBytes(int-OutputStream-int), SlicedByteBuf:setBytes(int-byte[]-int-int), SocksCmdRequestDecoder:state(), MessageToMessageCodec:<init>(), Cookie:getMaxAge(), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:addToPendingCount(int), HttpHeaders:setIntHeader(HttpMessage-String-int), AbstractByteBuf:bytesBefore(int-int-byte), SslHandler:handshake0(), CachingClassResolver:resolve(String), NioUdtProvider:newAcceptorChannelUDT(TypeUDT), DefaultChannelProgressivePromise:setSuccess(Object), HttpHeaders:setHost(HttpMessage-String), JdkLogger:isDebugEnabled(), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]), HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(String-Throwable), ForkJoinPool:<clinit>(), ConcurrentHashMapV8$ReduceValuesTask:addToPendingCount(int), WebSocketClientHandshakerFactory:<init>(), SctpServerChannel:getOption(SctpSocketOption), FileUpload:getContentType(), PooledByteBuf:<init>(Recycler$Handle-int), DefaultChannelHandlerContext:invokeChannelUnregistered(), DefaultServerSocketChannelConfig:setWriteBufferHighWaterMark(int), SwappedByteBuf:setChar(int-int), ChannelFuture:isDone(), DuplicatedByteBuf:setBytes(int-ScatteringByteChannel-int), PooledHeapByteBuf:_getUnsignedMedium(int), DefaultPromise:notifyListener0(Future-GenericFutureListener), DefaultSpdyRstStreamFrame:setStatus(SpdyStreamStatus), LocalAddress:compareTo(LocalAddress), AbstractEventExecutorGroup:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), HttpVersion:hashCode(), ReadOnlyByteBufferBuf:alloc(), SocksCommonUtils:ipv6toStr(byte[]), HttpHeaders:setHeader(HttpMessage-String-Object), EmptyByteBuf:readBytes(byte[]-int-int), WebSocketFrame:<init>(ByteBuf), CompositeByteBuf:setLong(int-long), SocketChannelUDT:socketUDT(), LastHttpContent:trailingHeaders(), AbstractChannel:doWrite(Object[]-int-int), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor), SctpServerChannel:open(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), DefaultFullHttpResponse:release(int), AbstractBootstrap:doBind(SocketAddress), CompositeByteBuf:writeBoolean(boolean), MemoryFileUpload:compareTo(Object), EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel-EmbeddedChannel$1), Snappy:validateChecksum(int-ByteBuf), DefaultAddressedEnvelope:content(), HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), DefaultSctpChannelConfig:setWriteBufferHighWaterMark(int), UnreleasableByteBuf:getBytes(int-byte[]-int-int), EmptyByteBuf:memoryAddress(), LocalChannel$4$1:<init>(LocalChannel$4), SingleThreadEventExecutor:wakeup(boolean), ZlibWrapper:values(), ByteBuf:getByte(int), AbstractInternalLogger:trace(String-Object-Object), NioUdtAcceptorChannel:doDisconnect(), DefaultUdtServerChannelConfig:setAutoRead(boolean), HttpObjectEncoder:encode(ChannelHandlerContext-Object-List), MessageToMessageCodec$1:encode(ChannelHandlerContext-Object-List), UnreleasableByteBuf:getBytes(int-byte[]), PlatformDependent0:putLong(long-long), ConcurrentHashMapV8$ForEachTransformedKeyTask:compute(), InternalLoggerFactory:<init>(), OioByteStreamChannel:doReadBytes(ByteBuf), DefaultDatagramChannelConfig:isReuseAddress(), MessageToByteEncoder:<init>(Class), HttpObjectDecoder:invalidMessage(Exception), PrematureChannelClosureException:<init>(Throwable), MemoryAttribute:compareTo(Attribute), ConcurrentHashMapV8$MapReduceValuesTask:addToPendingCount(int), DefaultProgressivePromise:isDone(), ConcurrentHashMapV8$ReduceKeysTask:addToPendingCount(int), SwappedByteBuf:getChar(int), PooledHeapByteBuf:internalNioBuffer(), DefaultFullHttpResponse:getProtocolVersion(), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), PoolChunk:siblingIdx(int), DefaultChannelConfig:setAutoRead(boolean), ConcurrentHashMapV8$MapReduceValuesToLongTask:invoke(), DuplicatedByteBuf:_getInt(int), DuplicatedByteBuf:setMedium(int-int), DefaultUdtChannelConfig:getProtocolSendBufferSize(), NioUdtByteConnectorChannel:<init>(SocketChannelUDT), ConcurrentHashMapV8$ForEachValueTask:fork(), ConcurrentHashMapV8:fullAddCount(long-ConcurrentHashMapV8$CounterHashCode-boolean), CodecException:<init>(String), AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int-int), AbstractDiskHttpData:tempFile(), ThreadLocalMarshallerProvider:getMarshaller(ChannelHandlerContext), NioUdtProvider:newChannel(), TrafficCounter:currentReadBytes(), ChannelHandlerContext:channel(), PoolChunk:nextRandom(), HttpObjectDecoder:readHeaders(ByteBuf), ByteBuf:ensureWritable(int), ByteBufUtil:<clinit>(), DefaultThreadFactory:<init>(String), ThreadPerChannelEventLoop:access$002(ThreadPerChannelEventLoop-Channel), AbstractNioByteChannel:doWriteBytes(ByteBuf-boolean), PooledHeapByteBuf:idx(int), HttpContentEncoder$State:<clinit>(), DefaultPromise:isCancelled0(Object), ConcurrentHashMapV8$TreeBin:<clinit>(), DefaultPromise:<init>(EventExecutor), DuplicatedByteBuf:capacity(), DefaultDatagramChannelConfig:<clinit>(), CompositeByteBuf:removeComponent(int), TrafficCounter$TrafficMonitoringTask:<init>(AbstractTrafficShapingHandler-TrafficCounter), AbstractNioByteChannel$NioByteUnsafe:close(ChannelPromise), WebSocketServerHandshaker07:newHandshakeResponse(FullHttpRequest-HttpHeaders), DefaultChannelGroup:flush(ChannelMatcher), LocalAddress:hashCode(), ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), DatagramPacket:retain(int), JdkLogger:trace(String-Object[]), AbstractByteBuf:writeBytes(ByteBuf), PooledByteBufAllocator:<init>(boolean-int-int-int-int), RtspObjectEncoder:<init>(), SnappyFramedEncoder:encode(ChannelHandlerContext-Object-ByteBuf), DefaultPromise$2:run(), BinaryWebSocketFrame:retain(int), SocksMessageType:values(), AbstractBootstrap:validate(), SingleThreadEventExecutor:execute(Runnable), ChannelPromiseNotifier:operationComplete(ChannelFuture), DefaultChannelPipeline$3:run(), IllegalReferenceCountException:<init>(int-int), DefaultChannelGroupFuture:setSuccess0(), Attribute:release(int), ServerSocketChannelConfig:getBacklog(), ChannelFlushPromiseNotifier:<init>(boolean), StringUtil:simpleClassName(Object), Log4JLogger:debug(String-Object-Object), EmptyByteBuf:isWritable(int), PooledUnsafeDirectByteBuf:_setByte(int-int), AbstractByteBuf:getDouble(int), AbstractByteBuf:readBytes(ByteBuffer), SwappedByteBuf:writerIndex(), ConcurrentHashMapV8$SearchKeysTask:compute(), Slf4JLogger:info(String), Channel:bind(SocketAddress-ChannelPromise), DefaultSpdySynReplyFrame:toString(), DefaultProgressivePromise:syncUninterruptibly(), UnpooledDirectByteBuf:_setMedium(int-int), ByteBuf:writeBytes(ScatteringByteChannel-int), HttpPostRequestEncoder$WrappedHttpRequest:<init>(HttpRequest), ConcurrentHashMapV8$KeyIterator:next(), ByteArrayDecoder:<init>(), DefaultChannelHandlerContext:access$700(DefaultChannelHandlerContext-Object), PooledHeapByteBuf:copy(int-int), UnreleasableByteBuf:toString(), ByteBuf:getUnsignedShort(int), ByteBuf:copy(int-int), ChannelPipeline:addLast(String-ChannelHandler), PrematureChannelClosureException:<init>(String), NioUdtAcceptorChannel:localAddress(), SslHandler:handlerAdded(ChannelHandlerContext), AbstractByteBuf:setBytes(int-byte[]), ReadOnlyByteBuf:nioBuffer(int-int), MessageList:promises(), AbstractChannel$AbstractUnsafe:flush(), SlicedByteBuf:_setByte(int-int), ReadOnlyUnsafeDirectByteBuf:copy(int-int), EmbeddedChannel:doDisconnect(), Logger:isInfoEnabled(), AbstractInternalLogger:isDebugEnabled(), DefaultChannelHandlerContext:invokeRead0(), ImmediateEventExecutor:newProgressivePromise(), ConcurrentHashMapV8:containsKey(Object), SpdyHeaderBlockEncoder:<init>(), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), DefaultSpdyDataFrame:getStreamId(), CompleteChannelFuture:executor(), WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int), HttpContentDecoder:decodeContent(HttpContent-List), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int), NioDatagramChannelConfig:setOption0(Object-Object), ConcurrentHashMapV8$EntrySetView:add(Object), ForkJoinPool$WorkQueue:poll(), CookieHeaderNames:<init>(), EmptyByteBuf:skipBytes(int), SpdySession$StreamState:hasReceivedReply(), ObjectEncoderOutputStream:<init>(OutputStream-int), MultithreadEventExecutorGroup$1:<init>(MultithreadEventExecutorGroup), HttpPostRequestDecoder:readLine(), DefaultChannelHandlerContext:fireChannelWritabilityChanged(), HttpHeaderDateFormat:<init>(), SpdyGoAwayFrame:getLastGoodStreamId(), PooledUnsafeDirectByteBuf:_getInt(int), AbstractNioChannel$AbstractNioUnsafe:voidPromise(), ChannelPipeline:remove(Class), DefaultUdtServerChannelConfig:setSoLinger(int), Log4JLogger:isErrorEnabled(), OioSctpChannel:allRemoteAddresses(), ByteBuf:setChar(int-int), AbstractByteBuf:writerIndex(int), ReadTimeoutHandler:<init>(int), DefaultFutureListeners:<init>(GenericFutureListener-GenericFutureListener), ConcurrentHashMapV8$EntrySetView:spliterator(), ConcurrentHashMapV8$ReduceEntriesTask:firstComplete(), DefaultChannelPipeline$TailHandler:<init>(), InternalLoggerFactory:getInstance(Class), ConcurrentHashMapV8:containsValue(Object), SocksMessageType:valueOf(String), ChannelPromise:addListener(GenericFutureListener), OioServerSocketChannel:isActive(), CommonsLogger:trace(String-Throwable), RxtxChannelConfig$Databits:valueOf(int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), HttpObjectEncoder:encodeAscii(String-ByteBuf), Unpooled:buffer(int-int), SSLException:<init>(String), AdaptiveRecvByteBufAllocator$HandleImpl:record(int), DiskAttribute:toString(), UnreleasableByteBuf:readBytes(ByteBuf), SingleThreadEventExecutor:addTask(Runnable), ConcurrentHashMapV8$EntrySpliterator:trySplit(), NioUdtMessageConnectorChannel:javaChannel(), CommonsLogger:isInfoEnabled(), NioEventLoop:run(), PooledUnsafeDirectByteBuf:internalNioBuffer(int-int), ChannelHandlerContext:name(), DefaultEventExecutorGroup:newChild(ThreadFactory-Object[]), MixedFileUpload:setContent(ByteBuf), ReadTimeoutHandler:channelActive(ChannelHandlerContext), LocalChannel:unsafe(), ByteBuf:forEachByteDesc(int-int-ByteBufProcessor), CompositeByteBuf:readBytes(ByteBuf-int), PooledUnsafeDirectByteBuf:newInternalNioBuffer(Object), RxtxChannel:doBind(SocketAddress), SpdySession$StreamState:<init>(byte-boolean-boolean-int-int), EventLoopException:<init>(String-Throwable), SpdyHeaderBlockZlibDecoder:decompress(SpdyHeadersFrame), PingWebSocketFrame:content(), PooledUnsafeDirectByteBuf:_setMedium(int-int), MixedFileUpload:getByteBuf(), SpdyCodecUtil:getUnsignedMedium(ByteBuf-int), EmptyByteBuf:setShort(int-int), ProtobufVarint32LengthFieldPrepender:<init>(), OioSocketChannel:shutdownOutput(), WebSocket08FrameDecoder$State:<clinit>(), OioSocketChannel:doBind(SocketAddress), EventExecutor:terminationFuture(), PoolChunkList:allocate(PooledByteBuf-int-int), HttpHeaders:remove(String), SocksCmdResponseDecoder$State:<clinit>(), ReplayingDecoderBuffer:readSlice(int), DefaultSpdySynReplyFrame:<init>(int), ConcurrentHashMapV8$ForEachKeyTask:invoke(), UnreleasableByteBuf:writeDouble(double), WebSocketServerHandshaker00:maxFramePayloadLength(), DefaultFullHttpResponse:getStatus(), ForkJoinPool:makeCommonPool(), ReplayingDecoderBuffer:readBytes(OutputStream-int), DefaultHttpHeaders:remove(String), UnpooledHeapByteBuf:setInt(int-int), UnpooledByteBufAllocator:newDirectBuffer(int-int), PooledUnsafeDirectByteBuf:maxCapacity(int), OioSctpServerChannel:eventLoop(), WriteTimeoutHandler:writeTimedOut(ChannelHandlerContext), ChannelInboundHandlerAdapter:channelReadComplete(ChannelHandlerContext), DefaultChannelPromise:<init>(Channel), SocksAuthResponseDecoder$State:ordinal(), LocalServerChannel$2:<init>(LocalServerChannel-LocalChannel), SoftReferenceMap:fold(Object), ForkJoinTask:reinitialize(), ConcurrentHashMapV8$MapReduceEntriesTask:advance(), SpdyHeaders$HttpNames:<init>(), DefaultSctpServerChannelConfig:getSendBufferSize(), OioEventLoopGroup:<init>(int-ThreadFactory), ReadTimeoutHandler:channelInactive(ChannelHandlerContext), DefaultSpdySettingsFrame:toString(), ConcurrentHashMapV8$ValueSpliterator:tryAdvance(ConcurrentHashMapV8$Action), Marshaller:finish(), DefaultChannelPipeline:addFirst(String-ChannelHandler), LineBasedFrameDecoder:fail(ChannelHandlerContext-int), DuplicatedByteBuf:getBytes(int-GatheringByteChannel-int), HttpResponseStatus:code(), ForkJoinTask:invokeAll(ForkJoinTask-ForkJoinTask), WebSocketClientHandshaker:setHandshakeComplete(), ByteBuf:readBytes(ByteBuf-int-int), DefaultCookie:getPorts(), LocalChannel:access$000(LocalChannel), AbstractHttpData:<clinit>(), UnreleasableByteBuf:readLong(), HttpPostRequestEncoder$WrappedHttpRequest:getProtocolVersion(), WriteTimeoutHandler$1:run(), ByteBufUtil:hexDump(ByteBuf-int-int), LengthFieldPrepender:<init>(int-int-boolean), SctpMessage:duplicate(), IdleStateHandler:channelActive(ChannelHandlerContext), NioUdtMessageConnectorChannel:<clinit>(), SpdySession$StreamState:closeLocalSide(), DefaultDatagramChannelConfig:getNetworkInterface(), ServerBootstrap:clone(), ByteBuf:readBytes(OutputStream-int), CtMethod:setBody(String), SpdyHttpDecoder:removeMessage(int), OioSctpChannel$1:<init>(OioSctpChannel-InetAddress-ChannelPromise), ReplayingDecoder:<init>(Object), RxtxDeviceAddress:value(), PromiseTask:setUncancellableInternal(), ConcurrentHashMapV8$ForEachTransformedValueTask:propagateCompletion(), SpdySessionStatus:hashCode(), HttpRequest:getMethod(), DuplicatedByteBuf:arrayOffset(), SingleThreadEventExecutor$5:<init>(SingleThreadEventExecutor-ScheduledFutureTask), DefaultSpdySynStreamFrame:getPriority(), FullHttpRequest:content(), PoolChunk:allocate(int), ReadOnlyByteBuf:internalNioBuffer(int-int), JavassistTypeParameterMatcherGenerator:<init>(), AbstractChannel:newUnsafe(), MixedAttribute:<init>(String-String-long), CompositeByteBuf:writeShort(int), UnreleasableByteBuf:nioBuffers(), ChunkedInput:readChunk(ChannelHandlerContext), ObjectEncoderOutputStream:writeObject(Object), WebSocketUtil:<init>(), AbstractByteBuf:getBytes(int-OutputStream-int), ConcurrentSet:add(Object), ObjectEncoderOutputStream:writeLong(long), DefaultChannelPipeline:addAfter(String-String-ChannelHandler), SocksInitRequestDecoder$State:<init>(String-int), Logger:error(String-Object-Object), Snappy:encodeLiteral(ByteBuf-ByteBuf-int), ReplayingDecoderBuffer:toString(), WebSocketClientHandshaker08:verify(FullHttpResponse), JdkLogger:info(String-Object-Object), UnreleasableByteBuf:writeLong(long), GlobalEventExecutor:access$302(GlobalEventExecutor-int), DefaultByteBufHolder:retain(), DefaultSpdySynStreamFrame:setLast(boolean), OioDatagramChannel:doWrite(Object[]-int-int), DefaultUdtServerChannelConfig:setSendBufferSize(int), ChannelGroupException:<init>(Collection), ChannelHandlerContext:alloc(), LocalChannel:access$502(LocalChannel-LocalChannel), PooledDirectByteBuf:newInternalNioBuffer(ByteBuffer), UnpooledDirectByteBuf:memoryAddress(), ConcurrentHashMapV8$KeySetView:remove(Object), ForkJoinTask:doJoin(), AbstractTrafficShapingHandler:configure(long-long), ChannelHandlerContext:fireChannelUnregistered(), DefaultDatagramChannelConfig:setReceiveBufferSize(int), HttpObjectDecoder$State[]:clone(), DuplicatedByteBuf:setByte(int-int), NioUdtByteRendezvousChannel:javaChannel(), HttpHeaders:set100ContinueExpected(HttpMessage-boolean), NioSctpChannel:remoteAddress0(), ConcurrentHashMapV8:<init>(Map), SpdySession:isActiveStream(int), MultithreadEventExecutorGroup:isShutdown(), CompositeByteBuf:writeByte(int), DefaultChannelConfig:getOptions(), ByteBuf:forEachByte(int-int-ByteBufProcessor), UnreleasableByteBuf:array(), SslHandler:access$200(SslHandler), HttpHeaders:setDateHeader(HttpMessage-String-Date), PromiseTask$RunnableAdapter:<init>(Runnable-Object), NioSctpServerChannel:doConnect(SocketAddress-SocketAddress), AbstractTrafficShapingHandler:access$000(), ChannelHandlerContext:close(ChannelPromise), NioEventLoop:delayNanos(long), CommonsLogger:trace(String-Object-Object), ByteBufInputStream:readDouble(), DefaultChannelHandlerContext$8:run(), WebSocketServerHandshaker$1:operationComplete(Future), UnreleasableByteBuf:retain(), DefaultChannelPipeline$2:<init>(DefaultChannelPipeline-DefaultChannelHandlerContext-String-DefaultChannelHandlerContext), DuplicatedByteBuf:slice(int-int), ZlibUtil:fail(Deflater-String-int), StatusUDT:ordinal(), EmptyByteBuf:writeByte(int), CompositeByteBuf:checkIndex(int-int), DefaultPromise:<clinit>(), ReadOnlyByteBufferBuf:getByte(int), SctpChannel:unbindAddress(InetAddress), ConcurrentHashMapV8$SearchKeysTask:getRawResult(), SocketChannelConfig:getWriteSpinCount(), ByteToMessageCodec$2:decode(ChannelHandlerContext-ByteBuf-List), DefaultAddressedEnvelope:retain(), AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel), TrafficCounter:checkInterval(), DefaultSctpServerChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), AbstractByteBuf:writeDouble(double), AdaptiveRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator), DuplicatedByteBuf:hasArray(), WebSocketClientHandshaker13:maxFramePayloadLength(), WriteTimeoutHandler:<init>(long-TimeUnit), ChannelHandlerContext:attr(AttributeKey), AbstractInternalLogger:debug(String-Object-Object), DefaultHttpHeaders:set(String-Object), ImmediateEventExecutor$ImmediateProgressivePromise:<init>(EventExecutor), Snappy:encodeCopy(ByteBuf-int-int), ReplayingDecoder:<clinit>(), ServerBootstrap:validate(), SocksCmdResponseDecoder$State:<init>(String-int), HttpPostRequestEncoder$WrappedHttpRequest:setUri(String), ConcurrentHashMapV8$BaseIterator:advance(), WebSocketServerHandshaker$1:operationComplete(ChannelFuture), MixedFileUpload:getString(), ServerBootstrap:bind(SocketAddress), AbstractByteBuf:compareTo(Object), Log4JLogger:error(String-Throwable), ChannelInboundHandler:channelReadComplete(ChannelHandlerContext), FullHttpRequest:headers(), AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf-int), AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel-AbstractNioByteChannel$1), HttpContentEncoder$State:values(), DefaultChannelProgressivePromise:setFailure(Throwable), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:fork(), DefaultChannelGroup$1:operationComplete(ChannelFuture), DefaultHttpHeaders:remove0(int-int-String), IdleStateHandler:<init>(long-long-long-TimeUnit), DefaultSpdySynReplyFrame:appendHeaders(StringBuilder), DefaultChannelPipeline:fireChannelInactive(), SslHandler$PendingWrite:<init>(ByteBuf-ChannelPromise), SpdyOrHttpChooser$SelectedProtocol:valueOf(String), DefaultHttpHeaders:set(String-Iterable), ContinuationWebSocketFrame:<init>(ByteBuf), AbstractByteBuf:setShort(int-int), NioDatagramChannel:doBind(SocketAddress), HttpHeaders:setKeepAlive(HttpMessage-boolean), ConcurrentHashMapV8:values(), UnpooledUnsafeDirectByteBuf:copy(int-int), DefaultChannelPipeline:iterator(), SslHandshakeCompletionEvent:<init>(), SpdyFrameDecoder$State:<init>(String-int), DefaultSpdyWindowUpdateFrame:getDeltaWindowSize(), AbstractBootstrap$1:operationComplete(ChannelFuture), DefaultChannelHandlerContext:invokeBind(SocketAddress-ChannelPromise), PooledHeapByteBuf:maxCapacity(), ByteBufProcessor$9:<init>(), SpdyCodecUtil:getUnsignedShort(ByteBuf-int), SslHandler:write(ChannelHandlerContext-Object-ChannelPromise), DefaultHttpHeaders$HeaderEntry:remove(), Bootstrap:validate(), ByteBuf:setBytes(int-byte[]-int-int), AbstractEventExecutor:newPromise(), ConcurrentHashMapV8$ForEachKeyTask:propagateCompletion(), ForkJoinTask:getThrowableException(), DefaultRxtxChannelConfig:setStopbits(RxtxChannelConfig$Stopbits), ReadOnlyUnsafeDirectByteBuf:getBytes(int-byte[]-int-int), SocksInitResponse:encodeAsByteBuf(ByteBuf), AbstractReferenceCountedByteBuf:<init>(int), PoolArena$HeapArena:memoryCopy(byte[]-int-byte[]-int-int), SelectorProviderUDT:openSocketChannel(), WebSocketServerHandshaker00:<clinit>(), Channel:flush(), PongWebSocketFrame:<init>(boolean-int-ByteBuf), ConcurrentHashMapV8$EntrySetView:remove(Object), UnpooledHeapByteBuf:copy(int-int), UnpooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int), PoolArena$DirectArena:<clinit>(), HttpPostRequestDecoder:next(), SslHandler:unwrap(ChannelHandlerContext-ByteBuffer-List), CompositeByteBuf:hasArray(), HttpHeaders:isContentLengthSet(HttpMessage), DefaultChannelGroupFuture$DefaultEntry:setValue(Object), ByteBuf:isReadable(int), SwappedByteBuf:writeLong(long), OioSctpChannel:doDisconnect(), AbstractNioMessageChannel:eventLoop(), Cookie:setDomain(String), SpdyHeaderBlockRawDecoder:end(), AbstractReferenceCountedByteBuf:skipBytes(int), MessageToMessageCodec$1:acceptOutboundMessage(Object), SpdySession:updateReceiveWindowSize(int-int), DefaultCookie:setPorts(Iterable), SingleThreadEventExecutor:access$200(SingleThreadEventExecutor), HttpVersion:protocolName(), GlobalEventExecutor:fetchFromDelayedQueue(), NioUdtByteConnectorChannel:<init>(TypeUDT), ReadTimeoutHandler:channelRegistered(ChannelHandlerContext), InterfaceHttpData:release(), HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(), EmptyByteBuf:setByte(int-int), StringUtil:split(String-char), ChunkedNioFile:close(), ReferenceCounted:retain(int), UnreleasableByteBuf:retain(int), PooledHeapByteBuf:_getLong(int), ConcurrentHashMapV8$ReduceKeysTask:advance(), ConcurrentHashMapV8$SearchMappingsTask:compute(), MixedAttribute:isInMemory(), OioSocketChannel:remoteAddress0(), ReplayingDecoderBuffer:getFloat(int), OioServerSocketChannel:<clinit>(), DatagramPacket:sender(), UnpooledHeapByteBuf:setArray(byte[]), HttpHeaderDateFormat:setTimeZone(TimeZone), EventExecutor:isTerminated(), UnreleasableByteBuf:hashCode(), ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuffer), BlockingOperationException:<init>(), WebSocketServerProtocolHandshakeHandler$1:operationComplete(Future), PingWebSocketFrame:isFinalFragment(), MixedAttribute:addContent(ByteBuf-boolean), HttpPostBodyUtil:<init>(), SpdyHeaderBlockDecoder:decode(ByteBuf-SpdyHeadersFrame), ObjectEncoderOutputStream:writeBytes(String), CombinedChannelDuplexHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), NioDatagramChannel:doReadMessages(List), ResourceLeakDetector$DefaultResourceLeak:clear(), MixedAttribute:length(), EmbeddedSocketAddress:<init>(), ByteBufOutputStream:writeBytes(String), HttpContentDecoder:newContentDecoder(String), WebSocketFrame:retain(int), GlobalEventExecutor$TaskRunner:run(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:compute(), DiskAttribute:compareTo(Attribute), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:firstComplete(), DefaultChannelHandlerContext$7:run(), AbstractReferenceCountedByteBuf:writeBytes(byte[]-int-int), EmbeddedChannel:isOpen(), ReplayingDecoder:checkpoint(Object), IdleStateHandler$WriterIdleTimeoutTask:run(), WebSocketServerHandshaker:newWebsocketDecoder(), AbstractChannel$AbstractUnsafe$3:<init>(AbstractChannel$AbstractUnsafe), RxtxChannel$RxtxUnsafe:closeIfClosed(), NioDatagramChannelConfig:<init>(NioDatagramChannel-DatagramChannel), JZlibDecoder:<init>(), LoggingHandler:write(ChannelHandlerContext-Object-ChannelPromise), SpdyFrameDecoder$State:<clinit>(), ByteBuf:getBytes(int-GatheringByteChannel-int), DefaultFullHttpRequest:getMethod(), SslHandler:<init>(SSLEngine-Executor), DefaultAttributeMap$DefaultAttribute:get(), DefaultSpdySettingsFrame$Setting:setPersisted(boolean), SwappedByteBuf:getBytes(int-OutputStream-int), SpdySession$PriorityComparator:<init>(SpdySession-SpdySession$1), Snappy:validateOffset(int-int), MessageInfo:streamNumber(), Unpooled:wrappedBuffer(byte[]), NioSctpChannel:localAddress(), ReferenceCounted:retain(), OioSocketChannelConfig:getConnectTimeoutMillis(), ForkJoinPool$1:<init>(), MessageToMessageDecoder:<init>(Class), ConcurrentHashMapV8$SearchValuesTask:compute(), ConcurrentHashMapV8:toString(), ConcurrentHashMapV8:readObject(ObjectInputStream), SpdyHeaders$1:set(String-Object), SpdySynReplyFrame:headers(), ByteBufUtil:equals(ByteBuf-ByteBuf), Slf4JLogger:debug(String-Object), HttpPostRequestEncoder:addBodyFileUploads(String-File[]-String[]-boolean[]), DefaultChannelPipeline:callHandlerAdded(ChannelHandlerContext), DefaultServerSocketChannelConfig:setOption(ChannelOption-Object), GlobalEventExecutor:schedule(Runnable-long-TimeUnit), UnreleasableByteBuf:getBytes(int-ByteBuf-int), SocksInitResponseDecoder:state(), ForkJoinPool:awaitWork(ForkJoinPool$WorkQueue-long-int), CompositeByteBuf:addComponents(Iterable), OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress), WebSocket08FrameDecoder:checkpoint(Object), SpdyHeaders:set(String-Iterable), DefaultChannelHandlerContext$3:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), WebSocketProtocolHandler:<init>(), NetUtil:isValidIpV6Address(String), ByteBuf:isWritable(), AbstractNioMessageChannel:doReadMessages(List), BlockingOperationException:<init>(Throwable), WebSocketServerHandshaker07:selectSubprotocol(String), DefaultPromise:await(), SpdyStreamStatus:toString(), CountedCompleter:onExceptionalCompletion(Throwable-CountedCompleter), DefaultChannelGroupFuture:addListeners(GenericFutureListener[]), SpdyFrameDecoder$1:<clinit>(), ConcurrentHashMapV8$EntrySetView:iterator(), InterfaceHttpData$HttpDataType:<clinit>(), SpdyHttpHeaders:<init>(), AbstractMemoryHttpData:<init>(String-Charset-long), HttpPostRequestDecoder:cleanString(String), UnreleasableByteBuf:resetWriterIndex(), SslHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), HttpContentCompressor:<init>(int), SwappedByteBuf:nioBuffer(int-int), UnpooledUnsafeDirectByteBuf:_setLong(int-long), DefaultUdtChannelConfig:getSoLinger(), UTF8Output:write(byte[]), SSLEngineResult:getHandshakeStatus(), DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long), ReadOnlyByteBuf:getBytes(int-ByteBuffer), HttpClientCodec$Decoder:<init>(HttpClientCodec-int-int-int), SwappedByteBuf:resetReaderIndex(), Snappy:maskChecksum(int), AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int-int), AbstractMemoryHttpData:get(), AbstractByteBuf:getShort(int), NioEventLoop:unregisterWritableTasks(AbstractNioChannel), DefaultChannelProgressivePromise:setSuccess(), ReadOnlyByteBuf:order(), DefaultRxtxChannelConfig:setWriteSpinCount(int), ForkJoinTask:rethrow(Throwable), ByteBufInputStream:readInt(), ObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf), HttpPostRequestEncoder:initDataMultipart(), ContinuationWebSocketFrame:rsv(), ForkJoinPool:fullExternalPush(ForkJoinTask), Striped64:fn(long-long), ReplayingDecoderBuffer:readMedium(), GlobalEventExecutor:<clinit>(), SwappedByteBuf:getBytes(int-ByteBuf-int-int), ChannelPromise:setUncancellable(), OioDatagramChannel:doReadMessages(List), ThreadLocalRandom:nextInt(int), ChannelHandlerContext:fireChannelWritabilityChanged(), NioSocketUDT:getRemoteSocketAddress(), ReplayingDecoderBuffer:order(ByteOrder), ChunkedFile:<init>(File), AbstractByteBuf:writeBytes(byte[]-int-int), AbstractByteBuf:writeBytes(ByteBuf-int-int), VoidChannelPromise:awaitUninterruptibly(), DefaultAttributeMap$DefaultAttribute:getAndSet(Object), JdkLoggerFactory:newInstance(String), EventExecutor:schedule(Runnable-long-TimeUnit), Logger:trace(String-Object-Object), DefaultHttpContent:getDecoderResult(), DefaultChannelHandlerContext:access$800(DefaultChannelHandlerContext-Object), HttpContentDecoder:cleanup(), UnreleasableByteBuf:readSlice(int), DefaultFullHttpRequest:trailingHeaders(), ByteBuf:setFloat(int-float), Channel$Unsafe:close(ChannelPromise), CompositeByteBuf:writeMedium(int), LocalChannel:pipeline(), AbstractInternalLogger:error(String-Object), Unpooled:copyBoolean(boolean), UnreleasableByteBuf:getChar(int), SpdyHttpResponseStreamIdHandler:decode(ChannelHandlerContext-Object-List), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf-String), SpdySession:getReceiveWindowSizeLowerBound(int), DuplicatedByteBuf:_setShort(int-int), AbstractNioByteChannel:doReadBytes(ByteBuf), HttpContent:refCnt(), ReplayingDecoderBuffer:readBytes(ByteBuf), SctpMessage:refCnt(), ReplayingDecoderBuffer:getUnsignedByte(int), ConcurrentHashMapV8$SearchKeysTask:quietlyCompleteRoot(), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-ByteBuf[]), ReplayingDecoderBuffer:readUnsignedShort(), SpdySession:updateSendWindowSize(int-int), DuplicatedByteBuf:alloc(), ByteBufInputStream:readBytes(), BinaryWebSocketFrame:duplicate(), AbstractByteBuf:checkSrcIndex(int-int-int-int), ThreadLocalRandom:setSeed(long), DefaultHttpContent:toString(), CountedCompleter:onCompletion(CountedCompleter), WebSocketServerProtocolHandler:decode(ChannelHandlerContext-Object-List), ConcurrentHashMapV8$KeySetView:hashCode(), DefaultChannelPromise:awaitUninterruptibly(), DefaultCookie:validateValue(String-String), SnappyFramedDecoder$ChunkType:ordinal(), Deflater:deflateInit(int-int-int-JZlib$WrapperType), FullHttpResponse:getStatus(), CompactObjectOutputStream:writeStreamHeader(), DefaultChannelPipeline:get(String), DefaultOioSocketChannelConfig:setTcpNoDelay(boolean), NioUdtByteAcceptorChannel:<init>(), HttpData:delete(), Log:isTraceEnabled(), ConcurrentHashMapV8$MapReduceValuesToIntTask:getRawResult(), SnappyFramedEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), AbstractReferenceCountedByteBuf:ensureWritable(int), AbstractInternalLogger:warn(String), SctpNotificationHandler:handleNotification(AssociationChangeNotification-Object), DefaultChannelHandlerContext:invokeFlush(), CompositeByteBuf:writeBytes(ByteBuf-int-int), CompositeByteBuf:writeFloat(float), DefaultChannelPipeline:addLast(EventExecutorGroup-String-ChannelHandler), HttpPostRequestEncoder$WrappedFullHttpRequest:getUri(), OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise), AbstractEventExecutor:submit(Callable), DefaultPromise:setFailure0(Throwable), SpdyPingFrame:getId(), InternalLogLevel:valueOf(String), PoolChunk:<init>(PoolArena-Object-int-int-int-int), SlicedByteBuf:hasArray(), HttpResponse:getStatus(), ReadOnlyByteBuf:setLong(int-long), AbstractOioMessageChannel:isOpen(), DefaultEventExecutor:run(), Unpooled:wrappedBuffer(ByteBuf[]), SystemPropertyUtil:contains(String), UnpooledUnsafeDirectByteBuf:capacity(int), AbstractByteBuf:readByte(), AbstractChannel:deregister(ChannelPromise), AbstractNioMessageChannel:pipeline(), Log4JLogger:trace(String-Throwable), MixedAttribute:delete(), SSLEngine:getDelegatedTask(), UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer), ReferenceCountUtil:release(Object-int), DefaultUdtChannelConfig:setProtocolSendBufferSize(int), EmptyByteBuf:capacity(int), PooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int), NioUdtAcceptorChannel:<clinit>(), ByteToMessageCodec$1:<init>(ByteToMessageCodec), DefaultOioSocketChannelConfig:setWriteSpinCount(int), ReplayingDecoderBuffer:nioBufferCount(), ChannelOutboundHandlerAdapter:disconnect(ChannelHandlerContext-ChannelPromise), ImmediateEventExecutor:execute(Runnable), DefaultLastHttpContent:retain(int), FileUpload:compareTo(Object), SpdyHeaderBlockZlibEncoder:setInput(ByteBuf), PooledUnsafeDirectByteBuf:initUnpooled(PoolChunk-int), SwappedByteBuf:forEachByte(ByteBufProcessor), UnpooledHeapByteBuf:_setLong(int-long), InternalAttribute:addValue(String-int), DefaultUdtChannelConfig:getOptions(Map-ChannelOption[]), DefaultSocketChannelConfig:setMaxMessagesPerRead(int), DefaultChannelHandlerContext:invokeChannelInactive(), NioSctpServerChannel:eventLoop(), ForkJoinPool:getUnsafe(), Unpooled:copiedBuffer(CharSequence-Charset), SpdySessionHandler:exceptionCaught(ChannelHandlerContext-Throwable), DefaultChannelPipeline:generateName(ChannelHandler), SnappyFramedEncoder:setChunkLength(ByteBuf-int), NioEventLoop:<init>(NioEventLoopGroup-ThreadFactory-SelectorProvider), RxtxChannelConfig$Stopbits:value(), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long), ServerBootstrap$ServerBootstrapAcceptor:<init>(EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), SwappedByteBuf:memoryAddress(), PooledHeapByteBuf:checkSrcIndex(int-int-int-int), AbstractReferenceCountedByteBuf:resetWriterIndex(), Signal:<init>(String), ConcurrentHashMapV8$KeySetView:equals(Object), AbstractInternalLogger:<init>(String), CommonsLogger:debug(String), DuplicatedByteBuf:setBytes(int-byte[]-int-int), RxtxChannelConfig:getOption(ChannelOption), EmptyByteBuf:setBytes(int-InputStream-int), UnreleasableByteBuf:setChar(int-int), RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse), RtspResponseStatuses:<init>(), MemoryAttribute:retain(), DefaultChannelConfig:setWriteBufferLowWaterMark(int), Slf4JLogger:isDebugEnabled(), EmptyByteBuf:readBytes(byte[]), HttpPostRequestDecoder:cleanFiles(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:addToPendingCount(int), BinaryWebSocketFrame:rsv(), DefaultSpdyHeaders:set(String-Iterable), SwappedByteBuf:setBytes(int-ByteBuffer), DefaultUdtChannelConfig:getReceiveBufferSize(), MixedFileUpload:get(), InternalAttribute:toByteBuf(), DelimiterBasedFrameDecoder:<init>(int-ByteBuf), SingleThreadEventExecutor:schedule(ScheduledFutureTask), AbstractDerivedByteBuf:release(int), OioSctpChannel$1:run(), ConcurrentHashMapV8$TreeBin:find(int-Object), ChannelOutboundBuffer:incrementPendingOutboundBytes(int), Signal:<clinit>(), Cookie:getName(), ThreadLocalRandom:nextDouble(), UnreleasableByteBuf:discardReadBytes(), WebSocketServerProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable), AbstractChannel:newFailedFuture(Throwable), DefaultByteBufHolder:release(int), ZlibUtil:fail(Inflater-String-int), Log4JLogger:info(String-Object), FullHttpResponse:content(), MultithreadEventExecutorGroup:terminationFuture(), OioSctpServerChannel:<clinit>(), ClassResolvers:weakCachingConcurrentResolver(ClassLoader), DefaultOioServerSocketChannelConfig:getOptions(), ServerBootstrap$ServerBootstrapAcceptor:channelRead(ChannelHandlerContext-Object), OioSctpChannel:config(), ByteBuf:capacity(), SlicedByteBuf:_getUnsignedMedium(int), ConcurrentHashMapV8$ReduceEntriesTask:compute(), Channel$Unsafe:disconnect(ChannelPromise), LongAdder:reset(), DefaultChannelPromise:syncUninterruptibly(), UnknownSocksResponse:<init>(), CompositeByteBuf:getBytes(int-ByteBuf-int-int), DefaultAddressedEnvelope:<init>(Object-SocketAddress), StringEncoder:encode(ChannelHandlerContext-CharSequence-ByteBuf), PlatformDependent0:<init>(), ContinuationWebSocketFrame:copy(), DefaultPromise:rethrowIfFailed(), ReadOnlyByteBufferBuf:ensureAccessible(), CombinedChannelDuplexHandler:handlerAdded(ChannelHandlerContext), ByteBuf:unwrap(), EventExecutor:submit(Runnable), DefaultSctpServerChannelConfig:setSendBufferSize(int), DefaultChannelHandlerContext$5:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String), DefaultChannelHandlerContext:access$1000(DefaultChannelHandlerContext), ContextBoundUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), NioSctpServerChannel:<init>(), ConcurrentHashMapV8$MapReduceValuesToLongTask:advance(), SctpChannel:association(), DefaultSpdyHeadersFrame:setLast(boolean), SctpMessage:retain(), LocalChannel$LocalUnsafe:<init>(LocalChannel), SocksInitRequestDecoder:<init>(), AbstractReferenceCountedByteBuf:readBytes(ByteBuf), DefaultHttpResponse:setStatus(HttpResponseStatus), TextWebSocketFrame:isFinalFragment(), UnpooledDirectByteBuf:getShort(int), PlatformDependent:newConcurrentHashMap(int-float), SlicedByteBuf:isDirect(), ForkJoinTask:setRawResult(Object), HttpResponseEncoder:acceptOutboundMessage(Object), SocksRequestType:values(), PlatformDependent:canEnableTcpNoDelayByDefault(), RecyclableArrayList:addAll(int-Collection), Unsafe:arrayBaseOffset(Class), ByteBufUtil:swapInt(int), PooledDirectByteBuf:internalNioBuffer(int-int), DiskFileUpload:getHttpDataType(), DefaultSpdyHeaders$HeaderEntry:getValue(), AbstractEventExecutor:newFailedFuture(Throwable), NioUdtMessageConnectorChannel:<init>(TypeUDT), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), RxtxChannelConfig$Databits[]:clone(), PooledDirectByteBuf:internalNioBuffer(), EncoderException:<init>(Throwable), SingleThreadEventExecutor:runAllTasks(), ReferenceMap:isEmpty(), DefaultSocketChannelConfig:setAllocator(ByteBufAllocator), SctpChannelOption:<clinit>(), OioSocketChannel:localAddress0(), ChannelFutureListener$3:operationComplete(Future), SpdyHttpResponseStreamIdHandler:<clinit>(), TextWebSocketFrame:retain(int), DefaultSocketChannelConfig:isKeepAlive(), WebSocketClientHandshaker:isHandshakeComplete(), ReadOnlyUnsafeDirectByteBuf:_getByte(int), AdaptiveRecvByteBufAllocator:<clinit>(), ChannelTrafficShapingHandler:<init>(long-long-long), OioSocketChannel:activate(InputStream-OutputStream), CloseWebSocketFrame:isFinalFragment(), ConcurrentHashMapV8$ForEachEntryTask:advance(), HttpRequest:getProtocolVersion(), InternalLogLevel[]:clone(), DefaultChannelHandlerContext:connect(SocketAddress-ChannelPromise), DefaultDatagramChannelConfig:setAutoRead(boolean), AbstractNioChannel:javaChannel(), ChannelTrafficShapingHandler:handlerAdded(ChannelHandlerContext), ChannelOutboundHandlerAdapter:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), NioEventLoop:wakeup(boolean), HttpHeaders:getContentLength(HttpMessage-long), HttpHeaders:isKeepAlive(HttpMessage), JdkZlibEncoder:isClosed(), ZlibDecoder:<init>(), DefaultUdtServerChannelConfig:validate(ChannelOption-Object), ByteBufInputStream:skipBytes(int), Unpooled:buffer(int), ByteArrayEncoder:<init>(), NioUdtProvider:newRendezvousChannelUDT(TypeUDT), UnpooledUnsafeDirectByteBuf:setIndex(int-int), Striped64:access$000(), ByteToMessageCodec:channelRead(ChannelHandlerContext-Object), Inflater:inflate(int), InternalLogger:warn(String-Throwable), UnreleasableByteBuf:readBytes(ByteBuffer), HttpPostRequestDecoder$MultiPartStatus[]:clone(), GlobalEventExecutor:access$200(GlobalEventExecutor), UnpooledHeapByteBuf:_setInt(int-int), Logger:warn(String-Throwable), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:fork(), PoolArena:newSubpagePoolArray(int), ObjectEncoderOutputStream:writeChars(String), AbstractByteBuf:bytesBefore(int-byte), HttpPostRequestDecoder:readDelimiter(String), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int), OioSctpServerChannel:isActive(), LengthFieldPrepender:<init>(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), UnreleasableByteBuf:writeFloat(float), AbstractBootstrap:bind(InetAddress-int), ConcurrentHashMapV8$EntrySetView:containsAll(Collection), ReplayingDecoderBuffer:writeShort(int), Log:isWarnEnabled(), SerialPort:close(), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress), UnpooledUnsafeDirectByteBuf:_getByte(int), NioDatagramChannel:block(InetAddress-InetAddress), MessageFormatter:longArrayAppend(StringBuffer-long[]), AbstractByteBuf:discardReadBytes(), DefaultSocketChannelConfig:getSoLinger(), AbstractMemoryHttpData:getChunk(int), ChannelMetadata:hasDisconnect(), FileUpload:isInMemory(), QueryStringDecoder:<init>(URI), PooledUnsafeDirectByteBuf:checkIndex(int-int), DuplicatedByteBuf:forEachByte(int-int-ByteBufProcessor), QueryStringDecoder:decodeParams(String), PooledHeapByteBuf:_getShort(int), NioSctpServerChannel$2:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), Inflater:inflateEnd(), Delimiters:<init>(), ReadOnlyByteBuf:forEachByteDesc(int-int-ByteBufProcessor), CompleteChannelFuture:getNow(), SocketUDT:setSendBufferSize(int), JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun), ChunkedWriteHandler:write(ChannelHandlerContext-Object-ChannelPromise), InternetProtocolFamily:valueOf(String), ThreadPerChannelEventLoopGroup:isTerminated(), Unpooled:copyFloat(float[]), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:compute(), ZlibCodecFactory:newZlibEncoder(int-byte[]), ScheduledFutureTask:<clinit>(), ConcurrentHashMapV8$TreeBin:lockRoot(), ChannelOutboundHandlerAdapter:close(ChannelHandlerContext-ChannelPromise), CompositeByteBuf:array(), ChannelOutboundHandlerAdapter:write(ChannelHandlerContext-Object-ChannelPromise), OioServerSocketChannel:newServerSocket(), HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int), AbstractNioByteChannel$NioByteUnsafe:voidPromise(), ReplayingDecoderBuffer:bytesBefore(int-int-byte), UnpooledDirectByteBuf:_getInt(int), DefaultServerSocketChannelConfig:setReuseAddress(boolean), PooledHeapByteBuf:<clinit>(), IdleStateHandler:initialize(ChannelHandlerContext), CompositeByteBuf:toString(), AbstractNioChannel:doBeginRead(), ConcurrentHashMapV8$MapReduceValuesToIntTask:firstComplete(), NioUdtMessageConnectorChannel:doReadMessages(List), ByteBuf:skipBytes(int), AbstractByteBuf:nioBuffer(int-int), SctpMessage:equals(Object), HttpResponseEncoder:<init>(), SpdyFrameDecoder:isValidFrameHeader(), DiskAttribute:content(), DefaultUdtServerChannelConfig:setReuseAddress(boolean), ByteBuf:maxWritableBytes(), DefaultSpdyHeaders:entries(), ConcurrentHashMapV8:keySet(Object), ReplayingDecoderBuffer:<clinit>(), UnpooledHeapByteBuf:checkIndex(int-int), MixedAttribute:renameTo(File), ForkJoinPool:newTaskFor(Callable), Base64Dialect[]:clone(), ByteBufUtil:indexOf(ByteBuf-int-int-byte), SpdyHeaders:removeStatus(int-SpdyHeadersFrame), Unsafe:getShort(long), CompositeByteBuf:_getLong(int), UnpooledHeapByteBuf:_getUnsignedMedium(int), LocalChannel:doClose(), SwappedByteBuf:duplicate(), AbstractByteBuf:adjustMarkers(int), Base64Encoder:encode(ChannelHandlerContext-ByteBuf-List), LocalChannel$2:run(), DefaultSpdyGoAwayFrame:toString(), ReadOnlyByteBufferBuf:_setMedium(int-int), LimitingByteInput:<init>(ByteInput-long), SpdyCodecUtil:<clinit>(), MixedAttribute:isCompleted(), TrafficCounter:stop(), ConcurrentHashMapV8$CollectionView:size(), ReplayingDecoderBuffer:retain(), LogLevel:valueOf(String), ByteArrayEncoder:encode(ChannelHandlerContext-byte[]-List), SwappedByteBuf:maxCapacity(), TypeUDT:ordinal(), DefaultChannelPipeline:first(), EmptyByteBuf:compareTo(ByteBuf), NioUdtByteConnectorChannel:updateOpWrite(long-long-boolean), PoolChunk:branchSubpage(int-int), SlicedByteBuf:internalNioBuffer(int-int), UnreleasableByteBuf:getBytes(int-ByteBuf), OioSctpServerChannel:newServerSocket(), AbstractByteBufAllocator:compositeHeapBuffer(), SSLEngine:closeInbound(), LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), CompositeByteBuf:discardReadBytes(), IdleStateHandler$WriterIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), ChannelMatchers:<clinit>(), NioSocketChannel:isInputShutdown(), UnreleasableByteBuf:getBytes(int-GatheringByteChannel-int), PingWebSocketFrame:rsv(), ByteToMessageDecoder:<init>(), CompositeByteBuf:setByte(int-int), Attribute:setCharset(Charset), SocksCmdStatus:values(), DefaultSctpChannelConfig:getReceiveBufferSize(), SwappedByteBuf:copy(int-int), OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ForkJoinPool:tryCompensate(long), ReadOnlyByteBuf:nioBufferCount(), MessageToMessageCodec$2:decode(ChannelHandlerContext-Object-List), DefaultLastHttpContent:<init>(), FailedFuture:sync(), DefaultChannelGroupFuture:trySuccess(Void), PlatformDependent0:hasUnsafe(), ForkJoinPool:submit(ForkJoinTask), WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List), ByteBufOutputStream:writeByte(int), ChunkedWriteHandler$4:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite), AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf-int), NioDatagramChannel:doDisconnect(), CookieEncoderUtil:<init>(), MessageToMessageCodec:acceptOutboundMessage(Object), WebSocket00FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), SocksAuthResponseDecoder$State:<init>(String-int), UnreleasableByteBuf:writeBytes(ByteBuf), ObjectEncoderOutputStream:writeByte(int), SpdyHeaderBlockZlibEncoder:end(), WebSocketFrame:copy(), Bootstrap:attrs(), NotSslRecordException:<init>(Throwable), LocalChannel$LocalUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), ChannelOutboundHandlerAdapter:read(ChannelHandlerContext), SocksCommonUtils:intToIp(int), UnpooledUnsafeDirectByteBuf:maxCapacity(), WebSocketServerProtocolHandler:forbiddenHttpRequestResponder(), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), HttpObjectAggregator:channelInactive(ChannelHandlerContext), AdaptiveRecvByteBufAllocator:<init>(int-int-int), AbstractInternalLogger:trace(String), DefaultPromise$1:<init>(), SocksResponseType:valueOf(String), DefaultChannelPipeline$HeadHandler:deregister(ChannelHandlerContext-ChannelPromise), OioSctpServerChannel:doDisconnect(), EmbeddedChannel:flush(), CharsetUtil:<init>(), ConcurrentHashMapV8$ValuesView:remove(Object), ConcurrentHashMapV8$Segment:<init>(float), ConcurrentHashMapV8$ForEachTransformedValueTask:compute(), Striped64$Cell:<clinit>(), DiskFileUpload:duplicate(), RtspResponseDecoder:<init>(), NioEventLoop:openSelector(), AbstractByteBuf:getBytes(int-byte[]-int-int), GlobalEventExecutor:takeTask(), WriteTimeoutHandler$2:operationComplete(ChannelFuture), ConcurrentHashMapV8$KeySpliterator:tryAdvance(ConcurrentHashMapV8$Action), RxtxChannel:localAddress(), AbstractByteBuf:getBytes(int-ByteBuf-int), ByteBufProcessor$7:<init>(), CombinedChannelDuplexHandler:channelUnregistered(ChannelHandlerContext), DefaultChannelPipeline:remove(String), AbstractByteBuf:readBytes(OutputStream-int), DefaultChannelGroup:flushAndWrite(Object), HttpContentEncoder:encode(ChannelHandlerContext-Object-List), ReplayingDecoder:checkpoint(), MessageToByteEncoder:write(ChannelHandlerContext-Object-ChannelPromise), SctpInboundByteStreamHandler:acceptInboundMessage(Object), AbstractByteBuf:readBoolean(), DefaultByteBufHolder:duplicate(), EventLoop:isShuttingDown(), ChannelBufferByteInput:<init>(ByteBuf), DefaultUdtServerChannelConfig:getOptions(Map-ChannelOption[]), ResourceLeakDetector:<init>(String-int-long), CompositeByteBuf:skipBytes(int), SpdyHeaderBlockZlibDecoder:setInput(ByteBuf), ChannelPipeline:replace(String-String-ChannelHandler), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int), PooledDirectByteBuf:_getUnsignedMedium(int), ObjectDecoderInputStream:reset(), CompactObjectInputStream:readObject(), CompositeByteBuf:_setInt(int-int), SpdySession:closeLocalSide(int), SslHandler:wrap(SSLEngine-ByteBuf-ByteBuf), ConcurrentHashMapV8:sumCount(), AbstractByteBuf:order(ByteOrder), SocksInitRequestDecoder$State:values(), DefaultSpdyDataFrame:retain(int), PlatformDependent:hasUnsafe0(), WebSocketClientHandshaker08:<clinit>(), SpdyFrameEncoder:handlerAdded(ChannelHandlerContext), GenericFutureListener:operationComplete(Future), MemoryFileUpload:getName(), ChannelBufferByteOutput:<init>(ByteBuf), CodedOutputStream:newInstance(OutputStream), ChannelPromise:cause(), DefaultChannelProgressivePromise:awaitUninterruptibly(), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<clinit>(), DefaultSpdySettingsFrame:setValue(int-int), AbstractEventExecutor:shutdownGracefully(), WebSocketServerProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object), UdtMessage:retain(int), UnreleasableByteBuf:getBoolean(int), HttpPostRequestDecoder:decodeAttribute(String-Charset), ChannelFlushPromiseNotifier:notifyFlushFutures0(Throwable), NioEventLoop:isShutdown(), ByteBuf:markWriterIndex(), CompositeByteBuf:checkComponentIndex(int), ConcurrentHashMapV8$SearchValuesTask:propagateCompletion(), OioSctpChannel:newPromise(), SwappedByteBuf:writeBytes(ByteBuf-int-int), SpdyHeaderBlockRawEncoder:end(), EventExecutor:awaitTermination(long-TimeUnit), PoolChunkList:add(PoolChunk), HttpHeaders:set100ContinueExpected(HttpMessage), AbstractNioChannel:selectionKey(), LoggingHandler:<init>(String), ResourceLeakDetector:<clinit>(), DefaultSctpServerChannelConfig:validate(ChannelOption-Object), PooledDirectByteBuf:_getLong(int), ForkJoinTask:fork(), Attribute:setContent(File), WebSocketServerHandshaker08:<init>(String-String-boolean-int), DecoderResult:cause(), EmptyByteBuf:readerIndex(int), WebSocketServerHandshaker08:maxFramePayloadLength(), EventExecutor:execute(Runnable), AbstractChannel$AbstractUnsafe:closeForcibly(), DefaultLastHttpContent:<init>(ByteBuf), Unsafe:throwException(Throwable), JdkLogger:debug(String-Throwable), PooledByteBufAllocator:validateAndCalculateChunkSize(int-int), ChannelFutureListener$1:operationComplete(Future), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable), CompressionException:<init>(String-Throwable), DefaultSpdyHeaders:add(String-Object), EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel), ChannelOutboundHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), DefaultChannelProgressivePromise:executor(), HttpMethod:equals(Object), Channel$Unsafe:write(Object-ChannelPromise), AbstractReferenceCountedByteBuf:<clinit>(), MessageList:<clinit>(), SpdySession$StreamState:clearPendingWrites(), TimerTask:run(Timeout), WebSocketClientHandshaker08:expectedSubprotocol(), DefaultSpdySynStreamFrame:<init>(int-int-byte), DefaultSpdySettingsFrame:isPersisted(int), SocksAddressType:ordinal(), SocksMessage:<init>(SocksMessageType), SnappyFramedDecoder:<init>(boolean), SpdyHeadersFrame:getStreamId(), SpdyWindowUpdateFrame:getDeltaWindowSize(), ConcurrentHashMapV8$ValuesView:contains(Object), ChunkedWriteHandler:access$200(ChunkedWriteHandler), AbstractTrafficShapingHandler$ReopenReadTimerTask:<init>(ChannelHandlerContext), AbstractChannel:deregister(), SpdySession:access$100(SpdySession), Striped64:<clinit>(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:fork(), ForkJoinTask:adapt(Runnable-Object), ClientCookieEncoder:encode(Cookie[]), HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode), AbstractHttpData:content(), SpdyHeaderBlockRawDecoder:decode(ByteBuf-SpdyHeadersFrame), ReadOnlyByteBufferBuf:internalNioBuffer(), DefaultChannelGroup:remove(Object), NioEventLoop:executeWhenWritable(AbstractNioChannel-NioTask), Snappy$State:<init>(String-int), MixedAttribute:setContent(InputStream), WebSocketServerHandshaker13:selectSubprotocol(String), DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise), ChannelOutboundHandlerAdapter:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), EventExecutor:shutdown(), IllegalReferenceCountException:<init>(String-Throwable), ObjectDecoderInputStream:skip(long), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:clear(), PoolArena:normalizeCapacity(int), DefaultHttpHeaders:entries(), DefaultPromise$6:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener-long-long), DiskFileUpload:hashCode(), WebSocketFrame:content(), DefaultServerSocketChannelConfig:getOptions(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:advance(), Striped64:getUnsafe(), AbstractReferenceCountedByteBuf:readBytes(byte[]), ReadOnlyByteBufferBuf:getInt(int), InternalAttribute:equals(Object), ByteBufInputStream:readUnsignedShort(), UnpooledDirectByteBuf:checkDstIndex(int-int-int-int), Base64:encode(ByteBuf-Base64Dialect), CloseWebSocketFrame:copy(), CompositeByteBuf:_getUnsignedMedium(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), LocalServerChannel:doDeregister(), UnpooledHeapByteBuf:internalNioBuffer(), HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect), OioDatagramChannel:<init>(), HttpObjectDecoder$State:<clinit>(), Channel:isOpen(), AbstractHttpData:setCharset(Charset), SwappedByteBuf:nioBuffer(), AbstractByteBuf:_setInt(int-int), EventLoop:inEventLoop(), MixedFileUpload:copy(), LoggerFactory:getLogger(String), SocksInitRequest:authSchemes(), ByteBuf:refCnt(), HttpVersion:compareTo(Object), FileUpload:refCnt(), CompositeByteBuf:writeBytes(byte[]), GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor), ForkJoinPool:drainTasksTo(Collection), DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus), OioSctpServerChannel:<init>(), DefaultHttpHeaders$HeaderEntry:getValue(), NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT), AbstractByteBuf:setInt(int-int), ConcurrentSet:clear(), HttpContentCompressor:<init>(), SocksCmdResponseDecoder$State:valueOf(String), EmbeddedChannel$LastInboundHandler:channelRead(ChannelHandlerContext-Object), DefaultChannelHandlerContext:access$600(DefaultChannelHandlerContext-Throwable), RecyclableArrayList:addAll(Collection), PooledByteBufAllocator:access$100(PooledByteBufAllocator), ReferenceMap:containsValue(Object), DefaultFullHttpResponse:refCnt(), ReadOnlyIterator:next(), ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ChannelPromise:trySuccess(), DefaultChannelPipeline:removeLast(), PooledUnsafeDirectByteBuf:<clinit>(), SingleThreadEventExecutor:isTerminated(), AbstractEventExecutor$EventExecutorIterator:<init>(AbstractEventExecutor-AbstractEventExecutor$1), SslHandler$LazyChannelPromise:executor(), AbstractDiskHttpData:setContent(File), SocksCmdRequest$1:<clinit>(), ConcurrentHashMapV8$MapReduceKeysTask:firstComplete(), ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise), DefaultChannelGroupFuture:setFailure0(ChannelGroupException), ReferenceMap:remove(Object), Logger:debug(String-Object-Object), Logger:info(String-Object[]), AbstractNioChannel$AbstractNioUnsafe:closeIfClosed(), Unsafe:compareAndSwapLong(Object-long-long-long), AbstractServerChannel:localAddress(), ChunkedInput:close(), DefaultChannelPipeline$HeadHandler:close(ChannelHandlerContext-ChannelPromise), ChunkedWriteHandler$4:operationComplete(ChannelFuture), Logger:error(String-Object[]), ReplayingDecoderBuffer:copy(int-int), ServerCookieEncoder:<init>(), DefaultFullHttpRequest:release(), SwappedByteBuf:toString(Charset), AbstractServerChannel$DefaultServerUnsafe:write(Object-ChannelPromise), NioDatagramChannel:isActive(), HttpHeaders:set(HttpHeaders), ConcurrentHashMapV8$SearchMappingsTask:getRawResult(), IdleStateHandler:access$100(IdleStateHandler), DefaultOioServerSocketChannelConfig:getOption(ChannelOption), ObjectEncoderOutputStream:write(byte[]-int-int), AbstractChannel$AbstractUnsafe$1:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), AbstractByteBufAllocator:buffer(int-int), ChannelInboundHandlerAdapter:channelWritabilityChanged(ChannelHandlerContext), SocksCmdRequest:host(), ThreadLocalRandom:next(int), ForkJoinPool$WorkQueue:externalPopAndExecCC(CountedCompleter), AbstractByteBufAllocator:directBuffer(), NioUdtAcceptorChannel:javaChannel(), PoolArena$HeapArena:newByteBuf(int), HttpHeaders:getHeader(HttpMessage-String-String), DefaultLastHttpContent:trailingHeaders(), PromiseTask:hashCode(), CompositeByteBuf:getBytes(int-OutputStream-int), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), NioUdtAcceptorChannel:isActive(), DefaultHttpHeaders$HeaderEntry:toString(), TypeParameterMatcher$ReflectiveMatcher:match(Object), ByteBuf:getUnsignedMedium(int), UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int), CommonsLogger:info(String-Object[]), SctpServerChannel:bind(SocketAddress-int), ThreadPerChannelEventLoop:register(Channel-ChannelPromise), HttpHeaders:validateHeaderValue(String), UnpooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int), DefaultChannelHandlerContext:access$900(DefaultChannelHandlerContext), ThreadPerChannelEventLoopGroup:isShutdown(), PoolArena$DirectArena:newUnpooledChunk(int), ChannelDuplexHandler:disconnect(ChannelHandlerContext-ChannelPromise), SocksAuthScheme:valueOf(String), EmptyByteBuf:writeBytes(InputStream-int), PoolArena$DirectArena:newChunk(int-int-int-int), EventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), DefaultUdtChannelConfig:validate(ChannelOption-Object), ImmediateEventExecutor:<init>(), DefaultChannelHandlerContext$13:<init>(DefaultChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), AddressedEnvelope:recipient(), Recycler$Stack:push(Object), ClassResolvers:softCachingConcurrentResolver(ClassLoader), EventLoop:shutdown(), CompatibleMarshallingDecoder:actualReadableBytes(), DefaultFileRegion:transferTo(WritableByteChannel-long), DefaultFullHttpResponse:setStatus(HttpResponseStatus), AbstractChannel$AbstractUnsafe:flush0(), MemoryFileUpload:compareTo(InterfaceHttpData), HashedWheelTimer:normalizeTicksPerWheel(int), SslHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), ForkJoinPool$WorkQueue:isApparentlyUnblocked(), SpdyHeaderBlockJZlibEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel), UnreleasableByteBuf:writeBoolean(boolean), SpdySession:isRemoteSideClosed(int), JdkZlibEncoder:close(ChannelPromise), ChannelDuplexHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), NioEventLoop:setIoRatio(int), Cookie:setCommentUrl(String), Striped64$ThreadHashCode:<init>(), DefaultChannelPipeline$HeadHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), DefaultSocketChannelConfig:setAllowHalfClosure(boolean), EmptyByteBuf:writeBytes(ScatteringByteChannel-int), DefaultPromise:cause(), NioTask:channelUnregistered(SelectableChannel-Throwable), HttpContent:release(int), AbstractInternalLogger:error(String-Object-Object), HttpHeaders$1:iterator(), DefaultChannelHandlerContext:deregister(ChannelPromise), AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor), PoolArena:allocate(PoolThreadCache-int-int), ServerSocketChannelUDT:close(), SpdyCodecUtil:<init>(), ScheduledFutureTask:delayNanos(long), Unsafe:putOrderedObject(Object-long-Object), DefaultChannelGroup:size(), VoidChannelPromise:await(long-TimeUnit), DefaultAttributeMap$DefaultAttribute:remove(), ForkJoinPool:toString(), DefaultByteBufHolder:release(), CompositeByteBuf:copyTo(int-int-int-ByteBuf), RxtxChannelConfig$Stopbits[]:clone(), DefaultSctpChannelConfig:setReceiveBufferSize(int), SpdyHeadersFrame:isTruncated(), UnreleasableByteBuf:setBytes(int-byte[]-int-int), AbstractByteBufAllocator:newDirectBuffer(int-int), HttpHeaders:getDate(HttpMessage), DefaultChannelGroupFuture$DefaultEntry:<init>(Object-Object), ObjectDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), ForkJoinTask:writeObject(ObjectOutputStream), JdkZlibEncoder:<init>(int), WebSocketClientHandshaker00:verify(FullHttpResponse), HashedWheelTimer$HashedWheelTimeout:toString(), AbstractOioMessageChannel:parent(), PooledByteBufAllocator:<clinit>(), NioSctpChannel:remoteAddress(), DefaultChannelHandlerContext:access$1800(DefaultChannelHandlerContext), InternetProtocolFamily[]:clone(), DecoderException:<init>(String), ReadTimeoutHandler$ReadTimeoutTask:<init>(ReadTimeoutHandler-ChannelHandlerContext), JdkLogger:isInfoEnabled(), PooledByteBufAllocator:<init>(), HttpHeaders:addHeader(HttpMessage-String-Object), EmptyByteBuf:readUnsignedByte(), PooledUnsafeDirectByteBuf:_setShort(int-int), ReplayingDecoderBuffer:writeDouble(double), ByteBuf:readFloat(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CharsetUtil$2:initialValue(), Base64Decoder:decode(ChannelHandlerContext-Object-List), EmptyByteBuf:readLong(), DefaultSpdyHeaders$HeaderEntry:<init>(int-String-String), TextWebSocketFrame:rsv(), SocksInitRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List), SpdyFrameEncoder$1:<init>(SpdyFrameEncoder), SocksAuthRequestDecoder$State:<init>(String-int), PoolArena:newUnpooledChunk(int), DefaultSpdyHeadersFrame:headers(), EmptyByteBuf:getMedium(int), NioEventLoopGroup:<init>(), ForkJoinTask$AdaptedRunnableAction:invoke(), ForkJoinTask:invokeAll(ForkJoinTask[]), ChannelConfig:getWriteBufferLowWaterMark(), SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-ByteBuf-List), ChannelBufferByteInput:read(byte[]), OioDatagramChannel:<clinit>(), PromiseTask:setUncancellable(), LocalChannel:doDeregister(), DefaultChannelHandlerContext$1:run(), SwappedByteBuf:nioBuffers(int-int), ConcurrentHashMapV8:search(long-ConcurrentHashMapV8$BiFun), ByteBuf:getLong(int), ReplayingDecoderBuffer:ensureWritable(int), NioUdtMessageConnectorChannel:localAddress(), MessageFormatter:getThrowableCandidate(Object[]), PooledDirectByteBuf:getBytes(int-ByteBuffer), NioEventLoopGroup:<init>(int), ReadOnlyUnsafeDirectByteBuf:_getUnsignedMedium(int), AbstractByteBuf:writeBytes(InputStream-int), PoolSubpage:free(int), DefaultChannelGroup:name(), DefaultUdtChannelConfig:setReceiveBufferSize(int), ConnectTimeoutException:setStackTrace(StackTraceElement[]), AbstractServerChannel:doWrite(Object[]-int-int), HttpClientCodec$Encoder:<init>(HttpClientCodec-HttpClientCodec$1), HttpClientCodec:isSingleDecode(), ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), RxtxChannel$RxtxUnsafe:<init>(RxtxChannel), WebSocketServerHandshaker07:<init>(String-String-boolean-int), AbstractBootstrap:bind(), DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf), DefaultUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), MessageList:normalizeCapacity(int), WebSocketClientHandshaker07:newHandshakeRequest(), Bootstrap$2:<init>(ChannelFuture-SocketAddress-Channel-SocketAddress-ChannelPromise), UnpooledDirectByteBuf:_setInt(int-int), DefaultPromise$2:<init>(DefaultPromise-DefaultFutureListeners), ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ObjectDecoderInputStream:readFully(byte[]-int-int), SpdyStreamStatus:getStatusPhrase(), CountedCompleter:setRawResult(Object), ObjectEncoder:<init>(), ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun), HttpContentEncoder:decode(ChannelHandlerContext-Object-List), AbstractByteBuf:order(), NioServerSocketChannel:doWriteMessages(Object[]-int-int-boolean), PlatformDependent:freeDirectBuffer(ByteBuffer), AbstractByteBuf:setBytes(int-ByteBuf-int), AbstractHttpData:delete(), WebSocketClientHandshaker00:newWebSocketEncoder(), TypeParameterMatcher$1:initialValue(), DefaultSocketChannelConfig:setTrafficClass(int), MixedAttribute:content(), Slf4JLogger:debug(String-Object-Object), ConcurrentHashMapV8$ForEachTransformedMappingTask:advance(), ConcurrentHashMapV8$KeySpliterator:forEachRemaining(ConcurrentHashMapV8$Action), ReplayingDecoder:isSingleDecode(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(), HttpClientCodec:init(ChannelInboundHandler-ChannelOutboundHandler), DefaultChannelPipeline:connect(SocketAddress-ChannelPromise), AbstractByteBuf:writeZero(int), ReplayingDecoderBuffer:readUnsignedMedium(), SwappedByteBuf:isReadable(int), SocksCmdStatus:fromByte(byte), DefaultChannelHandlerContext:access$1300(DefaultChannelHandlerContext-ChannelPromise), PoolChunk:runLength(int), UnpooledHeapByteBuf:_getLong(int), AbstractBootstrap$2:run(), Snappy:decodeLiteral(byte-ByteBuf-ByteBuf), LocalChannel$2:<init>(LocalChannel), SlicedByteBuf:checkIndex(int-int), DefaultHttpContent:release(), ServerBootstrap:attrs(), PoolArena$HeapArena:newUnpooledChunk(int), DefaultChannelPipeline:firstContext(), EmptyByteBuf:forEachByteDesc(int-int-ByteBufProcessor), UnreleasableByteBuf:readBytes(byte[]), UniqueName:<init>(ConcurrentMap-String-Object[]), WebSocketClientHandshaker00:insertSpaces(String-int), DefaultRxtxChannelConfig:getBaudrate(), ConcurrentHashMapV8$MapReduceKeysToLongTask:compute(), PooledDirectByteBuf:_getInt(int), DefaultChannelPipeline:fireExceptionCaught(Throwable), OioSctpChannel:association(), GlobalEventExecutor:shutdown(), MessageList$1:newObject(Recycler$Handle), MemoryFileUpload:compareTo(FileUpload), Recycler:<init>(), Logger:info(String-Object-Object), DuplicatedByteBuf:order(), ReplayingDecoderBuffer:readableBytes(), JdkLogger:error(String-Object-Object), NioUdtMessageAcceptorChannel:<init>(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), HttpResponse:getProtocolVersion(), AbstractEventExecutor:schedule(Runnable-long-TimeUnit), DefaultPromise$4:run(), OioSctpChannel:bindAddress(InetAddress), InternalLogger:warn(String-Object), ConcurrentHashMapV8$KeySetView:add(Object), PlatformDependent0:<clinit>(), DefaultDatagramChannelConfig:getOptions(Map-ChannelOption[]), AbstractByteBuf:maxWritableBytes(), CompleteFuture:await(long), NioSocketChannel:config(), SocksCmdStatus:<init>(String-int-byte), HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage), Cookie:isSecure(), ReadOnlyByteBuf:setBytes(int-ScatteringByteChannel-int), MessageFormatter:arrayFormat(String-Object[]), OioSctpServerChannel:unbindAddress(InetAddress), DefaultSpdySynStreamFrame:toString(), AbstractChannel$AbstractUnsafe:closeIfClosed(), ObjectDecoder:<init>(int-ClassResolver), WebSocket08FrameDecoder:actualReadableBytes(), UnreleasableByteBuf:isWritable(int), ChannelPipeline:fireChannelRead(Object), OioDatagramChannel:newPromise(), RecyclableArrayList:<init>(Recycler$Handle), QueryStringDecoder:<init>(String-Charset), InternalLogger:log(InternalLogLevel-String), CompositeByteBuf:copiedNioBuffer(int-int), ReplayingDecoderBuffer:readDouble(), SslHandler$LazyChannelPromise:<init>(SslHandler), DuplicatedByteBuf:nioBufferCount(), UnpooledDirectByteBuf:ensureAccessible(), Base64Encoder:<init>(boolean), DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int), AbstractReferenceCountedByteBuf:setShort(int-int), SwappedByteBuf:readUnsignedMedium(), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), WebSocketClientProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object), ByteBufProcessor$3:<init>(), DefaultSctpServerChannelConfig:getInitMaxStreams(), CompositeByteBuf:setMedium(int-int), ByteBuf:setBytes(int-byte[]), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:firstComplete(), PlatformDependent0:copyMemory(Object-long-Object-long-long), Unpooled:copiedBuffer(char[]-int-int-Charset), MessageToMessageDecoder:channelInactive(ChannelHandlerContext), PlatformDependent:copyMemory(byte[]-int-long-long), AbstractNioByteChannel:updateOpWrite(long-long-boolean), DefaultSpdySettingsFrame:setPersistValue(int-boolean), Channel:writeAndFlush(Object-ChannelPromise), AbstractChannel:config(), ContinuationWebSocketFrame:<init>(boolean-int-String), ForkJoinTask:pollTask(), PooledDirectByteBuf:getBytes(int-ByteBuf-int-int), UnreleasableByteBuf:readUnsignedMedium(), CompositeByteBuf:setBytes(int-ByteBuf-int), ForkJoinPool$2:run(), ZlibUtil:<init>(), AbstractChannel:access$602(AbstractChannel-ClosedChannelException), UnreleasableByteBuf:isReadable(), SingleThreadEventExecutor:access$100(SingleThreadEventExecutor), UniqueName:equals(Object), SpdyOrHttpChooser$SelectedProtocol:values(), Cookie:getCommentUrl(), Base64:decode(ByteBuf), Slf4JLogger:<init>(Logger), OioDatagramChannel:joinGroup(InetAddress-ChannelPromise), DefaultChannelHandlerContext:write(Object-ChannelPromise), SocketUDT:setSoLinger(boolean-int), HttpRequest:getUri(), ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[]), SocksSubnegotiationVersion:fromByte(byte), JZlibEncoder:<init>(ZlibWrapper-int), SlicedByteBuf:slice(int-int), InternalLogger:info(String), PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer), DefaultDatagramChannelConfig:setMaxMessagesPerRead(int), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:getRawResult(), Slf4JLogger:error(String-Object-Object), Log:trace(Object-Throwable), FileUpload:setFilename(String), EmptyByteBuf:writeShort(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), SpdyFrameDecoder:<init>(int-int-int), ChannelConfig:getWriteBufferHighWaterMark(), DefaultChannelHandlerContext$4:run(), RxtxChannel$RxtxUnsafe$1:run(), AbstractDiskHttpData:<init>(String-Charset-long), UnreleasableByteBuf:getMedium(int), IdleStateHandler:access$000(IdleStateHandler), WebSocketClientHandshaker$1:operationComplete(ChannelFuture), ReadOnlyByteBufferBuf:setBytes(int-ScatteringByteChannel-int), JdkLogger:warn(String-Object), Future:isSuccess(), DefaultChannelHandlerContext:teardown(), UnpooledHeapByteBuf:getBytes(int-ByteBuf-int-int), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise), SocketUDT:setReuseAddress(boolean), CtClass:detach(), DefaultUdtChannelConfig:setWriteSpinCount(int), DefaultUdtServerChannelConfig:setSystemReceiveBufferSize(int), WebSocket08FrameDecoder:checkCloseFrameBody(ChannelHandlerContext-ByteBuf), ReplayingDecoderBuffer:setZero(int-int), AbstractChannel:access$802(AbstractChannel-boolean), DefaultUdtServerChannelConfig:setWriteSpinCount(int), MultithreadEventExecutorGroup:isTerminated(), ByteBuf:release(int), SwappedByteBuf:readByte(), AbstractDiskHttpData:getBaseDirectory(), ReplayingDecoderBuffer:setMedium(int-int), AbstractOioByteChannel:doWriteBytes(ByteBuf), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer), SocksCmdStatus:byteValue(), OioDatagramChannel:ensureBound(), SpdyDataFrame:isLast(), SocksAuthResponse:encodeAsByteBuf(ByteBuf), ClassResolvers:cacheDisabled(ClassLoader), DefaultSpdyHeaders$HeaderEntry:toString(), ReplayingDecoderBuffer:<init>(ByteBuf), ChannelFutureListener$3:<init>(), Unsafe:putLong(long-long), FileUpload:release(), ByteBuf:setBytes(int-ByteBuffer), LogLevel:values(), SerialPort:getOutputStream(), DefaultRxtxChannelConfig:setAllocator(ByteBufAllocator), SocksCmdResponse:encodeAsByteBuf(ByteBuf), DuplicatedByteBuf:copy(int-int), TextWebSocketFrame:retain(), SwappedByteBuf:ensureWritable(int), MixedAttribute:copy(), ThreadLocalUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), DefaultSpdySettingsFrame$Setting:isPersist(), HttpPostRequestEncoder$WrappedFullHttpRequest:getMethod(), UnreleasableByteBuf:setBytes(int-ByteBuf-int), ForkJoinPool$WorkQueue:pop(), ByteBuf:getBytes(int-ByteBuf-int-int), CompressionException:<init>(String), HttpPostRequestDecoder:skipControlCharactersStandard(), OioSctpChannel:unbindAddress(InetAddress-ChannelPromise), NioSctpChannel:doBind(SocketAddress), ReplayingDecoder:channelInactive(ChannelHandlerContext), WebSocketServerProtocolHandshakeHandler:sendHttpResponse(ChannelHandlerContext-HttpRequest-HttpResponse), NioUdtAcceptorChannel:remoteAddress(), Attribute:length(), ForkJoinPool:checkParallelism(int), ForkJoinTask:externalAwaitDone(), DefaultProgressivePromise:<init>(), DefaultHttpRequest:getUri(), ByteBufOutputStream:writeShort(int), DefaultRxtxChannelConfig:setOption(ChannelOption-Object), DefaultChannelPromise:addListener(GenericFutureListener), WebSocketProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable), FileUpload:getFilename(), SslHandler$2:<init>(SslHandler), DefaultChannelPipeline$HeadHandler:disconnect(ChannelHandlerContext-ChannelPromise), PlatformDependent:throwException(Throwable), CommonsLoggerFactory:newInstance(String), AbstractEventExecutorGroup:invokeAll(Collection), StringDecoder:<init>(), UdtMessage:duplicate(), UnpooledUnsafeDirectByteBuf:array(), GlobalEventExecutor:shutdownGracefully(long-long-TimeUnit), CompatibleObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf), HttpObjectDecoder:reset(List), Marshaller:writeObject(Object), TrafficCounter:lastTime(), CookieEncoderUtil:add(StringBuilder-String-long), PlatformDependent:isRoot0(), ConcurrentHashMapV8$ValueSpliterator:advance(), ChunkedNioFile:readChunk(ChannelHandlerContext), AbstractNioChannel$AbstractNioUnsafe$1:<init>(AbstractNioChannel$AbstractNioUnsafe-SocketAddress), ReadOnlyUnsafeDirectByteBuf:_getInt(int), UnpooledUnsafeDirectByteBuf:internalNioBuffer(), SlicedByteBuf:nioBuffers(int-int), EmptyByteBuf:readMedium(), UnpooledDirectByteBuf:setBytes(int-ByteBuf-int-int), InternalLogger:debug(String-Object), SpdyHeaderBlockRawEncoder:<init>(int), CompositeByteBuf:toByteIndex(int), SpdySessionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), MixedFileUpload:getFile(), DefaultChannelConfig:setWriteSpinCount(int), CorruptedFrameException:<init>(Throwable), ChunkedWriteHandler:doFlush(ChannelHandlerContext), NioSctpChannel:unbindAddress(InetAddress-ChannelPromise), DefaultFullHttpRequest:headers(), SctpMessage:release(), SlicedByteBuf:setBytes(int-ByteBuf-int-int), AbstractNioMessageChannel:isOpen(), SpdySession$StreamState:getPriority(), SpdyConstants:<init>(), Channel:isActive(), RxtxChannelConfig$Databits:valueOf(String), CompleteChannelFuture:channel(), DefaultChannelPipeline$HeadHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), InterfaceHttpData$HttpDataType:<init>(String-int), ChannelInboundHandlerAdapter:channelRegistered(ChannelHandlerContext), ReadOnlyByteBufferBuf:_getUnsignedMedium(int), SpdyHeaders:get(String), MemoryAttribute:<init>(String), MessageToMessageEncoder:encode(ChannelHandlerContext-Object-List), WebSocketClientHandshaker00:insertRandomCharacters(String), DefaultDatagramChannelConfig:setNetworkInterface(NetworkInterface), VoidChannelPromise:setSuccess(Void), ConcurrentHashMapV8:reduceValuesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), HttpContentEncoder:channelInactive(ChannelHandlerContext), LongAdder:toString(), ReadOnlyUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer), HttpHeaders:clear(), AbstractInternalLogger:log(InternalLogLevel-String-Object-Object), UnreleasableByteBuf:isReadable(int), MessageToMessageEncoder:acceptOutboundMessage(Object), LengthFieldBasedFrameDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), ReplayingDecoderBuffer:slice(), SingleThreadEventExecutor$1:<init>(), NioUdtByteConnectorChannel:doBind(SocketAddress), ThreadPerChannelEventLoopGroup:isShuttingDown(), UnpooledDirectByteBuf:_getByte(int), DefaultPromise:hasWaiters(), SocksAuthStatus:<clinit>(), SwappedByteBuf:readBytes(byte[]-int-int), UnpooledDirectByteBuf:checkSrcIndex(int-int-int-int), ChannelPromise:tryFailure(Throwable), MixedAttribute:compareTo(Object), ForkJoinTask$AdaptedRunnable:run(), AbstractByteBufAllocator:validate(int-int), OioSocketChannel:remoteAddress(), Unpooled:buffer(), NioEventLoop:selectNow(), DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), ChannelInboundHandlerAdapter:<init>(), DefaultHttpContent:copy(), AbstractByteBuf:getBoolean(int), UnreleasableByteBuf:setLong(int-long), HttpContentCompressor:determineWrapper(String), SocksRequest:<init>(SocksRequestType), ResourceLeakException:getStackTrace(), Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect), NioSocketChannel:doConnect(SocketAddress-SocketAddress), LocalServerChannel:doBeginRead(), SctpChannel:register(Selector-int), ForkJoinPool$WorkQueue:pollAt(int), HttpVersion:minorVersion(), ReplayingDecoderBuffer:readShort(), RecyclableArrayList$1:newObject(Recycler$Handle), OioServerSocketChannel:localAddress(), CommonsLogger:error(String-Object), ConcurrentHashMapV8$CollectionView:toArray(), OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface), ForkJoinTask$AdaptedCallable:invoke(), PooledHeapByteBuf:setBytes(int-ByteBuffer), ChannelFutureListener$1:<init>(), MixedFileUpload:getCharset(), ObjectDecoderInputStream:readLong(), MessageToMessageCodec$2:<init>(MessageToMessageCodec), ConcurrentHashMapV8:reduceValuesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), HttpClientCodec$Decoder:isContentAlwaysEmpty(HttpMessage), ByteBufProcessor$8:<init>(), Channel$Unsafe:flush(), CompositeByteBuf:setBoolean(int-boolean), DefaultChannelPromise:executor(), CompositeByteBuf:writeDouble(double), EmptyByteBuf:checkIndex(int), ThreadPerChannelEventLoopGroup:shutdownGracefully(long-long-TimeUnit), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$ReduceValuesTask:advance(), PlatformDependent0:freeDirectBuffer(ByteBuffer), SpdyStreamStatus:hashCode(), UnreleasableByteBuf:readBytes(GatheringByteChannel-int), SwappedByteBuf:writableBytes(), DefaultCookie:getComment(), AbstractMemoryHttpData:renameTo(File), AbstractInternalLogger:info(String-Object[]), HttpClientCodec$Encoder:encode(ChannelHandlerContext-Object-List), WebSocketClientProtocolHandshakeHandler$1:operationComplete(Future), Unsafe:copyMemory(Object-long-Object-long-long), NioDatagramChannel:newSocket(), QueryStringEncoder:<init>(String), SlicedByteBuf:getBytes(int-ByteBuffer), AttributeKey:<init>(String), LimitingByteInput:read(byte[]-int-int), ClassResolvers:<init>(), PooledDirectByteBuf:checkIndex(int-int), HttpObjectAggregator:decode(ChannelHandlerContext-Object-List), ChannelBufferByteOutput:write(byte[]-int-int), UnreleasableByteBuf:setDouble(int-double), AbstractByteBuf:writeBytes(ByteBuf-int), DuplicatedByteBuf:getUnsignedMedium(int), DefaultChannelHandlerContext:invokeExceptionCaught0(Throwable), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:compute(), UnreleasableByteBuf:arrayOffset(), AbstractDiskHttpData:deleteOnExit(), JdkLogger:warn(String-Object-Object), PooledDirectByteBuf:<init>(Recycler$Handle-int), SpdySession$StreamState:closeRemoteSide(), DefaultChannelGroup:add(Channel), ChunkedNioFile:<init>(FileChannel-int), PoolArena:<init>(PooledByteBufAllocator-int-int-int-int), DefaultOioSocketChannelConfig:setReceiveBufferSize(int), PlatformDependent:copyMemory(long-byte[]-int-long), SwappedByteBuf:writeBoolean(boolean), CompleteFuture:await(long-TimeUnit), DelimiterBasedFrameDecoder:fail(ChannelHandlerContext-long), EventLoopGroup:register(Channel), SlicedByteBuf:_getLong(int), SocksAuthRequest:<clinit>(), MessageFormatter:format(String-Object), TypeParameterMatcher:match(Object), Log4JLogger:debug(String), PooledHeapByteBuf:<init>(Recycler$Handle-int-PooledHeapByteBuf$1), AbstractNioMessageChannel$NioMessageUnsafe:read(), HttpObjectEncoder:acceptOutboundMessage(Object), UnpooledHeapByteBuf:_setMedium(int-int), ConcurrentHashMapV8:getOrDefault(Object-Object), AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel), AbstractReferenceCountedByteBuf:setChar(int-int), AbstractByteBuf:slice(), DelimiterBasedFrameDecoder:validateMaxFrameLength(int), UnreleasableByteBuf:setBoolean(int-boolean), ChunkedWriteHandler:isWritable(), SpdyGoAwayFrame:getStatus(), CombinedChannelDuplexHandler:write(ChannelHandlerContext-Object-ChannelPromise), NioSctpChannel:doReadMessages(List), ConcurrentHashMapV8$ReduceKeysTask:firstComplete(), NioSocketChannel:localAddress0(), ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), PoolChunkList:toString(), ConcurrentHashMapV8$ForEachValueTask:addToPendingCount(int), ReplayingDecoderBuffer:discardReadBytes(), DefaultChannelPipeline:addFirst0(String-DefaultChannelHandlerContext), ConcurrentHashMapV8$MapReduceMappingsToLongTask:getRawResult(), DefaultSocketChannelConfig:setWriteSpinCount(int), PooledByteBuf:recycler(), DefaultChannelGroup:contains(Object), AbstractChannel:compareTo(Channel), ByteBuf:getBytes(int-byte[]), ChannelException:<init>(String-Throwable), AbstractFuture:get(long-TimeUnit), ForkJoinPool:registerWorker(ForkJoinWorkerThread), ChannelInitializer:<clinit>(), UnpooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int), ReplayingDecoderBuffer:writeFloat(float), ThreadPerChannelEventLoopGroup:shutdown(), AbstractByteBuf:readBytes(GatheringByteChannel-int), PlatformDependent:isRoot(), NioUdtAcceptorChannel:config(), ServerBootstrap$1:initChannel(Channel), NioSctpChannel:javaChannel(), DefaultChannelHandlerContext:executor(), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress), Attribute:set(Object), DefaultByteBufHolder:retain(int), DefaultDatagramChannelConfig:setConnectTimeoutMillis(int), DefaultServerSocketChannelConfig:setPerformancePreferences(int-int-int), ReplayingDecoderBuffer:getBytes(int-ByteBuf-int), MixedFileUpload:setFilename(String), ServerBootstrap:childAttr(AttributeKey-Object), ConcurrentHashMapV8$MapReduceKeysToLongTask:addToPendingCount(int), AbstractInternalLogger:error(String-Object[]), SpdyHeaders:getScheme(int-SpdyHeadersFrame), JdkZlibEncoder:<init>(int-byte[]), ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]), LoggingHandler:formatNonByteBuf(String-Object), ByteBuf:retain(), ThreadPerChannelEventLoop$1:operationComplete(ChannelFuture), ConcurrentHashMapV8$MapReduceKeysToLongTask:getRawResult(), ReplayingDecoderBuffer:<init>(), UnreleasableByteBuf:bytesBefore(int-int-byte), HttpClientCodec$Encoder:<init>(HttpClientCodec), OioByteStreamChannel:checkEOF(FileRegion), NioSctpChannel:<init>(Channel-SctpChannel), DefaultThreadFactory:<init>(String-boolean-int), PlatformDependent0:putInt(long-int), SnappyFramedDecoder$ChunkType:valueOf(String), LoggingHandler:channelInactive(ChannelHandlerContext), DefaultChannelGroupFuture:cause(), PooledHeapByteBuf:_setShort(int-int), GlobalEventExecutor:startThread(), ChannelFutureListener$2:operationComplete(Future), NioUdtMessageConnectorChannel:doFinishConnect(), DefaultChannelPipeline:disconnect(), DefaultChannelHandlerContext:invokeChannelReadComplete(), ConcurrentHashMapV8:isEmpty(), SpdySessionHandler:channelRead(ChannelHandlerContext-Object), ReadOnlyByteBufferBuf:_setLong(int-long), SocksInitResponseDecoder$State:values(), AbstractNioByteChannel:pipeline(), CharsetUtil$1:<init>(), ReplayingDecoderBuffer:hashCode(), PooledDirectByteBuf:checkSrcIndex(int-int-int-int), EmptyByteBuf:getUnsignedShort(int), OioSctpServerChannel$2:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), WriteTimeoutHandler$2:<init>(WriteTimeoutHandler-ScheduledFuture), CompatibleMarshallingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), PooledByteBufAllocator$1:<init>(PooledByteBufAllocator), UnpooledDirectByteBuf:alloc(), DefaultFullHttpRequest:getUri(), DefaultChannelHandlerContext:disconnect(), EmptyByteBuf:writeBytes(byte[]), PooledDirectByteBuf:arrayOffset(), SwappedByteBuf:isWritable(), SwappedByteBuf:maxWritableBytes(), Parser:parseFrom(byte[]-int-int-ExtensionRegistryLite), SpdyHeaders$1:clear(), EventExecutor:invokeAll(Collection-long-TimeUnit), ConcurrentHashMapV8$Node:find(int-Object), ReplayingDecoderBuffer:writerIndex(int), QueryStringEncoder:toString(), PlatformDependent0:getInt(long), HttpResponseStatus:hashCode(), MemoryFileUpload:setContent(ByteBuf), NioSctpChannel$2:run(), ConcurrentHashMapV8$ReduceValuesTask:invoke(), DefaultChannelGroupFuture:setSuccess(Object), SctpNotificationHandler:fireEvent(Notification), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:setTimeZone(TimeZone), MessageFormatter:objectArrayAppend(StringBuffer-Object[]-Map), ReplayingDecoderBuffer:getBytes(int-GatheringByteChannel-int), NioUdtByteConnectorChannel:javaChannel(), DefaultChannelGroupFuture:iterator(), ConcurrentHashMapV8$ValuesView:add(Object), SingleThreadEventExecutor:shutdownGracefully(long-long-TimeUnit), DefaultChannelHandlerContext$12:run(), MixedFileUpload:getString(Charset), RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage), Log:debug(Object), ChannelMatcher:matches(Channel), NioSocketChannel:updateOpWrite(long-long-boolean), SwappedByteBuf:<init>(ByteBuf), ByteBufHolder:retain(), ConcurrentHashMapV8:replace(Object-Object), ContinuationWebSocketFrame:<init>(), NioSctpServerChannel:doDisconnect(), AbstractEventExecutor:newTaskFor(Runnable-Object), AbstractOioByteChannel:alloc(), ResourceLeakDetector$DefaultResourceLeak:access$102(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak), ConcurrentHashMapV8$KeySetView:iterator(), ForkJoinPool:releasePlock(int), ChannelMatchers$InvertMatcher:<init>(ChannelMatcher), DefaultOioSocketChannelConfig:setSoLinger(int), AbstractServerChannel$DefaultServerUnsafe:reject(ChannelPromise), SoftReferenceMap:<init>(Map), DefaultProgressivePromise:<init>(EventExecutor), AbstractChannel$AbstractUnsafe:beginRead(), SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus), CompositeByteBuf:getBytes(int-ByteBuf-int), DiskFileUpload:getContentTransferEncoding(), HttpResponseDecoder:isContentAlwaysEmpty(HttpMessage), WebSocketClientHandshaker07:<clinit>(), JdkLogger:warn(String), CompositeByteBuf:removeComponents(int-int), ForkJoinPool:isTerminated(), AbstractInternalLogger:isWarnEnabled(), SpdySynStreamFrame:isUnidirectional(), WebSocketClientProtocolHandshakeHandler:channelActive(ChannelHandlerContext), ConcurrentHashMapV8$MapReduceEntriesToIntTask:firstComplete(), ByteBuf:arrayOffset(), HttpHeaders:getDateHeader(HttpMessage-String-Date), ReadOnlyByteBufferBuf:getUnsignedMedium(int), ConcurrentHashMapV8$ForEachTransformedKeyTask:invoke(), ReadTimeoutHandler:handlerRemoved(ChannelHandlerContext), ReadOnlyByteBufferBuf:getLong(int), LengthFieldBasedFrameDecoder:<init>(int-int-int), HttpPostRequestEncoder$WrappedFullHttpRequest:release(), AbstractReferenceCountedByteBuf:setDouble(int-double), PooledUnsafeDirectByteBuf:initMemoryAddress(), TypeParameterMatcher$2:<init>(), NioSocketChannel:<init>(), SnappyFramedDecoder:decode(ChannelHandlerContext-ByteBuf-List), SslHandler$5:run(), ReadOnlyByteBuf:setBytes(int-byte[]-int-int), AbstractNioChannel$AbstractNioUnsafe$1:run(), FormattingTuple:<init>(String-Object[]-Throwable), ConcurrentSet:size(), ServerBootstrap:bind(String-int), CorruptedFrameException:<init>(String-Throwable), ConcurrentHashMapV8:putAll(Map), CharsetUtil$2:<init>(), ConcurrentHashMapV8:searchKeys(long-ConcurrentHashMapV8$Fun), ReadOnlyByteBufferBuf:_getInt(int), DecoderResult:isFinished(), SwappedByteBuf:writeShort(int), TypeParameterMatcher:get(Class), AbstractChannel:localAddress(), DefaultHttpRequest:toString(), ByteBufInputStream:mark(int), WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), DefaultPromise:await(long), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate(), Signal:toString(), HttpHeaders:setContentLength(HttpMessage-long), NioUdtMessageConnectorChannel:doConnect(SocketAddress-SocketAddress), AbstractEventExecutor:inEventLoop(), DuplicatedByteBuf:getBytes(int-ByteBuffer), DuplicatedByteBuf:setShort(int-int), PooledUnsafeDirectByteBuf:addr(int), HttpDataFactory:cleanRequestHttpDatas(HttpRequest), AbstractInternalLogger:warn(String-Throwable), AbstractHttpData:deallocate(), ReadOnlyByteBufferBuf:writerIndex(int), HttpResponseStatus:reasonPhrase(), DefaultChannelHandlerContext$19:<init>(DefaultChannelHandlerContext), SelectedSelectionKeySet:doubleCapacityB(), RxtxChannelConfig$Databits:values(), ReadOnlyUnsafeDirectByteBuf:checkIndex(int), UnreleasableByteBuf:compareTo(ByteBuf), DefaultChannelGroupFuture:isPartialFailure(), ReadOnlyByteBuf:_getInt(int), HttpPostRequestEncoder:finalizeRequest(), SpdyHeaderBlockZlibDecoder:end(), CombinedChannelDuplexHandler:deregister(ChannelHandlerContext-ChannelPromise), PooledUnsafeDirectByteBuf$1:<init>(), ZlibWrapper:valueOf(String), DefaultChannelConfig:setConnectTimeoutMillis(int), ReplayingDecoderBuffer:forEachByte(int-int-ByteBufProcessor), SctpChannel:isOpen(), DecoderResult:<clinit>(), PongWebSocketFrame:duplicate(), RtspHeaders:<init>(), ConcurrentHashMapV8$ReduceEntriesTask:addToPendingCount(int), SwappedByteBuf:setShort(int-int), SocksMessageType:<init>(String-int), ConcurrentHashMapV8$CollectionView:getMap(), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:values(), SwappedByteBuf:refCnt(), ReferenceCounted:release(), LimitingByteInput$TooBigObjectException:<init>(), NioSctpServerChannel$1:run(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress), SSLEngineResult$HandshakeStatus:values(), IdleStateHandler$AllIdleTimeoutTask:run(), ChannelOutboundHandlerAdapter:flush(ChannelHandlerContext), DefaultChannelPromise:removeListener(GenericFutureListener), ConcurrentHashMapV8$SearchMappingsTask:advance(), ConcurrentHashMapV8$EntrySetView:equals(Object), NioSctpChannel:newPromise(), SpdySessionStatus:equals(Object), AbstractDiskHttpData:getPrefix(), ConcurrentHashMapV8$MapReduceValuesToIntTask:compute(), OioDatagramChannel:remoteAddress0(), SystemPropertyUtil:log(String-Exception), SingleThreadEventExecutor:awaitTermination(long-TimeUnit), UnreleasableByteBuf:isDirect(), LocalServerChannel$2:run(), DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator), AbstractInternalLogger:warn(String-Object), AbstractOioChannel:access$002(AbstractOioChannel-boolean), DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), ByteBuf:writableBytes(), PoolArena$DirectArena:memoryCopy(ByteBuffer-int-ByteBuffer-int-int), DefaultPromise:addListener(GenericFutureListener), Future:addListener(GenericFutureListener), ForkJoinTask:tryUnfork(), Attribute:getFile(), ResourceLeakDetector:access$508(ResourceLeakDetector), CompositeByteBuf:addComponent(ByteBuf), EmptyByteBuf:getBytes(int-GatheringByteChannel-int), WebSocketClientHandshaker07:uri(), AbstractInternalLogger:trace(String-Throwable), EventExecutor:submit(Runnable-Object), JZlibEncoder$2:run(), SocksMessage:encodeAsByteBuf(ByteBuf), NioDatagramChannel:selectionKey(), Base64:decode4to3(byte[]-int-ByteBuf-int-Base64Dialect), ForkJoinTask:getSurplusQueuedTaskCount(), ByteBufAllocator:directBuffer(), DefaultSpdyDataFrame:setLast(boolean), LocalChannel:doPreClose(), AbstractNioChannel:access$202(AbstractNioChannel-ScheduledFuture), Attribute:getByteBuf(), DefaultRxtxChannelConfig:setBaudrate(int), SocksCmdType:byteValue(), ForkJoinTask:invokeAll(Collection), HttpPostRequestDecoder$MultiPartStatus:ordinal(), SpdyHeaders:remove(String), DefaultHttpDataFactory:<init>(boolean), HttpHeaders:removeTransferEncodingChunked(HttpMessage), NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel), ChannelInitializer:channelRegistered(ChannelHandlerContext), ResourceLeakDetector:<init>(Class-int-long), LastHttpContent$1:setDecoderResult(DecoderResult), FileUpload:getByteBuf(), PlatformDependent:newConcurrentHashMap(), SwappedByteBuf:copy(), ChannelPipeline:context(Class), CountedCompleter:<init>(), ByteBuf:toString(Charset), ReplayingDecoderBuffer:setByte(int-int), LongAdder:floatValue(), NioSctpServerChannel:unbindAddress(InetAddress), ObjectDecoderInputStream:read(byte[]), CaseIgnoringComparator:<clinit>(), DefaultPromise:notifyProgressiveListeners(long-long), MessageToByteEncoder:<init>(), ReplayingDecoderBuffer:checkReadableBytes(int), FileRegion:transferTo(WritableByteChannel-long), Logger:warn(String), PooledHeapByteBuf:nioBuffer(int-int), ConcurrentHashMapV8$EntrySpliterator:tryAdvance(ConcurrentHashMapV8$Action), DefaultChannelGroupFuture:await(), DefaultFullHttpRequest:retain(), AbstractNioMessageChannel:remoteAddress(), EmptyByteBuf:setInt(int-int), ConcurrentHashMapV8$Node:setValue(Object), ThreadPerChannelEventLoop:run(), SwappedByteBuf:readSlice(int), byte[]:clone(), CompositeByteBuf:writeBytes(ByteBuf-int), DefaultFullHttpResponse:setProtocolVersion(HttpVersion), AbstractNioByteChannel:doWriteFileRegion(FileRegion-boolean), ReferenceMap:put(Object-Object), ChannelHandlerAdapter:exceptionCaught(ChannelHandlerContext-Throwable), DefaultChannelPipeline:remove(DefaultChannelHandlerContext), DefaultDatagramChannelConfig:setInterface(InetAddress), UnreleasableByteBuf:bytesBefore(int-byte), ConcurrentHashMapV8$ValueIterator:nextElement(), HttpPostRequestDecoder:checkMultipart(String), CommonsLogger:error(String-Throwable), HttpMethod:valueOf(String), AbstractByteBuf:getUnsignedShort(int), Attribute:delete(), WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean), AbstractBootstrap:localAddress(SocketAddress), AdaptiveRecvByteBufAllocator:<init>(), ObjectDecoderInputStream:skipBytes(int), UnreleasableByteBuf:writeChar(int), SslHandler:flush(ChannelHandlerContext), AbstractEventExecutorGroup:execute(Runnable), DefaultRxtxChannelConfig:setMaxMessagesPerRead(int), UnpooledUnsafeDirectByteBuf:internalNioBuffer(int-int), SwappedByteBuf:markWriterIndex(), WebSocketServerHandshaker13:maxFramePayloadLength(), ChannelMatchers$CompositeMatcher:matches(Channel), OioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise), Channel:unsafe(), SlicedByteBuf:_getByte(int), CompositeByteBuf:deallocate(), HttpRequest:getDecoderResult(), UnpooledDirectByteBuf:internalNioBuffer(), DefaultChannelGroup:compareTo(ChannelGroup), SocksAuthScheme[]:clone(), Log4JLogger:trace(String-Object[]), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), HttpResponseEncoder:encodeAscii(String-ByteBuf), ConcurrentHashMapV8:compareComparables(Class-Object-Object), DefaultPromise:cancel(boolean), MessageToMessageCodec:channelInactive(ChannelHandlerContext), MixedFileUpload:setContent(InputStream), RtspResponseEncoder:<init>(), WebSocketClientHandshaker00:maxFramePayloadLength(), DefaultCookie:equals(Object), FileUpload:setContentTransferEncoding(String), OioDatagramChannel:doBind(SocketAddress), AbstractNioChannel:eventLoop(), AbstractOioChannel$1:<init>(AbstractOioChannel), OioSctpChannel:<init>(SctpChannel), DiskAttribute:retain(int), DelimiterBasedFrameDecoder:<init>(int-ByteBuf[]), DefaultChannelHandlerContext:access$100(DefaultChannelHandlerContext), SocksProtocolVersion:<clinit>(), HttpVersion:toString(), UnpooledDirectByteBuf:setBytes(int-byte[]-int-int), NioEventLoop:cleanup(), ChannelHandlerContext:newSucceededFuture(), LongAdder:retryUpdate(long-Striped64$HashCode-boolean), ServerCookieEncoder:encode(String-String), EmptyByteBuf:nioBuffers(), Base64:encode(ByteBuf), LocalChannel$LocalUnsafe:ensureOpen(ChannelPromise), ChannelInboundHandlerAdapter:channelActive(ChannelHandlerContext), DefaultChannelHandlerContext:access$1100(DefaultChannelHandlerContext-SocketAddress-ChannelPromise), Channel$Unsafe:connect(SocketAddress-SocketAddress-ChannelPromise), SingleThreadEventLoop:parent(), ConcurrentHashMapV8$MapReduceEntriesToIntTask:addToPendingCount(int), IdleStateEvent:<clinit>(), AbstractInternalLogger$1:<clinit>(), DefaultSctpServerChannelConfig:getOptions(), ThreadLocalRandom:nextInt(int-int), PoolChunk:<clinit>(), ByteBuf:toString(), VoidChannelPromise:getNow(), HttpObjectDecoder:createInvalidMessage(), MessageToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise), SingleThreadEventExecutor:access$000(), ResourceLeakDetector:open(Object), DefaultFullHttpRequest:setUri(String), UnpooledByteBufAllocator:<init>(boolean), ObjectDecoderInputStream:readByte(), HttpHeaders:getHost(HttpMessage), EventExecutorGroup:next(), HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders(), HttpVersion:<init>(String-boolean), SwappedByteBuf:getBytes(int-ByteBuf), NioEventLoop:selectAgain(), EmptyByteBuf:hasMemoryAddress(), AbstractEventExecutorGroup:submit(Callable), ChannelHandler:handlerRemoved(ChannelHandlerContext), OioSctpChannel:doReadMessages(List), NioSocketChannel:doWriteFileRegion(FileRegion-boolean), ReplayingDecoderBuffer:retain(int), HttpPostRequestDecoder:splitMultipartHeader(String), ReplayingDecoderBuffer:writeBytes(ByteBuf-int-int), ConcurrentHashMapV8$MapReduceKeysToLongTask:advance(), DefaultPromise$3:<init>(DefaultPromise-GenericFutureListener), DatagramChannelConfig:getAllocator(), NioUdtMessageConnectorChannel:localAddress0(), RecyclableArrayList:get(int), NioSocketChannel:alloc(), StringDecoder:decode(ChannelHandlerContext-ByteBuf-List), AbstractFuture:await(), ForkJoinPool$EmptyTask:<init>(), DefaultProgressivePromise:addListener(GenericFutureListener), RxtxChannel:pipeline(), LocalAddress:<clinit>(), UnpooledUnsafeDirectByteBuf:arrayOffset(), ReadOnlyByteBuf:_getLong(int), EmptyByteBuf:slice(int-int), BinaryWebSocketFrame:<init>(), DefaultFullHttpRequest:content(), ChannelInputShutdownEvent:<init>(), DefaultSocketChannelConfig:getTrafficClass(), JZlibEncoder$1:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), ChunkedWriteHandler:<clinit>(), Attribute:getHttpDataType(), DuplicatedByteBuf:setBytes(int-ByteBuffer), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:<init>(), AbstractReferenceCounted:deallocate(), ReadTimeoutHandler:access$100(ReadTimeoutHandler), Log:isInfoEnabled(), ByteBufInputStream:checkAvailable(int), SctpMessage:<init>(MessageInfo-ByteBuf), AbstractChannel$AbstractUnsafe$3:run(), PoolArena:destroyChunk(PoolChunk), MultithreadEventExecutorGroup:shutdown(), ReplayingDecoderBuffer:nioBuffer(int-int), ThreadPerChannelEventLoop:runAllTasks(), HttpHeaderDateFormat:<init>(HttpHeaderDateFormat$1), MultithreadEventExecutorGroup:access$000(MultithreadEventExecutorGroup), ChannelHandlerContext:fireChannelInactive(), DefaultHttpContent:duplicate(), DefaultSctpServerChannelConfig:setAutoRead(boolean), MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map), DefaultPromise:setSuccess(Object), AbstractChannel:unsafe(), ConcurrentHashMapV8$ForEachTransformedValueTask:fork(), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), SlicedByteBuf:copy(int-int), AbstractNioMessageChannel:localAddress(), DefaultHttpResponse:getDecoderResult(), HashedWheelTimer:<clinit>(), EmptyByteBuf:writeInt(int), ConcurrentHashMapV8$SearchKeysTask:propagateCompletion(), CompositeByteBuf:setBytes(int-ByteBuf-int-int), NioSctpChannel:association(), ConcurrentHashMapV8$CollectionView:toArray(Object[]), FileUpload:getContentTransferEncoding(), BinaryWebSocketFrame:retain(), WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int), DefaultChannelPipeline:flush(), PoolArena:free(PoolChunk-long), DefaultOioServerSocketChannelConfig:setPerformancePreferences(int-int-int), EmptyByteBuf:forEachByte(int-int-ByteBufProcessor), Unpooled:wrappedBuffer(ByteBuf), Logger:error(String-Object), PoolArena:newSubpagePoolHead(int), SimpleChannelInboundHandler:<init>(), HttpPostRequestDecoder:getFileUpload(String), ConcurrentHashMapV8$ForEachEntryTask:invoke(), AbstractByteBuf:getFloat(int), AbstractDiskHttpData:getString(Charset), ConcurrentHashMapV8$MapReduceValuesToLongTask:addToPendingCount(int), PooledHeapByteBuf:newInternalNioBuffer(Object), ByteBuf:isWritable(int), AbstractReferenceCountedByteBuf:setLong(int-long), SslHandler:exceptionCaught(ChannelHandlerContext-Throwable), ConcurrentHashMapV8$CollectionView:iterator(), SystemPropertyUtil:<clinit>(), Unsafe:copyMemory(long-long-long), ByteBufProcessor$2:<init>(), SpdySessionStatus:valueOf(int), WriteTimeoutException:<clinit>(), MessageInfo:createOutgoing(Association-SocketAddress-int), DefaultChannelHandlerContext:invokeExceptionCaught(Throwable), NioUdtByteConnectorChannel:config(), FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), SpdySessionHandler:removeStream(ChannelHandlerContext-int), DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultHttpHeaders$HeaderEntry:setValue(String), DefaultPromise:awaitUninterruptibly(long), ForkJoinWorkerThread:run(), SlicedByteBuf:array(), UnpooledHeapByteBuf:_getByte(int), Recycler$Stack:pop(), ForkJoinTask$AdaptedCallable:<init>(Callable), ReplayingDecoderBuffer:setFloat(int-float), AbstractByteBuf:unwrap(), SwappedByteBuf:readableBytes(), SpdyHeaderBlockJZlibEncoder:encode(ByteBuf), ConcurrentHashMapV8:addCount(long-int), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), DefaultChannelPipeline:addFirst(ChannelHandler[]), EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder), AbstractNioByteChannel:isInputShutdown(), ReadOnlyUnsafeDirectByteBuf:maxCapacity(), ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun), NioSctpChannel:unbindAddress(InetAddress), DefaultChannelHandlerContext:bind(SocketAddress), AbstractByteBufAllocator:<init>(boolean), DefaultCookie:getDomain(), SslHandler:close(), NioServerSocketChannel:localAddress(), DefaultPromise:checkDeadLock(), TooLongFrameException:<init>(String), AbstractByteBuf:readFloat(), HttpObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List), SocksAuthStatus:fromByte(byte), AbstractNioByteChannel:javaChannel(), AbstractTrafficShapingHandler:configure(long), OioSctpServerChannel:doReadMessages(List), CompleteFuture:executor(), SocksCmdType[]:clone(), ForkJoinPool:submit(Runnable), TrafficCounter:bytesRecvFlowControl(long), ConcurrentHashMapV8:contains(Object), AbstractDiskHttpData:setContent(ByteBuf), ConcurrentHashMapV8$CounterHashCode:<init>(), CommonsLogger:info(String-Object-Object), AdaptiveRecvByteBufAllocator:access$000(int), UnreleasableByteBuf:writeBytes(ScatteringByteChannel-int), TypeParameterMatcher:find0(Object-Class-String), ChannelGroup:name(), Bootstrap:<init>(Bootstrap), DatagramPacket:retain(), DefaultSpdyWindowUpdateFrame:toString(), SpdySessionHandler:isRemoteInitiatedID(int), Logger:trace(String-Object), HttpRequestDecoder:createMessage(String[]), ConcurrentHashMapV8$CollectionView:clear(), ChannelOutboundBuffer:addMessage(Object-ChannelPromise), WebSocketClientHandshaker08:maxFramePayloadLength(), DefaultChannelConfig:getMaxMessagesPerRead(), EventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), FileUpload:getName(), UnpooledUnsafeDirectByteBuf:_getUnsignedMedium(int), NioDatagramChannel:localAddress(), ConcurrentHashMapV8$TreeBin:contendedLock(), EmptyByteBuf:readFloat(), AbstractNioMessageChannel$NioMessageUnsafe:close(ChannelPromise), UnpooledDirectByteBuf:getLong(int), MemoryAttribute:setCharset(Charset), AbstractByteBuf:writeByte(int), ClassPool:appendClassPath(String), AbstractOioChannel$DefaultOioUnsafe:voidPromise(), ConcurrentHashMapV8$MapReduceKeysToIntTask:advance(), DefaultChannelGroup:safeDuplicate(Object), TypeUDT:values(), LongAdder:casBase(long-long), ByteBuf:nioBuffer(), ServerBootstrap:init(Channel), TextWebSocketFrame:duplicate(), WebSocketClientHandshaker:handshake(Channel-ChannelPromise), ByteToMessageCodec$2:<init>(ByteToMessageCodec), ConcurrentHashMapV8$SearchEntriesTask:getRawResult(), NioSctpChannel:eventLoop(), ReadOnlyByteBuf:setBytes(int-InputStream-int), CompositeByteBuf:discardReadComponents(), DefaultHttpContent:content(), DiskAttribute:<init>(String-String), ContinuationWebSocketFrame:fromText(String), NioSocketChannel:doWriteBytes(ByteBuf-boolean), MessageLite:toByteArray(), AbstractServerChannel:<init>(), ReadOnlyByteBuf:forEachByte(int-int-ByteBufProcessor), DefaultSocketChannelConfig:setKeepAlive(boolean), SctpChannel:setOption(SctpSocketOption-Object), CommonsLogger:trace(String), WebSocketServerProtocolHandler:setHandshaker(ChannelHandlerContext-WebSocketServerHandshaker), WebSocketServerProtocolHandler$1:<init>(), EventExecutor:shutdownGracefully(long-long-TimeUnit), Slf4JLoggerFactory:<init>(boolean), CompositeByteBuf:checkIndex(int), RtspMethods:<init>(), AbstractByteBuf:_getLong(int), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:getRawResult(), SocksSubnegotiationVersion:<init>(String-int-byte), AbstractFuture:cause(), ConcurrentHashMapV8:<init>(), Slf4JLoggerFactory$1:<init>(Slf4JLoggerFactory-StringBuffer), ReplayingDecoderBuffer:writeLong(long), PooledUnsafeDirectByteBuf:setBytes(int-InputStream-int), WebSocketClientHandshaker13:verify(FullHttpResponse), LastHttpContent$1:duplicate(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:fork(), NioUdtMessageConnectorChannel$1:<clinit>(), SocketChannelUDT:connect(SocketAddress), MixedFileUpload:setContent(File), RxtxChannelConfig$Databits:value(), NioUdtByteAcceptorChannel:doReadMessages(List), ServerCookieEncoder:encode(Collection), ForkJoinTask$AdaptedRunnableAction:<init>(Runnable), UnpooledHeapByteBuf:_getShort(int), PooledByteBufAllocator:<init>(boolean), MessageFormatter:format(String-Object-Object), DefaultUdtChannelConfig:setWriteBufferHighWaterMark(int), DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int), SpdyHeaders$Spdy2HttpNames:<init>(), ProtobufDecoder:decode(ChannelHandlerContext-ByteBuf-List), AbstractNioMessageChannel$NioMessageUnsafe:voidPromise(), ConcurrentHashMapV8$SearchMappingsTask:quietlyCompleteRoot(), DatagramPacket:<init>(ByteBuf-InetSocketAddress), HttpConstants:<init>(), RxtxChannel:localAddress0(), AbstractReferenceCountedByteBuf:setIndex(int-int), SpdyHeaders:set(String-Object), SerialPort:removeEventListener(), ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), SlicedByteBuf:getBytes(int-OutputStream-int), ForkJoinTask:getUnsafe(), IdleStateHandler$1:<init>(IdleStateHandler), WebSocketClientHandshaker13:<clinit>(), TrafficCounter:cumulativeReadBytes(), UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int), EmptyByteBuf:<init>(ByteBufAllocator), DefaultChannelPipeline:toMap(), ByteToMessageCodec:<init>(), Striped64$ThreadHashCode:get(), SelectedSelectionKeySet:add(Object), ResourceLeak:close(), MemoryFileUpload:<init>(String-String-String-String-Charset-long), NioUdtMessageConnectorChannel:config(), DefaultMarshallerProvider:getMarshaller(ChannelHandlerContext), ForkJoinPool$EmptyTask:getRawResult(), ReplayingDecoderBuffer:capacity(int), CompositeByteBuf:getBytes(int-byte[]), UnpooledUnsafeDirectByteBuf:nioBuffers(int-int), SctpChannel:close(), WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), EmptyByteBuf:setFloat(int-float), AbstractByteBuf:setBytes(int-byte[]-int-int), InternalLogger:isEnabled(InternalLogLevel), InternalLogger:trace(String-Object-Object), SnappyFramedDecoder$ChunkType:values(), DefaultChannelPipeline:replace0(DefaultChannelHandlerContext-String-DefaultChannelHandlerContext), Log:info(Object), SpdySettingsFrame:setPersistValue(int-boolean), NioSocketChannel:doDisconnect(), SctpMessageCompletionHandler:decode(ChannelHandlerContext-SctpMessage-List), UnpooledByteBufAllocator:<clinit>(), UnpooledDirectByteBuf:_getShort(int), SimpleChannelInboundHandler:channelRead0(ChannelHandlerContext-Object), GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor-GlobalEventExecutor$1), HttpPostRequestDecoder:readDelimiterStandard(String), ReadOnlyByteBuf:getLong(int), ByteBufOutputStream:writeChars(String), WebSocket08FrameDecoder$State:<init>(String-int), OioSctpServerChannel:doBind(SocketAddress), ReplayingDecoderBuffer:readUnsignedByte(), SwappedByteBuf:setBytes(int-ScatteringByteChannel-int), UnpooledHeapByteBuf:capacity(int), ReadOnlyByteBufferBuf:getBytes(int-ByteBuf-int-int), UnreleasableByteBuf:nioBuffers(int-int), Unsafe:putInt(long-int), SpdySession$StreamState:receivedReply(), ByteBufOutputStream:write(int), OioServerSocketChannel:doDisconnect(), WebSocket08FrameDecoder$State:ordinal(), AbstractChannel:pipeline(), DefaultSpdySynStreamFrame:getAssociatedToStreamId(), DefaultChannelPipeline$3:<init>(DefaultChannelPipeline-ChannelHandlerContext), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:advance(), ChannelDuplexHandler:deregister(ChannelHandlerContext-ChannelPromise), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), AbstractDerivedByteBuf:retain(), OioSctpChannel:<init>(), DefaultChannelHandlerContext:invokeConnect(SocketAddress-SocketAddress-ChannelPromise), DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-Object-ByteBuf), DefaultChannelPipeline:checkDuplicateName(String), FileUpload:getString(Charset), ReadOnlyByteBuf:nioBuffers(int-int), DuplicatedByteBuf:getBytes(int-OutputStream-int), DefaultChannelGroupFuture:access$300(DefaultChannelGroupFuture-ChannelGroupException), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int), ConcurrentHashMapV8$SearchEntriesTask:fork(), Bootstrap:connect(SocketAddress-SocketAddress), ReadOnlyByteBuf:_setLong(int-long), HttpHeaders:getDate(HttpMessage-Date), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:invoke(), ChannelTrafficShapingHandler:setTrafficCounter(TrafficCounter), SlicedByteBuf:_getInt(int), SocksCommonUtils:ipv6toStr(StringBuilder-byte[]-int-int), HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest), DefaultChannelPipeline$HeadHandler:flush(ChannelHandlerContext), RtspMethods:<clinit>(), ZlibCodecFactory:newZlibEncoder(int), PooledUnsafeDirectByteBuf:internalNioBuffer(), VoidChannelPromise:tryFailure(Throwable), ConcurrentHashMapV8$MapReduceMappingsTask:invoke(), SpdyOrHttpChooser:channelRead(ChannelHandlerContext-Object), OioServerSocketChannel:doClose(), AbstractNioByteChannel:localAddress(), SpdySynReplyFrame:setLast(boolean), ReadOnlyByteBufferBuf:_setInt(int-int), ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ReplayingDecoderBuffer:setBytes(int-byte[]), EmbeddedChannel:access$200(EmbeddedChannel), DefaultSpdyHeadersFrame:<init>(int), ByteBuf:readBoolean(), CompactObjectOutputStream:<init>(OutputStream), TextWebSocketFrame:<init>(ByteBuf), HttpPostBodyUtil:findEndOfString(String), DefaultChannelGroup:iterator(), HashedWheelTimer:<init>(long-TimeUnit), PooledDirectByteBuf:checkIndex(int), ThreadPerChannelEventLoopGroup:terminationFuture(), DefaultChannelHandlerContext:setRemoved(), SwappedByteBuf:hasMemoryAddress(), EmbeddedEventLoop:awaitTermination(long-TimeUnit), ReadTimeoutHandler$ReadTimeoutTask:run(), ConcurrentHashMapV8:hashCode(), HttpDataFactory:createAttribute(HttpRequest-String), HttpVersion:text(), ZlibWrapper:<init>(String-int), AbstractEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), MixedAttribute:retain(int), ConcurrentHashMapV8$ForEachTransformedValueTask:advance(), AbstractNioChannel$AbstractNioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), DecoderResult:<init>(Throwable), Slf4JLoggerFactory:<clinit>(), ConcurrentHashMapV8$CollectionView:retainAll(Collection), SpdyOrHttpChooser:createHttpRequestHandlerForHttp(), QueryStringDecoder:<init>(String), OioSctpServerChannel:doWrite(Object[]-int-int), ForkJoinPool$ManagedBlocker:isReleasable(), ConcurrentHashMapV8$ForEachTransformedEntryTask:compute(), ConcurrentHashMapV8$MapReduceValuesToLongTask:fork(), PlatformDependent0:getLong(Object-long), Unpooled:compositeBuffer(int), AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor), UnpooledDirectByteBuf:getByte(int), ObjectEncoderOutputStream:write(int), Log4JLogger:isTraceEnabled(), UnpooledDirectByteBuf:setLong(int-long), EmptyByteBuf:setDouble(int-double), ByteBufInputStream:readUTF(), ClassPool:appendClassPath(ClassPath), UniqueName:name(), NioSctpChannel:doFinishConnect(), ReplayingDecoderBuffer:getInt(int), Cookie:getVersion(), UnpooledDirectByteBuf:getBytes(int-ByteBuffer), DefaultHttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), AbstractChannel$CloseFuture:setFailure(Throwable), EmbeddedChannel$DefaultUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise), DefaultSpdySynReplyFrame:getStreamId(), HttpRequest:headers(), RtspResponseStatuses:<clinit>(), Snappy:calculateChecksum(ByteBuf-int-int), UnsupportedMessageTypeException:<init>(), PooledDirectByteBuf:copy(int-int), DefaultPromise:executor(), AbstractEventExecutor$EventExecutorIterator:hasNext(), ChannelDuplexHandler:channelActive(ChannelHandlerContext), MessageInfo:streamNumber(int), SingleThreadEventExecutor:fetchFromDelayedQueue(), SpdySynReplyFrame:isTruncated(), ConcurrentHashMapV8$TreeBin:balanceDeletion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ObjectDecoderInputStream:readInt(), HttpResponseDecoder:channelInactive(ChannelHandlerContext), Bootstrap:initAndRegister(), ByteBuf:nioBuffer(int-int), MixedAttribute:getString(), NioEventLoop:closeAll(), ConcurrentHashMapV8$MapReduceKeysToIntTask:invoke(), SlicedByteBuf:duplicate(), AbstractChannel$CloseFuture:tryFailure(Throwable), AbstractOioChannel$1:run(), HttpPostRequestEncoder:<clinit>(), HttpResponseStatus:<clinit>(), WebSocketServerProtocolHandler:<init>(String), DefaultChannelHandlerContext:findContextOutbound(), OioDatagramChannel:isConnected(), DefaultChannelGroup:toArray(), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int), JdkLogger:trace(String), SocksAuthResponseDecoder:state(), SocksMessageEncoder:<init>(), DefaultByteBufHolder:refCnt(), UnreleasableByteBuf:setIndex(int-int), MultithreadEventExecutorGroup:<init>(int-ThreadFactory-Object[]), NioEventLoop:select(), ObjectDecoderInputStream:read(byte[]-int-int), SwappedByteBuf:getUnsignedMedium(int), Channel:newPromise(), CloseWebSocketFrame:content(), LocalChannel:newUnsafe(), AbstractBootstrap:bind(int), NioSctpChannel:allLocalAddresses(), MemoryAttribute:getName(), SpdySession:updateAllReceiveWindowSizes(int), AbstractChannel:doPreClose(), SpdyHeaders:entries(), ConcurrentHashMapV8$SearchKeysTask:fork(), Cookie:setComment(String), MemoryFileUpload:getHttpDataType(), AbstractChannel:doDeregister(), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), CombinedChannelDuplexHandler:<init>(ChannelInboundHandler-ChannelOutboundHandler), AbstractOioByteChannel:doWrite(Object[]-int-int), AbstractMemoryHttpData:getString(Charset), ForkJoinTask:quietlyInvoke(), ServerBootstrap:<init>(ServerBootstrap), DefaultDatagramChannelConfig:getTimeToLive(), HttpHeaders$1:getAll(String), VoidChannelPromise:awaitUninterruptibly(long-TimeUnit), Log4JLogger:warn(String), WebSocketServerHandshaker00:close(Channel-CloseWebSocketFrame-ChannelPromise), ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$BiFun), DefaultPromise:trySuccess(Object), CompositeByteBuf:maxCapacity(), DefaultUdtServerChannelConfig:setProtocolSendBufferSize(int), ReplayingDecoderBuffer:readBytes(ByteBuf-int-int), DefaultChannelHandlerContext:findContextInbound(), ReplayingDecoderBuffer:getUnsignedShort(int), RtspRequestDecoder:<init>(int-int-int), DefaultDatagramChannelConfig:setWriteBufferHighWaterMark(int), Attribute:setValue(String), OioEventLoopGroup:<init>(int), ConcurrentHashMapV8$ForEachMappingTask:invoke(), ServerBootstrap:<clinit>(), ConcurrentHashMapV8$Action:apply(Object), OioSocketChannel:eventLoop(), CompositeByteBuf:nioBufferCount(), SslHandler:handlerRemoved0(ChannelHandlerContext), DefaultChannelHandlerContext:invokeDisconnect(ChannelPromise), CommonsLogger:error(String), HttpObjectAggregator:decode(ChannelHandlerContext-HttpObject-List), LoggingHandler:userEventTriggered(ChannelHandlerContext-Object), ReadOnlyByteBuf:getBytes(int-GatheringByteChannel-int), Slf4JLogger:error(String-Throwable), JdkZlibEncoder$2:run(), ChannelHandlerContext:write(Object-ChannelPromise), ForkJoinPool$WorkQueue:pollAndExecAll(), DefaultChannelPipeline$2:run(), SslHandler$6:<init>(SslHandler-ScheduledFuture-ChannelHandlerContext-ChannelPromise), AbstractByteBuf:getUnsignedByte(int), CombinedIterator:next(), ChannelHandlerContext:deregister(ChannelPromise), DefaultHttpHeaders:index(int), SocksCmdRequest:<init>(SocksCmdType-SocksAddressType-String-int), DefaultSctpServerChannelConfig:setConnectTimeoutMillis(int), PooledDirectByteBuf:getBytes(int-byte[]-int-int), PongWebSocketFrame:retain(), DefaultOioSocketChannelConfig:getOptions(Map-ChannelOption[]), MemoryFileUpload:copy(), EmbeddedEventLoop:runTasks(), WebSocketVersion:<clinit>(), JdkZlibEncoder:close(ChannelHandlerContext-ChannelPromise), DefaultFullHttpRequest:copy(), InterfaceHttpData$HttpDataType[]:clone(), ReadOnlyByteBufferBuf:memoryAddress(), ByteToMessageDecoder:channelRead(ChannelHandlerContext-Object), EmptyByteBuf:ensureWritable(int), InterfaceHttpData:getHttpDataType(), SocksInitRequestDecoder$1:<clinit>(), EmptyByteBuf:nioBuffer(int-int), AbstractDerivedByteBuf:retain(int), ByteBuf:readMedium(), ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8), PooledDirectByteBuf:maxCapacity(), CompositeByteBuf:addComponents(int-ByteBuf[]), MemoryAttribute:getByteBuf(), SocksInitRequestDecoder$State:<clinit>(), Slf4JLoggerFactory:newInstance(String), WebSocketServerHandshakerFactory:newHandshaker(HttpRequest), SpdyHttpHeaders:setPriority(HttpMessage-byte), ChannelException:<init>(Throwable), AbstractInternalLogger:info(String), AbstractEventExecutor:<init>(), MarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf), DefaultChannelPipeline:context(ChannelHandler), CountedCompleter:nextComplete(), SctpChannel:bind(SocketAddress), DefaultServerSocketChannelConfig:isReuseAddress(), ChannelOption:<clinit>(), NioEventLoop$1:run(), SpdySettingsFrame:getValue(int), ZlibCodecFactory:newZlibDecoder(), Attribute:renameTo(File), RecyclableArrayList:set(int-Object), DefaultSpdyHeaders$HeaderEntry:setValue(Object), DefaultChannelPipeline:context(String), PoolChunk:initBuf(PooledByteBuf-long-int), SpdySynReplyFrame:isLast(), ReferenceMap:fold(Object), GlobalEventExecutor$1:<init>(GlobalEventExecutor-ScheduledFutureTask), UnpooledDirectByteBuf:array(), NioUdtAcceptorChannel:doConnect(SocketAddress-SocketAddress), OioDatagramChannel:joinGroup(InetAddress), SpdySynReplyFrame:getStreamId(), LoggingHandler:exceptionCaught(ChannelHandlerContext-Throwable), QueryStringDecoder:parameters(), CompositeByteBuf:writeBytes(byte[]-int-int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), DiskAttribute:getCharset(), NetUtil:isValidHexChar(char), AbstractChannel$AbstractUnsafe:register(EventLoop-ChannelPromise), ContinuationWebSocketFrame:isFinalFragment(), Snappy:<init>(), UnreleasableByteBuf:setInt(int-int), AbstractInternalLogger:debug(String-Object), ReplayingDecoderBuffer:readChar(), FixedRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator), NioUdtAcceptorChannel:<init>(ServerSocketChannelUDT), RecvByteBufAllocator:newHandle(), DefaultChannelConfig:setOption(ChannelOption-Object), HttpPostRequestDecoder:skipControlCharacters(), SslHandler$1:<init>(SslHandler-ChannelPromise-ChannelHandlerContext), SlicedByteBuf:<init>(ByteBuf-int-int), SingleThreadEventExecutor:schedule(Runnable-long-TimeUnit), PooledHeapByteBuf:_setByte(int-int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), ZlibEncoder:<init>(), DefaultHttpHeaders$HeaderEntry:addBefore(DefaultHttpHeaders$HeaderEntry), UnpooledDirectByteBuf:setShort(int-int), DefaultAttributeMap:<init>(), DefaultServerSocketChannelConfig:validate(ChannelOption-Object), SocksCmdType:values(), HashedWheelTimer:<init>(long-TimeUnit-int), Unpooled:wrappedBuffer(byte[]-int-int), SpdyHeadersFrame:setTruncated(), DefaultSpdySettingsFrame$Setting:<init>(int-boolean-boolean), UnpooledHeapByteBuf:checkSrcIndex(int-int-int-int), DefaultChannelHandlerContext:invokeChannelRegistered(), ForkJoinTask:getRawResult(), LocalChannel:isActive(), UnpooledUnsafeDirectByteBuf:writerIndex(int), DefaultSctpChannelConfig:setWriteSpinCount(int), SpdyHeaderBlockJZlibEncoder:end(), AbstractChannel$AbstractUnsafe:<init>(AbstractChannel), SnappyFramedDecoder:<init>(), DefaultFullHttpRequest:duplicate(), DefaultChannelHandlerContext:invokeChannelRead(Object), SocketChannelUDT:write(ByteBuffer), HttpPostRequestDecoder$1:<clinit>(), HttpVersion:<init>(String-int-int-boolean), AbstractTrafficShapingHandler$2:<init>(AbstractTrafficShapingHandler-ChannelHandlerContext-Object), NioSctpChannel:parent(), ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int), ProtobufVarint32FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), MessageFormatter:safeObjectAppend(StringBuffer-Object), ThreadPerChannelEventLoop:deregister(), HashedWheelTimer:<init>(), SpdyHttpDecoder:<init>(int-int), DefaultChannelGroup$1:operationComplete(Future), EmbeddedChannel:recordException(Throwable), HashedWheelTimer:stop(), CompleteChannelFuture:syncUninterruptibly(), ChannelFutureListener:<clinit>(), AbstractChannel:connect(SocketAddress-ChannelPromise), HttpResponseDecoder:setSingleDecode(boolean), ConcurrentHashMapV8$ValueIterator:next(), DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf), ReadTimeoutHandler:access$202(ReadTimeoutHandler-ScheduledFuture), DefaultThreadFactory:<init>(Class), TypeParameterMatcher:<clinit>(), UnpooledUnsafeDirectByteBuf:<clinit>(), UnpooledHeapByteBuf:getBytes(int-ByteBuffer), ChannelMatchers:invert(ChannelMatcher), WebSocketServerProtocolHandshakeHandler:getWebSocketLocation(ChannelPipeline-HttpRequest-String), SpdyStreamStatus:compareTo(SpdyStreamStatus), ChannelPipeline:replace(ChannelHandler-String-ChannelHandler), HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset), HttpMethod:name(), Unpooled:copyFloat(float), AbstractNioByteChannel:eventLoop(), DefaultSpdySettingsFrame:removeValue(int), AbstractBootstrap:localAddress(InetAddress-int), RxtxChannel$RxtxUnsafe:ensureOpen(ChannelPromise), DefaultHttpHeaders:names(), ObjectEncoderOutputStream:writeShort(int), SslHandler$LazyChannelPromise:addListener(GenericFutureListener), QueryStringDecoder:decodeComponent(String), MarshallingEncoder:<init>(MarshallerProvider), WebSocketServerProtocolHandler:getHandshaker(ChannelHandlerContext), SocksCmdRequestDecoder$1:<clinit>(), DefaultChannelHandlerContext$9:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext-Object), WebSocketClientProtocolHandshakeHandler:<init>(WebSocketClientHandshaker), DefaultChannelHandlerContext:invokeFlush0(), EmptyByteBuf:order(ByteOrder), WebSocketFrameAggregator:<init>(int), LogLevel[]:clone(), DefaultAddressedEnvelope:release(int), LocalChannel$4:run(), ForkJoinTask:inForkJoinPool(), SocksAuthStatus:byteValue(), DefaultByteBufHolder:copy(), ChannelFutureListener$2:operationComplete(ChannelFuture), AbstractEventExecutorGroup:schedule(Runnable-long-TimeUnit), SwappedByteBuf:compareTo(Object), ByteBuf:order(ByteOrder), Recycler$Stack:<init>(Recycler-Thread), DefaultProgressivePromise:setFailure(Throwable), FailedChannelFuture:syncUninterruptibly(), SpdySession:putPendingWrite(int-Object), FileUpload:content(), DefaultChannelProgressivePromise:setProgress(long-long), HttpContentEncoder:handlerRemoved(ChannelHandlerContext), EmbeddedEventLoop:register(Channel-ChannelPromise), DefaultRxtxChannelConfig:setReadTimeout(int), SpdySessionHandler:<clinit>(), ReplayingDecoder:<init>(), SpdySessionStatus:compareTo(SpdySessionStatus), WebSocketFrameAggregator:channelInactive(ChannelHandlerContext), DuplicatedByteBuf:_getByte(int), SwappedByteBuf:indexOf(int-int-byte), DefaultServerSocketChannelConfig:getOption(ChannelOption), SslHandler:safeClose(ChannelHandlerContext-ChannelFuture-ChannelPromise), JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), HttpHeaders:getAll(String), SpdySynStreamFrame:isLast(), SingleThreadEventExecutor$5:run(), UniqueName:hashCode(), RxtxChannelOption:<init>(String), ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame), ClassResolver:resolve(String), AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(Future), HttpResponseStatus:valueOf(int), AbstractByteBufAllocator:compositeDirectBuffer(int), DefaultChannelPipeline:toString(), MemoryAttribute:getCharset(), RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest), SocksAuthRequest:encodeAsByteBuf(ByteBuf), SctpChannelConfig:getAllocator(), WebSocketClientHandshaker07:expectedSubprotocol(), CloseWebSocketFrame:<init>(boolean-int-int-String), HttpObjectDecoder:checkpoint(Object), Log4JLogger:debug(String-Object[]), ChannelInboundHandler:exceptionCaught(ChannelHandlerContext-Throwable), DefaultSpdyRstStreamFrame:<init>(int-int), ConcurrentHashMapV8:<init>(int-float), AbstractNioMessageChannel:doWriteMessages(Object[]-int-int-boolean), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), WebSocketUtil:md5(byte[]), MemoryFileUpload:retain(), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:valueOf(String), Unpooled:wrappedBuffer(ByteBuffer[]), DefaultCookie:getValue(), HttpObjectEncoder:encodeHeader(ByteBuf-String-String), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), PlatformDependent:arrayBaseOffset0(), ScheduledFutureTask:nanoTime(), AbstractByteBuf:getBytes(int-ByteBuf), NioSctpChannel:doDisconnect(), DefaultSpdyHeaders$HeaderEntry:remove(), SpdyHeaders:names(), ConcurrentHashMapV8$MapReduceKeysToIntTask:compute(), SingleThreadEventLoop:register(Channel-ChannelPromise), AbstractByteBufAllocator:ioBuffer(int-int), CompositeByteBuf:findComponent(int), PoolThreadCache:<init>(PoolArena-PoolArena), ConcurrentHashMapV8$ForEachEntryTask:addToPendingCount(int), SpdyHttpHeaders:setAssociatedToStreamId(HttpMessage-int), DefaultChannelPipeline$HeadHandler:read(ChannelHandlerContext), LocalServerChannel$1:run(), Channel:config(), SpdyHeaderBlockZlibDecoder:decode(ByteBuf-SpdyHeadersFrame), SwappedByteBuf:getShort(int), SingleThreadEventExecutor$2:run(), SocksAuthScheme:byteValue(), ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), DefaultSpdyHeaders$HeaderEntry:getKey(), WebSocketServerHandshaker00:newHandshakeResponse(FullHttpRequest-HttpHeaders), SslHandler$3:<init>(SslHandler-ScheduledFuture), DefaultDatagramChannelConfig:getOption(ChannelOption), PooledUnsafeDirectByteBuf:copy(int-int), StringEncoder:encode(ChannelHandlerContext-Object-ByteBuf), UnreleasableByteBuf:internalNioBuffer(int-int), HttpHeaders$1:remove(String), AbstractByteBuf:copy(int-int), ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8), NioUdtMessageConnectorChannel:doWriteMessages(Object[]-int-int-boolean), HttpPostRequestDecoder:readLineStandard(), ConcurrentHashMapV8$MapReduceKeysTask:invoke(), Log4JLogger:error(String-Object-Object), DefaultChannelConfig:getAllocator(), ReadTimeoutHandler:readTimedOut(ChannelHandlerContext), ChannelInboundHandlerAdapter:channelInactive(ChannelHandlerContext), AbstractReferenceCountedByteBuf:writeBytes(byte[]), ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$BiFun), TooLongFrameException:<init>(Throwable), NioTask:channelReady(SelectableChannel-SelectionKey), SctpNotificationHandler:handleNotification(SendFailedNotification-Object), AbstractOioChannel:doConnect(SocketAddress-SocketAddress), EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel), DefaultHttpHeaders:getAll(String), ProtobufEncoder:<init>(), PooledByteBuf:initUnpooled(PoolChunk-int), ChunkedWriteHandler$1:<init>(ChunkedWriteHandler-ChannelHandlerContext), FailedChannelFuture:<init>(Channel-EventExecutor-Throwable), SctpServerChannel:accept(), ByteArrayDecoder:decode(ChannelHandlerContext-ByteBuf-List), Unpooled:directBuffer(int), ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference), UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int), AbstractBootstrap:localAddress(String-int), ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiAction), DefaultChannelPipeline:addLast0(String-DefaultChannelHandlerContext), SingleThreadEventExecutor:removeTask(Runnable), HttpPostRequestDecoder:<init>(HttpRequest), AbstractByteBuf:forEachByte(ByteBufProcessor), DefaultChannelHandlerContext$18:<init>(DefaultChannelHandlerContext-Object-ChannelPromise), PlatformDependent:objectFieldOffset(Field), Unpooled:wrappedBuffer(int-ByteBuf[]), NioUdtByteConnectorChannel:doReadBytes(ByteBuf), CountedCompleter:decrementPendingCountUnlessZero(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String-Throwable), AbstractReferenceCountedByteBuf:setZero(int-int), ByteBuf:isReadable(), ScheduledFutureTask:toStringBuilder(), UnpooledHeapByteBuf:checkDstIndex(int-int-int-int), Bootstrap:remoteAddress(String-int), PongWebSocketFrame:retain(int), ConcurrentHashMapV8$SearchEntriesTask:propagateCompletion(), UnreleasableByteBuf:duplicate(), Logger:debug(String-Object[]), AddressedEnvelope:content(), ForkJoinTask$AdaptedRunnableAction:setRawResult(Void), ThreadLocalRandom:current(), PooledDirectByteBuf:nioBuffer(int-int), UnpooledHeapByteBuf:getByte(int), PingWebSocketFrame:retain(), DefaultOioSocketChannelConfig:setAllowHalfClosure(boolean), UnsupportedMessageTypeException:message(String-Class[]), HttpPostRequestEncoder:setBodyHttpDatas(List), DiskFileUpload:compareTo(Object), NioSocketChannel:doReadBytes(ByteBuf), ChunkedFile:<init>(File-int), UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int), DefaultPromise$CauseHolder:<init>(Throwable), DefaultOioSocketChannelConfig:setReuseAddress(boolean), MemoryFileUpload:length(), ReadOnlyUnsafeDirectByteBuf:_getLong(int), SslHandler:deregister(ChannelHandlerContext-ChannelPromise), ByteBufInputStream:readByte(), WebSocketFrameAggregator:decode(ChannelHandlerContext-Object-List), AbstractByteBuf:getLong(int), DefaultServerSocketChannelConfig:getBacklog(), SpdyHeaders$1:iterator(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), HttpResponseDecoder:<init>(int-int-int), DefaultSpdyWindowUpdateFrame:setStreamId(int), ChannelBufferByteInput:read(byte[]-int-int), TrafficCounter:cumulativeWrittenBytes(), NioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise), SslHandler$PendingWrite:<init>(ByteBuf), Bootstrap:<clinit>(), AbstractBootstrap:<init>(AbstractBootstrap), Log4JLogger:isTraceCapable(), SslHandler:notifyHandshakeFailure(Throwable), Attribute:setContent(InputStream), SpdySessionHandler:handleOutboundMessage(ChannelHandlerContext-Object-ChannelPromise), DefaultChannelPipeline:get(Class), ConcurrentHashMapV8$MapReduceKeysTask:addToPendingCount(int), ObjectDecoderInputStream:readChar(), ByteToMessageCodec$2:decodeLast(ChannelHandlerContext-ByteBuf-List), SwappedByteBuf:compareTo(ByteBuf), LimitingByteInput:readable(int), SslHandler$CloseNotifyListener:operationComplete(ChannelFuture), NioSocketChannel:isOutputShutdown(), PooledHeapByteBuf:newInstance(int), OioByteStreamChannel$1:<init>(), IdleState:<init>(String-int), ChannelInboundHandler:channelRegistered(ChannelHandlerContext), NioSctpServerChannel:allLocalAddresses(), MixedFileUpload:setContentType(String), EmptyByteBuf:getInt(int), HttpPostRequestEncoder$EncoderMode:<clinit>(), DefaultHttpHeaders:eq(String-String), HttpPostBodyUtil$TransferEncodingMechanism:value(), UnpooledDirectByteBuf:nioBuffers(int-int), ConcurrentHashMapV8$ForEachEntryTask:fork(), OioSocketChannel$1:<init>(OioSocketChannel-ChannelPromise), SpdyHttpHeaders:setScheme(HttpMessage-String), NioUdtByteConnectorChannel:doConnect(SocketAddress-SocketAddress), ByteBuf:isDirect(), DecoderException:<init>(), AbstractNioChannel$AbstractNioUnsafe:close(ChannelPromise), DefaultOioSocketChannelConfig:getSoTimeout(), HttpContentEncoder:ensureHeaders(HttpObject), SpdyFrameEncoder$1:operationComplete(Future), DefaultFutureListeners:listeners(), ByteBuf:discardSomeReadBytes(), RecyclableArrayList$1:<init>(), AbstractBootstrap:bind(String-int), DefaultChannelHandlerContext:newProgressivePromise(), NioUdtMessageConnectorChannel:<init>(), PooledHeapByteBuf$1:<init>(), ReadOnlyByteBuf:arrayOffset(), AbstractOioChannel:doRead(), DefaultChannelPipeline:replace(String-String-ChannelHandler), SingleThreadEventExecutor:updateLastExecutionTime(), WebSocketServerProtocolHandler$ServerHandshakeStateEvent:values(), AbstractDiskHttpData:retain(), CountedCompleter:getUnsafe(), GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long), DefaultSpdyDataFrame:<init>(int), CompleteChannelFuture:addListener(GenericFutureListener), ByteBuf:duplicate(), VoidChannelPromise:await(long), SwappedByteBuf:hasArray(), NioDatagramChannel:remoteAddress(), SpdyHeaders:setHeader(SpdyHeadersFrame-String-Iterable), UnreleasableByteBuf:refCnt(), ByteBuf:readByte(), PooledByteBuf:recycle(), PlatformDependent:maxDirectMemory0(), AbstractByteBufAllocator:buffer(), NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise), ChannelDuplexHandler:channelRegistered(ChannelHandlerContext), AbstractByteBuf:readInt(), AbstractReferenceCountedByteBuf:setFloat(int-float), ObjectDecoderInputStream:readObject(), DefaultPromise$1:initialValue(), DefaultUdtChannelConfig:getProtocolReceiveBufferSize(), CommonsLogger:info(String-Throwable), AbstractEventExecutor:shutdownGracefully(long-long-TimeUnit), DefaultChannelGroupFuture$1:<clinit>(), HttpServerCodec:<init>(), PrematureChannelClosureException:<init>(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), DefaultSpdyHeaders:eq(String-String), SwappedByteBuf:array(), DefaultSpdyHeadersFrame:getStreamId(), HttpContentEncoder:encode(ChannelHandlerContext-HttpObject-List), AbstractTrafficShapingHandler:getTimeToWait(long-long-long-long), PromiseTask:setSuccessInternal(Object), LocalServerChannel:doBind(SocketAddress), SslHandler:flush0(ChannelHandlerContext), PlatformDependent0:putShort(long-short), AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel-AbstractServerChannel$1), EmbeddedChannel:access$300(EmbeddedChannel-Throwable), DefaultSpdySynStreamFrame:setAssociatedToStreamId(int), Attribute:addContent(ByteBuf-boolean), AbstractChannel$AbstractUnsafe$4:<init>(AbstractChannel$AbstractUnsafe), SingleThreadEventExecutor:access$700(SingleThreadEventExecutor), ServerBootstrap:bind(), AbstractReferenceCountedByteBuf:clear(), ChunkedStream:isEndOfInput(), Base64Encoder:<init>(), WebSocketServerProtocolHandshakeHandler$1:<init>(WebSocketServerProtocolHandshakeHandler-ChannelHandlerContext), NioSocketChannel:isActive(), EventLoop:execute(Runnable), AbstractChannel:doBind(SocketAddress), DefaultDatagramChannelConfig:getSendBufferSize(), LongAdder:doubleValue(), ChannelInboundHandler:channelUnregistered(ChannelHandlerContext), HttpRequest:setProtocolVersion(HttpVersion), ByteBufProcessor$6:<init>(), Bootstrap:clone(), DefaultChannelGroup:<init>(String-EventExecutor), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:invoke(), NotSslRecordException:<init>(), SctpServerChannel:isOpen(), ChannelInboundHandler:channelWritabilityChanged(ChannelHandlerContext), TrafficCounter:bytesWriteFlowControl(long), DefaultChannelPipeline$TailHandler:exceptionCaught(ChannelHandlerContext-Throwable), ChannelFutureListener$3:operationComplete(ChannelFuture), UnreleasableByteBuf:slice(), ChannelOutboundHandlerAdapter:deregister(ChannelHandlerContext-ChannelPromise), ConcurrentHashMapV8$ForEachMappingTask:advance(), SlicedByteBuf:nioBuffer(int-int), ConcurrentHashMapV8$MapReduceKeysTask:fork(), AbstractChannel:access$400(AbstractChannel), SpdyHttpCodec:<init>(int-int), UnpooledHeapByteBuf:memoryAddress(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:firstComplete(), ForkJoinWorkerThread:setName(String), SpdyFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), CountedCompleter:compute(), OioSctpChannel$2:<init>(OioSctpChannel-InetAddress-ChannelPromise), WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker), DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), IdleStateHandler:handlerAdded(ChannelHandlerContext), HttpResponseStatus:toString(), UdtChannelConfig:getAllocator(), DecompressionException:<init>(Throwable), ObjectEncoderOutputStream:writeBoolean(boolean), ThreadPerChannelEventLoop$1:operationComplete(Future), DefaultSpdySettingsFrame$Setting:isPersisted(), Slf4JLogger:info(String-Object), SingleThreadEventExecutor:startThread(), DefaultSocketChannelConfig:setWriteBufferLowWaterMark(int), SpdyHeaderBlockRawDecoder:reset(), ByteBufUtil:<init>(), ConcurrentHashMapV8$BiAction:apply(Object-Object), DefaultSpdyGoAwayFrame:setLastGoodStreamId(int), AbstractByteBuf:setBoolean(int-boolean), MemoryAttribute:toString(), AbstractServerChannel:newUnsafe(), PoolChunk:<init>(PoolArena-Object-int), ByteBuf:getInt(int), ReplayingDecoderBuffer:forEachByte(ByteBufProcessor), SpdyHeaderBlockJZlibEncoder:setInput(ByteBuf), HttpResponseStatus:compareTo(HttpResponseStatus), ConcurrentHashMapV8:spread(int), DefaultChannelPipeline:addLast(String-ChannelHandler), DefaultChannelPipeline:remove0(DefaultChannelHandlerContext), OioServerSocketChannel:<init>(), DefaultChannelConfig:getWriteBufferLowWaterMark(), LimitingByteInput:read(byte[]), FileUpload:renameTo(File), SlicedByteBuf:setBytes(int-InputStream-int), ReplayingDecoderBuffer:getShort(int), ReadOnlyByteBuf:getByte(int), ThreadLocalRandom$1:<init>(), SpdyFrameCodec:<init>(int), EmptyByteBuf:getUnsignedByte(int), HttpPostRequestDecoder$MultiPartStatus:valueOf(String), DefaultCookie:setDomain(String), DefaultChannelHandlerContext:connect(SocketAddress), SocksInitRequestDecoder$State:ordinal(), AbstractNioChannel$AbstractNioUnsafe:forceFlush(), WriteTimeoutHandler:write(ChannelHandlerContext-Object-ChannelPromise), UnreleasableByteBuf:readBytes(int), FullHttpResponse:headers(), AbstractByteBuf:setMedium(int-int), DefaultUdtChannelConfig:apply(ChannelUDT), IdleStateHandler$ReaderIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), PlatformDependent0:getObject(Object-long), MessageToMessageDecoder:channelRead(ChannelHandlerContext-Object), ConcurrentHashMapV8$MapReduceEntriesToIntTask:getRawResult(), Unpooled:copyMedium(int[]), OioSocketChannel:isInputShutdown(), RxtxChannel:<init>(), NioUdtAcceptorChannel:doBind(SocketAddress), DefaultSocketChannelConfig:isAllowHalfClosure(), AbstractEventExecutorGroup:submit(Runnable), AbstractEventExecutorGroup:shutdownGracefully(long-long-TimeUnit), DefaultChannelHandlerContext:close(), NioEventLoopGroup:children(), PooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int), DefaultChannelGroupFuture:executor(), SpdyHeaderBlockZlibEncoder:<init>(int-int), JdkLogger:trace(String-Object), Base64:breakLines(Base64Dialect), Cleaner:clean(), ReadOnlyByteBufferBuf:getBytes(int-byte[]-int-int), AbstractInternalLogger:log(InternalLogLevel-String-Object), ByteBufUtil:encodeString(CharBuffer-Charset), GlobalEventExecutor$1:run(), ByteBufUtil:decodeString(ByteBuffer-Charset), LengthFieldPrepender:<init>(int-boolean), ChunkedWriteHandler$1:run(), DefaultPromise:toString(), SSLEngine:getUseClientMode(), PooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer), AbstractByteBuf:writeShort(int), ChannelPipeline:addAfter(String-String-ChannelHandler), DefaultOioSocketChannelConfig:setSendBufferSize(int), DefaultChannelPromise:setSuccess(), AbstractChannel:writeAndFlush(Object), ReplayingDecoderBuffer:clear(), SwappedByteBuf:isWritable(int), CompactObjectInputStream:resolveClass(ObjectStreamClass), SocketChannelUDT:socket(), UnpooledHeapByteBuf:getBytes(int-byte[]-int-int), Unsafe:putByte(long-byte), SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-ChannelPromise), SslHandler:ignoreException(Throwable), AbstractReferenceCountedByteBuf:writeZero(int), SocksAuthRequestDecoder$1:<clinit>(), ChannelPromiseNotifier:operationComplete(Future), AbstractByteBuf:setDouble(int-double), NioDatagramChannelConfig:<clinit>(), DecompressionException:<init>(), PlatformDependent:isAndroid(), PooledUnsafeDirectByteBuf:_setInt(int-int), WebSocket08FrameDecoder:state(), SnappyFramedDecoder:mapChunkType(byte), WebSocketClientProtocolHandshakeHandler$1:<init>(WebSocketClientProtocolHandshakeHandler-ChannelHandlerContext), ChunkedFile:<init>(RandomAccessFile-int), NioSctpChannel:selectionKey(), HttpResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), ClassResolvers:defaultClassLoader(ClassLoader), HttpObjectDecoder:<clinit>(), DefaultPromise:<init>(), AbstractByteBufAllocator:ioBuffer(), MixedFileUpload:getContentTransferEncoding(), IdleStateHandler:<init>(int-int-int), AbstractNioMessageChannel:selectionKey(), ForkJoinWorkerThread:setDaemon(boolean), MemoryAttribute:content(), WebSocketServerHandshaker:subprotocols(), ConcurrentHashMapV8:initTable(), SpdySession:hasReceivedReply(int), DiskFileUpload:copy(), InternetProtocolFamily:ordinal(), Snappy:decode(ByteBuf-ByteBuf), AbstractBootstrap:channelFactory(ChannelFactory), UnpooledDirectByteBuf:getBytes(int-byte[]-int-int), AbstractChannel:toString(), InternalAttribute:addValue(String), AbstractBootstrap:channel(Class), ZlibCodecFactory:newZlibEncoder(byte[]), DefaultChannelGroup:disconnect(), Snappy$State:valueOf(String), ScheduledFutureTask:setUncancellableInternal(), ByteBuf:getBytes(int-ByteBuf-int), SocksCmdResponseDecoder$1:<clinit>(), CompositeByteBuf:markReaderIndex(), CompositeByteBuf:readBytes(ByteBuffer), RxtxChannelConfig$Paritybit:<clinit>(), CloseWebSocketFrame:newBinaryData(int-String), ByteBufAllocator:buffer(int-int), DefaultSpdyDataFrame:setStreamId(int), AbstractChannel:access$600(AbstractChannel), ConcurrentHashMapV8$EntrySetView:contains(Object), DiskAttribute:setValue(String), DefaultDatagramChannelConfig:setTimeToLive(int), ForkJoinPool:newTaskFor(Runnable-Object), BlockingOperationException:<init>(String-Throwable), DefaultLastHttpContent$1:validateHeaderName0(String), SocksCmdResponse:protocolVersion(), UnpooledDirectByteBuf:order(), AbstractChannel$CloseFuture:trySuccess(), AbstractHttpData:retain(), DefaultDatagramChannelConfig:setLoopbackModeDisabled(boolean), NioEventLoop:pollTask(), AbstractInternalLogger:debug(String-Throwable), AbstractNioChannel:isFlushPending(), WebSocket00FrameDecoder:<init>(int), ByteBufInputStream:read(byte[]-int-int), ZlibWrapper:ordinal(), SwappedByteBuf:writerIndex(int), ReplayingDecoderBuffer:getLong(int), WebSocketServerHandshaker00:uri(), SocksAuthRequestDecoder$State:valueOf(String), HttpClientCodec:setSingleDecode(boolean), ChannelHandlerContext:write(Object), EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel-EmbeddedChannel$1), QueryStringEncoder:encodeComponent(String-Charset), Base64Decoder:<init>(), UniqueName:compareTo(Object), PooledHeapByteBuf:checkIndex(int-int), WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse), HttpHeaders:add(String-Object), OioServerSocketChannel:isOpen(), WebSocketVersion:toString(), ChannelException:<init>(), AbstractByteBuf:readUnsignedMedium(), Slf4JLogger:debug(String), SocksInitResponseDecoder$State:<clinit>(), ConcurrentHashMapV8$BulkTask:advance(), RxtxChannelConfig$Stopbits:valueOf(int), HttpHeaders$1:set(String-Object), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String-Throwable), DuplicatedByteBuf:array(), UnpooledDirectByteBuf:nioBuffer(int-int), AbstractDerivedByteBuf:release(), SocksAuthResponse:<init>(SocksAuthStatus), PooledDirectByteBuf:idx(int), AbstractByteBuf:writableBytes(), SpdyFrameEncoder:<init>(int-int-int-int), EmptyByteBuf:readUnsignedShort(), AbstractChannel$AbstractUnsafe:remoteAddress(), SlicedByteBuf:memoryAddress(), ConcurrentHashMapV8$SearchValuesTask:quietlyCompleteRoot(), HttpPostRequestDecoder:hasNext(), AbstractReferenceCountedByteBuf:writeLong(long), TooLongFrameException:<init>(String-Throwable), SpdyHeaders:getHeader(SpdyHeadersFrame-String), MixedAttribute:release(), ConcurrentHashMapV8$SearchEntriesTask:invoke(), UnreleasableByteBuf:writerIndex(int), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), LocalChannel$1:initialValue(), Base64Dialect:<clinit>(), HttpContent:release(), Attribute:copy(), MessageLite:getParserForType(), RxtxChannel:doConnect(SocketAddress-SocketAddress), ByteBufAllocator:directBuffer(int), DefaultSctpChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), SocksInitResponseDecoder$State:<init>(String-int), PooledDirectByteBuf:capacity(), ForkJoinPool:getQueuedSubmissionCount(), AbstractChannel$AbstractUnsafe:localAddress(), EmbeddedEventLoop:terminationFuture(), ForkJoinTask:getException(), PongWebSocketFrame:copy(), PooledDirectByteBuf:nioBuffers(int-int), ConcurrentHashMapV8$ReservationNode:<init>(), ThreadLocalRandom$1:initialValue(), CompositeByteBuf:markWriterIndex(), DefaultChannelHandlerContext:invokeUserEventTriggered(Object), HttpPostRequestDecoder:skipOneLine(), VoidChannelPromise:trySuccess(Object), MessageList:add(Object-ChannelPromise), AbstractByteBuf:<init>(int), Snappy:getHashTable(int), SpdySessionHandler:halfCloseStream(int-boolean), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), RxtxChannel:isActive(), SctpInboundByteStreamHandler:<init>(int-int), EmptyByteBuf:readInt(), Logger:debug(String-Object), SocksInitResponseDecoder$State:ordinal(), Bootstrap:doConnect(SocketAddress-SocketAddress), ConcurrentHashMapV8$ValuesView:addAll(Collection), DefaultChannelPipeline:<clinit>(), FileUpload:length(), ChannelHandlerContext:executor(), JdkLogger:warn(String-Object[]), CommonsLogger:isErrorEnabled(), Slf4JLoggerFactory:<init>(), MixedAttribute:setContent(File), AbstractByteBuf:readUnsignedByte(), RxtxChannel:remoteAddress0(), UnpooledHeapByteBuf:setByte(int-int), HttpObjectDecoder:createMessage(String[]), AbstractByteBuf:setFloat(int-float), EmptyByteBuf:setBytes(int-ByteBuf-int-int), AbstractChannel:access$900(AbstractChannel), CompatibleObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf), AbstractChannel:compareTo(Object), FixedLengthFrameDecoder:<init>(int), ByteBuf:readUnsignedInt(), SpdyStreamStatus:<clinit>(), CompositeByteBuf:toComponentIndex(int), ContinuationWebSocketFrame:duplicate(), ByteBufOutputStream:write(byte[]), HttpPostRequestDecoder:addHttpData(InterfaceHttpData), NioDatagramChannelConfig:setNetworkInterface(NetworkInterface), SocketChannelUDT:isOpen(), AbstractEventExecutorGroup:submit(Runnable-Object), DefaultChannelHandlerContext:access$1500(DefaultChannelHandlerContext-ChannelPromise), OioDatagramChannel:<init>(MulticastSocket), ConcurrentHashMapV8$MapReduceEntriesToIntTask:fork(), ForkJoinPool:hasQueuedSubmissions(), CompositeByteBuf:decompose(int-int), ByteToMessageDecoder:handlerRemoved0(ChannelHandlerContext), WebSocketServerProtocolHandler:<init>(String-String-boolean), PooledHeapByteBuf:setBytes(int-ByteBuf-int-int), ChannelOutboundBuffer:fail(Throwable), IdleStateHandler$1:operationComplete(ChannelFuture), EmptyByteBuf:readBytes(ByteBuf-int), ObjectDecoderInputStream:<init>(InputStream-ClassLoader), DiskFileUpload:addContent(ByteBuf-boolean), UnpooledDirectByteBuf:readerIndex(), MemoryAttribute:hashCode(), UnpooledHeapByteBuf:getInt(int), ChannelBufferByteInput:available(), PingWebSocketFrame:<init>(ByteBuf), NioServerSocketChannel:remoteAddress(), AbstractByteBufAllocator:<init>(), CharsetUtil:getEncoder(Charset), UnpooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int), ReplayingDecoderBuffer:readBytes(byte[]-int-int), ByteBuf:resetWriterIndex(), Cookie:setPath(String), ConcurrentHashMapV8:mappingCount(), DefaultAttributeMap:attr(AttributeKey), ChannelDuplexHandler:close(ChannelHandlerContext-ChannelPromise), AbstractChannel:access$800(AbstractChannel), SpdySessionHandler:acceptStream(int-byte-boolean-boolean), PooledHeapByteBuf:getBytes(int-OutputStream-int), WebSocket08FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-ByteBuf), SocksInitRequest:<init>(List), CountedCompleter:firstComplete(), Recycler:get(), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ReplayingDecoderBuffer:writeChar(int), JZlibEncoder$1:operationComplete(Future), AbstractByteBuf:isWritable(int), HttpHeaderDateFormat:<clinit>(), RtspRequestEncoder:<init>(), SocketChannelUDT:close(), AbstractChannel:write(Object), DefaultChannelPipeline:<init>(Channel), AbstractInternalLogger:log(InternalLogLevel-String-Object[]), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame), AbstractChannel:read(), SocksResponseType[]:clone(), ResourceLeakDetector$DefaultResourceLeak:access$200(ResourceLeakDetector$DefaultResourceLeak), ConcurrentHashMapV8$SearchEntriesTask:addToPendingCount(int), DefaultChannelHandlerContext:access$500(DefaultChannelHandlerContext), ReplayingDecoderBuffer:markWriterIndex(), AbstractOioChannel$DefaultOioUnsafe:closeIfClosed(), ByteBufAllocator:ioBuffer(int), LimitingByteInput:read(), HttpClientCodec:access$300(HttpClientCodec), DefaultAttributeMap$DefaultAttribute:compareAndSet(Object-Object), InterfaceHttpData$HttpDataType:valueOf(String), SocksAuthResponseDecoder$State[]:clone(), DefaultPromise:setSuccess0(Object), EmbeddedEventLoop:shutdownGracefully(long-long-TimeUnit), QueryStringDecoder:path(), DefaultSpdyDataFrame:refCnt(), ConcurrentHashMapV8$ForEachTransformedMappingTask:propagateCompletion(), HttpContentEncoder:fetchEncoderOutput(List), CombinedChannelDuplexHandler:channelRead(ChannelHandlerContext-Object), DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), MemoryFileUpload:equals(Object), CompositeByteBuf:writeBytes(ByteBuf), VoidChannelPromise:addListener(GenericFutureListener), HttpHeaders:contains(String), SpdyFrameDecoder:<clinit>(), ForkJoinPool$WorkQueue:isEmpty(), OioByteStreamChannel:doWriteBytes(ByteBuf), Unsafe:getObjectVolatile(Object-long), DefaultChannelHandlerContext:newSucceededFuture(), NioEventLoop:schedule(Runnable-long-TimeUnit), DefaultUdtServerChannelConfig:getOptions(), ChannelHandlerContext:newPromise(), DefaultThreadFactory:<init>(Class-boolean), UnpooledDirectByteBuf:setInt(int-int), DefaultThreadFactory:newThread(Runnable), HttpPostRequestEncoder$WrappedHttpRequest:getMethod(), WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), DefaultFullHttpResponse:duplicate(), ForkJoinPool:access$000(), AbstractInternalLogger:log(InternalLogLevel-String), HttpResponse:headers(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), SwappedByteBuf:setBytes(int-ByteBuf), ConcurrentHashMapV8:reduceToLong(long-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), SslHandler:<clinit>(), SwappedByteBuf:clear(), SingleThreadEventExecutor$4:<init>(SingleThreadEventExecutor-Runnable), MemoryFileUpload:getFilename(), PoolSubpage:toString(), Deflater:deflateEnd(), ChunkedWriteHandler:read(ChannelHandlerContext), DefaultUdtChannelConfig:setWriteBufferLowWaterMark(int), PooledByteBufAllocator:validateAndCalculatePageShifts(int), DefaultChannelPromise:trySuccess(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(), ByteToMessageDecoder:channelReadComplete(ChannelHandlerContext), DefaultSpdyHeadersFrame:setStreamId(int), UnreleasableByteBuf:setBytes(int-InputStream-int), AbstractTrafficShapingHandler:isSuspended(ChannelHandlerContext), CompositeByteBuf:_setByte(int-int), Snappy:reset(), WebSocket00FrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), DefaultProgressivePromise:setProgress(long-long), AbstractChannel:close(), JZlibEncoder:<init>(), NioServerSocketChannel:doReadMessages(List), DefaultSocketChannelConfig:getOptions(), WebSocketServerHandshaker00:<init>(String-String-int), ReplayingDecoderBuffer:writeBoolean(boolean), HttpHeaders:iterator(), OioServerSocketChannel:localAddress0(), HttpHeaders:getWebSocketContentLength(HttpMessage), WebSocketFrameAggregator:decode(ChannelHandlerContext-WebSocketFrame-List), HttpPostRequestEncoder$EncoderMode[]:clone(), ByteBuf:readUnsignedMedium(), SlicedByteBuf:setBytes(int-ByteBuffer), JZlibEncoder$2:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), HttpPostRequestEncoder$WrappedFullHttpRequest:headers(), AbstractChannel:connect(SocketAddress-SocketAddress-ChannelPromise), DefaultAddressedEnvelope:toString(), ReadOnlyByteBufferBuf:capacity(), SctpNotificationHandler:handleNotification(PeerAddressChangeNotification-Object), ByteBuf:getBoolean(int), NioServerSocketChannel:config(), Base64:decode(ByteBuf-int-int-Base64Dialect), ObjectDecoderInputStream:read(), PooledByteBufAllocator:newHeapBuffer(int-int), CompositeByteBuf:setBytes(int-InputStream-int), AbstractReferenceCountedByteBuf:writeBytes(ByteBuffer), AbstractByteBuf:_setLong(int-long), Log4JLogger:trace(String-Object-Object), UnreleasableByteBuf:writerIndex(), ReplayingDecoderBuffer:memoryAddress(), ConcurrentHashMapV8$MapReduceKeysTask:advance(), ChunkedNioFile:<init>(FileChannel-long-long-int), DefaultOioServerSocketChannelConfig:setOption(ChannelOption-Object), ChannelMatchers:isNot(Channel), WebSocketServerProtocolHandler:handlerAdded(ChannelHandlerContext), UnpooledDirectByteBuf:_getUnsignedMedium(int), DefaultChannelGroupFuture:checkDeadLock(), DiskFileUpload:getFilename(), ByteBufUtil:compare(ByteBuf-ByteBuf), RtspVersions:<clinit>(), SwappedByteBuf:readBytes(ByteBuf), DefaultSctpChannelConfig:setSendBufferSize(int), DefaultChannelProgressivePromise:setSuccess(Void), ByteBuf:compareTo(Object), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String-Throwable), ByteBuf:nioBuffers(), SpdyFrameDecoder$State:valueOf(String), DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket), SingleThreadEventExecutor:interruptThread(), HttpHeaderDateFormat:get(), SocksInitRequest:protocolVersion(), ObjectDecoderInputStream:markSupported(), Log4JLogger:isDebugEnabled(), ByteBuf:readBytes(int), UnpooledDirectByteBuf:capacity(int), NioDatagramChannel:newPromise(), ChunkedWriteHandler:closeInput(ChunkedInput), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultDatagramChannelConfig:getTrafficClass(), ReadOnlyByteBuf:copy(int-int), SwappedByteBuf:setBytes(int-ByteBuf-int), WebSocketServerHandshaker:newWebSocketEncoder(), CodedOutputStream:flush(), InternalLogger:trace(String-Object), LocalChannel:parent(), DefaultThreadFactory:<init>(String-int), EmptyByteBuf:writeChar(int), NioServerSocketChannel:<clinit>(), DefaultChannelHandlerContext:access$000(DefaultChannelHandlerContext), LogLevel:toInternalLevel(), ProtobufVarint32FrameDecoder:<init>(), NioUdtByteConnectorChannel:doWriteBytes(ByteBuf-boolean), Unpooled:directBuffer(), OioServerSocketChannel:remoteAddress(), MixedAttribute:getValue(), ForkJoinTask:helpQuiesce(), InternalAttribute:getName(), PlatformDependent:javaVersion(), LocalChannel:doDisconnect(), DefaultChannelGroup:disconnect(ChannelMatcher), ChannelHandlerContext:fireChannelReadComplete(), NioSocketChannel:doubleNioBufferArray(ByteBuffer[]-int), ProtocolFamilyConverter$1:<clinit>(), NioSocketChannel:newSocket(), Unpooled:copyLong(long[]), JdkLogger:debug(String-Object-Object), Base64:decode(ByteBuf-int-int), AbstractNioChannel$AbstractNioUnsafe:ch(), ConcurrentHashMapV8:compute(Object-ConcurrentHashMapV8$BiFun), PoolArena:newByteBuf(int), CompositeByteBuf:componentAtOffset(int), RxtxChannel$RxtxUnsafe:access$100(RxtxChannel$RxtxUnsafe), ForkJoinTask:compareAndSetForkJoinTaskTag(short-short), SwappedByteBuf:forEachByte(int-int-ByteBufProcessor), HttpPostRequestDecoder:parseBodyMultipart(), SocksCmdRequestDecoder$State:values(), ServerBootstrap:toString(), AbstractBootstrap$BootstrapChannelFactory:toString(), SwappedByteBuf:setMedium(int-int), DefaultCookie:isHttpOnly(), InternalLogger:error(String), ChannelPipeline:fireUserEventTriggered(Object), CompositeByteBuf$Component:freeIfNecessary(), Cookie:isDiscard(), ZlibUtil:deflaterException(Deflater-String-int), ConcurrentHashMapV8$ForEachTransformedEntryTask:advance(), SocksAuthStatus[]:clone(), WebSocketUtil:randomBytes(int), UnreleasableByteBuf:compareTo(Object), HttpRequestDecoder:createInvalidMessage(), DecompressionException:<init>(String-Throwable), LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int), AbstractChannel:alloc(), ConcurrentHashMapV8:reduceEntriesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), AbstractChannel:isOpen(), DefaultSpdySynStreamFrame:setPriority(byte), ConcurrentHashMapV8$SearchValuesTask:addToPendingCount(int), PooledByteBuf:setRefCnt(int), SpdySessionStatus:toString(), ReadOnlyByteBufferBuf:order(), HttpPostRequestEncoder$WrappedFullHttpRequest:getProtocolVersion(), DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int), ChannelInboundHandler:handlerAdded(ChannelHandlerContext), NioDatagramChannelConfig:setTimeToLive(int), PooledHeapByteBuf:checkDstIndex(int-int-int-int), CompositeByteBuf:setBytes(int-byte[]-int-int), UnpooledHeapByteBuf:readerIndex(), SwappedByteBuf:nioBuffers(), DefaultSocketChannelConfig:setAutoRead(boolean), ChannelHandlerContext:writeAndFlush(Object), SocksInitResponse:<init>(SocksAuthScheme), ChannelPipelineException:<init>(String), DefaultChannelPipeline:callHandlerRemoved0(DefaultChannelHandlerContext), ChannelConfig:setOptions(Map), WebSocketFrameAggregator:handlerRemoved(ChannelHandlerContext), DefaultSpdyDataFrame:duplicate(), Logger:trace(String), CaseIgnoringComparator:<init>(), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), PoolSubpage:toHandle(int), ByteBuf:setBytes(int-ByteBuf-int), ForkJoinPool:shutdown(), HttpPostRequestDecoder$MultiPartStatus:<clinit>(), SpdyOrHttpChooser$SelectedProtocol[]:clone(), ChunkedFile:<init>(RandomAccessFile), PoolChunk:allocateSubpage(int-int-int), CompactObjectInputStream:readClassDescriptor(), PlatformDependent0:putByte(long-byte), SlicedByteBuf:arrayOffset(), HttpPostBodyUtil$TransferEncodingMechanism[]:clone(), StringUtil:<init>(), DefaultChannelHandlerContext:notifyHandlerException(Throwable), OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), SwappedByteBuf:capacity(), SystemPropertyUtil:getBoolean(String-boolean), HttpClientCodec$Encoder:encode(ChannelHandlerContext-HttpObject-List), ReplayingDecoderBuffer:writerIndex(), ChunkedNioFile:<init>(FileChannel), LocalServerChannel:doPreClose(), DefaultOioSocketChannelConfig:setOption(ChannelOption-Object), ForkJoinTask$AdaptedRunnable:exec(), EmbeddedChannel:readInbound(), AbstractInternalLogger:name(), SSLException:setStackTrace(StackTraceElement[]), SpdyHttpHeaders:getStreamId(HttpMessage), SelectedSelectionKeySet:doubleCapacityA(), ByteBuf:writeBoolean(boolean), CommPortIdentifier:getPortIdentifier(String), NioSocketChannel:remoteAddress(), PlatformDependent:maxDirectMemory(), ForkJoinPool$WorkQueue:<init>(ForkJoinPool-ForkJoinWorkerThread-int-int), SwappedByteBuf:getUnsignedInt(int), DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), AbstractReferenceCountedByteBuf:deallocate(), SocksCommonUtils:<init>(), SpdyRstStreamFrame:getStreamId(), EmptyByteBuf:readByte(), SpdyFrameCodec:<init>(int-int-int-int-int-int), RxtxChannelConfig$Stopbits:<init>(String-int-int), ServerBootstrap$ServerBootstrapAcceptor:exceptionCaught(ChannelHandlerContext-Throwable), ChannelInboundHandler:channelInactive(ChannelHandlerContext), PlatformDependent:throwException0(Throwable), DefaultChannelPipeline:replace(Class-String-ChannelHandler), HttpHeaders:is100ContinueExpected(HttpMessage), WebSocket08FrameDecoder:<init>(boolean-boolean-int), ChannelDuplexHandler:channelUnregistered(ChannelHandlerContext), ChannelDuplexHandler:write(ChannelHandlerContext-Object-ChannelPromise), EmptyByteBuf:toString(int-int-Charset), DefaultChannelHandlerContext:fireChannelUnregistered(), ChannelHandlerContext:close(), ReplayingDecoderBuffer:readBoolean(), NioUdtByteConnectorChannel:doFinishConnect(), ConcurrentHashMapV8$MapReduceKeysToIntTask:getRawResult(), DefaultDatagramChannelConfig:setReuseAddress(boolean), JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader), ByteBuf:bytesBefore(int-byte), TypeParameterMatcher:<init>(), DefaultChannelGroup$1:<init>(DefaultChannelGroup), CtClass:setModifiers(int), ChannelConfig:getRecvByteBufAllocator(), NioUdtByteConnectorChannel:doDisconnect(), AbstractReferenceCountedByteBuf:readerIndex(int), DefaultPromise:access$400(ProgressiveFuture-GenericProgressiveFutureListener-long-long), SingleThreadEventExecutor:hasTasks(), ThreadLocalRandom:nextDouble(double-double), DefaultChannelGroupFuture:find(Channel), UnreleasableByteBuf:setShort(int-int), UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int), ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$BiFun), StringDecoder:<init>(Charset), SlicedByteBuf:writerIndex(), DefaultOioServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket), PoolArena:reallocate(PooledByteBuf-int-boolean), PlatformDependent:copyMemory(long-long-long), LocalEventLoop:<init>(LocalEventLoopGroup-ThreadFactory), SocketChannelUDT:configureBlocking(boolean), ChunkedWriteHandler:<init>(), SslHandler:setHandshakeFailure(Throwable), MessageToMessageDecoder:<init>(), SpdyHeaders$1:getAll(String), ForkJoinPool:helpRelease(long-ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue-ForkJoinPool$WorkQueue-int), Striped64$1:run(), DefaultPromise:tryFailure(Throwable), JZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ByteInput:skip(long), PooledUnsafeDirectByteBuf:newInternalNioBuffer(ByteBuffer), Unpooled:copiedBuffer(byte[]), CompositeByteBuf:checkDstIndex(int-int-int-int), ByteBuf:writeFloat(float), AbstractChannel:write(Object-ChannelPromise), NioSctpChannel:allRemoteAddresses(), DefaultSpdyWindowUpdateFrame:<init>(int-int), EmbeddedEventLoop:shutdown(), PooledHeapByteBuf:_setInt(int-int), ChannelPipeline:addBefore(String-String-ChannelHandler), MemoryFileUpload:content(), SpdyFrameDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), UdtServerChannelConfig:getBacklog(), OioSctpChannel:bindAddress(InetAddress-ChannelPromise), AbstractByteBuf:getByte(int), ConcurrentHashMapV8$ForEachTransformedKeyTask:addToPendingCount(int), SSLException:<init>(Throwable), DefaultChannelPipeline:names(), ConcurrentHashMapV8$MapReduceKeysToIntTask:firstComplete(), ObjectDecoder:decode(ChannelHandlerContext-ByteBuf), ConcurrentHashMapV8$EntryIterator:next(), SpdySession$StreamState:removePendingWrite(), OioSctpChannel:<init>(Channel-SctpChannel), AbstractBootstrap$1:<init>(AbstractBootstrap-Channel-SocketAddress-ChannelPromise), DefaultSctpServerChannelConfig:setMaxMessagesPerRead(int), AbstractByteBuf:forEachByteDesc(ByteBufProcessor), ByteBufProcessor$5:<init>(), NioSctpServerChannel:<clinit>(), SwappedByteBuf:internalNioBuffer(int-int), NioSctpChannel:bindAddress(InetAddress), ReadOnlyByteBufferBuf:array(), SocksMessageType[]:clone(), LocalChannelRegistry:get(SocketAddress), OioSctpChannel:unbindAddress(InetAddress), DefaultSocketChannelConfig:setPerformancePreferences(int-int-int), AbstractByteBuf:calculateNewCapacity(int), ConcurrentHashMapV8$MapReduceValuesToIntTask:fork(), DefaultChannelHandlerContext:deregister(), UnreleasableByteBuf:writeInt(int), GlobalEventExecutor:schedule(Callable-long-TimeUnit), Snappy$State:ordinal(), SwappedByteBuf:hashCode(), AbstractOioByteChannel:<init>(Channel), WebSocketClientProtocolHandler$ClientHandshakeStateEvent[]:clone(), PromiseTask:<init>(EventExecutor-Callable), ChannelPipelineException:<init>(Throwable), DefaultDatagramChannelConfig:getOptions(), ChannelBufferByteInput:skip(long), LocalChannel:<init>(), Recycler:recycle(Object-Recycler$Handle), DefaultChannelHandlerContext$14:run(), ChannelOutboundBuffer:next(), SocksAuthRequestDecoder$State[]:clone(), MixedFileUpload:getName(), ReadOnlyByteBuf:getShort(int), DefaultRxtxChannelConfig:setDatabits(RxtxChannelConfig$Databits), ConcurrentHashMapV8$EntrySetView:<init>(ConcurrentHashMapV8), DefaultChannelHandlerContext:access$300(DefaultChannelHandlerContext), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), SpdySession:isLocalSideClosed(int), UnreleasableByteBuf:forEachByte(ByteBufProcessor), DecoderException:<init>(String-Throwable), Snappy$1:<clinit>(), DiskAttribute:getDiskFilename(), MessageToMessageCodec$1:<init>(MessageToMessageCodec), UnknownSocksRequest:<init>(), DefaultPromise$4:<init>(EventExecutor-Future-GenericFutureListener), WebSocketClientHandshaker00:newHandshakeRequest(), HttpPostRequestEncoder:nextChunk(), CloseWebSocketFrame:rsv(), ReadOnlyUnsafeDirectByteBuf:capacity(), DiskAttribute:getHttpDataType(), ForkJoinPool:submit(Callable), SwappedByteBuf:setIndex(int-int), ReadOnlyIterator:<init>(Iterator), ChannelPipeline:replace(Class-String-ChannelHandler), SpdyFrameDecoder$State:ordinal(), SocksAddressType:fromByte(byte), EventExecutor:invokeAll(Collection), SwappedByteBuf:toString(), ByteBuf:forEachByteDesc(ByteBufProcessor), DefaultPromise:access$100(Future-DefaultFutureListeners), ObjectEncoderOutputStream:flush(), NioSctpChannel$1:<init>(NioSctpChannel-InetAddress-ChannelPromise), Unsafe:getLong(long), ImmediateExecutor:execute(Runnable), ReferenceCountUtil:retain(Object), HttpMethod:compareTo(Object), EmptyByteBuf:writeBytes(ByteBuf-int), ReadOnlyByteBuf:setMedium(int-int), ByteBuf:writeBytes(byte[]), PooledHeapByteBuf:checkIndex(int), SingleThreadEventExecutor:schedule(Callable-long-TimeUnit), SocksAuthScheme:fromByte(byte), ForkJoinTask:setForkJoinTaskTag(short), EventExecutor:isShutdown(), SocksAuthRequestDecoder$State:ordinal(), CompleteChannelFuture:awaitUninterruptibly(), DefaultChannelPipeline:context(Class), WebSocketClientHandshaker:newWebSocketEncoder(), PromiseTask:setFailureInternal(Throwable), SocksInitRequestDecoder:checkpoint(Object), HttpPostRequestEncoder:fillByteBuf(), SystemPropertyUtil:getInt(String-int), WebSocketServerHandshaker13:<init>(String-String-boolean-int), UnpooledDirectByteBuf:capacity(), EmptyByteBuf:getUnsignedMedium(int), ConcurrentHashMapV8$ForEachMappingTask:addToPendingCount(int), ByteToMessageDecoder:actualReadableBytes(), DefaultRxtxChannelConfig:<init>(RxtxChannel), NotSslRecordException:<init>(String), EmptyByteBuf:getBoolean(int), DefaultOioServerSocketChannelConfig:getSoTimeout(), JZlibEncoder:<init>(byte[]), MessageToMessageCodec:decode(ChannelHandlerContext-Object-List), ImmediateEventExecutor:shutdownGracefully(long-long-TimeUnit), SctpMessage:retain(int), Striped64$Cell:cas(long-long), ThreadPerChannelEventLoopGroup:register(Channel-ChannelPromise), ChannelHandler:handlerAdded(ChannelHandlerContext), SocksCmdType:valueOf(String), JdkZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf), MixedFileUpload:isCompleted(), MessageList:recycle(), SocksAuthRequestDecoder:state(), Log:error(Object-Throwable), Snappy:decodeCopyWith1ByteOffset(byte-ByteBuf-ByteBuf-int), ByteBufInputStream:readFloat(), ByteBufOutputStream:write(byte[]-int-int), JdkLoggerFactory:<init>(), EmbeddedEventLoop:<init>(), CompositeByteBuf:retain(int), DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSocketChannelConfig:setReceiveBufferSize(int), UnreleasableByteBuf:toString(Charset), AbstractNioChannel$AbstractNioUnsafe:ensureOpen(ChannelPromise), PooledHeapByteBuf:getBytes(int-ByteBuffer), ThreadPerChannelEventLoopGroup:newChild(Object[]), TextWebSocketFrame:copy(), EmbeddedChannel:write(Object), UnreleasableByteBuf:setBytes(int-ByteBuf-int-int), Unmarshaller:readObject(), HttpHeaders$1:clear(), NioSctpServerChannel:remoteAddress(), ReplayingDecoderBuffer:compareTo(Object), NioUdtProvider:socketUDT(Channel), SystemPropertyUtil:get(String-String), PlatformDependent:putByte(long-byte), Attribute:getName(), HttpPostRequestDecoder:loadFieldMultipart(String), EmptyByteBuf:writeFloat(float), NioSocketChannel$1:initialValue(), WebSocket08FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), SpdyHttpHeaders:setUrl(HttpMessage-String), DecoderResult:isFailure(), PooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int), ForkJoinPool:nextPoolId(), SpdyCodecUtil:validateHeaderValue(String), LimitingByteInput:skip(long), DefaultChannelPromise:await(), CombinedChannelDuplexHandler:channelWritabilityChanged(ChannelHandlerContext), ZlibCodecFactory:newZlibDecoder(byte[]), CompositeByteBuf:_setMedium(int-int), AbstractDerivedByteBuf:unwrap(), PlatformDependent:isAndroid0(), HttpPostRequestEncoder$EncoderMode:values(), JavassistTypeParameterMatcherGenerator:generate(Class), ReplayingDecoderBuffer:slice(int-int), LocalChannel:access$202(LocalChannel-ChannelPromise), AbstractNioChannel$AbstractNioUnsafe:flush0(), DefaultChannelPipeline:callHandlerRemoved(DefaultChannelHandlerContext), Unsafe:getByte(long), PoolSubpage:removeFromPool(), AbstractChannel:disconnect(ChannelPromise), UnpooledHeapByteBuf:maxCapacity(), LengthFieldPrepender:encode(ChannelHandlerContext-Object-ByteBuf), LengthFieldBasedFrameDecoder:<init>(ByteOrder-int-int-int-int-int-boolean), Channel:closeFuture(), ConcurrentHashMapV8$EntrySetView:add(Map$Entry), UnpooledHeapByteBuf:_setByte(int-int), CompositeByteBuf:setInt(int-int), DefaultSctpServerChannelConfig:getOption(ChannelOption), OioSctpChannel$2:run(), MessageToByteEncoder:<init>(Class-boolean), SocksCommonUtils:ipv6toCompressedForm(byte[]), ByteBuf:alloc(), ChunkedWriteHandler:flush(ChannelHandlerContext), NioUdtMessageAcceptorChannel:javaChannel(), Bootstrap:bind(InetAddress-int), SwappedByteBuf:isDirect(), UnpooledUnsafeDirectByteBuf:nioBuffer(int-int), ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), DefaultSpdySettingsFrame:isSet(int), SpdyWindowUpdateFrame:getStreamId(), SwappedByteBuf:setByte(int-int), ConcurrentHashMapV8$MapReduceMappingsTask:firstComplete(), DefaultChannelPipeline:bind(SocketAddress), EmbeddedChannel:checkException(), ForkJoinTask:<init>(), AbstractByteBuf:readLong(), Striped64:casBase(long-long), PooledDirectByteBuf:_getShort(int), ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), CookieEncoderUtil:add(StringBuilder-String-String), UnpooledDirectByteBuf:arrayOffset(), ConcurrentHashMapV8$EntrySpliterator:forEachRemaining(ConcurrentHashMapV8$Action), DefaultChannelGroup:<init>(EventExecutor), Log4JLogger:error(String-Object[]), ReplayingDecoderBuffer:alloc(), ProtobufEncoder:encode(ChannelHandlerContext-Object-List), LogFactory:getLog(String)),
	edges = mapOf(
		AbstractBootstrap$1:operationComplete(ChannelFuture) to listOf(AbstractBootstrap:access$000(ChannelFuture-Channel-SocketAddress-ChannelPromise)),
		AbstractBootstrap$1:operationComplete(Future) to listOf(AbstractBootstrap$1:operationComplete(ChannelFuture)),
		AbstractBootstrap$2:run() to listOf(ChannelFuture:isSuccess(), Channel:bind(SocketAddress-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		AbstractBootstrap$BootstrapChannelFactory:newChannel() to listOf(ChannelException:<init>(String-Throwable)),
		AbstractBootstrap:channel(Class) to listOf(AbstractBootstrap$BootstrapChannelFactory:<init>(Class), AbstractBootstrap:channelFactory(ChannelFactory)),
		AbstractBootstrap:localAddress(int) to listOf(AbstractBootstrap:localAddress(SocketAddress)),
		AbstractBootstrap:localAddress(String-int) to listOf(AbstractBootstrap:localAddress(SocketAddress)),
		AbstractBootstrap:localAddress(InetAddress-int) to listOf(AbstractBootstrap:localAddress(SocketAddress)),
		AbstractBootstrap:bind() to listOf(AbstractBootstrap:validate(), AbstractBootstrap:doBind(SocketAddress)),
		AbstractBootstrap:bind(int) to listOf(AbstractBootstrap:bind(SocketAddress)),
		AbstractBootstrap:bind(String-int) to listOf(AbstractBootstrap:bind(SocketAddress)),
		AbstractBootstrap:bind(InetAddress-int) to listOf(AbstractBootstrap:bind(SocketAddress)),
		AbstractBootstrap:bind(SocketAddress) to listOf(AbstractBootstrap:validate(), AbstractBootstrap:doBind(SocketAddress)),
		AbstractBootstrap:doBind(SocketAddress) to listOf(AbstractBootstrap:initAndRegister(), ChannelFuture:channel(), Channel:newPromise(), ChannelFuture:isDone(), AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise), AbstractBootstrap$1:<init>(AbstractBootstrap-Channel-SocketAddress-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		AbstractBootstrap:initAndRegister() to listOf(AbstractBootstrap:channelFactory(), ChannelFactory:newChannel(), AbstractBootstrap:init(Channel), Channel:unsafe(), Channel$Unsafe:closeForcibly(), Channel:newFailedFuture(Throwable), Channel:newPromise(), AbstractBootstrap:group(), EventLoopGroup:register(Channel-ChannelPromise), ChannelPromise:cause(), Channel:isRegistered(), Channel:close(), Channel:unsafe(), Channel$Unsafe:closeForcibly()),
		AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise) to listOf(Channel:eventLoop(), AbstractBootstrap$2:<init>(ChannelFuture-Channel-SocketAddress-ChannelPromise), EventLoop:execute(Runnable)),
		AbstractBootstrap:clone() to listOf(AbstractBootstrap:clone()),
		AbstractBootstrap:access$000(ChannelFuture-Channel-SocketAddress-ChannelPromise) to listOf(AbstractBootstrap:doBind0(ChannelFuture-Channel-SocketAddress-ChannelPromise)),
		Bootstrap$1:operationComplete(ChannelFuture) to listOf(Bootstrap:access$000(ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise)),
		Bootstrap$1:operationComplete(Future) to listOf(Bootstrap$1:operationComplete(ChannelFuture)),
		Bootstrap$2:run() to listOf(ChannelFuture:isSuccess(), Channel:connect(SocketAddress-ChannelPromise), Channel:connect(SocketAddress-SocketAddress-ChannelPromise), ChannelPromise:addListener(GenericFutureListener), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		Bootstrap:<init>() to listOf(AbstractBootstrap:<init>()),
		Bootstrap:<init>(Bootstrap) to listOf(AbstractBootstrap:<init>(AbstractBootstrap)),
		Bootstrap:connect() to listOf(Bootstrap:validate(), Bootstrap:localAddress(), Bootstrap:doConnect(SocketAddress-SocketAddress)),
		Bootstrap:connect(String-int) to listOf(Bootstrap:connect(SocketAddress)),
		Bootstrap:connect(InetAddress-int) to listOf(Bootstrap:connect(SocketAddress)),
		Bootstrap:connect(SocketAddress) to listOf(Bootstrap:validate(), Bootstrap:localAddress(), Bootstrap:doConnect(SocketAddress-SocketAddress)),
		Bootstrap:connect(SocketAddress-SocketAddress) to listOf(Bootstrap:validate(), Bootstrap:doConnect(SocketAddress-SocketAddress)),
		Bootstrap:doConnect(SocketAddress-SocketAddress) to listOf(Bootstrap:initAndRegister(), ChannelFuture:channel(), ChannelFuture:cause(), Channel:newPromise(), ChannelFuture:isDone(), Bootstrap:doConnect0(ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise), Bootstrap$1:<init>(Bootstrap-ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		Bootstrap:doConnect0(ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise) to listOf(Channel:eventLoop(), Bootstrap$2:<init>(ChannelFuture-SocketAddress-Channel-SocketAddress-ChannelPromise), EventLoop:execute(Runnable)),
		Bootstrap:init(Channel) to listOf(Channel:pipeline(), Bootstrap:handler(), ChannelPipeline:addLast(ChannelHandler[]), Bootstrap:options(), Channel:config(), ChannelConfig:setOption(ChannelOption-Object), InternalLogger:warn(String), InternalLogger:warn(String-Throwable), Bootstrap:attrs(), Channel:attr(AttributeKey), Attribute:set(Object)),
		Bootstrap:validate() to listOf(AbstractBootstrap:validate(), Bootstrap:handler(), Bootstrap:validate()),
		Bootstrap:clone() to listOf(Bootstrap:<init>(Bootstrap), Bootstrap:clone(), Bootstrap:clone()),
		Bootstrap:toString() to listOf(AbstractBootstrap:toString(), AbstractBootstrap:toString()),
		Bootstrap:bind(SocketAddress) to listOf(AbstractBootstrap:bind(SocketAddress)),
		Bootstrap:bind(InetAddress-int) to listOf(AbstractBootstrap:bind(InetAddress-int)),
		Bootstrap:bind(String-int) to listOf(AbstractBootstrap:bind(String-int)),
		Bootstrap:bind(int) to listOf(AbstractBootstrap:bind(int)),
		Bootstrap:bind() to listOf(AbstractBootstrap:bind()),
		Bootstrap:access$000(ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise) to listOf(Bootstrap:doConnect0(ChannelFuture-Channel-SocketAddress-SocketAddress-ChannelPromise)),
		Bootstrap:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ServerBootstrap$1:<init>(ServerBootstrap-EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]) to listOf(ChannelInitializer:<init>()),
		ServerBootstrap$1:initChannel(Channel) to listOf(Channel:pipeline(), ServerBootstrap$ServerBootstrapAcceptor:<init>(EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), ChannelPipeline:addLast(ChannelHandler[])),
		ServerBootstrap$ServerBootstrapAcceptor$1:run() to listOf(ChannelConfig:setAutoRead(boolean)),
		ServerBootstrap$ServerBootstrapAcceptor:<init>(EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]) to listOf(ChannelInboundHandlerAdapter:<init>()),
		ServerBootstrap$ServerBootstrapAcceptor:channelRead(ChannelHandlerContext-Object) to listOf(Channel:pipeline(), ChannelPipeline:addLast(ChannelHandler[]), Channel:config(), ChannelConfig:setOption(ChannelOption-Object), ServerBootstrap:access$000(), InternalLogger:warn(String), ServerBootstrap:access$000(), InternalLogger:warn(String-Throwable), Channel:attr(AttributeKey), Attribute:set(Object), EventLoopGroup:register(Channel), Channel:unsafe(), Channel$Unsafe:closeForcibly(), ServerBootstrap:access$000(), InternalLogger:warn(String-Throwable)),
		ServerBootstrap$ServerBootstrapAcceptor:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), ChannelConfig:setAutoRead(boolean), ChannelHandlerContext:channel(), Channel:eventLoop(), ServerBootstrap$ServerBootstrapAcceptor$1:<init>(ServerBootstrap$ServerBootstrapAcceptor-ChannelConfig), EventLoop:schedule(Runnable-long-TimeUnit), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		ServerBootstrap:<init>() to listOf(AbstractBootstrap:<init>()),
		ServerBootstrap:<init>(ServerBootstrap) to listOf(AbstractBootstrap:<init>(AbstractBootstrap)),
		ServerBootstrap:group(EventLoopGroup) to listOf(ServerBootstrap:group(EventLoopGroup-EventLoopGroup), ServerBootstrap:group(EventLoopGroup)),
		ServerBootstrap:group(EventLoopGroup-EventLoopGroup) to listOf(AbstractBootstrap:group(EventLoopGroup)),
		ServerBootstrap:init(Channel) to listOf(ServerBootstrap:options(), Channel:config(), ChannelConfig:setOptions(Map), ServerBootstrap:attrs(), Channel:attr(AttributeKey), Attribute:set(Object), Channel:pipeline(), ServerBootstrap:handler(), ServerBootstrap:handler(), ChannelPipeline:addLast(ChannelHandler[]), ServerBootstrap:newOptionArray(int), ServerBootstrap:newAttrArray(int), ServerBootstrap$1:<init>(ServerBootstrap-EventLoopGroup-ChannelHandler-Map$Entry[]-Map$Entry[]), ChannelPipeline:addLast(ChannelHandler[])),
		ServerBootstrap:validate() to listOf(AbstractBootstrap:validate(), InternalLogger:warn(String), ServerBootstrap:group(), ServerBootstrap:validate()),
		ServerBootstrap:clone() to listOf(ServerBootstrap:<init>(ServerBootstrap), ServerBootstrap:clone(), ServerBootstrap:clone()),
		ServerBootstrap:toString() to listOf(AbstractBootstrap:toString()),
		ServerBootstrap:bind(SocketAddress) to listOf(AbstractBootstrap:bind(SocketAddress)),
		ServerBootstrap:bind(InetAddress-int) to listOf(AbstractBootstrap:bind(InetAddress-int)),
		ServerBootstrap:bind(String-int) to listOf(AbstractBootstrap:bind(String-int)),
		ServerBootstrap:bind(int) to listOf(AbstractBootstrap:bind(int)),
		ServerBootstrap:bind() to listOf(AbstractBootstrap:bind()),
		ServerBootstrap:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractByteBuf:<init>(int) to listOf(ByteBuf:<init>()),
		AbstractByteBuf:writerIndex(int) to listOf(AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:setIndex(int-int) to listOf(AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:isWritable() to listOf(AbstractByteBuf:capacity()),
		AbstractByteBuf:isWritable(int) to listOf(AbstractByteBuf:capacity()),
		AbstractByteBuf:writableBytes() to listOf(AbstractByteBuf:capacity()),
		AbstractByteBuf:maxWritableBytes() to listOf(AbstractByteBuf:maxCapacity()),
		AbstractByteBuf:resetReaderIndex() to listOf(AbstractByteBuf:readerIndex(int)),
		AbstractByteBuf:discardReadBytes() to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:setBytes(int-ByteBuf-int-int), AbstractByteBuf:adjustMarkers(int), AbstractByteBuf:adjustMarkers(int)),
		AbstractByteBuf:discardSomeReadBytes() to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:adjustMarkers(int), AbstractByteBuf:capacity(), AbstractByteBuf:setBytes(int-ByteBuf-int-int), AbstractByteBuf:adjustMarkers(int)),
		AbstractByteBuf:ensureWritable(int) to listOf(AbstractByteBuf:writableBytes(), AbstractByteBuf:calculateNewCapacity(int), AbstractByteBuf:capacity(int)),
		AbstractByteBuf:ensureWritable(int-boolean) to listOf(AbstractByteBuf:writableBytes(), AbstractByteBuf:capacity(), AbstractByteBuf:maxCapacity(), AbstractByteBuf:maxCapacity(), AbstractByteBuf:capacity(int), AbstractByteBuf:calculateNewCapacity(int), AbstractByteBuf:capacity(int)),
		AbstractByteBuf:order(ByteOrder) to listOf(AbstractByteBuf:order(), SwappedByteBuf:<init>(ByteBuf)),
		AbstractByteBuf:getByte(int) to listOf(AbstractByteBuf:checkIndex(int), AbstractByteBuf:_getByte(int)),
		AbstractByteBuf:getBoolean(int) to listOf(AbstractByteBuf:getByte(int)),
		AbstractByteBuf:getUnsignedByte(int) to listOf(AbstractByteBuf:getByte(int)),
		AbstractByteBuf:getShort(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getShort(int)),
		AbstractByteBuf:getUnsignedShort(int) to listOf(AbstractByteBuf:getShort(int)),
		AbstractByteBuf:getUnsignedMedium(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getUnsignedMedium(int)),
		AbstractByteBuf:getMedium(int) to listOf(AbstractByteBuf:getUnsignedMedium(int)),
		AbstractByteBuf:getInt(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getInt(int)),
		AbstractByteBuf:getUnsignedInt(int) to listOf(AbstractByteBuf:getInt(int)),
		AbstractByteBuf:getLong(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_getLong(int)),
		AbstractByteBuf:getChar(int) to listOf(AbstractByteBuf:getShort(int)),
		AbstractByteBuf:getFloat(int) to listOf(AbstractByteBuf:getInt(int)),
		AbstractByteBuf:getDouble(int) to listOf(AbstractByteBuf:getLong(int)),
		AbstractByteBuf:getBytes(int-byte[]) to listOf(AbstractByteBuf:getBytes(int-byte[]-int-int)),
		AbstractByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:writableBytes(), AbstractByteBuf:getBytes(int-ByteBuf-int)),
		AbstractByteBuf:getBytes(int-ByteBuf-int) to listOf(ByteBuf:writerIndex(), AbstractByteBuf:getBytes(int-ByteBuf-int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		AbstractByteBuf:setByte(int-int) to listOf(AbstractByteBuf:checkIndex(int), AbstractByteBuf:_setByte(int-int)),
		AbstractByteBuf:setBoolean(int-boolean) to listOf(AbstractByteBuf:setByte(int-int)),
		AbstractByteBuf:setShort(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setShort(int-int)),
		AbstractByteBuf:setChar(int-int) to listOf(AbstractByteBuf:setShort(int-int)),
		AbstractByteBuf:setMedium(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setMedium(int-int)),
		AbstractByteBuf:setInt(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setInt(int-int)),
		AbstractByteBuf:setFloat(int-float) to listOf(AbstractByteBuf:setInt(int-int)),
		AbstractByteBuf:setLong(int-long) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:_setLong(int-long)),
		AbstractByteBuf:setDouble(int-double) to listOf(AbstractByteBuf:setLong(int-long)),
		AbstractByteBuf:setBytes(int-byte[]) to listOf(AbstractByteBuf:setBytes(int-byte[]-int-int)),
		AbstractByteBuf:setBytes(int-ByteBuf) to listOf(ByteBuf:readableBytes(), AbstractByteBuf:setBytes(int-ByteBuf-int)),
		AbstractByteBuf:setBytes(int-ByteBuf-int) to listOf(AbstractByteBuf:checkIndex(int-int), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), AbstractByteBuf:setBytes(int-ByteBuf-int-int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		AbstractByteBuf:setZero(int-int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:setLong(int-long), AbstractByteBuf:setInt(int-int), AbstractByteBuf:setByte(int-int), AbstractByteBuf:setInt(int-int), AbstractByteBuf:setByte(int-int)),
		AbstractByteBuf:readByte() to listOf(AbstractByteBuf:getByte(int)),
		AbstractByteBuf:readBoolean() to listOf(AbstractByteBuf:readByte()),
		AbstractByteBuf:readUnsignedByte() to listOf(AbstractByteBuf:readByte()),
		AbstractByteBuf:readShort() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getShort(int)),
		AbstractByteBuf:readUnsignedShort() to listOf(AbstractByteBuf:readShort()),
		AbstractByteBuf:readMedium() to listOf(AbstractByteBuf:readUnsignedMedium()),
		AbstractByteBuf:readUnsignedMedium() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getUnsignedMedium(int)),
		AbstractByteBuf:readInt() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getInt(int)),
		AbstractByteBuf:readUnsignedInt() to listOf(AbstractByteBuf:readInt()),
		AbstractByteBuf:readLong() to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:_getLong(int)),
		AbstractByteBuf:readChar() to listOf(AbstractByteBuf:readShort()),
		AbstractByteBuf:readFloat() to listOf(AbstractByteBuf:readInt()),
		AbstractByteBuf:readDouble() to listOf(AbstractByteBuf:readLong()),
		AbstractByteBuf:readBytes(int) to listOf(AbstractByteBuf:checkReadableBytes(int), Unpooled:buffer(int-int), ByteBuf:writeBytes(ByteBuf-int-int)),
		AbstractByteBuf:readSlice(int) to listOf(AbstractByteBuf:slice(int-int)),
		AbstractByteBuf:readBytes(byte[]-int-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-byte[]-int-int)),
		AbstractByteBuf:readBytes(byte[]) to listOf(AbstractByteBuf:readBytes(byte[]-int-int)),
		AbstractByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:writableBytes(), AbstractByteBuf:readBytes(ByteBuf-int)),
		AbstractByteBuf:readBytes(ByteBuf-int) to listOf(ByteBuf:writableBytes(), ByteBuf:writableBytes(), ByteBuf:writerIndex(), AbstractByteBuf:readBytes(ByteBuf-int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		AbstractByteBuf:readBytes(ByteBuf-int-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-ByteBuf-int-int)),
		AbstractByteBuf:readBytes(ByteBuffer) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-ByteBuffer)),
		AbstractByteBuf:readBytes(GatheringByteChannel-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-GatheringByteChannel-int)),
		AbstractByteBuf:readBytes(OutputStream-int) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:getBytes(int-OutputStream-int)),
		AbstractByteBuf:writeBoolean(boolean) to listOf(AbstractByteBuf:writeByte(int)),
		AbstractByteBuf:writeByte(int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setByte(int-int)),
		AbstractByteBuf:writeShort(int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setShort(int-int)),
		AbstractByteBuf:writeMedium(int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setMedium(int-int)),
		AbstractByteBuf:writeInt(int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setInt(int-int)),
		AbstractByteBuf:writeLong(long) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:_setLong(int-long)),
		AbstractByteBuf:writeChar(int) to listOf(AbstractByteBuf:writeShort(int)),
		AbstractByteBuf:writeFloat(float) to listOf(AbstractByteBuf:writeInt(int)),
		AbstractByteBuf:writeDouble(double) to listOf(AbstractByteBuf:writeLong(long)),
		AbstractByteBuf:writeBytes(byte[]-int-int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-byte[]-int-int)),
		AbstractByteBuf:writeBytes(byte[]) to listOf(AbstractByteBuf:writeBytes(byte[]-int-int)),
		AbstractByteBuf:writeBytes(ByteBuf) to listOf(ByteBuf:readableBytes(), AbstractByteBuf:writeBytes(ByteBuf-int)),
		AbstractByteBuf:writeBytes(ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), AbstractByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		AbstractByteBuf:writeBytes(ByteBuf-int-int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-ByteBuf-int-int)),
		AbstractByteBuf:writeBytes(ByteBuffer) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-ByteBuffer)),
		AbstractByteBuf:writeBytes(InputStream-int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-InputStream-int)),
		AbstractByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(AbstractByteBuf:ensureWritable(int), AbstractByteBuf:setBytes(int-ScatteringByteChannel-int)),
		AbstractByteBuf:writeZero(int) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:writeLong(long), AbstractByteBuf:writeInt(int), AbstractByteBuf:writeByte(int), AbstractByteBuf:writeInt(int), AbstractByteBuf:writeByte(int)),
		AbstractByteBuf:copy() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:copy(int-int)),
		AbstractByteBuf:duplicate() to listOf(DuplicatedByteBuf:<init>(ByteBuf)),
		AbstractByteBuf:slice() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:slice(int-int)),
		AbstractByteBuf:slice(int-int) to listOf(SlicedByteBuf:<init>(ByteBuf-int-int)),
		AbstractByteBuf:nioBuffer() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:nioBuffer(int-int)),
		AbstractByteBuf:nioBuffers() to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:nioBuffers(int-int)),
		AbstractByteBuf:nioBuffer(int-int) to listOf(AbstractByteBuf:internalNioBuffer(int-int)),
		AbstractByteBuf:toString(Charset) to listOf(AbstractByteBuf:readableBytes(), AbstractByteBuf:toString(int-int-Charset)),
		AbstractByteBuf:toString(int-int-Charset) to listOf(AbstractByteBuf:nioBufferCount(), AbstractByteBuf:nioBuffer(int-int), AbstractByteBuf:getBytes(int-ByteBuffer), ByteBufUtil:decodeString(ByteBuffer-Charset)),
		AbstractByteBuf:indexOf(int-int-byte) to listOf(ByteBufUtil:indexOf(ByteBuf-int-int-byte)),
		AbstractByteBuf:bytesBefore(byte) to listOf(AbstractByteBuf:readerIndex(), AbstractByteBuf:readableBytes(), AbstractByteBuf:bytesBefore(int-int-byte)),
		AbstractByteBuf:bytesBefore(int-byte) to listOf(AbstractByteBuf:checkReadableBytes(int), AbstractByteBuf:readerIndex(), AbstractByteBuf:bytesBefore(int-int-byte)),
		AbstractByteBuf:bytesBefore(int-int-byte) to listOf(AbstractByteBuf:indexOf(int-int-byte)),
		AbstractByteBuf:forEachByte(ByteBufProcessor) to listOf(AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByteAsc0(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:_getByte(int), ByteBufProcessor:process(byte), PlatformDependent:throwException(Throwable)),
		AbstractByteBuf:forEachByteDesc(ByteBufProcessor) to listOf(AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:checkIndex(int-int), AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor)),
		AbstractByteBuf:forEachByteDesc0(int-int-ByteBufProcessor) to listOf(AbstractByteBuf:_getByte(int), ByteBufProcessor:process(byte), PlatformDependent:throwException(Throwable)),
		AbstractByteBuf:hashCode() to listOf(ByteBufUtil:hashCode(ByteBuf)),
		AbstractByteBuf:equals(Object) to listOf(ByteBufUtil:equals(ByteBuf-ByteBuf)),
		AbstractByteBuf:compareTo(ByteBuf) to listOf(ByteBufUtil:compare(ByteBuf-ByteBuf)),
		AbstractByteBuf:toString() to listOf(AbstractByteBuf:refCnt(), AbstractByteBuf:capacity(), AbstractByteBuf:unwrap()),
		AbstractByteBuf:checkIndex(int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:checkIndex(int-int) to listOf(AbstractByteBuf:ensureAccessible(), AbstractByteBuf:capacity(), AbstractByteBuf:capacity()),
		AbstractByteBuf:checkSrcIndex(int-int-int-int) to listOf(AbstractByteBuf:checkIndex(int-int)),
		AbstractByteBuf:checkDstIndex(int-int-int-int) to listOf(AbstractByteBuf:checkIndex(int-int)),
		AbstractByteBuf:checkReadableBytes(int) to listOf(AbstractByteBuf:ensureAccessible()),
		AbstractByteBuf:ensureAccessible() to listOf(AbstractByteBuf:refCnt(), IllegalReferenceCountException:<init>(int)),
		AbstractByteBuf:compareTo(Object) to listOf(AbstractByteBuf:compareTo(ByteBuf)),
		AbstractByteBuf:<clinit>() to listOf(ResourceLeakDetector:<init>(Class)),
		AbstractByteBufAllocator:<init>() to listOf(AbstractByteBufAllocator:<init>(boolean)),
		AbstractByteBufAllocator:<init>(boolean) to listOf(PlatformDependent:hasUnsafe(), EmptyByteBuf:<init>(ByteBufAllocator)),
		AbstractByteBufAllocator:buffer() to listOf(AbstractByteBufAllocator:directBuffer(), AbstractByteBufAllocator:heapBuffer()),
		AbstractByteBufAllocator:buffer(int) to listOf(AbstractByteBufAllocator:directBuffer(int), AbstractByteBufAllocator:heapBuffer(int)),
		AbstractByteBufAllocator:buffer(int-int) to listOf(AbstractByteBufAllocator:directBuffer(int-int), AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:ioBuffer() to listOf(PlatformDependent:hasUnsafe(), AbstractByteBufAllocator:directBuffer(int), AbstractByteBufAllocator:heapBuffer(int)),
		AbstractByteBufAllocator:ioBuffer(int) to listOf(PlatformDependent:hasUnsafe(), AbstractByteBufAllocator:directBuffer(int), AbstractByteBufAllocator:heapBuffer(int)),
		AbstractByteBufAllocator:ioBuffer(int-int) to listOf(PlatformDependent:hasUnsafe(), AbstractByteBufAllocator:directBuffer(int-int), AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:heapBuffer() to listOf(AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:heapBuffer(int) to listOf(AbstractByteBufAllocator:heapBuffer(int-int)),
		AbstractByteBufAllocator:heapBuffer(int-int) to listOf(AbstractByteBufAllocator:validate(int-int), AbstractByteBufAllocator:newHeapBuffer(int-int)),
		AbstractByteBufAllocator:directBuffer() to listOf(AbstractByteBufAllocator:directBuffer(int-int)),
		AbstractByteBufAllocator:directBuffer(int) to listOf(AbstractByteBufAllocator:directBuffer(int-int)),
		AbstractByteBufAllocator:directBuffer(int-int) to listOf(AbstractByteBufAllocator:validate(int-int), AbstractByteBufAllocator:newDirectBuffer(int-int)),
		AbstractByteBufAllocator:compositeBuffer() to listOf(AbstractByteBufAllocator:compositeDirectBuffer(), AbstractByteBufAllocator:compositeHeapBuffer()),
		AbstractByteBufAllocator:compositeBuffer(int) to listOf(AbstractByteBufAllocator:compositeDirectBuffer(int), AbstractByteBufAllocator:compositeHeapBuffer(int)),
		AbstractByteBufAllocator:compositeHeapBuffer() to listOf(AbstractByteBufAllocator:compositeHeapBuffer(int)),
		AbstractByteBufAllocator:compositeHeapBuffer(int) to listOf(CompositeByteBuf:<init>(ByteBufAllocator-boolean-int)),
		AbstractByteBufAllocator:compositeDirectBuffer() to listOf(AbstractByteBufAllocator:compositeDirectBuffer(int)),
		AbstractByteBufAllocator:compositeDirectBuffer(int) to listOf(CompositeByteBuf:<init>(ByteBufAllocator-boolean-int)),
		AbstractDerivedByteBuf:<init>(int) to listOf(AbstractByteBuf:<init>(int)),
		AbstractDerivedByteBuf:refCnt() to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:refCnt()),
		AbstractDerivedByteBuf:retain() to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:retain(), AbstractDerivedByteBuf:retain()),
		AbstractDerivedByteBuf:retain(int) to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:retain(int), AbstractDerivedByteBuf:retain(int)),
		AbstractDerivedByteBuf:release() to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:release()),
		AbstractDerivedByteBuf:release(int) to listOf(AbstractDerivedByteBuf:unwrap(), ByteBuf:release(int)),
		AbstractReferenceCountedByteBuf:<init>(int) to listOf(AbstractByteBuf:<init>(int)),
		AbstractReferenceCountedByteBuf:refCnt() to listOf(PlatformDependent:getInt(Object-long)),
		AbstractReferenceCountedByteBuf:retain() to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:retain()),
		AbstractReferenceCountedByteBuf:retain(int) to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:retain(int)),
		AbstractReferenceCountedByteBuf:release() to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:deallocate()),
		AbstractReferenceCountedByteBuf:release(int) to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCountedByteBuf:deallocate()),
		AbstractReferenceCountedByteBuf:<clinit>() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent:objectFieldOffset(Field)),
		ByteBuf:retain(int) to listOf(ByteBuf:retain(int)),
		ByteBuf:retain() to listOf(ByteBuf:retain()),
		ByteBuf:compareTo(Object) to listOf(ByteBuf:compareTo(ByteBuf)),
		ByteBufInputStream:<init>(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBufInputStream:<init>(ByteBuf-int)),
		ByteBufInputStream:<init>(ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:markReaderIndex()),
		ByteBufInputStream:readBytes() to listOf(ByteBuf:readerIndex()),
		ByteBufInputStream:available() to listOf(ByteBuf:readerIndex()),
		ByteBufInputStream:mark(int) to listOf(ByteBuf:markReaderIndex()),
		ByteBufInputStream:read() to listOf(ByteBuf:isReadable(), ByteBuf:readByte()),
		ByteBufInputStream:read(byte[]-int-int) to listOf(ByteBufInputStream:available(), ByteBuf:readBytes(byte[]-int-int)),
		ByteBufInputStream:reset() to listOf(ByteBuf:resetReaderIndex()),
		ByteBufInputStream:skip(long) to listOf(ByteBufInputStream:skipBytes(int), ByteBufInputStream:skipBytes(int)),
		ByteBufInputStream:readBoolean() to listOf(ByteBufInputStream:checkAvailable(int), ByteBufInputStream:read()),
		ByteBufInputStream:readByte() to listOf(ByteBuf:isReadable(), ByteBuf:readByte()),
		ByteBufInputStream:readChar() to listOf(ByteBufInputStream:readShort()),
		ByteBufInputStream:readDouble() to listOf(ByteBufInputStream:readLong()),
		ByteBufInputStream:readFloat() to listOf(ByteBufInputStream:readInt()),
		ByteBufInputStream:readFully(byte[]) to listOf(ByteBufInputStream:readFully(byte[]-int-int)),
		ByteBufInputStream:readFully(byte[]-int-int) to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readBytes(byte[]-int-int)),
		ByteBufInputStream:readInt() to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readInt()),
		ByteBufInputStream:readLine() to listOf(ByteBufInputStream:read()),
		ByteBufInputStream:readLong() to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readLong()),
		ByteBufInputStream:readShort() to listOf(ByteBufInputStream:checkAvailable(int), ByteBuf:readShort()),
		ByteBufInputStream:readUnsignedByte() to listOf(ByteBufInputStream:readByte()),
		ByteBufInputStream:readUnsignedShort() to listOf(ByteBufInputStream:readShort()),
		ByteBufInputStream:skipBytes(int) to listOf(ByteBufInputStream:available(), ByteBuf:skipBytes(int)),
		ByteBufInputStream:checkAvailable(int) to listOf(ByteBufInputStream:available(), ByteBufInputStream:available()),
		ByteBufOutputStream:<init>(ByteBuf) to listOf(ByteBuf:writerIndex()),
		ByteBufOutputStream:writtenBytes() to listOf(ByteBuf:writerIndex()),
		ByteBufOutputStream:write(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		ByteBufOutputStream:write(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		ByteBufOutputStream:write(int) to listOf(ByteBuf:writeByte(int)),
		ByteBufOutputStream:writeBoolean(boolean) to listOf(ByteBufOutputStream:write(int)),
		ByteBufOutputStream:writeByte(int) to listOf(ByteBufOutputStream:write(int)),
		ByteBufOutputStream:writeBytes(String) to listOf(ByteBufOutputStream:write(int)),
		ByteBufOutputStream:writeChar(int) to listOf(ByteBufOutputStream:writeShort(int)),
		ByteBufOutputStream:writeChars(String) to listOf(ByteBufOutputStream:writeChar(int)),
		ByteBufOutputStream:writeDouble(double) to listOf(ByteBufOutputStream:writeLong(long)),
		ByteBufOutputStream:writeFloat(float) to listOf(ByteBufOutputStream:writeInt(int)),
		ByteBufOutputStream:writeInt(int) to listOf(ByteBuf:writeInt(int)),
		ByteBufOutputStream:writeLong(long) to listOf(ByteBuf:writeLong(long)),
		ByteBufOutputStream:writeShort(int) to listOf(ByteBuf:writeShort(int)),
		ByteBufProcessor:<clinit>() to listOf(ByteBufProcessor$1:<init>(), ByteBufProcessor$2:<init>(), ByteBufProcessor$3:<init>(), ByteBufProcessor$4:<init>(), ByteBufProcessor$5:<init>(), ByteBufProcessor$6:<init>(), ByteBufProcessor$7:<init>(), ByteBufProcessor$8:<init>(), ByteBufProcessor$9:<init>(), ByteBufProcessor$10:<init>()),
		ByteBufUtil:hexDump(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBufUtil:hexDump(ByteBuf-int-int)),
		ByteBufUtil:hexDump(ByteBuf-int-int) to listOf(ByteBuf:getUnsignedByte(int)),
		ByteBufUtil:hashCode(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:order(), ByteBuf:getInt(int), ByteBuf:getInt(int), ByteBufUtil:swapInt(int), ByteBuf:getByte(int)),
		ByteBufUtil:equals(ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:order(), ByteBuf:order(), ByteBuf:getLong(int), ByteBuf:getLong(int), ByteBuf:getLong(int), ByteBuf:getLong(int), ByteBufUtil:swapLong(long), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		ByteBufUtil:compare(ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:order(), ByteBuf:order(), ByteBuf:getUnsignedInt(int), ByteBuf:getUnsignedInt(int), ByteBuf:getUnsignedInt(int), ByteBuf:getInt(int), ByteBufUtil:swapInt(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int)),
		ByteBufUtil:indexOf(ByteBuf-int-int-byte) to listOf(ByteBufUtil:firstIndexOf(ByteBuf-int-int-byte), ByteBufUtil:lastIndexOf(ByteBuf-int-int-byte)),
		ByteBufUtil:firstIndexOf(ByteBuf-int-int-byte) to listOf(ByteBuf:capacity(), ByteBuf:getByte(int)),
		ByteBufUtil:lastIndexOf(ByteBuf-int-int-byte) to listOf(ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:getByte(int)),
		ByteBufUtil:encodeString(CharBuffer-Charset) to listOf(CharsetUtil:getEncoder(Charset)),
		ByteBufUtil:decodeString(ByteBuffer-Charset) to listOf(CharsetUtil:getDecoder(Charset)),
		CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes()),
		CompositeByteBuf$Component:freeIfNecessary() to listOf(ByteBuf:release()),
		CompositeByteBuf:<init>(ByteBufAllocator-boolean-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), ResourceLeakDetector:open(Object)),
		CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-ByteBuf[]) to listOf(AbstractReferenceCountedByteBuf:<init>(int), CompositeByteBuf:addComponents0(int-ByteBuf[]), CompositeByteBuf:consolidateIfNeeded(), CompositeByteBuf:capacity(), CompositeByteBuf:setIndex(int-int), ResourceLeakDetector:open(Object)),
		CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable) to listOf(AbstractReferenceCountedByteBuf:<init>(int), CompositeByteBuf:addComponents0(int-Iterable), CompositeByteBuf:consolidateIfNeeded(), CompositeByteBuf:capacity(), CompositeByteBuf:setIndex(int-int), ResourceLeakDetector:open(Object)),
		CompositeByteBuf:addComponent(ByteBuf) to listOf(CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents(ByteBuf[]) to listOf(CompositeByteBuf:addComponents0(int-ByteBuf[]), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents(Iterable) to listOf(CompositeByteBuf:addComponents0(int-Iterable), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponent(int-ByteBuf) to listOf(CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponent0(int-ByteBuf) to listOf(CompositeByteBuf:checkComponentIndex(int), ByteBuf:readableBytes(), ByteBuf:order(ByteOrder), ByteBuf:slice(), CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:addComponents(int-ByteBuf[]) to listOf(CompositeByteBuf:addComponents0(int-ByteBuf[]), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents0(int-ByteBuf[]) to listOf(CompositeByteBuf:checkComponentIndex(int), ByteBuf:readableBytes(), ByteBuf:isReadable(), CompositeByteBuf:addComponent0(int-ByteBuf), ByteBuf:release()),
		CompositeByteBuf:addComponents(int-Iterable) to listOf(CompositeByteBuf:addComponents0(int-Iterable), CompositeByteBuf:consolidateIfNeeded()),
		CompositeByteBuf:addComponents0(int-Iterable) to listOf(CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:addComponents0(int-ByteBuf[])),
		CompositeByteBuf:consolidateIfNeeded() to listOf(CompositeByteBuf:allocBuffer(int), ByteBuf:writeBytes(ByteBuf), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf)),
		CompositeByteBuf:removeComponent(int) to listOf(CompositeByteBuf:checkComponentIndex(int), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:removeComponents(int-int) to listOf(CompositeByteBuf:checkComponentIndex(int-int), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:decompose(int-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:duplicate(), ByteBuf:readerIndex(int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:writerIndex(int), ByteBuf:duplicate(), ByteBuf:slice()),
		CompositeByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		CompositeByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		CompositeByteBuf:array() to listOf(ByteBuf:array()),
		CompositeByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		CompositeByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		CompositeByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		CompositeByteBuf:capacity(int) to listOf(CompositeByteBuf:maxCapacity(), CompositeByteBuf:capacity(), CompositeByteBuf:allocBuffer(int), ByteBuf:setIndex(int-int), CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:allocBuffer(int), ByteBuf:setIndex(int-int), CompositeByteBuf:addComponent0(int-ByteBuf), CompositeByteBuf:consolidateIfNeeded(), ByteBuf:slice(int-int), CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf), CompositeByteBuf:readerIndex(), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:writerIndex(), CompositeByteBuf:writerIndex(int), CompositeByteBuf:capacity(int)),
		CompositeByteBuf:toComponentIndex(int) to listOf(CompositeByteBuf:checkIndex(int)),
		CompositeByteBuf:toByteIndex(int) to listOf(CompositeByteBuf:checkComponentIndex(int)),
		CompositeByteBuf:getByte(int) to listOf(CompositeByteBuf:_getByte(int)),
		CompositeByteBuf:_getByte(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getByte(int)),
		CompositeByteBuf:_getShort(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getShort(int), CompositeByteBuf:order(), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getByte(int)),
		CompositeByteBuf:_getUnsignedMedium(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getUnsignedMedium(int), CompositeByteBuf:order(), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getByte(int), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getByte(int)),
		CompositeByteBuf:_getInt(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getInt(int), CompositeByteBuf:order(), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getShort(int), CompositeByteBuf:_getShort(int)),
		CompositeByteBuf:_getLong(int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:getLong(int), CompositeByteBuf:order(), CompositeByteBuf:_getInt(int), CompositeByteBuf:_getInt(int), CompositeByteBuf:_getInt(int), CompositeByteBuf:_getInt(int)),
		CompositeByteBuf:getBytes(int-byte[]-int-int) to listOf(CompositeByteBuf:checkDstIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-byte[]-int-int), CompositeByteBuf:getBytes(int-byte[]-int-int)),
		CompositeByteBuf:getBytes(int-ByteBuffer) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuffer), CompositeByteBuf:getBytes(int-ByteBuffer)),
		CompositeByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), CompositeByteBuf:checkDstIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuf-int-int), CompositeByteBuf:getBytes(int-ByteBuf-int-int)),
		CompositeByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(PlatformDependent:javaVersion(), CompositeByteBuf:copiedNioBuffer(int-int), CompositeByteBuf:nioBuffers(int-int)),
		CompositeByteBuf:getBytes(int-OutputStream-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:getBytes(int-OutputStream-int), CompositeByteBuf:getBytes(int-OutputStream-int)),
		CompositeByteBuf:setByte(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setByte(int-int), CompositeByteBuf:setByte(int-int)),
		CompositeByteBuf:_setByte(int-int) to listOf(CompositeByteBuf:setByte(int-int)),
		CompositeByteBuf:setShort(int-int) to listOf(AbstractReferenceCountedByteBuf:setShort(int-int), CompositeByteBuf:setShort(int-int)),
		CompositeByteBuf:_setShort(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setShort(int-int), CompositeByteBuf:order(), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setByte(int-int)),
		CompositeByteBuf:setMedium(int-int) to listOf(AbstractReferenceCountedByteBuf:setMedium(int-int), CompositeByteBuf:setMedium(int-int)),
		CompositeByteBuf:_setMedium(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setMedium(int-int), CompositeByteBuf:order(), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setByte(int-int), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setByte(int-int)),
		CompositeByteBuf:setInt(int-int) to listOf(AbstractReferenceCountedByteBuf:setInt(int-int), CompositeByteBuf:setInt(int-int)),
		CompositeByteBuf:_setInt(int-int) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setInt(int-int), CompositeByteBuf:order(), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setShort(int-int), CompositeByteBuf:_setShort(int-int)),
		CompositeByteBuf:setLong(int-long) to listOf(AbstractReferenceCountedByteBuf:setLong(int-long), CompositeByteBuf:setLong(int-long)),
		CompositeByteBuf:_setLong(int-long) to listOf(CompositeByteBuf:findComponent(int), ByteBuf:setLong(int-long), CompositeByteBuf:order(), CompositeByteBuf:_setInt(int-int), CompositeByteBuf:_setInt(int-int), CompositeByteBuf:_setInt(int-int), CompositeByteBuf:_setInt(int-int)),
		CompositeByteBuf:setBytes(int-byte[]-int-int) to listOf(CompositeByteBuf:checkSrcIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-byte[]-int-int), CompositeByteBuf:setBytes(int-byte[]-int-int)),
		CompositeByteBuf:setBytes(int-ByteBuffer) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-ByteBuffer), CompositeByteBuf:setBytes(int-ByteBuffer)),
		CompositeByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), CompositeByteBuf:checkSrcIndex(int-int-int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-ByteBuf-int-int), CompositeByteBuf:setBytes(int-ByteBuf-int-int)),
		CompositeByteBuf:setBytes(int-InputStream-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-InputStream-int)),
		CompositeByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		CompositeByteBuf:copy(int-int) to listOf(CompositeByteBuf:checkIndex(int-int), Unpooled:buffer(int), CompositeByteBuf:toComponentIndex(int), CompositeByteBuf:copyTo(int-int-int-ByteBuf)),
		CompositeByteBuf:copyTo(int-int-int-ByteBuf) to listOf(ByteBuf:capacity(), ByteBuf:getBytes(int-ByteBuf-int-int), ByteBuf:capacity(), ByteBuf:writerIndex(int)),
		CompositeByteBuf:component(int) to listOf(CompositeByteBuf:internalComponent(int), ByteBuf:duplicate()),
		CompositeByteBuf:componentAtOffset(int) to listOf(CompositeByteBuf:internalComponentAtOffset(int), ByteBuf:duplicate()),
		CompositeByteBuf:internalComponent(int) to listOf(CompositeByteBuf:checkComponentIndex(int)),
		CompositeByteBuf:internalComponentAtOffset(int) to listOf(CompositeByteBuf:findComponent(int)),
		CompositeByteBuf:findComponent(int) to listOf(CompositeByteBuf:checkIndex(int), CompositeByteBuf:checkIndex(int)),
		CompositeByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount(), ByteBuf:nioBufferCount()),
		CompositeByteBuf:internalNioBuffer(int-int) to listOf(ByteBuf:internalNioBuffer(int-int)),
		CompositeByteBuf:copiedNioBuffer(int-int) to listOf(CompositeByteBuf:toNioBuffer(ByteBuf-int-int), CompositeByteBuf:nioBuffers(int-int), CompositeByteBuf:order()),
		CompositeByteBuf:nioBuffers(int-int) to listOf(CompositeByteBuf:checkIndex(int-int), CompositeByteBuf:toComponentIndex(int), ByteBuf:capacity(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(int-int), ByteBuf:nioBuffers(int-int)),
		CompositeByteBuf:toNioBuffer(ByteBuf-int-int) to listOf(ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(int-int), ByteBuf:copy(int-int), ByteBuf:nioBuffer(int-int)),
		CompositeByteBuf:consolidate() to listOf(CompositeByteBuf:numComponents(), CompositeByteBuf:allocBuffer(int), ByteBuf:writeBytes(ByteBuf), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:consolidate(int-int) to listOf(CompositeByteBuf:checkComponentIndex(int-int), CompositeByteBuf:allocBuffer(int), ByteBuf:writeBytes(ByteBuf), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf), CompositeByteBuf:updateComponentOffsets(int)),
		CompositeByteBuf:discardReadComponents() to listOf(CompositeByteBuf:readerIndex(), CompositeByteBuf:writerIndex(), CompositeByteBuf:capacity(), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int), CompositeByteBuf:toComponentIndex(int), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:updateComponentOffsets(int), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int)),
		CompositeByteBuf:discardReadBytes() to listOf(CompositeByteBuf:readerIndex(), CompositeByteBuf:writerIndex(), CompositeByteBuf:capacity(), CompositeByteBuf$Component:freeIfNecessary(), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int), CompositeByteBuf:toComponentIndex(int), CompositeByteBuf$Component:freeIfNecessary(), ByteBuf:slice(int-int), CompositeByteBuf$Component:<init>(CompositeByteBuf-ByteBuf), CompositeByteBuf:updateComponentOffsets(int), CompositeByteBuf:setIndex(int-int), CompositeByteBuf:adjustMarkers(int), CompositeByteBuf:discardReadBytes()),
		CompositeByteBuf:allocBuffer(int) to listOf(CompositeByteBuf:alloc(), ByteBufAllocator:directBuffer(int), CompositeByteBuf:alloc(), ByteBufAllocator:heapBuffer(int)),
		CompositeByteBuf:toString() to listOf(AbstractReferenceCountedByteBuf:toString()),
		CompositeByteBuf:readerIndex(int) to listOf(AbstractReferenceCountedByteBuf:readerIndex(int), CompositeByteBuf:readerIndex(int)),
		CompositeByteBuf:writerIndex(int) to listOf(AbstractReferenceCountedByteBuf:writerIndex(int), CompositeByteBuf:writerIndex(int)),
		CompositeByteBuf:setIndex(int-int) to listOf(AbstractReferenceCountedByteBuf:setIndex(int-int), CompositeByteBuf:setIndex(int-int)),
		CompositeByteBuf:clear() to listOf(AbstractReferenceCountedByteBuf:clear(), CompositeByteBuf:clear()),
		CompositeByteBuf:markReaderIndex() to listOf(AbstractReferenceCountedByteBuf:markReaderIndex(), CompositeByteBuf:markReaderIndex()),
		CompositeByteBuf:resetReaderIndex() to listOf(AbstractReferenceCountedByteBuf:resetReaderIndex(), CompositeByteBuf:resetReaderIndex()),
		CompositeByteBuf:markWriterIndex() to listOf(AbstractReferenceCountedByteBuf:markWriterIndex(), CompositeByteBuf:markWriterIndex()),
		CompositeByteBuf:resetWriterIndex() to listOf(AbstractReferenceCountedByteBuf:resetWriterIndex(), CompositeByteBuf:resetWriterIndex()),
		CompositeByteBuf:ensureWritable(int) to listOf(AbstractReferenceCountedByteBuf:ensureWritable(int), CompositeByteBuf:ensureWritable(int)),
		CompositeByteBuf:getBytes(int-ByteBuf) to listOf(AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf), CompositeByteBuf:getBytes(int-ByteBuf)),
		CompositeByteBuf:getBytes(int-ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:getBytes(int-ByteBuf-int), CompositeByteBuf:getBytes(int-ByteBuf-int)),
		CompositeByteBuf:getBytes(int-byte[]) to listOf(AbstractReferenceCountedByteBuf:getBytes(int-byte[]), CompositeByteBuf:getBytes(int-byte[])),
		CompositeByteBuf:setBoolean(int-boolean) to listOf(AbstractReferenceCountedByteBuf:setBoolean(int-boolean), CompositeByteBuf:setBoolean(int-boolean)),
		CompositeByteBuf:setChar(int-int) to listOf(AbstractReferenceCountedByteBuf:setChar(int-int), CompositeByteBuf:setChar(int-int)),
		CompositeByteBuf:setFloat(int-float) to listOf(AbstractReferenceCountedByteBuf:setFloat(int-float), CompositeByteBuf:setFloat(int-float)),
		CompositeByteBuf:setDouble(int-double) to listOf(AbstractReferenceCountedByteBuf:setDouble(int-double), CompositeByteBuf:setDouble(int-double)),
		CompositeByteBuf:setBytes(int-ByteBuf) to listOf(AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf), CompositeByteBuf:setBytes(int-ByteBuf)),
		CompositeByteBuf:setBytes(int-ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:setBytes(int-ByteBuf-int), CompositeByteBuf:setBytes(int-ByteBuf-int)),
		CompositeByteBuf:setBytes(int-byte[]) to listOf(AbstractReferenceCountedByteBuf:setBytes(int-byte[]), CompositeByteBuf:setBytes(int-byte[])),
		CompositeByteBuf:setZero(int-int) to listOf(AbstractReferenceCountedByteBuf:setZero(int-int), CompositeByteBuf:setZero(int-int)),
		CompositeByteBuf:readBytes(ByteBuf) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuf), CompositeByteBuf:readBytes(ByteBuf)),
		CompositeByteBuf:readBytes(ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int), CompositeByteBuf:readBytes(ByteBuf-int)),
		CompositeByteBuf:readBytes(ByteBuf-int-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuf-int-int), CompositeByteBuf:readBytes(ByteBuf-int-int)),
		CompositeByteBuf:readBytes(byte[]) to listOf(AbstractReferenceCountedByteBuf:readBytes(byte[]), CompositeByteBuf:readBytes(byte[])),
		CompositeByteBuf:readBytes(byte[]-int-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(byte[]-int-int), CompositeByteBuf:readBytes(byte[]-int-int)),
		CompositeByteBuf:readBytes(ByteBuffer) to listOf(AbstractReferenceCountedByteBuf:readBytes(ByteBuffer), CompositeByteBuf:readBytes(ByteBuffer)),
		CompositeByteBuf:readBytes(OutputStream-int) to listOf(AbstractReferenceCountedByteBuf:readBytes(OutputStream-int), CompositeByteBuf:readBytes(OutputStream-int)),
		CompositeByteBuf:skipBytes(int) to listOf(AbstractReferenceCountedByteBuf:skipBytes(int), CompositeByteBuf:skipBytes(int)),
		CompositeByteBuf:writeBoolean(boolean) to listOf(AbstractReferenceCountedByteBuf:writeBoolean(boolean), CompositeByteBuf:writeBoolean(boolean)),
		CompositeByteBuf:writeByte(int) to listOf(AbstractReferenceCountedByteBuf:writeByte(int), CompositeByteBuf:writeByte(int)),
		CompositeByteBuf:writeShort(int) to listOf(AbstractReferenceCountedByteBuf:writeShort(int), CompositeByteBuf:writeShort(int)),
		CompositeByteBuf:writeMedium(int) to listOf(AbstractReferenceCountedByteBuf:writeMedium(int), CompositeByteBuf:writeMedium(int)),
		CompositeByteBuf:writeInt(int) to listOf(AbstractReferenceCountedByteBuf:writeInt(int), CompositeByteBuf:writeInt(int)),
		CompositeByteBuf:writeLong(long) to listOf(AbstractReferenceCountedByteBuf:writeLong(long), CompositeByteBuf:writeLong(long)),
		CompositeByteBuf:writeChar(int) to listOf(AbstractReferenceCountedByteBuf:writeChar(int), CompositeByteBuf:writeChar(int)),
		CompositeByteBuf:writeFloat(float) to listOf(AbstractReferenceCountedByteBuf:writeFloat(float), CompositeByteBuf:writeFloat(float)),
		CompositeByteBuf:writeDouble(double) to listOf(AbstractReferenceCountedByteBuf:writeDouble(double), CompositeByteBuf:writeDouble(double)),
		CompositeByteBuf:writeBytes(ByteBuf) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuf), CompositeByteBuf:writeBytes(ByteBuf)),
		CompositeByteBuf:writeBytes(ByteBuf-int) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int), CompositeByteBuf:writeBytes(ByteBuf-int)),
		CompositeByteBuf:writeBytes(ByteBuf-int-int) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuf-int-int), CompositeByteBuf:writeBytes(ByteBuf-int-int)),
		CompositeByteBuf:writeBytes(byte[]) to listOf(AbstractReferenceCountedByteBuf:writeBytes(byte[]), CompositeByteBuf:writeBytes(byte[])),
		CompositeByteBuf:writeBytes(byte[]-int-int) to listOf(AbstractReferenceCountedByteBuf:writeBytes(byte[]-int-int), CompositeByteBuf:writeBytes(byte[]-int-int)),
		CompositeByteBuf:writeBytes(ByteBuffer) to listOf(AbstractReferenceCountedByteBuf:writeBytes(ByteBuffer), CompositeByteBuf:writeBytes(ByteBuffer)),
		CompositeByteBuf:writeZero(int) to listOf(AbstractReferenceCountedByteBuf:writeZero(int), CompositeByteBuf:writeZero(int)),
		CompositeByteBuf:retain(int) to listOf(AbstractReferenceCountedByteBuf:retain(int), CompositeByteBuf:retain(int), CompositeByteBuf:retain(int)),
		CompositeByteBuf:retain() to listOf(AbstractReferenceCountedByteBuf:retain(), CompositeByteBuf:retain(), CompositeByteBuf:retain()),
		CompositeByteBuf:nioBuffers() to listOf(CompositeByteBuf:readerIndex(), CompositeByteBuf:readableBytes(), CompositeByteBuf:nioBuffers(int-int)),
		CompositeByteBuf:discardSomeReadBytes() to listOf(CompositeByteBuf:discardReadComponents(), CompositeByteBuf:discardSomeReadBytes()),
		CompositeByteBuf:deallocate() to listOf(CompositeByteBuf$Component:freeIfNecessary(), ResourceLeak:close()),
		DefaultByteBufHolder:content() to listOf(ByteBuf:refCnt(), ByteBuf:refCnt(), IllegalReferenceCountException:<init>(int)),
		DefaultByteBufHolder:copy() to listOf(ByteBuf:copy(), DefaultByteBufHolder:<init>(ByteBuf)),
		DefaultByteBufHolder:duplicate() to listOf(ByteBuf:duplicate(), DefaultByteBufHolder:<init>(ByteBuf)),
		DefaultByteBufHolder:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultByteBufHolder:retain() to listOf(ByteBuf:retain(), DefaultByteBufHolder:retain()),
		DefaultByteBufHolder:retain(int) to listOf(ByteBuf:retain(int), DefaultByteBufHolder:retain(int)),
		DefaultByteBufHolder:release() to listOf(ByteBuf:release()),
		DefaultByteBufHolder:release(int) to listOf(ByteBuf:release(int)),
		DefaultByteBufHolder:toString() to listOf(DefaultByteBufHolder:content(), ByteBuf:toString()),
		DuplicatedByteBuf:<init>(ByteBuf) to listOf(ByteBuf:maxCapacity(), AbstractDerivedByteBuf:<init>(int), ByteBuf:readerIndex(), ByteBuf:writerIndex(), DuplicatedByteBuf:setIndex(int-int)),
		DuplicatedByteBuf:alloc() to listOf(ByteBuf:alloc()),
		DuplicatedByteBuf:order() to listOf(ByteBuf:order()),
		DuplicatedByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		DuplicatedByteBuf:capacity() to listOf(ByteBuf:capacity()),
		DuplicatedByteBuf:capacity(int) to listOf(ByteBuf:capacity(int)),
		DuplicatedByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		DuplicatedByteBuf:array() to listOf(ByteBuf:array()),
		DuplicatedByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		DuplicatedByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		DuplicatedByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		DuplicatedByteBuf:getByte(int) to listOf(DuplicatedByteBuf:_getByte(int)),
		DuplicatedByteBuf:_getByte(int) to listOf(ByteBuf:getByte(int)),
		DuplicatedByteBuf:getShort(int) to listOf(DuplicatedByteBuf:_getShort(int)),
		DuplicatedByteBuf:_getShort(int) to listOf(ByteBuf:getShort(int)),
		DuplicatedByteBuf:getUnsignedMedium(int) to listOf(DuplicatedByteBuf:_getUnsignedMedium(int)),
		DuplicatedByteBuf:_getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		DuplicatedByteBuf:getInt(int) to listOf(DuplicatedByteBuf:_getInt(int)),
		DuplicatedByteBuf:_getInt(int) to listOf(ByteBuf:getInt(int)),
		DuplicatedByteBuf:getLong(int) to listOf(DuplicatedByteBuf:_getLong(int)),
		DuplicatedByteBuf:_getLong(int) to listOf(ByteBuf:getLong(int)),
		DuplicatedByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int)),
		DuplicatedByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int)),
		DuplicatedByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		DuplicatedByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		DuplicatedByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		DuplicatedByteBuf:setByte(int-int) to listOf(DuplicatedByteBuf:_setByte(int-int)),
		DuplicatedByteBuf:_setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		DuplicatedByteBuf:setShort(int-int) to listOf(DuplicatedByteBuf:_setShort(int-int)),
		DuplicatedByteBuf:_setShort(int-int) to listOf(ByteBuf:setShort(int-int)),
		DuplicatedByteBuf:setMedium(int-int) to listOf(DuplicatedByteBuf:_setMedium(int-int)),
		DuplicatedByteBuf:_setMedium(int-int) to listOf(ByteBuf:setMedium(int-int)),
		DuplicatedByteBuf:setInt(int-int) to listOf(DuplicatedByteBuf:_setInt(int-int)),
		DuplicatedByteBuf:_setInt(int-int) to listOf(ByteBuf:setInt(int-int)),
		DuplicatedByteBuf:setLong(int-long) to listOf(DuplicatedByteBuf:_setLong(int-long)),
		DuplicatedByteBuf:_setLong(int-long) to listOf(ByteBuf:setLong(int-long)),
		DuplicatedByteBuf:setBytes(int-byte[]-int-int) to listOf(ByteBuf:setBytes(int-byte[]-int-int)),
		DuplicatedByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int-int)),
		DuplicatedByteBuf:setBytes(int-ByteBuffer) to listOf(ByteBuf:setBytes(int-ByteBuffer)),
		DuplicatedByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		DuplicatedByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		DuplicatedByteBuf:setBytes(int-InputStream-int) to listOf(ByteBuf:setBytes(int-InputStream-int)),
		DuplicatedByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		DuplicatedByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		DuplicatedByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		DuplicatedByteBuf:internalNioBuffer(int-int) to listOf(ByteBuf:internalNioBuffer(int-int)),
		DuplicatedByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		DuplicatedByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		EmptyByteBuf:<init>(ByteBufAllocator) to listOf(EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder)),
		EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder) to listOf(ByteBuf:<init>()),
		EmptyByteBuf:order(ByteOrder) to listOf(EmptyByteBuf:order(), EmptyByteBuf:alloc(), EmptyByteBuf:<init>(ByteBufAllocator-ByteOrder)),
		EmptyByteBuf:readerIndex(int) to listOf(EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:writerIndex(int) to listOf(EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:setIndex(int-int) to listOf(EmptyByteBuf:checkIndex(int), EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:writableBytes(), EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-ByteBuf-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-ByteBuf-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-byte[]) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-byte[]-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-ByteBuffer) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-OutputStream-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ByteBuf-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ByteBuf-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-byte[]) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-byte[]-int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ByteBuffer) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-InputStream-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:setZero(int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:readBytes(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readSlice(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:writableBytes(), EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuf-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuf-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(byte[]) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(byte[]-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(ByteBuffer) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(OutputStream-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:readBytes(GatheringByteChannel-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:skipBytes(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ByteBuf-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ByteBuf-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(byte[]) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(byte[]-int-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ByteBuffer) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(InputStream-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:writeZero(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:indexOf(int-int-byte) to listOf(EmptyByteBuf:checkIndex(int), EmptyByteBuf:checkIndex(int)),
		EmptyByteBuf:bytesBefore(int-byte) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:bytesBefore(int-int-byte) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:copy(int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:slice(int-int) to listOf(EmptyByteBuf:checkIndex(int-int)),
		EmptyByteBuf:nioBuffer(int-int) to listOf(EmptyByteBuf:checkIndex(int-int), EmptyByteBuf:nioBuffer()),
		EmptyByteBuf:nioBuffers(int-int) to listOf(EmptyByteBuf:checkIndex(int-int), EmptyByteBuf:nioBuffers()),
		EmptyByteBuf:memoryAddress() to listOf(EmptyByteBuf:hasMemoryAddress()),
		EmptyByteBuf:toString(int-int-Charset) to listOf(EmptyByteBuf:checkIndex(int-int), EmptyByteBuf:toString(Charset)),
		EmptyByteBuf:equals(Object) to listOf(ByteBuf:isReadable()),
		EmptyByteBuf:compareTo(ByteBuf) to listOf(ByteBuf:isReadable()),
		EmptyByteBuf:isReadable(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:isWritable(int) to listOf(EmptyByteBuf:checkLength(int)),
		EmptyByteBuf:retain(int) to listOf(EmptyByteBuf:retain(int)),
		EmptyByteBuf:retain() to listOf(EmptyByteBuf:retain()),
		EmptyByteBuf:compareTo(Object) to listOf(EmptyByteBuf:compareTo(ByteBuf)),
		EmptyByteBuf:<clinit>() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent:directBufferAddress(ByteBuffer)),
		PoolArena$DirectArena:<init>(PooledByteBufAllocator-int-int-int-int) to listOf(PoolArena:<init>(PooledByteBufAllocator-int-int-int-int)),
		PoolArena$DirectArena:newChunk(int-int-int-int) to listOf(PoolChunk:<init>(PoolArena-Object-int-int-int-int)),
		PoolArena$DirectArena:newUnpooledChunk(int) to listOf(PoolChunk:<init>(PoolArena-Object-int)),
		PoolArena$DirectArena:destroyChunk(PoolChunk) to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer)),
		PoolArena$DirectArena:newByteBuf(int) to listOf(PooledUnsafeDirectByteBuf:newInstance(int), PooledDirectByteBuf:newInstance(int)),
		PoolArena$DirectArena:memoryCopy(ByteBuffer-int-ByteBuffer-int-int) to listOf(PlatformDependent:directBufferAddress(ByteBuffer), PlatformDependent:directBufferAddress(ByteBuffer), PlatformDependent:copyMemory(long-long-long)),
		PoolArena$DirectArena:memoryCopy(Object-int-Object-int-int) to listOf(PoolArena$DirectArena:memoryCopy(ByteBuffer-int-ByteBuffer-int-int)),
		PoolArena$DirectArena:<clinit>() to listOf(PlatformDependent:hasUnsafe()),
		PoolArena$HeapArena:<init>(PooledByteBufAllocator-int-int-int-int) to listOf(PoolArena:<init>(PooledByteBufAllocator-int-int-int-int)),
		PoolArena$HeapArena:newChunk(int-int-int-int) to listOf(PoolChunk:<init>(PoolArena-Object-int-int-int-int)),
		PoolArena$HeapArena:newUnpooledChunk(int) to listOf(PoolChunk:<init>(PoolArena-Object-int)),
		PoolArena$HeapArena:newByteBuf(int) to listOf(PooledHeapByteBuf:newInstance(int)),
		PoolArena$HeapArena:memoryCopy(Object-int-Object-int-int) to listOf(PoolArena$HeapArena:memoryCopy(byte[]-int-byte[]-int-int)),
		PoolArena:<init>(PooledByteBufAllocator-int-int-int-int) to listOf(PoolArena:newSubpagePoolArray(int), PoolArena:newSubpagePoolHead(int), PoolArena:newSubpagePoolArray(int), PoolArena:newSubpagePoolHead(int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int), PoolChunkList:<init>(PoolArena-PoolChunkList-int-int)),
		PoolArena:newSubpagePoolHead(int) to listOf(PoolSubpage:<init>(int)),
		PoolArena:allocate(PoolThreadCache-int-int) to listOf(PoolArena:newByteBuf(int), PoolArena:allocate(PoolThreadCache-PooledByteBuf-int)),
		PoolArena:allocate(PoolThreadCache-PooledByteBuf-int) to listOf(PoolArena:normalizeCapacity(int), PoolSubpage:allocate(), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int), PoolArena:allocateHuge(PooledByteBuf-int), PoolArena:allocateNormal(PooledByteBuf-int-int)),
		PoolArena:allocateNormal(PooledByteBuf-int-int) to listOf(PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolChunkList:allocate(PooledByteBuf-int-int), PoolArena:newChunk(int-int-int-int), PoolChunk:allocate(int), PoolChunk:initBuf(PooledByteBuf-long-int), PoolChunkList:add(PoolChunk)),
		PoolArena:allocateHuge(PooledByteBuf-int) to listOf(PoolArena:newUnpooledChunk(int), PooledByteBuf:initUnpooled(PoolChunk-int)),
		PoolArena:free(PoolChunk-long) to listOf(PoolArena:destroyChunk(PoolChunk), PoolChunkList:free(PoolChunk-long)),
		PoolArena:reallocate(PooledByteBuf-int-boolean) to listOf(PooledByteBuf:maxCapacity(), PooledByteBuf:readerIndex(), PooledByteBuf:writerIndex(), PoolArena:allocate(PoolThreadCache-PooledByteBuf-int), PoolArena:memoryCopy(Object-int-Object-int-int), PoolArena:memoryCopy(Object-int-Object-int-int), PooledByteBuf:setIndex(int-int), PoolArena:free(PoolChunk-long)),
		PoolChunk:<init>(PoolArena-Object-int-int-int-int) to listOf(PoolChunk:newSubpageArray(int)),
		PoolChunk:allocate(int) to listOf(PoolChunk:allocateRun(int-int-int), PoolChunk:allocateSubpage(int-int-int)),
		PoolChunk:allocateRun(int-int-int) to listOf(PoolChunk:nextRandom(), PoolChunk:allocateRun(int-int-int), PoolChunk:allocateRunSimple(int-int-int)),
		PoolChunk:allocateRunSimple(int-int-int) to listOf(PoolChunk:runLength(int), PoolChunk:nextRandom()),
		PoolChunk:allocateSubpage(int-int-int) to listOf(PoolChunk:nextRandom(), PoolChunk:branchSubpage(int-int), PoolChunk:branchSubpage(int-int), PoolChunk:allocateSubpageSimple(int-int-int), PoolChunk:subpageIdx(int), PoolSubpage:allocate()),
		PoolChunk:allocateSubpageSimple(int-int-int) to listOf(PoolChunk:runLength(int), PoolChunk:subpageIdx(int), PoolChunk:runOffset(int), PoolSubpage:<init>(PoolChunk-int-int-int-int), PoolSubpage:init(int), PoolSubpage:allocate(), PoolChunk:nextRandom()),
		PoolChunk:branchSubpage(int-int) to listOf(PoolChunk:allocateSubpage(int-int-int)),
		PoolChunk:free(long) to listOf(PoolChunk:subpageIdx(int), PoolSubpage:free(int), PoolChunk:runLength(int), PoolChunk:siblingIdx(int), PoolChunk:parentIdx(int)),
		PoolChunk:initBuf(PooledByteBuf-long-int) to listOf(PoolChunk:runOffset(int), PoolChunk:runLength(int), PooledByteBuf:init(PoolChunk-long-int-int-int), PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int)),
		PoolChunk:initBufWithSubpage(PooledByteBuf-long-int) to listOf(PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int)),
		PoolChunk:initBufWithSubpage(PooledByteBuf-long-int-int) to listOf(PoolChunk:subpageIdx(int), PoolChunk:runOffset(int), PooledByteBuf:init(PoolChunk-long-int-int-int)),
		PoolChunk:toString() to listOf(PoolChunk:usage()),
		PoolChunkList:allocate(PooledByteBuf-int-int) to listOf(PoolChunk:allocate(int), PoolChunk:initBuf(PooledByteBuf-long-int), PoolChunk:usage(), PoolChunkList:remove(PoolChunk), PoolChunkList:add(PoolChunk)),
		PoolChunkList:free(PoolChunk-long) to listOf(PoolChunk:free(long), PoolChunk:usage(), PoolChunkList:remove(PoolChunk), PoolChunk:usage(), PoolArena:destroyChunk(PoolChunk), PoolChunkList:add(PoolChunk)),
		PoolChunkList:add(PoolChunk) to listOf(PoolChunk:usage(), PoolChunkList:add(PoolChunk)),
		PooledByteBuf:<init>(Recycler$Handle-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), ResourceLeakDetector:open(Object)),
		PooledByteBuf:init(PoolChunk-long-int-int-int) to listOf(PooledByteBuf:setIndex(int-int)),
		PooledByteBuf:initUnpooled(PoolChunk-int) to listOf(PooledByteBuf:setIndex(int-int)),
		PooledByteBuf:capacity(int) to listOf(PooledByteBuf:ensureAccessible(), PooledByteBuf:readerIndex(), PooledByteBuf:writerIndex(), PooledByteBuf:setIndex(int-int), PooledByteBuf:readerIndex(), PooledByteBuf:writerIndex(), PooledByteBuf:setIndex(int-int), PoolArena:reallocate(PooledByteBuf-int-boolean)),
		PooledByteBuf:internalNioBuffer() to listOf(PooledByteBuf:newInternalNioBuffer(Object)),
		PooledByteBuf:deallocate() to listOf(PoolArena:free(PoolChunk-long), ResourceLeak:close(), PooledByteBuf:recycle()),
		PooledByteBuf:recycle() to listOf(PooledByteBuf:setRefCnt(int), PooledByteBuf:recycler(), Recycler:recycle(Object-Recycler$Handle)),
		PooledByteBufAllocator$1:initialValue() to listOf(PooledByteBufAllocator:access$000(PooledByteBufAllocator), PooledByteBufAllocator:access$000(PooledByteBufAllocator), PooledByteBufAllocator:access$000(PooledByteBufAllocator), PooledByteBufAllocator:access$100(PooledByteBufAllocator), PooledByteBufAllocator:access$100(PooledByteBufAllocator), PooledByteBufAllocator:access$100(PooledByteBufAllocator), PoolThreadCache:<init>(PoolArena-PoolArena), PooledByteBufAllocator$1:initialValue()),
		PooledByteBufAllocator:<init>() to listOf(PooledByteBufAllocator:<init>(boolean)),
		PooledByteBufAllocator:<init>(boolean) to listOf(PooledByteBufAllocator:<init>(boolean-int-int-int-int)),
		PooledByteBufAllocator:<init>(int-int-int-int) to listOf(PooledByteBufAllocator:<init>(boolean-int-int-int-int)),
		PooledByteBufAllocator:<init>(boolean-int-int-int-int) to listOf(AbstractByteBufAllocator:<init>(boolean), PooledByteBufAllocator$1:<init>(PooledByteBufAllocator), PooledByteBufAllocator:validateAndCalculateChunkSize(int-int), PooledByteBufAllocator:validateAndCalculatePageShifts(int), PooledByteBufAllocator:newArenaArray(int), PoolArena$HeapArena:<init>(PooledByteBufAllocator-int-int-int-int), PooledByteBufAllocator:newArenaArray(int), PoolArena$DirectArena:<init>(PooledByteBufAllocator-int-int-int-int)),
		PooledByteBufAllocator:newHeapBuffer(int-int) to listOf(PoolArena:allocate(PoolThreadCache-int-int), UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int)),
		PooledByteBufAllocator:newDirectBuffer(int-int) to listOf(PoolArena:allocate(PoolThreadCache-int-int), PlatformDependent:hasUnsafe(), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int), UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int)),
		PooledByteBufAllocator:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getInt(String-int), PooledByteBufAllocator:validateAndCalculatePageShifts(int), SystemPropertyUtil:getInt(String-int), PooledByteBufAllocator:validateAndCalculateChunkSize(int-int), SystemPropertyUtil:getInt(String-int), PlatformDependent:maxDirectMemory(), SystemPropertyUtil:getInt(String-int), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object-Object), InternalLogger:debug(String-Object), PlatformDependent:directBufferPreferred(), PooledByteBufAllocator:<init>(boolean)),
		PooledDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		PooledDirectByteBuf$1:newObject(Recycler$Handle) to listOf(PooledDirectByteBuf:<init>(Recycler$Handle-int-PooledDirectByteBuf$1), PooledDirectByteBuf$1:newObject(Recycler$Handle)),
		PooledDirectByteBuf:newInstance(int) to listOf(Recycler:get(), PooledDirectByteBuf:maxCapacity(int)),
		PooledDirectByteBuf:<init>(Recycler$Handle-int) to listOf(PooledByteBuf:<init>(Recycler$Handle-int)),
		PooledDirectByteBuf:_getByte(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getShort(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getUnsignedMedium(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getInt(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_getLong(int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledDirectByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledDirectByteBuf:getBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), PooledDirectByteBuf:getBytes(int-ByteBuffer), ByteBuf:setBytes(int-ByteBuf-int-int)),
		PooledDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(PooledDirectByteBuf:checkDstIndex(int-int-int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:getBytes(int-ByteBuffer) to listOf(PooledDirectByteBuf:checkIndex(int), PooledDirectByteBuf:capacity(), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:getBytes(int-OutputStream-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setByte(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setShort(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setMedium(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setInt(int-int) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:_setLong(int-long) to listOf(PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledDirectByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledDirectByteBuf:setBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), PooledDirectByteBuf:setBytes(int-ByteBuffer), ByteBuf:getBytes(int-ByteBuf-int-int)),
		PooledDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(PooledDirectByteBuf:checkSrcIndex(int-int-int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-ByteBuffer) to listOf(PooledDirectByteBuf:checkIndex(int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-InputStream-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:internalNioBuffer(), PooledDirectByteBuf:idx(int)),
		PooledDirectByteBuf:copy(int-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:alloc(), PooledDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), ByteBuf:writeBytes(ByteBuf-int-int)),
		PooledDirectByteBuf:nioBuffers(int-int) to listOf(PooledDirectByteBuf:nioBuffer(int-int)),
		PooledDirectByteBuf:internalNioBuffer(int-int) to listOf(PooledDirectByteBuf:checkIndex(int-int), PooledDirectByteBuf:idx(int), PooledDirectByteBuf:internalNioBuffer()),
		PooledDirectByteBuf:newInternalNioBuffer(Object) to listOf(PooledDirectByteBuf:newInternalNioBuffer(ByteBuffer)),
		PooledDirectByteBuf:<init>(Recycler$Handle-int-PooledDirectByteBuf$1) to listOf(PooledDirectByteBuf:<init>(Recycler$Handle-int)),
		PooledDirectByteBuf:<clinit>() to listOf(PooledDirectByteBuf$1:<init>()),
		PooledHeapByteBuf$1:<init>() to listOf(Recycler:<init>()),
		PooledHeapByteBuf$1:newObject(Recycler$Handle) to listOf(PooledHeapByteBuf:<init>(Recycler$Handle-int-PooledHeapByteBuf$1), PooledHeapByteBuf$1:newObject(Recycler$Handle)),
		PooledHeapByteBuf:newInstance(int) to listOf(Recycler:get(), PooledHeapByteBuf:maxCapacity(int)),
		PooledHeapByteBuf:<init>(Recycler$Handle-int) to listOf(PooledByteBuf:<init>(Recycler$Handle-int)),
		PooledHeapByteBuf:_getByte(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getShort(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getUnsignedMedium(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getInt(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_getLong(int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledHeapByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), PooledHeapByteBuf:idx(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledHeapByteBuf:getBytes(int-byte[]-int-int), PooledHeapByteBuf:idx(int), ByteBuf:setBytes(int-byte[]-int-int)),
		PooledHeapByteBuf:getBytes(int-byte[]-int-int) to listOf(PooledHeapByteBuf:checkDstIndex(int-int-int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:getBytes(int-ByteBuffer) to listOf(PooledHeapByteBuf:checkIndex(int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:capacity()),
		PooledHeapByteBuf:getBytes(int-OutputStream-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:internalNioBuffer()),
		PooledHeapByteBuf:_setByte(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setShort(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setMedium(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setInt(int-int) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:_setLong(int-long) to listOf(PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), PooledHeapByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PooledHeapByteBuf:idx(int), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledHeapByteBuf:setBytes(int-byte[]-int-int), PooledHeapByteBuf:idx(int), ByteBuf:getBytes(int-byte[]-int-int)),
		PooledHeapByteBuf:setBytes(int-byte[]-int-int) to listOf(PooledHeapByteBuf:checkSrcIndex(int-int-int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-ByteBuffer) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-InputStream-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int)),
		PooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:internalNioBuffer()),
		PooledHeapByteBuf:copy(int-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:alloc(), PooledHeapByteBuf:maxCapacity(), ByteBufAllocator:heapBuffer(int-int), PooledHeapByteBuf:idx(int), ByteBuf:writeBytes(byte[]-int-int)),
		PooledHeapByteBuf:nioBuffers(int-int) to listOf(PooledHeapByteBuf:nioBuffer(int-int)),
		PooledHeapByteBuf:internalNioBuffer(int-int) to listOf(PooledHeapByteBuf:checkIndex(int-int), PooledHeapByteBuf:idx(int), PooledHeapByteBuf:internalNioBuffer()),
		PooledHeapByteBuf:newInternalNioBuffer(Object) to listOf(PooledHeapByteBuf:newInternalNioBuffer(byte[])),
		PooledHeapByteBuf:<init>(Recycler$Handle-int-PooledHeapByteBuf$1) to listOf(PooledHeapByteBuf:<init>(Recycler$Handle-int)),
		PooledHeapByteBuf:<clinit>() to listOf(PooledHeapByteBuf$1:<init>()),
		PooledUnsafeDirectByteBuf$1:<init>() to listOf(Recycler:<init>()),
		PooledUnsafeDirectByteBuf$1:newObject(Recycler$Handle) to listOf(PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int-PooledUnsafeDirectByteBuf$1), PooledUnsafeDirectByteBuf$1:newObject(Recycler$Handle)),
		PooledUnsafeDirectByteBuf:newInstance(int) to listOf(Recycler:get(), PooledUnsafeDirectByteBuf:maxCapacity(int)),
		PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int) to listOf(PooledByteBuf:<init>(Recycler$Handle-int)),
		PooledUnsafeDirectByteBuf:init(PoolChunk-long-int-int-int) to listOf(PooledByteBuf:init(PoolChunk-long-int-int-int), PooledUnsafeDirectByteBuf:initMemoryAddress()),
		PooledUnsafeDirectByteBuf:initUnpooled(PoolChunk-int) to listOf(PooledByteBuf:initUnpooled(PoolChunk-int), PooledUnsafeDirectByteBuf:initMemoryAddress()),
		PooledUnsafeDirectByteBuf:initMemoryAddress() to listOf(PlatformDependent:directBufferAddress(ByteBuffer)),
		PooledUnsafeDirectByteBuf:_getByte(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long)),
		PooledUnsafeDirectByteBuf:_getShort(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getShort(long)),
		PooledUnsafeDirectByteBuf:_getUnsignedMedium(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long), PlatformDependent:getByte(long), PlatformDependent:getByte(long)),
		PooledUnsafeDirectByteBuf:_getInt(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getInt(long)),
		PooledUnsafeDirectByteBuf:_getLong(int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getLong(long)),
		PooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), PooledUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), PooledUnsafeDirectByteBuf:addr(int), ByteBuf:array(), ByteBuf:arrayOffset(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:setBytes(int-ByteBuf-int-int)),
		PooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		PooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int), PooledUnsafeDirectByteBuf:capacity(), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		PooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:_setByte(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte)),
		PooledUnsafeDirectByteBuf:_setShort(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putShort(long-short)),
		PooledUnsafeDirectByteBuf:_setMedium(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte)),
		PooledUnsafeDirectByteBuf:_setInt(int-int) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putInt(long-int)),
		PooledUnsafeDirectByteBuf:_setLong(int-long) to listOf(PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putLong(long-long)),
		PooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:getBytes(int-ByteBuf-int-int)),
		PooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		PooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:setBytes(int-InputStream-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		PooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:internalNioBuffer(), PooledUnsafeDirectByteBuf:idx(int)),
		PooledUnsafeDirectByteBuf:copy(int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:alloc(), PooledUnsafeDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), PooledUnsafeDirectByteBuf:addr(int), PooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-long-long), PooledUnsafeDirectByteBuf:setIndex(int-int)),
		PooledUnsafeDirectByteBuf:nioBuffers(int-int) to listOf(PooledUnsafeDirectByteBuf:nioBuffer(int-int)),
		PooledUnsafeDirectByteBuf:internalNioBuffer(int-int) to listOf(PooledUnsafeDirectByteBuf:checkIndex(int-int), PooledUnsafeDirectByteBuf:idx(int), PooledUnsafeDirectByteBuf:internalNioBuffer()),
		PooledUnsafeDirectByteBuf:newInternalNioBuffer(Object) to listOf(PooledUnsafeDirectByteBuf:newInternalNioBuffer(ByteBuffer)),
		PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int-PooledUnsafeDirectByteBuf$1) to listOf(PooledUnsafeDirectByteBuf:<init>(Recycler$Handle-int)),
		PooledUnsafeDirectByteBuf:<clinit>() to listOf(PooledUnsafeDirectByteBuf$1:<init>()),
		PoolSubpage:<init>(PoolChunk-int-int-int-int) to listOf(PoolSubpage:init(int)),
		PoolSubpage:init(int) to listOf(PoolSubpage:addToPool()),
		PoolSubpage:allocate() to listOf(PoolSubpage:toHandle(int), PoolSubpage:removeFromPool(), PoolSubpage:findNextAvailable(), PoolSubpage:toHandle(int)),
		PoolSubpage:free(int) to listOf(PoolSubpage:addToPool(), PoolSubpage:removeFromPool()),
		PoolSubpage:addToPool() to listOf(PoolArena:findSubpagePoolHead(int)),
		ReadOnlyByteBuf:<init>(ByteBuf) to listOf(ByteBuf:maxCapacity(), AbstractDerivedByteBuf:<init>(int), ByteBuf:unwrap(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ReadOnlyByteBuf:setIndex(int-int)),
		ReadOnlyByteBuf:alloc() to listOf(ByteBuf:alloc()),
		ReadOnlyByteBuf:order() to listOf(ByteBuf:order()),
		ReadOnlyByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		ReadOnlyByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		ReadOnlyByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		ReadOnlyByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		ReadOnlyByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		ReadOnlyByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		ReadOnlyByteBuf:duplicate() to listOf(ReadOnlyByteBuf:<init>(ByteBuf)),
		ReadOnlyByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int)),
		ReadOnlyByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int), Unpooled:unmodifiableBuffer(ByteBuf)),
		ReadOnlyByteBuf:getByte(int) to listOf(ReadOnlyByteBuf:_getByte(int)),
		ReadOnlyByteBuf:_getByte(int) to listOf(ByteBuf:getByte(int)),
		ReadOnlyByteBuf:getShort(int) to listOf(ReadOnlyByteBuf:_getShort(int)),
		ReadOnlyByteBuf:_getShort(int) to listOf(ByteBuf:getShort(int)),
		ReadOnlyByteBuf:getUnsignedMedium(int) to listOf(ReadOnlyByteBuf:_getUnsignedMedium(int)),
		ReadOnlyByteBuf:_getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		ReadOnlyByteBuf:getInt(int) to listOf(ReadOnlyByteBuf:_getInt(int)),
		ReadOnlyByteBuf:_getInt(int) to listOf(ByteBuf:getInt(int)),
		ReadOnlyByteBuf:getLong(int) to listOf(ReadOnlyByteBuf:_getLong(int)),
		ReadOnlyByteBuf:_getLong(int) to listOf(ByteBuf:getLong(int)),
		ReadOnlyByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		ReadOnlyByteBuf:nioBuffer(int-int) to listOf(ByteBuf:nioBuffer(int-int)),
		ReadOnlyByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		ReadOnlyByteBuf:internalNioBuffer(int-int) to listOf(ByteBuf:internalNioBuffer(int-int)),
		ReadOnlyByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		ReadOnlyByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		ReadOnlyByteBuf:capacity() to listOf(ByteBuf:capacity()),
		ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer) to listOf(AbstractReferenceCountedByteBuf:<init>(int), ReadOnlyByteBufferBuf:writerIndex(int), ResourceLeakDetector:open(Object)),
		ReadOnlyByteBufferBuf:deallocate() to listOf(ResourceLeak:close()),
		ReadOnlyByteBufferBuf:getByte(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getByte(int)),
		ReadOnlyByteBufferBuf:getShort(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getShort(int)),
		ReadOnlyByteBufferBuf:getUnsignedMedium(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getUnsignedMedium(int)),
		ReadOnlyByteBufferBuf:_getUnsignedMedium(int) to listOf(ReadOnlyByteBufferBuf:getByte(int), ReadOnlyByteBufferBuf:getByte(int), ReadOnlyByteBufferBuf:getByte(int)),
		ReadOnlyByteBufferBuf:getInt(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getInt(int)),
		ReadOnlyByteBufferBuf:getLong(int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:_getLong(int)),
		ReadOnlyByteBufferBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), ReadOnlyByteBufferBuf:checkDstIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ReadOnlyByteBufferBuf:getBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), ReadOnlyByteBufferBuf:getBytes(int-ByteBuffer), ByteBuf:setBytes(int-ByteBuf-int-int)),
		ReadOnlyByteBufferBuf:getBytes(int-byte[]-int-int) to listOf(ReadOnlyByteBufferBuf:checkDstIndex(int-int-int-int), ReadOnlyByteBufferBuf:internalNioBuffer()),
		ReadOnlyByteBufferBuf:getBytes(int-ByteBuffer) to listOf(ReadOnlyByteBufferBuf:checkIndex(int), ReadOnlyByteBufferBuf:capacity(), ReadOnlyByteBufferBuf:internalNioBuffer()),
		ReadOnlyByteBufferBuf:capacity() to listOf(ReadOnlyByteBufferBuf:maxCapacity()),
		ReadOnlyByteBufferBuf:copy(int-int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:internalNioBuffer(), ReadOnlyByteBufferBuf:order(), ReadOnlyByteBufferBuf:alloc(), ReadOnlyByteBufferBuf:maxCapacity(), UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int)),
		ReadOnlyByteBufferBuf:nioBuffers(int-int) to listOf(ReadOnlyByteBufferBuf:nioBuffer(int-int)),
		ReadOnlyByteBufferBuf:internalNioBuffer(int-int) to listOf(ReadOnlyByteBufferBuf:ensureAccessible(), ReadOnlyByteBufferBuf:internalNioBuffer()),
		ReadOnlyUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer) to listOf(ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), PlatformDependent:directBufferAddress(ByteBuffer)),
		ReadOnlyUnsafeDirectByteBuf:_getByte(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long)),
		ReadOnlyUnsafeDirectByteBuf:_getShort(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getShort(long)),
		ReadOnlyUnsafeDirectByteBuf:_getUnsignedMedium(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long), PlatformDependent:getByte(long), PlatformDependent:getByte(long)),
		ReadOnlyUnsafeDirectByteBuf:_getInt(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getInt(long)),
		ReadOnlyUnsafeDirectByteBuf:_getLong(int) to listOf(ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:getLong(long)),
		ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), ReadOnlyUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), ReadOnlyUnsafeDirectByteBuf:addr(int), ByteBuf:array(), ByteBuf:arrayOffset(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:setBytes(int-ByteBuf-int-int)),
		ReadOnlyUnsafeDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), ReadOnlyUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		ReadOnlyUnsafeDirectByteBuf:getBytes(int-ByteBuffer) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int), ReadOnlyUnsafeDirectByteBuf:capacity(), ReadOnlyUnsafeDirectByteBuf:internalNioBuffer()),
		ReadOnlyUnsafeDirectByteBuf:copy(int-int) to listOf(ReadOnlyUnsafeDirectByteBuf:checkIndex(int-int), ReadOnlyUnsafeDirectByteBuf:alloc(), ReadOnlyUnsafeDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), ReadOnlyUnsafeDirectByteBuf:addr(int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-long-long), UnpooledUnsafeDirectByteBuf:setIndex(int-int)),
		SlicedByteBuf:<init>(ByteBuf-int-int) to listOf(AbstractDerivedByteBuf:<init>(int), ByteBuf:capacity(), ByteBuf:toString(), ByteBuf:unwrap(), SlicedByteBuf:writerIndex(int)),
		SlicedByteBuf:alloc() to listOf(ByteBuf:alloc()),
		SlicedByteBuf:order() to listOf(ByteBuf:order()),
		SlicedByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		SlicedByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		SlicedByteBuf:array() to listOf(ByteBuf:array()),
		SlicedByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		SlicedByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		SlicedByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		SlicedByteBuf:_getByte(int) to listOf(ByteBuf:getByte(int)),
		SlicedByteBuf:_getShort(int) to listOf(ByteBuf:getShort(int)),
		SlicedByteBuf:_getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		SlicedByteBuf:_getInt(int) to listOf(ByteBuf:getInt(int)),
		SlicedByteBuf:_getLong(int) to listOf(ByteBuf:getLong(int)),
		SlicedByteBuf:duplicate() to listOf(ByteBuf:slice(int-int), SlicedByteBuf:readerIndex(), SlicedByteBuf:writerIndex(), ByteBuf:setIndex(int-int)),
		SlicedByteBuf:copy(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:copy(int-int)),
		SlicedByteBuf:slice(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:slice(int-int)),
		SlicedByteBuf:getBytes(int-ByteBuf-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-ByteBuf-int-int)),
		SlicedByteBuf:getBytes(int-byte[]-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-byte[]-int-int)),
		SlicedByteBuf:getBytes(int-ByteBuffer) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-ByteBuffer)),
		SlicedByteBuf:_setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		SlicedByteBuf:_setShort(int-int) to listOf(ByteBuf:setShort(int-int)),
		SlicedByteBuf:_setMedium(int-int) to listOf(ByteBuf:setMedium(int-int)),
		SlicedByteBuf:_setInt(int-int) to listOf(ByteBuf:setInt(int-int)),
		SlicedByteBuf:_setLong(int-long) to listOf(ByteBuf:setLong(int-long)),
		SlicedByteBuf:setBytes(int-byte[]-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-byte[]-int-int)),
		SlicedByteBuf:setBytes(int-ByteBuf-int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-ByteBuf-int-int)),
		SlicedByteBuf:setBytes(int-ByteBuffer) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-ByteBuffer)),
		SlicedByteBuf:getBytes(int-OutputStream-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-OutputStream-int)),
		SlicedByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:getBytes(int-GatheringByteChannel-int)),
		SlicedByteBuf:setBytes(int-InputStream-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-InputStream-int)),
		SlicedByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		SlicedByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		SlicedByteBuf:nioBuffer(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:nioBuffer(int-int)),
		SlicedByteBuf:nioBuffers(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:nioBuffers(int-int)),
		SlicedByteBuf:internalNioBuffer(int-int) to listOf(SlicedByteBuf:checkIndex(int-int), ByteBuf:internalNioBuffer(int-int)),
		SlicedByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		SlicedByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		SwappedByteBuf:<init>(ByteBuf) to listOf(ByteBuf:<init>(), ByteBuf:order()),
		SwappedByteBuf:unwrap() to listOf(ByteBuf:unwrap()),
		SwappedByteBuf:alloc() to listOf(ByteBuf:alloc()),
		SwappedByteBuf:capacity() to listOf(ByteBuf:capacity()),
		SwappedByteBuf:capacity(int) to listOf(ByteBuf:capacity(int)),
		SwappedByteBuf:maxCapacity() to listOf(ByteBuf:maxCapacity()),
		SwappedByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		SwappedByteBuf:readerIndex() to listOf(ByteBuf:readerIndex()),
		SwappedByteBuf:readerIndex(int) to listOf(ByteBuf:readerIndex(int)),
		SwappedByteBuf:writerIndex() to listOf(ByteBuf:writerIndex()),
		SwappedByteBuf:writerIndex(int) to listOf(ByteBuf:writerIndex(int)),
		SwappedByteBuf:setIndex(int-int) to listOf(ByteBuf:setIndex(int-int)),
		SwappedByteBuf:readableBytes() to listOf(ByteBuf:readableBytes()),
		SwappedByteBuf:writableBytes() to listOf(ByteBuf:writableBytes()),
		SwappedByteBuf:maxWritableBytes() to listOf(ByteBuf:maxWritableBytes()),
		SwappedByteBuf:isReadable() to listOf(ByteBuf:isReadable()),
		SwappedByteBuf:isReadable(int) to listOf(ByteBuf:isReadable(int)),
		SwappedByteBuf:isWritable() to listOf(ByteBuf:isWritable()),
		SwappedByteBuf:isWritable(int) to listOf(ByteBuf:isWritable(int)),
		SwappedByteBuf:clear() to listOf(ByteBuf:clear()),
		SwappedByteBuf:markReaderIndex() to listOf(ByteBuf:markReaderIndex()),
		SwappedByteBuf:resetReaderIndex() to listOf(ByteBuf:resetReaderIndex()),
		SwappedByteBuf:markWriterIndex() to listOf(ByteBuf:markWriterIndex()),
		SwappedByteBuf:resetWriterIndex() to listOf(ByteBuf:resetWriterIndex()),
		SwappedByteBuf:discardReadBytes() to listOf(ByteBuf:discardReadBytes()),
		SwappedByteBuf:discardSomeReadBytes() to listOf(ByteBuf:discardSomeReadBytes()),
		SwappedByteBuf:ensureWritable(int) to listOf(ByteBuf:ensureWritable(int)),
		SwappedByteBuf:ensureWritable(int-boolean) to listOf(ByteBuf:ensureWritable(int-boolean)),
		SwappedByteBuf:getBoolean(int) to listOf(ByteBuf:getBoolean(int)),
		SwappedByteBuf:getByte(int) to listOf(ByteBuf:getByte(int)),
		SwappedByteBuf:getUnsignedByte(int) to listOf(ByteBuf:getUnsignedByte(int)),
		SwappedByteBuf:getShort(int) to listOf(ByteBuf:getShort(int), ByteBufUtil:swapShort(short)),
		SwappedByteBuf:getUnsignedShort(int) to listOf(SwappedByteBuf:getShort(int)),
		SwappedByteBuf:getMedium(int) to listOf(ByteBuf:getMedium(int), ByteBufUtil:swapMedium(int)),
		SwappedByteBuf:getUnsignedMedium(int) to listOf(SwappedByteBuf:getMedium(int)),
		SwappedByteBuf:getInt(int) to listOf(ByteBuf:getInt(int), ByteBufUtil:swapInt(int)),
		SwappedByteBuf:getUnsignedInt(int) to listOf(SwappedByteBuf:getInt(int)),
		SwappedByteBuf:getLong(int) to listOf(ByteBuf:getLong(int), ByteBufUtil:swapLong(long)),
		SwappedByteBuf:getChar(int) to listOf(SwappedByteBuf:getShort(int)),
		SwappedByteBuf:getFloat(int) to listOf(SwappedByteBuf:getInt(int)),
		SwappedByteBuf:getDouble(int) to listOf(SwappedByteBuf:getLong(int)),
		SwappedByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:getBytes(int-ByteBuf)),
		SwappedByteBuf:getBytes(int-ByteBuf-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int)),
		SwappedByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		SwappedByteBuf:getBytes(int-byte[]) to listOf(ByteBuf:getBytes(int-byte[])),
		SwappedByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		SwappedByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		SwappedByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		SwappedByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		SwappedByteBuf:setBoolean(int-boolean) to listOf(ByteBuf:setBoolean(int-boolean)),
		SwappedByteBuf:setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		SwappedByteBuf:setShort(int-int) to listOf(ByteBufUtil:swapShort(short), ByteBuf:setShort(int-int)),
		SwappedByteBuf:setMedium(int-int) to listOf(ByteBufUtil:swapMedium(int), ByteBuf:setMedium(int-int)),
		SwappedByteBuf:setInt(int-int) to listOf(ByteBufUtil:swapInt(int), ByteBuf:setInt(int-int)),
		SwappedByteBuf:setLong(int-long) to listOf(ByteBufUtil:swapLong(long), ByteBuf:setLong(int-long)),
		SwappedByteBuf:setChar(int-int) to listOf(SwappedByteBuf:setShort(int-int)),
		SwappedByteBuf:setFloat(int-float) to listOf(SwappedByteBuf:setInt(int-int)),
		SwappedByteBuf:setDouble(int-double) to listOf(SwappedByteBuf:setLong(int-long)),
		SwappedByteBuf:setBytes(int-ByteBuf) to listOf(ByteBuf:setBytes(int-ByteBuf)),
		SwappedByteBuf:setBytes(int-ByteBuf-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int)),
		SwappedByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int-int)),
		SwappedByteBuf:setBytes(int-byte[]) to listOf(ByteBuf:setBytes(int-byte[])),
		SwappedByteBuf:setBytes(int-byte[]-int-int) to listOf(ByteBuf:setBytes(int-byte[]-int-int)),
		SwappedByteBuf:setBytes(int-ByteBuffer) to listOf(ByteBuf:setBytes(int-ByteBuffer)),
		SwappedByteBuf:setBytes(int-InputStream-int) to listOf(ByteBuf:setBytes(int-InputStream-int)),
		SwappedByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		SwappedByteBuf:setZero(int-int) to listOf(ByteBuf:setZero(int-int)),
		SwappedByteBuf:readBoolean() to listOf(ByteBuf:readBoolean()),
		SwappedByteBuf:readByte() to listOf(ByteBuf:readByte()),
		SwappedByteBuf:readUnsignedByte() to listOf(ByteBuf:readUnsignedByte()),
		SwappedByteBuf:readShort() to listOf(ByteBuf:readShort(), ByteBufUtil:swapShort(short)),
		SwappedByteBuf:readUnsignedShort() to listOf(SwappedByteBuf:readShort()),
		SwappedByteBuf:readMedium() to listOf(ByteBuf:readMedium(), ByteBufUtil:swapMedium(int)),
		SwappedByteBuf:readUnsignedMedium() to listOf(SwappedByteBuf:readMedium()),
		SwappedByteBuf:readInt() to listOf(ByteBuf:readInt(), ByteBufUtil:swapInt(int)),
		SwappedByteBuf:readUnsignedInt() to listOf(SwappedByteBuf:readInt()),
		SwappedByteBuf:readLong() to listOf(ByteBuf:readLong(), ByteBufUtil:swapLong(long)),
		SwappedByteBuf:readChar() to listOf(SwappedByteBuf:readShort()),
		SwappedByteBuf:readFloat() to listOf(SwappedByteBuf:readInt()),
		SwappedByteBuf:readDouble() to listOf(SwappedByteBuf:readLong()),
		SwappedByteBuf:readBytes(int) to listOf(ByteBuf:readBytes(int), SwappedByteBuf:order(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:readSlice(int) to listOf(ByteBuf:readSlice(int)),
		SwappedByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:readBytes(ByteBuf)),
		SwappedByteBuf:readBytes(ByteBuf-int) to listOf(ByteBuf:readBytes(ByteBuf-int)),
		SwappedByteBuf:readBytes(ByteBuf-int-int) to listOf(ByteBuf:readBytes(ByteBuf-int-int)),
		SwappedByteBuf:readBytes(byte[]) to listOf(ByteBuf:readBytes(byte[])),
		SwappedByteBuf:readBytes(byte[]-int-int) to listOf(ByteBuf:readBytes(byte[]-int-int)),
		SwappedByteBuf:readBytes(ByteBuffer) to listOf(ByteBuf:readBytes(ByteBuffer)),
		SwappedByteBuf:readBytes(OutputStream-int) to listOf(ByteBuf:readBytes(OutputStream-int)),
		SwappedByteBuf:readBytes(GatheringByteChannel-int) to listOf(ByteBuf:readBytes(GatheringByteChannel-int)),
		SwappedByteBuf:skipBytes(int) to listOf(ByteBuf:skipBytes(int)),
		SwappedByteBuf:writeBoolean(boolean) to listOf(ByteBuf:writeBoolean(boolean)),
		SwappedByteBuf:writeByte(int) to listOf(ByteBuf:writeByte(int)),
		SwappedByteBuf:writeShort(int) to listOf(ByteBufUtil:swapShort(short), ByteBuf:writeShort(int)),
		SwappedByteBuf:writeMedium(int) to listOf(ByteBufUtil:swapMedium(int), ByteBuf:writeMedium(int)),
		SwappedByteBuf:writeInt(int) to listOf(ByteBufUtil:swapInt(int), ByteBuf:writeInt(int)),
		SwappedByteBuf:writeLong(long) to listOf(ByteBufUtil:swapLong(long), ByteBuf:writeLong(long)),
		SwappedByteBuf:writeChar(int) to listOf(SwappedByteBuf:writeShort(int)),
		SwappedByteBuf:writeFloat(float) to listOf(SwappedByteBuf:writeInt(int)),
		SwappedByteBuf:writeDouble(double) to listOf(SwappedByteBuf:writeLong(long)),
		SwappedByteBuf:writeBytes(ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf)),
		SwappedByteBuf:writeBytes(ByteBuf-int) to listOf(ByteBuf:writeBytes(ByteBuf-int)),
		SwappedByteBuf:writeBytes(ByteBuf-int-int) to listOf(ByteBuf:writeBytes(ByteBuf-int-int)),
		SwappedByteBuf:writeBytes(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		SwappedByteBuf:writeBytes(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		SwappedByteBuf:writeBytes(ByteBuffer) to listOf(ByteBuf:writeBytes(ByteBuffer)),
		SwappedByteBuf:writeBytes(InputStream-int) to listOf(ByteBuf:writeBytes(InputStream-int)),
		SwappedByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(ByteBuf:writeBytes(ScatteringByteChannel-int)),
		SwappedByteBuf:writeZero(int) to listOf(ByteBuf:writeZero(int)),
		SwappedByteBuf:indexOf(int-int-byte) to listOf(ByteBuf:indexOf(int-int-byte)),
		SwappedByteBuf:bytesBefore(byte) to listOf(ByteBuf:bytesBefore(byte)),
		SwappedByteBuf:bytesBefore(int-byte) to listOf(ByteBuf:bytesBefore(int-byte)),
		SwappedByteBuf:bytesBefore(int-int-byte) to listOf(ByteBuf:bytesBefore(int-int-byte)),
		SwappedByteBuf:forEachByte(ByteBufProcessor) to listOf(ByteBuf:forEachByte(ByteBufProcessor)),
		SwappedByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		SwappedByteBuf:forEachByteDesc(ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(ByteBufProcessor)),
		SwappedByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		SwappedByteBuf:copy() to listOf(ByteBuf:copy(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:slice() to listOf(ByteBuf:slice(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:duplicate() to listOf(ByteBuf:duplicate(), ByteBuf:order(ByteOrder)),
		SwappedByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		SwappedByteBuf:nioBuffer() to listOf(ByteBuf:nioBuffer()),
		SwappedByteBuf:nioBuffer(int-int) to listOf(ByteBuf:nioBuffer(int-int)),
		SwappedByteBuf:internalNioBuffer(int-int) to listOf(ByteBuf:nioBuffer(int-int)),
		SwappedByteBuf:nioBuffers() to listOf(ByteBuf:nioBuffers()),
		SwappedByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		SwappedByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		SwappedByteBuf:array() to listOf(ByteBuf:array()),
		SwappedByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		SwappedByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		SwappedByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		SwappedByteBuf:toString(Charset) to listOf(ByteBuf:toString(Charset)),
		SwappedByteBuf:toString(int-int-Charset) to listOf(ByteBuf:toString(int-int-Charset)),
		SwappedByteBuf:refCnt() to listOf(ByteBuf:refCnt()),
		SwappedByteBuf:retain() to listOf(ByteBuf:retain(), SwappedByteBuf:retain()),
		SwappedByteBuf:retain(int) to listOf(ByteBuf:retain(int), SwappedByteBuf:retain(int)),
		SwappedByteBuf:release() to listOf(ByteBuf:release()),
		SwappedByteBuf:release(int) to listOf(ByteBuf:release(int)),
		SwappedByteBuf:hashCode() to listOf(ByteBuf:hashCode()),
		SwappedByteBuf:equals(Object) to listOf(ByteBufUtil:equals(ByteBuf-ByteBuf)),
		SwappedByteBuf:compareTo(ByteBuf) to listOf(ByteBufUtil:compare(ByteBuf-ByteBuf)),
		SwappedByteBuf:toString() to listOf(ByteBuf:toString()),
		SwappedByteBuf:compareTo(Object) to listOf(SwappedByteBuf:compareTo(ByteBuf)),
		Unpooled:buffer() to listOf(ByteBufAllocator:heapBuffer()),
		Unpooled:directBuffer() to listOf(ByteBufAllocator:directBuffer()),
		Unpooled:buffer(int) to listOf(ByteBufAllocator:heapBuffer(int)),
		Unpooled:directBuffer(int) to listOf(ByteBufAllocator:directBuffer(int)),
		Unpooled:buffer(int-int) to listOf(ByteBufAllocator:heapBuffer(int-int)),
		Unpooled:directBuffer(int-int) to listOf(ByteBufAllocator:directBuffer(int-int)),
		Unpooled:wrappedBuffer(byte[]) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int)),
		Unpooled:wrappedBuffer(byte[]-int-int) to listOf(Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[]), ByteBuf:slice(int-int)),
		Unpooled:wrappedBuffer(ByteBuffer) to listOf(Unpooled:wrappedBuffer(byte[]-int-int), ByteBuf:order(ByteOrder), PlatformDependent:hasUnsafe(), ReadOnlyUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer), ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int), ReadOnlyByteBufferBuf:<init>(ByteBufAllocator-ByteBuffer), UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int)),
		Unpooled:wrappedBuffer(ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:slice()),
		Unpooled:wrappedBuffer(byte[][]) to listOf(Unpooled:wrappedBuffer(int-byte[][])),
		Unpooled:wrappedBuffer(ByteBuf[]) to listOf(Unpooled:wrappedBuffer(int-ByteBuf[])),
		Unpooled:wrappedBuffer(ByteBuffer[]) to listOf(Unpooled:wrappedBuffer(int-ByteBuffer[])),
		Unpooled:wrappedBuffer(int-byte[][]) to listOf(Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[]), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable)),
		Unpooled:wrappedBuffer(int-ByteBuf[]) to listOf(ByteBuf:isReadable(), ByteBuf:order(ByteOrder), Unpooled:wrappedBuffer(ByteBuf), ByteBuf:isReadable(), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-ByteBuf[])),
		Unpooled:wrappedBuffer(int-ByteBuffer[]) to listOf(Unpooled:wrappedBuffer(ByteBuffer), Unpooled:wrappedBuffer(ByteBuffer), CompositeByteBuf:<init>(ByteBufAllocator-boolean-int-Iterable)),
		Unpooled:compositeBuffer() to listOf(Unpooled:compositeBuffer(int)),
		Unpooled:compositeBuffer(int) to listOf(CompositeByteBuf:<init>(ByteBufAllocator-boolean-int)),
		Unpooled:copiedBuffer(byte[]) to listOf(byte[]:clone(), Unpooled:wrappedBuffer(byte[])),
		Unpooled:copiedBuffer(byte[]-int-int) to listOf(Unpooled:wrappedBuffer(byte[])),
		Unpooled:copiedBuffer(ByteBuffer) to listOf(Unpooled:wrappedBuffer(byte[]), ByteBuf:order(ByteOrder)),
		Unpooled:copiedBuffer(ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:copy()),
		Unpooled:copiedBuffer(byte[][]) to listOf(Unpooled:copiedBuffer(byte[]), Unpooled:wrappedBuffer(byte[])),
		Unpooled:copiedBuffer(ByteBuf[]) to listOf(Unpooled:copiedBuffer(ByteBuf), ByteBuf:readableBytes(), ByteBuf:order(), ByteBuf:order(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]-int-int), Unpooled:wrappedBuffer(byte[]), ByteBuf:order(ByteOrder)),
		Unpooled:copiedBuffer(ByteBuffer[]) to listOf(Unpooled:copiedBuffer(ByteBuffer), Unpooled:wrappedBuffer(byte[]), ByteBuf:order(ByteOrder)),
		Unpooled:copiedBuffer(CharSequence-Charset) to listOf(Unpooled:copiedBuffer(CharBuffer-Charset), Unpooled:copiedBuffer(CharBuffer-Charset)),
		Unpooled:copiedBuffer(CharSequence-int-int-Charset) to listOf(Unpooled:copiedBuffer(char[]-int-int-Charset), Unpooled:copiedBuffer(CharBuffer-Charset), Unpooled:copiedBuffer(CharBuffer-Charset)),
		Unpooled:copiedBuffer(char[]-Charset) to listOf(Unpooled:copiedBuffer(char[]-int-int-Charset)),
		Unpooled:copiedBuffer(char[]-int-int-Charset) to listOf(Unpooled:copiedBuffer(CharBuffer-Charset)),
		Unpooled:copiedBuffer(CharBuffer-Charset) to listOf(ByteBufUtil:encodeString(CharBuffer-Charset), Unpooled:wrappedBuffer(byte[]), ByteBuf:writerIndex(int)),
		Unpooled:unmodifiableBuffer(ByteBuf) to listOf(ByteBuf:order(), ReadOnlyByteBuf:<init>(ByteBuf), ByteBuf:order(ByteOrder), ReadOnlyByteBuf:<init>(ByteBuf), ReadOnlyByteBuf:order(ByteOrder)),
		Unpooled:copyInt(int) to listOf(Unpooled:buffer(int), ByteBuf:writeInt(int)),
		Unpooled:copyInt(int[]) to listOf(Unpooled:buffer(int), ByteBuf:writeInt(int)),
		Unpooled:copyShort(int) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int)),
		Unpooled:copyShort(short[]) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int)),
		Unpooled:copyShort(int[]) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int)),
		Unpooled:copyMedium(int) to listOf(Unpooled:buffer(int), ByteBuf:writeMedium(int)),
		Unpooled:copyMedium(int[]) to listOf(Unpooled:buffer(int), ByteBuf:writeMedium(int)),
		Unpooled:copyLong(long) to listOf(Unpooled:buffer(int), ByteBuf:writeLong(long)),
		Unpooled:copyLong(long[]) to listOf(Unpooled:buffer(int), ByteBuf:writeLong(long)),
		Unpooled:copyBoolean(boolean) to listOf(Unpooled:buffer(int), ByteBuf:writeBoolean(boolean)),
		Unpooled:copyBoolean(boolean[]) to listOf(Unpooled:buffer(int), ByteBuf:writeBoolean(boolean)),
		Unpooled:copyFloat(float) to listOf(Unpooled:buffer(int), ByteBuf:writeFloat(float)),
		Unpooled:copyFloat(float[]) to listOf(Unpooled:buffer(int), ByteBuf:writeFloat(float)),
		Unpooled:copyDouble(double) to listOf(Unpooled:buffer(int), ByteBuf:writeDouble(double)),
		Unpooled:copyDouble(double[]) to listOf(Unpooled:buffer(int), ByteBuf:writeDouble(double)),
		Unpooled:unreleasableBuffer(ByteBuf) to listOf(UnreleasableByteBuf:<init>(ByteBuf)),
		Unpooled:<clinit>() to listOf(ByteBufAllocator:buffer(int-int)),
		UnpooledByteBufAllocator:<init>(boolean) to listOf(AbstractByteBufAllocator:<init>(boolean)),
		UnpooledByteBufAllocator:newHeapBuffer(int-int) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int)),
		UnpooledByteBufAllocator:newDirectBuffer(int-int) to listOf(PlatformDependent:hasUnsafe(), UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int), UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int)),
		UnpooledByteBufAllocator:<clinit>() to listOf(PlatformDependent:directBufferPreferred(), UnpooledByteBufAllocator:<init>(boolean)),
		UnpooledDirectByteBuf:<init>(ByteBufAllocator-int-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer), ResourceLeakDetector:open(Object)),
		UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledDirectByteBuf:writerIndex(int), ResourceLeakDetector:open(Object)),
		UnpooledDirectByteBuf:setByteBuffer(ByteBuffer) to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer)),
		UnpooledDirectByteBuf:capacity(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:maxCapacity(), UnpooledDirectByteBuf:readerIndex(), UnpooledDirectByteBuf:writerIndex(), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledDirectByteBuf:writerIndex(int), UnpooledDirectByteBuf:setIndex(int-int), UnpooledDirectByteBuf:setByteBuffer(ByteBuffer)),
		UnpooledDirectByteBuf:getByte(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getByte(int)),
		UnpooledDirectByteBuf:getShort(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getShort(int)),
		UnpooledDirectByteBuf:getUnsignedMedium(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getUnsignedMedium(int)),
		UnpooledDirectByteBuf:_getUnsignedMedium(int) to listOf(UnpooledDirectByteBuf:getByte(int), UnpooledDirectByteBuf:getByte(int), UnpooledDirectByteBuf:getByte(int)),
		UnpooledDirectByteBuf:getInt(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getInt(int)),
		UnpooledDirectByteBuf:getLong(int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_getLong(int)),
		UnpooledDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledDirectByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledDirectByteBuf:getBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), UnpooledDirectByteBuf:getBytes(int-ByteBuffer), ByteBuf:setBytes(int-ByteBuf-int-int)),
		UnpooledDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(UnpooledDirectByteBuf:checkDstIndex(int-int-int-int), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:getBytes(int-ByteBuffer) to listOf(UnpooledDirectByteBuf:checkIndex(int), UnpooledDirectByteBuf:capacity(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:setByte(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setByte(int-int)),
		UnpooledDirectByteBuf:setShort(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setShort(int-int)),
		UnpooledDirectByteBuf:setMedium(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setMedium(int-int)),
		UnpooledDirectByteBuf:_setMedium(int-int) to listOf(UnpooledDirectByteBuf:setByte(int-int), UnpooledDirectByteBuf:setByte(int-int), UnpooledDirectByteBuf:setByte(int-int)),
		UnpooledDirectByteBuf:setInt(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setInt(int-int)),
		UnpooledDirectByteBuf:setLong(int-long) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:_setLong(int-long)),
		UnpooledDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledDirectByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:getBytes(int-byte[]-int-int), ByteBuf:nioBufferCount(), ByteBuf:nioBuffers(int-int), UnpooledDirectByteBuf:setBytes(int-ByteBuffer), ByteBuf:getBytes(int-ByteBuf-int-int)),
		UnpooledDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(UnpooledDirectByteBuf:checkSrcIndex(int-int-int-int), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:setBytes(int-ByteBuffer) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:getBytes(int-OutputStream-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:setBytes(int-InputStream-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:nioBuffers(int-int) to listOf(UnpooledDirectByteBuf:nioBuffer(int-int)),
		UnpooledDirectByteBuf:copy(int-int) to listOf(UnpooledDirectByteBuf:ensureAccessible(), UnpooledDirectByteBuf:internalNioBuffer(), UnpooledDirectByteBuf:order(), UnpooledDirectByteBuf:alloc(), UnpooledDirectByteBuf:maxCapacity(), UnpooledDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int)),
		UnpooledDirectByteBuf:internalNioBuffer(int-int) to listOf(UnpooledDirectByteBuf:internalNioBuffer()),
		UnpooledDirectByteBuf:deallocate() to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer), ResourceLeak:close()),
		UnpooledHeapByteBuf:<init>(ByteBufAllocator-int-int) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int)),
		UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int) to listOf(UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int)),
		UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int-int-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledHeapByteBuf:setArray(byte[]), UnpooledHeapByteBuf:setIndex(int-int)),
		UnpooledHeapByteBuf:capacity() to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:capacity(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:maxCapacity(), UnpooledHeapByteBuf:readerIndex(), UnpooledHeapByteBuf:readerIndex(), UnpooledHeapByteBuf:readableBytes(), UnpooledHeapByteBuf:setArray(byte[]), UnpooledHeapByteBuf:readerIndex(), UnpooledHeapByteBuf:writerIndex(), UnpooledHeapByteBuf:writerIndex(int), UnpooledHeapByteBuf:setIndex(int-int), UnpooledHeapByteBuf:setArray(byte[])),
		UnpooledHeapByteBuf:array() to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledHeapByteBuf:checkDstIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledHeapByteBuf:getBytes(int-byte[]-int-int), ByteBuf:setBytes(int-byte[]-int-int)),
		UnpooledHeapByteBuf:getBytes(int-byte[]-int-int) to listOf(UnpooledHeapByteBuf:checkDstIndex(int-int-int-int)),
		UnpooledHeapByteBuf:getBytes(int-ByteBuffer) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:capacity()),
		UnpooledHeapByteBuf:getBytes(int-OutputStream-int) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:internalNioBuffer()),
		UnpooledHeapByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:capacity(), UnpooledHeapByteBuf:checkSrcIndex(int-int-int-int), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledHeapByteBuf:setBytes(int-byte[]-int-int), ByteBuf:getBytes(int-byte[]-int-int)),
		UnpooledHeapByteBuf:setBytes(int-byte[]-int-int) to listOf(UnpooledHeapByteBuf:checkSrcIndex(int-int-int-int)),
		UnpooledHeapByteBuf:setBytes(int-ByteBuffer) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:setBytes(int-InputStream-int) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:internalNioBuffer()),
		UnpooledHeapByteBuf:nioBuffer(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible()),
		UnpooledHeapByteBuf:nioBuffers(int-int) to listOf(UnpooledHeapByteBuf:nioBuffer(int-int)),
		UnpooledHeapByteBuf:internalNioBuffer(int-int) to listOf(UnpooledHeapByteBuf:internalNioBuffer()),
		UnpooledHeapByteBuf:getByte(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getByte(int)),
		UnpooledHeapByteBuf:getShort(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getShort(int)),
		UnpooledHeapByteBuf:getUnsignedMedium(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getUnsignedMedium(int)),
		UnpooledHeapByteBuf:getInt(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getInt(int)),
		UnpooledHeapByteBuf:getLong(int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_getLong(int)),
		UnpooledHeapByteBuf:setByte(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setByte(int-int)),
		UnpooledHeapByteBuf:setShort(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setShort(int-int)),
		UnpooledHeapByteBuf:setMedium(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setMedium(int-int)),
		UnpooledHeapByteBuf:setInt(int-int) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setInt(int-int)),
		UnpooledHeapByteBuf:setLong(int-long) to listOf(UnpooledHeapByteBuf:ensureAccessible(), UnpooledHeapByteBuf:_setLong(int-long)),
		UnpooledHeapByteBuf:copy(int-int) to listOf(UnpooledHeapByteBuf:checkIndex(int-int), UnpooledHeapByteBuf:alloc(), UnpooledHeapByteBuf:maxCapacity(), UnpooledHeapByteBuf:<init>(ByteBufAllocator-byte[]-int)),
		UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-int-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer), ResourceLeakDetector:open(Object)),
		UnpooledUnsafeDirectByteBuf:<init>(ByteBufAllocator-ByteBuffer-int) to listOf(AbstractReferenceCountedByteBuf:<init>(int), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledUnsafeDirectByteBuf:writerIndex(int), ResourceLeakDetector:open(Object)),
		UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer) to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer), PlatformDependent:directBufferAddress(ByteBuffer)),
		UnpooledUnsafeDirectByteBuf:capacity(int) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:maxCapacity(), UnpooledUnsafeDirectByteBuf:readerIndex(), UnpooledUnsafeDirectByteBuf:writerIndex(), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer), UnpooledUnsafeDirectByteBuf:writerIndex(int), UnpooledUnsafeDirectByteBuf:setIndex(int-int), UnpooledUnsafeDirectByteBuf:setByteBuffer(ByteBuffer)),
		UnpooledUnsafeDirectByteBuf:_getByte(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long)),
		UnpooledUnsafeDirectByteBuf:_getShort(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getShort(long)),
		UnpooledUnsafeDirectByteBuf:_getUnsignedMedium(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getByte(long), PlatformDependent:getByte(long), PlatformDependent:getByte(long)),
		UnpooledUnsafeDirectByteBuf:_getInt(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getInt(long)),
		UnpooledUnsafeDirectByteBuf:_getLong(int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:getLong(long)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuf-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), UnpooledUnsafeDirectByteBuf:addr(int), ByteBuf:memoryAddress(), PlatformDependent:copyMemory(long-long-long), ByteBuf:hasArray(), UnpooledUnsafeDirectByteBuf:addr(int), ByteBuf:array(), ByteBuf:arrayOffset(), PlatformDependent:copyMemory(long-byte[]-int-long), ByteBuf:setBytes(int-ByteBuf-int-int)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-byte[]-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-ByteBuffer) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int), UnpooledUnsafeDirectByteBuf:capacity(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:_setByte(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte)),
		UnpooledUnsafeDirectByteBuf:_setShort(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putShort(long-short)),
		UnpooledUnsafeDirectByteBuf:_setMedium(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte), PlatformDependent:putByte(long-byte)),
		UnpooledUnsafeDirectByteBuf:_setInt(int-int) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putInt(long-int)),
		UnpooledUnsafeDirectByteBuf:_setLong(int-long) to listOf(UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:putLong(long-long)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuf-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), ByteBuf:capacity(), ByteBuf:hasMemoryAddress(), ByteBuf:memoryAddress(), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-long-long), ByteBuf:array(), ByteBuf:arrayOffset(), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long), ByteBuf:getBytes(int-ByteBuf-int-int)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-byte[]-int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-ByteBuffer) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:getBytes(int-OutputStream-int) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-byte[]-int-long)),
		UnpooledUnsafeDirectByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:setBytes(int-InputStream-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(byte[]-int-long-long)),
		UnpooledUnsafeDirectByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(UnpooledUnsafeDirectByteBuf:ensureAccessible(), UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:nioBuffers(int-int) to listOf(UnpooledUnsafeDirectByteBuf:nioBuffer(int-int)),
		UnpooledUnsafeDirectByteBuf:copy(int-int) to listOf(UnpooledUnsafeDirectByteBuf:checkIndex(int-int), UnpooledUnsafeDirectByteBuf:alloc(), UnpooledUnsafeDirectByteBuf:maxCapacity(), ByteBufAllocator:directBuffer(int-int), UnpooledUnsafeDirectByteBuf:addr(int), UnpooledUnsafeDirectByteBuf:addr(int), PlatformDependent:copyMemory(long-long-long), UnpooledUnsafeDirectByteBuf:setIndex(int-int)),
		UnpooledUnsafeDirectByteBuf:internalNioBuffer(int-int) to listOf(UnpooledUnsafeDirectByteBuf:internalNioBuffer()),
		UnpooledUnsafeDirectByteBuf:deallocate() to listOf(PlatformDependent:freeDirectBuffer(ByteBuffer), ResourceLeak:close()),
		UnreleasableByteBuf:<init>(ByteBuf) to listOf(ByteBuf:<init>()),
		UnreleasableByteBuf:hasMemoryAddress() to listOf(ByteBuf:hasMemoryAddress()),
		UnreleasableByteBuf:memoryAddress() to listOf(ByteBuf:memoryAddress()),
		UnreleasableByteBuf:capacity() to listOf(ByteBuf:capacity()),
		UnreleasableByteBuf:capacity(int) to listOf(ByteBuf:capacity(int)),
		UnreleasableByteBuf:maxCapacity() to listOf(ByteBuf:maxCapacity()),
		UnreleasableByteBuf:alloc() to listOf(ByteBuf:alloc()),
		UnreleasableByteBuf:order() to listOf(ByteBuf:order()),
		UnreleasableByteBuf:order(ByteOrder) to listOf(UnreleasableByteBuf:order(), SwappedByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:isDirect() to listOf(ByteBuf:isDirect()),
		UnreleasableByteBuf:readerIndex() to listOf(ByteBuf:readerIndex()),
		UnreleasableByteBuf:readerIndex(int) to listOf(ByteBuf:readerIndex(int)),
		UnreleasableByteBuf:writerIndex() to listOf(ByteBuf:writerIndex()),
		UnreleasableByteBuf:writerIndex(int) to listOf(ByteBuf:writerIndex(int)),
		UnreleasableByteBuf:setIndex(int-int) to listOf(ByteBuf:setIndex(int-int)),
		UnreleasableByteBuf:readableBytes() to listOf(ByteBuf:readableBytes()),
		UnreleasableByteBuf:writableBytes() to listOf(ByteBuf:writableBytes()),
		UnreleasableByteBuf:maxWritableBytes() to listOf(ByteBuf:maxWritableBytes()),
		UnreleasableByteBuf:isReadable() to listOf(ByteBuf:isReadable()),
		UnreleasableByteBuf:isWritable() to listOf(ByteBuf:isWritable()),
		UnreleasableByteBuf:clear() to listOf(ByteBuf:clear()),
		UnreleasableByteBuf:markReaderIndex() to listOf(ByteBuf:markReaderIndex()),
		UnreleasableByteBuf:resetReaderIndex() to listOf(ByteBuf:resetReaderIndex()),
		UnreleasableByteBuf:markWriterIndex() to listOf(ByteBuf:markWriterIndex()),
		UnreleasableByteBuf:resetWriterIndex() to listOf(ByteBuf:resetWriterIndex()),
		UnreleasableByteBuf:discardReadBytes() to listOf(ByteBuf:discardReadBytes()),
		UnreleasableByteBuf:discardSomeReadBytes() to listOf(ByteBuf:discardSomeReadBytes()),
		UnreleasableByteBuf:ensureWritable(int) to listOf(ByteBuf:ensureWritable(int)),
		UnreleasableByteBuf:ensureWritable(int-boolean) to listOf(ByteBuf:ensureWritable(int-boolean)),
		UnreleasableByteBuf:getBoolean(int) to listOf(ByteBuf:getBoolean(int)),
		UnreleasableByteBuf:getByte(int) to listOf(ByteBuf:getByte(int)),
		UnreleasableByteBuf:getUnsignedByte(int) to listOf(ByteBuf:getUnsignedByte(int)),
		UnreleasableByteBuf:getShort(int) to listOf(ByteBuf:getShort(int)),
		UnreleasableByteBuf:getUnsignedShort(int) to listOf(ByteBuf:getUnsignedShort(int)),
		UnreleasableByteBuf:getMedium(int) to listOf(ByteBuf:getMedium(int)),
		UnreleasableByteBuf:getUnsignedMedium(int) to listOf(ByteBuf:getUnsignedMedium(int)),
		UnreleasableByteBuf:getInt(int) to listOf(ByteBuf:getInt(int)),
		UnreleasableByteBuf:getUnsignedInt(int) to listOf(ByteBuf:getUnsignedInt(int)),
		UnreleasableByteBuf:getLong(int) to listOf(ByteBuf:getLong(int)),
		UnreleasableByteBuf:getChar(int) to listOf(ByteBuf:getChar(int)),
		UnreleasableByteBuf:getFloat(int) to listOf(ByteBuf:getFloat(int)),
		UnreleasableByteBuf:getDouble(int) to listOf(ByteBuf:getDouble(int)),
		UnreleasableByteBuf:getBytes(int-ByteBuf) to listOf(ByteBuf:getBytes(int-ByteBuf)),
		UnreleasableByteBuf:getBytes(int-ByteBuf-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int)),
		UnreleasableByteBuf:getBytes(int-ByteBuf-int-int) to listOf(ByteBuf:getBytes(int-ByteBuf-int-int)),
		UnreleasableByteBuf:getBytes(int-byte[]) to listOf(ByteBuf:getBytes(int-byte[])),
		UnreleasableByteBuf:getBytes(int-byte[]-int-int) to listOf(ByteBuf:getBytes(int-byte[]-int-int)),
		UnreleasableByteBuf:getBytes(int-ByteBuffer) to listOf(ByteBuf:getBytes(int-ByteBuffer)),
		UnreleasableByteBuf:getBytes(int-OutputStream-int) to listOf(ByteBuf:getBytes(int-OutputStream-int)),
		UnreleasableByteBuf:getBytes(int-GatheringByteChannel-int) to listOf(ByteBuf:getBytes(int-GatheringByteChannel-int)),
		UnreleasableByteBuf:setBoolean(int-boolean) to listOf(ByteBuf:setBoolean(int-boolean)),
		UnreleasableByteBuf:setByte(int-int) to listOf(ByteBuf:setByte(int-int)),
		UnreleasableByteBuf:setShort(int-int) to listOf(ByteBuf:setShort(int-int)),
		UnreleasableByteBuf:setMedium(int-int) to listOf(ByteBuf:setMedium(int-int)),
		UnreleasableByteBuf:setInt(int-int) to listOf(ByteBuf:setInt(int-int)),
		UnreleasableByteBuf:setLong(int-long) to listOf(ByteBuf:setLong(int-long)),
		UnreleasableByteBuf:setChar(int-int) to listOf(ByteBuf:setChar(int-int)),
		UnreleasableByteBuf:setFloat(int-float) to listOf(ByteBuf:setFloat(int-float)),
		UnreleasableByteBuf:setDouble(int-double) to listOf(ByteBuf:setDouble(int-double)),
		UnreleasableByteBuf:setBytes(int-ByteBuf) to listOf(ByteBuf:setBytes(int-ByteBuf)),
		UnreleasableByteBuf:setBytes(int-ByteBuf-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int)),
		UnreleasableByteBuf:setBytes(int-ByteBuf-int-int) to listOf(ByteBuf:setBytes(int-ByteBuf-int-int)),
		UnreleasableByteBuf:setBytes(int-byte[]) to listOf(ByteBuf:setBytes(int-byte[])),
		UnreleasableByteBuf:setBytes(int-byte[]-int-int) to listOf(ByteBuf:setBytes(int-byte[]-int-int)),
		UnreleasableByteBuf:setBytes(int-ByteBuffer) to listOf(ByteBuf:setBytes(int-ByteBuffer)),
		UnreleasableByteBuf:setBytes(int-InputStream-int) to listOf(ByteBuf:setBytes(int-InputStream-int)),
		UnreleasableByteBuf:setBytes(int-ScatteringByteChannel-int) to listOf(ByteBuf:setBytes(int-ScatteringByteChannel-int)),
		UnreleasableByteBuf:setZero(int-int) to listOf(ByteBuf:setZero(int-int)),
		UnreleasableByteBuf:readBoolean() to listOf(ByteBuf:readBoolean()),
		UnreleasableByteBuf:readByte() to listOf(ByteBuf:readByte()),
		UnreleasableByteBuf:readUnsignedByte() to listOf(ByteBuf:readUnsignedByte()),
		UnreleasableByteBuf:readShort() to listOf(ByteBuf:readShort()),
		UnreleasableByteBuf:readUnsignedShort() to listOf(ByteBuf:readUnsignedShort()),
		UnreleasableByteBuf:readMedium() to listOf(ByteBuf:readMedium()),
		UnreleasableByteBuf:readUnsignedMedium() to listOf(ByteBuf:readUnsignedMedium()),
		UnreleasableByteBuf:readInt() to listOf(ByteBuf:readInt()),
		UnreleasableByteBuf:readUnsignedInt() to listOf(ByteBuf:readUnsignedInt()),
		UnreleasableByteBuf:readLong() to listOf(ByteBuf:readLong()),
		UnreleasableByteBuf:readChar() to listOf(ByteBuf:readChar()),
		UnreleasableByteBuf:readFloat() to listOf(ByteBuf:readFloat()),
		UnreleasableByteBuf:readDouble() to listOf(ByteBuf:readDouble()),
		UnreleasableByteBuf:readBytes(int) to listOf(ByteBuf:readBytes(int)),
		UnreleasableByteBuf:readSlice(int) to listOf(ByteBuf:readSlice(int), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:readBytes(ByteBuf) to listOf(ByteBuf:readBytes(ByteBuf)),
		UnreleasableByteBuf:readBytes(ByteBuf-int) to listOf(ByteBuf:readBytes(ByteBuf-int)),
		UnreleasableByteBuf:readBytes(ByteBuf-int-int) to listOf(ByteBuf:readBytes(ByteBuf-int-int)),
		UnreleasableByteBuf:readBytes(byte[]) to listOf(ByteBuf:readBytes(byte[])),
		UnreleasableByteBuf:readBytes(byte[]-int-int) to listOf(ByteBuf:readBytes(byte[]-int-int)),
		UnreleasableByteBuf:readBytes(ByteBuffer) to listOf(ByteBuf:readBytes(ByteBuffer)),
		UnreleasableByteBuf:readBytes(OutputStream-int) to listOf(ByteBuf:readBytes(OutputStream-int)),
		UnreleasableByteBuf:readBytes(GatheringByteChannel-int) to listOf(ByteBuf:readBytes(GatheringByteChannel-int)),
		UnreleasableByteBuf:skipBytes(int) to listOf(ByteBuf:skipBytes(int)),
		UnreleasableByteBuf:writeBoolean(boolean) to listOf(ByteBuf:writeBoolean(boolean)),
		UnreleasableByteBuf:writeByte(int) to listOf(ByteBuf:writeByte(int)),
		UnreleasableByteBuf:writeShort(int) to listOf(ByteBuf:writeShort(int)),
		UnreleasableByteBuf:writeMedium(int) to listOf(ByteBuf:writeMedium(int)),
		UnreleasableByteBuf:writeInt(int) to listOf(ByteBuf:writeInt(int)),
		UnreleasableByteBuf:writeLong(long) to listOf(ByteBuf:writeLong(long)),
		UnreleasableByteBuf:writeChar(int) to listOf(ByteBuf:writeChar(int)),
		UnreleasableByteBuf:writeFloat(float) to listOf(ByteBuf:writeFloat(float)),
		UnreleasableByteBuf:writeDouble(double) to listOf(ByteBuf:writeDouble(double)),
		UnreleasableByteBuf:writeBytes(ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf)),
		UnreleasableByteBuf:writeBytes(ByteBuf-int) to listOf(ByteBuf:writeBytes(ByteBuf-int)),
		UnreleasableByteBuf:writeBytes(ByteBuf-int-int) to listOf(ByteBuf:writeBytes(ByteBuf-int-int)),
		UnreleasableByteBuf:writeBytes(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		UnreleasableByteBuf:writeBytes(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		UnreleasableByteBuf:writeBytes(ByteBuffer) to listOf(ByteBuf:writeBytes(ByteBuffer)),
		UnreleasableByteBuf:writeBytes(InputStream-int) to listOf(ByteBuf:writeBytes(InputStream-int)),
		UnreleasableByteBuf:writeBytes(ScatteringByteChannel-int) to listOf(ByteBuf:writeBytes(ScatteringByteChannel-int)),
		UnreleasableByteBuf:writeZero(int) to listOf(ByteBuf:writeZero(int)),
		UnreleasableByteBuf:indexOf(int-int-byte) to listOf(ByteBuf:indexOf(int-int-byte)),
		UnreleasableByteBuf:bytesBefore(byte) to listOf(ByteBuf:bytesBefore(byte)),
		UnreleasableByteBuf:bytesBefore(int-byte) to listOf(ByteBuf:bytesBefore(int-byte)),
		UnreleasableByteBuf:bytesBefore(int-int-byte) to listOf(ByteBuf:bytesBefore(int-int-byte)),
		UnreleasableByteBuf:forEachByte(ByteBufProcessor) to listOf(ByteBuf:forEachByte(ByteBufProcessor)),
		UnreleasableByteBuf:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		UnreleasableByteBuf:forEachByteDesc(ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(ByteBufProcessor)),
		UnreleasableByteBuf:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		UnreleasableByteBuf:copy() to listOf(ByteBuf:copy()),
		UnreleasableByteBuf:copy(int-int) to listOf(ByteBuf:copy(int-int)),
		UnreleasableByteBuf:slice() to listOf(ByteBuf:slice(), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:slice(int-int) to listOf(ByteBuf:slice(int-int), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:duplicate() to listOf(ByteBuf:duplicate(), UnreleasableByteBuf:<init>(ByteBuf)),
		UnreleasableByteBuf:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		UnreleasableByteBuf:nioBuffer() to listOf(ByteBuf:nioBuffer()),
		UnreleasableByteBuf:nioBuffer(int-int) to listOf(ByteBuf:nioBuffer(int-int)),
		UnreleasableByteBuf:nioBuffers() to listOf(ByteBuf:nioBuffers()),
		UnreleasableByteBuf:nioBuffers(int-int) to listOf(ByteBuf:nioBuffers(int-int)),
		UnreleasableByteBuf:internalNioBuffer(int-int) to listOf(ByteBuf:internalNioBuffer(int-int)),
		UnreleasableByteBuf:hasArray() to listOf(ByteBuf:hasArray()),
		UnreleasableByteBuf:array() to listOf(ByteBuf:array()),
		UnreleasableByteBuf:arrayOffset() to listOf(ByteBuf:arrayOffset()),
		UnreleasableByteBuf:toString(Charset) to listOf(ByteBuf:toString(Charset)),
		UnreleasableByteBuf:toString(int-int-Charset) to listOf(ByteBuf:toString(int-int-Charset)),
		UnreleasableByteBuf:hashCode() to listOf(ByteBuf:hashCode()),
		UnreleasableByteBuf:equals(Object) to listOf(ByteBuf:equals(Object)),
		UnreleasableByteBuf:compareTo(ByteBuf) to listOf(ByteBuf:compareTo(ByteBuf)),
		UnreleasableByteBuf:toString() to listOf(StringUtil:simpleClassName(Object), ByteBuf:toString()),
		UnreleasableByteBuf:isReadable(int) to listOf(ByteBuf:isReadable(int)),
		UnreleasableByteBuf:isWritable(int) to listOf(ByteBuf:isWritable(int)),
		UnreleasableByteBuf:refCnt() to listOf(ByteBuf:refCnt()),
		UnreleasableByteBuf:retain(int) to listOf(UnreleasableByteBuf:retain(int)),
		UnreleasableByteBuf:retain() to listOf(UnreleasableByteBuf:retain()),
		UnreleasableByteBuf:compareTo(Object) to listOf(UnreleasableByteBuf:compareTo(ByteBuf)),
		AbstractChannel$AbstractUnsafe$1:run() to listOf(AbstractChannel$AbstractUnsafe:access$100(AbstractChannel$AbstractUnsafe-ChannelPromise)),
		AbstractChannel$AbstractUnsafe$2:run() to listOf(AbstractChannel:access$400(AbstractChannel), DefaultChannelPipeline:fireChannelInactive()),
		AbstractChannel$AbstractUnsafe$3:run() to listOf(AbstractChannel:access$400(AbstractChannel), DefaultChannelPipeline:fireChannelInactive()),
		AbstractChannel$AbstractUnsafe$4:run() to listOf(AbstractChannel:access$400(AbstractChannel), DefaultChannelPipeline:fireChannelUnregistered()),
		AbstractChannel$AbstractUnsafe$5:run() to listOf(AbstractChannel:access$400(AbstractChannel), DefaultChannelPipeline:fireExceptionCaught(Throwable)),
		AbstractChannel$AbstractUnsafe:localAddress() to listOf(AbstractChannel:localAddress0()),
		AbstractChannel$AbstractUnsafe:remoteAddress() to listOf(AbstractChannel:remoteAddress0()),
		AbstractChannel$AbstractUnsafe:register(EventLoop-ChannelPromise) to listOf(AbstractChannel:isRegistered(), ChannelPromise:setFailure(Throwable), AbstractChannel:isCompatible(EventLoop), ChannelPromise:setFailure(Throwable), AbstractChannel:access$002(AbstractChannel-EventLoop), EventLoop:inEventLoop(), AbstractChannel$AbstractUnsafe:register0(ChannelPromise), AbstractChannel$AbstractUnsafe$1:<init>(AbstractChannel$AbstractUnsafe-ChannelPromise), EventLoop:execute(Runnable), AbstractChannel:access$200(), InternalLogger:warn(String-Object-Object), AbstractChannel$AbstractUnsafe:closeForcibly(), ChannelPromise:setFailure(Throwable)),
		AbstractChannel$AbstractUnsafe:register0(ChannelPromise) to listOf(AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise), AbstractChannel:doRegister(), AbstractChannel:access$302(AbstractChannel-boolean), ChannelPromise:setSuccess(), AbstractChannel:access$400(AbstractChannel), DefaultChannelPipeline:fireChannelRegistered(), AbstractChannel:isActive(), AbstractChannel:access$400(AbstractChannel), DefaultChannelPipeline:fireChannelActive(), AbstractChannel$AbstractUnsafe:closeForcibly(), ChannelPromise:tryFailure(Throwable), AbstractChannel:access$200(), InternalLogger:warn(String-Throwable), AbstractChannel:access$500(AbstractChannel), AbstractChannel$CloseFuture:setClosed()),
		AbstractChannel$AbstractUnsafe:bind(SocketAddress-ChannelPromise) to listOf(AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise), AbstractChannel:isActive(), PlatformDependent:isWindows(), PlatformDependent:isRoot(), AbstractChannel:config(), ChannelConfig:getOption(ChannelOption), AbstractChannel:access$200(), InternalLogger:warn(String), AbstractChannel:doBind(SocketAddress), ChannelPromise:setSuccess(), AbstractChannel:isActive(), AbstractChannel:access$400(AbstractChannel), DefaultChannelPipeline:fireChannelActive(), ChannelPromise:setFailure(Throwable), AbstractChannel$AbstractUnsafe:closeIfClosed()),
		AbstractChannel$AbstractUnsafe:disconnect(ChannelPromise) to listOf(AbstractChannel:isActive(), AbstractChannel:doDisconnect(), ChannelPromise:setSuccess(), AbstractChannel:isActive(), AbstractChannel$AbstractUnsafe$2:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), ChannelPromise:setFailure(Throwable), AbstractChannel$AbstractUnsafe:closeIfClosed()),
		AbstractChannel$AbstractUnsafe:close(ChannelPromise) to listOf(AbstractChannel:isActive(), AbstractChannel:access$500(AbstractChannel), AbstractChannel$CloseFuture:setClosed(), AbstractChannel:doClose(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), AbstractChannel:access$600(AbstractChannel), AbstractChannel:access$602(AbstractChannel-ClosedChannelException), AbstractChannel:access$700(AbstractChannel), ChannelOutboundBuffer:next(), AbstractChannel:access$700(AbstractChannel), AbstractChannel:access$600(AbstractChannel), ChannelOutboundBuffer:fail(Throwable), AbstractChannel:isActive(), AbstractChannel$AbstractUnsafe$3:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:deregister(ChannelPromise), ChannelPromise:setSuccess()),
		AbstractChannel$AbstractUnsafe:closeForcibly() to listOf(AbstractChannel:doClose(), AbstractChannel:access$200(), InternalLogger:warn(String-Throwable)),
		AbstractChannel$AbstractUnsafe:deregister(ChannelPromise) to listOf(AbstractChannel:access$300(AbstractChannel), ChannelPromise:setSuccess(), AbstractChannel:doDeregister(), AbstractChannel:access$300(AbstractChannel), AbstractChannel:access$302(AbstractChannel-boolean), ChannelPromise:setSuccess(), AbstractChannel$AbstractUnsafe$4:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), ChannelPromise:setSuccess(), AbstractChannel:access$200(), InternalLogger:warn(String-Throwable), AbstractChannel:access$300(AbstractChannel), AbstractChannel:access$302(AbstractChannel-boolean), ChannelPromise:setSuccess(), AbstractChannel$AbstractUnsafe$4:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), ChannelPromise:setSuccess(), AbstractChannel:access$300(AbstractChannel), AbstractChannel:access$302(AbstractChannel-boolean), ChannelPromise:setSuccess(), AbstractChannel$AbstractUnsafe$4:<init>(AbstractChannel$AbstractUnsafe), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), ChannelPromise:setSuccess()),
		AbstractChannel$AbstractUnsafe:beginRead() to listOf(AbstractChannel:isActive(), AbstractChannel:doBeginRead(), AbstractChannel$AbstractUnsafe$5:<init>(AbstractChannel$AbstractUnsafe-Exception), AbstractChannel$AbstractUnsafe:invokeLater(Runnable), AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:close(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:write(Object-ChannelPromise) to listOf(AbstractChannel:access$700(AbstractChannel), ChannelOutboundBuffer:addMessage(Object-ChannelPromise)),
		AbstractChannel$AbstractUnsafe:flush() to listOf(AbstractChannel:access$700(AbstractChannel), ChannelOutboundBuffer:addFlush(), AbstractChannel$AbstractUnsafe:flush0()),
		AbstractChannel$AbstractUnsafe:flush0() to listOf(AbstractChannel:access$800(AbstractChannel), AbstractChannel:access$802(AbstractChannel-boolean), AbstractChannel:access$700(AbstractChannel), AbstractChannel:isActive(), AbstractChannel:isOpen(), ChannelOutboundBuffer:fail(Throwable), ChannelOutboundBuffer:fail(Throwable), AbstractChannel:access$802(AbstractChannel-boolean), ChannelOutboundBuffer:next(), MessageList:size(), MessageList:messages(), MessageList:promises(), AbstractChannel:doWrite(Object[]-int-int), ChannelPromise:trySuccess(), MessageList:recycle(), ChannelOutboundBuffer:next(), AbstractChannel:access$802(AbstractChannel-boolean), ChannelOutboundBuffer:fail(Throwable), AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:close(ChannelPromise), AbstractChannel:access$802(AbstractChannel-boolean), AbstractChannel:access$802(AbstractChannel-boolean)),
		AbstractChannel$AbstractUnsafe:voidPromise() to listOf(AbstractChannel:access$900(AbstractChannel)),
		AbstractChannel$AbstractUnsafe:ensureOpen(ChannelPromise) to listOf(AbstractChannel:isOpen(), ChannelPromise:setFailure(Throwable)),
		AbstractChannel$AbstractUnsafe:closeIfClosed() to listOf(AbstractChannel:isOpen(), AbstractChannel$AbstractUnsafe:voidPromise(), AbstractChannel$AbstractUnsafe:close(ChannelPromise)),
		AbstractChannel$AbstractUnsafe:invokeLater(Runnable) to listOf(AbstractChannel:eventLoop(), EventLoop:execute(Runnable)),
		AbstractChannel$AbstractUnsafe:access$100(AbstractChannel$AbstractUnsafe-ChannelPromise) to listOf(AbstractChannel$AbstractUnsafe:register0(ChannelPromise)),
		AbstractChannel$CloseFuture:<init>(AbstractChannel-AbstractChannel) to listOf(DefaultChannelPromise:<init>(Channel)),
		AbstractChannel$CloseFuture:setFailure(Throwable) to listOf(AbstractChannel$CloseFuture:setFailure(Throwable)),
		AbstractChannel$CloseFuture:setClosed() to listOf(AbstractChannel:doPreClose(), AbstractChannel:access$200(), InternalLogger:warn(String-Throwable), DefaultChannelPromise:trySuccess()),
		AbstractChannel:<init>(Channel) to listOf(DefaultAttributeMap:<init>(), ThreadLocalRandom:current(), ThreadLocalRandom:nextLong(), ChannelOutboundBuffer:<init>(AbstractChannel), SucceededChannelFuture:<init>(Channel-EventExecutor), VoidChannelPromise:<init>(Channel-boolean), VoidChannelPromise:<init>(Channel-boolean), AbstractChannel$CloseFuture:<init>(AbstractChannel-AbstractChannel), AbstractChannel:newUnsafe(), DefaultChannelPipeline:<init>(Channel)),
		AbstractChannel:isWritable() to listOf(ChannelOutboundBuffer:getWritable()),
		AbstractChannel:alloc() to listOf(AbstractChannel:config(), ChannelConfig:getAllocator()),
		AbstractChannel:localAddress() to listOf(AbstractChannel:unsafe(), Channel$Unsafe:localAddress()),
		AbstractChannel:remoteAddress() to listOf(AbstractChannel:unsafe(), Channel$Unsafe:remoteAddress()),
		AbstractChannel:bind(SocketAddress) to listOf(DefaultChannelPipeline:bind(SocketAddress)),
		AbstractChannel:connect(SocketAddress) to listOf(DefaultChannelPipeline:connect(SocketAddress)),
		AbstractChannel:connect(SocketAddress-SocketAddress) to listOf(DefaultChannelPipeline:connect(SocketAddress-SocketAddress)),
		AbstractChannel:disconnect() to listOf(DefaultChannelPipeline:disconnect()),
		AbstractChannel:close() to listOf(DefaultChannelPipeline:close()),
		AbstractChannel:deregister() to listOf(DefaultChannelPipeline:deregister()),
		AbstractChannel:flush() to listOf(DefaultChannelPipeline:flush(), AbstractChannel:flush()),
		AbstractChannel:bind(SocketAddress-ChannelPromise) to listOf(DefaultChannelPipeline:bind(SocketAddress-ChannelPromise)),
		AbstractChannel:connect(SocketAddress-ChannelPromise) to listOf(DefaultChannelPipeline:connect(SocketAddress-ChannelPromise)),
		AbstractChannel:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(DefaultChannelPipeline:connect(SocketAddress-SocketAddress-ChannelPromise)),
		AbstractChannel:disconnect(ChannelPromise) to listOf(DefaultChannelPipeline:disconnect(ChannelPromise)),
		AbstractChannel:close(ChannelPromise) to listOf(DefaultChannelPipeline:close(ChannelPromise)),
		AbstractChannel:deregister(ChannelPromise) to listOf(DefaultChannelPipeline:deregister(ChannelPromise)),
		AbstractChannel:read() to listOf(DefaultChannelPipeline:read(), AbstractChannel:read()),
		AbstractChannel:write(Object) to listOf(DefaultChannelPipeline:write(Object)),
		AbstractChannel:write(Object-ChannelPromise) to listOf(DefaultChannelPipeline:write(Object-ChannelPromise)),
		AbstractChannel:writeAndFlush(Object) to listOf(DefaultChannelPipeline:writeAndFlush(Object)),
		AbstractChannel:writeAndFlush(Object-ChannelPromise) to listOf(DefaultChannelPipeline:writeAndFlush(Object-ChannelPromise)),
		AbstractChannel:newPromise() to listOf(DefaultChannelPromise:<init>(Channel)),
		AbstractChannel:newProgressivePromise() to listOf(DefaultChannelProgressivePromise:<init>(Channel)),
		AbstractChannel:newFailedFuture(Throwable) to listOf(FailedChannelFuture:<init>(Channel-EventExecutor-Throwable)),
		AbstractChannel:toString() to listOf(AbstractChannel:isActive(), AbstractChannel:remoteAddress(), AbstractChannel:localAddress()),
		AbstractChannel:checkEOF(FileRegion) to listOf(FileRegion:transfered(), FileRegion:count(), FileRegion:count(), FileRegion:transfered()),
		AbstractChannel:calculateMessageSize(Object) to listOf(ByteBuf:readableBytes(), ByteBufHolder:content(), ByteBuf:readableBytes()),
		AbstractChannel:compareTo(Object) to listOf(AbstractChannel:compareTo(Channel)),
		AbstractChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		AbstractServerChannel$DefaultServerUnsafe:write(Object-ChannelPromise) to listOf(ReferenceCountUtil:release(Object), AbstractServerChannel$DefaultServerUnsafe:reject(ChannelPromise)),
		AbstractServerChannel$DefaultServerUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(AbstractServerChannel$DefaultServerUnsafe:reject(ChannelPromise)),
		AbstractServerChannel$DefaultServerUnsafe:reject(ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel-AbstractServerChannel$1) to listOf(AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel)),
		AbstractServerChannel:<init>() to listOf(AbstractChannel:<init>(Channel)),
		AbstractServerChannel:newUnsafe() to listOf(AbstractServerChannel$DefaultServerUnsafe:<init>(AbstractServerChannel-AbstractServerChannel$1)),
		AbstractServerChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		AdaptiveRecvByteBufAllocator$HandleImpl:<init>(int-int-int) to listOf(AdaptiveRecvByteBufAllocator:access$000(int), AdaptiveRecvByteBufAllocator:access$100()),
		AdaptiveRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator) to listOf(ByteBufAllocator:ioBuffer(int)),
		AdaptiveRecvByteBufAllocator$HandleImpl:record(int) to listOf(AdaptiveRecvByteBufAllocator:access$100(), AdaptiveRecvByteBufAllocator:access$100(), AdaptiveRecvByteBufAllocator:access$100()),
		AdaptiveRecvByteBufAllocator:<init>() to listOf(AdaptiveRecvByteBufAllocator:<init>(int-int-int)),
		AdaptiveRecvByteBufAllocator:<init>(int-int-int) to listOf(AdaptiveRecvByteBufAllocator:getSizeTableIndex(int), AdaptiveRecvByteBufAllocator:getSizeTableIndex(int)),
		AdaptiveRecvByteBufAllocator:newHandle() to listOf(AdaptiveRecvByteBufAllocator$HandleImpl:<init>(int-int-int)),
		AdaptiveRecvByteBufAllocator:access$000(int) to listOf(AdaptiveRecvByteBufAllocator:getSizeTableIndex(int)),
		AdaptiveRecvByteBufAllocator:<clinit>() to listOf(AdaptiveRecvByteBufAllocator:<init>()),
		ChannelDuplexHandler:<init>() to listOf(ChannelInboundHandlerAdapter:<init>()),
		ChannelDuplexHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		ChannelDuplexHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		ChannelDuplexHandler:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:disconnect(ChannelPromise)),
		ChannelDuplexHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		ChannelDuplexHandler:deregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:deregister(ChannelPromise)),
		ChannelDuplexHandler:read(ChannelHandlerContext) to listOf(ChannelHandlerContext:read()),
		ChannelDuplexHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerContext:write(Object-ChannelPromise)),
		ChannelDuplexHandler:flush(ChannelHandlerContext) to listOf(ChannelHandlerContext:flush()),
		ChannelFlushPromiseNotifier:<init>() to listOf(ChannelFlushPromiseNotifier:<init>(boolean)),
		ChannelFlushPromiseNotifier:add(ChannelPromise-int) to listOf(ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long), ChannelFlushPromiseNotifier$DefaultFlushCheckpoint:<init>(long-ChannelPromise)),
		ChannelFlushPromiseNotifier:notifyFlushFutures() to listOf(ChannelFlushPromiseNotifier:notifyFlushFutures0(Throwable)),
		ChannelFlushPromiseNotifier:notifyFlushFutures(Throwable) to listOf(ChannelFlushPromiseNotifier:notifyFlushFutures(), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:tryFailure(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:setFailure(Throwable)),
		ChannelFlushPromiseNotifier:notifyFlushFutures(Throwable-Throwable) to listOf(ChannelFlushPromiseNotifier:notifyFlushFutures0(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:tryFailure(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:setFailure(Throwable)),
		ChannelFlushPromiseNotifier:notifyFlushFutures0(Throwable) to listOf(ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:trySuccess(), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:setSuccess(), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:tryFailure(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:promise(), ChannelPromise:setFailure(Throwable), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(), ChannelFlushPromiseNotifier$FlushCheckpoint:flushCheckpoint(long)),
		ChannelFutureListener$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:channel(), Channel:close()),
		ChannelFutureListener$1:operationComplete(Future) to listOf(ChannelFutureListener$1:operationComplete(ChannelFuture)),
		ChannelFutureListener$2:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:close()),
		ChannelFutureListener$2:operationComplete(Future) to listOf(ChannelFutureListener$2:operationComplete(ChannelFuture)),
		ChannelFutureListener$3:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:pipeline(), ChannelFuture:cause(), ChannelPipeline:fireExceptionCaught(Throwable)),
		ChannelFutureListener$3:operationComplete(Future) to listOf(ChannelFutureListener$3:operationComplete(ChannelFuture)),
		ChannelFutureListener:<clinit>() to listOf(ChannelFutureListener$1:<init>(), ChannelFutureListener$2:<init>(), ChannelFutureListener$3:<init>()),
		ChannelHandlerAdapter:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable)),
		ChannelInboundHandlerAdapter:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		ChannelInboundHandlerAdapter:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelRegistered()),
		ChannelInboundHandlerAdapter:channelUnregistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelUnregistered()),
		ChannelInboundHandlerAdapter:channelActive(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelActive()),
		ChannelInboundHandlerAdapter:channelInactive(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelInactive()),
		ChannelInboundHandlerAdapter:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		ChannelInboundHandlerAdapter:channelReadComplete(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelReadComplete()),
		ChannelInboundHandlerAdapter:userEventTriggered(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireUserEventTriggered(Object)),
		ChannelInboundHandlerAdapter:channelWritabilityChanged(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireChannelWritabilityChanged()),
		ChannelInitializer:<init>() to listOf(ChannelInboundHandlerAdapter:<init>()),
		ChannelInitializer:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), ChannelInitializer:initChannel(Channel), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:fireChannelRegistered(), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:close(), ChannelHandlerContext:channel(), InternalLogger:warn(String-Throwable), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:close(), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:close()),
		ChannelInitializer:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ChannelOption:<init>(String) to listOf(UniqueName:<init>(ConcurrentMap-String-Object[])),
		ChannelOption:<clinit>() to listOf(PlatformDependent:newConcurrentHashMap(), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String), ChannelOption:<init>(String)),
		ChannelOutboundBuffer:<init>(AbstractChannel) to listOf(ChannelOutboundBuffer:<init>(AbstractChannel-int)),
		ChannelOutboundBuffer:addMessage(Object-ChannelPromise) to listOf(MessageList:newInstance(), MessageList:add(Object-ChannelPromise), AbstractChannel:calculateMessageSize(Object), ChannelOutboundBuffer:incrementPendingOutboundBytes(int)),
		ChannelOutboundBuffer:addFlush() to listOf(ChannelOutboundBuffer:doubleCapacity()),
		ChannelOutboundBuffer:incrementPendingOutboundBytes(int) to listOf(AbstractChannel:config(), ChannelConfig:getWriteBufferHighWaterMark(), AbstractChannel:pipeline(), ChannelPipeline:fireChannelWritabilityChanged()),
		ChannelOutboundBuffer:decrementPendingOutboundBytes(long) to listOf(AbstractChannel:config(), ChannelConfig:getWriteBufferLowWaterMark(), AbstractChannel:pipeline(), ChannelPipeline:fireChannelWritabilityChanged()),
		ChannelOutboundBuffer:next() to listOf(ChannelOutboundBuffer:decrementPendingOutboundBytes(long)),
		ChannelOutboundBuffer:fail(Throwable) to listOf(ChannelOutboundBuffer:next(), MessageList:messages(), MessageList:promises(), MessageList:size(), ReferenceCountUtil:release(Object), ChannelPromise:tryFailure(Throwable), InternalLogger:warn(String-Object-Object), MessageList:recycle(), MessageList:recycle(), ChannelOutboundBuffer:next()),
		ChannelOutboundBuffer:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ChannelOutboundHandlerAdapter:<init>() to listOf(ChannelHandlerAdapter:<init>()),
		ChannelOutboundHandlerAdapter:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		ChannelOutboundHandlerAdapter:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		ChannelOutboundHandlerAdapter:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:disconnect(ChannelPromise)),
		ChannelOutboundHandlerAdapter:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		ChannelOutboundHandlerAdapter:deregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:deregister(ChannelPromise)),
		ChannelOutboundHandlerAdapter:read(ChannelHandlerContext) to listOf(ChannelHandlerContext:read()),
		ChannelOutboundHandlerAdapter:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelHandlerContext:write(Object-ChannelPromise)),
		ChannelOutboundHandlerAdapter:flush(ChannelHandlerContext) to listOf(ChannelHandlerContext:flush()),
		ChannelPipelineException:<init>() to listOf(ChannelException:<init>()),
		ChannelPipelineException:<init>(String-Throwable) to listOf(ChannelException:<init>(String-Throwable)),
		ChannelPipelineException:<init>(String) to listOf(ChannelException:<init>(String)),
		ChannelPipelineException:<init>(Throwable) to listOf(ChannelException:<init>(Throwable)),
		ChannelPromiseAggregator:add(ChannelPromise[]) to listOf(ChannelPromise:addListener(GenericFutureListener)),
		ChannelPromiseAggregator:operationComplete(ChannelFuture) to listOf(ChannelPromise:setSuccess(), ChannelFuture:isSuccess(), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable), ChannelPromise:setSuccess()),
		ChannelPromiseAggregator:operationComplete(Future) to listOf(ChannelPromiseAggregator:operationComplete(ChannelFuture)),
		ChannelPromiseNotifier:<init>(ChannelPromise[]) to listOf(ChannelPromise[]:clone()),
		ChannelPromiseNotifier:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelPromise:setSuccess(), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		ChannelPromiseNotifier:operationComplete(Future) to listOf(ChannelPromiseNotifier:operationComplete(ChannelFuture)),
		CombinedChannelDuplexHandler:<init>() to listOf(ChannelDuplexHandler:<init>()),
		CombinedChannelDuplexHandler:<init>(ChannelInboundHandler-ChannelOutboundHandler) to listOf(ChannelDuplexHandler:<init>(), CombinedChannelDuplexHandler:init(ChannelInboundHandler-ChannelOutboundHandler)),
		CombinedChannelDuplexHandler:init(ChannelInboundHandler-ChannelOutboundHandler) to listOf(CombinedChannelDuplexHandler:validate(ChannelInboundHandler-ChannelOutboundHandler)),
		CombinedChannelDuplexHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelInboundHandler:handlerAdded(ChannelHandlerContext), ChannelOutboundHandler:handlerAdded(ChannelHandlerContext), ChannelOutboundHandler:handlerAdded(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:handlerRemoved(ChannelHandlerContext) to listOf(ChannelInboundHandler:handlerRemoved(ChannelHandlerContext), ChannelOutboundHandler:handlerRemoved(ChannelHandlerContext), ChannelOutboundHandler:handlerRemoved(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:channelRegistered(ChannelHandlerContext) to listOf(ChannelInboundHandler:channelRegistered(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:channelUnregistered(ChannelHandlerContext) to listOf(ChannelInboundHandler:channelUnregistered(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:channelActive(ChannelHandlerContext) to listOf(ChannelInboundHandler:channelActive(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:channelInactive(ChannelHandlerContext) to listOf(ChannelInboundHandler:channelInactive(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelInboundHandler:exceptionCaught(ChannelHandlerContext-Throwable)),
		CombinedChannelDuplexHandler:userEventTriggered(ChannelHandlerContext-Object) to listOf(ChannelInboundHandler:userEventTriggered(ChannelHandlerContext-Object)),
		CombinedChannelDuplexHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelInboundHandler:channelRead(ChannelHandlerContext-Object)),
		CombinedChannelDuplexHandler:channelReadComplete(ChannelHandlerContext) to listOf(ChannelInboundHandler:channelReadComplete(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelOutboundHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise)),
		CombinedChannelDuplexHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelOutboundHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise)),
		CombinedChannelDuplexHandler:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(ChannelOutboundHandler:disconnect(ChannelHandlerContext-ChannelPromise)),
		CombinedChannelDuplexHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelOutboundHandler:close(ChannelHandlerContext-ChannelPromise)),
		CombinedChannelDuplexHandler:deregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelOutboundHandler:deregister(ChannelHandlerContext-ChannelPromise)),
		CombinedChannelDuplexHandler:read(ChannelHandlerContext) to listOf(ChannelOutboundHandler:read(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChannelOutboundHandler:write(ChannelHandlerContext-Object-ChannelPromise)),
		CombinedChannelDuplexHandler:flush(ChannelHandlerContext) to listOf(ChannelOutboundHandler:flush(ChannelHandlerContext)),
		CombinedChannelDuplexHandler:channelWritabilityChanged(ChannelHandlerContext) to listOf(ChannelInboundHandler:channelWritabilityChanged(ChannelHandlerContext)),
		CompleteChannelFuture:<init>(Channel-EventExecutor) to listOf(CompleteFuture:<init>(EventExecutor)),
		CompleteChannelFuture:executor() to listOf(CompleteFuture:executor(), CompleteChannelFuture:channel(), Channel:eventLoop()),
		CompleteChannelFuture:addListener(GenericFutureListener) to listOf(CompleteFuture:addListener(GenericFutureListener), CompleteChannelFuture:addListener(GenericFutureListener)),
		CompleteChannelFuture:addListeners(GenericFutureListener[]) to listOf(CompleteFuture:addListeners(GenericFutureListener[]), CompleteChannelFuture:addListeners(GenericFutureListener[])),
		CompleteChannelFuture:removeListener(GenericFutureListener) to listOf(CompleteFuture:removeListener(GenericFutureListener), CompleteChannelFuture:removeListener(GenericFutureListener)),
		CompleteChannelFuture:removeListeners(GenericFutureListener[]) to listOf(CompleteFuture:removeListeners(GenericFutureListener[]), CompleteChannelFuture:removeListeners(GenericFutureListener[])),
		CompleteChannelFuture:awaitUninterruptibly() to listOf(CompleteChannelFuture:awaitUninterruptibly()),
		CompleteChannelFuture:syncUninterruptibly() to listOf(CompleteChannelFuture:syncUninterruptibly()),
		CompleteChannelFuture:sync() to listOf(CompleteChannelFuture:sync()),
		CompleteChannelFuture:await() to listOf(CompleteChannelFuture:await()),
		CompleteChannelFuture:getNow() to listOf(CompleteChannelFuture:getNow()),
		DefaultAddressedEnvelope:<init>(Object-SocketAddress) to listOf(DefaultAddressedEnvelope:<init>(Object-SocketAddress-SocketAddress)),
		DefaultAddressedEnvelope:refCnt() to listOf(ReferenceCounted:refCnt()),
		DefaultAddressedEnvelope:retain() to listOf(ReferenceCountUtil:retain(Object), DefaultAddressedEnvelope:retain()),
		DefaultAddressedEnvelope:retain(int) to listOf(ReferenceCountUtil:retain(Object-int), DefaultAddressedEnvelope:retain(int)),
		DefaultAddressedEnvelope:release() to listOf(ReferenceCountUtil:release(Object)),
		DefaultAddressedEnvelope:release(int) to listOf(ReferenceCountUtil:release(Object-int)),
		DefaultAddressedEnvelope:toString() to listOf(StringUtil:simpleClassName(Object), StringUtil:simpleClassName(Object)),
		DefaultChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultChannelConfig:getOptions(Map-ChannelOption[]) to listOf(DefaultChannelConfig:getOption(ChannelOption)),
		DefaultChannelConfig:setOptions(Map) to listOf(DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultChannelConfig:getOption(ChannelOption) to listOf(DefaultChannelConfig:getConnectTimeoutMillis(), DefaultChannelConfig:getMaxMessagesPerRead(), DefaultChannelConfig:getWriteSpinCount(), DefaultChannelConfig:getAllocator(), DefaultChannelConfig:getRecvByteBufAllocator(), DefaultChannelConfig:isAutoRead()),
		DefaultChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultChannelConfig:validate(ChannelOption-Object), DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultChannelConfig:setWriteSpinCount(int), DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultChannelConfig:setAutoRead(boolean)),
		DefaultChannelConfig:validate(ChannelOption-Object) to listOf(ChannelOption:validate(Object)),
		DefaultChannelConfig:setAutoRead(boolean) to listOf(Channel:read()),
		DefaultChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:getWriteBufferLowWaterMark(), DefaultChannelConfig:getWriteBufferLowWaterMark()),
		DefaultChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:getWriteBufferHighWaterMark(), DefaultChannelConfig:getWriteBufferHighWaterMark()),
		DefaultChannelHandlerContext$1:run() to listOf(DefaultChannelHandlerContext:access$000(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$10:run() to listOf(DefaultChannelHandlerContext:access$900(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$11:run() to listOf(DefaultChannelHandlerContext:access$1000(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$12:run() to listOf(DefaultChannelHandlerContext:access$1100(DefaultChannelHandlerContext-SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext$13:run() to listOf(DefaultChannelHandlerContext:access$1200(DefaultChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext$14:run() to listOf(DefaultChannelHandlerContext:access$1300(DefaultChannelHandlerContext-ChannelPromise)),
		DefaultChannelHandlerContext$15:run() to listOf(DefaultChannelHandlerContext:access$1400(DefaultChannelHandlerContext-ChannelPromise)),
		DefaultChannelHandlerContext$16:run() to listOf(DefaultChannelHandlerContext:access$1500(DefaultChannelHandlerContext-ChannelPromise)),
		DefaultChannelHandlerContext$17:run() to listOf(DefaultChannelHandlerContext:access$1600(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$18:run() to listOf(DefaultChannelHandlerContext:access$1700(DefaultChannelHandlerContext-Object-ChannelPromise)),
		DefaultChannelHandlerContext$19:run() to listOf(DefaultChannelHandlerContext:access$1800(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$2:run() to listOf(DefaultChannelHandlerContext:access$100(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$3:run() to listOf(DefaultChannelHandlerContext:access$200(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$4:run() to listOf(DefaultChannelHandlerContext:access$300(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$5:run() to listOf(DefaultChannelHandlerContext:access$400(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$6:run() to listOf(DefaultChannelHandlerContext:access$500(DefaultChannelHandlerContext)),
		DefaultChannelHandlerContext$7:run() to listOf(DefaultChannelHandlerContext:access$600(DefaultChannelHandlerContext-Throwable)),
		DefaultChannelHandlerContext$8:run() to listOf(DefaultChannelHandlerContext:access$700(DefaultChannelHandlerContext-Object)),
		DefaultChannelHandlerContext$9:run() to listOf(DefaultChannelHandlerContext:access$800(DefaultChannelHandlerContext-Object)),
		DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler) to listOf(DefaultAttributeMap:<init>(), EventExecutorGroup:next()),
		DefaultChannelHandlerContext:freeInbound() to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:freeInbound0(), DefaultChannelHandlerContext$1:<init>(DefaultChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:freeInbound0() to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:freeInbound(), DefaultChannelHandlerContext:teardown()),
		DefaultChannelHandlerContext:teardownAll() to listOf(DefaultChannelHandlerContext:teardown()),
		DefaultChannelHandlerContext:teardown() to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:teardown0(), DefaultChannelHandlerContext$2:<init>(DefaultChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:teardown0() to listOf(DefaultChannelPipeline:remove0(DefaultChannelHandlerContext), DefaultChannelHandlerContext:teardown()),
		DefaultChannelHandlerContext:alloc() to listOf(DefaultChannelHandlerContext:channel(), Channel:config(), ChannelConfig:getAllocator()),
		DefaultChannelHandlerContext:executor() to listOf(DefaultChannelHandlerContext:channel(), Channel:eventLoop()),
		DefaultChannelHandlerContext:fireChannelRegistered() to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeChannelRegistered(), DefaultChannelHandlerContext$3:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireChannelRegistered()),
		DefaultChannelHandlerContext:invokeChannelRegistered() to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:channelRegistered(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:fireChannelUnregistered() to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeChannelUnregistered(), DefaultChannelHandlerContext$4:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireChannelUnregistered()),
		DefaultChannelHandlerContext:invokeChannelUnregistered() to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:channelUnregistered(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:fireChannelActive() to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeChannelActive(), DefaultChannelHandlerContext$5:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireChannelActive()),
		DefaultChannelHandlerContext:invokeChannelActive() to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:channelActive(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:fireChannelInactive() to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeChannelInactive(), DefaultChannelHandlerContext$6:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireChannelInactive()),
		DefaultChannelHandlerContext:invokeChannelInactive() to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:channelInactive(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:fireExceptionCaught(Throwable) to listOf(DefaultChannelHandlerContext:invokeExceptionCaught(Throwable), DefaultChannelHandlerContext:fireExceptionCaught(Throwable)),
		DefaultChannelHandlerContext:invokeExceptionCaught(Throwable) to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeExceptionCaught0(Throwable), DefaultChannelHandlerContext$7:<init>(DefaultChannelHandlerContext-Throwable), EventExecutor:execute(Runnable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		DefaultChannelHandlerContext:invokeExceptionCaught0(Throwable) to listOf(DefaultChannelHandlerContext:handler(), ChannelHandler:exceptionCaught(ChannelHandlerContext-Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		DefaultChannelHandlerContext:fireUserEventTriggered(Object) to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeUserEventTriggered(Object), DefaultChannelHandlerContext$8:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext-Object), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireUserEventTriggered(Object)),
		DefaultChannelHandlerContext:invokeUserEventTriggered(Object) to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:userEventTriggered(ChannelHandlerContext-Object), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:fireChannelRead(Object) to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeChannelRead(Object), DefaultChannelHandlerContext$9:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext-Object), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireChannelRead(Object)),
		DefaultChannelHandlerContext:invokeChannelRead(Object) to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:channelRead(ChannelHandlerContext-Object), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:fireChannelReadComplete() to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeChannelReadComplete(), DefaultChannelHandlerContext$10:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireChannelReadComplete()),
		DefaultChannelHandlerContext:invokeChannelReadComplete() to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:channelReadComplete(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:fireChannelWritabilityChanged() to listOf(DefaultChannelHandlerContext:findContextInbound(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeChannelWritabilityChanged(), DefaultChannelHandlerContext$11:<init>(DefaultChannelHandlerContext-DefaultChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelHandlerContext:fireChannelWritabilityChanged()),
		DefaultChannelHandlerContext:invokeChannelWritabilityChanged() to listOf(DefaultChannelHandlerContext:handler(), ChannelInboundHandler:channelWritabilityChanged(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:bind(SocketAddress) to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:connect(SocketAddress) to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:connect(SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress) to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:disconnect() to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:disconnect(ChannelPromise)),
		DefaultChannelHandlerContext:close() to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:close(ChannelPromise)),
		DefaultChannelHandlerContext:deregister() to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:deregister(ChannelPromise)),
		DefaultChannelHandlerContext:bind(SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean), DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeBind(SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:invokeBind(SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeBind0(SocketAddress-ChannelPromise), DefaultChannelHandlerContext$12:<init>(DefaultChannelHandlerContext-SocketAddress-ChannelPromise), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeBind0(SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise), DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		DefaultChannelHandlerContext:connect(SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean), DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeConnect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:invokeConnect(SocketAddress-SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeConnect0(SocketAddress-SocketAddress-ChannelPromise), DefaultChannelHandlerContext$13:<init>(DefaultChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeConnect0(SocketAddress-SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise), DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		DefaultChannelHandlerContext:disconnect(ChannelPromise) to listOf(DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean), DefaultChannelHandlerContext:channel(), Channel:metadata(), ChannelMetadata:hasDisconnect(), DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeClose(ChannelPromise), DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeDisconnect(ChannelPromise)),
		DefaultChannelHandlerContext:invokeDisconnect(ChannelPromise) to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeDisconnect0(ChannelPromise), DefaultChannelHandlerContext$14:<init>(DefaultChannelHandlerContext-ChannelPromise), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeDisconnect0(ChannelPromise) to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:disconnect(ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		DefaultChannelHandlerContext:close(ChannelPromise) to listOf(DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean), DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeClose(ChannelPromise)),
		DefaultChannelHandlerContext:invokeClose(ChannelPromise) to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeClose0(ChannelPromise), DefaultChannelHandlerContext$15:<init>(DefaultChannelHandlerContext-ChannelPromise), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeClose0(ChannelPromise) to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:close(ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		DefaultChannelHandlerContext:deregister(ChannelPromise) to listOf(DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean), DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeDeregister(ChannelPromise)),
		DefaultChannelHandlerContext:invokeDeregister(ChannelPromise) to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeDeregister0(ChannelPromise), DefaultChannelHandlerContext$16:<init>(DefaultChannelHandlerContext-ChannelPromise), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeDeregister0(ChannelPromise) to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:deregister(ChannelHandlerContext-ChannelPromise), DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		DefaultChannelHandlerContext:read() to listOf(DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeRead(), DefaultChannelHandlerContext:read()),
		DefaultChannelHandlerContext:invokeRead() to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeRead0(), DefaultChannelHandlerContext$17:<init>(DefaultChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeRead0() to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:read(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:write(Object) to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:write(Object-ChannelPromise)),
		DefaultChannelHandlerContext:write(Object-ChannelPromise) to listOf(DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean), DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeWrite(Object-ChannelPromise)),
		DefaultChannelHandlerContext:invokeWrite(Object-ChannelPromise) to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeWrite0(Object-ChannelPromise), DefaultChannelHandlerContext$18:<init>(DefaultChannelHandlerContext-Object-ChannelPromise), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeWrite0(Object-ChannelPromise) to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:write(ChannelHandlerContext-Object-ChannelPromise), DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise)),
		DefaultChannelHandlerContext:flush() to listOf(DefaultChannelHandlerContext:findContextOutbound(), DefaultChannelHandlerContext:invokeFlush(), DefaultChannelHandlerContext:flush()),
		DefaultChannelHandlerContext:invokeFlush() to listOf(DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:invokeFlush0(), DefaultChannelHandlerContext$19:<init>(DefaultChannelHandlerContext), EventExecutor:execute(Runnable)),
		DefaultChannelHandlerContext:invokeFlush0() to listOf(DefaultChannelHandlerContext:handler(), ChannelOutboundHandler:flush(ChannelHandlerContext), DefaultChannelHandlerContext:notifyHandlerException(Throwable)),
		DefaultChannelHandlerContext:writeAndFlush(Object-ChannelPromise) to listOf(DefaultChannelHandlerContext:write(Object-ChannelPromise), DefaultChannelHandlerContext:flush()),
		DefaultChannelHandlerContext:writeAndFlush(Object) to listOf(DefaultChannelHandlerContext:newPromise(), DefaultChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		DefaultChannelHandlerContext:notifyOutboundHandlerException(Throwable-ChannelPromise) to listOf(ChannelPromise:tryFailure(Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Object-Object)),
		DefaultChannelHandlerContext:notifyHandlerException(Throwable) to listOf(DefaultChannelHandlerContext:inExceptionCaught(Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), DefaultChannelHandlerContext:invokeExceptionCaught(Throwable)),
		DefaultChannelHandlerContext:newPromise() to listOf(DefaultChannelHandlerContext:channel(), DefaultChannelHandlerContext:executor(), DefaultChannelPromise:<init>(Channel-EventExecutor)),
		DefaultChannelHandlerContext:newProgressivePromise() to listOf(DefaultChannelHandlerContext:channel(), DefaultChannelHandlerContext:executor(), DefaultChannelProgressivePromise:<init>(Channel-EventExecutor)),
		DefaultChannelHandlerContext:newSucceededFuture() to listOf(DefaultChannelHandlerContext:channel(), DefaultChannelHandlerContext:executor(), SucceededChannelFuture:<init>(Channel-EventExecutor)),
		DefaultChannelHandlerContext:newFailedFuture(Throwable) to listOf(DefaultChannelHandlerContext:channel(), DefaultChannelHandlerContext:executor(), FailedChannelFuture:<init>(Channel-EventExecutor-Throwable)),
		DefaultChannelHandlerContext:validatePromise(ChannelFuture-boolean) to listOf(ChannelFuture:channel(), DefaultChannelHandlerContext:channel(), ChannelFuture:channel(), DefaultChannelHandlerContext:channel(), ChannelFuture:isDone()),
		DefaultChannelHandlerContext:findContextInbound() to listOf(DefaultChannelHandlerContext:handler()),
		DefaultChannelHandlerContext:findContextOutbound() to listOf(DefaultChannelHandlerContext:handler()),
		DefaultChannelHandlerContext:voidPromise() to listOf(Channel:voidPromise()),
		DefaultChannelHandlerContext:access$000(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:freeInbound0()),
		DefaultChannelHandlerContext:access$100(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:teardown0()),
		DefaultChannelHandlerContext:access$200(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeChannelRegistered()),
		DefaultChannelHandlerContext:access$300(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeChannelUnregistered()),
		DefaultChannelHandlerContext:access$400(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeChannelActive()),
		DefaultChannelHandlerContext:access$500(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeChannelInactive()),
		DefaultChannelHandlerContext:access$600(DefaultChannelHandlerContext-Throwable) to listOf(DefaultChannelHandlerContext:invokeExceptionCaught0(Throwable)),
		DefaultChannelHandlerContext:access$700(DefaultChannelHandlerContext-Object) to listOf(DefaultChannelHandlerContext:invokeUserEventTriggered(Object)),
		DefaultChannelHandlerContext:access$800(DefaultChannelHandlerContext-Object) to listOf(DefaultChannelHandlerContext:invokeChannelRead(Object)),
		DefaultChannelHandlerContext:access$900(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeChannelReadComplete()),
		DefaultChannelHandlerContext:access$1000(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeChannelWritabilityChanged()),
		DefaultChannelHandlerContext:access$1100(DefaultChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:invokeBind0(SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:access$1200(DefaultChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:invokeConnect0(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelHandlerContext:access$1300(DefaultChannelHandlerContext-ChannelPromise) to listOf(DefaultChannelHandlerContext:invokeDisconnect0(ChannelPromise)),
		DefaultChannelHandlerContext:access$1400(DefaultChannelHandlerContext-ChannelPromise) to listOf(DefaultChannelHandlerContext:invokeClose0(ChannelPromise)),
		DefaultChannelHandlerContext:access$1500(DefaultChannelHandlerContext-ChannelPromise) to listOf(DefaultChannelHandlerContext:invokeDeregister0(ChannelPromise)),
		DefaultChannelHandlerContext:access$1600(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeRead0()),
		DefaultChannelHandlerContext:access$1700(DefaultChannelHandlerContext-Object-ChannelPromise) to listOf(DefaultChannelHandlerContext:invokeWrite0(Object-ChannelPromise)),
		DefaultChannelHandlerContext:access$1800(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:invokeFlush0()),
		DefaultChannelPipeline$1:run() to listOf(DefaultChannelPipeline:remove0(DefaultChannelHandlerContext)),
		DefaultChannelPipeline$2:run() to listOf(DefaultChannelPipeline:access$000(DefaultChannelPipeline-DefaultChannelHandlerContext-String-DefaultChannelHandlerContext)),
		DefaultChannelPipeline$3:run() to listOf(DefaultChannelPipeline:access$100(DefaultChannelPipeline-ChannelHandlerContext)),
		DefaultChannelPipeline$4:run() to listOf(DefaultChannelPipeline:access$200(DefaultChannelPipeline-DefaultChannelHandlerContext)),
		DefaultChannelPipeline$HeadHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(Channel$Unsafe:bind(SocketAddress-ChannelPromise)),
		DefaultChannelPipeline$HeadHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(Channel$Unsafe:connect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelPipeline$HeadHandler:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(Channel$Unsafe:disconnect(ChannelPromise)),
		DefaultChannelPipeline$HeadHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(Channel$Unsafe:close(ChannelPromise)),
		DefaultChannelPipeline$HeadHandler:deregister(ChannelHandlerContext-ChannelPromise) to listOf(Channel$Unsafe:deregister(ChannelPromise)),
		DefaultChannelPipeline$HeadHandler:read(ChannelHandlerContext) to listOf(Channel$Unsafe:beginRead()),
		DefaultChannelPipeline$HeadHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(Channel$Unsafe:write(Object-ChannelPromise)),
		DefaultChannelPipeline$HeadHandler:flush(ChannelHandlerContext) to listOf(Channel$Unsafe:flush()),
		DefaultChannelPipeline$HeadHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline$TailHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(InternalLogger:warn(String-Throwable)),
		DefaultChannelPipeline$TailHandler:channelRead(ChannelHandlerContext-Object) to listOf(InternalLogger:debug(String-Object), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		DefaultChannelPipeline:<init>(Channel) to listOf(DefaultChannelPipeline$TailHandler:<init>(), DefaultChannelPipeline:generateName(ChannelHandler), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler), Channel:unsafe(), DefaultChannelPipeline$HeadHandler:<init>(Channel$Unsafe), DefaultChannelPipeline:generateName(ChannelHandler), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler)),
		DefaultChannelPipeline:addFirst(String-ChannelHandler) to listOf(DefaultChannelPipeline:addFirst(EventExecutorGroup-String-ChannelHandler)),
		DefaultChannelPipeline:addFirst(EventExecutorGroup-String-ChannelHandler) to listOf(DefaultChannelPipeline:checkDuplicateName(String), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler), DefaultChannelPipeline:addFirst0(String-DefaultChannelHandlerContext)),
		DefaultChannelPipeline:addFirst0(String-DefaultChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(ChannelHandlerContext)),
		DefaultChannelPipeline:addLast(String-ChannelHandler) to listOf(DefaultChannelPipeline:addLast(EventExecutorGroup-String-ChannelHandler)),
		DefaultChannelPipeline:addLast(EventExecutorGroup-String-ChannelHandler) to listOf(DefaultChannelPipeline:checkDuplicateName(String), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler), DefaultChannelPipeline:addLast0(String-DefaultChannelHandlerContext)),
		DefaultChannelPipeline:addLast0(String-DefaultChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(ChannelHandlerContext)),
		DefaultChannelPipeline:addBefore(String-String-ChannelHandler) to listOf(DefaultChannelPipeline:addBefore(EventExecutorGroup-String-String-ChannelHandler)),
		DefaultChannelPipeline:addBefore(EventExecutorGroup-String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:checkDuplicateName(String), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler), DefaultChannelPipeline:addBefore0(String-DefaultChannelHandlerContext-DefaultChannelHandlerContext)),
		DefaultChannelPipeline:addBefore0(String-DefaultChannelHandlerContext-DefaultChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(ChannelHandlerContext)),
		DefaultChannelPipeline:addAfter(String-String-ChannelHandler) to listOf(DefaultChannelPipeline:addAfter(EventExecutorGroup-String-String-ChannelHandler)),
		DefaultChannelPipeline:addAfter(EventExecutorGroup-String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:checkDuplicateName(String), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler), DefaultChannelPipeline:addAfter0(String-DefaultChannelHandlerContext-DefaultChannelHandlerContext)),
		DefaultChannelPipeline:addAfter0(String-DefaultChannelHandlerContext-DefaultChannelHandlerContext) to listOf(DefaultChannelPipeline:checkDuplicateName(String), DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelPipeline:callHandlerAdded(ChannelHandlerContext)),
		DefaultChannelPipeline:addFirst(ChannelHandler[]) to listOf(DefaultChannelPipeline:addFirst(EventExecutorGroup-ChannelHandler[])),
		DefaultChannelPipeline:addFirst(EventExecutorGroup-ChannelHandler[]) to listOf(DefaultChannelPipeline:generateName(ChannelHandler), DefaultChannelPipeline:addFirst(EventExecutorGroup-String-ChannelHandler)),
		DefaultChannelPipeline:addLast(ChannelHandler[]) to listOf(DefaultChannelPipeline:addLast(EventExecutorGroup-ChannelHandler[])),
		DefaultChannelPipeline:addLast(EventExecutorGroup-ChannelHandler[]) to listOf(DefaultChannelPipeline:generateName(ChannelHandler), DefaultChannelPipeline:addLast(EventExecutorGroup-String-ChannelHandler)),
		DefaultChannelPipeline:generateName(ChannelHandler) to listOf(StringUtil:simpleClassName(Class)),
		DefaultChannelPipeline:remove(ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(ChannelHandler), DefaultChannelPipeline:remove(DefaultChannelHandlerContext)),
		DefaultChannelPipeline:remove(String) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:remove(DefaultChannelHandlerContext), DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:remove(Class) to listOf(DefaultChannelPipeline:getContextOrDie(Class), DefaultChannelPipeline:remove(DefaultChannelHandlerContext), DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:remove(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:channel(), Channel:isRegistered(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelPipeline:remove0(DefaultChannelHandlerContext), DefaultChannelHandlerContext:executor(), DefaultChannelPipeline$1:<init>(DefaultChannelPipeline-DefaultChannelHandlerContext), EventExecutor:submit(Runnable), DefaultChannelPipeline:waitForFuture(Future)),
		DefaultChannelPipeline:remove0(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:name(), DefaultChannelPipeline:callHandlerRemoved(DefaultChannelHandlerContext)),
		DefaultChannelPipeline:removeFirst() to listOf(DefaultChannelPipeline:remove(DefaultChannelHandlerContext), DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:removeLast() to listOf(DefaultChannelPipeline:remove(DefaultChannelHandlerContext), DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:replace(ChannelHandler-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(ChannelHandler), DefaultChannelPipeline:replace(DefaultChannelHandlerContext-String-ChannelHandler)),
		DefaultChannelPipeline:replace(String-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(String), DefaultChannelPipeline:replace(DefaultChannelHandlerContext-String-ChannelHandler)),
		DefaultChannelPipeline:replace(Class-String-ChannelHandler) to listOf(DefaultChannelPipeline:getContextOrDie(Class), DefaultChannelPipeline:replace(DefaultChannelHandlerContext-String-ChannelHandler)),
		DefaultChannelPipeline:replace(DefaultChannelHandlerContext-String-ChannelHandler) to listOf(DefaultChannelHandlerContext:name(), DefaultChannelPipeline:checkDuplicateName(String), DefaultChannelHandlerContext:<init>(DefaultChannelPipeline-EventExecutorGroup-String-ChannelHandler), DefaultChannelHandlerContext:channel(), Channel:isRegistered(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelPipeline:replace0(DefaultChannelHandlerContext-String-DefaultChannelHandlerContext), DefaultChannelHandlerContext:handler(), DefaultChannelHandlerContext:executor(), DefaultChannelPipeline$2:<init>(DefaultChannelPipeline-DefaultChannelHandlerContext-String-DefaultChannelHandlerContext), EventExecutor:submit(Runnable), DefaultChannelPipeline:waitForFuture(Future), DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:replace0(DefaultChannelHandlerContext-String-DefaultChannelHandlerContext) to listOf(DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext), DefaultChannelHandlerContext:name(), DefaultChannelHandlerContext:name(), DefaultChannelPipeline:callHandlerAdded(ChannelHandlerContext), DefaultChannelPipeline:callHandlerRemoved(DefaultChannelHandlerContext)),
		DefaultChannelPipeline:checkMultiplicity(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandlerAdapter:isSharable(), ChannelPipelineException:<init>(String)),
		DefaultChannelPipeline:callHandlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isRegistered(), ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), ChannelHandlerContext:executor(), DefaultChannelPipeline$3:<init>(DefaultChannelPipeline-ChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelPipeline:callHandlerAdded0(ChannelHandlerContext)),
		DefaultChannelPipeline:callHandlerAdded0(ChannelHandlerContext) to listOf(ChannelHandlerContext:handler(), ChannelHandler:handlerAdded(ChannelHandlerContext), DefaultChannelPipeline:remove(DefaultChannelHandlerContext), InternalLogger:isWarnEnabled(), ChannelHandlerContext:name(), InternalLogger:warn(String-Throwable), ChannelHandlerContext:handler(), ChannelPipelineException:<init>(String-Throwable), DefaultChannelPipeline:fireExceptionCaught(Throwable), ChannelHandlerContext:handler(), ChannelPipelineException:<init>(String-Throwable), DefaultChannelPipeline:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline:callHandlerRemoved(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:channel(), Channel:isRegistered(), DefaultChannelHandlerContext:executor(), EventExecutor:inEventLoop(), DefaultChannelHandlerContext:executor(), DefaultChannelPipeline$4:<init>(DefaultChannelPipeline-DefaultChannelHandlerContext), EventExecutor:execute(Runnable), DefaultChannelPipeline:callHandlerRemoved0(DefaultChannelHandlerContext)),
		DefaultChannelPipeline:callHandlerRemoved0(DefaultChannelHandlerContext) to listOf(DefaultChannelHandlerContext:handler(), ChannelHandler:handlerRemoved(ChannelHandlerContext), DefaultChannelHandlerContext:setRemoved(), DefaultChannelHandlerContext:handler(), ChannelPipelineException:<init>(String-Throwable), DefaultChannelPipeline:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline:waitForFuture(Future) to listOf(PlatformDependent:throwException(Throwable)),
		DefaultChannelPipeline:first() to listOf(DefaultChannelPipeline:firstContext(), ChannelHandlerContext:handler()),
		DefaultChannelPipeline:last() to listOf(DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:get(String) to listOf(DefaultChannelPipeline:context(String), ChannelHandlerContext:handler()),
		DefaultChannelPipeline:get(Class) to listOf(DefaultChannelPipeline:context(Class), ChannelHandlerContext:handler()),
		DefaultChannelPipeline:context(ChannelHandler) to listOf(DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:context(Class) to listOf(DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:names() to listOf(DefaultChannelHandlerContext:name()),
		DefaultChannelPipeline:toMap() to listOf(DefaultChannelHandlerContext:name(), DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:iterator() to listOf(DefaultChannelPipeline:toMap()),
		DefaultChannelPipeline:toString() to listOf(DefaultChannelHandlerContext:name(), DefaultChannelHandlerContext:handler()),
		DefaultChannelPipeline:fireChannelRegistered() to listOf(DefaultChannelHandlerContext:fireChannelRegistered(), DefaultChannelPipeline:fireChannelRegistered()),
		DefaultChannelPipeline:fireChannelUnregistered() to listOf(DefaultChannelHandlerContext:fireChannelUnregistered(), Channel:isOpen(), DefaultChannelHandlerContext:freeInbound(), DefaultChannelPipeline:fireChannelUnregistered()),
		DefaultChannelPipeline:fireChannelActive() to listOf(DefaultChannelHandlerContext:fireChannelActive(), Channel:config(), ChannelConfig:isAutoRead(), Channel:read(), DefaultChannelPipeline:fireChannelActive()),
		DefaultChannelPipeline:fireChannelInactive() to listOf(DefaultChannelHandlerContext:fireChannelInactive(), DefaultChannelPipeline:fireChannelInactive()),
		DefaultChannelPipeline:fireExceptionCaught(Throwable) to listOf(DefaultChannelHandlerContext:fireExceptionCaught(Throwable), DefaultChannelPipeline:fireExceptionCaught(Throwable)),
		DefaultChannelPipeline:fireUserEventTriggered(Object) to listOf(DefaultChannelHandlerContext:fireUserEventTriggered(Object), DefaultChannelPipeline:fireUserEventTriggered(Object)),
		DefaultChannelPipeline:fireChannelRead(Object) to listOf(DefaultChannelHandlerContext:fireChannelRead(Object), DefaultChannelPipeline:fireChannelRead(Object)),
		DefaultChannelPipeline:fireChannelReadComplete() to listOf(DefaultChannelHandlerContext:fireChannelReadComplete(), Channel:config(), ChannelConfig:isAutoRead(), DefaultChannelPipeline:read(), DefaultChannelPipeline:fireChannelReadComplete()),
		DefaultChannelPipeline:fireChannelWritabilityChanged() to listOf(DefaultChannelHandlerContext:fireChannelWritabilityChanged(), DefaultChannelPipeline:fireChannelWritabilityChanged()),
		DefaultChannelPipeline:bind(SocketAddress) to listOf(DefaultChannelHandlerContext:bind(SocketAddress)),
		DefaultChannelPipeline:connect(SocketAddress) to listOf(DefaultChannelHandlerContext:connect(SocketAddress)),
		DefaultChannelPipeline:connect(SocketAddress-SocketAddress) to listOf(DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress)),
		DefaultChannelPipeline:disconnect() to listOf(DefaultChannelHandlerContext:disconnect()),
		DefaultChannelPipeline:close() to listOf(DefaultChannelHandlerContext:close()),
		DefaultChannelPipeline:deregister() to listOf(DefaultChannelHandlerContext:deregister()),
		DefaultChannelPipeline:flush() to listOf(DefaultChannelHandlerContext:flush(), DefaultChannelPipeline:flush()),
		DefaultChannelPipeline:bind(SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		DefaultChannelPipeline:connect(SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:connect(SocketAddress-ChannelPromise)),
		DefaultChannelPipeline:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(DefaultChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		DefaultChannelPipeline:disconnect(ChannelPromise) to listOf(DefaultChannelHandlerContext:disconnect(ChannelPromise)),
		DefaultChannelPipeline:close(ChannelPromise) to listOf(DefaultChannelHandlerContext:close(ChannelPromise)),
		DefaultChannelPipeline:deregister(ChannelPromise) to listOf(DefaultChannelHandlerContext:deregister(ChannelPromise)),
		DefaultChannelPipeline:read() to listOf(DefaultChannelHandlerContext:read(), DefaultChannelPipeline:read()),
		DefaultChannelPipeline:write(Object) to listOf(DefaultChannelHandlerContext:write(Object)),
		DefaultChannelPipeline:write(Object-ChannelPromise) to listOf(DefaultChannelHandlerContext:write(Object-ChannelPromise)),
		DefaultChannelPipeline:writeAndFlush(Object-ChannelPromise) to listOf(DefaultChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		DefaultChannelPipeline:writeAndFlush(Object) to listOf(DefaultChannelHandlerContext:writeAndFlush(Object)),
		DefaultChannelPipeline:getContextOrDie(String) to listOf(DefaultChannelPipeline:context(String)),
		DefaultChannelPipeline:getContextOrDie(ChannelHandler) to listOf(DefaultChannelPipeline:context(ChannelHandler)),
		DefaultChannelPipeline:getContextOrDie(Class) to listOf(DefaultChannelPipeline:context(Class)),
		DefaultChannelPipeline:access$000(DefaultChannelPipeline-DefaultChannelHandlerContext-String-DefaultChannelHandlerContext) to listOf(DefaultChannelPipeline:replace0(DefaultChannelHandlerContext-String-DefaultChannelHandlerContext)),
		DefaultChannelPipeline:access$100(DefaultChannelPipeline-ChannelHandlerContext) to listOf(DefaultChannelPipeline:callHandlerAdded0(ChannelHandlerContext)),
		DefaultChannelPipeline:access$200(DefaultChannelPipeline-DefaultChannelHandlerContext) to listOf(DefaultChannelPipeline:callHandlerRemoved0(DefaultChannelHandlerContext)),
		DefaultChannelPipeline:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		DefaultChannelProgressivePromise:<init>(Channel) to listOf(DefaultProgressivePromise:<init>()),
		DefaultChannelProgressivePromise:<init>(Channel-EventExecutor) to listOf(DefaultProgressivePromise:<init>(EventExecutor)),
		DefaultChannelProgressivePromise:executor() to listOf(DefaultProgressivePromise:executor(), DefaultChannelProgressivePromise:channel(), Channel:eventLoop()),
		DefaultChannelProgressivePromise:setSuccess() to listOf(DefaultChannelProgressivePromise:setSuccess(Void), DefaultChannelProgressivePromise:setSuccess()),
		DefaultChannelProgressivePromise:setSuccess(Void) to listOf(DefaultProgressivePromise:setSuccess(Object), DefaultChannelProgressivePromise:setSuccess(Void)),
		DefaultChannelProgressivePromise:trySuccess() to listOf(DefaultChannelProgressivePromise:trySuccess(Object)),
		DefaultChannelProgressivePromise:setFailure(Throwable) to listOf(DefaultProgressivePromise:setFailure(Throwable), DefaultChannelProgressivePromise:setFailure(Throwable), DefaultChannelProgressivePromise:setFailure(Throwable), DefaultChannelProgressivePromise:setFailure(Throwable)),
		DefaultChannelProgressivePromise:setProgress(long-long) to listOf(DefaultProgressivePromise:setProgress(long-long), DefaultChannelProgressivePromise:setProgress(long-long)),
		DefaultChannelProgressivePromise:addListener(GenericFutureListener) to listOf(DefaultProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener), DefaultChannelProgressivePromise:addListener(GenericFutureListener)),
		DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]) to listOf(DefaultProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:addListeners(GenericFutureListener[])),
		DefaultChannelProgressivePromise:removeListener(GenericFutureListener) to listOf(DefaultProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener), DefaultChannelProgressivePromise:removeListener(GenericFutureListener)),
		DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]) to listOf(DefaultProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[]), DefaultChannelProgressivePromise:removeListeners(GenericFutureListener[])),
		DefaultChannelProgressivePromise:sync() to listOf(DefaultProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync(), DefaultChannelProgressivePromise:sync()),
		DefaultChannelProgressivePromise:syncUninterruptibly() to listOf(DefaultProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly(), DefaultChannelProgressivePromise:syncUninterruptibly()),
		DefaultChannelProgressivePromise:await() to listOf(DefaultProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await(), DefaultChannelProgressivePromise:await()),
		DefaultChannelProgressivePromise:awaitUninterruptibly() to listOf(DefaultProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly(), DefaultChannelProgressivePromise:awaitUninterruptibly()),
		DefaultChannelProgressivePromise:checkDeadLock() to listOf(DefaultChannelProgressivePromise:channel(), Channel:isRegistered(), DefaultProgressivePromise:checkDeadLock()),
		DefaultChannelProgressivePromise:setSuccess(Object) to listOf(DefaultChannelProgressivePromise:setSuccess(Void), DefaultChannelProgressivePromise:setSuccess(Void)),
		DefaultChannelProgressivePromise:promise() to listOf(DefaultChannelProgressivePromise:promise()),
		DefaultChannelPromise:<init>(Channel) to listOf(DefaultPromise:<init>()),
		DefaultChannelPromise:<init>(Channel-EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor)),
		DefaultChannelPromise:executor() to listOf(DefaultPromise:executor(), DefaultChannelPromise:channel(), Channel:eventLoop()),
		DefaultChannelPromise:setSuccess() to listOf(DefaultChannelPromise:setSuccess(Void)),
		DefaultChannelPromise:setSuccess(Void) to listOf(DefaultPromise:setSuccess(Object)),
		DefaultChannelPromise:trySuccess() to listOf(DefaultChannelPromise:trySuccess(Object)),
		DefaultChannelPromise:setFailure(Throwable) to listOf(DefaultPromise:setFailure(Throwable), DefaultChannelPromise:setFailure(Throwable)),
		DefaultChannelPromise:addListener(GenericFutureListener) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultChannelPromise:addListener(GenericFutureListener), DefaultChannelPromise:addListener(GenericFutureListener), DefaultChannelPromise:addListener(GenericFutureListener)),
		DefaultChannelPromise:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListeners(GenericFutureListener[]), DefaultChannelPromise:addListeners(GenericFutureListener[]), DefaultChannelPromise:addListeners(GenericFutureListener[]), DefaultChannelPromise:addListeners(GenericFutureListener[])),
		DefaultChannelPromise:removeListener(GenericFutureListener) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultChannelPromise:removeListener(GenericFutureListener), DefaultChannelPromise:removeListener(GenericFutureListener), DefaultChannelPromise:removeListener(GenericFutureListener)),
		DefaultChannelPromise:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListeners(GenericFutureListener[]), DefaultChannelPromise:removeListeners(GenericFutureListener[]), DefaultChannelPromise:removeListeners(GenericFutureListener[]), DefaultChannelPromise:removeListeners(GenericFutureListener[])),
		DefaultChannelPromise:sync() to listOf(DefaultPromise:sync(), DefaultChannelPromise:sync(), DefaultChannelPromise:sync(), DefaultChannelPromise:sync()),
		DefaultChannelPromise:syncUninterruptibly() to listOf(DefaultPromise:syncUninterruptibly(), DefaultChannelPromise:syncUninterruptibly(), DefaultChannelPromise:syncUninterruptibly(), DefaultChannelPromise:syncUninterruptibly()),
		DefaultChannelPromise:await() to listOf(DefaultPromise:await(), DefaultChannelPromise:await(), DefaultChannelPromise:await(), DefaultChannelPromise:await()),
		DefaultChannelPromise:awaitUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultChannelPromise:awaitUninterruptibly(), DefaultChannelPromise:awaitUninterruptibly(), DefaultChannelPromise:awaitUninterruptibly()),
		DefaultChannelPromise:checkDeadLock() to listOf(DefaultChannelPromise:channel(), Channel:isRegistered(), DefaultPromise:checkDeadLock()),
		DefaultChannelPromise:setSuccess(Object) to listOf(DefaultChannelPromise:setSuccess(Void)),
		DefaultFileRegion:<init>(FileChannel-long-long) to listOf(AbstractReferenceCounted:<init>()),
		DefaultFileRegion:deallocate() to listOf(InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		DefaultFileRegion:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		EmbeddedChannel$DefaultUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelPromise:setSuccess()),
		EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel-EmbeddedChannel$1) to listOf(EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel)),
		EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel) to listOf(ChannelInboundHandlerAdapter:<init>()),
		EmbeddedChannel$LastInboundHandler:channelRead(ChannelHandlerContext-Object) to listOf(EmbeddedChannel:access$200(EmbeddedChannel)),
		EmbeddedChannel$LastInboundHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(EmbeddedChannel:access$300(EmbeddedChannel-Throwable)),
		EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel-EmbeddedChannel$1) to listOf(EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel)),
		EmbeddedChannel:<init>(ChannelHandler[]) to listOf(AbstractChannel:<init>(Channel), EmbeddedEventLoop:<init>(), DefaultChannelConfig:<init>(Channel), EmbeddedSocketAddress:<init>(), EmbeddedSocketAddress:<init>(), EmbeddedChannel:pipeline(), ChannelPipeline:addLast(ChannelHandler[]), EmbeddedChannel$LastInboundHandler:<init>(EmbeddedChannel-EmbeddedChannel$1), ChannelPipeline:addLast(ChannelHandler[]), EmbeddedEventLoop:register(Channel)),
		EmbeddedChannel:writeInbound(Object[]) to listOf(EmbeddedChannel:ensureOpen(), EmbeddedChannel:pipeline(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), EmbeddedChannel:runPendingTasks(), EmbeddedChannel:checkException()),
		EmbeddedChannel:writeOutbound(Object[]) to listOf(EmbeddedChannel:ensureOpen(), RecyclableArrayList:newInstance(int), EmbeddedChannel:write(Object), RecyclableArrayList:add(Object), EmbeddedChannel:flush(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelFuture:isDone(), ChannelFuture:cause(), ChannelFuture:cause(), EmbeddedChannel:recordException(Throwable), EmbeddedChannel:runPendingTasks(), EmbeddedChannel:checkException(), RecyclableArrayList:recycle(), RecyclableArrayList:recycle()),
		EmbeddedChannel:finish() to listOf(EmbeddedChannel:close(), EmbeddedChannel:runPendingTasks(), EmbeddedChannel:checkException()),
		EmbeddedChannel:runPendingTasks() to listOf(EmbeddedEventLoop:runTasks(), EmbeddedChannel:recordException(Throwable)),
		EmbeddedChannel:recordException(Throwable) to listOf(InternalLogger:warn(String-Throwable)),
		EmbeddedChannel:checkException() to listOf(PlatformDependent:throwException(Throwable)),
		EmbeddedChannel:ensureOpen() to listOf(EmbeddedChannel:isOpen(), EmbeddedChannel:recordException(Throwable), EmbeddedChannel:checkException()),
		EmbeddedChannel:localAddress0() to listOf(EmbeddedChannel:isActive()),
		EmbeddedChannel:remoteAddress0() to listOf(EmbeddedChannel:isActive()),
		EmbeddedChannel:doDisconnect() to listOf(EmbeddedChannel:doClose()),
		EmbeddedChannel:newUnsafe() to listOf(EmbeddedChannel$DefaultUnsafe:<init>(EmbeddedChannel-EmbeddedChannel$1)),
		EmbeddedChannel:access$300(EmbeddedChannel-Throwable) to listOf(EmbeddedChannel:recordException(Throwable)),
		EmbeddedChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		EmbeddedEventLoop:<init>() to listOf(AbstractEventExecutor:<init>()),
		EmbeddedEventLoop:register(Channel) to listOf(Channel:newPromise(), EmbeddedEventLoop:register(Channel-ChannelPromise)),
		EmbeddedEventLoop:register(Channel-ChannelPromise) to listOf(Channel:unsafe(), Channel$Unsafe:register(EventLoop-ChannelPromise)),
		EmbeddedEventLoop:next() to listOf(EmbeddedEventLoop:next()),
		EmbeddedEventLoop:parent() to listOf(EmbeddedEventLoop:parent()),
		EventLoopException:<init>() to listOf(ChannelException:<init>()),
		EventLoopException:<init>(String-Throwable) to listOf(ChannelException:<init>(String-Throwable)),
		EventLoopException:<init>(String) to listOf(ChannelException:<init>(String)),
		EventLoopException:<init>(Throwable) to listOf(ChannelException:<init>(Throwable)),
		FailedChannelFuture:<init>(Channel-EventExecutor-Throwable) to listOf(CompleteChannelFuture:<init>(Channel-EventExecutor)),
		FailedChannelFuture:sync() to listOf(PlatformDependent:throwException(Throwable), FailedChannelFuture:sync()),
		FailedChannelFuture:syncUninterruptibly() to listOf(PlatformDependent:throwException(Throwable), FailedChannelFuture:syncUninterruptibly()),
		FixedRecvByteBufAllocator$HandleImpl:allocate(ByteBufAllocator) to listOf(ByteBufAllocator:ioBuffer(int)),
		FixedRecvByteBufAllocator:<init>(int) to listOf(FixedRecvByteBufAllocator$HandleImpl:<init>(int)),
		ChannelGroupException:<init>(Collection) to listOf(ChannelException:<init>()),
		ChannelMatchers$CompositeMatcher:matches(Channel) to listOf(ChannelMatcher:matches(Channel)),
		ChannelMatchers$InvertMatcher:matches(Channel) to listOf(ChannelMatcher:matches(Channel)),
		ChannelMatchers:isNot(Channel) to listOf(ChannelMatchers:is(Channel), ChannelMatchers:invert(ChannelMatcher)),
		ChannelMatchers:is(Channel) to listOf(ChannelMatchers$InstanceMatcher:<init>(Channel)),
		ChannelMatchers:isInstanceOf(Class) to listOf(ChannelMatchers$ClassMatcher:<init>(Class)),
		ChannelMatchers:isNotInstanceOf(Class) to listOf(ChannelMatchers:isInstanceOf(Class), ChannelMatchers:invert(ChannelMatcher)),
		ChannelMatchers:invert(ChannelMatcher) to listOf(ChannelMatchers$InvertMatcher:<init>(ChannelMatcher)),
		ChannelMatchers:compose(ChannelMatcher[]) to listOf(ChannelMatchers$CompositeMatcher:<init>(ChannelMatcher[])),
		ChannelMatchers:<clinit>() to listOf(ChannelMatchers$1:<init>(), ChannelMatchers:isInstanceOf(Class), ChannelMatchers:isNotInstanceOf(Class)),
		DefaultChannelGroup$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:channel(), DefaultChannelGroup:remove(Object)),
		DefaultChannelGroup$1:operationComplete(Future) to listOf(DefaultChannelGroup$1:operationComplete(ChannelFuture)),
		DefaultChannelGroup:<init>(EventExecutor) to listOf(DefaultChannelGroup:<init>(String-EventExecutor)),
		DefaultChannelGroup:<init>(String-EventExecutor) to listOf(ConcurrentSet:<init>(), ConcurrentSet:<init>(), DefaultChannelGroup$1:<init>(DefaultChannelGroup)),
		DefaultChannelGroup:isEmpty() to listOf(ConcurrentSet:isEmpty(), ConcurrentSet:isEmpty()),
		DefaultChannelGroup:size() to listOf(ConcurrentSet:size(), ConcurrentSet:size()),
		DefaultChannelGroup:contains(Object) to listOf(ConcurrentSet:contains(Object), ConcurrentSet:contains(Object)),
		DefaultChannelGroup:add(Channel) to listOf(ConcurrentSet:add(Object), Channel:closeFuture(), ChannelFuture:addListener(GenericFutureListener)),
		DefaultChannelGroup:remove(Object) to listOf(ConcurrentSet:remove(Object), ConcurrentSet:remove(Object), Channel:closeFuture(), ChannelFuture:removeListener(GenericFutureListener)),
		DefaultChannelGroup:clear() to listOf(ConcurrentSet:clear(), ConcurrentSet:clear()),
		DefaultChannelGroup:iterator() to listOf(ConcurrentSet:iterator(), ConcurrentSet:iterator(), CombinedIterator:<init>(Iterator-Iterator)),
		DefaultChannelGroup:toArray() to listOf(DefaultChannelGroup:size()),
		DefaultChannelGroup:toArray(Object[]) to listOf(DefaultChannelGroup:size()),
		DefaultChannelGroup:close() to listOf(ChannelMatchers:all(), DefaultChannelGroup:close(ChannelMatcher)),
		DefaultChannelGroup:disconnect() to listOf(ChannelMatchers:all(), DefaultChannelGroup:disconnect(ChannelMatcher)),
		DefaultChannelGroup:deregister() to listOf(ChannelMatchers:all(), DefaultChannelGroup:deregister(ChannelMatcher)),
		DefaultChannelGroup:write(Object) to listOf(ChannelMatchers:all(), DefaultChannelGroup:write(Object-ChannelMatcher)),
		DefaultChannelGroup:safeDuplicate(Object) to listOf(ByteBuf:duplicate(), ByteBuf:retain(), ByteBufHolder:duplicate(), ByteBufHolder:retain(), ReferenceCountUtil:retain(Object)),
		DefaultChannelGroup:write(Object-ChannelMatcher) to listOf(DefaultChannelGroup:size(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), DefaultChannelGroup:safeDuplicate(Object), Channel:write(Object), ReferenceCountUtil:release(Object), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:flush() to listOf(ChannelMatchers:all(), DefaultChannelGroup:flush(ChannelMatcher)),
		DefaultChannelGroup:flushAndWrite(Object) to listOf(ChannelMatchers:all(), DefaultChannelGroup:flushAndWrite(Object-ChannelMatcher)),
		DefaultChannelGroup:disconnect(ChannelMatcher) to listOf(DefaultChannelGroup:size(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), Channel:disconnect(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), Channel:disconnect(), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:close(ChannelMatcher) to listOf(DefaultChannelGroup:size(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), Channel:close(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), Channel:close(), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:deregister(ChannelMatcher) to listOf(DefaultChannelGroup:size(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), Channel:deregister(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), Channel:deregister(), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:flush(ChannelMatcher) to listOf(ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), Channel:flush()),
		DefaultChannelGroup:flushAndWrite(Object-ChannelMatcher) to listOf(DefaultChannelGroup:size(), ConcurrentSet:iterator(), ChannelMatcher:matches(Channel), DefaultChannelGroup:safeDuplicate(Object), Channel:writeAndFlush(Object), ReferenceCountUtil:release(Object), DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor)),
		DefaultChannelGroup:compareTo(ChannelGroup) to listOf(DefaultChannelGroup:name(), ChannelGroup:name()),
		DefaultChannelGroup:toString() to listOf(DefaultChannelGroup:name(), DefaultChannelGroup:size()),
		DefaultChannelGroup:add(Object) to listOf(DefaultChannelGroup:add(Channel)),
		DefaultChannelGroup:compareTo(Object) to listOf(DefaultChannelGroup:compareTo(ChannelGroup)),
		DefaultChannelGroupFuture$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), DefaultChannelGroupFuture:access$008(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$108(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$000(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$000(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$100(DefaultChannelGroupFuture), DefaultChannelGroupFuture:access$200(DefaultChannelGroupFuture), ChannelFuture:isSuccess(), ChannelFuture:channel(), ChannelFuture:cause(), DefaultChannelGroupFuture$DefaultEntry:<init>(Object-Object), ChannelGroupException:<init>(Collection), DefaultChannelGroupFuture:access$300(DefaultChannelGroupFuture-ChannelGroupException), DefaultChannelGroupFuture:access$400(DefaultChannelGroupFuture)),
		DefaultChannelGroupFuture$1:operationComplete(Future) to listOf(DefaultChannelGroupFuture$1:operationComplete(ChannelFuture)),
		DefaultChannelGroupFuture:<init>(ChannelGroup-Collection-EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor), DefaultChannelGroupFuture$1:<init>(DefaultChannelGroupFuture), ChannelFuture:channel(), ChannelFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:setSuccess0()),
		DefaultChannelGroupFuture:<init>(ChannelGroup-Map-EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor), DefaultChannelGroupFuture$1:<init>(DefaultChannelGroupFuture), ChannelFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:setSuccess0()),
		DefaultChannelGroupFuture:addListener(GenericFutureListener) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultChannelGroupFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:addListener(GenericFutureListener), DefaultChannelGroupFuture:addListener(GenericFutureListener)),
		DefaultChannelGroupFuture:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListeners(GenericFutureListener[]), DefaultChannelGroupFuture:addListeners(GenericFutureListener[]), DefaultChannelGroupFuture:addListeners(GenericFutureListener[]), DefaultChannelGroupFuture:addListeners(GenericFutureListener[])),
		DefaultChannelGroupFuture:removeListener(GenericFutureListener) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultChannelGroupFuture:removeListener(GenericFutureListener), DefaultChannelGroupFuture:removeListener(GenericFutureListener), DefaultChannelGroupFuture:removeListener(GenericFutureListener)),
		DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListeners(GenericFutureListener[]), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[]), DefaultChannelGroupFuture:removeListeners(GenericFutureListener[])),
		DefaultChannelGroupFuture:await() to listOf(DefaultPromise:await(), DefaultChannelGroupFuture:await(), DefaultChannelGroupFuture:await(), DefaultChannelGroupFuture:await()),
		DefaultChannelGroupFuture:awaitUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultChannelGroupFuture:awaitUninterruptibly(), DefaultChannelGroupFuture:awaitUninterruptibly(), DefaultChannelGroupFuture:awaitUninterruptibly()),
		DefaultChannelGroupFuture:syncUninterruptibly() to listOf(DefaultPromise:syncUninterruptibly(), DefaultChannelGroupFuture:syncUninterruptibly(), DefaultChannelGroupFuture:syncUninterruptibly(), DefaultChannelGroupFuture:syncUninterruptibly()),
		DefaultChannelGroupFuture:sync() to listOf(DefaultPromise:sync(), DefaultChannelGroupFuture:sync(), DefaultChannelGroupFuture:sync(), DefaultChannelGroupFuture:sync()),
		DefaultChannelGroupFuture:cause() to listOf(DefaultPromise:cause(), DefaultChannelGroupFuture:cause()),
		DefaultChannelGroupFuture:setSuccess0() to listOf(DefaultPromise:setSuccess(Object)),
		DefaultChannelGroupFuture:setFailure0(ChannelGroupException) to listOf(DefaultPromise:setFailure(Throwable)),
		DefaultChannelGroupFuture:setFailure(Throwable) to listOf(DefaultChannelGroupFuture:setFailure(Throwable)),
		DefaultChannelGroupFuture:checkDeadLock() to listOf(DefaultChannelGroupFuture:executor(), EventExecutor:inEventLoop(), BlockingOperationException:<init>()),
		DefaultChannelGroupFuture:trySuccess(Object) to listOf(DefaultChannelGroupFuture:trySuccess(Void)),
		DefaultChannelGroupFuture:setSuccess(Object) to listOf(DefaultChannelGroupFuture:setSuccess(Void)),
		DefaultChannelGroupFuture:access$300(DefaultChannelGroupFuture-ChannelGroupException) to listOf(DefaultChannelGroupFuture:setFailure0(ChannelGroupException)),
		DefaultChannelGroupFuture:access$400(DefaultChannelGroupFuture) to listOf(DefaultChannelGroupFuture:setSuccess0()),
		LocalAddress:compareTo(Object) to listOf(LocalAddress:compareTo(LocalAddress)),
		LocalAddress:<clinit>() to listOf(LocalAddress:<init>(String)),
		LocalChannel$1:initialValue() to listOf(LocalChannel$1:initialValue()),
		LocalChannel$2:run() to listOf(LocalChannel:pipeline(), LocalChannel:access$000(LocalChannel), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete()),
		LocalChannel$3:run() to listOf(LocalChannel:unsafe(), LocalChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		LocalChannel$4$1:run() to listOf(LocalChannel:access$200(LocalChannel), ChannelPromise:setSuccess(), LocalChannel:pipeline(), ChannelPipeline:fireChannelActive()),
		LocalChannel$4:run() to listOf(LocalChannel$4$1:<init>(LocalChannel$4), EventLoop:execute(Runnable)),
		LocalChannel$5:run() to listOf(LocalChannel:access$000(LocalChannel), LocalChannel:access$300(LocalChannel-ChannelPipeline)),
		LocalChannel$LocalUnsafe:<init>(LocalChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		LocalChannel$LocalUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(LocalChannel$LocalUnsafe:ensureOpen(ChannelPromise), LocalChannel:access$400(LocalChannel), ChannelPromise:setFailure(Throwable), LocalChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), LocalChannel:access$200(LocalChannel), LocalChannel:access$202(LocalChannel-ChannelPromise), LocalChannel:access$400(LocalChannel), LocalAddress:<init>(Channel), LocalChannel:doBind(SocketAddress), ChannelPromise:setFailure(Throwable), LocalChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), LocalChannel$LocalUnsafe:voidPromise(), LocalChannel$LocalUnsafe:close(ChannelPromise), LocalChannelRegistry:get(SocketAddress), ChannelException:<init>(String), ChannelPromise:setFailure(Throwable), LocalChannel$LocalUnsafe:voidPromise(), LocalChannel$LocalUnsafe:close(ChannelPromise), LocalServerChannel:serve(LocalChannel), LocalChannel:access$502(LocalChannel-LocalChannel)),
		LocalChannel$LocalUnsafe:<init>(LocalChannel-LocalChannel$1) to listOf(LocalChannel$LocalUnsafe:<init>(LocalChannel)),
		LocalChannel:<init>() to listOf(AbstractChannel:<init>(Channel), DefaultChannelConfig:<init>(Channel), LocalChannel$2:<init>(LocalChannel), LocalChannel$3:<init>(LocalChannel)),
		LocalChannel:<init>(LocalServerChannel-LocalChannel) to listOf(AbstractChannel:<init>(Channel), DefaultChannelConfig:<init>(Channel), LocalChannel$2:<init>(LocalChannel), LocalChannel$3:<init>(LocalChannel), LocalServerChannel:localAddress(), LocalChannel:localAddress()),
		LocalChannel:parent() to listOf(AbstractChannel:parent(), LocalChannel:parent()),
		LocalChannel:localAddress() to listOf(AbstractChannel:localAddress(), LocalChannel:localAddress()),
		LocalChannel:remoteAddress() to listOf(AbstractChannel:remoteAddress(), LocalChannel:remoteAddress()),
		LocalChannel:newUnsafe() to listOf(LocalChannel$LocalUnsafe:<init>(LocalChannel-LocalChannel$1)),
		LocalChannel:doRegister() to listOf(LocalChannel:parent(), LocalServerChannel:localAddress(), LocalChannel:eventLoop(), LocalChannel$4:<init>(LocalChannel-EventLoop-LocalChannel), LocalChannel:eventLoop(), SingleThreadEventExecutor:addShutdownHook(Runnable)),
		LocalChannel:doBind(SocketAddress) to listOf(LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress)),
		LocalChannel:doDisconnect() to listOf(LocalChannel:doClose()),
		LocalChannel:doPreClose() to listOf(LocalChannel:parent(), LocalChannelRegistry:unregister(LocalAddress)),
		LocalChannel:doClose() to listOf(LocalChannel:isActive(), LocalChannel:unsafe(), LocalChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		LocalChannel:doDeregister() to listOf(LocalChannel:isOpen(), LocalChannel:unsafe(), LocalChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), LocalChannel:eventLoop(), SingleThreadEventExecutor:removeShutdownHook(Runnable)),
		LocalChannel:doBeginRead() to listOf(LocalChannel:pipeline(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), LocalChannel:eventLoop(), EventLoop:execute(Runnable)),
		LocalChannel:doWrite(Object[]-int-int) to listOf(LocalChannel:pipeline(), LocalChannel:eventLoop(), LocalChannel:eventLoop(), LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline), LocalChannel$5:<init>(LocalChannel-Object[]-LocalChannel-ChannelPipeline), EventLoop:execute(Runnable)),
		LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline) to listOf(ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete()),
		LocalChannel:access$300(LocalChannel-ChannelPipeline) to listOf(LocalChannel:finishPeerRead(LocalChannel-ChannelPipeline)),
		LocalChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), LocalChannel$1:<init>()),
		LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress) to listOf(ChannelException:<init>(String), ChannelException:<init>(String), LocalAddress:equals(Object), LocalAddress:<init>(Channel), ChannelException:<init>(String)),
		LocalChannelRegistry:<clinit>() to listOf(PlatformDependent:newConcurrentHashMap()),
		LocalEventLoop:<init>(LocalEventLoopGroup-ThreadFactory) to listOf(SingleThreadEventLoop:<init>(EventLoopGroup-ThreadFactory-boolean)),
		LocalEventLoop:run() to listOf(LocalEventLoop:takeTask(), LocalEventLoop:updateLastExecutionTime(), LocalEventLoop:confirmShutdown()),
		LocalEventLoopGroup:<init>() to listOf(LocalEventLoopGroup:<init>(int)),
		LocalEventLoopGroup:<init>(int) to listOf(LocalEventLoopGroup:<init>(int-ThreadFactory)),
		LocalEventLoopGroup:<init>(int-ThreadFactory) to listOf(MultithreadEventLoopGroup:<init>(int-ThreadFactory-Object[])),
		LocalEventLoopGroup:newChild(ThreadFactory-Object[]) to listOf(LocalEventLoop:<init>(LocalEventLoopGroup-ThreadFactory)),
		LocalServerChannel$1:run() to listOf(LocalServerChannel:unsafe(), LocalServerChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		LocalServerChannel$2:run() to listOf(LocalServerChannel:access$000(LocalServerChannel-LocalChannel)),
		LocalServerChannel:<init>() to listOf(AbstractServerChannel:<init>(), DefaultChannelConfig:<init>(Channel), LocalServerChannel$1:<init>(LocalServerChannel)),
		LocalServerChannel:localAddress() to listOf(AbstractServerChannel:localAddress(), LocalServerChannel:localAddress()),
		LocalServerChannel:remoteAddress() to listOf(AbstractServerChannel:remoteAddress(), LocalServerChannel:remoteAddress()),
		LocalServerChannel:doRegister() to listOf(LocalServerChannel:eventLoop(), SingleThreadEventExecutor:addShutdownHook(Runnable)),
		LocalServerChannel:doBind(SocketAddress) to listOf(LocalChannelRegistry:register(Channel-LocalAddress-SocketAddress)),
		LocalServerChannel:doPreClose() to listOf(LocalChannelRegistry:unregister(LocalAddress)),
		LocalServerChannel:doDeregister() to listOf(LocalServerChannel:eventLoop(), SingleThreadEventExecutor:removeShutdownHook(Runnable)),
		LocalServerChannel:doBeginRead() to listOf(LocalServerChannel:pipeline(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete()),
		LocalServerChannel:serve(LocalChannel) to listOf(LocalChannel:<init>(LocalServerChannel-LocalChannel), LocalServerChannel:serve0(LocalChannel)),
		LocalServerChannel:serve0(LocalChannel) to listOf(LocalServerChannel:eventLoop(), EventLoop:inEventLoop(), LocalServerChannel:pipeline(), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), LocalServerChannel:eventLoop(), LocalServerChannel$2:<init>(LocalServerChannel-LocalChannel), EventLoop:execute(Runnable)),
		LocalServerChannel:access$000(LocalServerChannel-LocalChannel) to listOf(LocalServerChannel:serve0(LocalChannel)),
		MessageList$1:<init>() to listOf(Recycler:<init>()),
		MessageList$1:newObject(Recycler$Handle) to listOf(MessageList:<init>(Recycler$Handle), MessageList$1:newObject(Recycler$Handle)),
		MessageList:newInstance() to listOf(Recycler:get()),
		MessageList:<init>(Recycler$Handle) to listOf(MessageList:<init>(Recycler$Handle-int)),
		MessageList:<init>(Recycler$Handle-int) to listOf(MessageList:normalizeCapacity(int)),
		MessageList:add(Object-ChannelPromise) to listOf(MessageList:ensureCapacity(int)),
		MessageList:recycle() to listOf(Recycler:recycle(Object-Recycler$Handle)),
		MessageList:ensureCapacity(int) to listOf(MessageList:normalizeCapacity(int)),
		MessageList:<clinit>() to listOf(MessageList$1:<init>()),
		MultithreadEventLoopGroup:<init>(int-ThreadFactory-Object[]) to listOf(MultithreadEventExecutorGroup:<init>(int-ThreadFactory-Object[])),
		MultithreadEventLoopGroup:newDefaultThreadFactory() to listOf(DefaultThreadFactory:<init>(Class-int)),
		MultithreadEventLoopGroup:next() to listOf(MultithreadEventExecutorGroup:next(), MultithreadEventLoopGroup:next()),
		MultithreadEventLoopGroup:register(Channel) to listOf(MultithreadEventLoopGroup:next(), EventLoop:register(Channel)),
		MultithreadEventLoopGroup:register(Channel-ChannelPromise) to listOf(MultithreadEventLoopGroup:next(), EventLoop:register(Channel-ChannelPromise)),
		MultithreadEventLoopGroup:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getInt(String-int), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object)),
		AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel) to listOf(AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel)),
		AbstractNioByteChannel$NioByteUnsafe:read() to listOf(AbstractNioByteChannel:eventLoop(), NioEventLoop:inEventLoop(), AbstractNioByteChannel:selectionKey(), AbstractNioByteChannel:config(), ChannelConfig:isAutoRead(), AbstractNioByteChannel:pipeline(), ChannelConfig:getRecvByteBufAllocator(), RecvByteBufAllocator:newHandle(), ChannelConfig:getAllocator(), ChannelConfig:getMaxMessagesPerRead(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), AbstractNioByteChannel:doReadBytes(ByteBuf), ByteBuf:release(), ByteBuf:release(), ChannelPipeline:fireChannelRead(Object), RecvByteBufAllocator$Handle:record(int), ByteBuf:isReadable(), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractNioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractNioByteChannel:setInputShutdown(), AbstractNioByteChannel:isOpen(), AbstractNioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractNioByteChannel$NioByteUnsafe:voidPromise(), AbstractNioByteChannel$NioByteUnsafe:close(ChannelPromise), ByteBuf:isReadable(), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractNioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractNioByteChannel:setInputShutdown(), AbstractNioByteChannel:isOpen(), AbstractNioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractNioByteChannel$NioByteUnsafe:voidPromise(), AbstractNioByteChannel$NioByteUnsafe:close(ChannelPromise), ByteBuf:isReadable(), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractNioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractNioByteChannel:setInputShutdown(), AbstractNioByteChannel:isOpen(), AbstractNioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractNioByteChannel$NioByteUnsafe:voidPromise(), AbstractNioByteChannel$NioByteUnsafe:close(ChannelPromise)),
		AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel-AbstractNioByteChannel$1) to listOf(AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel)),
		AbstractNioByteChannel:<init>(Channel-SelectableChannel) to listOf(AbstractNioChannel:<init>(Channel-SelectableChannel-int)),
		AbstractNioByteChannel:newUnsafe() to listOf(AbstractNioByteChannel$NioByteUnsafe:<init>(AbstractNioByteChannel-AbstractNioByteChannel$1), AbstractNioByteChannel:newUnsafe()),
		AbstractNioByteChannel:doWrite(Object[]-int-int) to listOf(ByteBuf:isReadable(), ByteBuf:release(), AbstractNioByteChannel:config(), ChannelConfig:getWriteSpinCount(), AbstractNioByteChannel:doWriteBytes(ByteBuf-boolean), ByteBuf:isReadable(), ByteBuf:release(), AbstractNioByteChannel:config(), ChannelConfig:getWriteSpinCount(), AbstractNioByteChannel:doWriteFileRegion(FileRegion-boolean), FileRegion:transfered(), FileRegion:count(), FileRegion:release(), StringUtil:simpleClassName(Object)),
		AbstractNioByteChannel:updateOpWrite(long-long-boolean) to listOf(AbstractNioByteChannel:selectionKey(), AbstractNioByteChannel:selectionKey()),
		AbstractNioChannel$AbstractNioUnsafe$1:run() to listOf(AbstractNioChannel:access$000(AbstractNioChannel), ConnectTimeoutException:<init>(String), ChannelPromise:tryFailure(Throwable), AbstractNioChannel$AbstractNioUnsafe:voidPromise(), AbstractNioChannel$AbstractNioUnsafe:close(ChannelPromise)),
		AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(ChannelFuture) to listOf(ChannelFuture:isCancelled(), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel$AbstractNioUnsafe:voidPromise(), AbstractNioChannel$AbstractNioUnsafe:close(ChannelPromise)),
		AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(Future) to listOf(AbstractNioChannel$AbstractNioUnsafe$2:operationComplete(ChannelFuture)),
		AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		AbstractNioChannel$AbstractNioUnsafe:ch() to listOf(AbstractNioChannel:javaChannel()),
		AbstractNioChannel$AbstractNioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(AbstractNioChannel$AbstractNioUnsafe:ensureOpen(ChannelPromise), AbstractNioChannel:access$000(AbstractNioChannel), AbstractNioChannel:isActive(), AbstractNioChannel:doConnect(SocketAddress-SocketAddress), ChannelPromise:setSuccess(), AbstractNioChannel:isActive(), AbstractNioChannel:pipeline(), ChannelPipeline:fireChannelActive(), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel:access$102(AbstractNioChannel-SocketAddress), AbstractNioChannel:config(), ChannelConfig:getConnectTimeoutMillis(), AbstractNioChannel:eventLoop(), AbstractNioChannel$AbstractNioUnsafe$1:<init>(AbstractNioChannel$AbstractNioUnsafe-SocketAddress), NioEventLoop:schedule(Runnable-long-TimeUnit), AbstractNioChannel:access$202(AbstractNioChannel-ScheduledFuture), AbstractNioChannel$AbstractNioUnsafe$2:<init>(AbstractNioChannel$AbstractNioUnsafe), ChannelPromise:addListener(GenericFutureListener), AbstractNioChannel$AbstractNioUnsafe:closeIfClosed(), ChannelPromise:tryFailure(Throwable)),
		AbstractNioChannel$AbstractNioUnsafe:finishConnect() to listOf(AbstractNioChannel:eventLoop(), NioEventLoop:inEventLoop(), AbstractNioChannel:access$000(AbstractNioChannel), AbstractNioChannel:isActive(), AbstractNioChannel:doFinishConnect(), AbstractNioChannel:access$000(AbstractNioChannel), ChannelPromise:setSuccess(), AbstractNioChannel:isActive(), AbstractNioChannel:pipeline(), ChannelPipeline:fireChannelActive(), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel:access$100(AbstractNioChannel), AbstractNioChannel:access$000(AbstractNioChannel), ChannelPromise:setFailure(Throwable), AbstractNioChannel$AbstractNioUnsafe:closeIfClosed(), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise), AbstractNioChannel:access$200(AbstractNioChannel), AbstractNioChannel:access$002(AbstractNioChannel-ChannelPromise)),
		AbstractNioChannel$AbstractNioUnsafe:flush0() to listOf(AbstractNioChannel:access$300(AbstractNioChannel), AbstractChannel$AbstractUnsafe:flush0()),
		AbstractNioChannel$AbstractNioUnsafe:forceFlush() to listOf(AbstractChannel$AbstractUnsafe:flush0()),
		AbstractNioChannel:<init>(Channel-SelectableChannel-int) to listOf(AbstractChannel:<init>(Channel), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		AbstractNioChannel:unsafe() to listOf(AbstractChannel:unsafe(), AbstractNioChannel:unsafe()),
		AbstractNioChannel:eventLoop() to listOf(AbstractChannel:eventLoop(), AbstractNioChannel:eventLoop()),
		AbstractNioChannel:doRegister() to listOf(AbstractNioChannel:javaChannel(), AbstractNioChannel:eventLoop(), AbstractNioChannel:eventLoop(), NioEventLoop:selectNow()),
		AbstractNioChannel:doDeregister() to listOf(AbstractNioChannel:eventLoop(), AbstractNioChannel:selectionKey(), NioEventLoop:cancel(SelectionKey)),
		AbstractNioChannel:access$300(AbstractNioChannel) to listOf(AbstractNioChannel:isFlushPending()),
		AbstractNioChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel) to listOf(AbstractNioChannel$AbstractNioUnsafe:<init>(AbstractNioChannel)),
		AbstractNioMessageChannel$NioMessageUnsafe:read() to listOf(AbstractNioMessageChannel:eventLoop(), NioEventLoop:inEventLoop(), AbstractNioMessageChannel:selectionKey(), AbstractNioMessageChannel:config(), ChannelConfig:isAutoRead(), AbstractNioMessageChannel:config(), ChannelConfig:getMaxMessagesPerRead(), ChannelConfig:isAutoRead(), AbstractNioMessageChannel:pipeline(), AbstractNioMessageChannel:doReadMessages(List), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractNioMessageChannel:isOpen(), AbstractNioMessageChannel$NioMessageUnsafe:voidPromise(), AbstractNioMessageChannel$NioMessageUnsafe:close(ChannelPromise)),
		AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel-AbstractNioMessageChannel$1) to listOf(AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel)),
		AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int) to listOf(AbstractNioChannel:<init>(Channel-SelectableChannel-int)),
		AbstractNioMessageChannel:newUnsafe() to listOf(AbstractNioMessageChannel$NioMessageUnsafe:<init>(AbstractNioMessageChannel-AbstractNioMessageChannel$1), AbstractNioMessageChannel:newUnsafe()),
		AbstractNioMessageChannel:doWrite(Object[]-int-int) to listOf(AbstractNioMessageChannel:config(), ChannelConfig:getWriteSpinCount(), AbstractNioMessageChannel:doWriteMessages(Object[]-int-int-boolean)),
		NioEventLoop$1:run() to listOf(NioEventLoop:rebuildSelector()),
		NioEventLoop:<init>(NioEventLoopGroup-ThreadFactory-SelectorProvider) to listOf(SingleThreadEventLoop:<init>(EventLoopGroup-ThreadFactory-boolean), NioEventLoop:openSelector()),
		NioEventLoop:openSelector() to listOf(ChannelException:<init>(String-Throwable), SelectedSelectionKeySet:<init>(), InternalLogger:trace(String-Object), InternalLogger:trace(String-Object-Object)),
		NioEventLoop:register(SelectableChannel-int-NioTask) to listOf(NioEventLoop:isShutdown(), EventLoopException:<init>(String-Throwable)),
		NioEventLoop:executeWhenWritable(AbstractNioChannel-NioTask) to listOf(NioEventLoop:isShutdown(), AbstractNioChannel:selectionKey()),
		NioEventLoop:rebuildSelector() to listOf(NioEventLoop:inEventLoop(), NioEventLoop$1:<init>(NioEventLoop), NioEventLoop:execute(Runnable), NioEventLoop:openSelector(), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable), AbstractNioChannel:unsafe(), AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), InternalLogger:info(String)),
		NioEventLoop:run() to listOf(NioEventLoop:hasTasks(), NioEventLoop:selectNow(), NioEventLoop:select(), SelectedSelectionKeySet:flip(), NioEventLoop:processSelectedKeysOptimized(SelectionKey[]), NioEventLoop:processSelectedKeysPlain(Set), NioEventLoop:runAllTasks(long), NioEventLoop:isShuttingDown(), NioEventLoop:closeAll(), NioEventLoop:confirmShutdown(), InternalLogger:warn(String-Throwable)),
		NioEventLoop:cleanup() to listOf(InternalLogger:warn(String-Throwable)),
		NioEventLoop:pollTask() to listOf(SingleThreadEventLoop:pollTask(), NioEventLoop:selectAgain()),
		NioEventLoop:processSelectedKeysPlain(Set) to listOf(NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel), NioEventLoop:processSelectedKey(SelectionKey-NioTask), NioEventLoop:selectAgain()),
		NioEventLoop:processSelectedKeysOptimized(SelectionKey[]) to listOf(NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel), NioEventLoop:processSelectedKey(SelectionKey-NioTask), NioEventLoop:selectAgain(), SelectedSelectionKeySet:flip()),
		NioEventLoop:processSelectedKey(SelectionKey-AbstractNioChannel) to listOf(AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise), AbstractNioChannel$NioUnsafe:read(), AbstractNioChannel:isOpen(), NioEventLoop:processWritable(AbstractNioChannel), AbstractNioChannel$NioUnsafe:finishConnect(), NioEventLoop:unregisterWritableTasks(AbstractNioChannel), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise)),
		NioEventLoop:processWritable(AbstractNioChannel) to listOf(AbstractNioChannel:selectionKey(), NioEventLoop:processSelectedKey(SelectionKey-NioTask), AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:forceFlush()),
		NioEventLoop:unregisterWritableTasks(AbstractNioChannel) to listOf(AbstractNioChannel:selectionKey(), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable)),
		NioEventLoop:processSelectedKey(SelectionKey-NioTask) to listOf(NioTask:channelReady(SelectableChannel-SelectionKey), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable)),
		NioEventLoop:closeAll() to listOf(NioEventLoop:selectAgain(), NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable), NioEventLoop:unregisterWritableTasks(AbstractNioChannel), AbstractNioChannel:unsafe(), AbstractNioChannel:unsafe(), AbstractNioChannel$NioUnsafe:voidPromise(), AbstractNioChannel$NioUnsafe:close(ChannelPromise)),
		NioEventLoop:invokeChannelUnregistered(NioTask-SelectionKey-Throwable) to listOf(NioTask:channelUnregistered(SelectableChannel-Throwable), InternalLogger:warn(String-Throwable)),
		NioEventLoop:select() to listOf(NioEventLoop:delayNanos(long), NioEventLoop:hasTasks(), InternalLogger:warn(String-Object), NioEventLoop:rebuildSelector(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Throwable)),
		NioEventLoop:selectAgain() to listOf(InternalLogger:warn(String-Throwable)),
		NioEventLoop:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object-Object), SystemPropertyUtil:getInt(String-int), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object)),
		NioEventLoopGroup:<init>() to listOf(NioEventLoopGroup:<init>(int)),
		NioEventLoopGroup:<init>(int) to listOf(NioEventLoopGroup:<init>(int-ThreadFactory)),
		NioEventLoopGroup:<init>(int-ThreadFactory) to listOf(NioEventLoopGroup:<init>(int-ThreadFactory-SelectorProvider)),
		NioEventLoopGroup:<init>(int-ThreadFactory-SelectorProvider) to listOf(MultithreadEventLoopGroup:<init>(int-ThreadFactory-Object[])),
		NioEventLoopGroup:setIoRatio(int) to listOf(NioEventLoopGroup:children(), NioEventLoop:setIoRatio(int)),
		NioEventLoopGroup:rebuildSelectors() to listOf(NioEventLoopGroup:children(), NioEventLoop:rebuildSelector()),
		NioEventLoopGroup:newChild(ThreadFactory-Object[]) to listOf(NioEventLoop:<init>(NioEventLoopGroup-ThreadFactory-SelectorProvider)),
		SelectedSelectionKeySet:add(SelectionKey) to listOf(SelectedSelectionKeySet:doubleCapacityA(), SelectedSelectionKeySet:doubleCapacityB()),
		SelectedSelectionKeySet:add(Object) to listOf(SelectedSelectionKeySet:add(SelectionKey)),
		AbstractOioByteChannel:<init>(Channel) to listOf(AbstractOioChannel:<init>(Channel)),
		AbstractOioByteChannel:doRead() to listOf(AbstractOioByteChannel:checkInputShutdown(), AbstractOioByteChannel:pipeline(), AbstractOioByteChannel:alloc(), ByteBufAllocator:buffer(), AbstractOioByteChannel:doReadBytes(ByteBuf), AbstractOioByteChannel:available(), ByteBuf:isWritable(), ByteBuf:capacity(), ByteBuf:maxCapacity(), ChannelPipeline:fireChannelRead(Object), AbstractOioByteChannel:alloc(), ByteBufAllocator:buffer(), ByteBuf:writerIndex(), ByteBuf:capacity(int), ByteBuf:ensureWritable(int), AbstractOioByteChannel:config(), ChannelConfig:isAutoRead(), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractOioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isOpen(), AbstractOioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractOioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isOpen(), AbstractOioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), ChannelPipeline:fireChannelRead(Object), ByteBuf:release(), ChannelPipeline:fireChannelReadComplete(), AbstractOioByteChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:voidPromise(), Channel$Unsafe:close(ChannelPromise), AbstractOioByteChannel:isOpen(), AbstractOioByteChannel:config(), ChannelConfig:getOption(ChannelOption), ChannelPipeline:fireUserEventTriggered(Object), AbstractOioByteChannel:unsafe(), AbstractOioByteChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		AbstractOioByteChannel:doWrite(Object[]-int-int) to listOf(ByteBuf:isReadable(), AbstractOioByteChannel:doWriteBytes(ByteBuf), ByteBuf:release(), AbstractOioByteChannel:doWriteFileRegion(FileRegion), FileRegion:release(), StringUtil:simpleClassName(Object)),
		AbstractOioByteChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		AbstractOioChannel$1:run() to listOf(AbstractOioChannel:access$002(AbstractOioChannel-boolean), AbstractOioChannel:doRead()),
		AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		AbstractOioChannel$DefaultOioUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(AbstractOioChannel$DefaultOioUnsafe:ensureOpen(ChannelPromise), ChannelPromise:setUncancellable(), AbstractOioChannel$DefaultOioUnsafe:voidPromise(), AbstractOioChannel$DefaultOioUnsafe:close(ChannelPromise), AbstractOioChannel:isActive(), AbstractOioChannel:doConnect(SocketAddress-SocketAddress), ChannelPromise:setSuccess(), AbstractOioChannel:isActive(), AbstractOioChannel:pipeline(), ChannelPipeline:fireChannelActive(), AbstractOioChannel$DefaultOioUnsafe:closeIfClosed(), ChannelPromise:setFailure(Throwable)),
		AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel-AbstractOioChannel$1) to listOf(AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel)),
		AbstractOioChannel:<init>(Channel) to listOf(AbstractChannel:<init>(Channel), AbstractOioChannel$1:<init>(AbstractOioChannel)),
		AbstractOioChannel:newUnsafe() to listOf(AbstractOioChannel$DefaultOioUnsafe:<init>(AbstractOioChannel-AbstractOioChannel$1)),
		AbstractOioChannel:doBeginRead() to listOf(AbstractOioChannel:eventLoop(), EventLoop:execute(Runnable)),
		AbstractOioMessageChannel:<init>(Channel) to listOf(AbstractOioChannel:<init>(Channel)),
		AbstractOioMessageChannel:doRead() to listOf(AbstractOioMessageChannel:pipeline(), AbstractOioMessageChannel:doReadMessages(List), ChannelPipeline:fireChannelRead(Object), ChannelPipeline:fireChannelReadComplete(), AbstractOioMessageChannel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable), AbstractOioMessageChannel:isOpen(), AbstractOioMessageChannel:unsafe(), AbstractOioMessageChannel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise)),
		OioByteStreamChannel:<init>(Channel) to listOf(AbstractOioByteChannel:<init>(Channel)),
		OioByteStreamChannel:doReadBytes(ByteBuf) to listOf(OioByteStreamChannel:available(), ByteBuf:maxWritableBytes(), ByteBuf:writeBytes(InputStream-int)),
		OioByteStreamChannel:doWriteBytes(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readBytes(OutputStream-int)),
		OioByteStreamChannel:doWriteFileRegion(FileRegion) to listOf(FileRegion:transferTo(WritableByteChannel-long), OioByteStreamChannel:checkEOF(FileRegion), FileRegion:count()),
		OioByteStreamChannel:<clinit>() to listOf(OioByteStreamChannel$1:<init>(), OioByteStreamChannel$2:<init>()),
		OioEventLoopGroup:<init>() to listOf(OioEventLoopGroup:<init>(int)),
		OioEventLoopGroup:<init>(int) to listOf(OioEventLoopGroup:<init>(int-ThreadFactory)),
		OioEventLoopGroup:<init>(int-ThreadFactory) to listOf(ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[])),
		DefaultRxtxChannelConfig:<init>(RxtxChannel) to listOf(DefaultChannelConfig:<init>(Channel)),
		DefaultRxtxChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultRxtxChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultRxtxChannelConfig:getOption(ChannelOption) to listOf(DefaultRxtxChannelConfig:getBaudrate(), DefaultRxtxChannelConfig:isDtr(), DefaultRxtxChannelConfig:isRts(), DefaultRxtxChannelConfig:getStopbits(), DefaultRxtxChannelConfig:getDatabits(), DefaultRxtxChannelConfig:getParitybit(), DefaultRxtxChannelConfig:getWaitTimeMillis(), DefaultRxtxChannelConfig:getReadTimeout(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultRxtxChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultRxtxChannelConfig:validate(ChannelOption-Object), DefaultRxtxChannelConfig:setBaudrate(int), DefaultRxtxChannelConfig:setDtr(boolean), DefaultRxtxChannelConfig:setRts(boolean), DefaultRxtxChannelConfig:setStopbits(RxtxChannelConfig$Stopbits), DefaultRxtxChannelConfig:setDatabits(RxtxChannelConfig$Databits), DefaultRxtxChannelConfig:setParitybit(RxtxChannelConfig$Paritybit), DefaultRxtxChannelConfig:setWaitTimeMillis(int), DefaultRxtxChannelConfig:setReadTimeout(int), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultRxtxChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultRxtxChannelConfig:setConnectTimeoutMillis(int)),
		DefaultRxtxChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultRxtxChannelConfig:setMaxMessagesPerRead(int)),
		DefaultRxtxChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultRxtxChannelConfig:setWriteSpinCount(int)),
		DefaultRxtxChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultRxtxChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultRxtxChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultRxtxChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultRxtxChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultRxtxChannelConfig:setAutoRead(boolean)),
		DefaultRxtxChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultRxtxChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultRxtxChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultRxtxChannelConfig:setWriteBufferLowWaterMark(int)),
		RxtxChannel$RxtxUnsafe$1:run() to listOf(RxtxChannel:doInit(), ChannelPromise:setSuccess(), RxtxChannel:isActive(), RxtxChannel:pipeline(), ChannelPipeline:fireChannelActive(), ChannelPromise:setFailure(Throwable), RxtxChannel$RxtxUnsafe:access$100(RxtxChannel$RxtxUnsafe)),
		RxtxChannel$RxtxUnsafe:<init>(RxtxChannel) to listOf(AbstractChannel$AbstractUnsafe:<init>(AbstractChannel)),
		RxtxChannel$RxtxUnsafe:connect(SocketAddress-SocketAddress-ChannelPromise) to listOf(RxtxChannel$RxtxUnsafe:ensureOpen(ChannelPromise), RxtxChannel:isActive(), RxtxChannel:doConnect(SocketAddress-SocketAddress), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannel:eventLoop(), RxtxChannel$RxtxUnsafe$1:<init>(RxtxChannel$RxtxUnsafe-ChannelPromise-boolean), EventLoop:schedule(Runnable-long-TimeUnit), RxtxChannel:doInit(), ChannelPromise:setSuccess(), RxtxChannel:isActive(), RxtxChannel:pipeline(), ChannelPipeline:fireChannelActive(), ChannelPromise:setFailure(Throwable), RxtxChannel$RxtxUnsafe:closeIfClosed()),
		RxtxChannel$RxtxUnsafe:<init>(RxtxChannel-RxtxChannel$1) to listOf(RxtxChannel$RxtxUnsafe:<init>(RxtxChannel)),
		RxtxChannel$RxtxUnsafe:access$100(RxtxChannel$RxtxUnsafe) to listOf(RxtxChannel$RxtxUnsafe:closeIfClosed()),
		RxtxChannel:<init>() to listOf(OioByteStreamChannel:<init>(Channel), DefaultRxtxChannelConfig:<init>(RxtxChannel)),
		RxtxChannel:newUnsafe() to listOf(RxtxChannel$RxtxUnsafe:<init>(RxtxChannel-RxtxChannel$1)),
		RxtxChannel:doConnect(SocketAddress-SocketAddress) to listOf(RxtxDeviceAddress:value(), CommPortIdentifier:getPortIdentifier(String), CommPortIdentifier:open(String-int)),
		RxtxChannel:doInit() to listOf(RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannelConfig$Databits:value(), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannelConfig$Stopbits:value(), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), RxtxChannelConfig$Paritybit:value(), SerialPort:setSerialPortParams(int-int-int-int), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), SerialPort:setDTR(boolean), RxtxChannel:config(), RxtxChannelConfig:getOption(ChannelOption), SerialPort:setRTS(boolean), SerialPort:getInputStream(), SerialPort:getOutputStream(), RxtxChannel:activate(InputStream-OutputStream)),
		RxtxChannel:localAddress() to listOf(OioByteStreamChannel:localAddress(), RxtxChannel:localAddress()),
		RxtxChannel:remoteAddress() to listOf(OioByteStreamChannel:remoteAddress(), RxtxChannel:remoteAddress()),
		RxtxChannel:doDisconnect() to listOf(RxtxChannel:doClose()),
		RxtxChannel:doClose() to listOf(OioByteStreamChannel:doClose(), SerialPort:removeEventListener(), SerialPort:close(), SerialPort:removeEventListener(), SerialPort:close()),
		RxtxChannel:remoteAddress0() to listOf(RxtxChannel:remoteAddress0()),
		RxtxChannel:localAddress0() to listOf(RxtxChannel:localAddress0()),
		RxtxChannel:config() to listOf(RxtxChannel:config()),
		RxtxChannel:<clinit>() to listOf(RxtxDeviceAddress:<init>(String)),
		RxtxChannelConfig$Databits:values() to listOf(RxtxChannelConfig$Databits[]:clone()),
		RxtxChannelConfig$Databits:valueOf(int) to listOf(RxtxChannelConfig$Databits:values()),
		RxtxChannelConfig$Databits:<clinit>() to listOf(RxtxChannelConfig$Databits:<init>(String-int-int), RxtxChannelConfig$Databits:<init>(String-int-int), RxtxChannelConfig$Databits:<init>(String-int-int), RxtxChannelConfig$Databits:<init>(String-int-int)),
		RxtxChannelConfig$Paritybit:values() to listOf(RxtxChannelConfig$Paritybit[]:clone()),
		RxtxChannelConfig$Paritybit:valueOf(int) to listOf(RxtxChannelConfig$Paritybit:values()),
		RxtxChannelConfig$Paritybit:<clinit>() to listOf(RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int), RxtxChannelConfig$Paritybit:<init>(String-int-int)),
		RxtxChannelConfig$Stopbits:values() to listOf(RxtxChannelConfig$Stopbits[]:clone()),
		RxtxChannelConfig$Stopbits:valueOf(int) to listOf(RxtxChannelConfig$Stopbits:values()),
		RxtxChannelConfig$Stopbits:<clinit>() to listOf(RxtxChannelConfig$Stopbits:<init>(String-int-int), RxtxChannelConfig$Stopbits:<init>(String-int-int), RxtxChannelConfig$Stopbits:<init>(String-int-int)),
		RxtxChannelOption:<init>(String) to listOf(ChannelOption:<init>(String)),
		RxtxChannelOption:<clinit>() to listOf(RxtxChannelOption:<init>(String), RxtxChannelOption:<init>(String), RxtxChannelOption:<init>(String), RxtxChannelOption:<init>(String), RxtxChannelOption:<init>(String), RxtxChannelOption:<init>(String), RxtxChannelOption:<init>(String), RxtxChannelOption:<init>(String)),
		DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel) to listOf(DefaultChannelConfig:<init>(Channel), PlatformDependent:canEnableTcpNoDelayByDefault(), DefaultSctpChannelConfig:setSctpNoDelay(boolean)),
		DefaultSctpChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultSctpChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultSctpChannelConfig:getOption(ChannelOption) to listOf(DefaultSctpChannelConfig:getReceiveBufferSize(), DefaultSctpChannelConfig:getSendBufferSize(), DefaultSctpChannelConfig:isSctpNoDelay(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultSctpChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultSctpChannelConfig:validate(ChannelOption-Object), DefaultSctpChannelConfig:setReceiveBufferSize(int), DefaultSctpChannelConfig:setSendBufferSize(int), DefaultSctpChannelConfig:setSctpNoDelay(boolean), DefaultSctpChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultSctpChannelConfig:isSctpNoDelay() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setSctpNoDelay(boolean) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:getSendBufferSize() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setSendBufferSize(int) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:getReceiveBufferSize() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setReceiveBufferSize(int) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:getInitMaxStreams() to listOf(SctpChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams) to listOf(SctpChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultSctpChannelConfig:setConnectTimeoutMillis(int)),
		DefaultSctpChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultSctpChannelConfig:setMaxMessagesPerRead(int)),
		DefaultSctpChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultSctpChannelConfig:setWriteSpinCount(int)),
		DefaultSctpChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultSctpChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultSctpChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSctpChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultSctpChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultSctpChannelConfig:setAutoRead(boolean)),
		DefaultSctpChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultSctpChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultSctpChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultSctpChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel) to listOf(DefaultChannelConfig:<init>(Channel)),
		DefaultSctpServerChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultSctpServerChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultSctpServerChannelConfig:getOption(ChannelOption) to listOf(DefaultSctpServerChannelConfig:getReceiveBufferSize(), DefaultSctpServerChannelConfig:getSendBufferSize(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultSctpServerChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultSctpServerChannelConfig:validate(ChannelOption-Object), DefaultSctpServerChannelConfig:setReceiveBufferSize(int), DefaultSctpServerChannelConfig:setSendBufferSize(int), DefaultSctpServerChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultSctpServerChannelConfig:getSendBufferSize() to listOf(SctpServerChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setSendBufferSize(int) to listOf(SctpServerChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:getReceiveBufferSize() to listOf(SctpServerChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setReceiveBufferSize(int) to listOf(SctpServerChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:getInitMaxStreams() to listOf(SctpServerChannel:getOption(SctpSocketOption), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setInitMaxStreams(SctpStandardSocketOptions$InitMaxStreams) to listOf(SctpServerChannel:setOption(SctpSocketOption-Object), ChannelException:<init>(Throwable)),
		DefaultSctpServerChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultSctpServerChannelConfig:setMaxMessagesPerRead(int)),
		DefaultSctpServerChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultSctpServerChannelConfig:setWriteSpinCount(int)),
		DefaultSctpServerChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultSctpServerChannelConfig:setConnectTimeoutMillis(int)),
		DefaultSctpServerChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultSctpServerChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultSctpServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSctpServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultSctpServerChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultSctpServerChannelConfig:setAutoRead(boolean)),
		DefaultSctpServerChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultSctpServerChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultSctpServerChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultSctpServerChannelConfig:setWriteBufferHighWaterMark(int)),
		NioSctpChannel$1:run() to listOf(NioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel$2:run() to listOf(NioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel:newSctpChannel() to listOf(SctpChannel:open(), ChannelException:<init>(String-Throwable)),
		NioSctpChannel:<init>() to listOf(NioSctpChannel:newSctpChannel(), NioSctpChannel:<init>(SctpChannel)),
		NioSctpChannel:<init>(SctpChannel) to listOf(NioSctpChannel:<init>(Channel-SctpChannel)),
		NioSctpChannel:<init>(Channel-SctpChannel) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), SctpChannel:configureBlocking(boolean), DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel), SctpNotificationHandler:<init>(SctpChannel), SctpChannel:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioSctpChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioSctpChannel:localAddress()),
		NioSctpChannel:remoteAddress() to listOf(AbstractNioMessageChannel:remoteAddress(), NioSctpChannel:remoteAddress()),
		NioSctpChannel:parent() to listOf(AbstractNioMessageChannel:parent(), NioSctpChannel:parent()),
		NioSctpChannel:association() to listOf(NioSctpChannel:javaChannel(), SctpChannel:association()),
		NioSctpChannel:allLocalAddresses() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getAllLocalAddresses()),
		NioSctpChannel:allRemoteAddresses() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getRemoteAddresses()),
		NioSctpChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioSctpChannel:javaChannel()),
		NioSctpChannel:isActive() to listOf(NioSctpChannel:javaChannel(), SctpChannel:isOpen(), NioSctpChannel:association()),
		NioSctpChannel:localAddress0() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getAllLocalAddresses()),
		NioSctpChannel:remoteAddress0() to listOf(NioSctpChannel:javaChannel(), SctpChannel:getRemoteAddresses()),
		NioSctpChannel:doBind(SocketAddress) to listOf(NioSctpChannel:javaChannel(), SctpChannel:bind(SocketAddress)),
		NioSctpChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioSctpChannel:javaChannel(), SctpChannel:bind(SocketAddress), NioSctpChannel:javaChannel(), SctpChannel:connect(SocketAddress), NioSctpChannel:selectionKey(), NioSctpChannel:doClose(), NioSctpChannel:doClose()),
		NioSctpChannel:doFinishConnect() to listOf(NioSctpChannel:javaChannel(), SctpChannel:finishConnect()),
		NioSctpChannel:doDisconnect() to listOf(NioSctpChannel:doClose()),
		NioSctpChannel:doClose() to listOf(NioSctpChannel:javaChannel(), SctpChannel:close()),
		NioSctpChannel:doReadMessages(List) to listOf(NioSctpChannel:javaChannel(), NioSctpChannel:config(), SctpChannelConfig:getRecvByteBufAllocator(), RecvByteBufAllocator:newHandle(), NioSctpChannel:config(), SctpChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBuffer(int-int), SctpChannel:receive(ByteBuffer-Object-NotificationHandler), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), SctpMessage:<init>(MessageInfo-ByteBuf), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release()),
		NioSctpChannel:doWriteMessages(Object[]-int-int-boolean) to listOf(SctpMessage:content(), ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-ByteBuffer), NioSctpChannel:association(), SctpMessage:streamIdentifier(), MessageInfo:createOutgoing(Association-SocketAddress-int), SctpMessage:protocolIdentifier(), MessageInfo:payloadProtocolID(int), SctpMessage:streamIdentifier(), MessageInfo:streamNumber(int), NioSctpChannel:javaChannel(), SctpChannel:send(ByteBuffer-MessageInfo), NioSctpChannel:selectionKey(), SctpMessage:release()),
		NioSctpChannel:bindAddress(InetAddress) to listOf(NioSctpChannel:newPromise(), NioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel:bindAddress(InetAddress-ChannelPromise) to listOf(NioSctpChannel:eventLoop(), NioEventLoop:inEventLoop(), NioSctpChannel:javaChannel(), SctpChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpChannel:eventLoop(), NioSctpChannel$1:<init>(NioSctpChannel-InetAddress-ChannelPromise), NioEventLoop:execute(Runnable)),
		NioSctpChannel:unbindAddress(InetAddress) to listOf(NioSctpChannel:newPromise(), NioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(NioSctpChannel:eventLoop(), NioEventLoop:inEventLoop(), NioSctpChannel:javaChannel(), SctpChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpChannel:eventLoop(), NioSctpChannel$2:<init>(NioSctpChannel-InetAddress-ChannelPromise), NioEventLoop:execute(Runnable)),
		NioSctpChannel:config() to listOf(NioSctpChannel:config()),
		NioSctpChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), InternalLoggerFactory:getInstance(Class)),
		NioSctpServerChannel$1:run() to listOf(NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel$2:run() to listOf(NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel:newSocket() to listOf(SctpServerChannel:open(), ChannelException:<init>(String-Throwable)),
		NioSctpServerChannel:<init>() to listOf(NioSctpServerChannel:newSocket(), AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), NioSctpServerChannel:javaChannel(), DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel)),
		NioSctpServerChannel:allLocalAddresses() to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:getAllLocalAddresses()),
		NioSctpServerChannel:isActive() to listOf(NioSctpServerChannel:isOpen(), NioSctpServerChannel:allLocalAddresses()),
		NioSctpServerChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioSctpServerChannel:localAddress()),
		NioSctpServerChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioSctpServerChannel:javaChannel()),
		NioSctpServerChannel:localAddress0() to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:getAllLocalAddresses()),
		NioSctpServerChannel:doBind(SocketAddress) to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannelConfig:getBacklog(), SctpServerChannel:bind(SocketAddress-int)),
		NioSctpServerChannel:doClose() to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:close()),
		NioSctpServerChannel:doReadMessages(List) to listOf(NioSctpServerChannel:javaChannel(), SctpServerChannel:accept(), NioSctpChannel:<init>(Channel-SctpChannel)),
		NioSctpServerChannel:bindAddress(InetAddress) to listOf(NioSctpServerChannel:newPromise(), NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel:bindAddress(InetAddress-ChannelPromise) to listOf(NioSctpServerChannel:eventLoop(), NioEventLoop:inEventLoop(), NioSctpServerChannel:javaChannel(), SctpServerChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpServerChannel:eventLoop(), NioSctpServerChannel$1:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), NioEventLoop:execute(Runnable)),
		NioSctpServerChannel:unbindAddress(InetAddress) to listOf(NioSctpServerChannel:newPromise(), NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		NioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(NioSctpServerChannel:eventLoop(), NioEventLoop:inEventLoop(), NioSctpServerChannel:javaChannel(), SctpServerChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSctpServerChannel:eventLoop(), NioSctpServerChannel$2:<init>(NioSctpServerChannel-InetAddress-ChannelPromise), NioEventLoop:execute(Runnable)),
		NioSctpServerChannel:remoteAddress() to listOf(NioSctpServerChannel:remoteAddress()),
		NioSctpServerChannel:config() to listOf(NioSctpServerChannel:config()),
		NioSctpServerChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		OioSctpChannel$1:run() to listOf(OioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel$2:run() to listOf(OioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel:openChannel() to listOf(SctpChannel:open(), ChannelException:<init>(String-Throwable)),
		OioSctpChannel:<init>() to listOf(OioSctpChannel:openChannel(), OioSctpChannel:<init>(SctpChannel)),
		OioSctpChannel:<init>(SctpChannel) to listOf(OioSctpChannel:<init>(Channel-SctpChannel)),
		OioSctpChannel:<init>(Channel-SctpChannel) to listOf(AbstractOioMessageChannel:<init>(Channel), SctpChannel:configureBlocking(boolean), SctpChannel:register(Selector-int), SctpChannel:register(Selector-int), SctpChannel:register(Selector-int), DefaultSctpChannelConfig:<init>(SctpChannel-SctpChannel), SctpNotificationHandler:<init>(SctpChannel), SctpChannel:close(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), SctpChannel:close(), InternalLogger:warn(String-Throwable)),
		OioSctpChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioSctpChannel:localAddress()),
		OioSctpChannel:remoteAddress() to listOf(AbstractOioMessageChannel:remoteAddress(), OioSctpChannel:remoteAddress()),
		OioSctpChannel:parent() to listOf(AbstractOioMessageChannel:parent(), OioSctpChannel:parent()),
		OioSctpChannel:isOpen() to listOf(SctpChannel:isOpen()),
		OioSctpChannel:doReadMessages(List) to listOf(OioSctpChannel:config(), SctpChannelConfig:getRecvByteBufAllocator(), RecvByteBufAllocator:newHandle(), OioSctpChannel:config(), SctpChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBuffer(int-int), SctpChannel:receive(ByteBuffer-Object-NotificationHandler), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), SctpMessage:<init>(MessageInfo-ByteBuf), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release(), ByteBuf:readableBytes(), RecvByteBufAllocator$Handle:record(int), ByteBuf:release()),
		OioSctpChannel:doWrite(Object[]-int-int) to listOf(SctpMessage:content(), ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-ByteBuffer), OioSctpChannel:association(), SctpMessage:streamIdentifier(), MessageInfo:createOutgoing(Association-SocketAddress-int), SctpMessage:protocolIdentifier(), MessageInfo:payloadProtocolID(int), SctpMessage:streamIdentifier(), MessageInfo:streamNumber(int), SctpChannel:send(ByteBuffer-MessageInfo), SctpMessage:release(), SctpMessage:release()),
		OioSctpChannel:association() to listOf(SctpChannel:association()),
		OioSctpChannel:isActive() to listOf(OioSctpChannel:isOpen(), OioSctpChannel:association()),
		OioSctpChannel:localAddress0() to listOf(SctpChannel:getAllLocalAddresses()),
		OioSctpChannel:allLocalAddresses() to listOf(SctpChannel:getAllLocalAddresses()),
		OioSctpChannel:remoteAddress0() to listOf(SctpChannel:getRemoteAddresses()),
		OioSctpChannel:allRemoteAddresses() to listOf(SctpChannel:getRemoteAddresses()),
		OioSctpChannel:doBind(SocketAddress) to listOf(SctpChannel:bind(SocketAddress)),
		OioSctpChannel:doConnect(SocketAddress-SocketAddress) to listOf(SctpChannel:bind(SocketAddress), SctpChannel:connect(SocketAddress), SctpChannel:finishConnect(), OioSctpChannel:doClose(), OioSctpChannel:doClose()),
		OioSctpChannel:doDisconnect() to listOf(OioSctpChannel:doClose()),
		OioSctpChannel:doClose() to listOf(OioSctpChannel:closeSelector(String-Selector), OioSctpChannel:closeSelector(String-Selector), OioSctpChannel:closeSelector(String-Selector), SctpChannel:close()),
		OioSctpChannel:closeSelector(String-Selector) to listOf(InternalLogger:warn(String-Throwable)),
		OioSctpChannel:bindAddress(InetAddress) to listOf(OioSctpChannel:newPromise(), OioSctpChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel:bindAddress(InetAddress-ChannelPromise) to listOf(OioSctpChannel:eventLoop(), EventLoop:inEventLoop(), SctpChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpChannel:eventLoop(), OioSctpChannel$1:<init>(OioSctpChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpChannel:unbindAddress(InetAddress) to listOf(OioSctpChannel:newPromise(), OioSctpChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(OioSctpChannel:eventLoop(), EventLoop:inEventLoop(), SctpChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpChannel:eventLoop(), OioSctpChannel$2:<init>(OioSctpChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpChannel:config() to listOf(OioSctpChannel:config()),
		OioSctpChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		OioSctpServerChannel$1:run() to listOf(OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel$2:run() to listOf(OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel:newServerSocket() to listOf(SctpServerChannel:open(), ChannelException:<init>(String-Throwable)),
		OioSctpServerChannel:<init>() to listOf(OioSctpServerChannel:newServerSocket(), OioSctpServerChannel:<init>(SctpServerChannel)),
		OioSctpServerChannel:<init>(SctpServerChannel) to listOf(AbstractOioMessageChannel:<init>(Channel), SctpServerChannel:configureBlocking(boolean), SctpServerChannel:register(Selector-int), DefaultSctpServerChannelConfig:<init>(SctpServerChannel-SctpServerChannel), SctpServerChannel:close(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), SctpServerChannel:close(), InternalLogger:warn(String-Throwable)),
		OioSctpServerChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioSctpServerChannel:localAddress()),
		OioSctpServerChannel:isOpen() to listOf(SctpServerChannel:isOpen()),
		OioSctpServerChannel:localAddress0() to listOf(SctpServerChannel:getAllLocalAddresses()),
		OioSctpServerChannel:allLocalAddresses() to listOf(SctpServerChannel:getAllLocalAddresses()),
		OioSctpServerChannel:isActive() to listOf(OioSctpServerChannel:isOpen(), OioSctpServerChannel:localAddress0()),
		OioSctpServerChannel:doBind(SocketAddress) to listOf(SctpServerChannelConfig:getBacklog(), SctpServerChannel:bind(SocketAddress-int)),
		OioSctpServerChannel:doClose() to listOf(InternalLogger:warn(String-Throwable), SctpServerChannel:close()),
		OioSctpServerChannel:doReadMessages(List) to listOf(OioSctpServerChannel:isActive(), SctpServerChannel:accept(), OioSctpChannel:<init>(Channel-SctpChannel), InternalLogger:warn(String-Throwable), SctpChannel:close(), InternalLogger:warn(String-Throwable)),
		OioSctpServerChannel:bindAddress(InetAddress) to listOf(OioSctpServerChannel:newPromise(), OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel:bindAddress(InetAddress-ChannelPromise) to listOf(OioSctpServerChannel:eventLoop(), EventLoop:inEventLoop(), SctpServerChannel:bindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpServerChannel:eventLoop(), OioSctpServerChannel$1:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpServerChannel:unbindAddress(InetAddress) to listOf(OioSctpServerChannel:newPromise(), OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise)),
		OioSctpServerChannel:unbindAddress(InetAddress-ChannelPromise) to listOf(OioSctpServerChannel:eventLoop(), EventLoop:inEventLoop(), SctpServerChannel:unbindAddress(InetAddress), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSctpServerChannel:eventLoop(), OioSctpServerChannel$2:<init>(OioSctpServerChannel-InetAddress-ChannelPromise), EventLoop:execute(Runnable)),
		OioSctpServerChannel:remoteAddress() to listOf(OioSctpServerChannel:remoteAddress()),
		OioSctpServerChannel:config() to listOf(OioSctpServerChannel:config()),
		OioSctpServerChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		SctpChannelOption:<init>(String) to listOf(ChannelOption:<init>(String)),
		SctpChannelOption:<clinit>() to listOf(SctpChannelOption:<init>(String), SctpChannelOption:<init>(String), SctpChannelOption:<init>(String), SctpChannelOption:<init>(String), SctpChannelOption:<init>(String), SctpChannelOption:<init>(String), SctpChannelOption:<init>(String)),
		SctpMessage:<init>(int-int-ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf)),
		SctpMessage:<init>(MessageInfo-ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf), MessageInfo:streamNumber(), MessageInfo:payloadProtocolID()),
		SctpMessage:isComplete() to listOf(MessageInfo:isComplete()),
		SctpMessage:equals(Object) to listOf(SctpMessage:content(), SctpMessage:content(), ByteBuf:equals(Object)),
		SctpMessage:hashCode() to listOf(SctpMessage:content(), ByteBuf:hashCode()),
		SctpMessage:copy() to listOf(SctpMessage:content(), ByteBuf:copy(), SctpMessage:<init>(int-int-ByteBuf), SctpMessage:content(), ByteBuf:copy(), SctpMessage:<init>(MessageInfo-ByteBuf), SctpMessage:copy()),
		SctpMessage:duplicate() to listOf(SctpMessage:content(), ByteBuf:duplicate(), SctpMessage:<init>(int-int-ByteBuf), SctpMessage:content(), ByteBuf:copy(), SctpMessage:<init>(MessageInfo-ByteBuf), SctpMessage:duplicate()),
		SctpMessage:retain() to listOf(DefaultByteBufHolder:retain(), SctpMessage:retain(), SctpMessage:retain()),
		SctpMessage:retain(int) to listOf(DefaultByteBufHolder:retain(int), SctpMessage:retain(int), SctpMessage:retain(int)),
		SctpMessage:toString() to listOf(SctpMessage:refCnt(), SctpMessage:content(), ByteBufUtil:hexDump(ByteBuf)),
		SctpNotificationHandler:<init>(SctpChannel) to listOf(AbstractNotificationHandler:<init>()),
		SctpNotificationHandler:handleNotification(AssociationChangeNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification)),
		SctpNotificationHandler:handleNotification(PeerAddressChangeNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification)),
		SctpNotificationHandler:handleNotification(SendFailedNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification)),
		SctpNotificationHandler:handleNotification(ShutdownNotification-Object) to listOf(SctpNotificationHandler:fireEvent(Notification), SctpChannel:close()),
		SctpNotificationHandler:fireEvent(Notification) to listOf(SctpChannel:pipeline(), ChannelPipeline:fireUserEventTriggered(Object)),
		SimpleChannelInboundHandler:<init>() to listOf(SimpleChannelInboundHandler:<init>(boolean)),
		SimpleChannelInboundHandler:<init>(boolean) to listOf(ChannelInboundHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		SimpleChannelInboundHandler:<init>(Class) to listOf(SimpleChannelInboundHandler:<init>(Class-boolean)),
		SimpleChannelInboundHandler:<init>(Class-boolean) to listOf(ChannelInboundHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		SimpleChannelInboundHandler:acceptInboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		SimpleChannelInboundHandler:channelRead(ChannelHandlerContext-Object) to listOf(SimpleChannelInboundHandler:acceptInboundMessage(Object), SimpleChannelInboundHandler:channelRead0(ChannelHandlerContext-Object), ChannelHandlerContext:fireChannelRead(Object), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object)),
		SingleThreadEventLoop:<init>(EventLoopGroup-ThreadFactory-boolean) to listOf(SingleThreadEventExecutor:<init>(EventExecutorGroup-ThreadFactory-boolean)),
		SingleThreadEventLoop:parent() to listOf(SingleThreadEventExecutor:parent(), SingleThreadEventLoop:parent()),
		SingleThreadEventLoop:next() to listOf(SingleThreadEventExecutor:next(), SingleThreadEventLoop:next()),
		SingleThreadEventLoop:register(Channel) to listOf(Channel:newPromise(), SingleThreadEventLoop:register(Channel-ChannelPromise)),
		SingleThreadEventLoop:register(Channel-ChannelPromise) to listOf(Channel:unsafe(), Channel$Unsafe:register(EventLoop-ChannelPromise)),
		ChannelInputShutdownEvent:<clinit>() to listOf(ChannelInputShutdownEvent:<init>()),
		DatagramPacket:<init>(ByteBuf-InetSocketAddress) to listOf(DefaultAddressedEnvelope:<init>(Object-SocketAddress)),
		DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress) to listOf(DefaultAddressedEnvelope:<init>(Object-SocketAddress-SocketAddress)),
		DatagramPacket:copy() to listOf(DatagramPacket:content(), ByteBuf:copy(), DatagramPacket:recipient(), DatagramPacket:sender(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), DatagramPacket:copy()),
		DatagramPacket:duplicate() to listOf(DatagramPacket:content(), ByteBuf:duplicate(), DatagramPacket:recipient(), DatagramPacket:sender(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), DatagramPacket:duplicate()),
		DatagramPacket:retain() to listOf(DefaultAddressedEnvelope:retain(), DatagramPacket:retain(), DatagramPacket:retain(), DatagramPacket:retain()),
		DatagramPacket:retain(int) to listOf(DefaultAddressedEnvelope:retain(int), DatagramPacket:retain(int), DatagramPacket:retain(int), DatagramPacket:retain(int)),
		DatagramPacket:content() to listOf(DefaultAddressedEnvelope:content()),
		DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket) to listOf(DefaultChannelConfig:<init>(Channel), DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultDatagramChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultDatagramChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultDatagramChannelConfig:getOption(ChannelOption) to listOf(DefaultDatagramChannelConfig:isBroadcast(), DefaultDatagramChannelConfig:getReceiveBufferSize(), DefaultDatagramChannelConfig:getSendBufferSize(), DefaultDatagramChannelConfig:isReuseAddress(), DefaultDatagramChannelConfig:isLoopbackModeDisabled(), DefaultDatagramChannelConfig:getInterface(), DefaultDatagramChannelConfig:getNetworkInterface(), DefaultDatagramChannelConfig:getTimeToLive(), DefaultDatagramChannelConfig:getTrafficClass(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultDatagramChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultDatagramChannelConfig:validate(ChannelOption-Object), DefaultDatagramChannelConfig:setBroadcast(boolean), DefaultDatagramChannelConfig:setReceiveBufferSize(int), DefaultDatagramChannelConfig:setSendBufferSize(int), DefaultDatagramChannelConfig:setReuseAddress(boolean), DefaultDatagramChannelConfig:setLoopbackModeDisabled(boolean), DefaultDatagramChannelConfig:setInterface(InetAddress), DefaultDatagramChannelConfig:setNetworkInterface(NetworkInterface), DefaultDatagramChannelConfig:setTimeToLive(int), DefaultDatagramChannelConfig:setTrafficClass(int), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultDatagramChannelConfig:isBroadcast() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setBroadcast(boolean) to listOf(PlatformDependent:isWindows(), PlatformDependent:isRoot(), InternalLogger:warn(String), ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getInterface() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setInterface(InetAddress) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:isLoopbackModeDisabled() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setLoopbackModeDisabled(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getNetworkInterface() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setNetworkInterface(NetworkInterface) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:isReuseAddress() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setReuseAddress(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getReceiveBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setReceiveBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getSendBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setSendBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getTimeToLive() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setTimeToLive(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:getTrafficClass() to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setTrafficClass(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultDatagramChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultDatagramChannelConfig:setWriteSpinCount(int)),
		DefaultDatagramChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultDatagramChannelConfig:setConnectTimeoutMillis(int)),
		DefaultDatagramChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultDatagramChannelConfig:setMaxMessagesPerRead(int)),
		DefaultDatagramChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultDatagramChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultDatagramChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultDatagramChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultDatagramChannelConfig:setAutoRead(boolean)),
		DefaultDatagramChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultDatagramChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultDatagramChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultDatagramChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultDatagramChannelConfig:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), FixedRecvByteBufAllocator:<init>(int)),
		DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket) to listOf(DefaultChannelConfig:<init>(Channel)),
		DefaultServerSocketChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultServerSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultServerSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultServerSocketChannelConfig:getReceiveBufferSize(), DefaultServerSocketChannelConfig:isReuseAddress(), DefaultServerSocketChannelConfig:getBacklog(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultServerSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultServerSocketChannelConfig:validate(ChannelOption-Object), DefaultServerSocketChannelConfig:setReceiveBufferSize(int), DefaultServerSocketChannelConfig:setReuseAddress(boolean), DefaultServerSocketChannelConfig:setBacklog(int), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultServerSocketChannelConfig:isReuseAddress() to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:setReuseAddress(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:getReceiveBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:setReceiveBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultServerSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultServerSocketChannelConfig:setWriteSpinCount(int)),
		DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultServerSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultServerSocketChannelConfig:setAutoRead(boolean)),
		DefaultServerSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultServerSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultServerSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultServerSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultSocketChannelConfig:<init>(SocketChannel-Socket) to listOf(DefaultChannelConfig:<init>(Channel), PlatformDependent:canEnableTcpNoDelayByDefault(), DefaultSocketChannelConfig:setTcpNoDelay(boolean)),
		DefaultSocketChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultSocketChannelConfig:getReceiveBufferSize(), DefaultSocketChannelConfig:getSendBufferSize(), DefaultSocketChannelConfig:isTcpNoDelay(), DefaultSocketChannelConfig:isKeepAlive(), DefaultSocketChannelConfig:isReuseAddress(), DefaultSocketChannelConfig:getSoLinger(), DefaultSocketChannelConfig:getTrafficClass(), DefaultSocketChannelConfig:isAllowHalfClosure(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultSocketChannelConfig:validate(ChannelOption-Object), DefaultSocketChannelConfig:setReceiveBufferSize(int), DefaultSocketChannelConfig:setSendBufferSize(int), DefaultSocketChannelConfig:setTcpNoDelay(boolean), DefaultSocketChannelConfig:setKeepAlive(boolean), DefaultSocketChannelConfig:setReuseAddress(boolean), DefaultSocketChannelConfig:setSoLinger(int), DefaultSocketChannelConfig:setTrafficClass(int), DefaultSocketChannelConfig:setAllowHalfClosure(boolean), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultSocketChannelConfig:getReceiveBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:getSendBufferSize() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:getSoLinger() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:getTrafficClass() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:isKeepAlive() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:isReuseAddress() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:isTcpNoDelay() to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setKeepAlive(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setReceiveBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setReuseAddress(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setSendBufferSize(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setSoLinger(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setTcpNoDelay(boolean) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setTrafficClass(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultSocketChannelConfig:setWriteSpinCount(int)),
		DefaultSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultSocketChannelConfig:setAutoRead(boolean)),
		DefaultSocketChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultSocketChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultSocketChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultSocketChannelConfig:setWriteBufferLowWaterMark(int)),
		InternetProtocolFamily:values() to listOf(InternetProtocolFamily[]:clone()),
		InternetProtocolFamily:<clinit>() to listOf(InternetProtocolFamily:<init>(String-int), InternetProtocolFamily:<init>(String-int)),
		NioDatagramChannel:newSocket() to listOf(ChannelException:<init>(String-Throwable)),
		NioDatagramChannel:newSocket(InternetProtocolFamily) to listOf(NioDatagramChannel:newSocket(), PlatformDependent:javaVersion(), ProtocolFamilyConverter:convert(InternetProtocolFamily), ChannelException:<init>(String-Throwable)),
		NioDatagramChannel:<init>() to listOf(NioDatagramChannel:newSocket(), NioDatagramChannel:<init>(DatagramChannel)),
		NioDatagramChannel:<init>(InternetProtocolFamily) to listOf(NioDatagramChannel:newSocket(InternetProtocolFamily), NioDatagramChannel:<init>(DatagramChannel)),
		NioDatagramChannel:<init>(DatagramChannel) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), NioDatagramChannelConfig:<init>(NioDatagramChannel-DatagramChannel)),
		NioDatagramChannel:isActive() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:isConnected() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioDatagramChannel:javaChannel()),
		NioDatagramChannel:localAddress0() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:remoteAddress0() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doBind(SocketAddress) to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioDatagramChannel:javaChannel(), NioDatagramChannel:javaChannel(), NioDatagramChannel:doClose(), NioDatagramChannel:doClose()),
		NioDatagramChannel:doDisconnect() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doClose() to listOf(NioDatagramChannel:javaChannel()),
		NioDatagramChannel:doReadMessages(List) to listOf(NioDatagramChannel:javaChannel(), NioDatagramChannel:config(), DatagramChannelConfig:getRecvByteBufAllocator(), RecvByteBufAllocator:newHandle(), DatagramChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:allocate(ByteBufAllocator), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBuffer(int-int), ByteBuf:release(), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), RecvByteBufAllocator$Handle:record(int), NioDatagramChannel:localAddress(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:release(), ByteBuf:release()),
		NioDatagramChannel:doWriteMessages(Object[]-int-int-boolean) to listOf(AddressedEnvelope:recipient(), AddressedEnvelope:content(), ByteBufHolder:content(), StringUtil:simpleClassName(Object), ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-ByteBuffer), NioDatagramChannel:javaChannel(), NioDatagramChannel:javaChannel(), NioDatagramChannel:selectionKey(), ReferenceCountUtil:release(Object)),
		NioDatagramChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioDatagramChannel:localAddress()),
		NioDatagramChannel:remoteAddress() to listOf(AbstractNioMessageChannel:remoteAddress(), NioDatagramChannel:remoteAddress()),
		NioDatagramChannel:joinGroup(InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:joinGroup(InetAddress-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetAddress-ChannelPromise) to listOf(NioDatagramChannel:localAddress(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(PlatformDependent:javaVersion(), NioDatagramChannel:javaChannel(), NioDatagramChannel:javaChannel(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:leaveGroup(InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:leaveGroup(InetAddress-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetAddress-ChannelPromise) to listOf(NioDatagramChannel:localAddress(), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(PlatformDependent:javaVersion(), ChannelPromise:setSuccess()),
		NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise)),
		NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(PlatformDependent:javaVersion(), ChannelPromise:setFailure(Throwable), ChannelPromise:setSuccess()),
		NioDatagramChannel:block(InetAddress-InetAddress) to listOf(NioDatagramChannel:newPromise(), NioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise)),
		NioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise) to listOf(NioDatagramChannel:localAddress(), NioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		NioDatagramChannel:config() to listOf(NioDatagramChannel:config()),
		NioDatagramChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		NioDatagramChannelConfig:<init>(NioDatagramChannel-DatagramChannel) to listOf(DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket)),
		NioDatagramChannelConfig:getTimeToLive() to listOf(NioDatagramChannelConfig:getOption0(Object)),
		NioDatagramChannelConfig:setTimeToLive(int) to listOf(NioDatagramChannelConfig:setOption0(Object-Object)),
		NioDatagramChannelConfig:getInterface() to listOf(NioDatagramChannelConfig:getNetworkInterface()),
		NioDatagramChannelConfig:setInterface(InetAddress) to listOf(NioDatagramChannelConfig:setNetworkInterface(NetworkInterface), ChannelException:<init>(Throwable)),
		NioDatagramChannelConfig:getNetworkInterface() to listOf(NioDatagramChannelConfig:getOption0(Object)),
		NioDatagramChannelConfig:setNetworkInterface(NetworkInterface) to listOf(NioDatagramChannelConfig:setOption0(Object-Object)),
		NioDatagramChannelConfig:isLoopbackModeDisabled() to listOf(NioDatagramChannelConfig:getOption0(Object)),
		NioDatagramChannelConfig:setLoopbackModeDisabled(boolean) to listOf(NioDatagramChannelConfig:setOption0(Object-Object)),
		NioDatagramChannelConfig:getOption0(Object) to listOf(PlatformDependent:javaVersion(), ChannelException:<init>(Throwable)),
		NioDatagramChannelConfig:setOption0(Object-Object) to listOf(PlatformDependent:javaVersion(), ChannelException:<init>(Throwable)),
		NioServerSocketChannel:newSocket() to listOf(ChannelException:<init>(String-Throwable)),
		NioServerSocketChannel:<init>() to listOf(NioServerSocketChannel:newSocket(), AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), NioServerSocketChannel:javaChannel(), DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket)),
		NioServerSocketChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioServerSocketChannel:localAddress()),
		NioServerSocketChannel:isActive() to listOf(NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:localAddress0() to listOf(NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:doBind(SocketAddress) to listOf(NioServerSocketChannel:javaChannel(), ServerSocketChannelConfig:getBacklog()),
		NioServerSocketChannel:doClose() to listOf(NioServerSocketChannel:javaChannel()),
		NioServerSocketChannel:doReadMessages(List) to listOf(NioServerSocketChannel:javaChannel(), NioSocketChannel:<init>(Channel-SocketChannel), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		NioServerSocketChannel:remoteAddress() to listOf(NioServerSocketChannel:remoteAddress()),
		NioServerSocketChannel:config() to listOf(NioServerSocketChannel:config()),
		NioServerSocketChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), InternalLoggerFactory:getInstance(Class)),
		NioSocketChannel$1:initialValue() to listOf(NioSocketChannel$1:initialValue()),
		NioSocketChannel$2:run() to listOf(NioSocketChannel:shutdownOutput(ChannelPromise)),
		NioSocketChannel:newSocket() to listOf(ChannelException:<init>(String-Throwable)),
		NioSocketChannel:<init>() to listOf(NioSocketChannel:newSocket(), NioSocketChannel:<init>(SocketChannel)),
		NioSocketChannel:<init>(SocketChannel) to listOf(NioSocketChannel:<init>(Channel-SocketChannel)),
		NioSocketChannel:<init>(Channel-SocketChannel) to listOf(AbstractNioByteChannel:<init>(Channel-SelectableChannel), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), DefaultSocketChannelConfig:<init>(SocketChannel-Socket)),
		NioSocketChannel:parent() to listOf(AbstractNioByteChannel:parent(), NioSocketChannel:parent()),
		NioSocketChannel:javaChannel() to listOf(AbstractNioByteChannel:javaChannel(), NioSocketChannel:javaChannel()),
		NioSocketChannel:isActive() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:isInputShutdown() to listOf(AbstractNioByteChannel:isInputShutdown()),
		NioSocketChannel:localAddress() to listOf(AbstractNioByteChannel:localAddress(), NioSocketChannel:localAddress()),
		NioSocketChannel:remoteAddress() to listOf(AbstractNioByteChannel:remoteAddress(), NioSocketChannel:remoteAddress()),
		NioSocketChannel:isOutputShutdown() to listOf(NioSocketChannel:javaChannel(), NioSocketChannel:isActive()),
		NioSocketChannel:shutdownOutput() to listOf(NioSocketChannel:newPromise(), NioSocketChannel:shutdownOutput(ChannelPromise)),
		NioSocketChannel:shutdownOutput(ChannelPromise) to listOf(NioSocketChannel:eventLoop(), EventLoop:inEventLoop(), NioSocketChannel:javaChannel(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), NioSocketChannel$2:<init>(NioSocketChannel-ChannelPromise), EventLoop:execute(Runnable)),
		NioSocketChannel:localAddress0() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:remoteAddress0() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doBind(SocketAddress) to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioSocketChannel:javaChannel(), NioSocketChannel:javaChannel(), NioSocketChannel:selectionKey(), NioSocketChannel:doClose(), NioSocketChannel:doClose()),
		NioSocketChannel:doFinishConnect() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doDisconnect() to listOf(NioSocketChannel:doClose()),
		NioSocketChannel:doClose() to listOf(NioSocketChannel:javaChannel()),
		NioSocketChannel:doReadBytes(ByteBuf) to listOf(NioSocketChannel:javaChannel(), ByteBuf:writableBytes(), ByteBuf:writeBytes(ScatteringByteChannel-int)),
		NioSocketChannel:doWriteBytes(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), NioSocketChannel:javaChannel(), ByteBuf:readBytes(GatheringByteChannel-int), NioSocketChannel:updateOpWrite(long-long-boolean)),
		NioSocketChannel:doWriteFileRegion(FileRegion-boolean) to listOf(FileRegion:transfered(), FileRegion:count(), NioSocketChannel:javaChannel(), FileRegion:transferTo(WritableByteChannel-long), NioSocketChannel:updateOpWrite(long-long-boolean)),
		NioSocketChannel:doWrite(Object[]-int-int) to listOf(AbstractNioByteChannel:doWrite(Object[]-int-int), NioSocketChannel:getNioBufferArray(), AbstractNioByteChannel:doWrite(Object[]-int-int), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:isDirect(), ByteBuf:nioBufferCount(), NioSocketChannel:doubleNioBufferArray(ByteBuffer[]-int), ByteBuf:internalNioBuffer(int-int), ByteBuf:nioBuffers(), NioSocketChannel:doubleNioBufferArray(ByteBuffer[]-int), NioSocketChannel:alloc(), ByteBufAllocator:directBuffer(int), ByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:release(), NioSocketChannel:doubleNioBufferArray(ByteBuffer[]-int), ByteBuf:internalNioBuffer(int-int), NioSocketChannel:javaChannel(), NioSocketChannel:config(), SocketChannelConfig:getWriteSpinCount(), NioSocketChannel:updateOpWrite(long-long-boolean), ReferenceCounted:release(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:release(), ByteBuf:readerIndex(int), ByteBuf:release()),
		NioSocketChannel:config() to listOf(NioSocketChannel:config()),
		NioSocketChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean), InternalLoggerFactory:getInstance(Class), NioSocketChannel$1:<init>()),
		ProtocolFamilyConverter$1:<clinit>() to listOf(InternetProtocolFamily:values(), InternetProtocolFamily:ordinal(), InternetProtocolFamily:ordinal()),
		ProtocolFamilyConverter:convert(InternetProtocolFamily) to listOf(InternetProtocolFamily:ordinal()),
		DefaultOioServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket) to listOf(DefaultServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket)),
		DefaultOioServerSocketChannelConfig:getOptions() to listOf(DefaultServerSocketChannelConfig:getOptions(), DefaultOioServerSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultOioServerSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultOioServerSocketChannelConfig:getSoTimeout(), DefaultServerSocketChannelConfig:getOption(ChannelOption)),
		DefaultOioServerSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultOioServerSocketChannelConfig:validate(ChannelOption-Object), DefaultOioServerSocketChannelConfig:setSoTimeout(int), DefaultServerSocketChannelConfig:setOption(ChannelOption-Object)),
		DefaultOioServerSocketChannelConfig:setSoTimeout(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultOioServerSocketChannelConfig:getSoTimeout() to listOf(ChannelException:<init>(Throwable)),
		DefaultOioServerSocketChannelConfig:setBacklog(int) to listOf(DefaultServerSocketChannelConfig:setBacklog(int), DefaultOioServerSocketChannelConfig:setBacklog(int)),
		DefaultOioServerSocketChannelConfig:setReuseAddress(boolean) to listOf(DefaultServerSocketChannelConfig:setReuseAddress(boolean), DefaultOioServerSocketChannelConfig:setReuseAddress(boolean)),
		DefaultOioServerSocketChannelConfig:setReceiveBufferSize(int) to listOf(DefaultServerSocketChannelConfig:setReceiveBufferSize(int), DefaultOioServerSocketChannelConfig:setReceiveBufferSize(int)),
		DefaultOioServerSocketChannelConfig:setPerformancePreferences(int-int-int) to listOf(DefaultServerSocketChannelConfig:setPerformancePreferences(int-int-int), DefaultOioServerSocketChannelConfig:setPerformancePreferences(int-int-int)),
		DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultServerSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioServerSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultServerSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioServerSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultOioServerSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultServerSocketChannelConfig:setWriteSpinCount(int), DefaultOioServerSocketChannelConfig:setWriteSpinCount(int), DefaultOioServerSocketChannelConfig:setWriteSpinCount(int)),
		DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultServerSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioServerSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioServerSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultOioServerSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultServerSocketChannelConfig:setAutoRead(boolean), DefaultOioServerSocketChannelConfig:setAutoRead(boolean), DefaultOioServerSocketChannelConfig:setAutoRead(boolean)),
		DefaultOioSocketChannelConfig:<init>(SocketChannel-Socket) to listOf(DefaultSocketChannelConfig:<init>(SocketChannel-Socket)),
		DefaultOioSocketChannelConfig:getOptions() to listOf(DefaultSocketChannelConfig:getOptions(), DefaultOioSocketChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultOioSocketChannelConfig:getOption(ChannelOption) to listOf(DefaultOioSocketChannelConfig:getSoTimeout(), DefaultSocketChannelConfig:getOption(ChannelOption)),
		DefaultOioSocketChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultOioSocketChannelConfig:validate(ChannelOption-Object), DefaultOioSocketChannelConfig:setSoTimeout(int), DefaultSocketChannelConfig:setOption(ChannelOption-Object)),
		DefaultOioSocketChannelConfig:setSoTimeout(int) to listOf(ChannelException:<init>(Throwable)),
		DefaultOioSocketChannelConfig:getSoTimeout() to listOf(ChannelException:<init>(Throwable)),
		DefaultOioSocketChannelConfig:setTcpNoDelay(boolean) to listOf(DefaultSocketChannelConfig:setTcpNoDelay(boolean), DefaultOioSocketChannelConfig:setTcpNoDelay(boolean)),
		DefaultOioSocketChannelConfig:setSoLinger(int) to listOf(DefaultSocketChannelConfig:setSoLinger(int), DefaultOioSocketChannelConfig:setSoLinger(int)),
		DefaultOioSocketChannelConfig:setSendBufferSize(int) to listOf(DefaultSocketChannelConfig:setSendBufferSize(int), DefaultOioSocketChannelConfig:setSendBufferSize(int)),
		DefaultOioSocketChannelConfig:setReceiveBufferSize(int) to listOf(DefaultSocketChannelConfig:setReceiveBufferSize(int), DefaultOioSocketChannelConfig:setReceiveBufferSize(int)),
		DefaultOioSocketChannelConfig:setKeepAlive(boolean) to listOf(DefaultSocketChannelConfig:setKeepAlive(boolean), DefaultOioSocketChannelConfig:setKeepAlive(boolean)),
		DefaultOioSocketChannelConfig:setTrafficClass(int) to listOf(DefaultSocketChannelConfig:setTrafficClass(int), DefaultOioSocketChannelConfig:setTrafficClass(int)),
		DefaultOioSocketChannelConfig:setReuseAddress(boolean) to listOf(DefaultSocketChannelConfig:setReuseAddress(boolean), DefaultOioSocketChannelConfig:setReuseAddress(boolean)),
		DefaultOioSocketChannelConfig:setPerformancePreferences(int-int-int) to listOf(DefaultSocketChannelConfig:setPerformancePreferences(int-int-int), DefaultOioSocketChannelConfig:setPerformancePreferences(int-int-int)),
		DefaultOioSocketChannelConfig:setAllowHalfClosure(boolean) to listOf(DefaultSocketChannelConfig:setAllowHalfClosure(boolean), DefaultOioSocketChannelConfig:setAllowHalfClosure(boolean)),
		DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int), DefaultOioSocketChannelConfig:setConnectTimeoutMillis(int)),
		DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int), DefaultOioSocketChannelConfig:setMaxMessagesPerRead(int)),
		DefaultOioSocketChannelConfig:setWriteSpinCount(int) to listOf(DefaultSocketChannelConfig:setWriteSpinCount(int), DefaultOioSocketChannelConfig:setWriteSpinCount(int), DefaultOioSocketChannelConfig:setWriteSpinCount(int)),
		DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator), DefaultOioSocketChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultOioSocketChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultOioSocketChannelConfig:setAutoRead(boolean) to listOf(DefaultSocketChannelConfig:setAutoRead(boolean), DefaultOioSocketChannelConfig:setAutoRead(boolean), DefaultOioSocketChannelConfig:setAutoRead(boolean)),
		OioDatagramChannel:newSocket() to listOf(ChannelException:<init>(String-Throwable)),
		OioDatagramChannel:<init>() to listOf(OioDatagramChannel:newSocket(), OioDatagramChannel:<init>(MulticastSocket)),
		OioDatagramChannel:<init>(MulticastSocket) to listOf(AbstractOioMessageChannel:<init>(Channel), ChannelException:<init>(String-Throwable), DefaultDatagramChannelConfig:<init>(DatagramChannel-DatagramSocket)),
		OioDatagramChannel:isActive() to listOf(OioDatagramChannel:isOpen()),
		OioDatagramChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioDatagramChannel:localAddress()),
		OioDatagramChannel:remoteAddress() to listOf(AbstractOioMessageChannel:remoteAddress(), OioDatagramChannel:remoteAddress()),
		OioDatagramChannel:doConnect(SocketAddress-SocketAddress) to listOf(InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		OioDatagramChannel:doReadMessages(List) to listOf(OioDatagramChannel:config(), DatagramChannelConfig:getRecvByteBufAllocator(), RecvByteBufAllocator:newHandle(), DatagramChannelConfig:getAllocator(), RecvByteBufAllocator$Handle:guess(), ByteBufAllocator:heapBuffer(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:capacity(), OioDatagramChannel:remoteAddress(), RecvByteBufAllocator$Handle:record(int), ByteBuf:writerIndex(int), OioDatagramChannel:localAddress(), DatagramPacket:<init>(ByteBuf-InetSocketAddress-InetSocketAddress), ByteBuf:release(), ByteBuf:release(), ByteBuf:release(), PlatformDependent:throwException(Throwable), ByteBuf:release(), ByteBuf:release()),
		OioDatagramChannel:doWrite(Object[]-int-int) to listOf(AddressedEnvelope:recipient(), AddressedEnvelope:content(), ByteBufHolder:content(), StringUtil:simpleClassName(Object), ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), ReferenceCountUtil:release(Object)),
		OioDatagramChannel:joinGroup(InetAddress) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:joinGroup(InetAddress-ChannelPromise)),
		OioDatagramChannel:joinGroup(InetAddress-ChannelPromise) to listOf(OioDatagramChannel:ensureBound(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		OioDatagramChannel:joinGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(OioDatagramChannel:ensureBound(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:joinGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:ensureBound() to listOf(OioDatagramChannel:isActive()),
		OioDatagramChannel:leaveGroup(InetAddress) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:leaveGroup(InetAddress-ChannelPromise)),
		OioDatagramChannel:leaveGroup(InetAddress-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface) to listOf(OioDatagramChannel:newPromise(), OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise)),
		OioDatagramChannel:leaveGroup(InetSocketAddress-NetworkInterface-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:leaveGroup(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:block(InetAddress-NetworkInterface-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:block(InetAddress-InetAddress) to listOf(OioDatagramChannel:newFailedFuture(Throwable)),
		OioDatagramChannel:block(InetAddress-InetAddress-ChannelPromise) to listOf(ChannelPromise:setFailure(Throwable)),
		OioDatagramChannel:config() to listOf(OioDatagramChannel:config()),
		OioDatagramChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		OioServerSocketChannel:newServerSocket() to listOf(ChannelException:<init>(String-Throwable)),
		OioServerSocketChannel:<init>() to listOf(OioServerSocketChannel:newServerSocket(), OioServerSocketChannel:<init>(ServerSocket)),
		OioServerSocketChannel:<init>(ServerSocket) to listOf(AbstractOioMessageChannel:<init>(Channel), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), DefaultOioServerSocketChannelConfig:<init>(ServerSocketChannel-ServerSocket)),
		OioServerSocketChannel:localAddress() to listOf(AbstractOioMessageChannel:localAddress(), OioServerSocketChannel:localAddress()),
		OioServerSocketChannel:isActive() to listOf(OioServerSocketChannel:isOpen()),
		OioServerSocketChannel:doBind(SocketAddress) to listOf(OioServerSocketChannelConfig:getBacklog()),
		OioServerSocketChannel:doReadMessages(List) to listOf(OioSocketChannel:<init>(Channel-Socket), InternalLogger:warn(String-Throwable), InternalLogger:warn(String-Throwable)),
		OioServerSocketChannel:remoteAddress() to listOf(OioServerSocketChannel:remoteAddress()),
		OioServerSocketChannel:config() to listOf(OioServerSocketChannel:config(), OioServerSocketChannel:config()),
		OioServerSocketChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		OioSocketChannel$1:run() to listOf(OioSocketChannel:shutdownOutput(ChannelPromise)),
		OioSocketChannel:<init>() to listOf(OioSocketChannel:<init>(Socket)),
		OioSocketChannel:<init>(Socket) to listOf(OioSocketChannel:<init>(Channel-Socket)),
		OioSocketChannel:<init>(Channel-Socket) to listOf(OioByteStreamChannel:<init>(Channel), DefaultOioSocketChannelConfig:<init>(SocketChannel-Socket), OioSocketChannel:activate(InputStream-OutputStream), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable), InternalLogger:warn(String-Throwable)),
		OioSocketChannel:parent() to listOf(OioByteStreamChannel:parent(), OioSocketChannel:parent()),
		OioSocketChannel:isInputShutdown() to listOf(OioByteStreamChannel:isInputShutdown()),
		OioSocketChannel:isOutputShutdown() to listOf(OioSocketChannel:isActive()),
		OioSocketChannel:shutdownOutput() to listOf(OioSocketChannel:newPromise(), OioSocketChannel:shutdownOutput(ChannelPromise)),
		OioSocketChannel:doReadBytes(ByteBuf) to listOf(OioByteStreamChannel:doReadBytes(ByteBuf)),
		OioSocketChannel:shutdownOutput(ChannelPromise) to listOf(OioSocketChannel:eventLoop(), EventLoop:inEventLoop(), ChannelPromise:setSuccess(), ChannelPromise:setFailure(Throwable), OioSocketChannel$1:<init>(OioSocketChannel-ChannelPromise), EventLoop:execute(Runnable)),
		OioSocketChannel:localAddress() to listOf(OioByteStreamChannel:localAddress(), OioSocketChannel:localAddress()),
		OioSocketChannel:remoteAddress() to listOf(OioByteStreamChannel:remoteAddress(), OioSocketChannel:remoteAddress()),
		OioSocketChannel:doConnect(SocketAddress-SocketAddress) to listOf(OioSocketChannel:config(), OioSocketChannelConfig:getConnectTimeoutMillis(), OioSocketChannel:activate(InputStream-OutputStream), OioSocketChannel:doClose(), ConnectTimeoutException:<init>(String), ConnectTimeoutException:setStackTrace(StackTraceElement[]), OioSocketChannel:doClose()),
		OioSocketChannel:doDisconnect() to listOf(OioSocketChannel:doClose()),
		OioSocketChannel:checkInputShutdown() to listOf(OioSocketChannel:isInputShutdown(), OioSocketChannel:config(), OioSocketChannelConfig:getSoTimeout()),
		OioSocketChannel:config() to listOf(OioSocketChannel:config(), OioSocketChannel:config()),
		OioSocketChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		SucceededChannelFuture:<init>(Channel-EventExecutor) to listOf(CompleteChannelFuture:<init>(Channel-EventExecutor)),
		ThreadPerChannelEventLoop$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), ThreadPerChannelEventLoop:access$002(ThreadPerChannelEventLoop-Channel), ThreadPerChannelEventLoop:deregister()),
		ThreadPerChannelEventLoop$1:operationComplete(Future) to listOf(ThreadPerChannelEventLoop$1:operationComplete(ChannelFuture)),
		ThreadPerChannelEventLoop:<init>(ThreadPerChannelEventLoopGroup) to listOf(SingleThreadEventLoop:<init>(EventLoopGroup-ThreadFactory-boolean)),
		ThreadPerChannelEventLoop:register(Channel-ChannelPromise) to listOf(SingleThreadEventLoop:register(Channel-ChannelPromise), ThreadPerChannelEventLoop$1:<init>(ThreadPerChannelEventLoop), ChannelFuture:addListener(GenericFutureListener)),
		ThreadPerChannelEventLoop:run() to listOf(ThreadPerChannelEventLoop:takeTask(), ThreadPerChannelEventLoop:updateLastExecutionTime(), ThreadPerChannelEventLoop:isShuttingDown(), Channel:unsafe(), Channel:unsafe(), Channel$Unsafe:voidPromise(), Channel$Unsafe:close(ChannelPromise), ThreadPerChannelEventLoop:confirmShutdown(), Channel:isRegistered(), ThreadPerChannelEventLoop:runAllTasks(), ThreadPerChannelEventLoop:deregister()),
		ThreadPerChannelEventLoopGroup$1:operationComplete(Future) to listOf(ThreadPerChannelEventLoopGroup:isTerminated(), ThreadPerChannelEventLoopGroup:access$000(ThreadPerChannelEventLoopGroup), Promise:setSuccess(Object)),
		ThreadPerChannelEventLoopGroup:<init>() to listOf(ThreadPerChannelEventLoopGroup:<init>(int)),
		ThreadPerChannelEventLoopGroup:<init>(int) to listOf(ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[])),
		ThreadPerChannelEventLoopGroup:<init>(int-ThreadFactory-Object[]) to listOf(AbstractEventExecutorGroup:<init>(), PlatformDependent:newConcurrentHashMap(), DefaultPromise:<init>(EventExecutor), ThreadPerChannelEventLoopGroup$1:<init>(ThreadPerChannelEventLoopGroup), ChannelException:<init>(String), ChannelException:setStackTrace(StackTraceElement[])),
		ThreadPerChannelEventLoopGroup:newChild(Object[]) to listOf(ThreadPerChannelEventLoop:<init>(ThreadPerChannelEventLoopGroup)),
		ThreadPerChannelEventLoopGroup:iterator() to listOf(ReadOnlyIterator:<init>(Iterator)),
		ThreadPerChannelEventLoopGroup:next() to listOf(ThreadPerChannelEventLoopGroup:next()),
		ThreadPerChannelEventLoopGroup:shutdownGracefully(long-long-TimeUnit) to listOf(EventLoop:shutdownGracefully(long-long-TimeUnit), EventLoop:shutdownGracefully(long-long-TimeUnit), ThreadPerChannelEventLoopGroup:isTerminated(), Promise:trySuccess(Object), ThreadPerChannelEventLoopGroup:terminationFuture()),
		ThreadPerChannelEventLoopGroup:shutdown() to listOf(EventLoop:shutdown(), EventLoop:shutdown(), ThreadPerChannelEventLoopGroup:isTerminated(), Promise:trySuccess(Object)),
		ThreadPerChannelEventLoopGroup:isShuttingDown() to listOf(EventLoop:isShuttingDown(), EventLoop:isShuttingDown()),
		ThreadPerChannelEventLoopGroup:isShutdown() to listOf(EventLoop:isShutdown(), EventLoop:isShutdown()),
		ThreadPerChannelEventLoopGroup:isTerminated() to listOf(EventLoop:isTerminated(), EventLoop:isTerminated()),
		ThreadPerChannelEventLoopGroup:awaitTermination(long-TimeUnit) to listOf(ThreadPerChannelEventLoopGroup:isTerminated(), EventLoop:awaitTermination(long-TimeUnit), ThreadPerChannelEventLoopGroup:isTerminated(), EventLoop:awaitTermination(long-TimeUnit), ThreadPerChannelEventLoopGroup:isTerminated()),
		ThreadPerChannelEventLoopGroup:register(Channel) to listOf(ThreadPerChannelEventLoopGroup:nextChild(), EventLoop:register(Channel), Channel:newFailedFuture(Throwable)),
		ThreadPerChannelEventLoopGroup:register(Channel-ChannelPromise) to listOf(ThreadPerChannelEventLoopGroup:nextChild(), EventLoop:register(Channel-ChannelPromise), ChannelPromise:setFailure(Throwable)),
		ThreadPerChannelEventLoopGroup:nextChild() to listOf(ThreadPerChannelEventLoopGroup:newChild(Object[]), ThreadPerChannelEventLoop:terminationFuture(), Future:addListener(GenericFutureListener)),
		DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean) to listOf(DefaultChannelConfig:<init>(Channel), DefaultUdtChannelConfig:apply(ChannelUDT)),
		DefaultUdtChannelConfig:apply(ChannelUDT) to listOf(ChannelUDT:socketUDT(), DefaultUdtChannelConfig:isReuseAddress(), SocketUDT:setReuseAddress(boolean), DefaultUdtChannelConfig:getSendBufferSize(), SocketUDT:setSendBufferSize(int), DefaultUdtChannelConfig:getSoLinger(), SocketUDT:setSoLinger(boolean-int), DefaultUdtChannelConfig:getSoLinger(), SocketUDT:setSoLinger(boolean-int), DefaultUdtChannelConfig:getProtocolReceiveBufferSize(), SocketUDT:setOption(OptionUDT-Object), DefaultUdtChannelConfig:getProtocolSendBufferSize(), SocketUDT:setOption(OptionUDT-Object), DefaultUdtChannelConfig:getSystemReceiveBufferSize(), SocketUDT:setOption(OptionUDT-Object), DefaultUdtChannelConfig:getSystemSendBufferSize(), SocketUDT:setOption(OptionUDT-Object)),
		DefaultUdtChannelConfig:getOption(ChannelOption) to listOf(DefaultUdtChannelConfig:getProtocolReceiveBufferSize(), DefaultUdtChannelConfig:getProtocolSendBufferSize(), DefaultUdtChannelConfig:getSystemReceiveBufferSize(), DefaultUdtChannelConfig:getSystemSendBufferSize(), DefaultUdtChannelConfig:getReceiveBufferSize(), DefaultUdtChannelConfig:getSendBufferSize(), DefaultUdtChannelConfig:isReuseAddress(), DefaultUdtChannelConfig:getSoLinger(), DefaultChannelConfig:getOption(ChannelOption)),
		DefaultUdtChannelConfig:getOptions() to listOf(DefaultChannelConfig:getOptions(), DefaultUdtChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultUdtChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultUdtChannelConfig:validate(ChannelOption-Object), DefaultUdtChannelConfig:setProtocolReceiveBufferSize(int), DefaultUdtChannelConfig:setProtocolSendBufferSize(int), DefaultUdtChannelConfig:setSystemReceiveBufferSize(int), DefaultUdtChannelConfig:setSystemSendBufferSize(int), DefaultUdtChannelConfig:setReceiveBufferSize(int), DefaultUdtChannelConfig:setSendBufferSize(int), DefaultUdtChannelConfig:setReuseAddress(boolean), DefaultUdtChannelConfig:setSoLinger(int), DefaultChannelConfig:setOption(ChannelOption-Object)),
		DefaultUdtChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultChannelConfig:setConnectTimeoutMillis(int), DefaultUdtChannelConfig:setConnectTimeoutMillis(int)),
		DefaultUdtChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultChannelConfig:setMaxMessagesPerRead(int), DefaultUdtChannelConfig:setMaxMessagesPerRead(int)),
		DefaultUdtChannelConfig:setWriteSpinCount(int) to listOf(DefaultChannelConfig:setWriteSpinCount(int), DefaultUdtChannelConfig:setWriteSpinCount(int)),
		DefaultUdtChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultChannelConfig:setAllocator(ByteBufAllocator), DefaultUdtChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultUdtChannelConfig:setAutoRead(boolean) to listOf(DefaultChannelConfig:setAutoRead(boolean), DefaultUdtChannelConfig:setAutoRead(boolean)),
		DefaultUdtChannelConfig:setWriteBufferLowWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferLowWaterMark(int), DefaultUdtChannelConfig:setWriteBufferLowWaterMark(int)),
		DefaultUdtChannelConfig:setWriteBufferHighWaterMark(int) to listOf(DefaultChannelConfig:setWriteBufferHighWaterMark(int), DefaultUdtChannelConfig:setWriteBufferHighWaterMark(int)),
		DefaultUdtServerChannelConfig:<init>(UdtChannel-ChannelUDT-boolean) to listOf(DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), DefaultUdtServerChannelConfig:apply(ChannelUDT)),
		DefaultUdtServerChannelConfig:getOption(ChannelOption) to listOf(DefaultUdtServerChannelConfig:getBacklog(), DefaultUdtChannelConfig:getOption(ChannelOption)),
		DefaultUdtServerChannelConfig:getOptions() to listOf(DefaultUdtChannelConfig:getOptions(), DefaultUdtServerChannelConfig:getOptions(Map-ChannelOption[])),
		DefaultUdtServerChannelConfig:setOption(ChannelOption-Object) to listOf(DefaultUdtServerChannelConfig:validate(ChannelOption-Object), DefaultUdtServerChannelConfig:setBacklog(int), DefaultUdtChannelConfig:setOption(ChannelOption-Object)),
		DefaultUdtServerChannelConfig:setProtocolReceiveBufferSize(int) to listOf(DefaultUdtChannelConfig:setProtocolReceiveBufferSize(int), DefaultUdtServerChannelConfig:setProtocolReceiveBufferSize(int)),
		DefaultUdtServerChannelConfig:setProtocolSendBufferSize(int) to listOf(DefaultUdtChannelConfig:setProtocolSendBufferSize(int), DefaultUdtServerChannelConfig:setProtocolSendBufferSize(int)),
		DefaultUdtServerChannelConfig:setReceiveBufferSize(int) to listOf(DefaultUdtChannelConfig:setReceiveBufferSize(int), DefaultUdtServerChannelConfig:setReceiveBufferSize(int)),
		DefaultUdtServerChannelConfig:setReuseAddress(boolean) to listOf(DefaultUdtChannelConfig:setReuseAddress(boolean), DefaultUdtServerChannelConfig:setReuseAddress(boolean)),
		DefaultUdtServerChannelConfig:setSendBufferSize(int) to listOf(DefaultUdtChannelConfig:setSendBufferSize(int), DefaultUdtServerChannelConfig:setSendBufferSize(int)),
		DefaultUdtServerChannelConfig:setSoLinger(int) to listOf(DefaultUdtChannelConfig:setSoLinger(int), DefaultUdtServerChannelConfig:setSoLinger(int)),
		DefaultUdtServerChannelConfig:setSystemReceiveBufferSize(int) to listOf(DefaultUdtChannelConfig:setSystemReceiveBufferSize(int), DefaultUdtServerChannelConfig:setSystemReceiveBufferSize(int)),
		DefaultUdtServerChannelConfig:setSystemSendBufferSize(int) to listOf(DefaultUdtChannelConfig:setSystemSendBufferSize(int), DefaultUdtServerChannelConfig:setSystemSendBufferSize(int)),
		DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int) to listOf(DefaultUdtChannelConfig:setConnectTimeoutMillis(int), DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int), DefaultUdtServerChannelConfig:setConnectTimeoutMillis(int)),
		DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int) to listOf(DefaultUdtChannelConfig:setMaxMessagesPerRead(int), DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int), DefaultUdtServerChannelConfig:setMaxMessagesPerRead(int)),
		DefaultUdtServerChannelConfig:setWriteSpinCount(int) to listOf(DefaultUdtChannelConfig:setWriteSpinCount(int), DefaultUdtServerChannelConfig:setWriteSpinCount(int), DefaultUdtServerChannelConfig:setWriteSpinCount(int)),
		DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator) to listOf(DefaultUdtChannelConfig:setAllocator(ByteBufAllocator), DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator), DefaultUdtServerChannelConfig:setAllocator(ByteBufAllocator)),
		DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator) to listOf(DefaultUdtChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator), DefaultUdtServerChannelConfig:setRecvByteBufAllocator(RecvByteBufAllocator)),
		DefaultUdtServerChannelConfig:setAutoRead(boolean) to listOf(DefaultUdtChannelConfig:setAutoRead(boolean), DefaultUdtServerChannelConfig:setAutoRead(boolean), DefaultUdtServerChannelConfig:setAutoRead(boolean)),
		NioUdtAcceptorChannel:<init>(ServerSocketChannelUDT) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), ServerSocketChannelUDT:configureBlocking(boolean), DefaultUdtServerChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), ServerSocketChannelUDT:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioUdtAcceptorChannel:<init>(TypeUDT) to listOf(NioUdtProvider:newAcceptorChannelUDT(TypeUDT), NioUdtAcceptorChannel:<init>(ServerSocketChannelUDT)),
		NioUdtAcceptorChannel:doBind(SocketAddress) to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:socket(), UdtServerChannelConfig:getBacklog(), NioServerSocketUDT:bind(SocketAddress-int)),
		NioUdtAcceptorChannel:doClose() to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:close()),
		NioUdtAcceptorChannel:isActive() to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:socket(), NioServerSocketUDT:isBound()),
		NioUdtAcceptorChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioUdtAcceptorChannel:javaChannel()),
		NioUdtAcceptorChannel:localAddress0() to listOf(NioUdtAcceptorChannel:javaChannel(), ServerSocketChannelUDT:socket(), NioServerSocketUDT:getLocalSocketAddress()),
		NioUdtAcceptorChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioUdtAcceptorChannel:localAddress()),
		NioUdtAcceptorChannel:remoteAddress() to listOf(NioUdtAcceptorChannel:remoteAddress()),
		NioUdtAcceptorChannel:config() to listOf(NioUdtAcceptorChannel:config(), NioUdtAcceptorChannel:config()),
		NioUdtAcceptorChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		NioUdtByteAcceptorChannel:<init>() to listOf(NioUdtAcceptorChannel:<init>(TypeUDT)),
		NioUdtByteAcceptorChannel:doReadMessages(List) to listOf(NioUdtByteAcceptorChannel:javaChannel(), ServerSocketChannelUDT:accept(), NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtByteAcceptorChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		NioUdtByteConnectorChannel$1:<clinit>() to listOf(StatusUDT:values(), StatusUDT:ordinal(), StatusUDT:ordinal()),
		NioUdtByteConnectorChannel:<init>() to listOf(NioUdtByteConnectorChannel:<init>(TypeUDT)),
		NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT) to listOf(AbstractNioByteChannel:<init>(Channel-SelectableChannel), SocketChannelUDT:configureBlocking(boolean), SocketChannelUDT:socketUDT(), SocketUDT:status(), StatusUDT:ordinal(), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), SocketChannelUDT:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioUdtByteConnectorChannel:<init>(SocketChannelUDT) to listOf(NioUdtByteConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtByteConnectorChannel:<init>(TypeUDT) to listOf(NioUdtProvider:newConnectorChannelUDT(TypeUDT), NioUdtByteConnectorChannel:<init>(SocketChannelUDT)),
		NioUdtByteConnectorChannel:doBind(SocketAddress) to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:bind(SocketAddress)),
		NioUdtByteConnectorChannel:doClose() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:close()),
		NioUdtByteConnectorChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioUdtByteConnectorChannel:doBind(SocketAddress), NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:connect(SocketAddress), NioUdtByteConnectorChannel:selectionKey(), NioUdtByteConnectorChannel:selectionKey(), NioUdtByteConnectorChannel:doClose(), NioUdtByteConnectorChannel:doClose()),
		NioUdtByteConnectorChannel:doDisconnect() to listOf(NioUdtByteConnectorChannel:doClose()),
		NioUdtByteConnectorChannel:doFinishConnect() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:finishConnect(), NioUdtByteConnectorChannel:selectionKey(), NioUdtByteConnectorChannel:selectionKey()),
		NioUdtByteConnectorChannel:doReadBytes(ByteBuf) to listOf(NioUdtByteConnectorChannel:javaChannel(), ByteBuf:writableBytes(), ByteBuf:writeBytes(ScatteringByteChannel-int)),
		NioUdtByteConnectorChannel:doWriteBytes(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), NioUdtByteConnectorChannel:javaChannel(), ByteBuf:readBytes(GatheringByteChannel-int), NioUdtByteConnectorChannel:updateOpWrite(long-long-boolean)),
		NioUdtByteConnectorChannel:isActive() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:isOpen(), SocketChannelUDT:isConnectFinished()),
		NioUdtByteConnectorChannel:javaChannel() to listOf(AbstractNioByteChannel:javaChannel(), NioUdtByteConnectorChannel:javaChannel()),
		NioUdtByteConnectorChannel:localAddress0() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getLocalSocketAddress()),
		NioUdtByteConnectorChannel:remoteAddress0() to listOf(NioUdtByteConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getRemoteSocketAddress()),
		NioUdtByteConnectorChannel:localAddress() to listOf(AbstractNioByteChannel:localAddress(), NioUdtByteConnectorChannel:localAddress()),
		NioUdtByteConnectorChannel:remoteAddress() to listOf(AbstractNioByteChannel:remoteAddress(), NioUdtByteConnectorChannel:remoteAddress()),
		NioUdtByteConnectorChannel:config() to listOf(NioUdtByteConnectorChannel:config()),
		NioUdtByteConnectorChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		NioUdtByteRendezvousChannel:<init>() to listOf(NioUdtProvider:newRendezvousChannelUDT(TypeUDT), NioUdtByteConnectorChannel:<init>(SocketChannelUDT)),
		NioUdtMessageAcceptorChannel:<init>() to listOf(NioUdtAcceptorChannel:<init>(TypeUDT)),
		NioUdtMessageAcceptorChannel:doReadMessages(List) to listOf(NioUdtMessageAcceptorChannel:javaChannel(), ServerSocketChannelUDT:accept(), NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtMessageAcceptorChannel:<clinit>() to listOf(ChannelMetadata:<init>(boolean)),
		NioUdtMessageConnectorChannel$1:<clinit>() to listOf(StatusUDT:values(), StatusUDT:ordinal(), StatusUDT:ordinal()),
		NioUdtMessageConnectorChannel:<init>() to listOf(NioUdtMessageConnectorChannel:<init>(TypeUDT)),
		NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT) to listOf(AbstractNioMessageChannel:<init>(Channel-SelectableChannel-int), SocketChannelUDT:configureBlocking(boolean), SocketChannelUDT:socketUDT(), SocketUDT:status(), StatusUDT:ordinal(), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), DefaultUdtChannelConfig:<init>(UdtChannel-ChannelUDT-boolean), SocketChannelUDT:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelException:<init>(String-Throwable)),
		NioUdtMessageConnectorChannel:<init>(SocketChannelUDT) to listOf(NioUdtMessageConnectorChannel:<init>(Channel-SocketChannelUDT)),
		NioUdtMessageConnectorChannel:<init>(TypeUDT) to listOf(NioUdtProvider:newConnectorChannelUDT(TypeUDT), NioUdtMessageConnectorChannel:<init>(SocketChannelUDT)),
		NioUdtMessageConnectorChannel:doBind(SocketAddress) to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:bind(SocketAddress)),
		NioUdtMessageConnectorChannel:doClose() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:close()),
		NioUdtMessageConnectorChannel:doConnect(SocketAddress-SocketAddress) to listOf(NioUdtMessageConnectorChannel:doBind(SocketAddress), NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:connect(SocketAddress), NioUdtMessageConnectorChannel:selectionKey(), NioUdtMessageConnectorChannel:selectionKey(), NioUdtMessageConnectorChannel:doClose(), NioUdtMessageConnectorChannel:doClose()),
		NioUdtMessageConnectorChannel:doDisconnect() to listOf(NioUdtMessageConnectorChannel:doClose()),
		NioUdtMessageConnectorChannel:doFinishConnect() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:finishConnect(), NioUdtMessageConnectorChannel:selectionKey(), NioUdtMessageConnectorChannel:selectionKey()),
		NioUdtMessageConnectorChannel:doReadMessages(List) to listOf(UdtChannelConfig:getReceiveBufferSize(), UdtChannelConfig:getAllocator(), ByteBufAllocator:directBuffer(int), NioUdtMessageConnectorChannel:javaChannel(), ByteBuf:writeBytes(ScatteringByteChannel-int), ByteBuf:release(), NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:close(), ChannelException:<init>(String), UdtMessage:<init>(ByteBuf)),
		NioUdtMessageConnectorChannel:doWriteMessages(Object[]-int-int-boolean) to listOf(UdtMessage:content(), ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), NioUdtMessageConnectorChannel:javaChannel(), ByteBuf:nioBuffer(), SocketChannelUDT:write(ByteBuffer), NioUdtMessageConnectorChannel:javaChannel(), ByteBuf:nioBuffers(), SocketChannelUDT:write(ByteBuffer[]), NioUdtMessageConnectorChannel:selectionKey(), UdtMessage:release()),
		NioUdtMessageConnectorChannel:isActive() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:isOpen(), SocketChannelUDT:isConnectFinished()),
		NioUdtMessageConnectorChannel:javaChannel() to listOf(AbstractNioMessageChannel:javaChannel(), NioUdtMessageConnectorChannel:javaChannel()),
		NioUdtMessageConnectorChannel:localAddress0() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getLocalSocketAddress()),
		NioUdtMessageConnectorChannel:remoteAddress0() to listOf(NioUdtMessageConnectorChannel:javaChannel(), SocketChannelUDT:socket(), NioSocketUDT:getRemoteSocketAddress()),
		NioUdtMessageConnectorChannel:localAddress() to listOf(AbstractNioMessageChannel:localAddress(), NioUdtMessageConnectorChannel:localAddress()),
		NioUdtMessageConnectorChannel:remoteAddress() to listOf(AbstractNioMessageChannel:remoteAddress(), NioUdtMessageConnectorChannel:remoteAddress()),
		NioUdtMessageConnectorChannel:config() to listOf(NioUdtMessageConnectorChannel:config()),
		NioUdtMessageConnectorChannel:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ChannelMetadata:<init>(boolean)),
		NioUdtMessageRendezvousChannel:<init>() to listOf(NioUdtProvider:newRendezvousChannelUDT(TypeUDT), NioUdtMessageConnectorChannel:<init>(SocketChannelUDT)),
		NioUdtProvider$1:<clinit>() to listOf(KindUDT:values(), KindUDT:ordinal(), KindUDT:ordinal(), KindUDT:ordinal(), TypeUDT:values(), TypeUDT:ordinal(), TypeUDT:ordinal()),
		NioUdtProvider:channelUDT(Channel) to listOf(NioUdtByteAcceptorChannel:javaChannel(), NioUdtByteConnectorChannel:javaChannel(), NioUdtByteRendezvousChannel:javaChannel(), NioUdtMessageAcceptorChannel:javaChannel(), NioUdtMessageConnectorChannel:javaChannel(), NioUdtMessageRendezvousChannel:javaChannel()),
		NioUdtProvider:newAcceptorChannelUDT(TypeUDT) to listOf(SelectorProviderUDT:from(TypeUDT), SelectorProviderUDT:openServerSocketChannel(), ChannelException:<init>(String)),
		NioUdtProvider:newConnectorChannelUDT(TypeUDT) to listOf(SelectorProviderUDT:from(TypeUDT), SelectorProviderUDT:openSocketChannel(), ChannelException:<init>(String)),
		NioUdtProvider:newRendezvousChannelUDT(TypeUDT) to listOf(SelectorProviderUDT:from(TypeUDT), SelectorProviderUDT:openRendezvousChannel(), ChannelException:<init>(String)),
		NioUdtProvider:socketUDT(Channel) to listOf(NioUdtProvider:channelUDT(Channel), ChannelUDT:socketUDT()),
		NioUdtProvider:newChannel() to listOf(KindUDT:ordinal(), TypeUDT:ordinal(), NioUdtMessageAcceptorChannel:<init>(), NioUdtByteAcceptorChannel:<init>(), TypeUDT:ordinal(), NioUdtMessageConnectorChannel:<init>(), NioUdtByteConnectorChannel:<init>(), TypeUDT:ordinal(), NioUdtMessageRendezvousChannel:<init>(), NioUdtByteRendezvousChannel:<init>(), NioUdtProvider:newChannel()),
		NioUdtProvider:<clinit>() to listOf(NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT), NioUdtProvider:<init>(TypeUDT-KindUDT)),
		UdtChannelOption:<init>(String) to listOf(ChannelOption:<init>(String)),
		UdtChannelOption:<clinit>() to listOf(UdtChannelOption:<init>(String), UdtChannelOption:<init>(String), UdtChannelOption:<init>(String), UdtChannelOption:<init>(String)),
		UdtMessage:<init>(ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf)),
		UdtMessage:copy() to listOf(UdtMessage:content(), ByteBuf:copy(), UdtMessage:<init>(ByteBuf), UdtMessage:copy()),
		UdtMessage:duplicate() to listOf(UdtMessage:content(), ByteBuf:duplicate(), UdtMessage:<init>(ByteBuf), UdtMessage:duplicate()),
		UdtMessage:retain() to listOf(DefaultByteBufHolder:retain(), UdtMessage:retain(), UdtMessage:retain()),
		UdtMessage:retain(int) to listOf(DefaultByteBufHolder:retain(int), UdtMessage:retain(int), UdtMessage:retain(int)),
		VoidChannelPromise:<init>(Channel-boolean) to listOf(AbstractFuture:<init>()),
		VoidChannelPromise:addListener(GenericFutureListener) to listOf(VoidChannelPromise:fail(), VoidChannelPromise:addListener(GenericFutureListener), VoidChannelPromise:addListener(GenericFutureListener), VoidChannelPromise:addListener(GenericFutureListener), VoidChannelPromise:addListener(GenericFutureListener)),
		VoidChannelPromise:addListeners(GenericFutureListener[]) to listOf(VoidChannelPromise:fail(), VoidChannelPromise:addListeners(GenericFutureListener[]), VoidChannelPromise:addListeners(GenericFutureListener[]), VoidChannelPromise:addListeners(GenericFutureListener[]), VoidChannelPromise:addListeners(GenericFutureListener[])),
		VoidChannelPromise:await() to listOf(VoidChannelPromise:await(), VoidChannelPromise:await(), VoidChannelPromise:await(), VoidChannelPromise:await()),
		VoidChannelPromise:await(long-TimeUnit) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:await(long) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:awaitUninterruptibly() to listOf(VoidChannelPromise:fail(), VoidChannelPromise:awaitUninterruptibly(), VoidChannelPromise:awaitUninterruptibly(), VoidChannelPromise:awaitUninterruptibly(), VoidChannelPromise:awaitUninterruptibly()),
		VoidChannelPromise:awaitUninterruptibly(long-TimeUnit) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:awaitUninterruptibly(long) to listOf(VoidChannelPromise:fail()),
		VoidChannelPromise:sync() to listOf(VoidChannelPromise:fail(), VoidChannelPromise:sync(), VoidChannelPromise:sync(), VoidChannelPromise:sync(), VoidChannelPromise:sync()),
		VoidChannelPromise:syncUninterruptibly() to listOf(VoidChannelPromise:fail(), VoidChannelPromise:syncUninterruptibly(), VoidChannelPromise:syncUninterruptibly(), VoidChannelPromise:syncUninterruptibly(), VoidChannelPromise:syncUninterruptibly()),
		VoidChannelPromise:setFailure(Throwable) to listOf(VoidChannelPromise:fireException(Throwable), VoidChannelPromise:setFailure(Throwable), VoidChannelPromise:setFailure(Throwable)),
		VoidChannelPromise:tryFailure(Throwable) to listOf(VoidChannelPromise:fireException(Throwable)),
		VoidChannelPromise:fireException(Throwable) to listOf(Channel:isRegistered(), Channel:pipeline(), ChannelPipeline:fireExceptionCaught(Throwable)),
		VoidChannelPromise:getNow() to listOf(VoidChannelPromise:getNow()),
		VoidChannelPromise:removeListeners(GenericFutureListener[]) to listOf(VoidChannelPromise:removeListeners(GenericFutureListener[]), VoidChannelPromise:removeListeners(GenericFutureListener[]), VoidChannelPromise:removeListeners(GenericFutureListener[]), VoidChannelPromise:removeListeners(GenericFutureListener[])),
		VoidChannelPromise:removeListener(GenericFutureListener) to listOf(VoidChannelPromise:removeListener(GenericFutureListener), VoidChannelPromise:removeListener(GenericFutureListener), VoidChannelPromise:removeListener(GenericFutureListener), VoidChannelPromise:removeListener(GenericFutureListener)),
		VoidChannelPromise:setSuccess() to listOf(VoidChannelPromise:setSuccess()),
		VoidChannelPromise:setSuccess(Void) to listOf(VoidChannelPromise:setSuccess(Void)),
		VoidChannelPromise:trySuccess(Object) to listOf(VoidChannelPromise:trySuccess(Void)),
		VoidChannelPromise:setSuccess(Object) to listOf(VoidChannelPromise:setSuccess(Void)),
		Base64:encode(ByteBuf) to listOf(Base64:encode(ByteBuf-Base64Dialect)),
		Base64:encode(ByteBuf-Base64Dialect) to listOf(Base64:breakLines(Base64Dialect), Base64:encode(ByteBuf-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-boolean) to listOf(Base64:encode(ByteBuf-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-boolean-Base64Dialect) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect), ByteBuf:writerIndex(), ByteBuf:readerIndex(int)),
		Base64:encode(ByteBuf-int-int) to listOf(Base64:encode(ByteBuf-int-int-Base64Dialect)),
		Base64:encode(ByteBuf-int-int-Base64Dialect) to listOf(Base64:breakLines(Base64Dialect), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-int-int-boolean) to listOf(Base64:encode(ByteBuf-int-int-boolean-Base64Dialect)),
		Base64:encode(ByteBuf-int-int-boolean-Base64Dialect) to listOf(ByteBuf:alloc(), ByteBufAllocator:buffer(int), ByteBuf:order(), ByteBuf:order(ByteOrder), Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect), ByteBuf:setByte(int-int), Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect), ByteBuf:slice(int-int)),
		Base64:encode3to4(ByteBuf-int-int-ByteBuf-int-Base64Dialect) to listOf(Base64:alphabet(Base64Dialect), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int)),
		Base64:decode(ByteBuf) to listOf(Base64:decode(ByteBuf-Base64Dialect)),
		Base64:decode(ByteBuf-Base64Dialect) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:decode(ByteBuf-int-int-Base64Dialect), ByteBuf:writerIndex(), ByteBuf:readerIndex(int)),
		Base64:decode(ByteBuf-int-int) to listOf(Base64:decode(ByteBuf-int-int-Base64Dialect)),
		Base64:decode(ByteBuf-int-int-Base64Dialect) to listOf(Base64:decodabet(Base64Dialect), ByteBuf:alloc(), ByteBufAllocator:buffer(int), ByteBuf:order(), ByteBuf:order(ByteOrder), ByteBuf:getByte(int), Base64:decode4to3(byte[]-int-ByteBuf-int-Base64Dialect), ByteBuf:getUnsignedByte(int), ByteBuf:slice(int-int)),
		Base64:decode4to3(byte[]-int-ByteBuf-int-Base64Dialect) to listOf(Base64:decodabet(Base64Dialect), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int), ByteBuf:setByte(int-int)),
		Base64Decoder:<init>() to listOf(Base64Decoder:<init>(Base64Dialect)),
		Base64Decoder:<init>(Base64Dialect) to listOf(MessageToMessageDecoder:<init>()),
		Base64Decoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:decode(ByteBuf-int-int-Base64Dialect)),
		Base64Decoder:decode(ChannelHandlerContext-Object-List) to listOf(Base64Decoder:decode(ChannelHandlerContext-ByteBuf-List)),
		Base64Dialect:values() to listOf(Base64Dialect[]:clone()),
		Base64Dialect:<clinit>() to listOf(Base64Dialect:<init>(String-int-byte[]-byte[]-boolean), Base64Dialect:<init>(String-int-byte[]-byte[]-boolean), Base64Dialect:<init>(String-int-byte[]-byte[]-boolean)),
		Base64Encoder:<init>() to listOf(Base64Encoder:<init>(boolean)),
		Base64Encoder:<init>(boolean) to listOf(Base64Encoder:<init>(boolean-Base64Dialect)),
		Base64Encoder:<init>(boolean-Base64Dialect) to listOf(MessageToMessageEncoder:<init>()),
		Base64Encoder:encode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Base64:encode(ByteBuf-int-int-boolean-Base64Dialect)),
		Base64Encoder:encode(ChannelHandlerContext-Object-List) to listOf(Base64Encoder:encode(ChannelHandlerContext-ByteBuf-List)),
		ByteArrayDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		ByteArrayDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:hasArray(), ByteBuf:arrayOffset(), ByteBuf:readableBytes(), ByteBuf:capacity(), ByteBuf:array(), ByteBuf:readableBytes(), ByteBuf:getBytes(int-byte[]), ByteBuf:readableBytes(), ByteBuf:getBytes(int-byte[])),
		ByteArrayDecoder:decode(ChannelHandlerContext-Object-List) to listOf(ByteArrayDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		ByteArrayEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		ByteArrayEncoder:encode(ChannelHandlerContext-byte[]-List) to listOf(Unpooled:wrappedBuffer(byte[])),
		ByteArrayEncoder:encode(ChannelHandlerContext-Object-List) to listOf(ByteArrayEncoder:encode(ChannelHandlerContext-byte[]-List)),
		ByteToMessageCodec$1:<init>(ByteToMessageCodec) to listOf(MessageToByteEncoder:<init>()),
		ByteToMessageCodec$1:acceptOutboundMessage(Object) to listOf(ByteToMessageCodec:acceptOutboundMessage(Object)),
		ByteToMessageCodec$1:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(ByteToMessageCodec:encode(ChannelHandlerContext-Object-ByteBuf)),
		ByteToMessageCodec$2:<init>(ByteToMessageCodec) to listOf(ByteToMessageDecoder:<init>()),
		ByteToMessageCodec$2:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageCodec:decode(ChannelHandlerContext-ByteBuf-List)),
		ByteToMessageCodec$2:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageCodec:decodeLast(ChannelHandlerContext-ByteBuf-List)),
		ByteToMessageCodec:<init>() to listOf(ChannelDuplexHandler:<init>(), ByteToMessageCodec$1:<init>(ByteToMessageCodec), ByteToMessageCodec$2:<init>(ByteToMessageCodec), ByteToMessageCodec:checkForSharableAnnotation(), TypeParameterMatcher:find(Object-Class-String)),
		ByteToMessageCodec:<init>(Class) to listOf(ChannelDuplexHandler:<init>(), ByteToMessageCodec$1:<init>(ByteToMessageCodec), ByteToMessageCodec$2:<init>(ByteToMessageCodec), ByteToMessageCodec:checkForSharableAnnotation(), TypeParameterMatcher:get(Class)),
		ByteToMessageCodec:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		ByteToMessageCodec:channelRead(ChannelHandlerContext-Object) to listOf(ByteToMessageDecoder:channelRead(ChannelHandlerContext-Object)),
		ByteToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToByteEncoder:write(ChannelHandlerContext-Object-ChannelPromise)),
		ByteToMessageCodec:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageCodec:decode(ChannelHandlerContext-ByteBuf-List)),
		ByteToMessageDecoder:<init>() to listOf(ChannelInboundHandlerAdapter:<init>()),
		ByteToMessageDecoder:actualReadableBytes() to listOf(ByteToMessageDecoder:internalBuffer(), ByteBuf:readableBytes()),
		ByteToMessageDecoder:handlerRemoved(ChannelHandlerContext) to listOf(ByteToMessageDecoder:internalBuffer(), ByteBuf:readableBytes(), ByteBuf:isReadable(), ByteBuf:readBytes(int), ByteBuf:release(), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelReadComplete(), ByteToMessageDecoder:handlerRemoved0(ChannelHandlerContext)),
		ByteToMessageDecoder:channelRead(ChannelHandlerContext-Object) to listOf(RecyclableArrayList:newInstance(), ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ByteBuf:isReadable(), ByteBuf:release(), ByteBuf:isReadable(), ByteBuf:release(), ByteBuf:writerIndex(), ByteBuf:maxCapacity(), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf), ByteBuf:release(), ByteBuf:writeBytes(ByteBuf), ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ByteBuf:isReadable(), ByteBuf:release(), ByteBuf:discardSomeReadBytes(), ByteBuf:release(), ByteBuf:isReadable(), ByteBuf:release(), ByteBuf:discardSomeReadBytes(), ByteBuf:release(), RecyclableArrayList:add(Object), RecyclableArrayList:isEmpty(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle(), DecoderException:<init>(Throwable), RecyclableArrayList:isEmpty(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle()),
		ByteToMessageDecoder:channelReadComplete(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:config(), ChannelConfig:isAutoRead(), ChannelHandlerContext:read(), ChannelHandlerContext:fireChannelReadComplete()),
		ByteToMessageDecoder:channelInactive(ChannelHandlerContext) to listOf(RecyclableArrayList:newInstance(), ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelInactive(), DecoderException:<init>(Throwable), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelInactive()),
		ByteToMessageDecoder:callDecode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:isReadable(), ByteBuf:readableBytes(), ByteToMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List), ByteBuf:readableBytes(), ByteBuf:readableBytes(), StringUtil:simpleClassName(Class), DecoderException:<init>(String), ByteToMessageDecoder:isSingleDecode(), DecoderException:<init>(Throwable)),
		ByteToMessageDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteToMessageDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		CompressionException:<init>() to listOf(EncoderException:<init>()),
		CompressionException:<init>(String-Throwable) to listOf(EncoderException:<init>(String-Throwable)),
		CompressionException:<init>(String) to listOf(EncoderException:<init>(String)),
		CompressionException:<init>(Throwable) to listOf(EncoderException:<init>(Throwable)),
		DecompressionException:<init>() to listOf(DecoderException:<init>()),
		DecompressionException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		DecompressionException:<init>(String) to listOf(DecoderException:<init>(String)),
		DecompressionException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		JdkZlibEncoder$1:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		JdkZlibEncoder$1:operationComplete(Future) to listOf(JdkZlibEncoder$1:operationComplete(ChannelFuture)),
		JdkZlibEncoder$2:run() to listOf(ChannelHandlerContext:close(ChannelPromise)),
		JdkZlibEncoder:<init>() to listOf(JdkZlibEncoder:<init>(int)),
		JdkZlibEncoder:<init>(int) to listOf(JdkZlibEncoder:<init>(ZlibWrapper-int)),
		JdkZlibEncoder:<init>(ZlibWrapper) to listOf(JdkZlibEncoder:<init>(ZlibWrapper-int)),
		JdkZlibEncoder:<init>(ZlibWrapper-int) to listOf(ZlibEncoder:<init>()),
		JdkZlibEncoder:<init>(byte[]) to listOf(JdkZlibEncoder:<init>(int-byte[])),
		JdkZlibEncoder:<init>(int-byte[]) to listOf(ZlibEncoder:<init>()),
		JdkZlibEncoder:close() to listOf(JdkZlibEncoder:ctx(), ChannelHandlerContext:newPromise(), JdkZlibEncoder:close(ChannelPromise)),
		JdkZlibEncoder:close(ChannelPromise) to listOf(JdkZlibEncoder:ctx(), JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise)),
		JdkZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:writeBytes(ByteBuf), ByteBuf:readableBytes(), ByteBuf:readBytes(byte[]), ByteBuf:ensureWritable(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeBytes(byte[]-int-int)),
		JdkZlibEncoder:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:newPromise(), JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), JdkZlibEncoder$1:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:isDone(), ChannelHandlerContext:executor(), JdkZlibEncoder$2:<init>(JdkZlibEncoder-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit)),
		JdkZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise) to listOf(ChannelPromise:setSuccess(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		JdkZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(JdkZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		JZlibDecoder:<init>() to listOf(JZlibDecoder:<init>(ZlibWrapper)),
		JZlibDecoder:<init>(ZlibWrapper) to listOf(ZlibDecoder:<init>(), Inflater:<init>(), ZlibUtil:convertWrapperType(ZlibWrapper), Inflater:init(JZlib$WrapperType), ZlibUtil:fail(Inflater-String-int)),
		JZlibDecoder:<init>(byte[]) to listOf(ZlibDecoder:<init>(), Inflater:<init>(), Inflater:inflateInit(JZlib$WrapperType), ZlibUtil:fail(Inflater-String-int)),
		JZlibDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:isReadable(), ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int), ByteBuf:ensureWritable(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), Inflater:inflate(int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int), ZlibUtil:fail(Inflater-String-int), Inflater:inflateSetDictionary(byte[]-int), ZlibUtil:fail(Inflater-String-int), Inflater:inflateEnd(), ZlibUtil:fail(Inflater-String-int), ByteBuf:skipBytes(int), ByteBuf:isReadable(), ByteBuf:release(), ByteBuf:skipBytes(int), ByteBuf:isReadable(), ByteBuf:release()),
		JZlibEncoder$1:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		JZlibEncoder$1:operationComplete(Future) to listOf(JZlibEncoder$1:operationComplete(ChannelFuture)),
		JZlibEncoder$2:run() to listOf(ChannelHandlerContext:close(ChannelPromise)),
		JZlibEncoder:<init>() to listOf(JZlibEncoder:<init>(int)),
		JZlibEncoder:<init>(int) to listOf(JZlibEncoder:<init>(ZlibWrapper-int)),
		JZlibEncoder:<init>(ZlibWrapper) to listOf(JZlibEncoder:<init>(ZlibWrapper-int)),
		JZlibEncoder:<init>(ZlibWrapper-int) to listOf(JZlibEncoder:<init>(ZlibWrapper-int-int-int)),
		JZlibEncoder:<init>(ZlibWrapper-int-int-int) to listOf(ZlibEncoder:<init>(), Deflater:<init>(), ZlibUtil:convertWrapperType(ZlibWrapper), Deflater:init(int-int-int-JZlib$WrapperType), ZlibUtil:fail(Deflater-String-int)),
		JZlibEncoder:<init>(byte[]) to listOf(JZlibEncoder:<init>(int-byte[])),
		JZlibEncoder:<init>(int-byte[]) to listOf(JZlibEncoder:<init>(int-int-int-byte[])),
		JZlibEncoder:<init>(int-int-int-byte[]) to listOf(ZlibEncoder:<init>(), Deflater:<init>(), Deflater:deflateInit(int-int-int-JZlib$WrapperType), ZlibUtil:fail(Deflater-String-int), Deflater:deflateSetDictionary(byte[]-int), ZlibUtil:fail(Deflater-String-int)),
		JZlibEncoder:close() to listOf(JZlibEncoder:ctx(), ChannelHandlerContext:channel(), Channel:newPromise(), JZlibEncoder:close(ChannelPromise)),
		JZlibEncoder:close(ChannelPromise) to listOf(JZlibEncoder:ctx(), JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise)),
		JZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]), ByteBuf:ensureWritable(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(), Deflater:deflate(int), ByteBuf:skipBytes(int), ByteBuf:skipBytes(int), ZlibUtil:fail(Deflater-String-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		JZlibEncoder:close(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:newPromise(), JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise), JZlibEncoder$1:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelFuture:isDone(), ChannelHandlerContext:executor(), JZlibEncoder$2:<init>(JZlibEncoder-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit)),
		JZlibEncoder:finishEncode(ChannelHandlerContext-ChannelPromise) to listOf(ChannelPromise:setSuccess(), Deflater:deflate(int), ZlibUtil:deflaterException(Deflater-String-int), ChannelPromise:setFailure(Throwable), Deflater:deflateEnd(), Unpooled:wrappedBuffer(byte[]-int-int), Deflater:deflateEnd(), Deflater:deflateEnd(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise)),
		JZlibEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(JZlibEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		Snappy$1:<clinit>() to listOf(Snappy$State:values(), Snappy$State:ordinal(), Snappy$State:ordinal(), Snappy$State:ordinal(), Snappy$State:ordinal(), Snappy$State:ordinal()),
		Snappy$State:values() to listOf(Snappy$State[]:clone()),
		Snappy$State:<clinit>() to listOf(Snappy$State:<init>(String-int), Snappy$State:<init>(String-int), Snappy$State:<init>(String-int), Snappy$State:<init>(String-int), Snappy$State:<init>(String-int)),
		Snappy:encode(ByteBuf-ByteBuf-int) to listOf(ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), Snappy:getHashTable(int), Snappy:hash(ByteBuf-int-int), Snappy:hash(ByteBuf-int-int), ByteBuf:getInt(int), ByteBuf:getInt(int), Snappy:encodeLiteral(ByteBuf-ByteBuf-int), Snappy:findMatchingLength(ByteBuf-int-int-int), Snappy:encodeCopy(ByteBuf-int-int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), Snappy:hash(ByteBuf-int-int), Snappy:hash(ByteBuf-int-int), ByteBuf:getInt(int), ByteBuf:getInt(int), Snappy:hash(ByteBuf-int-int), Snappy:encodeLiteral(ByteBuf-ByteBuf-int)),
		Snappy:hash(ByteBuf-int-int) to listOf(ByteBuf:getInt(int)),
		Snappy:findMatchingLength(ByteBuf-int-int-int) to listOf(ByteBuf:getInt(int), ByteBuf:getInt(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		Snappy:encodeLiteral(ByteBuf-ByteBuf-int) to listOf(ByteBuf:writeByte(int), Snappy:bitsToEncode(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeBytes(ByteBuf-int)),
		Snappy:encodeCopyWithOffset(ByteBuf-int-int) to listOf(ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int)),
		Snappy:encodeCopy(ByteBuf-int-int) to listOf(Snappy:encodeCopyWithOffset(ByteBuf-int-int), Snappy:encodeCopyWithOffset(ByteBuf-int-int), Snappy:encodeCopyWithOffset(ByteBuf-int-int)),
		Snappy:decode(ByteBuf-ByteBuf) to listOf(ByteBuf:isReadable(), Snappy$State:ordinal(), Snappy:readPreamble(ByteBuf), ByteBuf:ensureWritable(int), ByteBuf:isReadable(), ByteBuf:readByte(), Snappy:decodeLiteral(byte-ByteBuf-ByteBuf), Snappy:decodeCopyWith1ByteOffset(byte-ByteBuf-ByteBuf-int), Snappy:decodeCopyWith2ByteOffset(byte-ByteBuf-ByteBuf-int), Snappy:decodeCopyWith4ByteOffset(byte-ByteBuf-ByteBuf-int)),
		Snappy:readPreamble(ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), DecompressionException:<init>(String)),
		Snappy:decodeLiteral(byte-ByteBuf-ByteBuf) to listOf(ByteBuf:markReaderIndex(), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), ByteBuf:readableBytes(), ByteBuf:readShort(), ByteBufUtil:swapShort(short), ByteBuf:readableBytes(), ByteBuf:readUnsignedMedium(), ByteBufUtil:swapMedium(int), ByteBuf:readableBytes(), ByteBuf:readInt(), ByteBufUtil:swapInt(int), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), ByteBuf:writeBytes(ByteBuf-int)),
		Snappy:decodeCopyWith1ByteOffset(byte-ByteBuf-ByteBuf-int) to listOf(ByteBuf:isReadable(), ByteBuf:writerIndex(), ByteBuf:readUnsignedByte(), Snappy:validateOffset(int-int), ByteBuf:markReaderIndex(), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:resetReaderIndex()),
		Snappy:decodeCopyWith2ByteOffset(byte-ByteBuf-ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readShort(), ByteBufUtil:swapShort(short), Snappy:validateOffset(int-int), ByteBuf:markReaderIndex(), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:resetReaderIndex()),
		Snappy:decodeCopyWith4ByteOffset(byte-ByteBuf-ByteBuf-int) to listOf(ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readInt(), ByteBufUtil:swapInt(int), Snappy:validateOffset(int-int), ByteBuf:markReaderIndex(), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:readerIndex(int), ByteBuf:readBytes(ByteBuf-int), ByteBuf:resetReaderIndex()),
		Snappy:validateOffset(int-int) to listOf(DecompressionException:<init>(String), DecompressionException:<init>(String), DecompressionException:<init>(String)),
		Snappy:calculateChecksum(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Snappy:calculateChecksum(ByteBuf-int-int)),
		Snappy:calculateChecksum(ByteBuf-int-int) to listOf(ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:getBytes(int-byte[]), Snappy:maskChecksum(int)),
		Snappy:validateChecksum(int-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), Snappy:validateChecksum(int-ByteBuf-int-int)),
		Snappy:validateChecksum(int-ByteBuf-int-int) to listOf(Snappy:calculateChecksum(ByteBuf-int-int), DecompressionException:<init>(String)),
		SnappyFramedDecoder$1:<clinit>() to listOf(SnappyFramedDecoder$ChunkType:values(), SnappyFramedDecoder$ChunkType:ordinal(), SnappyFramedDecoder$ChunkType:ordinal(), SnappyFramedDecoder$ChunkType:ordinal(), SnappyFramedDecoder$ChunkType:ordinal(), SnappyFramedDecoder$ChunkType:ordinal()),
		SnappyFramedDecoder$ChunkType:values() to listOf(SnappyFramedDecoder$ChunkType[]:clone()),
		SnappyFramedDecoder$ChunkType:<clinit>() to listOf(SnappyFramedDecoder$ChunkType:<init>(String-int), SnappyFramedDecoder$ChunkType:<init>(String-int), SnappyFramedDecoder$ChunkType:<init>(String-int), SnappyFramedDecoder$ChunkType:<init>(String-int), SnappyFramedDecoder$ChunkType:<init>(String-int)),
		SnappyFramedDecoder:<init>() to listOf(SnappyFramedDecoder:<init>(boolean)),
		SnappyFramedDecoder:<init>(boolean) to listOf(ByteToMessageDecoder:<init>(), Snappy:<init>()),
		SnappyFramedDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:getUnsignedByte(int), SnappyFramedDecoder:mapChunkType(byte), ByteBuf:getUnsignedMedium(int), ByteBufUtil:swapMedium(int), SnappyFramedDecoder$ChunkType:ordinal(), DecompressionException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readBytes(byte[]), DecompressionException:<init>(String), DecompressionException:<init>(String), ByteBuf:skipBytes(int), DecompressionException:<init>(String), DecompressionException:<init>(String), DecompressionException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readInt(), ByteBufUtil:swapInt(int), ByteBuf:readerIndex(), Snappy:validateChecksum(int-ByteBuf-int-int), ByteBuf:skipBytes(int), ByteBuf:readSlice(int), ByteBuf:retain(), DecompressionException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readInt(), ByteBufUtil:swapInt(int), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writerIndex(), ByteBuf:readerIndex(), ByteBuf:writerIndex(int), Snappy:decode(ByteBuf-ByteBuf), ByteBuf:writerIndex(int), ByteBuf:writerIndex(int), ByteBuf:writerIndex(), Snappy:validateChecksum(int-ByteBuf-int-int), ByteBuf:readSlice(int), Snappy:decode(ByteBuf-ByteBuf), Snappy:reset()),
		SnappyFramedEncoder:<init>() to listOf(MessageToByteEncoder:<init>(), Snappy:<init>()),
		SnappyFramedEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:isReadable(), ByteBuf:writeBytes(byte[]), ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readSlice(int), SnappyFramedEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int), ByteBuf:writeInt(int), ByteBuf:readSlice(int), SnappyFramedEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), Snappy:encode(ByteBuf-ByteBuf-int), SnappyFramedEncoder:setChunkLength(ByteBuf-int), ByteBuf:readSlice(int), SnappyFramedEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), Snappy:encode(ByteBuf-ByteBuf-int), SnappyFramedEncoder:setChunkLength(ByteBuf-int), SnappyFramedEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int)),
		SnappyFramedEncoder:writeUnencodedChunk(ByteBuf-ByteBuf-int) to listOf(ByteBuf:writeByte(int), SnappyFramedEncoder:writeChunkLength(ByteBuf-int), SnappyFramedEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf), ByteBuf:writeBytes(ByteBuf-int)),
		SnappyFramedEncoder:setChunkLength(ByteBuf-int) to listOf(ByteBuf:writerIndex(), CompressionException:<init>(String), ByteBufUtil:swapMedium(int), ByteBuf:setMedium(int-int)),
		SnappyFramedEncoder:writeChunkLength(ByteBuf-int) to listOf(ByteBufUtil:swapMedium(int), ByteBuf:writeMedium(int)),
		SnappyFramedEncoder:calculateAndWriteChecksum(ByteBuf-ByteBuf) to listOf(Snappy:calculateChecksum(ByteBuf), ByteBufUtil:swapInt(int), ByteBuf:writeInt(int)),
		SnappyFramedEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(SnappyFramedEncoder:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		ZlibCodecFactory:newZlibEncoder(int) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(int), JdkZlibEncoder:<init>(int)),
		ZlibCodecFactory:newZlibEncoder(ZlibWrapper) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(ZlibWrapper), JdkZlibEncoder:<init>(ZlibWrapper)),
		ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(ZlibWrapper-int), JdkZlibEncoder:<init>(ZlibWrapper-int)),
		ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(ZlibWrapper-int-int-int), JdkZlibEncoder:<init>(ZlibWrapper-int)),
		ZlibCodecFactory:newZlibEncoder(byte[]) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(byte[]), JdkZlibEncoder:<init>(byte[])),
		ZlibCodecFactory:newZlibEncoder(int-byte[]) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(int-byte[]), JdkZlibEncoder:<init>(int-byte[])),
		ZlibCodecFactory:newZlibEncoder(int-int-int-byte[]) to listOf(PlatformDependent:javaVersion(), JZlibEncoder:<init>(int-int-int-byte[]), JdkZlibEncoder:<init>(int-byte[])),
		ZlibCodecFactory:newZlibDecoder() to listOf(JZlibDecoder:<init>()),
		ZlibCodecFactory:newZlibDecoder(ZlibWrapper) to listOf(JZlibDecoder:<init>(ZlibWrapper)),
		ZlibCodecFactory:newZlibDecoder(byte[]) to listOf(JZlibDecoder:<init>(byte[])),
		ZlibDecoder:<init>() to listOf(ByteToMessageDecoder:<init>()),
		ZlibEncoder:<init>() to listOf(MessageToByteEncoder:<init>(boolean)),
		ZlibUtil$1:<clinit>() to listOf(ZlibWrapper:values(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal()),
		ZlibUtil:fail(Inflater-String-int) to listOf(ZlibUtil:inflaterException(Inflater-String-int)),
		ZlibUtil:fail(Deflater-String-int) to listOf(ZlibUtil:deflaterException(Deflater-String-int)),
		ZlibUtil:inflaterException(Inflater-String-int) to listOf(CompressionException:<init>(String)),
		ZlibUtil:deflaterException(Deflater-String-int) to listOf(CompressionException:<init>(String)),
		ZlibUtil:convertWrapperType(ZlibWrapper) to listOf(ZlibWrapper:ordinal()),
		ZlibWrapper:values() to listOf(ZlibWrapper[]:clone()),
		ZlibWrapper:<clinit>() to listOf(ZlibWrapper:<init>(String-int), ZlibWrapper:<init>(String-int), ZlibWrapper:<init>(String-int), ZlibWrapper:<init>(String-int)),
		CorruptedFrameException:<init>() to listOf(DecoderException:<init>()),
		CorruptedFrameException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		CorruptedFrameException:<init>(String) to listOf(DecoderException:<init>(String)),
		CorruptedFrameException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		DecoderException:<init>() to listOf(CodecException:<init>()),
		DecoderException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		DecoderException:<init>(String) to listOf(CodecException:<init>(String)),
		DecoderException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		DecoderResult:failure(Throwable) to listOf(DecoderResult:<init>(Throwable)),
		DecoderResult:cause() to listOf(DecoderResult:isFailure()),
		DecoderResult:toString() to listOf(DecoderResult:isFinished(), DecoderResult:isSuccess(), DecoderResult:cause()),
		DecoderResult:<clinit>() to listOf(Signal:<init>(String), Signal:<init>(String), DecoderResult:<init>(Throwable), DecoderResult:<init>(Throwable)),
		DelimiterBasedFrameDecoder:<init>(int-ByteBuf) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf)),
		DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf)),
		DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:slice(int-int), DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[])),
		DelimiterBasedFrameDecoder:<init>(int-ByteBuf[]) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf[])),
		DelimiterBasedFrameDecoder:<init>(int-boolean-ByteBuf[]) to listOf(DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[])),
		DelimiterBasedFrameDecoder:<init>(int-boolean-boolean-ByteBuf[]) to listOf(ByteToMessageDecoder:<init>(), DelimiterBasedFrameDecoder:validateMaxFrameLength(int), DelimiterBasedFrameDecoder:isLineBased(ByteBuf[]), DelimiterBasedFrameDecoder:isSubclass(), LineBasedFrameDecoder:<init>(int-boolean-boolean), DelimiterBasedFrameDecoder:validateDelimiter(ByteBuf), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:slice(int-int)),
		DelimiterBasedFrameDecoder:isLineBased(ByteBuf[]) to listOf(ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		DelimiterBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), DelimiterBasedFrameDecoder:indexOf(ByteBuf-ByteBuf), ByteBuf:capacity(), ByteBuf:skipBytes(int), DelimiterBasedFrameDecoder:fail(ChannelHandlerContext-long), ByteBuf:skipBytes(int), DelimiterBasedFrameDecoder:fail(ChannelHandlerContext-long), ByteBuf:readBytes(int), ByteBuf:skipBytes(int), ByteBuf:readBytes(int), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), DelimiterBasedFrameDecoder:fail(ChannelHandlerContext-long), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		DelimiterBasedFrameDecoder:fail(ChannelHandlerContext-long) to listOf(TooLongFrameException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable), TooLongFrameException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		DelimiterBasedFrameDecoder:indexOf(ByteBuf-ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:capacity(), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:writerIndex(), ByteBuf:capacity(), ByteBuf:capacity(), ByteBuf:readerIndex()),
		DelimiterBasedFrameDecoder:validateDelimiter(ByteBuf) to listOf(ByteBuf:isReadable()),
		Delimiters:nulDelimiter() to listOf(Unpooled:wrappedBuffer(byte[])),
		Delimiters:lineDelimiter() to listOf(Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[])),
		EncoderException:<init>() to listOf(CodecException:<init>()),
		EncoderException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		EncoderException:<init>(String) to listOf(CodecException:<init>(String)),
		EncoderException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		FixedLengthFrameDecoder:<init>(int) to listOf(ByteToMessageDecoder:<init>()),
		FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		FixedLengthFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readBytes(int)),
		ClientCookieEncoder:encode(String-String) to listOf(DefaultCookie:<init>(String-String), ClientCookieEncoder:encode(Cookie)),
		ClientCookieEncoder:encode(Cookie) to listOf(ClientCookieEncoder:encode(StringBuilder-Cookie), CookieEncoderUtil:stripTrailingSeparator(StringBuilder)),
		ClientCookieEncoder:encode(Cookie[]) to listOf(ClientCookieEncoder:encode(StringBuilder-Cookie), CookieEncoderUtil:stripTrailingSeparator(StringBuilder)),
		ClientCookieEncoder:encode(Iterable) to listOf(ClientCookieEncoder:encode(StringBuilder-Cookie), CookieEncoderUtil:stripTrailingSeparator(StringBuilder)),
		ClientCookieEncoder:encode(StringBuilder-Cookie) to listOf(Cookie:getVersion(), CookieEncoderUtil:add(StringBuilder-String-long), Cookie:getName(), Cookie:getValue(), CookieEncoderUtil:add(StringBuilder-String-String), Cookie:getPath(), Cookie:getPath(), CookieEncoderUtil:add(StringBuilder-String-String), Cookie:getDomain(), Cookie:getDomain(), CookieEncoderUtil:add(StringBuilder-String-String), Cookie:getVersion(), Cookie:getPorts(), Cookie:getPorts()),
		CookieDecoder:decode(String) to listOf(CookieDecoder:extractKeyValuePairs(String-List-List), DefaultCookie:<init>(String-String), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:parse(String), StringUtil:split(String-char), Cookie:setVersion(int), Cookie:setMaxAge(long), Cookie:setPath(String), Cookie:setDomain(String), Cookie:setSecure(boolean), Cookie:setHttpOnly(boolean), Cookie:setComment(String), Cookie:setCommentUrl(String), Cookie:setPorts(Iterable), Cookie:setDiscard(boolean)),
		CookieEncoderUtil:add(StringBuilder-String-String) to listOf(CookieEncoderUtil:addQuoted(StringBuilder-String-String), CookieEncoderUtil:addQuoted(StringBuilder-String-String), CookieEncoderUtil:addUnquoted(StringBuilder-String-String)),
		DefaultCookie:<init>(String-String) to listOf(DefaultCookie:setValue(String)),
		DefaultCookie:setDomain(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setPath(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setComment(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setCommentUrl(String) to listOf(DefaultCookie:validateValue(String-String)),
		DefaultCookie:setPorts(int[]) to listOf(int[]:clone()),
		DefaultCookie:hashCode() to listOf(DefaultCookie:getName()),
		DefaultCookie:equals(Object) to listOf(DefaultCookie:getName(), Cookie:getName(), DefaultCookie:getPath(), Cookie:getPath(), Cookie:getPath(), DefaultCookie:getPath(), Cookie:getPath(), DefaultCookie:getDomain(), Cookie:getDomain(), Cookie:getDomain(), DefaultCookie:getDomain(), Cookie:getDomain()),
		DefaultCookie:compareTo(Cookie) to listOf(DefaultCookie:getName(), Cookie:getName(), DefaultCookie:getPath(), Cookie:getPath(), Cookie:getPath(), DefaultCookie:getPath(), Cookie:getPath(), DefaultCookie:getDomain(), Cookie:getDomain(), Cookie:getDomain(), DefaultCookie:getDomain(), Cookie:getDomain()),
		DefaultCookie:toString() to listOf(DefaultCookie:getName(), DefaultCookie:getValue(), DefaultCookie:getDomain(), DefaultCookie:getDomain(), DefaultCookie:getPath(), DefaultCookie:getPath(), DefaultCookie:getComment(), DefaultCookie:getComment(), DefaultCookie:getMaxAge(), DefaultCookie:getMaxAge(), DefaultCookie:isSecure(), DefaultCookie:isHttpOnly()),
		DefaultCookie:compareTo(Object) to listOf(DefaultCookie:compareTo(Cookie)),
		DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String) to listOf(Unpooled:buffer(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf)),
		DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf) to listOf(DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String), DefaultHttpHeaders:<init>()),
		DefaultFullHttpRequest:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultFullHttpRequest:retain() to listOf(ByteBuf:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain(), DefaultFullHttpRequest:retain()),
		DefaultFullHttpRequest:retain(int) to listOf(ByteBuf:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int), DefaultFullHttpRequest:retain(int)),
		DefaultFullHttpRequest:release() to listOf(ByteBuf:release()),
		DefaultFullHttpRequest:release(int) to listOf(ByteBuf:release(int)),
		DefaultFullHttpRequest:setProtocolVersion(HttpVersion) to listOf(DefaultHttpRequest:setProtocolVersion(HttpVersion), DefaultFullHttpRequest:setProtocolVersion(HttpVersion), DefaultFullHttpRequest:setProtocolVersion(HttpVersion)),
		DefaultFullHttpRequest:setMethod(HttpMethod) to listOf(DefaultHttpRequest:setMethod(HttpMethod), DefaultFullHttpRequest:setMethod(HttpMethod)),
		DefaultFullHttpRequest:setUri(String) to listOf(DefaultHttpRequest:setUri(String), DefaultFullHttpRequest:setUri(String)),
		DefaultFullHttpRequest:copy() to listOf(DefaultFullHttpRequest:getProtocolVersion(), DefaultFullHttpRequest:getMethod(), DefaultFullHttpRequest:getUri(), DefaultFullHttpRequest:content(), ByteBuf:copy(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), DefaultFullHttpRequest:headers(), HttpHeaders:set(HttpHeaders), DefaultFullHttpRequest:trailingHeaders(), DefaultFullHttpRequest:trailingHeaders(), HttpHeaders:set(HttpHeaders), DefaultFullHttpRequest:copy(), DefaultFullHttpRequest:copy(), DefaultFullHttpRequest:copy(), DefaultFullHttpRequest:copy()),
		DefaultFullHttpRequest:duplicate() to listOf(DefaultFullHttpRequest:getProtocolVersion(), DefaultFullHttpRequest:getMethod(), DefaultFullHttpRequest:getUri(), DefaultFullHttpRequest:content(), ByteBuf:duplicate(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), DefaultFullHttpRequest:headers(), HttpHeaders:set(HttpHeaders), DefaultFullHttpRequest:trailingHeaders(), DefaultFullHttpRequest:trailingHeaders(), HttpHeaders:set(HttpHeaders), DefaultFullHttpRequest:duplicate(), DefaultFullHttpRequest:duplicate()),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus) to listOf(Unpooled:buffer(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf)),
		DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf) to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), DefaultHttpHeaders:<init>()),
		DefaultFullHttpResponse:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultFullHttpResponse:retain() to listOf(ByteBuf:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain(), DefaultFullHttpResponse:retain()),
		DefaultFullHttpResponse:retain(int) to listOf(ByteBuf:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int), DefaultFullHttpResponse:retain(int)),
		DefaultFullHttpResponse:release() to listOf(ByteBuf:release()),
		DefaultFullHttpResponse:release(int) to listOf(ByteBuf:release(int)),
		DefaultFullHttpResponse:setProtocolVersion(HttpVersion) to listOf(DefaultHttpResponse:setProtocolVersion(HttpVersion), DefaultFullHttpResponse:setProtocolVersion(HttpVersion), DefaultFullHttpResponse:setProtocolVersion(HttpVersion)),
		DefaultFullHttpResponse:setStatus(HttpResponseStatus) to listOf(DefaultHttpResponse:setStatus(HttpResponseStatus), DefaultFullHttpResponse:setStatus(HttpResponseStatus)),
		DefaultFullHttpResponse:copy() to listOf(DefaultFullHttpResponse:getProtocolVersion(), DefaultFullHttpResponse:getStatus(), DefaultFullHttpResponse:content(), ByteBuf:copy(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), DefaultFullHttpResponse:headers(), DefaultFullHttpResponse:headers(), HttpHeaders:set(HttpHeaders), DefaultFullHttpResponse:trailingHeaders(), DefaultFullHttpResponse:trailingHeaders(), HttpHeaders:set(HttpHeaders), DefaultFullHttpResponse:copy(), DefaultFullHttpResponse:copy(), DefaultFullHttpResponse:copy(), DefaultFullHttpResponse:copy()),
		DefaultFullHttpResponse:duplicate() to listOf(DefaultFullHttpResponse:getProtocolVersion(), DefaultFullHttpResponse:getStatus(), DefaultFullHttpResponse:content(), ByteBuf:duplicate(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), DefaultFullHttpResponse:headers(), DefaultFullHttpResponse:headers(), HttpHeaders:set(HttpHeaders), DefaultFullHttpResponse:trailingHeaders(), DefaultFullHttpResponse:trailingHeaders(), HttpHeaders:set(HttpHeaders), DefaultFullHttpResponse:duplicate(), DefaultFullHttpResponse:duplicate()),
		DefaultHttpContent:<init>(ByteBuf) to listOf(DefaultHttpObject:<init>()),
		DefaultHttpContent:copy() to listOf(ByteBuf:copy(), DefaultHttpContent:<init>(ByteBuf), DefaultHttpContent:copy()),
		DefaultHttpContent:duplicate() to listOf(ByteBuf:duplicate(), DefaultHttpContent:<init>(ByteBuf), DefaultHttpContent:duplicate()),
		DefaultHttpContent:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultHttpContent:retain() to listOf(ByteBuf:retain(), DefaultHttpContent:retain(), DefaultHttpContent:retain()),
		DefaultHttpContent:retain(int) to listOf(ByteBuf:retain(int), DefaultHttpContent:retain(int), DefaultHttpContent:retain(int)),
		DefaultHttpContent:release() to listOf(ByteBuf:release()),
		DefaultHttpContent:release(int) to listOf(ByteBuf:release(int)),
		DefaultHttpContent:toString() to listOf(DefaultHttpContent:content(), DefaultHttpContent:getDecoderResult()),
		DefaultHttpHeaders$HeaderEntry:setValue(String) to listOf(HttpHeaders:validateHeaderValue(String)),
		DefaultHttpHeaders$HeaderEntry:setValue(Object) to listOf(DefaultHttpHeaders$HeaderEntry:setValue(String)),
		DefaultHttpHeaders$HeaderEntry:getValue() to listOf(DefaultHttpHeaders$HeaderEntry:getValue()),
		DefaultHttpHeaders$HeaderEntry:getKey() to listOf(DefaultHttpHeaders$HeaderEntry:getKey()),
		DefaultHttpHeaders:<init>() to listOf(HttpHeaders:<init>(), DefaultHttpHeaders$HeaderEntry:<init>(int-String-String)),
		DefaultHttpHeaders:validateHeaderName0(String) to listOf(DefaultHttpHeaders:validateHeaderName(String)),
		DefaultHttpHeaders:add(String-Object) to listOf(DefaultHttpHeaders:validateHeaderName0(String), DefaultHttpHeaders:toString(Object), DefaultHttpHeaders:validateHeaderValue(String), DefaultHttpHeaders:hash(String), DefaultHttpHeaders:index(int), DefaultHttpHeaders:add0(int-int-String-String)),
		DefaultHttpHeaders:add(String-Iterable) to listOf(DefaultHttpHeaders:validateHeaderName0(String), DefaultHttpHeaders:hash(String), DefaultHttpHeaders:index(int), DefaultHttpHeaders:toString(Object), DefaultHttpHeaders:validateHeaderValue(String), DefaultHttpHeaders:add0(int-int-String-String)),
		DefaultHttpHeaders:add0(int-int-String-String) to listOf(DefaultHttpHeaders$HeaderEntry:<init>(int-String-String), DefaultHttpHeaders$HeaderEntry:addBefore(DefaultHttpHeaders$HeaderEntry)),
		DefaultHttpHeaders:remove(String) to listOf(DefaultHttpHeaders:hash(String), DefaultHttpHeaders:index(int), DefaultHttpHeaders:remove0(int-int-String)),
		DefaultHttpHeaders:remove0(int-int-String) to listOf(DefaultHttpHeaders:eq(String-String), DefaultHttpHeaders$HeaderEntry:remove(), DefaultHttpHeaders:eq(String-String), DefaultHttpHeaders$HeaderEntry:remove()),
		DefaultHttpHeaders:set(String-Object) to listOf(DefaultHttpHeaders:validateHeaderName0(String), DefaultHttpHeaders:toString(Object), DefaultHttpHeaders:validateHeaderValue(String), DefaultHttpHeaders:hash(String), DefaultHttpHeaders:index(int), DefaultHttpHeaders:remove0(int-int-String), DefaultHttpHeaders:add0(int-int-String-String)),
		DefaultHttpHeaders:set(String-Iterable) to listOf(DefaultHttpHeaders:validateHeaderName0(String), DefaultHttpHeaders:hash(String), DefaultHttpHeaders:index(int), DefaultHttpHeaders:remove0(int-int-String), DefaultHttpHeaders:toString(Object), DefaultHttpHeaders:validateHeaderValue(String), DefaultHttpHeaders:add0(int-int-String-String)),
		DefaultHttpHeaders:get(String) to listOf(DefaultHttpHeaders:hash(String), DefaultHttpHeaders:index(int), DefaultHttpHeaders:eq(String-String)),
		DefaultHttpHeaders:getAll(String) to listOf(DefaultHttpHeaders:hash(String), DefaultHttpHeaders:index(int), DefaultHttpHeaders:eq(String-String)),
		DefaultHttpHeaders:iterator() to listOf(DefaultHttpHeaders:entries()),
		DefaultHttpHeaders:contains(String) to listOf(DefaultHttpHeaders:get(String)),
		DefaultHttpHeaders:toString(Object) to listOf(HttpHeaderDateFormat:get(), HttpHeaderDateFormat:format(Date), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:format(Date)),
		DefaultHttpMessage:<init>(HttpVersion) to listOf(DefaultHttpObject:<init>(), DefaultHttpHeaders:<init>()),
		DefaultHttpMessage:toString() to listOf(DefaultHttpMessage:getProtocolVersion(), HttpVersion:text(), HttpHeaders:isKeepAlive(HttpMessage), DefaultHttpMessage:appendHeaders(StringBuilder)),
		DefaultHttpMessage:appendHeaders(StringBuilder) to listOf(DefaultHttpMessage:headers(), HttpHeaders:iterator()),
		DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String) to listOf(DefaultHttpMessage:<init>(HttpVersion)),
		DefaultHttpRequest:setProtocolVersion(HttpVersion) to listOf(DefaultHttpMessage:setProtocolVersion(HttpVersion), DefaultHttpRequest:setProtocolVersion(HttpVersion)),
		DefaultHttpRequest:toString() to listOf(DefaultHttpRequest:getDecoderResult(), DefaultHttpRequest:getMethod(), HttpMethod:toString(), DefaultHttpRequest:getUri(), DefaultHttpRequest:getProtocolVersion(), HttpVersion:text(), DefaultHttpRequest:appendHeaders(StringBuilder)),
		DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus) to listOf(DefaultHttpMessage:<init>(HttpVersion)),
		DefaultHttpResponse:setProtocolVersion(HttpVersion) to listOf(DefaultHttpMessage:setProtocolVersion(HttpVersion), DefaultHttpResponse:setProtocolVersion(HttpVersion)),
		DefaultHttpResponse:toString() to listOf(DefaultHttpResponse:getDecoderResult(), DefaultHttpResponse:getProtocolVersion(), HttpVersion:text(), DefaultHttpResponse:getStatus(), HttpResponseStatus:toString(), DefaultHttpResponse:appendHeaders(StringBuilder)),
		DefaultLastHttpContent$1:<init>(DefaultLastHttpContent) to listOf(DefaultHttpHeaders:<init>()),
		DefaultLastHttpContent$1:validateHeaderName0(String) to listOf(DefaultHttpHeaders:validateHeaderName0(String)),
		DefaultLastHttpContent:<init>() to listOf(Unpooled:buffer(int), DefaultLastHttpContent:<init>(ByteBuf)),
		DefaultLastHttpContent:<init>(ByteBuf) to listOf(DefaultHttpContent:<init>(ByteBuf), DefaultLastHttpContent$1:<init>(DefaultLastHttpContent)),
		DefaultLastHttpContent:copy() to listOf(DefaultLastHttpContent:content(), ByteBuf:copy(), DefaultLastHttpContent:<init>(ByteBuf), DefaultLastHttpContent:trailingHeaders(), DefaultLastHttpContent:trailingHeaders(), HttpHeaders:set(HttpHeaders), DefaultLastHttpContent:copy(), DefaultLastHttpContent:copy()),
		DefaultLastHttpContent:duplicate() to listOf(DefaultLastHttpContent:content(), ByteBuf:duplicate(), DefaultLastHttpContent:<init>(ByteBuf), DefaultLastHttpContent:trailingHeaders(), DefaultLastHttpContent:trailingHeaders(), HttpHeaders:set(HttpHeaders), DefaultLastHttpContent:duplicate(), DefaultLastHttpContent:duplicate()),
		DefaultLastHttpContent:retain(int) to listOf(DefaultHttpContent:retain(int), DefaultLastHttpContent:retain(int), DefaultLastHttpContent:retain(int), DefaultLastHttpContent:retain(int)),
		DefaultLastHttpContent:retain() to listOf(DefaultHttpContent:retain(), DefaultLastHttpContent:retain(), DefaultLastHttpContent:retain(), DefaultLastHttpContent:retain()),
		DefaultLastHttpContent:toString() to listOf(DefaultHttpContent:toString(), DefaultLastHttpContent:appendHeaders(StringBuilder)),
		DefaultLastHttpContent:appendHeaders(StringBuilder) to listOf(DefaultLastHttpContent:trailingHeaders(), HttpHeaders:iterator()),
		HttpClientCodec$Decoder:<init>(HttpClientCodec-int-int-int) to listOf(HttpResponseDecoder:<init>(int-int-int)),
		HttpClientCodec$Decoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(HttpClientCodec:access$100(HttpClientCodec), HttpClientCodec$Decoder:actualReadableBytes(), ByteBuf:readBytes(int), HttpResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List), HttpClientCodec:access$300(HttpClientCodec), HttpClientCodec$Decoder:decrement(Object)),
		HttpClientCodec$Decoder:decrement(Object) to listOf(HttpClientCodec:access$400(HttpClientCodec)),
		HttpClientCodec$Decoder:isContentAlwaysEmpty(HttpMessage) to listOf(HttpResponse:getStatus(), HttpResponseStatus:code(), HttpClientCodec:access$200(HttpClientCodec), HttpMethod:name(), HttpMethod:equals(Object), HttpMethod:equals(Object), HttpClientCodec:access$102(HttpClientCodec-boolean), HttpClientCodec:access$200(HttpClientCodec), HttpResponseDecoder:isContentAlwaysEmpty(HttpMessage)),
		HttpClientCodec$Decoder:channelInactive(ChannelHandlerContext) to listOf(HttpResponseDecoder:channelInactive(ChannelHandlerContext), HttpClientCodec:access$300(HttpClientCodec), HttpClientCodec:access$400(HttpClientCodec), PrematureChannelClosureException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		HttpClientCodec$Encoder:<init>(HttpClientCodec) to listOf(HttpRequestEncoder:<init>()),
		HttpClientCodec$Encoder:encode(ChannelHandlerContext-HttpObject-List) to listOf(HttpClientCodec:access$100(HttpClientCodec), HttpClientCodec:access$200(HttpClientCodec), HttpRequest:getMethod(), HttpRequestEncoder:encode(ChannelHandlerContext-HttpObject-List), HttpClientCodec:access$300(HttpClientCodec), HttpClientCodec:access$400(HttpClientCodec)),
		HttpClientCodec$Encoder:encode(ChannelHandlerContext-Object-List) to listOf(HttpClientCodec$Encoder:encode(ChannelHandlerContext-HttpObject-List)),
		HttpClientCodec$Encoder:<init>(HttpClientCodec-HttpClientCodec$1) to listOf(HttpClientCodec$Encoder:<init>(HttpClientCodec)),
		HttpClientCodec:<init>() to listOf(HttpClientCodec:<init>(int-int-int-boolean)),
		HttpClientCodec:setSingleDecode(boolean) to listOf(HttpClientCodec:inboundHandler(), HttpResponseDecoder:setSingleDecode(boolean)),
		HttpClientCodec:isSingleDecode() to listOf(HttpClientCodec:inboundHandler(), HttpResponseDecoder:isSingleDecode()),
		HttpClientCodec:<init>(int-int-int) to listOf(HttpClientCodec:<init>(int-int-int-boolean)),
		HttpClientCodec:<init>(int-int-int-boolean) to listOf(CombinedChannelDuplexHandler:<init>(), HttpClientCodec$Decoder:<init>(HttpClientCodec-int-int-int), HttpClientCodec$Encoder:<init>(HttpClientCodec-HttpClientCodec$1), HttpClientCodec:init(ChannelInboundHandler-ChannelOutboundHandler)),
		HttpContentCompressor$1:<clinit>() to listOf(ZlibWrapper:values(), ZlibWrapper:ordinal(), ZlibWrapper:ordinal()),
		HttpContentCompressor:<init>() to listOf(HttpContentCompressor:<init>(int)),
		HttpContentCompressor:<init>(int) to listOf(HttpContentCompressor:<init>(int-int-int)),
		HttpContentCompressor:<init>(int-int-int) to listOf(HttpContentEncoder:<init>()),
		HttpContentCompressor:beginEncode(HttpResponse-String) to listOf(HttpResponse:headers(), HttpHeaders:get(String), HttpContentCompressor:determineWrapper(String), ZlibWrapper:ordinal(), ZlibCodecFactory:newZlibEncoder(ZlibWrapper-int-int-int), EmbeddedChannel:<init>(ChannelHandler[]), HttpContentEncoder$Result:<init>(String-EmbeddedChannel)),
		HttpContentCompressor:determineWrapper(String) to listOf(StringUtil:split(String-char)),
		HttpContentDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		HttpContentDecoder:decode(ChannelHandlerContext-HttpObject-List) to listOf(HttpResponse:getStatus(), HttpResponseStatus:code(), ReferenceCountUtil:retain(Object), ReferenceCountUtil:retain(Object), HttpContentDecoder:cleanup(), HttpMessage:headers(), HttpHeaders:get(String), HttpContentDecoder:newContentDecoder(String), HttpContentDecoder:getTargetContentEncoding(String), HttpHeaders:remove(String), HttpHeaders:set(String-Object), HttpContentDecoder:decodeContent(HttpContent-List), HttpHeaders:contains(String), HttpContent:content(), ByteBuf:readableBytes(), HttpHeaders:set(String-Object), HttpContent:retain(), HttpContentDecoder:decodeContent(HttpContent-List), HttpContent:retain()),
		HttpContentDecoder:decodeContent(HttpContent-List) to listOf(HttpContent:content(), HttpContentDecoder:decode(ByteBuf-List), HttpContentDecoder:finishDecode(List)),
		HttpContentDecoder:handlerRemoved(ChannelHandlerContext) to listOf(HttpContentDecoder:cleanup(), MessageToMessageDecoder:handlerRemoved(ChannelHandlerContext)),
		HttpContentDecoder:channelInactive(ChannelHandlerContext) to listOf(HttpContentDecoder:cleanup(), MessageToMessageDecoder:channelInactive(ChannelHandlerContext)),
		HttpContentDecoder:cleanup() to listOf(EmbeddedChannel:finish(), EmbeddedChannel:readOutbound(), ByteBuf:release()),
		HttpContentDecoder:decode(ByteBuf-List) to listOf(ByteBuf:retain(), EmbeddedChannel:writeOutbound(Object[]), HttpContentDecoder:fetchDecoderOutput(List)),
		HttpContentDecoder:finishDecode(List) to listOf(EmbeddedChannel:finish(), HttpContentDecoder:fetchDecoderOutput(List)),
		HttpContentDecoder:fetchDecoderOutput(List) to listOf(EmbeddedChannel:readOutbound(), ByteBuf:isReadable(), ByteBuf:release(), DefaultHttpContent:<init>(ByteBuf)),
		HttpContentDecoder:decode(ChannelHandlerContext-Object-List) to listOf(HttpContentDecoder:decode(ChannelHandlerContext-HttpObject-List)),
		HttpContentDecompressor:<init>() to listOf(HttpContentDecoder:<init>()),
		HttpContentDecompressor:newContentDecoder(String) to listOf(ZlibCodecFactory:newZlibDecoder(ZlibWrapper), EmbeddedChannel:<init>(ChannelHandler[]), ZlibCodecFactory:newZlibDecoder(ZlibWrapper), EmbeddedChannel:<init>(ChannelHandler[])),
		HttpContentEncoder$1:<clinit>() to listOf(HttpContentEncoder$State:values(), HttpContentEncoder$State:ordinal(), HttpContentEncoder$State:ordinal(), HttpContentEncoder$State:ordinal()),
		HttpContentEncoder$State:values() to listOf(HttpContentEncoder$State[]:clone()),
		HttpContentEncoder$State:<clinit>() to listOf(HttpContentEncoder$State:<init>(String-int), HttpContentEncoder$State:<init>(String-int), HttpContentEncoder$State:<init>(String-int)),
		HttpContentEncoder:<init>() to listOf(MessageToMessageCodec:<init>()),
		HttpContentEncoder:decode(ChannelHandlerContext-HttpRequest-List) to listOf(HttpRequest:headers(), HttpHeaders:get(String), ReferenceCountUtil:retain(Object)),
		HttpContentEncoder:encode(ChannelHandlerContext-HttpObject-List) to listOf(HttpContentEncoder$State:ordinal(), HttpContentEncoder:ensureHeaders(HttpObject), HttpResponse:getStatus(), HttpResponseStatus:code(), ReferenceCountUtil:retain(Object), ByteBufHolder:content(), ByteBuf:isReadable(), HttpResponse:headers(), HttpHeaders:remove(String), HttpResponse:headers(), HttpHeaders:set(String-Object), ReferenceCountUtil:retain(Object), HttpContentEncoder:beginEncode(HttpResponse-String), HttpResponse:headers(), HttpHeaders:remove(String), HttpResponse:headers(), ByteBufHolder:content(), ByteBuf:readableBytes(), HttpHeaders:set(String-Object), ReferenceCountUtil:retain(Object), HttpContentEncoder$Result:contentEncoder(), HttpResponse:headers(), HttpContentEncoder$Result:targetContentEncoding(), HttpHeaders:set(String-Object), HttpResponse:headers(), HttpHeaders:remove(String), HttpResponse:headers(), HttpHeaders:set(String-Object), HttpResponse:getProtocolVersion(), HttpResponse:getStatus(), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), HttpResponse:headers(), HttpResponse:headers(), HttpHeaders:set(HttpHeaders), HttpContentEncoder:ensureContent(HttpObject), HttpContentEncoder:encodeContent(HttpContent-List), HttpContentEncoder:ensureContent(HttpObject), ReferenceCountUtil:retain(Object)),
		HttpContentEncoder:encodeContent(HttpContent-List) to listOf(HttpContent:content(), HttpContentEncoder:encode(ByteBuf-List), HttpContentEncoder:finishEncode(List)),
		HttpContentEncoder:handlerRemoved(ChannelHandlerContext) to listOf(HttpContentEncoder:cleanup(), MessageToMessageCodec:handlerRemoved(ChannelHandlerContext)),
		HttpContentEncoder:channelInactive(ChannelHandlerContext) to listOf(HttpContentEncoder:cleanup(), MessageToMessageCodec:channelInactive(ChannelHandlerContext)),
		HttpContentEncoder:cleanup() to listOf(EmbeddedChannel:finish(), EmbeddedChannel:readOutbound(), ByteBuf:release()),
		HttpContentEncoder:encode(ByteBuf-List) to listOf(ByteBuf:retain(), EmbeddedChannel:writeOutbound(Object[]), HttpContentEncoder:fetchEncoderOutput(List)),
		HttpContentEncoder:finishEncode(List) to listOf(EmbeddedChannel:finish(), HttpContentEncoder:fetchEncoderOutput(List)),
		HttpContentEncoder:fetchEncoderOutput(List) to listOf(EmbeddedChannel:readOutbound(), ByteBuf:isReadable(), ByteBuf:release(), DefaultHttpContent:<init>(ByteBuf)),
		HttpContentEncoder:decode(ChannelHandlerContext-Object-List) to listOf(HttpContentEncoder:decode(ChannelHandlerContext-HttpRequest-List)),
		HttpContentEncoder:encode(ChannelHandlerContext-Object-List) to listOf(HttpContentEncoder:encode(ChannelHandlerContext-HttpObject-List)),
		HttpHeaderDateFormat$1:initialValue() to listOf(HttpHeaderDateFormat:<init>(HttpHeaderDateFormat$1), HttpHeaderDateFormat$1:initialValue()),
		HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:<init>() to listOf(HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:setTimeZone(TimeZone)),
		HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:<init>() to listOf(HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:setTimeZone(TimeZone)),
		HttpHeaderDateFormat:<init>() to listOf(HttpHeaderDateFormat$HttpHeaderDateFormatObsolete1:<init>(), HttpHeaderDateFormat$HttpHeaderDateFormatObsolete2:<init>(), HttpHeaderDateFormat:setTimeZone(TimeZone)),
		HttpHeaderDateFormat:<init>(HttpHeaderDateFormat$1) to listOf(HttpHeaderDateFormat:<init>()),
		HttpHeaderDateFormat:<clinit>() to listOf(HttpHeaderDateFormat$1:<init>()),
		HttpHeaders$1:<init>() to listOf(HttpHeaders:<init>()),
		HttpHeaders$1:iterator() to listOf(HttpHeaders$1:entries()),
		HttpHeaders:isKeepAlive(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:get(String), HttpMessage:getProtocolVersion(), HttpVersion:isKeepAliveDefault()),
		HttpHeaders:setKeepAlive(HttpMessage-boolean) to listOf(HttpMessage:headers(), HttpMessage:getProtocolVersion(), HttpVersion:isKeepAliveDefault(), HttpHeaders:remove(String), HttpHeaders:set(String-Object), HttpHeaders:set(String-Object), HttpHeaders:remove(String)),
		HttpHeaders:getHeader(HttpMessage-String) to listOf(HttpMessage:headers(), HttpHeaders:get(String)),
		HttpHeaders:getHeader(HttpMessage-String-String) to listOf(HttpMessage:headers(), HttpHeaders:get(String)),
		HttpHeaders:setHeader(HttpMessage-String-Object) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Object)),
		HttpHeaders:setHeader(HttpMessage-String-Iterable) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Iterable)),
		HttpHeaders:addHeader(HttpMessage-String-Object) to listOf(HttpMessage:headers(), HttpHeaders:add(String-Object)),
		HttpHeaders:removeHeader(HttpMessage-String) to listOf(HttpMessage:headers(), HttpHeaders:remove(String)),
		HttpHeaders:clearHeaders(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:clear()),
		HttpHeaders:getIntHeader(HttpMessage-String) to listOf(HttpHeaders:getHeader(HttpMessage-String)),
		HttpHeaders:getIntHeader(HttpMessage-String-int) to listOf(HttpHeaders:getHeader(HttpMessage-String)),
		HttpHeaders:setIntHeader(HttpMessage-String-int) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Object)),
		HttpHeaders:setIntHeader(HttpMessage-String-Iterable) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Iterable)),
		HttpHeaders:addIntHeader(HttpMessage-String-int) to listOf(HttpMessage:headers(), HttpHeaders:add(String-Object)),
		HttpHeaders:getDateHeader(HttpMessage-String) to listOf(HttpHeaders:getHeader(HttpMessage-String), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:parse(String)),
		HttpHeaders:getDateHeader(HttpMessage-String-Date) to listOf(HttpHeaders:getHeader(HttpMessage-String), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:parse(String)),
		HttpHeaders:setDateHeader(HttpMessage-String-Date) to listOf(HttpMessage:headers(), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:format(Date), HttpHeaders:set(String-Object), HttpMessage:headers(), HttpHeaders:set(String-Iterable)),
		HttpHeaders:setDateHeader(HttpMessage-String-Iterable) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Iterable)),
		HttpHeaders:addDateHeader(HttpMessage-String-Date) to listOf(HttpMessage:headers(), HttpHeaders:add(String-Object)),
		HttpHeaders:getContentLength(HttpMessage) to listOf(HttpHeaders:getHeader(HttpMessage-String), HttpHeaders:getWebSocketContentLength(HttpMessage)),
		HttpHeaders:getContentLength(HttpMessage-long) to listOf(HttpMessage:headers(), HttpHeaders:get(String), HttpHeaders:getWebSocketContentLength(HttpMessage)),
		HttpHeaders:getWebSocketContentLength(HttpMessage) to listOf(HttpMessage:headers(), HttpRequest:getMethod(), HttpMethod:equals(Object), HttpHeaders:contains(String), HttpHeaders:contains(String), HttpResponse:getStatus(), HttpResponseStatus:code(), HttpHeaders:contains(String), HttpHeaders:contains(String)),
		HttpHeaders:setContentLength(HttpMessage-long) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Object)),
		HttpHeaders:getHost(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:get(String)),
		HttpHeaders:getHost(HttpMessage-String) to listOf(HttpHeaders:getHeader(HttpMessage-String-String)),
		HttpHeaders:setHost(HttpMessage-String) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Object)),
		HttpHeaders:getDate(HttpMessage) to listOf(HttpHeaders:getDateHeader(HttpMessage-String)),
		HttpHeaders:getDate(HttpMessage-Date) to listOf(HttpHeaders:getDateHeader(HttpMessage-String-Date)),
		HttpHeaders:setDate(HttpMessage-Date) to listOf(HttpMessage:headers(), HttpHeaderDateFormat:get(), HttpHeaderDateFormat:format(Date), HttpHeaders:set(String-Object), HttpMessage:headers(), HttpHeaders:set(String-Iterable)),
		HttpHeaders:is100ContinueExpected(HttpMessage) to listOf(HttpMessage:getProtocolVersion(), HttpVersion:compareTo(HttpVersion), HttpMessage:headers(), HttpHeaders:get(String), HttpMessage:headers(), HttpHeaders:getAll(String)),
		HttpHeaders:set100ContinueExpected(HttpMessage) to listOf(HttpHeaders:set100ContinueExpected(HttpMessage-boolean)),
		HttpHeaders:set100ContinueExpected(HttpMessage-boolean) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Object), HttpMessage:headers(), HttpHeaders:remove(String)),
		HttpHeaders:isTransferEncodingChunked(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:getAll(String)),
		HttpHeaders:removeTransferEncodingChunked(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:getAll(String), HttpMessage:headers(), HttpHeaders:remove(String), HttpMessage:headers(), HttpHeaders:set(String-Iterable)),
		HttpHeaders:setTransferEncodingChunked(HttpMessage) to listOf(HttpHeaders:addHeader(HttpMessage-String-Object), HttpHeaders:removeHeader(HttpMessage-String)),
		HttpHeaders:isContentLengthSet(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:getAll(String)),
		HttpHeaders:add(HttpHeaders) to listOf(HttpHeaders:iterator(), HttpHeaders:add(String-Object)),
		HttpHeaders:set(HttpHeaders) to listOf(HttpHeaders:clear(), HttpHeaders:iterator(), HttpHeaders:add(String-Object)),
		HttpHeaders:<clinit>() to listOf(HttpHeaders$1:<init>()),
		HttpMethod:valueOf(String) to listOf(HttpMethod:<init>(String)),
		HttpMethod:hashCode() to listOf(HttpMethod:name()),
		HttpMethod:equals(Object) to listOf(HttpMethod:name(), HttpMethod:name()),
		HttpMethod:toString() to listOf(HttpMethod:name()),
		HttpMethod:compareTo(HttpMethod) to listOf(HttpMethod:name(), HttpMethod:name()),
		HttpMethod:compareTo(Object) to listOf(HttpMethod:compareTo(HttpMethod)),
		HttpMethod:<clinit>() to listOf(HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString()),
		HttpObjectAggregator:<init>(int) to listOf(MessageToMessageDecoder:<init>()),
		HttpObjectAggregator:decode(ChannelHandlerContext-HttpObject-List) to listOf(HttpHeaders:is100ContinueExpected(HttpMessage), ByteBuf:duplicate(), ChannelHandlerContext:writeAndFlush(Object), HttpMessage:getDecoderResult(), DecoderResult:isSuccess(), HttpHeaders:removeTransferEncodingChunked(HttpMessage), ReferenceCountUtil:retain(Object), HttpRequest:getProtocolVersion(), HttpRequest:getMethod(), HttpRequest:getUri(), Unpooled:compositeBuffer(int), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), HttpResponse:getProtocolVersion(), HttpResponse:getStatus(), Unpooled:compositeBuffer(int), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), FullHttpMessage:headers(), HttpMessage:headers(), HttpHeaders:set(HttpHeaders), HttpHeaders:removeTransferEncodingChunked(HttpMessage), FullHttpMessage:content(), CompositeByteBuf:readableBytes(), HttpContent:content(), ByteBuf:readableBytes(), FullHttpMessage:release(), TooLongFrameException:<init>(String), HttpContent:content(), ByteBuf:isReadable(), HttpContent:retain(), HttpContent:content(), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), HttpContent:content(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int), HttpContent:getDecoderResult(), DecoderResult:isSuccess(), HttpContent:getDecoderResult(), DecoderResult:cause(), DecoderResult:failure(Throwable), FullHttpMessage:setDecoderResult(DecoderResult), FullHttpMessage:headers(), LastHttpContent:trailingHeaders(), HttpHeaders:add(HttpHeaders), FullHttpMessage:headers(), CompositeByteBuf:readableBytes(), HttpHeaders:set(String-Object)),
		HttpObjectAggregator:channelInactive(ChannelHandlerContext) to listOf(MessageToMessageDecoder:channelInactive(ChannelHandlerContext), FullHttpMessage:release()),
		HttpObjectAggregator:handlerRemoved(ChannelHandlerContext) to listOf(MessageToMessageDecoder:handlerRemoved(ChannelHandlerContext), FullHttpMessage:release()),
		HttpObjectAggregator:decode(ChannelHandlerContext-Object-List) to listOf(HttpObjectAggregator:decode(ChannelHandlerContext-HttpObject-List)),
		HttpObjectAggregator:<clinit>() to listOf(Unpooled:copiedBuffer(CharSequence-Charset), Unpooled:unreleasableBuffer(ByteBuf)),
		HttpObjectDecoder$1:<clinit>() to listOf(HttpObjectDecoder$State:values(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder$State:ordinal()),
		HttpObjectDecoder$State:values() to listOf(HttpObjectDecoder$State[]:clone()),
		HttpObjectDecoder$State:<clinit>() to listOf(HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int), HttpObjectDecoder$State:<init>(String-int)),
		HttpObjectDecoder:<init>() to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		HttpObjectDecoder:<init>(int-int-int-boolean) to listOf(ReplayingDecoder:<init>(Object)),
		HttpObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(HttpObjectDecoder:state(), HttpObjectDecoder$State:ordinal(), HttpObjectDecoder:skipControlCharacters(ByteBuf), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:checkpoint(), HttpObjectDecoder:checkpoint(), HttpObjectDecoder:readLine(ByteBuf-int), HttpObjectDecoder:splitInitialLine(String), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:createMessage(String[]), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:invalidMessage(Exception), HttpObjectDecoder:readHeaders(ByteBuf), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:reset(List), HttpHeaders:getContentLength(HttpMessage-long), HttpObjectDecoder:isDecodingRequest(), HttpObjectDecoder:reset(List), HttpObjectDecoder$State:ordinal(), HttpHeaders:is100ContinueExpected(HttpMessage), HttpObjectDecoder:checkpoint(Object), HttpHeaders:getContentLength(HttpMessage-long), ByteBuf:readableBytes(), HttpHeaders:is100ContinueExpected(HttpMessage), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:invalidMessage(Exception), HttpObjectDecoder:actualReadableBytes(), ByteBuf:readBytes(int), DefaultHttpContent:<init>(ByteBuf), HttpObjectDecoder:actualReadableBytes(), ByteBuf:readBytes(int), ByteBuf:isReadable(), HttpObjectDecoder:reset(), DefaultLastHttpContent:<init>(ByteBuf), DefaultHttpContent:<init>(ByteBuf), HttpObjectDecoder:readFixedLengthContent(ByteBuf-List), HttpObjectDecoder:actualReadableBytes(), ByteBuf:readBytes(int), HttpObjectDecoder:reset(), DefaultLastHttpContent:<init>(ByteBuf), DefaultHttpContent:<init>(ByteBuf), HttpObjectDecoder:readLine(ByteBuf-int), HttpObjectDecoder:getChunkSize(String), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:invalidChunk(Exception), ByteBuf:readBytes(int), DefaultHttpContent:<init>(ByteBuf), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:actualReadableBytes(), ByteBuf:readBytes(int), DefaultHttpContent:<init>(ByteBuf), HttpObjectDecoder:checkpoint(Object), ByteBuf:readByte(), ByteBuf:readByte(), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:checkpoint(Object), HttpObjectDecoder:checkpoint(), HttpObjectDecoder:readTrailingHeaders(ByteBuf), HttpObjectDecoder:reset(List), HttpObjectDecoder:reset(), HttpObjectDecoder:invalidChunk(Exception), HttpObjectDecoder:actualReadableBytes(), ByteBuf:skipBytes(int)),
		HttpObjectDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(HttpObjectDecoder:decode(ChannelHandlerContext-ByteBuf-List), ByteBuf:readableBytes(), HttpObjectDecoder:isDecodingRequest(), HttpHeaders:getContentLength(HttpMessage-long), DefaultLastHttpContent:<init>(ByteBuf)),
		HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage) to listOf(HttpResponse:getStatus(), HttpResponseStatus:code(), HttpResponse:headers(), HttpHeaders:contains(String)),
		HttpObjectDecoder:reset() to listOf(HttpObjectDecoder:reset(List)),
		HttpObjectDecoder:reset(List) to listOf(ByteBuf:isReadable(), DefaultLastHttpContent:<init>(ByteBuf), HttpObjectDecoder:checkpoint(Object)),
		HttpObjectDecoder:invalidMessage(Exception) to listOf(HttpObjectDecoder:checkpoint(Object), DecoderResult:failure(Throwable), HttpMessage:setDecoderResult(DecoderResult), HttpObjectDecoder:createInvalidMessage(), DecoderResult:failure(Throwable), HttpMessage:setDecoderResult(DecoderResult)),
		HttpObjectDecoder:invalidChunk(Exception) to listOf(HttpObjectDecoder:checkpoint(Object), DefaultHttpContent:<init>(ByteBuf), DecoderResult:failure(Throwable), HttpContent:setDecoderResult(DecoderResult)),
		HttpObjectDecoder:skipControlCharacters(ByteBuf) to listOf(ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		HttpObjectDecoder:readFixedLengthContent(ByteBuf-List) to listOf(HttpHeaders:getContentLength(HttpMessage-long), HttpObjectDecoder:actualReadableBytes(), HttpObjectDecoder:actualReadableBytes(), ByteBuf:readBytes(int), DefaultHttpContent:<init>(ByteBuf), ByteBuf:readBytes(int), ByteBuf:writeBytes(ByteBuf-int), HttpObjectDecoder:reset(List)),
		HttpObjectDecoder:readHeaders(ByteBuf) to listOf(HttpMessage:headers(), HttpObjectDecoder:readHeader(ByteBuf), HttpHeaders:clear(), HttpHeaders:add(String-Object), HttpObjectDecoder:splitHeader(String), HttpObjectDecoder:readHeader(ByteBuf), HttpHeaders:add(String-Object), HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage), HttpHeaders:removeTransferEncodingChunked(HttpMessage), HttpHeaders:isTransferEncodingChunked(HttpMessage), HttpHeaders:getContentLength(HttpMessage-long)),
		HttpObjectDecoder:readTrailingHeaders(ByteBuf) to listOf(HttpObjectDecoder:readHeader(ByteBuf), DefaultLastHttpContent:<init>(ByteBuf), LastHttpContent:trailingHeaders(), HttpHeaders:getAll(String), HttpObjectDecoder:splitHeader(String), LastHttpContent:trailingHeaders(), HttpHeaders:add(String-Object), HttpObjectDecoder:readHeader(ByteBuf)),
		HttpObjectDecoder:readHeader(ByteBuf) to listOf(ByteBuf:readByte(), ByteBuf:readByte(), TooLongFrameException:<init>(String)),
		HttpObjectDecoder:readLine(ByteBuf-int) to listOf(ByteBuf:readByte(), ByteBuf:readByte(), TooLongFrameException:<init>(String)),
		HttpObjectDecoder:splitInitialLine(String) to listOf(HttpObjectDecoder:findNonWhitespace(String-int), HttpObjectDecoder:findWhitespace(String-int), HttpObjectDecoder:findNonWhitespace(String-int), HttpObjectDecoder:findWhitespace(String-int), HttpObjectDecoder:findNonWhitespace(String-int), HttpObjectDecoder:findEndOfString(String)),
		HttpObjectDecoder:splitHeader(String) to listOf(HttpObjectDecoder:findNonWhitespace(String-int), HttpObjectDecoder:findNonWhitespace(String-int), HttpObjectDecoder:findEndOfString(String)),
		HttpObjectEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		HttpObjectEncoder:encode(ChannelHandlerContext-HttpObject-List) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), HttpObjectEncoder:encodeInitialLine(ByteBuf-HttpMessage), HttpMessage:headers(), HttpObjectEncoder:encodeHeaders(ByteBuf-HttpHeaders), ByteBuf:writeBytes(byte[]), HttpHeaders:isTransferEncodingChunked(HttpMessage), HttpContent:content(), ByteBuf:readableBytes(), ByteBuf:retain(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeBytes(byte[]), ByteBuf:retain(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(byte[]), LastHttpContent:trailingHeaders(), HttpHeaders:isEmpty(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(byte[]), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), ByteBuf:writeBytes(byte[]), HttpObjectEncoder:encodeHeaders(ByteBuf-HttpHeaders), ByteBuf:writeBytes(byte[])),
		HttpObjectEncoder:encodeHeaders(ByteBuf-HttpHeaders) to listOf(HttpHeaders:iterator(), HttpObjectEncoder:encodeHeader(ByteBuf-String-String)),
		HttpObjectEncoder:encodeHeader(ByteBuf-String-String) to listOf(HttpObjectEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeBytes(byte[]), HttpObjectEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeBytes(byte[])),
		HttpObjectEncoder:encodeAscii(String-ByteBuf) to listOf(ByteBuf:writeByte(int)),
		HttpObjectEncoder:encode(ChannelHandlerContext-Object-List) to listOf(HttpObjectEncoder:encode(ChannelHandlerContext-HttpObject-List)),
		HttpRequestDecoder:<init>() to listOf(HttpObjectDecoder:<init>()),
		HttpRequestDecoder:<init>(int-int-int) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		HttpRequestDecoder:createMessage(String[]) to listOf(HttpVersion:valueOf(String), HttpMethod:valueOf(String), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String)),
		HttpRequestDecoder:createInvalidMessage() to listOf(DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String)),
		HttpRequestEncoder:<init>() to listOf(HttpObjectEncoder:<init>()),
		HttpRequestEncoder:acceptOutboundMessage(Object) to listOf(HttpObjectEncoder:acceptOutboundMessage(Object)),
		HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest) to listOf(HttpRequest:getMethod(), HttpMethod:toString(), HttpRequestEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeByte(int), HttpRequest:getUri(), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), HttpRequest:getProtocolVersion(), HttpVersion:toString(), HttpRequestEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeBytes(byte[])),
		HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(HttpRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest)),
		HttpResponseDecoder:<init>() to listOf(HttpObjectDecoder:<init>()),
		HttpResponseDecoder:<init>(int-int-int) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		HttpResponseDecoder:createMessage(String[]) to listOf(HttpVersion:valueOf(String), HttpResponseStatus:<init>(int-String), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus)),
		HttpResponseDecoder:createInvalidMessage() to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus)),
		HttpResponseDecoder:<clinit>() to listOf(HttpResponseStatus:<init>(int-String)),
		HttpResponseEncoder:<init>() to listOf(HttpObjectEncoder:<init>()),
		HttpResponseEncoder:acceptOutboundMessage(Object) to listOf(HttpObjectEncoder:acceptOutboundMessage(Object)),
		HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse) to listOf(HttpResponse:getProtocolVersion(), HttpVersion:toString(), HttpResponseEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeByte(int), HttpResponse:getStatus(), HttpResponseStatus:code(), HttpResponseEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeByte(int), HttpResponse:getStatus(), HttpResponseStatus:reasonPhrase(), HttpResponseEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeBytes(byte[])),
		HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(HttpResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse)),
		HttpResponseStatus:valueOf(int) to listOf(HttpResponseStatus:<init>(int-String)),
		HttpResponseStatus:hashCode() to listOf(HttpResponseStatus:code()),
		HttpResponseStatus:equals(Object) to listOf(HttpResponseStatus:code(), HttpResponseStatus:code()),
		HttpResponseStatus:compareTo(HttpResponseStatus) to listOf(HttpResponseStatus:code(), HttpResponseStatus:code()),
		HttpResponseStatus:compareTo(Object) to listOf(HttpResponseStatus:compareTo(HttpResponseStatus)),
		HttpResponseStatus:<clinit>() to listOf(HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String)),
		HttpServerCodec:<init>() to listOf(HttpServerCodec:<init>(int-int-int)),
		HttpServerCodec:<init>(int-int-int) to listOf(HttpRequestDecoder:<init>(int-int-int), HttpResponseEncoder:<init>(), CombinedChannelDuplexHandler:<init>(ChannelInboundHandler-ChannelOutboundHandler)),
		HttpVersion:valueOf(String) to listOf(HttpVersion:<init>(String-boolean)),
		HttpVersion:toString() to listOf(HttpVersion:text()),
		HttpVersion:hashCode() to listOf(HttpVersion:protocolName(), HttpVersion:majorVersion(), HttpVersion:minorVersion()),
		HttpVersion:equals(Object) to listOf(HttpVersion:minorVersion(), HttpVersion:minorVersion(), HttpVersion:majorVersion(), HttpVersion:majorVersion(), HttpVersion:protocolName(), HttpVersion:protocolName()),
		HttpVersion:compareTo(HttpVersion) to listOf(HttpVersion:protocolName(), HttpVersion:protocolName(), HttpVersion:majorVersion(), HttpVersion:majorVersion(), HttpVersion:minorVersion(), HttpVersion:minorVersion()),
		HttpVersion:compareTo(Object) to listOf(HttpVersion:compareTo(HttpVersion)),
		HttpVersion:<clinit>() to listOf(HttpVersion:<init>(String-int-int-boolean), HttpVersion:<init>(String-int-int-boolean)),
		LastHttpContent$1:retain(int) to listOf(LastHttpContent$1:retain(int), LastHttpContent$1:retain(int), LastHttpContent$1:retain(int)),
		LastHttpContent$1:retain() to listOf(LastHttpContent$1:retain(), LastHttpContent$1:retain(), LastHttpContent$1:retain()),
		LastHttpContent$1:duplicate() to listOf(LastHttpContent$1:duplicate(), LastHttpContent$1:duplicate()),
		LastHttpContent$1:copy() to listOf(LastHttpContent$1:copy(), LastHttpContent$1:copy()),
		LastHttpContent:<clinit>() to listOf(LastHttpContent$1:<init>()),
		AbstractDiskHttpData:<init>(String-Charset-long) to listOf(AbstractHttpData:<init>(String-Charset-long)),
		AbstractDiskHttpData:tempFile() to listOf(AbstractDiskHttpData:getDiskFilename(), AbstractDiskHttpData:getPostfix(), AbstractDiskHttpData:getBaseDirectory(), AbstractDiskHttpData:getPrefix(), AbstractDiskHttpData:getPrefix(), AbstractDiskHttpData:getBaseDirectory(), AbstractDiskHttpData:deleteOnExit()),
		AbstractDiskHttpData:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), AbstractDiskHttpData:tempFile(), ByteBuf:readableBytes(), ByteBuf:release(), ByteBuf:nioBuffer(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:release(), ByteBuf:release()),
		AbstractDiskHttpData:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:copy(), ByteBuf:nioBuffer(), AbstractDiskHttpData:tempFile(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:release(), ByteBuf:release(), AbstractDiskHttpData:tempFile()),
		AbstractDiskHttpData:setContent(File) to listOf(AbstractDiskHttpData:delete()),
		AbstractDiskHttpData:setContent(InputStream) to listOf(AbstractDiskHttpData:delete(), AbstractDiskHttpData:tempFile()),
		AbstractDiskHttpData:get() to listOf(AbstractDiskHttpData:readFrom(File)),
		AbstractDiskHttpData:getByteBuf() to listOf(AbstractDiskHttpData:readFrom(File), Unpooled:wrappedBuffer(byte[])),
		AbstractDiskHttpData:getChunk(int) to listOf(Unpooled:wrappedBuffer(ByteBuffer), ByteBuf:readerIndex(int), ByteBuf:writerIndex(int)),
		AbstractDiskHttpData:getString() to listOf(AbstractDiskHttpData:getString(Charset)),
		AbstractDiskHttpData:getString(Charset) to listOf(AbstractDiskHttpData:readFrom(File), AbstractDiskHttpData:readFrom(File)),
		AbstractHttpData:<init>(String-Charset-long) to listOf(AbstractReferenceCounted:<init>(), AbstractHttpData:setCharset(Charset)),
		AbstractHttpData:content() to listOf(AbstractHttpData:getByteBuf(), ChannelException:<init>(Throwable)),
		AbstractHttpData:deallocate() to listOf(AbstractHttpData:delete()),
		AbstractHttpData:retain() to listOf(AbstractReferenceCounted:retain(), AbstractHttpData:retain(), AbstractHttpData:retain()),
		AbstractHttpData:retain(int) to listOf(AbstractReferenceCounted:retain(int), AbstractHttpData:retain(int), AbstractHttpData:retain(int)),
		AbstractMemoryHttpData:<init>(String-Charset-long) to listOf(AbstractHttpData:<init>(String-Charset-long)),
		AbstractMemoryHttpData:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:release()),
		AbstractMemoryHttpData:setContent(InputStream) to listOf(Unpooled:buffer(), ByteBuf:writeBytes(byte[]-int-int), ByteBuf:release()),
		AbstractMemoryHttpData:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int), Unpooled:compositeBuffer(int), CompositeByteBuf:addComponents(ByteBuf[]), ByteBuf:readableBytes(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int)),
		AbstractMemoryHttpData:setContent(File) to listOf(ByteBuf:release(), Unpooled:wrappedBuffer(int-ByteBuffer[])),
		AbstractMemoryHttpData:get() to listOf(ByteBuf:array(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[])),
		AbstractMemoryHttpData:getString() to listOf(AbstractMemoryHttpData:getString(Charset)),
		AbstractMemoryHttpData:getString(Charset) to listOf(ByteBuf:toString(Charset)),
		AbstractMemoryHttpData:getChunk(int) to listOf(ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:slice(int-int)),
		AbstractMemoryHttpData:renameTo(File) to listOf(ByteBuf:readableBytes(), ByteBuf:nioBufferCount(), ByteBuf:nioBuffer(), ByteBuf:nioBuffers()),
		CaseIgnoringComparator:compare(Object-Object) to listOf(CaseIgnoringComparator:compare(String-String)),
		CaseIgnoringComparator:<clinit>() to listOf(CaseIgnoringComparator:<init>()),
		DefaultHttpDataFactory:<init>() to listOf(PlatformDependent:newConcurrentHashMap()),
		DefaultHttpDataFactory:<init>(boolean) to listOf(PlatformDependent:newConcurrentHashMap()),
		DefaultHttpDataFactory:<init>(long) to listOf(PlatformDependent:newConcurrentHashMap()),
		DefaultHttpDataFactory:createAttribute(HttpRequest-String) to listOf(DiskAttribute:<init>(String), DefaultHttpDataFactory:getList(HttpRequest), MixedAttribute:<init>(String-long), DefaultHttpDataFactory:getList(HttpRequest), MemoryAttribute:<init>(String)),
		DefaultHttpDataFactory:createAttribute(HttpRequest-String-String) to listOf(DiskAttribute:<init>(String-String), MixedAttribute:<init>(String-String-long), DefaultHttpDataFactory:getList(HttpRequest), MixedAttribute:<init>(String-String-long), DefaultHttpDataFactory:getList(HttpRequest), MemoryAttribute:<init>(String-String)),
		DefaultHttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long) to listOf(DiskFileUpload:<init>(String-String-String-String-Charset-long), DefaultHttpDataFactory:getList(HttpRequest), MixedFileUpload:<init>(String-String-String-String-Charset-long-long), DefaultHttpDataFactory:getList(HttpRequest), MemoryFileUpload:<init>(String-String-String-String-Charset-long)),
		DefaultHttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData) to listOf(DefaultHttpDataFactory:getList(HttpRequest)),
		DefaultHttpDataFactory:cleanRequestHttpDatas(HttpRequest) to listOf(HttpData:delete()),
		DefaultHttpDataFactory:cleanAllHttpDatas() to listOf(HttpData:delete()),
		DiskAttribute:<init>(String) to listOf(AbstractDiskHttpData:<init>(String-Charset-long)),
		DiskAttribute:<init>(String-String) to listOf(AbstractDiskHttpData:<init>(String-Charset-long), DiskAttribute:setValue(String)),
		DiskAttribute:getValue() to listOf(DiskAttribute:get()),
		DiskAttribute:setValue(String) to listOf(Unpooled:wrappedBuffer(byte[]), ByteBuf:readableBytes(), DiskAttribute:setContent(ByteBuf)),
		DiskAttribute:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), AbstractDiskHttpData:addContent(ByteBuf-boolean)),
		DiskAttribute:hashCode() to listOf(DiskAttribute:getName()),
		DiskAttribute:equals(Object) to listOf(DiskAttribute:getName(), Attribute:getName()),
		DiskAttribute:compareTo(InterfaceHttpData) to listOf(DiskAttribute:getHttpDataType(), InterfaceHttpData:getHttpDataType(), DiskAttribute:compareTo(Attribute)),
		DiskAttribute:compareTo(Attribute) to listOf(DiskAttribute:getName(), Attribute:getName()),
		DiskAttribute:toString() to listOf(DiskAttribute:getName(), DiskAttribute:getValue(), DiskAttribute:getName()),
		DiskAttribute:getDiskFilename() to listOf(DiskAttribute:getName()),
		DiskAttribute:copy() to listOf(DiskAttribute:getName(), DiskAttribute:<init>(String), DiskAttribute:getCharset(), DiskAttribute:setCharset(Charset), DiskAttribute:content(), ByteBuf:copy(), DiskAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskAttribute:copy(), DiskAttribute:copy()),
		DiskAttribute:duplicate() to listOf(DiskAttribute:getName(), DiskAttribute:<init>(String), DiskAttribute:getCharset(), DiskAttribute:setCharset(Charset), DiskAttribute:content(), ByteBuf:duplicate(), DiskAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskAttribute:duplicate(), DiskAttribute:duplicate()),
		DiskAttribute:retain(int) to listOf(AbstractDiskHttpData:retain(int), DiskAttribute:retain(int), DiskAttribute:retain(int), DiskAttribute:retain(int)),
		DiskAttribute:retain() to listOf(AbstractDiskHttpData:retain(), DiskAttribute:retain(), DiskAttribute:retain(), DiskAttribute:retain()),
		DiskAttribute:compareTo(Object) to listOf(DiskAttribute:compareTo(InterfaceHttpData)),
		DiskFileUpload:<init>(String-String-String-String-Charset-long) to listOf(AbstractDiskHttpData:<init>(String-Charset-long), DiskFileUpload:setFilename(String), DiskFileUpload:setContentType(String), DiskFileUpload:setContentTransferEncoding(String)),
		DiskFileUpload:hashCode() to listOf(DiskFileUpload:getName()),
		DiskFileUpload:equals(Object) to listOf(DiskFileUpload:getName(), Attribute:getName()),
		DiskFileUpload:compareTo(InterfaceHttpData) to listOf(DiskFileUpload:getHttpDataType(), InterfaceHttpData:getHttpDataType(), DiskFileUpload:compareTo(FileUpload)),
		DiskFileUpload:compareTo(FileUpload) to listOf(DiskFileUpload:getName(), FileUpload:getName()),
		DiskFileUpload:toString() to listOf(DiskFileUpload:getName(), DiskFileUpload:length(), DiskFileUpload:isCompleted(), DiskFileUpload:isInMemory()),
		DiskFileUpload:copy() to listOf(DiskFileUpload:getName(), DiskFileUpload:getFilename(), DiskFileUpload:getContentType(), DiskFileUpload:getContentTransferEncoding(), DiskFileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), DiskFileUpload:content(), ByteBuf:copy(), DiskFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskFileUpload:copy(), DiskFileUpload:copy()),
		DiskFileUpload:duplicate() to listOf(DiskFileUpload:getName(), DiskFileUpload:getFilename(), DiskFileUpload:getContentType(), DiskFileUpload:getContentTransferEncoding(), DiskFileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), DiskFileUpload:content(), ByteBuf:duplicate(), DiskFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), DiskFileUpload:duplicate(), DiskFileUpload:duplicate()),
		DiskFileUpload:retain(int) to listOf(AbstractDiskHttpData:retain(int), DiskFileUpload:retain(int), DiskFileUpload:retain(int), DiskFileUpload:retain(int)),
		DiskFileUpload:retain() to listOf(AbstractDiskHttpData:retain(), DiskFileUpload:retain(), DiskFileUpload:retain(), DiskFileUpload:retain()),
		DiskFileUpload:compareTo(Object) to listOf(DiskFileUpload:compareTo(InterfaceHttpData)),
		HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf) to listOf(ByteBuf:hasArray(), HttpPostBodyUtil$SeekAheadNoBackArrayException:<init>(), ByteBuf:array(), ByteBuf:readerIndex(), ByteBuf:arrayOffset(), ByteBuf:arrayOffset(), ByteBuf:writerIndex()),
		HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int) to listOf(HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), ByteBuf:readerIndex(int)),
		HttpPostBodyUtil$TransferEncodingMechanism:values() to listOf(HttpPostBodyUtil$TransferEncodingMechanism[]:clone()),
		HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int) to listOf(HttpPostBodyUtil$TransferEncodingMechanism:name()),
		HttpPostBodyUtil$TransferEncodingMechanism:<clinit>() to listOf(HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String), HttpPostBodyUtil$TransferEncodingMechanism:<init>(String-int-String)),
		HttpPostRequestDecoder$1:<clinit>() to listOf(HttpPostRequestDecoder$MultiPartStatus:values(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$MultiPartStatus:ordinal()),
		HttpPostRequestDecoder$EndOfDataDecoderException:<init>() to listOf(DecoderException:<init>()),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>() to listOf(DecoderException:<init>()),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String) to listOf(DecoderException:<init>(String)),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>() to listOf(DecoderException:<init>()),
		HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(String) to listOf(DecoderException:<init>(String)),
		HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		HttpPostRequestDecoder$MultiPartStatus:values() to listOf(HttpPostRequestDecoder$MultiPartStatus[]:clone()),
		HttpPostRequestDecoder$MultiPartStatus:<clinit>() to listOf(HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int), HttpPostRequestDecoder$MultiPartStatus:<init>(String-int)),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>() to listOf(DecoderException:<init>()),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String) to listOf(DecoderException:<init>(String)),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		HttpPostRequestDecoder:<init>(HttpRequest) to listOf(DefaultHttpDataFactory:<init>(long), HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest) to listOf(HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset)),
		HttpPostRequestDecoder:<init>(HttpDataFactory-HttpRequest-Charset) to listOf(HttpRequest:getMethod(), HttpMethod:equals(Object), HttpMethod:equals(Object), HttpMethod:equals(Object), HttpRequest:headers(), HttpHeaders:get(String), HttpPostRequestDecoder:checkMultipart(String), HttpPostRequestDecoder$IncompatibleDataDecoderException:<init>(String), HttpPostRequestDecoder:offer(HttpContent), Unpooled:buffer(), HttpPostRequestDecoder:parseBody()),
		HttpPostRequestDecoder:checkMultipart(String) to listOf(HttpPostRequestDecoder:splitHeaderContentType(String), StringUtil:split(String-char), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String)),
		HttpPostRequestDecoder:isMultipart() to listOf(HttpPostRequestDecoder:checkDestroyed()),
		HttpPostRequestDecoder:getBodyHttpDatas() to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostRequestDecoder:getBodyHttpDatas(String) to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostRequestDecoder:getBodyHttpData(String) to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostRequestDecoder:offer(HttpContent) to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpContent:content(), ByteBuf:copy(), Unpooled:wrappedBuffer(ByteBuf[]), HttpPostRequestDecoder:parseBody()),
		HttpPostRequestDecoder:hasNext() to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpPostRequestDecoder$EndOfDataDecoderException:<init>()),
		HttpPostRequestDecoder:next() to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpPostRequestDecoder:hasNext()),
		HttpPostRequestDecoder:parseBody() to listOf(HttpPostRequestDecoder:parseBodyMultipart(), HttpPostRequestDecoder:parseBodyAttributes()),
		HttpPostRequestDecoder:addHttpData(InterfaceHttpData) to listOf(InterfaceHttpData:getName(), InterfaceHttpData:getName()),
		HttpPostRequestDecoder:parseBodyAttributesStandard() to listOf(ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), ByteBuf:toString(int-int-Charset), HttpPostRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), ByteBuf:toString(int-int-Charset), HttpPostRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), Attribute:setValue(String), HttpPostRequestDecoder:addHttpData(InterfaceHttpData), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:isReadable(), ByteBuf:readUnsignedByte(), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), Attribute:isCompleted(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:slice(int-int), ByteBuf:retain(), Attribute:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostRequestDecoder:parseBodyAttributes() to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostRequestDecoder:parseBodyAttributesStandard(), ByteBuf:readerIndex(), HttpPostRequestDecoder$MultiPartStatus:ordinal(), ByteBuf:toString(int-int-Charset), HttpPostRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), ByteBuf:toString(int-int-Charset), HttpPostRequestDecoder:decodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String), Attribute:setValue(String), HttpPostRequestDecoder:addHttpData(InterfaceHttpData), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:slice(int-int), ByteBuf:retain(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), Attribute:isCompleted(), HttpPostRequestDecoder:setFinalBuffer(ByteBuf), ByteBuf:slice(int-int), ByteBuf:retain(), Attribute:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostRequestDecoder:setFinalBuffer(ByteBuf) to listOf(Attribute:addContent(ByteBuf-boolean), Attribute:getByteBuf(), ByteBuf:toString(Charset), HttpPostRequestDecoder:decodeAttribute(String-Charset), Attribute:setValue(String), HttpPostRequestDecoder:addHttpData(InterfaceHttpData)),
		HttpPostRequestDecoder:decodeAttribute(String-Charset) to listOf(HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String-Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String-Throwable)),
		HttpPostRequestDecoder:parseBodyMultipart() to listOf(ByteBuf:readableBytes(), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder:addHttpData(InterfaceHttpData), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus)),
		HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus) to listOf(HttpPostRequestDecoder$MultiPartStatus:ordinal(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder:findMultipartDisposition(), Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getValue(), HttpPostRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:setCharset(Charset), HttpPostRequestDecoder:loadFieldMultipart(String), HttpPostRequestDecoder:getFileUpload(String), HttpPostRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder:findMultipartDisposition(), HttpPostRequestDecoder:getFileUpload(String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String)),
		HttpPostRequestDecoder:skipControlCharacters() to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostRequestDecoder:skipControlCharactersStandard(), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(String)),
		HttpPostRequestDecoder:skipControlCharactersStandard() to listOf(ByteBuf:readUnsignedByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		HttpPostRequestDecoder:findMultipartDelimiter(String-HttpPostRequestDecoder$MultiPartStatus-HttpPostRequestDecoder$MultiPartStatus) to listOf(ByteBuf:readerIndex(), HttpPostRequestDecoder:skipControlCharacters(), ByteBuf:readerIndex(int), HttpPostRequestDecoder:skipOneLine(), HttpPostRequestDecoder:readDelimiter(String), ByteBuf:readerIndex(int), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String)),
		HttpPostRequestDecoder:findMultipartDisposition() to listOf(ByteBuf:readerIndex(), HttpPostRequestDecoder:skipOneLine(), HttpPostRequestDecoder:skipControlCharacters(), HttpPostRequestDecoder:readLine(), ByteBuf:readerIndex(int), HttpPostRequestDecoder:splitMultipartHeader(String), StringUtil:split(String-char), HttpPostRequestDecoder:cleanString(String), HttpPostRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getName(), HttpPostRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), StringUtil:split(String-char), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), StringUtil:split(String-char), HttpPostRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder:cleanString(String), HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getName(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder:decodeMultipart(HttpPostRequestDecoder$MultiPartStatus), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String)),
		HttpPostRequestDecoder:getFileUpload(String) to listOf(Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(String), Attribute:getValue(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), Attribute:getValue(), HttpPostRequestDecoder:cleanString(String), Attribute:getValue(), HttpPostRequestDecoder:cleanString(String), Attribute:getValue(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), HttpPostRequestDecoder:readFileUploadByteMultipart(String), FileUpload:isCompleted(), HttpPostRequestDecoder:cleanMixedAttributes()),
		HttpPostRequestDecoder:destroy() to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpPostRequestDecoder:cleanFiles(), ByteBuf:refCnt(), ByteBuf:release(), InterfaceHttpData:release()),
		HttpPostRequestDecoder:cleanFiles() to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpDataFactory:cleanRequestHttpDatas(HttpRequest)),
		HttpPostRequestDecoder:removeHttpDataFromClean(InterfaceHttpData) to listOf(HttpPostRequestDecoder:checkDestroyed(), HttpDataFactory:removeHttpDataFromClean(HttpRequest-InterfaceHttpData)),
		HttpPostRequestDecoder:readLineStandard() to listOf(ByteBuf:readerIndex(), Unpooled:buffer(int), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:toString(Charset), ByteBuf:toString(Charset), ByteBuf:writeByte(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostRequestDecoder:readLine() to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostRequestDecoder:readLineStandard(), ByteBuf:readerIndex(), Unpooled:buffer(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:toString(Charset), ByteBuf:writeByte(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:toString(Charset), ByteBuf:writeByte(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostRequestDecoder:readDelimiterStandard(String) to listOf(ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostRequestDecoder:readDelimiter(String) to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostRequestDecoder:readDelimiterStandard(String), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), HttpPostBodyUtil$SeekAheadOptimize:setReadPosition(int), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>()),
		HttpPostRequestDecoder:readFileUploadByteMultipartStandard(String) to listOf(ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:slice(int-int), ByteBuf:retain(), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostRequestDecoder:readFileUploadByteMultipart(String) to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostRequestDecoder:readFileUploadByteMultipartStandard(String), ByteBuf:readerIndex(), HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), ByteBuf:slice(int-int), ByteBuf:retain(), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), FileUpload:addContent(ByteBuf-boolean), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable)),
		HttpPostRequestDecoder:loadFieldMultipartStandard(String) to listOf(ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:slice(int-int), ByteBuf:retain(), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), ByteBuf:slice(int-int), ByteBuf:retain(), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable)),
		HttpPostRequestDecoder:loadFieldMultipart(String) to listOf(HttpPostBodyUtil$SeekAheadOptimize:<init>(ByteBuf), HttpPostRequestDecoder:loadFieldMultipartStandard(String), ByteBuf:readerIndex(), HttpPostBodyUtil$SeekAheadOptimize:getReadPosition(int), ByteBuf:slice(int-int), ByteBuf:retain(), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), ByteBuf:slice(int-int), ByteBuf:retain(), Attribute:addContent(ByteBuf-boolean), HttpPostRequestDecoder$ErrorDataDecoderException:<init>(Throwable), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(), ByteBuf:readerIndex(int), HttpPostRequestDecoder$NotEnoughDataDecoderException:<init>(Throwable)),
		HttpPostRequestDecoder:skipOneLine() to listOf(ByteBuf:isReadable(), ByteBuf:readByte(), ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readByte(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		HttpPostRequestDecoder:splitHeaderContentType(String) to listOf(HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findEndOfString(String)),
		HttpPostRequestDecoder:splitMultipartHeader(String) to listOf(HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findNonWhitespace(String-int), HttpPostBodyUtil:findEndOfString(String), StringUtil:split(String-char), StringUtil:split(String-char)),
		HttpPostRequestEncoder$EncoderMode:values() to listOf(HttpPostRequestEncoder$EncoderMode[]:clone()),
		HttpPostRequestEncoder$EncoderMode:<clinit>() to listOf(HttpPostRequestEncoder$EncoderMode:<init>(String-int), HttpPostRequestEncoder$EncoderMode:<init>(String-int)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:<init>(HttpRequest)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion), HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion), HttpPostRequestEncoder$WrappedFullHttpRequest:setProtocolVersion(HttpVersion)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:setMethod(HttpMethod) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:setMethod(HttpMethod), HttpPostRequestEncoder$WrappedFullHttpRequest:setMethod(HttpMethod)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:setUri(String) to listOf(HttpPostRequestEncoder$WrappedHttpRequest:setUri(String), HttpPostRequestEncoder$WrappedFullHttpRequest:setUri(String)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:copy() to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:getProtocolVersion(), HttpPostRequestEncoder$WrappedFullHttpRequest:getMethod(), HttpPostRequestEncoder$WrappedFullHttpRequest:getUri(), HttpPostRequestEncoder$WrappedFullHttpRequest:content(), ByteBuf:copy(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), HttpPostRequestEncoder$WrappedFullHttpRequest:headers(), HttpHeaders:set(HttpHeaders), DefaultFullHttpRequest:trailingHeaders(), HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders(), HttpHeaders:set(HttpHeaders), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), HttpPostRequestEncoder$WrappedFullHttpRequest:copy(), HttpPostRequestEncoder$WrappedFullHttpRequest:copy()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate() to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:getProtocolVersion(), HttpPostRequestEncoder$WrappedFullHttpRequest:getMethod(), HttpPostRequestEncoder$WrappedFullHttpRequest:getUri(), HttpPostRequestEncoder$WrappedFullHttpRequest:content(), ByteBuf:duplicate(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String-ByteBuf), DefaultFullHttpRequest:headers(), HttpPostRequestEncoder$WrappedFullHttpRequest:headers(), HttpHeaders:set(HttpHeaders), DefaultFullHttpRequest:trailingHeaders(), HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders(), HttpHeaders:set(HttpHeaders), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate(), HttpPostRequestEncoder$WrappedFullHttpRequest:duplicate()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int) to listOf(HttpContent:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(int)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:retain() to listOf(HttpContent:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain(), HttpPostRequestEncoder$WrappedFullHttpRequest:retain()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:content() to listOf(HttpContent:content()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:trailingHeaders() to listOf(LastHttpContent:trailingHeaders()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:refCnt() to listOf(HttpContent:refCnt()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:release() to listOf(HttpContent:release()),
		HttpPostRequestEncoder$WrappedFullHttpRequest:release(int) to listOf(HttpContent:release(int)),
		HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent-HttpPostRequestEncoder$1) to listOf(HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent)),
		HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion) to listOf(HttpRequest:setProtocolVersion(HttpVersion), HttpPostRequestEncoder$WrappedHttpRequest:setProtocolVersion(HttpVersion)),
		HttpPostRequestEncoder$WrappedHttpRequest:setMethod(HttpMethod) to listOf(HttpRequest:setMethod(HttpMethod)),
		HttpPostRequestEncoder$WrappedHttpRequest:setUri(String) to listOf(HttpRequest:setUri(String)),
		HttpPostRequestEncoder$WrappedHttpRequest:getMethod() to listOf(HttpRequest:getMethod()),
		HttpPostRequestEncoder$WrappedHttpRequest:getUri() to listOf(HttpRequest:getUri()),
		HttpPostRequestEncoder$WrappedHttpRequest:getProtocolVersion() to listOf(HttpRequest:getProtocolVersion()),
		HttpPostRequestEncoder$WrappedHttpRequest:headers() to listOf(HttpRequest:headers()),
		HttpPostRequestEncoder$WrappedHttpRequest:getDecoderResult() to listOf(HttpRequest:getDecoderResult()),
		HttpPostRequestEncoder$WrappedHttpRequest:setDecoderResult(DecoderResult) to listOf(HttpRequest:setDecoderResult(DecoderResult)),
		HttpPostRequestEncoder:<init>(HttpRequest-boolean) to listOf(DefaultHttpDataFactory:<init>(long), HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode)),
		HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean) to listOf(HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode)),
		HttpPostRequestEncoder:<init>(HttpDataFactory-HttpRequest-boolean-Charset-HttpPostRequestEncoder$EncoderMode) to listOf(HttpRequest:getMethod(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), HttpPostRequestEncoder:initDataMultipart()),
		HttpPostRequestEncoder:cleanFiles() to listOf(HttpDataFactory:cleanRequestHttpDatas(HttpRequest)),
		HttpPostRequestEncoder:initDataMultipart() to listOf(HttpPostRequestEncoder:getNewMultipartDelimiter()),
		HttpPostRequestEncoder:initMixedMultipart() to listOf(HttpPostRequestEncoder:getNewMultipartDelimiter()),
		HttpPostRequestEncoder:getNewMultipartDelimiter() to listOf(ThreadLocalRandom:current(), ThreadLocalRandom:nextLong()),
		HttpPostRequestEncoder:setBodyHttpDatas(List) to listOf(HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData)),
		HttpPostRequestEncoder:addBodyAttribute(String-String) to listOf(HttpDataFactory:createAttribute(HttpRequest-String-String), HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData)),
		HttpPostRequestEncoder:addBodyFileUpload(String-File-String-boolean) to listOf(HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpDataFactory:createFileUpload(HttpRequest-String-String-String-String-Charset-long), FileUpload:setContent(File), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData)),
		HttpPostRequestEncoder:addBodyFileUploads(String-File[]-String[]-boolean[]) to listOf(HttpPostRequestEncoder:addBodyFileUpload(String-File-String-boolean)),
		HttpPostRequestEncoder:addBodyHttpData(InterfaceHttpData) to listOf(HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), Attribute:getName(), HttpPostRequestEncoder:encodeAttribute(String-Charset), Attribute:getValue(), HttpPostRequestEncoder:encodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String-String), Attribute:getName(), Attribute:length(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), FileUpload:getName(), HttpPostRequestEncoder:encodeAttribute(String-Charset), FileUpload:getFilename(), HttpPostRequestEncoder:encodeAttribute(String-Charset), HttpDataFactory:createAttribute(HttpRequest-String-String), Attribute:getName(), Attribute:length(), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), InternalAttribute:addValue(String), Attribute:getName(), InternalAttribute:addValue(String), Attribute:getCharset(), InternalAttribute:addValue(String), InternalAttribute:addValue(String), Attribute:length(), InternalAttribute:size(), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), FileUpload:getName(), FileUpload:getName(), InternalAttribute:addValue(String), InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), FileUpload:getName(), FileUpload:getName(), HttpPostRequestEncoder:initMixedMultipart(), InternalAttribute:size(), FileUpload:getName(), FileUpload:getFilename(), InternalAttribute:setValue(String-int), InternalAttribute:size(), InternalAttribute:addValue(String), FileUpload:getFilename(), InternalAttribute:addValue(String), InternalAttribute:addValue(String), FileUpload:getName(), FileUpload:getFilename(), InternalAttribute:addValue(String), FileUpload:getContentType(), InternalAttribute:addValue(String), FileUpload:getContentTransferEncoding(), HttpPostBodyUtil$TransferEncodingMechanism:value(), HttpPostBodyUtil$TransferEncodingMechanism:value(), InternalAttribute:addValue(String), FileUpload:getCharset(), FileUpload:getCharset(), InternalAttribute:addValue(String), InternalAttribute:addValue(String), FileUpload:length(), InternalAttribute:size()),
		HttpPostRequestEncoder:finalizeRequest() to listOf(InternalAttribute:<init>(Charset), InternalAttribute:addValue(String), InternalAttribute:addValue(String), InternalAttribute:size(), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String), HttpRequest:headers(), HttpHeaders:getAll(String), HttpHeaders:getAll(String), HttpHeaders:remove(String), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:set(String-Object), HttpHeaders:remove(String), HttpHeaders:add(String-Object), HttpHeaders:setTransferEncodingChunked(HttpMessage), HttpPostRequestEncoder$WrappedHttpRequest:<init>(HttpRequest), HttpPostRequestEncoder:nextChunk(), HttpContent:content(), FullHttpRequest:content(), FullHttpRequest:content(), ByteBuf:clear(), ByteBuf:writeBytes(ByteBuf), ByteBuf:release(), HttpPostRequestEncoder$WrappedFullHttpRequest:<init>(HttpRequest-HttpContent-HttpPostRequestEncoder$1)),
		HttpPostRequestEncoder:encodeAttribute(String-Charset) to listOf(HttpPostRequestEncoder$ErrorDataEncoderException:<init>(String-Throwable)),
		HttpPostRequestEncoder:fillByteBuf() to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:slice(int-int), ByteBuf:skipBytes(int)),
		HttpPostRequestEncoder:encodeNextChunkMultipart(int) to listOf(InternalAttribute:toByteBuf(), Attribute:getChunk(int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), HttpData:getChunk(int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), ByteBuf:capacity(), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf)),
		HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int) to listOf(InterfaceHttpData:getName(), Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), Unpooled:wrappedBuffer(byte[]), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf), HttpData:getChunk(int), HttpPostRequestEncoder$ErrorDataEncoderException:<init>(Throwable), ByteBuf:readableBytes(), Unpooled:wrappedBuffer(byte[]), ByteBuf:capacity(), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf), Unpooled:wrappedBuffer(ByteBuf[]), Unpooled:wrappedBuffer(ByteBuf[]), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf)),
		HttpPostRequestEncoder:readChunk(ChannelHandlerContext) to listOf(HttpPostRequestEncoder:nextChunk(), HttpPostRequestEncoder:readChunk(ChannelHandlerContext)),
		HttpPostRequestEncoder:nextChunk() to listOf(ByteBuf:readableBytes(), HttpPostRequestEncoder:fillByteBuf(), DefaultHttpContent:<init>(ByteBuf), HttpPostRequestEncoder:encodeNextChunkMultipart(int), HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int), ByteBuf:readableBytes(), DefaultHttpContent:<init>(ByteBuf), HttpPostRequestEncoder:encodeNextChunkMultipart(int), HttpPostRequestEncoder:encodeNextChunkUrlEncoded(int), ByteBuf:readableBytes(), DefaultHttpContent:<init>(ByteBuf)),
		InterfaceHttpData$HttpDataType:values() to listOf(InterfaceHttpData$HttpDataType[]:clone()),
		InterfaceHttpData$HttpDataType:<clinit>() to listOf(InterfaceHttpData$HttpDataType:<init>(String-int), InterfaceHttpData$HttpDataType:<init>(String-int), InterfaceHttpData$HttpDataType:<init>(String-int)),
		InternalAttribute:<init>(Charset) to listOf(AbstractReferenceCounted:<init>()),
		InternalAttribute:addValue(String) to listOf(Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:readableBytes()),
		InternalAttribute:addValue(String-int) to listOf(Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:readableBytes()),
		InternalAttribute:setValue(String-int) to listOf(Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:readableBytes(), ByteBuf:readableBytes()),
		InternalAttribute:hashCode() to listOf(InternalAttribute:getName()),
		InternalAttribute:equals(Object) to listOf(InternalAttribute:getName(), Attribute:getName()),
		InternalAttribute:compareTo(InterfaceHttpData) to listOf(InternalAttribute:getHttpDataType(), InterfaceHttpData:getHttpDataType(), InternalAttribute:compareTo(InternalAttribute)),
		InternalAttribute:compareTo(InternalAttribute) to listOf(InternalAttribute:getName(), InternalAttribute:getName()),
		InternalAttribute:toString() to listOf(ByteBuf:toString(Charset)),
		InternalAttribute:toByteBuf() to listOf(Unpooled:compositeBuffer(), CompositeByteBuf:addComponents(Iterable), InternalAttribute:size(), CompositeByteBuf:writerIndex(int), CompositeByteBuf:readerIndex(int)),
		InternalAttribute:compareTo(Object) to listOf(InternalAttribute:compareTo(InterfaceHttpData)),
		MemoryAttribute:<init>(String) to listOf(AbstractMemoryHttpData:<init>(String-Charset-long)),
		MemoryAttribute:<init>(String-String) to listOf(AbstractMemoryHttpData:<init>(String-Charset-long), MemoryAttribute:setValue(String)),
		MemoryAttribute:getValue() to listOf(MemoryAttribute:getByteBuf(), ByteBuf:toString(Charset)),
		MemoryAttribute:setValue(String) to listOf(Unpooled:wrappedBuffer(byte[]), ByteBuf:readableBytes(), MemoryAttribute:setContent(ByteBuf)),
		MemoryAttribute:addContent(ByteBuf-boolean) to listOf(ByteBuf:readableBytes(), AbstractMemoryHttpData:addContent(ByteBuf-boolean)),
		MemoryAttribute:hashCode() to listOf(MemoryAttribute:getName()),
		MemoryAttribute:equals(Object) to listOf(MemoryAttribute:getName(), Attribute:getName()),
		MemoryAttribute:compareTo(InterfaceHttpData) to listOf(MemoryAttribute:getHttpDataType(), InterfaceHttpData:getHttpDataType(), MemoryAttribute:compareTo(Attribute)),
		MemoryAttribute:compareTo(Attribute) to listOf(MemoryAttribute:getName(), Attribute:getName()),
		MemoryAttribute:toString() to listOf(MemoryAttribute:getName(), MemoryAttribute:getValue()),
		MemoryAttribute:copy() to listOf(MemoryAttribute:getName(), MemoryAttribute:<init>(String), MemoryAttribute:getCharset(), MemoryAttribute:setCharset(Charset), MemoryAttribute:content(), ByteBuf:copy(), MemoryAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryAttribute:copy(), MemoryAttribute:copy()),
		MemoryAttribute:duplicate() to listOf(MemoryAttribute:getName(), MemoryAttribute:<init>(String), MemoryAttribute:getCharset(), MemoryAttribute:setCharset(Charset), MemoryAttribute:content(), ByteBuf:duplicate(), MemoryAttribute:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryAttribute:duplicate(), MemoryAttribute:duplicate()),
		MemoryAttribute:retain() to listOf(AbstractMemoryHttpData:retain(), MemoryAttribute:retain(), MemoryAttribute:retain(), MemoryAttribute:retain()),
		MemoryAttribute:retain(int) to listOf(AbstractMemoryHttpData:retain(int), MemoryAttribute:retain(int), MemoryAttribute:retain(int), MemoryAttribute:retain(int)),
		MemoryAttribute:compareTo(Object) to listOf(MemoryAttribute:compareTo(InterfaceHttpData)),
		MemoryFileUpload:<init>(String-String-String-String-Charset-long) to listOf(AbstractMemoryHttpData:<init>(String-Charset-long), MemoryFileUpload:setFilename(String), MemoryFileUpload:setContentType(String), MemoryFileUpload:setContentTransferEncoding(String)),
		MemoryFileUpload:hashCode() to listOf(MemoryFileUpload:getName()),
		MemoryFileUpload:equals(Object) to listOf(MemoryFileUpload:getName(), Attribute:getName()),
		MemoryFileUpload:compareTo(InterfaceHttpData) to listOf(MemoryFileUpload:getHttpDataType(), InterfaceHttpData:getHttpDataType(), MemoryFileUpload:compareTo(FileUpload)),
		MemoryFileUpload:compareTo(FileUpload) to listOf(MemoryFileUpload:getName(), FileUpload:getName()),
		MemoryFileUpload:toString() to listOf(MemoryFileUpload:getName(), MemoryFileUpload:length(), MemoryFileUpload:isCompleted(), MemoryFileUpload:isInMemory()),
		MemoryFileUpload:copy() to listOf(MemoryFileUpload:getName(), MemoryFileUpload:getFilename(), MemoryFileUpload:getContentType(), MemoryFileUpload:getContentTransferEncoding(), MemoryFileUpload:getCharset(), MemoryFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:content(), ByteBuf:copy(), MemoryFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryFileUpload:copy(), MemoryFileUpload:copy()),
		MemoryFileUpload:duplicate() to listOf(MemoryFileUpload:getName(), MemoryFileUpload:getFilename(), MemoryFileUpload:getContentType(), MemoryFileUpload:getContentTransferEncoding(), MemoryFileUpload:getCharset(), MemoryFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:content(), ByteBuf:duplicate(), MemoryFileUpload:setContent(ByteBuf), ChannelException:<init>(Throwable), MemoryFileUpload:duplicate(), MemoryFileUpload:duplicate()),
		MemoryFileUpload:retain() to listOf(AbstractMemoryHttpData:retain(), MemoryFileUpload:retain(), MemoryFileUpload:retain(), MemoryFileUpload:retain()),
		MemoryFileUpload:retain(int) to listOf(AbstractMemoryHttpData:retain(int), MemoryFileUpload:retain(int), MemoryFileUpload:retain(int), MemoryFileUpload:retain(int)),
		MemoryFileUpload:compareTo(Object) to listOf(MemoryFileUpload:compareTo(InterfaceHttpData)),
		MixedAttribute:<init>(String-long) to listOf(MemoryAttribute:<init>(String)),
		MixedAttribute:<init>(String-String-long) to listOf(DiskAttribute:<init>(String-String), MemoryAttribute:<init>(String-String), MemoryAttribute:<init>(String-String)),
		MixedAttribute:addContent(ByteBuf-boolean) to listOf(Attribute:length(), ByteBuf:readableBytes(), Attribute:getName(), DiskAttribute:<init>(String), MemoryAttribute:getByteBuf(), MemoryAttribute:getByteBuf(), DiskAttribute:addContent(ByteBuf-boolean), Attribute:addContent(ByteBuf-boolean)),
		MixedAttribute:delete() to listOf(Attribute:delete()),
		MixedAttribute:get() to listOf(Attribute:get()),
		MixedAttribute:getByteBuf() to listOf(Attribute:getByteBuf()),
		MixedAttribute:getCharset() to listOf(Attribute:getCharset()),
		MixedAttribute:getString() to listOf(Attribute:getString()),
		MixedAttribute:getString(Charset) to listOf(Attribute:getString(Charset)),
		MixedAttribute:isCompleted() to listOf(Attribute:isCompleted()),
		MixedAttribute:isInMemory() to listOf(Attribute:isInMemory()),
		MixedAttribute:length() to listOf(Attribute:length()),
		MixedAttribute:renameTo(File) to listOf(Attribute:renameTo(File)),
		MixedAttribute:setCharset(Charset) to listOf(Attribute:setCharset(Charset)),
		MixedAttribute:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), Attribute:getName(), DiskAttribute:<init>(String), Attribute:setContent(ByteBuf)),
		MixedAttribute:setContent(File) to listOf(Attribute:getName(), DiskAttribute:<init>(String), Attribute:setContent(File)),
		MixedAttribute:setContent(InputStream) to listOf(Attribute:getName(), DiskAttribute:<init>(String), Attribute:setContent(InputStream)),
		MixedAttribute:getHttpDataType() to listOf(Attribute:getHttpDataType()),
		MixedAttribute:getName() to listOf(Attribute:getName()),
		MixedAttribute:compareTo(InterfaceHttpData) to listOf(Attribute:compareTo(Object)),
		MixedAttribute:getValue() to listOf(Attribute:getValue()),
		MixedAttribute:setValue(String) to listOf(Attribute:setValue(String)),
		MixedAttribute:getChunk(int) to listOf(Attribute:getChunk(int)),
		MixedAttribute:getFile() to listOf(Attribute:getFile()),
		MixedAttribute:copy() to listOf(Attribute:copy(), MixedAttribute:copy(), MixedAttribute:copy()),
		MixedAttribute:duplicate() to listOf(Attribute:duplicate(), MixedAttribute:duplicate(), MixedAttribute:duplicate()),
		MixedAttribute:content() to listOf(Attribute:content()),
		MixedAttribute:refCnt() to listOf(Attribute:refCnt()),
		MixedAttribute:retain() to listOf(Attribute:retain(), MixedAttribute:retain(), MixedAttribute:retain(), MixedAttribute:retain()),
		MixedAttribute:retain(int) to listOf(Attribute:retain(int), MixedAttribute:retain(int), MixedAttribute:retain(int), MixedAttribute:retain(int)),
		MixedAttribute:release() to listOf(Attribute:release()),
		MixedAttribute:release(int) to listOf(Attribute:release(int)),
		MixedAttribute:compareTo(Object) to listOf(MixedAttribute:compareTo(InterfaceHttpData)),
		MixedFileUpload:<init>(String-String-String-String-Charset-long-long) to listOf(DiskFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:<init>(String-String-String-String-Charset-long)),
		MixedFileUpload:addContent(ByteBuf-boolean) to listOf(FileUpload:length(), ByteBuf:readableBytes(), FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), MemoryFileUpload:getByteBuf(), MemoryFileUpload:getByteBuf(), DiskFileUpload:addContent(ByteBuf-boolean), FileUpload:addContent(ByteBuf-boolean)),
		MixedFileUpload:delete() to listOf(FileUpload:delete()),
		MixedFileUpload:get() to listOf(FileUpload:get()),
		MixedFileUpload:getByteBuf() to listOf(FileUpload:getByteBuf()),
		MixedFileUpload:getCharset() to listOf(FileUpload:getCharset()),
		MixedFileUpload:getContentType() to listOf(FileUpload:getContentType()),
		MixedFileUpload:getContentTransferEncoding() to listOf(FileUpload:getContentTransferEncoding()),
		MixedFileUpload:getFilename() to listOf(FileUpload:getFilename()),
		MixedFileUpload:getString() to listOf(FileUpload:getString()),
		MixedFileUpload:getString(Charset) to listOf(FileUpload:getString(Charset)),
		MixedFileUpload:isCompleted() to listOf(FileUpload:isCompleted()),
		MixedFileUpload:isInMemory() to listOf(FileUpload:isInMemory()),
		MixedFileUpload:length() to listOf(FileUpload:length()),
		MixedFileUpload:renameTo(File) to listOf(FileUpload:renameTo(File)),
		MixedFileUpload:setCharset(Charset) to listOf(FileUpload:setCharset(Charset)),
		MixedFileUpload:setContent(ByteBuf) to listOf(ByteBuf:readableBytes(), FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), FileUpload:setContent(ByteBuf)),
		MixedFileUpload:setContent(File) to listOf(FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), FileUpload:setContent(File)),
		MixedFileUpload:setContent(InputStream) to listOf(FileUpload:getName(), FileUpload:getFilename(), FileUpload:getContentType(), FileUpload:getContentTransferEncoding(), FileUpload:getCharset(), DiskFileUpload:<init>(String-String-String-String-Charset-long), FileUpload:setContent(InputStream)),
		MixedFileUpload:setContentType(String) to listOf(FileUpload:setContentType(String)),
		MixedFileUpload:setContentTransferEncoding(String) to listOf(FileUpload:setContentTransferEncoding(String)),
		MixedFileUpload:setFilename(String) to listOf(FileUpload:setFilename(String)),
		MixedFileUpload:getHttpDataType() to listOf(FileUpload:getHttpDataType()),
		MixedFileUpload:getName() to listOf(FileUpload:getName()),
		MixedFileUpload:compareTo(InterfaceHttpData) to listOf(FileUpload:compareTo(Object)),
		MixedFileUpload:getChunk(int) to listOf(FileUpload:getChunk(int)),
		MixedFileUpload:getFile() to listOf(FileUpload:getFile()),
		MixedFileUpload:copy() to listOf(FileUpload:copy(), MixedFileUpload:copy(), MixedFileUpload:copy()),
		MixedFileUpload:duplicate() to listOf(FileUpload:duplicate(), MixedFileUpload:duplicate(), MixedFileUpload:duplicate()),
		MixedFileUpload:content() to listOf(FileUpload:content()),
		MixedFileUpload:refCnt() to listOf(FileUpload:refCnt()),
		MixedFileUpload:retain() to listOf(FileUpload:retain(), MixedFileUpload:retain(), MixedFileUpload:retain(), MixedFileUpload:retain()),
		MixedFileUpload:retain(int) to listOf(FileUpload:retain(int), MixedFileUpload:retain(int), MixedFileUpload:retain(int), MixedFileUpload:retain(int)),
		MixedFileUpload:release() to listOf(FileUpload:release()),
		MixedFileUpload:release(int) to listOf(FileUpload:release(int)),
		MixedFileUpload:compareTo(Object) to listOf(MixedFileUpload:compareTo(InterfaceHttpData)),
		QueryStringDecoder:<init>(String) to listOf(QueryStringDecoder:<init>(String-Charset)),
		QueryStringDecoder:<init>(String-boolean) to listOf(QueryStringDecoder:<init>(String-Charset-boolean)),
		QueryStringDecoder:<init>(String-Charset) to listOf(QueryStringDecoder:<init>(String-Charset-boolean)),
		QueryStringDecoder:<init>(String-Charset-boolean) to listOf(QueryStringDecoder:<init>(String-Charset-boolean-int)),
		QueryStringDecoder:<init>(URI) to listOf(QueryStringDecoder:<init>(URI-Charset)),
		QueryStringDecoder:<init>(URI-Charset) to listOf(QueryStringDecoder:<init>(URI-Charset-int)),
		QueryStringDecoder:parameters() to listOf(QueryStringDecoder:path(), QueryStringDecoder:decodeParams(String), QueryStringDecoder:decodeParams(String)),
		QueryStringDecoder:decodeParams(String) to listOf(QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:decodeComponent(String-Charset), QueryStringDecoder:addParam(Map-String-String), QueryStringDecoder:addParam(Map-String-String)),
		QueryStringDecoder:decodeComponent(String) to listOf(QueryStringDecoder:decodeComponent(String-Charset)),
		QueryStringDecoder:decodeComponent(String-Charset) to listOf(QueryStringDecoder:decodeHexNibble(char), QueryStringDecoder:decodeHexNibble(char)),
		QueryStringEncoder:<init>(String) to listOf(QueryStringEncoder:<init>(String-Charset)),
		QueryStringEncoder:addParam(String-String) to listOf(QueryStringEncoder$Param:<init>(String-String)),
		QueryStringEncoder:toUri() to listOf(QueryStringEncoder:toString()),
		QueryStringEncoder:toString() to listOf(QueryStringEncoder:encodeComponent(String-Charset), QueryStringEncoder:encodeComponent(String-Charset)),
		ServerCookieEncoder:encode(String-String) to listOf(DefaultCookie:<init>(String-String), ServerCookieEncoder:encode(Cookie)),
		ServerCookieEncoder:encode(Cookie) to listOf(Cookie:getName(), Cookie:getValue(), CookieEncoderUtil:add(StringBuilder-String-String), Cookie:getMaxAge(), Cookie:getVersion(), HttpHeaderDateFormat:get(), Cookie:getMaxAge(), HttpHeaderDateFormat:format(Date), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Cookie:getMaxAge(), CookieEncoderUtil:add(StringBuilder-String-long), Cookie:getPath(), Cookie:getVersion(), Cookie:getPath(), CookieEncoderUtil:add(StringBuilder-String-String), Cookie:getPath(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Cookie:getDomain(), Cookie:getVersion(), Cookie:getDomain(), CookieEncoderUtil:add(StringBuilder-String-String), Cookie:getDomain(), CookieEncoderUtil:addUnquoted(StringBuilder-String-String), Cookie:isSecure(), Cookie:isHttpOnly(), Cookie:getVersion(), Cookie:getComment(), Cookie:getComment(), CookieEncoderUtil:add(StringBuilder-String-String), CookieEncoderUtil:add(StringBuilder-String-long), Cookie:getCommentUrl(), Cookie:getCommentUrl(), CookieEncoderUtil:addQuoted(StringBuilder-String-String), Cookie:getPorts(), Cookie:getPorts(), Cookie:isDiscard(), CookieEncoderUtil:stripTrailingSeparator(StringBuilder)),
		ServerCookieEncoder:encode(Cookie[]) to listOf(ServerCookieEncoder:encode(Cookie)),
		ServerCookieEncoder:encode(Collection) to listOf(ServerCookieEncoder:encode(Cookie)),
		ServerCookieEncoder:encode(Iterable) to listOf(ServerCookieEncoder:encode(Cookie)),
		BinaryWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		BinaryWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		BinaryWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		BinaryWebSocketFrame:copy() to listOf(BinaryWebSocketFrame:isFinalFragment(), BinaryWebSocketFrame:rsv(), BinaryWebSocketFrame:content(), ByteBuf:copy(), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), BinaryWebSocketFrame:copy(), BinaryWebSocketFrame:copy()),
		BinaryWebSocketFrame:duplicate() to listOf(BinaryWebSocketFrame:isFinalFragment(), BinaryWebSocketFrame:rsv(), BinaryWebSocketFrame:content(), ByteBuf:duplicate(), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), BinaryWebSocketFrame:duplicate(), BinaryWebSocketFrame:duplicate()),
		BinaryWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), BinaryWebSocketFrame:retain(), BinaryWebSocketFrame:retain(), BinaryWebSocketFrame:retain()),
		BinaryWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), BinaryWebSocketFrame:retain(int), BinaryWebSocketFrame:retain(int), BinaryWebSocketFrame:retain(int)),
		CloseWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		CloseWebSocketFrame:<init>(int-String) to listOf(CloseWebSocketFrame:<init>(boolean-int-int-String)),
		CloseWebSocketFrame:<init>(boolean-int) to listOf(CloseWebSocketFrame:<init>(boolean-int-ByteBuf)),
		CloseWebSocketFrame:<init>(boolean-int-int-String) to listOf(CloseWebSocketFrame:newBinaryData(int-String), WebSocketFrame:<init>(boolean-int-ByteBuf)),
		CloseWebSocketFrame:newBinaryData(int-String) to listOf(Unpooled:buffer(int), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]), ByteBuf:readerIndex(int)),
		CloseWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		CloseWebSocketFrame:statusCode() to listOf(CloseWebSocketFrame:content(), ByteBuf:capacity(), ByteBuf:readerIndex(int), ByteBuf:readShort(), ByteBuf:readerIndex(int)),
		CloseWebSocketFrame:reasonText() to listOf(CloseWebSocketFrame:content(), ByteBuf:capacity(), ByteBuf:readerIndex(int), ByteBuf:toString(Charset), ByteBuf:readerIndex(int)),
		CloseWebSocketFrame:copy() to listOf(CloseWebSocketFrame:isFinalFragment(), CloseWebSocketFrame:rsv(), CloseWebSocketFrame:content(), ByteBuf:copy(), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), CloseWebSocketFrame:copy(), CloseWebSocketFrame:copy()),
		CloseWebSocketFrame:duplicate() to listOf(CloseWebSocketFrame:isFinalFragment(), CloseWebSocketFrame:rsv(), CloseWebSocketFrame:content(), ByteBuf:duplicate(), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), CloseWebSocketFrame:duplicate(), CloseWebSocketFrame:duplicate()),
		CloseWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), CloseWebSocketFrame:retain(), CloseWebSocketFrame:retain(), CloseWebSocketFrame:retain()),
		CloseWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), CloseWebSocketFrame:retain(int), CloseWebSocketFrame:retain(int), CloseWebSocketFrame:retain(int)),
		ContinuationWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		ContinuationWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf-String) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		ContinuationWebSocketFrame:<init>(boolean-int-String) to listOf(ContinuationWebSocketFrame:fromText(String), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf-String)),
		ContinuationWebSocketFrame:text() to listOf(ContinuationWebSocketFrame:content(), ByteBuf:toString(Charset)),
		ContinuationWebSocketFrame:fromText(String) to listOf(Unpooled:copiedBuffer(CharSequence-Charset)),
		ContinuationWebSocketFrame:copy() to listOf(ContinuationWebSocketFrame:isFinalFragment(), ContinuationWebSocketFrame:rsv(), ContinuationWebSocketFrame:content(), ByteBuf:copy(), ContinuationWebSocketFrame:aggregatedText(), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf-String), ContinuationWebSocketFrame:copy(), ContinuationWebSocketFrame:copy()),
		ContinuationWebSocketFrame:duplicate() to listOf(ContinuationWebSocketFrame:isFinalFragment(), ContinuationWebSocketFrame:rsv(), ContinuationWebSocketFrame:content(), ByteBuf:duplicate(), ContinuationWebSocketFrame:aggregatedText(), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf-String), ContinuationWebSocketFrame:duplicate(), ContinuationWebSocketFrame:duplicate()),
		ContinuationWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), ContinuationWebSocketFrame:retain(), ContinuationWebSocketFrame:retain(), ContinuationWebSocketFrame:retain()),
		ContinuationWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), ContinuationWebSocketFrame:retain(int), ContinuationWebSocketFrame:retain(int), ContinuationWebSocketFrame:retain(int)),
		PingWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(boolean-int-ByteBuf)),
		PingWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		PingWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		PingWebSocketFrame:copy() to listOf(PingWebSocketFrame:isFinalFragment(), PingWebSocketFrame:rsv(), PingWebSocketFrame:content(), ByteBuf:copy(), PingWebSocketFrame:<init>(boolean-int-ByteBuf), PingWebSocketFrame:copy(), PingWebSocketFrame:copy()),
		PingWebSocketFrame:duplicate() to listOf(PingWebSocketFrame:isFinalFragment(), PingWebSocketFrame:rsv(), PingWebSocketFrame:content(), ByteBuf:duplicate(), PingWebSocketFrame:<init>(boolean-int-ByteBuf), PingWebSocketFrame:duplicate(), PingWebSocketFrame:duplicate()),
		PingWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), PingWebSocketFrame:retain(), PingWebSocketFrame:retain(), PingWebSocketFrame:retain()),
		PingWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), PingWebSocketFrame:retain(int), PingWebSocketFrame:retain(int), PingWebSocketFrame:retain(int)),
		PongWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		PongWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		PongWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		PongWebSocketFrame:copy() to listOf(PongWebSocketFrame:isFinalFragment(), PongWebSocketFrame:rsv(), PongWebSocketFrame:content(), ByteBuf:copy(), PongWebSocketFrame:<init>(boolean-int-ByteBuf), PongWebSocketFrame:copy(), PongWebSocketFrame:copy()),
		PongWebSocketFrame:duplicate() to listOf(PongWebSocketFrame:isFinalFragment(), PongWebSocketFrame:rsv(), PongWebSocketFrame:content(), ByteBuf:duplicate(), PongWebSocketFrame:<init>(boolean-int-ByteBuf), PongWebSocketFrame:duplicate(), PongWebSocketFrame:duplicate()),
		PongWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), PongWebSocketFrame:retain(), PongWebSocketFrame:retain(), PongWebSocketFrame:retain()),
		PongWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), PongWebSocketFrame:retain(int), PongWebSocketFrame:retain(int), PongWebSocketFrame:retain(int)),
		TextWebSocketFrame:<init>() to listOf(Unpooled:buffer(int), WebSocketFrame:<init>(ByteBuf)),
		TextWebSocketFrame:<init>(String) to listOf(TextWebSocketFrame:fromText(String), WebSocketFrame:<init>(ByteBuf)),
		TextWebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(ByteBuf)),
		TextWebSocketFrame:<init>(boolean-int-String) to listOf(TextWebSocketFrame:fromText(String), WebSocketFrame:<init>(boolean-int-ByteBuf)),
		TextWebSocketFrame:fromText(String) to listOf(Unpooled:copiedBuffer(CharSequence-Charset)),
		TextWebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		TextWebSocketFrame:text() to listOf(TextWebSocketFrame:content(), ByteBuf:toString(Charset)),
		TextWebSocketFrame:copy() to listOf(TextWebSocketFrame:isFinalFragment(), TextWebSocketFrame:rsv(), TextWebSocketFrame:content(), ByteBuf:copy(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), TextWebSocketFrame:copy(), TextWebSocketFrame:copy()),
		TextWebSocketFrame:duplicate() to listOf(TextWebSocketFrame:isFinalFragment(), TextWebSocketFrame:rsv(), TextWebSocketFrame:content(), ByteBuf:duplicate(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), TextWebSocketFrame:duplicate(), TextWebSocketFrame:duplicate()),
		TextWebSocketFrame:retain() to listOf(WebSocketFrame:retain(), TextWebSocketFrame:retain(), TextWebSocketFrame:retain(), TextWebSocketFrame:retain()),
		TextWebSocketFrame:retain(int) to listOf(WebSocketFrame:retain(int), TextWebSocketFrame:retain(int), TextWebSocketFrame:retain(int), TextWebSocketFrame:retain(int)),
		UTF8Output:<init>(ByteBuf) to listOf(ByteBuf:readableBytes(), UTF8Output:write(ByteBuf)),
		UTF8Output:write(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:getByte(int), UTF8Output:write(int)),
		UTF8Output:write(byte[]) to listOf(UTF8Output:write(int)),
		UTF8Output:write(int) to listOf(UTF8Exception:<init>(String)),
		UTF8Output:toString() to listOf(UTF8Exception:<init>(String)),
		WebSocket00FrameDecoder:<init>() to listOf(WebSocket00FrameDecoder:<init>(int)),
		WebSocket00FrameDecoder:<init>(int) to listOf(ReplayingDecoder:<init>()),
		WebSocket00FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(WebSocket00FrameDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), ByteBuf:readByte(), WebSocket00FrameDecoder:decodeBinaryFrame(ChannelHandlerContext-byte-ByteBuf), WebSocket00FrameDecoder:decodeTextFrame(ChannelHandlerContext-ByteBuf)),
		WebSocket00FrameDecoder:decodeBinaryFrame(ChannelHandlerContext-byte-ByteBuf) to listOf(ByteBuf:readByte(), TooLongFrameException:<init>(), TooLongFrameException:<init>(), CloseWebSocketFrame:<init>(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:readBytes(ByteBuf), BinaryWebSocketFrame:<init>(ByteBuf)),
		WebSocket00FrameDecoder:decodeTextFrame(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:readerIndex(), WebSocket00FrameDecoder:actualReadableBytes(), ByteBuf:indexOf(int-int-byte), TooLongFrameException:<init>(), TooLongFrameException:<init>(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:readBytes(ByteBuf), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:indexOf(int-int-byte), TextWebSocketFrame:<init>(ByteBuf)),
		WebSocket00FrameEncoder:<init>() to listOf(MessageToByteEncoder:<init>()),
		WebSocket00FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-ByteBuf) to listOf(WebSocketFrame:content(), ByteBuf:writeByte(int), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), WebSocketFrame:content(), ByteBuf:readableBytes(), ByteBuf:ensureWritable(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		WebSocket00FrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(WebSocket00FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-ByteBuf)),
		WebSocket07FrameDecoder:<init>(boolean-boolean-int) to listOf(WebSocket08FrameDecoder:<init>(boolean-boolean-int)),
		WebSocket07FrameEncoder:<init>(boolean) to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		WebSocket08FrameDecoder$1:<clinit>() to listOf(WebSocket08FrameDecoder$State:values(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal(), WebSocket08FrameDecoder$State:ordinal()),
		WebSocket08FrameDecoder$State:values() to listOf(WebSocket08FrameDecoder$State[]:clone()),
		WebSocket08FrameDecoder$State:<clinit>() to listOf(WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int), WebSocket08FrameDecoder$State:<init>(String-int)),
		WebSocket08FrameDecoder:<init>(boolean-boolean-int) to listOf(ReplayingDecoder:<init>(Object)),
		WebSocket08FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(WebSocket08FrameDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), WebSocket08FrameDecoder:state(), WebSocket08FrameDecoder$State:ordinal(), ByteBuf:readByte(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), ByteBuf:readByte(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:readUnsignedShort(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:readLong(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), WebSocket08FrameDecoder:checkpoint(Object), ByteBuf:readBytes(int), WebSocket08FrameDecoder:checkpoint(Object), WebSocket08FrameDecoder:actualReadableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int), ChannelHandlerContext:alloc(), WebSocket08FrameDecoder:toFrameLength(long), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int), ChannelHandlerContext:alloc(), WebSocket08FrameDecoder:toFrameLength(long), ByteBufAllocator:buffer(int), WebSocket08FrameDecoder:toFrameLength(long), ByteBuf:writeBytes(ByteBuf-int), WebSocket08FrameDecoder:checkpoint(Object), ByteBuf:writeBytes(ByteBuf), ByteBuf:release(), WebSocket08FrameDecoder:unmask(ByteBuf), PingWebSocketFrame:<init>(boolean-int-ByteBuf), PongWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocket08FrameDecoder:checkCloseFrameBody(ChannelHandlerContext-ByteBuf), CloseWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocket08FrameDecoder:checkUTF8String(ChannelHandlerContext-ByteBuf), UTF8Output:toString(), WebSocket08FrameDecoder:checkUTF8String(ChannelHandlerContext-ByteBuf), WebSocket08FrameDecoder:checkUTF8String(ChannelHandlerContext-ByteBuf), TextWebSocketFrame:<init>(boolean-int-ByteBuf), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), ContinuationWebSocketFrame:<init>(boolean-int-ByteBuf-String), ByteBuf:readByte(), ByteBuf:refCnt(), ByteBuf:release(), ByteBuf:refCnt(), ByteBuf:release()),
		WebSocket08FrameDecoder:unmask(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:setByte(int-int)),
		WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String) to listOf(WebSocket08FrameDecoder:checkpoint(Object), ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener), CorruptedFrameException:<init>(String)),
		WebSocket08FrameDecoder:toFrameLength(long) to listOf(TooLongFrameException:<init>(String)),
		WebSocket08FrameDecoder:checkUTF8String(ChannelHandlerContext-ByteBuf) to listOf(UTF8Output:<init>(ByteBuf), UTF8Output:write(ByteBuf), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String)),
		WebSocket08FrameDecoder:checkCloseFrameBody(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:capacity(), ByteBuf:capacity(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:readerIndex(), ByteBuf:readerIndex(int), ByteBuf:readShort(), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:isReadable(), UTF8Output:<init>(ByteBuf), WebSocket08FrameDecoder:protocolViolation(ChannelHandlerContext-String), ByteBuf:readerIndex(int)),
		WebSocket08FrameDecoder:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocket08FrameEncoder:<init>(boolean) to listOf(MessageToByteEncoder:<init>()),
		WebSocket08FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-ByteBuf) to listOf(WebSocketFrame:content(), ByteBuf:readableBytes(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), WebSocketFrame:isFinalFragment(), WebSocketFrame:rsv(), TooLongFrameException:<init>(String), ByteBuf:ensureWritable(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:ensureWritable(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:ensureWritable(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeLong(long), ByteBuf:writeBytes(byte[]), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:getByte(int), ByteBuf:writeByte(int), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:writeBytes(ByteBuf-int-int)),
		WebSocket08FrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(WebSocket08FrameEncoder:encode(ChannelHandlerContext-WebSocketFrame-ByteBuf)),
		WebSocket08FrameEncoder:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocket13FrameDecoder:<init>(boolean-boolean-int) to listOf(WebSocket08FrameDecoder:<init>(boolean-boolean-int)),
		WebSocket13FrameEncoder:<init>(boolean) to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:pipeline(), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:name(), WebSocketClientHandshaker:newWebSocketEncoder(), ChannelPipeline:addAfter(String-String-ChannelHandler), ChannelPromise:setSuccess(), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		WebSocketClientHandshaker$1:operationComplete(Future) to listOf(WebSocketClientHandshaker$1:operationComplete(ChannelFuture)),
		WebSocketClientHandshaker:handshake(Channel) to listOf(Channel:newPromise(), WebSocketClientHandshaker:handshake(Channel-ChannelPromise)),
		WebSocketClientHandshaker:handshake(Channel-ChannelPromise) to listOf(WebSocketClientHandshaker:newHandshakeRequest(), Channel:pipeline(), ChannelPipeline:get(Class), Channel:pipeline(), ChannelPipeline:get(Class), ChannelPromise:setFailure(Throwable), HttpClientCodec:setSingleDecode(boolean), HttpResponseDecoder:setSingleDecode(boolean), Channel:writeAndFlush(Object), WebSocketClientHandshaker$1:<init>(WebSocketClientHandshaker-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse) to listOf(WebSocketClientHandshaker:verify(FullHttpResponse), FullHttpResponse:headers(), HttpHeaders:get(String), WebSocketClientHandshaker:setActualSubprotocol(String), WebSocketClientHandshaker:setHandshakeComplete(), Channel:pipeline(), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelHandlerContext:name(), WebSocketClientHandshaker:newWebsocketDecoder(), ChannelPipeline:replace(String-String-ChannelHandler), ChannelPipeline:get(Class), ChannelPipeline:remove(Class), ChannelHandlerContext:name(), WebSocketClientHandshaker:newWebsocketDecoder(), ChannelPipeline:replace(String-String-ChannelHandler)),
		WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame) to listOf(Channel:newPromise(), WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise)),
		WebSocketClientHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise) to listOf(Channel:writeAndFlush(Object-ChannelPromise)),
		WebSocketClientHandshaker00:<init>(URI-WebSocketVersion-String-HttpHeaders-int) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker00:newHandshakeRequest() to listOf(WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int), WebSocketClientHandshaker00:insertRandomCharacters(String), WebSocketClientHandshaker00:insertRandomCharacters(String), WebSocketClientHandshaker00:insertSpaces(String-int), WebSocketClientHandshaker00:insertSpaces(String-int), WebSocketUtil:randomBytes(int), WebSocketUtil:md5(byte[]), Unpooled:wrappedBuffer(byte[]), WebSocketClientHandshaker00:uri(), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), WebSocketClientHandshaker00:expectedSubprotocol(), HttpHeaders:add(String-Object), HttpHeaders:add(HttpHeaders), HttpHeaders:set(String-Object), FullHttpRequest:content(), ByteBuf:writeBytes(byte[])),
		WebSocketClientHandshaker00:verify(FullHttpResponse) to listOf(HttpResponseStatus:<init>(int-String), FullHttpResponse:getStatus(), HttpResponseStatus:equals(Object), FullHttpResponse:getStatus(), WebSocketHandshakeException:<init>(String), FullHttpResponse:headers(), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), FullHttpResponse:content(), ByteBuf:equals(Object), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker00:insertRandomCharacters(String) to listOf(WebSocketUtil:randomNumber(int-int), WebSocketUtil:randomNumber(int-int)),
		WebSocketClientHandshaker00:insertSpaces(String-int) to listOf(WebSocketUtil:randomNumber(int-int)),
		WebSocketClientHandshaker00:newWebsocketDecoder() to listOf(WebSocketClientHandshaker00:maxFramePayloadLength(), WebSocket00FrameDecoder:<init>(int)),
		WebSocketClientHandshaker00:newWebSocketEncoder() to listOf(WebSocket00FrameEncoder:<init>()),
		WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker07:newHandshakeRequest() to listOf(WebSocketClientHandshaker07:uri(), WebSocketUtil:randomBytes(int), WebSocketUtil:base64(byte[]), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), WebSocketClientHandshaker07:expectedSubprotocol(), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(HttpHeaders)),
		WebSocketClientHandshaker07:verify(FullHttpResponse) to listOf(FullHttpResponse:headers(), FullHttpResponse:getStatus(), HttpResponseStatus:equals(Object), FullHttpResponse:getStatus(), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker07:newWebsocketDecoder() to listOf(WebSocketClientHandshaker07:maxFramePayloadLength(), WebSocket07FrameDecoder:<init>(boolean-boolean-int)),
		WebSocketClientHandshaker07:newWebSocketEncoder() to listOf(WebSocket07FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker07:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker08:newHandshakeRequest() to listOf(WebSocketClientHandshaker08:uri(), WebSocketUtil:randomBytes(int), WebSocketUtil:base64(byte[]), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), WebSocketClientHandshaker08:expectedSubprotocol(), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(HttpHeaders)),
		WebSocketClientHandshaker08:verify(FullHttpResponse) to listOf(FullHttpResponse:headers(), FullHttpResponse:getStatus(), HttpResponseStatus:equals(Object), FullHttpResponse:getStatus(), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker08:newWebsocketDecoder() to listOf(WebSocketClientHandshaker08:maxFramePayloadLength(), WebSocket08FrameDecoder:<init>(boolean-boolean-int)),
		WebSocketClientHandshaker08:newWebSocketEncoder() to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker08:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshaker:<init>(URI-WebSocketVersion-String-HttpHeaders-int)),
		WebSocketClientHandshaker13:newHandshakeRequest() to listOf(WebSocketClientHandshaker13:uri(), WebSocketUtil:randomBytes(int), WebSocketUtil:base64(byte[]), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), FullHttpRequest:headers(), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), WebSocketClientHandshaker13:expectedSubprotocol(), HttpHeaders:add(String-Object), HttpHeaders:add(String-Object), HttpHeaders:add(HttpHeaders)),
		WebSocketClientHandshaker13:verify(FullHttpResponse) to listOf(FullHttpResponse:headers(), FullHttpResponse:getStatus(), HttpResponseStatus:equals(Object), FullHttpResponse:getStatus(), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String)),
		WebSocketClientHandshaker13:newWebsocketDecoder() to listOf(WebSocketClientHandshaker13:maxFramePayloadLength(), WebSocket13FrameDecoder:<init>(boolean-boolean-int)),
		WebSocketClientHandshaker13:newWebSocketEncoder() to listOf(WebSocket13FrameEncoder:<init>(boolean)),
		WebSocketClientHandshaker13:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders) to listOf(WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int)),
		WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientHandshaker13:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), WebSocketClientHandshaker08:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), WebSocketClientHandshaker07:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int), WebSocketClientHandshaker00:<init>(URI-WebSocketVersion-String-HttpHeaders-int), WebSocketVersion:toString(), WebSocketHandshakeException:<init>(String)),
		WebSocketClientProtocolHandler$ClientHandshakeStateEvent:values() to listOf(WebSocketClientProtocolHandler$ClientHandshakeStateEvent[]:clone()),
		WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<clinit>() to listOf(WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<init>(String-int), WebSocketClientProtocolHandler$ClientHandshakeStateEvent:<init>(String-int)),
		WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean) to listOf(WebSocketClientHandshakerFactory:newHandshaker(URI-WebSocketVersion-String-boolean-HttpHeaders-int), WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean)),
		WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int) to listOf(WebSocketClientProtocolHandler:<init>(URI-WebSocketVersion-String-boolean-HttpHeaders-int-boolean)),
		WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean) to listOf(WebSocketProtocolHandler:<init>()),
		WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker) to listOf(WebSocketClientProtocolHandler:<init>(WebSocketClientHandshaker-boolean)),
		WebSocketClientProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(ChannelHandlerContext:close(), WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketClientProtocolHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), WebSocketClientProtocolHandshakeHandler:<init>(WebSocketClientHandshaker), ChannelPipeline:addBefore(String-String-ChannelHandler)),
		WebSocketClientProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(WebSocketProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable)),
		WebSocketClientProtocolHandler:decode(ChannelHandlerContext-Object-List) to listOf(WebSocketClientProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketClientProtocolHandshakeHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:fireUserEventTriggered(Object)),
		WebSocketClientProtocolHandshakeHandler$1:operationComplete(Future) to listOf(WebSocketClientProtocolHandshakeHandler$1:operationComplete(ChannelFuture)),
		WebSocketClientProtocolHandshakeHandler:<init>(WebSocketClientHandshaker) to listOf(ChannelInboundHandlerAdapter:<init>()),
		WebSocketClientProtocolHandshakeHandler:channelActive(ChannelHandlerContext) to listOf(ChannelInboundHandlerAdapter:channelActive(ChannelHandlerContext), ChannelHandlerContext:channel(), WebSocketClientHandshaker:handshake(Channel), WebSocketClientProtocolHandshakeHandler$1:<init>(WebSocketClientProtocolHandshakeHandler-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketClientProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object), WebSocketClientHandshaker:isHandshakeComplete(), ChannelHandlerContext:channel(), WebSocketClientHandshaker:finishHandshake(Channel-FullHttpResponse), ChannelHandlerContext:fireUserEventTriggered(Object), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		WebSocketFrame:<init>(ByteBuf) to listOf(WebSocketFrame:<init>(boolean-int-ByteBuf)),
		WebSocketFrame:<init>(boolean-int-ByteBuf) to listOf(DefaultByteBufHolder:<init>(ByteBuf)),
		WebSocketFrame:toString() to listOf(WebSocketFrame:content(), ByteBuf:toString()),
		WebSocketFrame:retain() to listOf(DefaultByteBufHolder:retain(), WebSocketFrame:retain(), WebSocketFrame:retain()),
		WebSocketFrame:retain(int) to listOf(DefaultByteBufHolder:retain(int), WebSocketFrame:retain(int), WebSocketFrame:retain(int)),
		WebSocketFrame:duplicate() to listOf(WebSocketFrame:duplicate()),
		WebSocketFrame:copy() to listOf(WebSocketFrame:copy()),
		WebSocketFrameAggregator:<init>(int) to listOf(MessageToMessageDecoder:<init>()),
		WebSocketFrameAggregator:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(WebSocketFrame:isFinalFragment(), WebSocketFrame:retain(), ChannelHandlerContext:alloc(), ByteBufAllocator:compositeBuffer(), WebSocketFrame:content(), ByteBuf:retain(), CompositeByteBuf:addComponent(ByteBuf), ByteBuf:writerIndex(), WebSocketFrame:content(), ByteBuf:readableBytes(), ByteBuf:writerIndex(int), WebSocketFrame:rsv(), TextWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocketFrame:rsv(), BinaryWebSocketFrame:<init>(boolean-int-ByteBuf), WebSocketFrame:isFinalFragment(), WebSocketFrame:content(), CompositeByteBuf:readableBytes(), WebSocketFrame:content(), ByteBuf:readableBytes(), TooLongFrameException:<init>(String), WebSocketFrame:content(), ByteBuf:retain(), CompositeByteBuf:addComponent(ByteBuf), CompositeByteBuf:writerIndex(), WebSocketFrame:content(), ByteBuf:readableBytes(), CompositeByteBuf:writerIndex(int), WebSocketFrame:isFinalFragment(), WebSocketFrame:retain()),
		WebSocketFrameAggregator:channelInactive(ChannelHandlerContext) to listOf(MessageToMessageDecoder:channelInactive(ChannelHandlerContext), WebSocketFrame:release()),
		WebSocketFrameAggregator:handlerRemoved(ChannelHandlerContext) to listOf(MessageToMessageDecoder:handlerRemoved(ChannelHandlerContext), WebSocketFrame:release()),
		WebSocketFrameAggregator:decode(ChannelHandlerContext-Object-List) to listOf(WebSocketFrameAggregator:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketProtocolHandler:<init>() to listOf(MessageToMessageDecoder:<init>()),
		WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(WebSocketFrame:content(), ByteBuf:retain(), ChannelHandlerContext:channel(), WebSocketFrame:content(), PongWebSocketFrame:<init>(ByteBuf), Channel:writeAndFlush(Object), WebSocketFrame:retain()),
		WebSocketProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:close()),
		WebSocketProtocolHandler:decode(ChannelHandlerContext-Object-List) to listOf(WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerHandshaker$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:channel(), Channel:pipeline(), ChannelPipeline:get(Class), ChannelPipeline:remove(Class), ChannelPipeline:context(Class), ChannelPipeline:context(Class), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:name(), WebSocketServerHandshaker:newWebsocketDecoder(), ChannelPipeline:addBefore(String-String-ChannelHandler), ChannelHandlerContext:name(), WebSocketServerHandshaker:newWebSocketEncoder(), ChannelPipeline:replace(String-String-ChannelHandler), ChannelHandlerContext:name(), WebSocketServerHandshaker:newWebsocketDecoder(), ChannelPipeline:replace(String-String-ChannelHandler), WebSocketServerHandshaker:newWebSocketEncoder(), ChannelPipeline:replace(Class-String-ChannelHandler), ChannelPromise:setSuccess(), ChannelFuture:cause(), ChannelPromise:setFailure(Throwable)),
		WebSocketServerHandshaker$1:operationComplete(Future) to listOf(WebSocketServerHandshaker$1:operationComplete(ChannelFuture)),
		WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int) to listOf(StringUtil:split(String-char)),
		WebSocketServerHandshaker:handshake(Channel-FullHttpRequest) to listOf(Channel:newPromise(), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise)),
		WebSocketServerHandshaker:handshake(Channel-FullHttpRequest-HttpHeaders-ChannelPromise) to listOf(InternalLogger:isDebugEnabled(), WebSocketServerHandshaker:version(), InternalLogger:debug(String), WebSocketServerHandshaker:newHandshakeResponse(FullHttpRequest-HttpHeaders), Channel:writeAndFlush(Object), WebSocketServerHandshaker$1:<init>(WebSocketServerHandshaker-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame) to listOf(Channel:newPromise(), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise)),
		WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame-ChannelPromise) to listOf(Channel:writeAndFlush(Object-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketServerHandshaker:selectSubprotocol(String) to listOf(StringUtil:split(String-char)),
		WebSocketServerHandshaker:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		WebSocketServerHandshaker00:<init>(String-String-int) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker00:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(FullHttpRequest:headers(), HttpHeaders:get(String), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), FullHttpRequest:headers(), HttpHeaders:contains(String), FullHttpRequest:headers(), HttpHeaders:contains(String), HttpResponseStatus:<init>(int-String), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(HttpHeaders), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), FullHttpRequest:headers(), HttpHeaders:get(String), HttpHeaders:add(String-Object), FullHttpResponse:headers(), WebSocketServerHandshaker00:uri(), HttpHeaders:add(String-Object), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketServerHandshaker00:selectSubprotocol(String), WebSocketHandshakeException:<init>(String), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpRequest:headers(), HttpHeaders:get(String), FullHttpRequest:headers(), HttpHeaders:get(String), FullHttpRequest:content(), ByteBuf:readLong(), Unpooled:buffer(int), ByteBuf:writeInt(int), ByteBuf:writeInt(int), ByteBuf:writeLong(long), FullHttpResponse:content(), ByteBuf:array(), WebSocketUtil:md5(byte[]), ByteBuf:writeBytes(byte[]), FullHttpResponse:headers(), FullHttpRequest:headers(), HttpHeaders:get(String), HttpHeaders:add(String-Object), FullHttpResponse:headers(), WebSocketServerHandshaker00:uri(), HttpHeaders:add(String-Object), FullHttpRequest:headers(), HttpHeaders:get(String), FullHttpResponse:headers(), WebSocketServerHandshaker00:selectSubprotocol(String), HttpHeaders:add(String-Object)),
		WebSocketServerHandshaker00:close(Channel-CloseWebSocketFrame-ChannelPromise) to listOf(Channel:writeAndFlush(Object-ChannelPromise)),
		WebSocketServerHandshaker00:newWebsocketDecoder() to listOf(WebSocketServerHandshaker00:maxFramePayloadLength(), WebSocket00FrameDecoder:<init>(int)),
		WebSocketServerHandshaker00:newWebSocketEncoder() to listOf(WebSocket00FrameEncoder:<init>()),
		WebSocketServerHandshaker07:<init>(String-String-boolean-int) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker07:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(HttpHeaders), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketServerHandshaker07:selectSubprotocol(String), WebSocketHandshakeException:<init>(String), FullHttpResponse:headers(), HttpHeaders:add(String-Object)),
		WebSocketServerHandshaker07:newWebsocketDecoder() to listOf(WebSocketServerHandshaker07:maxFramePayloadLength(), WebSocket07FrameDecoder:<init>(boolean-boolean-int)),
		WebSocketServerHandshaker07:newWebSocketEncoder() to listOf(WebSocket07FrameEncoder:<init>(boolean)),
		WebSocketServerHandshaker08:<init>(String-String-boolean-int) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker08:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(HttpHeaders), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketServerHandshaker08:selectSubprotocol(String), WebSocketHandshakeException:<init>(String), FullHttpResponse:headers(), HttpHeaders:add(String-Object)),
		WebSocketServerHandshaker08:newWebsocketDecoder() to listOf(WebSocketServerHandshaker08:maxFramePayloadLength(), WebSocket08FrameDecoder:<init>(boolean-boolean-int)),
		WebSocketServerHandshaker08:newWebSocketEncoder() to listOf(WebSocket08FrameEncoder:<init>(boolean)),
		WebSocketServerHandshaker13:<init>(String-String-boolean-int) to listOf(WebSocketServerHandshaker:<init>(WebSocketVersion-String-String-int)),
		WebSocketServerHandshaker13:newHandshakeResponse(FullHttpRequest-HttpHeaders) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), FullHttpResponse:headers(), HttpHeaders:add(HttpHeaders), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketHandshakeException:<init>(String), WebSocketUtil:sha1(byte[]), WebSocketUtil:base64(byte[]), InternalLogger:isDebugEnabled(), InternalLogger:debug(String), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpResponse:headers(), HttpHeaders:add(String-Object), FullHttpRequest:headers(), HttpHeaders:get(String), WebSocketServerHandshaker13:selectSubprotocol(String), WebSocketHandshakeException:<init>(String), FullHttpResponse:headers(), HttpHeaders:add(String-Object)),
		WebSocketServerHandshaker13:newWebsocketDecoder() to listOf(WebSocketServerHandshaker13:maxFramePayloadLength(), WebSocket13FrameDecoder:<init>(boolean-boolean-int)),
		WebSocketServerHandshaker13:newWebSocketEncoder() to listOf(WebSocket13FrameEncoder:<init>(boolean)),
		WebSocketServerHandshakerFactory:<init>(String-String-boolean) to listOf(WebSocketServerHandshakerFactory:<init>(String-String-boolean-int)),
		WebSocketServerHandshakerFactory:newHandshaker(HttpRequest) to listOf(HttpRequest:headers(), HttpHeaders:get(String), WebSocketVersion:toHttpHeaderValue(), WebSocketServerHandshaker13:<init>(String-String-boolean-int), WebSocketVersion:toHttpHeaderValue(), WebSocketServerHandshaker08:<init>(String-String-boolean-int), WebSocketVersion:toHttpHeaderValue(), WebSocketServerHandshaker07:<init>(String-String-boolean-int), WebSocketServerHandshaker00:<init>(String-String-int)),
		WebSocketServerHandshakerFactory:sendUnsupportedWebSocketVersionResponse(Channel) to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus), HttpResponse:headers(), WebSocketVersion:toHttpHeaderValue(), HttpHeaders:set(String-Object), Channel:write(Object)),
		WebSocketServerProtocolHandler$1:<init>() to listOf(ChannelInboundHandlerAdapter:<init>()),
		WebSocketServerProtocolHandler$1:channelRead(ChannelHandlerContext-Object) to listOf(DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), ChannelHandlerContext:channel(), Channel:writeAndFlush(Object), ChannelHandlerContext:fireChannelRead(Object)),
		WebSocketServerProtocolHandler$ServerHandshakeStateEvent:values() to listOf(WebSocketServerProtocolHandler$ServerHandshakeStateEvent[]:clone()),
		WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<clinit>() to listOf(WebSocketServerProtocolHandler$ServerHandshakeStateEvent:<init>(String-int)),
		WebSocketServerProtocolHandler:<init>(String) to listOf(WebSocketServerProtocolHandler:<init>(String-String-boolean)),
		WebSocketServerProtocolHandler:<init>(String-String) to listOf(WebSocketServerProtocolHandler:<init>(String-String-boolean)),
		WebSocketServerProtocolHandler:<init>(String-String-boolean) to listOf(WebSocketProtocolHandler:<init>()),
		WebSocketServerProtocolHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), ChannelHandlerContext:pipeline(), ChannelHandlerContext:name(), WebSocketServerProtocolHandshakeHandler:<init>(String-String-boolean), ChannelPipeline:addBefore(String-String-ChannelHandler)),
		WebSocketServerProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List) to listOf(WebSocketServerProtocolHandler:getHandshaker(ChannelHandlerContext), WebSocketFrame:retain(), ChannelHandlerContext:channel(), WebSocketServerHandshaker:close(Channel-CloseWebSocketFrame), WebSocketProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerProtocolHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(Unpooled:wrappedBuffer(byte[]), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus-ByteBuf), ChannelHandlerContext:channel(), Channel:writeAndFlush(Object), ChannelFuture:addListener(GenericFutureListener), ChannelHandlerContext:close()),
		WebSocketServerProtocolHandler:getHandshaker(ChannelHandlerContext) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get()),
		WebSocketServerProtocolHandler:setHandshaker(ChannelHandlerContext-WebSocketServerHandshaker) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object)),
		WebSocketServerProtocolHandler:forbiddenHttpRequestResponder() to listOf(WebSocketServerProtocolHandler$1:<init>()),
		WebSocketServerProtocolHandler:decode(ChannelHandlerContext-Object-List) to listOf(WebSocketServerProtocolHandler:decode(ChannelHandlerContext-WebSocketFrame-List)),
		WebSocketServerProtocolHandler:<clinit>() to listOf(AttributeKey:<init>(String)),
		WebSocketServerProtocolHandshakeHandler$1:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess(), ChannelFuture:cause(), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:fireUserEventTriggered(Object)),
		WebSocketServerProtocolHandshakeHandler$1:operationComplete(Future) to listOf(WebSocketServerProtocolHandshakeHandler$1:operationComplete(ChannelFuture)),
		WebSocketServerProtocolHandshakeHandler:<init>(String-String-boolean) to listOf(ChannelInboundHandlerAdapter:<init>()),
		WebSocketServerProtocolHandshakeHandler:channelRead(ChannelHandlerContext-Object) to listOf(FullHttpRequest:getMethod(), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), WebSocketServerProtocolHandshakeHandler:sendHttpResponse(ChannelHandlerContext-HttpRequest-HttpResponse), ChannelHandlerContext:pipeline(), WebSocketServerProtocolHandshakeHandler:getWebSocketLocation(ChannelPipeline-HttpRequest-String), WebSocketServerHandshakerFactory:<init>(String-String-boolean), WebSocketServerHandshakerFactory:newHandshaker(HttpRequest), ChannelHandlerContext:channel(), WebSocketServerHandshakerFactory:sendUnsupportedWebSocketVersionResponse(Channel), ChannelHandlerContext:channel(), WebSocketServerHandshaker:handshake(Channel-FullHttpRequest), WebSocketServerProtocolHandshakeHandler$1:<init>(WebSocketServerProtocolHandshakeHandler-ChannelHandlerContext), ChannelFuture:addListener(GenericFutureListener), WebSocketServerProtocolHandler:setHandshaker(ChannelHandlerContext-WebSocketServerHandshaker), ChannelHandlerContext:pipeline(), WebSocketServerProtocolHandler:forbiddenHttpRequestResponder(), ChannelPipeline:replace(ChannelHandler-String-ChannelHandler)),
		WebSocketServerProtocolHandshakeHandler:sendHttpResponse(ChannelHandlerContext-HttpRequest-HttpResponse) to listOf(ChannelHandlerContext:channel(), Channel:writeAndFlush(Object), HttpHeaders:isKeepAlive(HttpMessage), HttpResponse:getStatus(), HttpResponseStatus:code(), ChannelFuture:addListener(GenericFutureListener)),
		WebSocketServerProtocolHandshakeHandler:getWebSocketLocation(ChannelPipeline-HttpRequest-String) to listOf(ChannelPipeline:get(Class), HttpRequest:headers(), HttpHeaders:get(String)),
		WebSocketUtil:base64(byte[]) to listOf(Unpooled:wrappedBuffer(byte[]), Base64:encode(ByteBuf), ByteBuf:toString(Charset)),
		WebSocketUtil:randomBytes(int) to listOf(WebSocketUtil:randomNumber(int-int)),
		WebSocketVersion:values() to listOf(WebSocketVersion[]:clone()),
		WebSocketVersion:<clinit>() to listOf(WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int), WebSocketVersion:<init>(String-int)),
		LengthFieldBasedFrameDecoder:<init>(int-int-int) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int)),
		LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int-boolean)),
		LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int-boolean) to listOf(LengthFieldBasedFrameDecoder:<init>(ByteOrder-int-int-int-int-int-boolean)),
		LengthFieldBasedFrameDecoder:<init>(ByteOrder-int-int-int-int-int-boolean) to listOf(ByteToMessageDecoder:<init>()),
		LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:skipBytes(int), LengthFieldBasedFrameDecoder:failIfNecessary(boolean), ByteBuf:readableBytes(), ByteBuf:readerIndex(), LengthFieldBasedFrameDecoder:getFrameLength(ByteBuf-int), ByteBuf:skipBytes(int), CorruptedFrameException:<init>(String), ByteBuf:skipBytes(int), CorruptedFrameException:<init>(String), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), LengthFieldBasedFrameDecoder:failIfNecessary(boolean), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), CorruptedFrameException:<init>(String), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), LengthFieldBasedFrameDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int), ByteBuf:readerIndex(int)),
		LengthFieldBasedFrameDecoder:getFrameLength(ByteBuf-int) to listOf(ByteBuf:order(ByteOrder), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedMedium(int), ByteBuf:getUnsignedInt(int), ByteBuf:getLong(int)),
		LengthFieldBasedFrameDecoder:failIfNecessary(boolean) to listOf(LengthFieldBasedFrameDecoder:fail(long), LengthFieldBasedFrameDecoder:fail(long)),
		LengthFieldBasedFrameDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int-int)),
		LengthFieldBasedFrameDecoder:fail(long) to listOf(TooLongFrameException:<init>(String), TooLongFrameException:<init>(String)),
		LengthFieldPrepender:<init>(int) to listOf(LengthFieldPrepender:<init>(int-boolean)),
		LengthFieldPrepender:<init>(int-boolean) to listOf(LengthFieldPrepender:<init>(int-int-boolean)),
		LengthFieldPrepender:<init>(int-int) to listOf(LengthFieldPrepender:<init>(int-int-boolean)),
		LengthFieldPrepender:<init>(int-int-boolean) to listOf(MessageToByteEncoder:<init>()),
		LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:writeByte(int), ByteBuf:writeShort(int), ByteBuf:writeMedium(int), ByteBuf:writeInt(int), ByteBuf:writeLong(long), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:writeBytes(ByteBuf-int-int)),
		LengthFieldPrepender:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		LineBasedFrameDecoder:<init>(int) to listOf(LineBasedFrameDecoder:<init>(int-boolean-boolean)),
		LineBasedFrameDecoder:<init>(int-boolean-boolean) to listOf(ByteToMessageDecoder:<init>()),
		LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf)),
		LineBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LineBasedFrameDecoder:findEndOfLine(ByteBuf), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readerIndex(int), LineBasedFrameDecoder:fail(ChannelHandlerContext-int), ByteBuf:readBytes(int), ByteBuf:skipBytes(int), ByteBuf:readBytes(int), ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readerIndex(int), LineBasedFrameDecoder:fail(ChannelHandlerContext-String), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:readerIndex(int), LineBasedFrameDecoder:fail(ChannelHandlerContext-int), ByteBuf:readableBytes(), ByteBuf:writerIndex(), ByteBuf:readerIndex(int)),
		LineBasedFrameDecoder:fail(ChannelHandlerContext-int) to listOf(LineBasedFrameDecoder:fail(ChannelHandlerContext-String)),
		LineBasedFrameDecoder:fail(ChannelHandlerContext-String) to listOf(TooLongFrameException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		LineBasedFrameDecoder:findEndOfLine(ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		ChannelBufferByteInput:available() to listOf(ByteBuf:readableBytes()),
		ChannelBufferByteInput:read() to listOf(ByteBuf:isReadable(), ByteBuf:readByte()),
		ChannelBufferByteInput:read(byte[]) to listOf(ChannelBufferByteInput:read(byte[]-int-int)),
		ChannelBufferByteInput:read(byte[]-int-int) to listOf(ChannelBufferByteInput:available(), ByteBuf:readBytes(byte[]-int-int)),
		ChannelBufferByteInput:skip(long) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:readerIndex(int)),
		ChannelBufferByteOutput:write(int) to listOf(ByteBuf:writeByte(int)),
		ChannelBufferByteOutput:write(byte[]) to listOf(ByteBuf:writeBytes(byte[])),
		ChannelBufferByteOutput:write(byte[]-int-int) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		CompatibleMarshallingDecoder:<init>(UnmarshallerProvider-int) to listOf(ReplayingDecoder:<init>()),
		CompatibleMarshallingDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(CompatibleMarshallingDecoder:actualReadableBytes(), ByteBuf:skipBytes(int), CompatibleMarshallingDecoder:checkpoint(), UnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), ChannelBufferByteInput:<init>(ByteBuf), LimitingByteInput:<init>(ByteInput-long), Unmarshaller:start(ByteInput), Unmarshaller:readObject(), Unmarshaller:finish(), Unmarshaller:close(), TooLongFrameException:<init>(), Unmarshaller:close()),
		CompatibleMarshallingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:getByte(int), ByteBuf:skipBytes(int), CompatibleMarshallingDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		CompatibleMarshallingDecoder:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(ChannelHandlerContext:close(), ReplayingDecoder:exceptionCaught(ChannelHandlerContext-Throwable)),
		CompatibleMarshallingEncoder:<init>(MarshallerProvider) to listOf(MessageToByteEncoder:<init>()),
		CompatibleMarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(MarshallerProvider:getMarshaller(ChannelHandlerContext), ChannelBufferByteOutput:<init>(ByteBuf), Marshaller:start(ByteOutput), Marshaller:writeObject(Object), Marshaller:finish(), Marshaller:close()),
		ContextBoundUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration) to listOf(DefaultUnmarshallerProvider:<init>(MarshallerFactory-MarshallingConfiguration)),
		ContextBoundUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get(), DefaultUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), Attribute:set(Object)),
		ContextBoundUnmarshallerProvider:<clinit>() to listOf(AttributeKey:<init>(String)),
		DefaultMarshallerProvider:getMarshaller(ChannelHandlerContext) to listOf(MarshallerFactory:createMarshaller(MarshallingConfiguration)),
		DefaultUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext) to listOf(MarshallerFactory:createUnmarshaller(MarshallingConfiguration)),
		LimitingByteInput:available() to listOf(ByteInput:available(), LimitingByteInput:readable(int)),
		LimitingByteInput:read() to listOf(LimitingByteInput:readable(int), ByteInput:read()),
		LimitingByteInput:read(byte[]) to listOf(LimitingByteInput:read(byte[]-int-int)),
		LimitingByteInput:read(byte[]-int-int) to listOf(LimitingByteInput:readable(int), ByteInput:read(byte[]-int-int)),
		LimitingByteInput:skip(long) to listOf(LimitingByteInput:readable(int), ByteInput:skip(long)),
		LimitingByteInput:<clinit>() to listOf(LimitingByteInput$TooBigObjectException:<init>()),
		MarshallingDecoder:<init>(UnmarshallerProvider) to listOf(MarshallingDecoder:<init>(UnmarshallerProvider-int)),
		MarshallingDecoder:<init>(UnmarshallerProvider-int) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int)),
		MarshallingDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), UnmarshallerProvider:getUnmarshaller(ChannelHandlerContext), ChannelBufferByteInput:<init>(ByteBuf), Unmarshaller:start(ByteInput), Unmarshaller:readObject(), Unmarshaller:finish(), Unmarshaller:close(), Unmarshaller:close()),
		MarshallingDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int) to listOf(ByteBuf:slice(int-int)),
		MarshallingEncoder:<init>(MarshallerProvider) to listOf(MessageToByteEncoder:<init>()),
		MarshallingEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(MarshallerProvider:getMarshaller(ChannelHandlerContext), ByteBuf:writerIndex(), ByteBuf:writeBytes(byte[]), ChannelBufferByteOutput:<init>(ByteBuf), Marshaller:start(ByteOutput), Marshaller:writeObject(Object), Marshaller:finish(), Marshaller:close(), ByteBuf:writerIndex(), ByteBuf:setInt(int-int)),
		ThreadLocalMarshallerProvider:getMarshaller(ChannelHandlerContext) to listOf(MarshallerFactory:createMarshaller(MarshallingConfiguration)),
		ThreadLocalUnmarshallerProvider:getUnmarshaller(ChannelHandlerContext) to listOf(MarshallerFactory:createUnmarshaller(MarshallingConfiguration)),
		MessageToByteEncoder:<init>() to listOf(MessageToByteEncoder:<init>(boolean)),
		MessageToByteEncoder:<init>(Class) to listOf(MessageToByteEncoder:<init>(Class-boolean)),
		MessageToByteEncoder:<init>(boolean) to listOf(ChannelOutboundHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		MessageToByteEncoder:<init>(Class-boolean) to listOf(ChannelOutboundHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		MessageToByteEncoder:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToByteEncoder:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToByteEncoder:acceptOutboundMessage(Object), ChannelHandlerContext:alloc(), ByteBufAllocator:ioBuffer(), ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(), MessageToByteEncoder:encode(ChannelHandlerContext-Object-ByteBuf), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), ByteBuf:isReadable(), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:release(), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:write(Object-ChannelPromise), ByteBuf:release(), EncoderException:<init>(Throwable), ByteBuf:release()),
		MessageToMessageCodec$1:<init>(MessageToMessageCodec) to listOf(MessageToMessageEncoder:<init>()),
		MessageToMessageCodec$1:acceptOutboundMessage(Object) to listOf(MessageToMessageCodec:acceptOutboundMessage(Object)),
		MessageToMessageCodec$1:encode(ChannelHandlerContext-Object-List) to listOf(MessageToMessageCodec:encode(ChannelHandlerContext-Object-List)),
		MessageToMessageCodec$2:<init>(MessageToMessageCodec) to listOf(MessageToMessageDecoder:<init>()),
		MessageToMessageCodec$2:acceptInboundMessage(Object) to listOf(MessageToMessageCodec:acceptInboundMessage(Object)),
		MessageToMessageCodec$2:decode(ChannelHandlerContext-Object-List) to listOf(MessageToMessageCodec:decode(ChannelHandlerContext-Object-List)),
		MessageToMessageCodec:<init>() to listOf(ChannelDuplexHandler:<init>(), MessageToMessageCodec$1:<init>(MessageToMessageCodec), MessageToMessageCodec$2:<init>(MessageToMessageCodec), TypeParameterMatcher:find(Object-Class-String), TypeParameterMatcher:find(Object-Class-String)),
		MessageToMessageCodec:<init>(Class-Class) to listOf(ChannelDuplexHandler:<init>(), MessageToMessageCodec$1:<init>(MessageToMessageCodec), MessageToMessageCodec$2:<init>(MessageToMessageCodec), TypeParameterMatcher:get(Class), TypeParameterMatcher:get(Class)),
		MessageToMessageCodec:channelRead(ChannelHandlerContext-Object) to listOf(MessageToMessageDecoder:channelRead(ChannelHandlerContext-Object)),
		MessageToMessageCodec:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToMessageEncoder:write(ChannelHandlerContext-Object-ChannelPromise)),
		MessageToMessageCodec:acceptInboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToMessageCodec:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToMessageDecoder:<init>() to listOf(ChannelInboundHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		MessageToMessageDecoder:<init>(Class) to listOf(ChannelInboundHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		MessageToMessageDecoder:acceptInboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToMessageDecoder:channelRead(ChannelHandlerContext-Object) to listOf(RecyclableArrayList:newInstance(), MessageToMessageDecoder:acceptInboundMessage(Object), MessageToMessageDecoder:decode(ChannelHandlerContext-Object-List), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), RecyclableArrayList:add(Object), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle(), DecoderException:<init>(Throwable), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle()),
		MessageToMessageEncoder:<init>() to listOf(ChannelOutboundHandlerAdapter:<init>(), TypeParameterMatcher:find(Object-Class-String)),
		MessageToMessageEncoder:<init>(Class) to listOf(ChannelOutboundHandlerAdapter:<init>(), TypeParameterMatcher:get(Class)),
		MessageToMessageEncoder:acceptOutboundMessage(Object) to listOf(TypeParameterMatcher:match(Object)),
		MessageToMessageEncoder:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(MessageToMessageEncoder:acceptOutboundMessage(Object), RecyclableArrayList:newInstance(), MessageToMessageEncoder:encode(ChannelHandlerContext-Object-List), ReferenceCountUtil:release(Object), ReferenceCountUtil:release(Object), RecyclableArrayList:isEmpty(), RecyclableArrayList:recycle(), StringUtil:simpleClassName(Object), EncoderException:<init>(String), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:recycle(), EncoderException:<init>(Throwable), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object), RecyclableArrayList:get(int), ChannelHandlerContext:write(Object-ChannelPromise), RecyclableArrayList:recycle()),
		PrematureChannelClosureException:<init>() to listOf(CodecException:<init>()),
		PrematureChannelClosureException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		PrematureChannelClosureException:<init>(String) to listOf(CodecException:<init>(String)),
		PrematureChannelClosureException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		ProtobufDecoder:<init>(MessageLite) to listOf(ProtobufDecoder:<init>(MessageLite-ExtensionRegistry)),
		ProtobufDecoder:<init>(MessageLite-ExtensionRegistry) to listOf(MessageToMessageDecoder:<init>(), MessageLite:getDefaultInstanceForType()),
		ProtobufDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), ByteBuf:hasArray(), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:readerIndex(), ByteBuf:readerIndex(), ByteBuf:getBytes(int-byte[]-int-int), MessageLite:getParserForType(), Parser:parseFrom(byte[]-int-int), MessageLite:newBuilderForType(), MessageLite$Builder:mergeFrom(byte[]-int-int), MessageLite$Builder:build(), MessageLite:getParserForType(), Parser:parseFrom(byte[]-int-int-ExtensionRegistryLite), MessageLite:newBuilderForType(), MessageLite$Builder:mergeFrom(byte[]-int-int-ExtensionRegistryLite), MessageLite$Builder:build()),
		ProtobufDecoder:decode(ChannelHandlerContext-Object-List) to listOf(ProtobufDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		ProtobufEncoder:<init>() to listOf(MessageToMessageEncoder:<init>()),
		ProtobufEncoder:encode(ChannelHandlerContext-MessageLiteOrBuilder-List) to listOf(MessageLite:toByteArray(), Unpooled:wrappedBuffer(byte[]), MessageLite$Builder:build(), MessageLite:toByteArray(), Unpooled:wrappedBuffer(byte[])),
		ProtobufEncoder:encode(ChannelHandlerContext-Object-List) to listOf(ProtobufEncoder:encode(ChannelHandlerContext-MessageLiteOrBuilder-List)),
		ProtobufVarint32FrameDecoder:<init>() to listOf(ByteToMessageDecoder:<init>()),
		ProtobufVarint32FrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:markReaderIndex(), ByteBuf:isReadable(), ByteBuf:resetReaderIndex(), ByteBuf:readByte(), CodedInputStream:newInstance(byte[]-int-int), CodedInputStream:readRawVarint32(), CorruptedFrameException:<init>(String), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), ByteBuf:readBytes(int), CorruptedFrameException:<init>(String)),
		ProtobufVarint32LengthFieldPrepender:<init>() to listOf(MessageToByteEncoder:<init>()),
		ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf) to listOf(ByteBuf:readableBytes(), CodedOutputStream:computeRawVarint32Size(int), ByteBuf:ensureWritable(int), ByteBufOutputStream:<init>(ByteBuf), CodedOutputStream:newInstance(OutputStream), CodedOutputStream:writeRawVarint32(int), CodedOutputStream:flush(), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int)),
		ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(ProtobufVarint32LengthFieldPrepender:encode(ChannelHandlerContext-ByteBuf-ByteBuf)),
		ReplayingDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		ReplayingDecoder:<init>(Object) to listOf(ByteToMessageDecoder:<init>(), ReplayingDecoderBuffer:<init>()),
		ReplayingDecoder:checkpoint() to listOf(ReplayingDecoder:internalBuffer(), ByteBuf:readerIndex()),
		ReplayingDecoder:checkpoint(Object) to listOf(ReplayingDecoder:checkpoint(), ReplayingDecoder:state(Object)),
		ReplayingDecoder:channelInactive(ChannelHandlerContext) to listOf(RecyclableArrayList:newInstance(), ReplayingDecoderBuffer:terminate(), ReplayingDecoder:internalBuffer(), ReplayingDecoder:callDecode(ChannelHandlerContext-ByteBuf-List), ReplayingDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelInactive(), Signal:expect(Signal), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelInactive(), DecoderException:<init>(Throwable), ByteBuf:release(), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), ChannelHandlerContext:fireChannelInactive()),
		ReplayingDecoder:callDecode(ChannelHandlerContext-ByteBuf-List) to listOf(ReplayingDecoderBuffer:setCumulation(ByteBuf), ByteBuf:isReadable(), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ReplayingDecoder:decode(ChannelHandlerContext-ByteBuf-List), ByteBuf:readableBytes(), StringUtil:simpleClassName(Class), DecoderException:<init>(String), Signal:expect(Signal), ByteBuf:readerIndex(int), ByteBuf:readerIndex(), StringUtil:simpleClassName(Class), DecoderException:<init>(String), ReplayingDecoder:isSingleDecode(), DecoderException:<init>(Throwable)),
		ReplayingDecoder:<clinit>() to listOf(Signal:<init>(String)),
		ReplayingDecoderBuffer:<init>() to listOf(ByteBuf:<init>()),
		ReplayingDecoderBuffer:<init>(ByteBuf) to listOf(ByteBuf:<init>(), ReplayingDecoderBuffer:setCumulation(ByteBuf)),
		ReplayingDecoderBuffer:capacity() to listOf(ByteBuf:capacity()),
		ReplayingDecoderBuffer:capacity(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:maxCapacity() to listOf(ReplayingDecoderBuffer:capacity()),
		ReplayingDecoderBuffer:alloc() to listOf(ByteBuf:alloc()),
		ReplayingDecoderBuffer:isDirect() to listOf(ByteBuf:isDirect()),
		ReplayingDecoderBuffer:clear() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:compareTo(ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:copy() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:copy(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:copy(int-int)),
		ReplayingDecoderBuffer:discardReadBytes() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:ensureWritable(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:ensureWritable(int-boolean) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:duplicate() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBoolean(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBoolean(int)),
		ReplayingDecoderBuffer:getByte(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getByte(int)),
		ReplayingDecoderBuffer:getUnsignedByte(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedByte(int)),
		ReplayingDecoderBuffer:getBytes(int-byte[]-int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBytes(int-byte[]-int-int)),
		ReplayingDecoderBuffer:getBytes(int-byte[]) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBytes(int-byte[])),
		ReplayingDecoderBuffer:getBytes(int-ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getBytes(int-ByteBuf-int-int)),
		ReplayingDecoderBuffer:getBytes(int-ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-GatheringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getBytes(int-OutputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:getInt(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getInt(int)),
		ReplayingDecoderBuffer:getUnsignedInt(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedInt(int)),
		ReplayingDecoderBuffer:getLong(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getLong(int)),
		ReplayingDecoderBuffer:getMedium(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getMedium(int)),
		ReplayingDecoderBuffer:getUnsignedMedium(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedMedium(int)),
		ReplayingDecoderBuffer:getShort(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getShort(int)),
		ReplayingDecoderBuffer:getUnsignedShort(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getUnsignedShort(int)),
		ReplayingDecoderBuffer:getChar(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getChar(int)),
		ReplayingDecoderBuffer:getFloat(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getFloat(int)),
		ReplayingDecoderBuffer:getDouble(int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:getDouble(int)),
		ReplayingDecoderBuffer:hashCode() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:indexOf(int-int-byte) to listOf(ByteBuf:indexOf(int-int-byte)),
		ReplayingDecoderBuffer:bytesBefore(byte) to listOf(ByteBuf:bytesBefore(byte)),
		ReplayingDecoderBuffer:bytesBefore(int-byte) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:bytesBefore(int-byte)),
		ReplayingDecoderBuffer:bytesBefore(int-int-byte) to listOf(ByteBuf:bytesBefore(int-int-byte)),
		ReplayingDecoderBuffer:forEachByte(ByteBufProcessor) to listOf(ByteBuf:forEachByte(ByteBufProcessor)),
		ReplayingDecoderBuffer:forEachByte(int-int-ByteBufProcessor) to listOf(ByteBuf:writerIndex(), ByteBuf:forEachByte(int-int-ByteBufProcessor), ByteBuf:forEachByte(int-int-ByteBufProcessor)),
		ReplayingDecoderBuffer:forEachByteDesc(ByteBufProcessor) to listOf(ByteBuf:forEachByteDesc(ByteBufProcessor), ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:forEachByteDesc(int-int-ByteBufProcessor) to listOf(ByteBuf:writerIndex(), ByteBuf:forEachByteDesc(int-int-ByteBufProcessor)),
		ReplayingDecoderBuffer:markReaderIndex() to listOf(ByteBuf:markReaderIndex()),
		ReplayingDecoderBuffer:markWriterIndex() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:order() to listOf(ByteBuf:order()),
		ReplayingDecoderBuffer:order(ByteOrder) to listOf(ReplayingDecoderBuffer:order(), SwappedByteBuf:<init>(ByteBuf)),
		ReplayingDecoderBuffer:isReadable() to listOf(ByteBuf:isReadable()),
		ReplayingDecoderBuffer:isReadable(int) to listOf(ByteBuf:isReadable(int)),
		ReplayingDecoderBuffer:readableBytes() to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex()),
		ReplayingDecoderBuffer:readBoolean() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBoolean()),
		ReplayingDecoderBuffer:readByte() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readByte()),
		ReplayingDecoderBuffer:readUnsignedByte() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedByte()),
		ReplayingDecoderBuffer:readBytes(byte[]-int-int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(byte[]-int-int)),
		ReplayingDecoderBuffer:readBytes(byte[]) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(byte[])),
		ReplayingDecoderBuffer:readBytes(ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readBytes(ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(ByteBuf-int-int)),
		ReplayingDecoderBuffer:readBytes(ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readBytes(ByteBuf) to listOf(ByteBuf:writableBytes(), ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(ByteBuf)),
		ReplayingDecoderBuffer:readBytes(GatheringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readBytes(int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readBytes(int)),
		ReplayingDecoderBuffer:readSlice(int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readSlice(int)),
		ReplayingDecoderBuffer:readBytes(OutputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:readerIndex() to listOf(ByteBuf:readerIndex()),
		ReplayingDecoderBuffer:readerIndex(int) to listOf(ByteBuf:readerIndex(int)),
		ReplayingDecoderBuffer:readInt() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readInt()),
		ReplayingDecoderBuffer:readUnsignedInt() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedInt()),
		ReplayingDecoderBuffer:readLong() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readLong()),
		ReplayingDecoderBuffer:readMedium() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readMedium()),
		ReplayingDecoderBuffer:readUnsignedMedium() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedMedium()),
		ReplayingDecoderBuffer:readShort() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readShort()),
		ReplayingDecoderBuffer:readUnsignedShort() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readUnsignedShort()),
		ReplayingDecoderBuffer:readChar() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readChar()),
		ReplayingDecoderBuffer:readFloat() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readFloat()),
		ReplayingDecoderBuffer:readDouble() to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:readDouble()),
		ReplayingDecoderBuffer:resetReaderIndex() to listOf(ByteBuf:resetReaderIndex()),
		ReplayingDecoderBuffer:resetWriterIndex() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBoolean(int-boolean) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setByte(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-byte[]-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-byte[]) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-InputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setZero(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setBytes(int-ScatteringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setIndex(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setInt(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setLong(int-long) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setMedium(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setShort(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setChar(int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setFloat(int-float) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:setDouble(int-double) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:skipBytes(int) to listOf(ReplayingDecoderBuffer:checkReadableBytes(int), ByteBuf:skipBytes(int)),
		ReplayingDecoderBuffer:slice() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:slice(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:slice(int-int)),
		ReplayingDecoderBuffer:nioBufferCount() to listOf(ByteBuf:nioBufferCount()),
		ReplayingDecoderBuffer:nioBuffer() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:nioBuffer(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:nioBuffer(int-int)),
		ReplayingDecoderBuffer:nioBuffers() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:nioBuffers(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:nioBuffers(int-int)),
		ReplayingDecoderBuffer:internalNioBuffer(int-int) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:internalNioBuffer(int-int)),
		ReplayingDecoderBuffer:toString(int-int-Charset) to listOf(ReplayingDecoderBuffer:checkIndex(int-int), ByteBuf:toString(int-int-Charset)),
		ReplayingDecoderBuffer:toString(Charset) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:toString() to listOf(ReplayingDecoderBuffer:readerIndex(), ReplayingDecoderBuffer:writerIndex()),
		ReplayingDecoderBuffer:writeBoolean(boolean) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeByte(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(byte[]-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(byte[]) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuffer) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuf-int-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuf-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ByteBuf) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(InputStream-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeBytes(ScatteringByteChannel-int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeInt(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeLong(long) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeMedium(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeZero(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writerIndex() to listOf(ByteBuf:writerIndex()),
		ReplayingDecoderBuffer:writerIndex(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeShort(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeChar(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeFloat(float) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:writeDouble(double) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:checkIndex(int-int) to listOf(ByteBuf:writerIndex()),
		ReplayingDecoderBuffer:checkReadableBytes(int) to listOf(ByteBuf:readableBytes()),
		ReplayingDecoderBuffer:discardSomeReadBytes() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:refCnt() to listOf(ByteBuf:refCnt()),
		ReplayingDecoderBuffer:retain() to listOf(ReplayingDecoderBuffer:reject(), ReplayingDecoderBuffer:retain()),
		ReplayingDecoderBuffer:retain(int) to listOf(ReplayingDecoderBuffer:reject(), ReplayingDecoderBuffer:retain(int)),
		ReplayingDecoderBuffer:release() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:release(int) to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:unwrap() to listOf(ReplayingDecoderBuffer:reject()),
		ReplayingDecoderBuffer:compareTo(Object) to listOf(ReplayingDecoderBuffer:compareTo(ByteBuf)),
		ReplayingDecoderBuffer:<clinit>() to listOf(ReplayingDecoderBuffer:<init>(ByteBuf), ReplayingDecoderBuffer:terminate()),
		RtspMethods:valueOf(String) to listOf(HttpMethod:<init>(String)),
		RtspMethods:<clinit>() to listOf(HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:<init>(String), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString(), HttpMethod:toString()),
		RtspObjectDecoder:<init>() to listOf(RtspObjectDecoder:<init>(int-int-int)),
		RtspObjectDecoder:<init>(int-int-int) to listOf(HttpObjectDecoder:<init>(int-int-int-boolean)),
		RtspObjectDecoder:isContentAlwaysEmpty(HttpMessage) to listOf(HttpObjectDecoder:isContentAlwaysEmpty(HttpMessage), HttpMessage:headers(), HttpHeaders:contains(String)),
		RtspObjectEncoder:<init>() to listOf(HttpObjectEncoder:<init>()),
		RtspRequestDecoder:<init>() to listOf(RtspObjectDecoder:<init>()),
		RtspRequestDecoder:<init>(int-int-int) to listOf(RtspObjectDecoder:<init>(int-int-int)),
		RtspRequestDecoder:createMessage(String[]) to listOf(RtspVersions:valueOf(String), RtspMethods:valueOf(String), DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String)),
		RtspRequestDecoder:createInvalidMessage() to listOf(DefaultHttpRequest:<init>(HttpVersion-HttpMethod-String)),
		RtspRequestEncoder:<init>() to listOf(RtspObjectEncoder:<init>()),
		RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest) to listOf(HttpRequest:getMethod(), HttpMethod:toString(), RtspRequestEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeByte(int), HttpRequest:getUri(), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), HttpRequest:getProtocolVersion(), HttpVersion:toString(), RtspRequestEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeBytes(byte[])),
		RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(RtspRequestEncoder:encodeInitialLine(ByteBuf-HttpRequest)),
		RtspResponseDecoder:<init>() to listOf(RtspObjectDecoder:<init>()),
		RtspResponseDecoder:<init>(int-int-int) to listOf(RtspObjectDecoder:<init>(int-int-int)),
		RtspResponseDecoder:createMessage(String[]) to listOf(RtspVersions:valueOf(String), HttpResponseStatus:<init>(int-String), DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus)),
		RtspResponseDecoder:createInvalidMessage() to listOf(DefaultHttpResponse:<init>(HttpVersion-HttpResponseStatus)),
		RtspResponseDecoder:<clinit>() to listOf(HttpResponseStatus:<init>(int-String)),
		RtspResponseEncoder:<init>() to listOf(RtspObjectEncoder:<init>()),
		RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse) to listOf(HttpResponse:getProtocolVersion(), HttpVersion:toString(), RtspResponseEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeByte(int), HttpResponse:getStatus(), HttpResponseStatus:code(), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), HttpResponse:getStatus(), HttpResponseStatus:reasonPhrase(), RtspResponseEncoder:encodeAscii(String-ByteBuf), ByteBuf:writeBytes(byte[])),
		RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpMessage) to listOf(RtspResponseEncoder:encodeInitialLine(ByteBuf-HttpResponse)),
		RtspResponseStatuses:valueOf(int) to listOf(HttpResponseStatus:valueOf(int)),
		RtspResponseStatuses:<clinit>() to listOf(HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String), HttpResponseStatus:<init>(int-String)),
		RtspVersions:valueOf(String) to listOf(HttpVersion:<init>(String-boolean)),
		RtspVersions:<clinit>() to listOf(HttpVersion:<init>(String-int-int-boolean)),
		SctpInboundByteStreamHandler:<init>(int-int) to listOf(MessageToMessageDecoder:<init>()),
		SctpInboundByteStreamHandler:acceptInboundMessage(Object) to listOf(MessageToMessageDecoder:acceptInboundMessage(Object), SctpInboundByteStreamHandler:acceptInboundMessage(SctpMessage)),
		SctpInboundByteStreamHandler:acceptInboundMessage(SctpMessage) to listOf(SctpMessage:protocolIdentifier(), SctpMessage:streamIdentifier()),
		SctpInboundByteStreamHandler:decode(ChannelHandlerContext-SctpMessage-List) to listOf(SctpMessage:isComplete(), CodecException:<init>(String), SctpMessage:content(), ByteBuf:retain()),
		SctpInboundByteStreamHandler:decode(ChannelHandlerContext-Object-List) to listOf(SctpInboundByteStreamHandler:decode(ChannelHandlerContext-SctpMessage-List)),
		SctpMessageCompletionHandler:<init>() to listOf(MessageToMessageDecoder:<init>()),
		SctpMessageCompletionHandler:decode(ChannelHandlerContext-SctpMessage-List) to listOf(SctpMessage:content(), SctpMessage:protocolIdentifier(), SctpMessage:streamIdentifier(), SctpMessage:isComplete(), ByteBuf:isReadable(), ByteBuf:isReadable(), Unpooled:wrappedBuffer(ByteBuf[]), ByteBuf:isReadable(), Unpooled:wrappedBuffer(ByteBuf[]), SctpMessage:<init>(int-int-ByteBuf), ByteBuf:retain()),
		SctpMessageCompletionHandler:decode(ChannelHandlerContext-Object-List) to listOf(SctpMessageCompletionHandler:decode(ChannelHandlerContext-SctpMessage-List)),
		SctpMessageToMessageDecoder:<init>() to listOf(MessageToMessageDecoder:<init>()),
		SctpMessageToMessageDecoder:acceptInboundMessage(Object) to listOf(SctpMessage:isComplete(), CodecException:<init>(String)),
		SctpOutboundByteStreamHandler:<init>(int-int) to listOf(MessageToMessageEncoder:<init>()),
		SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:retain(), SctpMessage:<init>(int-int-ByteBuf)),
		SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-Object-List) to listOf(SctpOutboundByteStreamHandler:encode(ChannelHandlerContext-ByteBuf-List)),
		CachingClassResolver:resolve(String) to listOf(ClassResolver:resolve(String)),
		ClassResolvers:cacheDisabled(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader)),
		ClassResolvers:weakCachingResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), WeakReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		ClassResolvers:softCachingResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), SoftReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		ClassResolvers:weakCachingConcurrentResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), PlatformDependent:newConcurrentHashMap(), WeakReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		ClassResolvers:softCachingConcurrentResolver(ClassLoader) to listOf(ClassResolvers:defaultClassLoader(ClassLoader), ClassLoaderClassResolver:<init>(ClassLoader), PlatformDependent:newConcurrentHashMap(), SoftReferenceMap:<init>(Map), CachingClassResolver:<init>(ClassResolver-Map)),
		CompactObjectInputStream:readStreamHeader() to listOf(CompactObjectInputStream:readByte()),
		CompactObjectInputStream:readClassDescriptor() to listOf(CompactObjectInputStream:read(), CompactObjectInputStream:readUTF(), ClassResolver:resolve(String)),
		CompactObjectInputStream:resolveClass(ObjectStreamClass) to listOf(ClassResolver:resolve(String)),
		CompactObjectOutputStream:writeStreamHeader() to listOf(CompactObjectOutputStream:writeByte(int)),
		CompactObjectOutputStream:writeClassDescriptor(ObjectStreamClass) to listOf(CompactObjectOutputStream:write(int), CompactObjectOutputStream:write(int), CompactObjectOutputStream:writeUTF(String)),
		CompatibleObjectEncoder:<init>() to listOf(CompatibleObjectEncoder:<init>(int)),
		CompatibleObjectEncoder:<init>(int) to listOf(MessageToByteEncoder:<init>()),
		CompatibleObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get(), ByteBufOutputStream:<init>(ByteBuf), CompatibleObjectEncoder:newObjectOutputStream(OutputStream), Attribute:setIfAbsent(Object)),
		CompatibleObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(CompatibleObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf)),
		CompatibleObjectEncoder:<clinit>() to listOf(AttributeKey:<init>(String)),
		ObjectDecoder:<init>(ClassResolver) to listOf(ObjectDecoder:<init>(int-ClassResolver)),
		ObjectDecoder:<init>(int-ClassResolver) to listOf(LengthFieldBasedFrameDecoder:<init>(int-int-int-int-int)),
		ObjectDecoder:decode(ChannelHandlerContext-ByteBuf) to listOf(LengthFieldBasedFrameDecoder:decode(ChannelHandlerContext-ByteBuf), ByteBufInputStream:<init>(ByteBuf), CompactObjectInputStream:<init>(InputStream-ClassResolver), CompactObjectInputStream:readObject()),
		ObjectDecoder:extractFrame(ChannelHandlerContext-ByteBuf-int-int) to listOf(ByteBuf:slice(int-int)),
		ObjectDecoderInputStream:<init>(InputStream) to listOf(ObjectDecoderInputStream:<init>(InputStream-ClassLoader)),
		ObjectDecoderInputStream:<init>(InputStream-ClassLoader) to listOf(ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int)),
		ObjectDecoderInputStream:<init>(InputStream-int) to listOf(ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int)),
		ObjectDecoderInputStream:<init>(InputStream-ClassLoader-int) to listOf(ClassResolvers:weakCachingResolver(ClassLoader)),
		ObjectDecoderInputStream:readObject() to listOf(ObjectDecoderInputStream:readInt(), CompactObjectInputStream:<init>(InputStream-ClassResolver), CompactObjectInputStream:readObject()),
		ObjectEncoder:<init>() to listOf(MessageToByteEncoder:<init>()),
		ObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBufOutputStream:<init>(ByteBuf), ByteBufOutputStream:write(byte[]), CompactObjectOutputStream:<init>(OutputStream), ByteBuf:writerIndex(), ByteBuf:setInt(int-int)),
		ObjectEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(ObjectEncoder:encode(ChannelHandlerContext-Serializable-ByteBuf)),
		ObjectEncoderOutputStream:<init>(OutputStream) to listOf(ObjectEncoderOutputStream:<init>(OutputStream-int)),
		ObjectEncoderOutputStream:writeObject(Object) to listOf(Unpooled:buffer(int), ByteBufOutputStream:<init>(ByteBuf), CompactObjectOutputStream:<init>(OutputStream), ByteBufOutputStream:buffer(), ByteBuf:readableBytes(), ObjectEncoderOutputStream:writeInt(int), ByteBuf:getBytes(int-OutputStream-int)),
		ReferenceMap:get(Object) to listOf(ReferenceMap:unfold(Reference)),
		ReferenceMap:put(Object-Object) to listOf(ReferenceMap:fold(Object), ReferenceMap:unfold(Reference)),
		ReferenceMap:remove(Object) to listOf(ReferenceMap:unfold(Reference)),
		ReferenceMap:putAll(Map) to listOf(ReferenceMap:fold(Object)),
		SoftReferenceMap:<init>(Map) to listOf(ReferenceMap:<init>(Map)),
		WeakReferenceMap:<init>(Map) to listOf(ReferenceMap:<init>(Map)),
		SocksAddressType:values() to listOf(SocksAddressType[]:clone()),
		SocksAddressType:fromByte(byte) to listOf(SocksAddressType:values()),
		SocksAddressType:<clinit>() to listOf(SocksAddressType:<init>(String-int-byte), SocksAddressType:<init>(String-int-byte), SocksAddressType:<init>(String-int-byte), SocksAddressType:<init>(String-int-byte)),
		SocksAuthRequest:<init>(String-String) to listOf(SocksRequest:<init>(SocksRequestType)),
		SocksAuthRequest:encodeAsByteBuf(ByteBuf) to listOf(SocksSubnegotiationVersion:byteValue(), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), ByteBuf:writeBytes(byte[])),
		SocksAuthRequest:<clinit>() to listOf(CharsetUtil:getEncoder(Charset)),
		SocksAuthRequestDecoder$1:<clinit>() to listOf(SocksAuthRequestDecoder$State:values(), SocksAuthRequestDecoder$State:ordinal(), SocksAuthRequestDecoder$State:ordinal(), SocksAuthRequestDecoder$State:ordinal()),
		SocksAuthRequestDecoder$State:values() to listOf(SocksAuthRequestDecoder$State[]:clone()),
		SocksAuthRequestDecoder$State:<clinit>() to listOf(SocksAuthRequestDecoder$State:<init>(String-int), SocksAuthRequestDecoder$State:<init>(String-int), SocksAuthRequestDecoder$State:<init>(String-int)),
		SocksAuthRequestDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		SocksAuthRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SocksAuthRequestDecoder:state(), SocksAuthRequestDecoder$State:ordinal(), ByteBuf:readByte(), SocksSubnegotiationVersion:fromByte(byte), SocksAuthRequestDecoder:checkpoint(Object), ByteBuf:readByte(), ByteBuf:readBytes(int), ByteBuf:toString(Charset), SocksAuthRequestDecoder:checkpoint(Object), ByteBuf:readByte(), ByteBuf:readBytes(int), ByteBuf:toString(Charset), SocksAuthRequest:<init>(String-String), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		SocksAuthResponse:<init>(SocksAuthStatus) to listOf(SocksResponse:<init>(SocksResponseType)),
		SocksAuthResponse:encodeAsByteBuf(ByteBuf) to listOf(SocksSubnegotiationVersion:byteValue(), ByteBuf:writeByte(int), SocksAuthStatus:byteValue(), ByteBuf:writeByte(int)),
		SocksAuthResponseDecoder$1:<clinit>() to listOf(SocksAuthResponseDecoder$State:values(), SocksAuthResponseDecoder$State:ordinal(), SocksAuthResponseDecoder$State:ordinal()),
		SocksAuthResponseDecoder$State:values() to listOf(SocksAuthResponseDecoder$State[]:clone()),
		SocksAuthResponseDecoder$State:<clinit>() to listOf(SocksAuthResponseDecoder$State:<init>(String-int), SocksAuthResponseDecoder$State:<init>(String-int)),
		SocksAuthResponseDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		SocksAuthResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SocksAuthResponseDecoder:state(), SocksAuthResponseDecoder$State:ordinal(), ByteBuf:readByte(), SocksSubnegotiationVersion:fromByte(byte), SocksAuthResponseDecoder:checkpoint(Object), ByteBuf:readByte(), SocksAuthStatus:fromByte(byte), SocksAuthResponse:<init>(SocksAuthStatus), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		SocksAuthScheme:values() to listOf(SocksAuthScheme[]:clone()),
		SocksAuthScheme:fromByte(byte) to listOf(SocksAuthScheme:values()),
		SocksAuthScheme:<clinit>() to listOf(SocksAuthScheme:<init>(String-int-byte), SocksAuthScheme:<init>(String-int-byte), SocksAuthScheme:<init>(String-int-byte), SocksAuthScheme:<init>(String-int-byte)),
		SocksAuthStatus:values() to listOf(SocksAuthStatus[]:clone()),
		SocksAuthStatus:fromByte(byte) to listOf(SocksAuthStatus:values()),
		SocksAuthStatus:<clinit>() to listOf(SocksAuthStatus:<init>(String-int-byte), SocksAuthStatus:<init>(String-int-byte)),
		SocksCmdRequest$1:<clinit>() to listOf(SocksAddressType:values(), SocksAddressType:ordinal(), SocksAddressType:ordinal(), SocksAddressType:ordinal(), SocksAddressType:ordinal()),
		SocksCmdRequest:<init>(SocksCmdType-SocksAddressType-String-int) to listOf(SocksRequest:<init>(SocksRequestType), SocksAddressType:ordinal(), NetUtil:isValidIpV4Address(String), NetUtil:isValidIpV6Address(String)),
		SocksCmdRequest:encodeAsByteBuf(ByteBuf) to listOf(SocksCmdRequest:protocolVersion(), SocksProtocolVersion:byteValue(), ByteBuf:writeByte(int), SocksCmdType:byteValue(), ByteBuf:writeByte(int), ByteBuf:writeByte(int), SocksAddressType:byteValue(), ByteBuf:writeByte(int), SocksAddressType:ordinal(), NetUtil:createByteArrayFromIpAddressString(String), ByteBuf:writeBytes(byte[]), ByteBuf:writeShort(int), ByteBuf:writeByte(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeShort(int), NetUtil:createByteArrayFromIpAddressString(String), ByteBuf:writeBytes(byte[]), ByteBuf:writeShort(int)),
		SocksCmdRequestDecoder$1:<clinit>() to listOf(SocksCmdRequestDecoder$State:values(), SocksCmdRequestDecoder$State:ordinal(), SocksCmdRequestDecoder$State:ordinal(), SocksCmdRequestDecoder$State:ordinal(), SocksAddressType:values(), SocksAddressType:ordinal(), SocksAddressType:ordinal(), SocksAddressType:ordinal(), SocksAddressType:ordinal()),
		SocksCmdRequestDecoder$State:values() to listOf(SocksCmdRequestDecoder$State[]:clone()),
		SocksCmdRequestDecoder$State:<clinit>() to listOf(SocksCmdRequestDecoder$State:<init>(String-int), SocksCmdRequestDecoder$State:<init>(String-int), SocksCmdRequestDecoder$State:<init>(String-int)),
		SocksCmdRequestDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		SocksCmdRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SocksCmdRequestDecoder:state(), SocksCmdRequestDecoder$State:ordinal(), ByteBuf:readByte(), SocksProtocolVersion:fromByte(byte), SocksCmdRequestDecoder:checkpoint(Object), ByteBuf:readByte(), SocksCmdType:fromByte(byte), ByteBuf:readByte(), ByteBuf:readByte(), SocksAddressType:fromByte(byte), SocksCmdRequestDecoder:checkpoint(Object), SocksAddressType:ordinal(), ByteBuf:readInt(), SocksCommonUtils:intToIp(int), ByteBuf:readUnsignedShort(), SocksCmdRequest:<init>(SocksCmdType-SocksAddressType-String-int), ByteBuf:readByte(), ByteBuf:readBytes(int), ByteBuf:toString(Charset), ByteBuf:readUnsignedShort(), SocksCmdRequest:<init>(SocksCmdType-SocksAddressType-String-int), ByteBuf:readBytes(int), ByteBuf:array(), SocksCommonUtils:ipv6toStr(byte[]), ByteBuf:readUnsignedShort(), SocksCmdRequest:<init>(SocksCmdType-SocksAddressType-String-int), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		SocksCmdResponse$1:<clinit>() to listOf(SocksAddressType:values(), SocksAddressType:ordinal(), SocksAddressType:ordinal(), SocksAddressType:ordinal()),
		SocksCmdResponse:<init>(SocksCmdStatus-SocksAddressType) to listOf(SocksResponse:<init>(SocksResponseType)),
		SocksCmdResponse:encodeAsByteBuf(ByteBuf) to listOf(SocksCmdResponse:protocolVersion(), SocksProtocolVersion:byteValue(), ByteBuf:writeByte(int), SocksCmdStatus:byteValue(), ByteBuf:writeByte(int), ByteBuf:writeByte(int), SocksAddressType:byteValue(), ByteBuf:writeByte(int), SocksAddressType:ordinal(), ByteBuf:writeBytes(byte[]), ByteBuf:writeShort(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeShort(int), ByteBuf:writeBytes(byte[]), ByteBuf:writeShort(int)),
		SocksCmdResponseDecoder$1:<clinit>() to listOf(SocksCmdResponseDecoder$State:values(), SocksCmdResponseDecoder$State:ordinal(), SocksCmdResponseDecoder$State:ordinal(), SocksCmdResponseDecoder$State:ordinal(), SocksAddressType:values(), SocksAddressType:ordinal(), SocksAddressType:ordinal(), SocksAddressType:ordinal(), SocksAddressType:ordinal()),
		SocksCmdResponseDecoder$State:values() to listOf(SocksCmdResponseDecoder$State[]:clone()),
		SocksCmdResponseDecoder$State:<clinit>() to listOf(SocksCmdResponseDecoder$State:<init>(String-int), SocksCmdResponseDecoder$State:<init>(String-int), SocksCmdResponseDecoder$State:<init>(String-int)),
		SocksCmdResponseDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		SocksCmdResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SocksCmdResponseDecoder:state(), SocksCmdResponseDecoder$State:ordinal(), ByteBuf:readByte(), SocksProtocolVersion:fromByte(byte), SocksCmdResponseDecoder:checkpoint(Object), ByteBuf:readByte(), SocksCmdStatus:fromByte(byte), ByteBuf:readByte(), ByteBuf:readByte(), SocksAddressType:fromByte(byte), SocksCmdResponseDecoder:checkpoint(Object), SocksAddressType:ordinal(), ByteBuf:readInt(), SocksCommonUtils:intToIp(int), ByteBuf:readUnsignedShort(), SocksCmdResponse:<init>(SocksCmdStatus-SocksAddressType), ByteBuf:readByte(), ByteBuf:readBytes(int), ByteBuf:toString(Charset), ByteBuf:readUnsignedShort(), SocksCmdResponse:<init>(SocksCmdStatus-SocksAddressType), ByteBuf:readBytes(int), ByteBuf:array(), SocksCommonUtils:ipv6toStr(byte[]), ByteBuf:readUnsignedShort(), SocksCmdResponse:<init>(SocksCmdStatus-SocksAddressType), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		SocksCmdStatus:values() to listOf(SocksCmdStatus[]:clone()),
		SocksCmdStatus:fromByte(byte) to listOf(SocksCmdStatus:values()),
		SocksCmdStatus:<clinit>() to listOf(SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte), SocksCmdStatus:<init>(String-int-byte)),
		SocksCmdType:values() to listOf(SocksCmdType[]:clone()),
		SocksCmdType:fromByte(byte) to listOf(SocksCmdType:values()),
		SocksCmdType:<clinit>() to listOf(SocksCmdType:<init>(String-int-byte), SocksCmdType:<init>(String-int-byte), SocksCmdType:<init>(String-int-byte), SocksCmdType:<init>(String-int-byte)),
		SocksCommonUtils:ipv6toCompressedForm(byte[]) to listOf(SocksCommonUtils:ipv6toStr(byte[]), SocksCommonUtils:ipv6toStr(StringBuilder-byte[]-int-int), SocksCommonUtils:ipv6toStr(StringBuilder-byte[]-int-int)),
		SocksCommonUtils:ipv6toStr(byte[]) to listOf(SocksCommonUtils:ipv6toStr(StringBuilder-byte[]-int-int)),
		SocksCommonUtils:<clinit>() to listOf(UnknownSocksRequest:<init>(), UnknownSocksResponse:<init>()),
		SocksInitRequest:<init>(List) to listOf(SocksRequest:<init>(SocksRequestType)),
		SocksInitRequest:encodeAsByteBuf(ByteBuf) to listOf(SocksInitRequest:protocolVersion(), SocksProtocolVersion:byteValue(), ByteBuf:writeByte(int), ByteBuf:writeByte(int), SocksAuthScheme:byteValue(), ByteBuf:writeByte(int)),
		SocksInitRequestDecoder$1:<clinit>() to listOf(SocksInitRequestDecoder$State:values(), SocksInitRequestDecoder$State:ordinal(), SocksInitRequestDecoder$State:ordinal()),
		SocksInitRequestDecoder$State:values() to listOf(SocksInitRequestDecoder$State[]:clone()),
		SocksInitRequestDecoder$State:<clinit>() to listOf(SocksInitRequestDecoder$State:<init>(String-int), SocksInitRequestDecoder$State:<init>(String-int)),
		SocksInitRequestDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		SocksInitRequestDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SocksInitRequestDecoder:state(), SocksInitRequestDecoder$State:ordinal(), ByteBuf:readByte(), SocksProtocolVersion:fromByte(byte), SocksInitRequestDecoder:checkpoint(Object), ByteBuf:readByte(), ByteBuf:readByte(), SocksAuthScheme:fromByte(byte), SocksInitRequest:<init>(List), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		SocksInitResponse:<init>(SocksAuthScheme) to listOf(SocksResponse:<init>(SocksResponseType)),
		SocksInitResponse:encodeAsByteBuf(ByteBuf) to listOf(SocksInitResponse:protocolVersion(), SocksProtocolVersion:byteValue(), ByteBuf:writeByte(int), SocksAuthScheme:byteValue(), ByteBuf:writeByte(int)),
		SocksInitResponseDecoder$1:<clinit>() to listOf(SocksInitResponseDecoder$State:values(), SocksInitResponseDecoder$State:ordinal(), SocksInitResponseDecoder$State:ordinal()),
		SocksInitResponseDecoder$State:values() to listOf(SocksInitResponseDecoder$State[]:clone()),
		SocksInitResponseDecoder$State:<clinit>() to listOf(SocksInitResponseDecoder$State:<init>(String-int), SocksInitResponseDecoder$State:<init>(String-int)),
		SocksInitResponseDecoder:<init>() to listOf(ReplayingDecoder:<init>(Object)),
		SocksInitResponseDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SocksInitResponseDecoder:state(), SocksInitResponseDecoder$State:ordinal(), ByteBuf:readByte(), SocksProtocolVersion:fromByte(byte), SocksInitResponseDecoder:checkpoint(Object), ByteBuf:readByte(), SocksAuthScheme:fromByte(byte), SocksInitResponse:<init>(SocksAuthScheme), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler)),
		SocksMessageEncoder:<init>() to listOf(MessageToByteEncoder:<init>()),
		SocksMessageEncoder:encode(ChannelHandlerContext-SocksMessage-ByteBuf) to listOf(SocksMessage:encodeAsByteBuf(ByteBuf)),
		SocksMessageEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(SocksMessageEncoder:encode(ChannelHandlerContext-SocksMessage-ByteBuf)),
		SocksMessageType:values() to listOf(SocksMessageType[]:clone()),
		SocksMessageType:<clinit>() to listOf(SocksMessageType:<init>(String-int), SocksMessageType:<init>(String-int), SocksMessageType:<init>(String-int)),
		SocksProtocolVersion:values() to listOf(SocksProtocolVersion[]:clone()),
		SocksProtocolVersion:fromByte(byte) to listOf(SocksProtocolVersion:values()),
		SocksProtocolVersion:<clinit>() to listOf(SocksProtocolVersion:<init>(String-int-byte), SocksProtocolVersion:<init>(String-int-byte), SocksProtocolVersion:<init>(String-int-byte)),
		SocksRequest:<init>(SocksRequestType) to listOf(SocksMessage:<init>(SocksMessageType)),
		SocksRequestType:values() to listOf(SocksRequestType[]:clone()),
		SocksRequestType:<clinit>() to listOf(SocksRequestType:<init>(String-int), SocksRequestType:<init>(String-int), SocksRequestType:<init>(String-int), SocksRequestType:<init>(String-int)),
		SocksResponse:<init>(SocksResponseType) to listOf(SocksMessage:<init>(SocksMessageType)),
		SocksResponseType:values() to listOf(SocksResponseType[]:clone()),
		SocksResponseType:<clinit>() to listOf(SocksResponseType:<init>(String-int), SocksResponseType:<init>(String-int), SocksResponseType:<init>(String-int), SocksResponseType:<init>(String-int)),
		SocksSubnegotiationVersion:values() to listOf(SocksSubnegotiationVersion[]:clone()),
		SocksSubnegotiationVersion:fromByte(byte) to listOf(SocksSubnegotiationVersion:values()),
		SocksSubnegotiationVersion:<clinit>() to listOf(SocksSubnegotiationVersion:<init>(String-int-byte), SocksSubnegotiationVersion:<init>(String-int-byte)),
		UnknownSocksRequest:<init>() to listOf(SocksRequest:<init>(SocksRequestType)),
		UnknownSocksResponse:<init>() to listOf(SocksResponse:<init>(SocksResponseType)),
		DefaultSpdyDataFrame:<init>(int) to listOf(Unpooled:buffer(int), DefaultSpdyDataFrame:<init>(int-ByteBuf)),
		DefaultSpdyDataFrame:<init>(int-ByteBuf) to listOf(DefaultSpdyStreamFrame:<init>(int), DefaultSpdyDataFrame:validate(ByteBuf)),
		DefaultSpdyDataFrame:validate(ByteBuf) to listOf(ByteBuf:readableBytes()),
		DefaultSpdyDataFrame:setStreamId(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int), DefaultSpdyDataFrame:setStreamId(int)),
		DefaultSpdyDataFrame:setLast(boolean) to listOf(DefaultSpdyStreamFrame:setLast(boolean), DefaultSpdyDataFrame:setLast(boolean)),
		DefaultSpdyDataFrame:content() to listOf(ByteBuf:refCnt(), ByteBuf:refCnt(), IllegalReferenceCountException:<init>(int)),
		DefaultSpdyDataFrame:copy() to listOf(DefaultSpdyDataFrame:getStreamId(), DefaultSpdyDataFrame:content(), ByteBuf:copy(), DefaultSpdyDataFrame:<init>(int-ByteBuf), DefaultSpdyDataFrame:isLast(), SpdyDataFrame:setLast(boolean), DefaultSpdyDataFrame:copy()),
		DefaultSpdyDataFrame:duplicate() to listOf(DefaultSpdyDataFrame:getStreamId(), DefaultSpdyDataFrame:content(), ByteBuf:duplicate(), DefaultSpdyDataFrame:<init>(int-ByteBuf), DefaultSpdyDataFrame:isLast(), SpdyDataFrame:setLast(boolean), DefaultSpdyDataFrame:duplicate()),
		DefaultSpdyDataFrame:refCnt() to listOf(ByteBuf:refCnt()),
		DefaultSpdyDataFrame:retain() to listOf(ByteBuf:retain(), DefaultSpdyDataFrame:retain(), DefaultSpdyDataFrame:retain()),
		DefaultSpdyDataFrame:retain(int) to listOf(ByteBuf:retain(int), DefaultSpdyDataFrame:retain(int), DefaultSpdyDataFrame:retain(int)),
		DefaultSpdyDataFrame:release() to listOf(ByteBuf:release()),
		DefaultSpdyDataFrame:release(int) to listOf(ByteBuf:release(int)),
		DefaultSpdyDataFrame:toString() to listOf(DefaultSpdyDataFrame:isLast(), DefaultSpdyDataFrame:getStreamId(), DefaultSpdyDataFrame:refCnt(), DefaultSpdyDataFrame:content(), ByteBuf:readableBytes()),
		DefaultSpdyGoAwayFrame:<init>(int) to listOf(DefaultSpdyGoAwayFrame:<init>(int-int)),
		DefaultSpdyGoAwayFrame:<init>(int-int) to listOf(SpdySessionStatus:valueOf(int), DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus)),
		DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus) to listOf(DefaultSpdyGoAwayFrame:setLastGoodStreamId(int), DefaultSpdyGoAwayFrame:setStatus(SpdySessionStatus)),
		DefaultSpdyGoAwayFrame:toString() to listOf(DefaultSpdyGoAwayFrame:getLastGoodStreamId(), DefaultSpdyGoAwayFrame:getStatus(), SpdySessionStatus:toString()),
		DefaultSpdyHeaders$HeaderEntry:setValue(String) to listOf(SpdyCodecUtil:validateHeaderValue(String)),
		DefaultSpdyHeaders$HeaderEntry:setValue(Object) to listOf(DefaultSpdyHeaders$HeaderEntry:setValue(String)),
		DefaultSpdyHeaders$HeaderEntry:getValue() to listOf(DefaultSpdyHeaders$HeaderEntry:getValue()),
		DefaultSpdyHeaders$HeaderEntry:getKey() to listOf(DefaultSpdyHeaders$HeaderEntry:getKey()),
		DefaultSpdyHeaders:<init>() to listOf(SpdyHeaders:<init>(), DefaultSpdyHeaders$HeaderEntry:<init>(int-String-String)),
		DefaultSpdyHeaders:add(String-Object) to listOf(SpdyCodecUtil:validateHeaderName(String), DefaultSpdyHeaders:toString(Object), SpdyCodecUtil:validateHeaderValue(String), DefaultSpdyHeaders:hash(String), DefaultSpdyHeaders:index(int), DefaultSpdyHeaders:add0(int-int-String-String)),
		DefaultSpdyHeaders:add0(int-int-String-String) to listOf(DefaultSpdyHeaders$HeaderEntry:<init>(int-String-String), DefaultSpdyHeaders$HeaderEntry:addBefore(DefaultSpdyHeaders$HeaderEntry)),
		DefaultSpdyHeaders:remove(String) to listOf(DefaultSpdyHeaders:hash(String), DefaultSpdyHeaders:index(int), DefaultSpdyHeaders:remove0(int-int-String)),
		DefaultSpdyHeaders:remove0(int-int-String) to listOf(DefaultSpdyHeaders:eq(String-String), DefaultSpdyHeaders$HeaderEntry:remove(), DefaultSpdyHeaders:eq(String-String), DefaultSpdyHeaders$HeaderEntry:remove()),
		DefaultSpdyHeaders:set(String-Object) to listOf(SpdyCodecUtil:validateHeaderName(String), DefaultSpdyHeaders:toString(Object), SpdyCodecUtil:validateHeaderValue(String), DefaultSpdyHeaders:hash(String), DefaultSpdyHeaders:index(int), DefaultSpdyHeaders:remove0(int-int-String), DefaultSpdyHeaders:add0(int-int-String-String)),
		DefaultSpdyHeaders:set(String-Iterable) to listOf(SpdyCodecUtil:validateHeaderName(String), DefaultSpdyHeaders:hash(String), DefaultSpdyHeaders:index(int), DefaultSpdyHeaders:remove0(int-int-String), DefaultSpdyHeaders:toString(Object), SpdyCodecUtil:validateHeaderValue(String), DefaultSpdyHeaders:add0(int-int-String-String)),
		DefaultSpdyHeaders:get(String) to listOf(DefaultSpdyHeaders:hash(String), DefaultSpdyHeaders:index(int), DefaultSpdyHeaders:eq(String-String)),
		DefaultSpdyHeaders:getAll(String) to listOf(DefaultSpdyHeaders:hash(String), DefaultSpdyHeaders:index(int), DefaultSpdyHeaders:eq(String-String)),
		DefaultSpdyHeaders:contains(String) to listOf(DefaultSpdyHeaders:get(String)),
		DefaultSpdyHeaders:add(String-Iterable) to listOf(SpdyCodecUtil:validateHeaderValue(String), DefaultSpdyHeaders:hash(String), DefaultSpdyHeaders:index(int), DefaultSpdyHeaders:toString(Object), SpdyCodecUtil:validateHeaderValue(String), DefaultSpdyHeaders:add0(int-int-String-String)),
		DefaultSpdyHeaders:isEmpty() to listOf(DefaultSpdyHeaders:entries()),
		DefaultSpdyHeadersFrame:<init>(int) to listOf(DefaultSpdyStreamFrame:<init>(int), DefaultSpdyHeaders:<init>()),
		DefaultSpdyHeadersFrame:setStreamId(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int), DefaultSpdyHeadersFrame:setStreamId(int)),
		DefaultSpdyHeadersFrame:setLast(boolean) to listOf(DefaultSpdyStreamFrame:setLast(boolean), DefaultSpdyHeadersFrame:setLast(boolean)),
		DefaultSpdyHeadersFrame:toString() to listOf(DefaultSpdyHeadersFrame:isLast(), DefaultSpdyHeadersFrame:getStreamId(), DefaultSpdyHeadersFrame:appendHeaders(StringBuilder)),
		DefaultSpdyHeadersFrame:appendHeaders(StringBuilder) to listOf(DefaultSpdyHeadersFrame:headers(), SpdyHeaders:entries()),
		DefaultSpdyPingFrame:<init>(int) to listOf(DefaultSpdyPingFrame:setId(int)),
		DefaultSpdyPingFrame:toString() to listOf(DefaultSpdyPingFrame:getId()),
		DefaultSpdyRstStreamFrame:<init>(int-int) to listOf(SpdyStreamStatus:valueOf(int), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus)),
		DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus) to listOf(DefaultSpdyStreamFrame:<init>(int), DefaultSpdyRstStreamFrame:setStatus(SpdyStreamStatus)),
		DefaultSpdyRstStreamFrame:setStreamId(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int), DefaultSpdyRstStreamFrame:setStreamId(int)),
		DefaultSpdyRstStreamFrame:setLast(boolean) to listOf(DefaultSpdyStreamFrame:setLast(boolean), DefaultSpdyRstStreamFrame:setLast(boolean)),
		DefaultSpdyRstStreamFrame:toString() to listOf(DefaultSpdyRstStreamFrame:getStreamId(), DefaultSpdyRstStreamFrame:getStatus(), SpdyStreamStatus:toString()),
		DefaultSpdySettingsFrame:getValue(int) to listOf(DefaultSpdySettingsFrame$Setting:getValue()),
		DefaultSpdySettingsFrame:setValue(int-int) to listOf(DefaultSpdySettingsFrame:setValue(int-int-boolean-boolean)),
		DefaultSpdySettingsFrame:setValue(int-int-boolean-boolean) to listOf(DefaultSpdySettingsFrame$Setting:setValue(int), DefaultSpdySettingsFrame$Setting:setPersist(boolean), DefaultSpdySettingsFrame$Setting:setPersisted(boolean), DefaultSpdySettingsFrame$Setting:<init>(int-boolean-boolean)),
		DefaultSpdySettingsFrame:isPersistValue(int) to listOf(DefaultSpdySettingsFrame$Setting:isPersist()),
		DefaultSpdySettingsFrame:setPersistValue(int-boolean) to listOf(DefaultSpdySettingsFrame$Setting:setPersist(boolean)),
		DefaultSpdySettingsFrame:isPersisted(int) to listOf(DefaultSpdySettingsFrame$Setting:isPersisted()),
		DefaultSpdySettingsFrame:setPersisted(int-boolean) to listOf(DefaultSpdySettingsFrame$Setting:setPersisted(boolean)),
		DefaultSpdySettingsFrame:appendSettings(StringBuilder) to listOf(DefaultSpdySettingsFrame:getSettings(), DefaultSpdySettingsFrame$Setting:getValue(), DefaultSpdySettingsFrame$Setting:isPersist(), DefaultSpdySettingsFrame$Setting:isPersisted()),
		DefaultSpdySettingsFrame:toString() to listOf(DefaultSpdySettingsFrame:appendSettings(StringBuilder)),
		DefaultSpdyStreamFrame:<init>(int) to listOf(DefaultSpdyStreamFrame:setStreamId(int)),
		DefaultSpdySynReplyFrame:<init>(int) to listOf(DefaultSpdyHeadersFrame:<init>(int)),
		DefaultSpdySynReplyFrame:setStreamId(int) to listOf(DefaultSpdyHeadersFrame:setStreamId(int), DefaultSpdySynReplyFrame:setStreamId(int), DefaultSpdySynReplyFrame:setStreamId(int)),
		DefaultSpdySynReplyFrame:setLast(boolean) to listOf(DefaultSpdyHeadersFrame:setLast(boolean), DefaultSpdySynReplyFrame:setLast(boolean), DefaultSpdySynReplyFrame:setLast(boolean)),
		DefaultSpdySynReplyFrame:setInvalid() to listOf(DefaultSpdyHeadersFrame:setInvalid(), DefaultSpdySynReplyFrame:setInvalid()),
		DefaultSpdySynReplyFrame:toString() to listOf(DefaultSpdySynReplyFrame:isLast(), DefaultSpdySynReplyFrame:getStreamId(), DefaultSpdySynReplyFrame:appendHeaders(StringBuilder)),
		DefaultSpdySynStreamFrame:<init>(int-int-byte) to listOf(DefaultSpdyHeadersFrame:<init>(int), DefaultSpdySynStreamFrame:setAssociatedToStreamId(int), DefaultSpdySynStreamFrame:setPriority(byte)),
		DefaultSpdySynStreamFrame:setStreamId(int) to listOf(DefaultSpdyHeadersFrame:setStreamId(int), DefaultSpdySynStreamFrame:setStreamId(int), DefaultSpdySynStreamFrame:setStreamId(int)),
		DefaultSpdySynStreamFrame:setLast(boolean) to listOf(DefaultSpdyHeadersFrame:setLast(boolean), DefaultSpdySynStreamFrame:setLast(boolean), DefaultSpdySynStreamFrame:setLast(boolean)),
		DefaultSpdySynStreamFrame:setInvalid() to listOf(DefaultSpdyHeadersFrame:setInvalid(), DefaultSpdySynStreamFrame:setInvalid()),
		DefaultSpdySynStreamFrame:toString() to listOf(DefaultSpdySynStreamFrame:isLast(), DefaultSpdySynStreamFrame:isUnidirectional(), DefaultSpdySynStreamFrame:getStreamId(), DefaultSpdySynStreamFrame:getAssociatedToStreamId(), DefaultSpdySynStreamFrame:getPriority(), DefaultSpdySynStreamFrame:appendHeaders(StringBuilder)),
		DefaultSpdyWindowUpdateFrame:<init>(int-int) to listOf(DefaultSpdyWindowUpdateFrame:setStreamId(int), DefaultSpdyWindowUpdateFrame:setDeltaWindowSize(int)),
		DefaultSpdyWindowUpdateFrame:toString() to listOf(DefaultSpdyWindowUpdateFrame:getStreamId(), DefaultSpdyWindowUpdateFrame:getDeltaWindowSize()),
		SpdyCodecUtil:getUnsignedShort(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyCodecUtil:getUnsignedMedium(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyCodecUtil:getUnsignedInt(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyCodecUtil:getSignedInt(ByteBuf-int) to listOf(ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int), ByteBuf:getByte(int)),
		SpdyFrameCodec:<init>(int) to listOf(SpdyFrameCodec:<init>(int-int-int-int-int-int)),
		SpdyFrameCodec:<init>(int-int-int-int-int-int) to listOf(SpdyFrameDecoder:<init>(int-int-int), SpdyFrameEncoder:<init>(int-int-int-int), CombinedChannelDuplexHandler:<init>(ChannelInboundHandler-ChannelOutboundHandler)),
		SpdyFrameDecoder$1:<clinit>() to listOf(SpdyFrameDecoder$State:values(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder$State:ordinal()),
		SpdyFrameDecoder$State:values() to listOf(SpdyFrameDecoder$State[]:clone()),
		SpdyFrameDecoder$State:<clinit>() to listOf(SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int), SpdyFrameDecoder$State:<init>(String-int)),
		SpdyFrameDecoder:<init>(int) to listOf(SpdyFrameDecoder:<init>(int-int-int)),
		SpdyFrameDecoder:<init>(int-int-int) to listOf(SpdyHeaderBlockDecoder:newInstance(int-int), SpdyFrameDecoder:<init>(int-int-SpdyHeaderBlockDecoder)),
		SpdyFrameDecoder:<init>(int-int-SpdyHeaderBlockDecoder) to listOf(ByteToMessageDecoder:<init>()),
		SpdyFrameDecoder:decodeLast(ChannelHandlerContext-ByteBuf-List) to listOf(SpdyFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List), SpdyHeaderBlockDecoder:end(), SpdyHeaderBlockDecoder:end()),
		SpdyFrameDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(SpdyFrameDecoder$State:ordinal(), SpdyFrameDecoder:readCommonHeader(ByteBuf), SpdyFrameDecoder:fireProtocolException(ChannelHandlerContext-String), SpdyFrameDecoder:fireInvalidFrameException(ChannelHandlerContext), DefaultSpdyDataFrame:<init>(int), SpdyDataFrame:setLast(boolean), SpdyFrameDecoder:readControlFrame(ByteBuf), SpdyFrameDecoder:fireInvalidFrameException(ChannelHandlerContext), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:skipBytes(int), SpdyFrameDecoder:fireInvalidFrameException(ChannelHandlerContext), DefaultSpdySettingsFrame:<init>(), SpdySettingsFrame:setClearPreviouslyPersistedSettings(boolean), ByteBuf:readableBytes(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readByte(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedMedium(ByteBuf-int), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int), SpdyFrameDecoder:fireInvalidFrameException(ChannelHandlerContext), SpdySettingsFrame:isSet(int), SpdySettingsFrame:setValue(int-int-boolean-boolean), SpdyFrameDecoder:readHeaderBlockFrame(ByteBuf), SpdyFrameDecoder:fireInvalidFrameException(ChannelHandlerContext), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:slice(int-int), SpdyHeaderBlockDecoder:decode(ByteBuf-SpdyHeadersFrame), ChannelHandlerContext:fireExceptionCaught(Throwable), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), SpdyHeadersFrame:isInvalid(), SpdyHeadersFrame:isTruncated(), SpdyHeaderBlockDecoder:reset(), SpdyHeaderBlockDecoder:reset(), SpdyFrameDecoder:fireProtocolException(ChannelHandlerContext-String), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuf-int), DefaultSpdyDataFrame:<init>(int-ByteBuf), SpdyDataFrame:setLast(boolean), ByteBuf:readableBytes(), ByteBuf:skipBytes(int), ByteBuf:readableBytes(), ByteBuf:skipBytes(int)),
		SpdyFrameDecoder:readCommonHeader(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:skipBytes(int), ByteBuf:getByte(int), ByteBuf:getByte(int), SpdyCodecUtil:getUnsignedMedium(ByteBuf-int), SpdyCodecUtil:getUnsignedShort(ByteBuf-int), SpdyCodecUtil:getUnsignedShort(ByteBuf-int), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), SpdyFrameDecoder:isValidFrameHeader(), SpdyFrameDecoder:willGenerateFrame()),
		SpdyFrameDecoder:readControlFrame(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int), DefaultSpdyRstStreamFrame:<init>(int-int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int), DefaultSpdyPingFrame:<init>(int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:skipBytes(int), DefaultSpdyGoAwayFrame:<init>(int), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int), DefaultSpdyGoAwayFrame:<init>(int-int), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:skipBytes(int), DefaultSpdyWindowUpdateFrame:<init>(int-int)),
		SpdyFrameDecoder:readHeaderBlockFrame(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:getByte(int), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:getShort(int), ByteBuf:skipBytes(int), DefaultSpdySynStreamFrame:<init>(int-int-byte), SpdySynStreamFrame:setLast(boolean), SpdySynStreamFrame:setUnidirectional(boolean), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:skipBytes(int), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:getShort(int), ByteBuf:skipBytes(int), DefaultSpdySynReplyFrame:<init>(int), SpdySynReplyFrame:setLast(boolean), ByteBuf:readableBytes(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedInt(ByteBuf-int), ByteBuf:skipBytes(int), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), ByteBuf:getShort(int), ByteBuf:skipBytes(int), DefaultSpdyHeadersFrame:<init>(int), SpdyHeadersFrame:setLast(boolean)),
		SpdyFrameDecoder:fireInvalidFrameException(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable)),
		SpdyFrameDecoder:fireProtocolException(ChannelHandlerContext-String) to listOf(SpdyProtocolException:<init>(String), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		SpdyFrameDecoder:<clinit>() to listOf(SpdyProtocolException:<init>(String)),
		SpdyFrameEncoder$1:operationComplete(ChannelFuture) to listOf(SpdyFrameEncoder:access$000(SpdyFrameEncoder), SpdyFrameEncoder:access$000(SpdyFrameEncoder), SpdyHeaderBlockEncoder:end()),
		SpdyFrameEncoder$1:operationComplete(Future) to listOf(SpdyFrameEncoder$1:operationComplete(ChannelFuture)),
		SpdyFrameEncoder:<init>(int) to listOf(SpdyFrameEncoder:<init>(int-int-int-int)),
		SpdyFrameEncoder:<init>(int-int-int-int) to listOf(SpdyHeaderBlockEncoder:newInstance(int-int-int-int), SpdyFrameEncoder:<init>(int-SpdyHeaderBlockEncoder)),
		SpdyFrameEncoder:<init>(int-SpdyHeaderBlockEncoder) to listOf(MessageToByteEncoder:<init>()),
		SpdyFrameEncoder:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:closeFuture(), SpdyFrameEncoder$1:<init>(SpdyFrameEncoder), ChannelFuture:addListener(GenericFutureListener)),
		SpdyFrameEncoder:encode(ChannelHandlerContext-SpdyFrame-ByteBuf) to listOf(SpdyDataFrame:content(), SpdyDataFrame:isLast(), ByteBuf:readableBytes(), ByteBuf:ensureWritable(int), SpdyDataFrame:getStreamId(), ByteBuf:writeInt(int), ByteBuf:writeByte(int), ByteBuf:readableBytes(), ByteBuf:writeMedium(int), ByteBuf:readerIndex(), ByteBuf:readableBytes(), ByteBuf:writeBytes(ByteBuf-int-int), SpdyHeaderBlockEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), SpdySynStreamFrame:isLast(), SpdySynStreamFrame:isUnidirectional(), ByteBuf:readableBytes(), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int), SpdySynStreamFrame:getStreamId(), ByteBuf:writeInt(int), SpdySynStreamFrame:getAssociatedToStreamId(), ByteBuf:writeInt(int), SpdySynStreamFrame:getPriority(), ByteBuf:writeShort(int), SpdySynStreamFrame:getPriority(), ByteBuf:writeShort(int), ByteBuf:readableBytes(), ByteBuf:writeShort(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:release(), ByteBuf:release(), SpdyHeaderBlockEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), SpdySynReplyFrame:isLast(), ByteBuf:readableBytes(), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int), SpdySynReplyFrame:getStreamId(), ByteBuf:writeInt(int), ByteBuf:writeInt(int), ByteBuf:writeShort(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:release(), ByteBuf:release(), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeInt(int), SpdyRstStreamFrame:getStreamId(), ByteBuf:writeInt(int), SpdyRstStreamFrame:getStatus(), SpdyStreamStatus:getCode(), ByteBuf:writeInt(int), SpdySettingsFrame:clearPreviouslyPersistedSettings(), SpdySettingsFrame:getIds(), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int), ByteBuf:writeInt(int), SpdySettingsFrame:isPersistValue(int), SpdySettingsFrame:isPersisted(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int), SpdySettingsFrame:getValue(int), ByteBuf:writeInt(int), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeInt(int), SpdyPingFrame:getId(), ByteBuf:writeInt(int), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeInt(int), SpdyGoAwayFrame:getLastGoodStreamId(), ByteBuf:writeInt(int), SpdyGoAwayFrame:getStatus(), SpdySessionStatus:getCode(), ByteBuf:writeInt(int), SpdyHeaderBlockEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), SpdyHeadersFrame:isLast(), ByteBuf:readableBytes(), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeByte(int), ByteBuf:writeMedium(int), SpdyHeadersFrame:getStreamId(), ByteBuf:writeInt(int), ByteBuf:writeShort(int), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), ByteBuf:release(), ByteBuf:release(), ByteBuf:ensureWritable(int), ByteBuf:writeShort(int), ByteBuf:writeShort(int), ByteBuf:writeInt(int), SpdyWindowUpdateFrame:getStreamId(), ByteBuf:writeInt(int), SpdyWindowUpdateFrame:getDeltaWindowSize(), ByteBuf:writeInt(int), UnsupportedMessageTypeException:<init>(Object-Class[])),
		SpdyFrameEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(SpdyFrameEncoder:encode(ChannelHandlerContext-SpdyFrame-ByteBuf)),
		SpdyHeaderBlockDecoder:newInstance(int-int) to listOf(SpdyHeaderBlockZlibDecoder:<init>(int-int)),
		SpdyHeaderBlockEncoder:newInstance(int-int-int-int) to listOf(PlatformDependent:javaVersion(), SpdyHeaderBlockZlibEncoder:<init>(int-int), SpdyHeaderBlockJZlibEncoder:<init>(int-int-int-int)),
		SpdyHeaderBlockJZlibEncoder:<init>(int-int-int-int) to listOf(SpdyHeaderBlockRawEncoder:<init>(int), Deflater:<init>(), Deflater:deflateInit(int-int-int-JZlib$WrapperType), CompressionException:<init>(String), Deflater:deflateSetDictionary(byte[]-int), Deflater:deflateSetDictionary(byte[]-int), CompressionException:<init>(String)),
		SpdyHeaderBlockJZlibEncoder:setInput(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readBytes(byte[])),
		SpdyHeaderBlockJZlibEncoder:encode(ByteBuf) to listOf(Deflater:deflate(int), CompressionException:<init>(String), ByteBuf:writeBytes(byte[]-int-int)),
		SpdyHeaderBlockJZlibEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame) to listOf(SpdyHeaderBlockRawEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), SpdyHeaderBlockJZlibEncoder:setInput(ByteBuf), SpdyHeaderBlockJZlibEncoder:encode(ByteBuf)),
		SpdyHeaderBlockJZlibEncoder:end() to listOf(Deflater:deflateEnd()),
		SpdyHeaderBlockRawDecoder:<init>(int-int) to listOf(SpdyHeaderBlockDecoder:<init>(), SpdyHeaderBlockRawDecoder:reset()),
		SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf) to listOf(ByteBuf:readerIndex(), SpdyCodecUtil:getUnsignedShort(ByteBuf-int), ByteBuf:skipBytes(int), ByteBuf:readerIndex(), SpdyCodecUtil:getSignedInt(ByteBuf-int), ByteBuf:skipBytes(int)),
		SpdyHeaderBlockRawDecoder:decode(ByteBuf-SpdyHeadersFrame) to listOf(ByteBuf:readableBytes(), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), SpdyHeadersFrame:setInvalid(), ByteBuf:markReaderIndex(), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:setTruncated(), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), ByteBuf:readBytes(byte[]), SpdyHeadersFrame:headers(), SpdyHeaders:contains(String), SpdyHeadersFrame:setInvalid(), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), SpdyHeaderBlockRawDecoder:readLengthField(ByteBuf), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:headers(), SpdyHeaders:add(String-Object), SpdyHeadersFrame:setTruncated(), ByteBuf:readableBytes(), ByteBuf:resetReaderIndex(), ByteBuf:readBytes(byte[]), SpdyHeadersFrame:setInvalid(), SpdyHeadersFrame:headers(), SpdyHeaders:add(String-Object), SpdyHeadersFrame:setInvalid()),
		SpdyHeaderBlockRawEncoder:<init>(int) to listOf(SpdyHeaderBlockEncoder:<init>()),
		SpdyHeaderBlockRawEncoder:setLengthField(ByteBuf-int-int) to listOf(ByteBuf:setShort(int-int), ByteBuf:setInt(int-int)),
		SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int) to listOf(ByteBuf:writeShort(int), ByteBuf:writeInt(int)),
		SpdyHeaderBlockRawEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:names(), Unpooled:buffer(), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), ByteBuf:writeBytes(byte[]), ByteBuf:writerIndex(), SpdyHeaderBlockRawEncoder:writeLengthField(ByteBuf-int), SpdyHeadersFrame:headers(), SpdyHeaders:getAll(String), ByteBuf:writeBytes(byte[]), ByteBuf:writeByte(int), SpdyHeaderBlockRawEncoder:setLengthField(ByteBuf-int-int), ByteBuf:writerIndex(), ByteBuf:writerIndex(int)),
		SpdyHeaderBlockZlibDecoder:<init>(int-int) to listOf(SpdyHeaderBlockRawDecoder:<init>(int-int)),
		SpdyHeaderBlockZlibDecoder:decode(ByteBuf-SpdyHeadersFrame) to listOf(SpdyHeaderBlockZlibDecoder:setInput(ByteBuf), SpdyHeaderBlockZlibDecoder:decompress(SpdyHeadersFrame), ByteBuf:isReadable()),
		SpdyHeaderBlockZlibDecoder:setInput(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readBytes(byte[])),
		SpdyHeaderBlockZlibDecoder:decompress(SpdyHeadersFrame) to listOf(Unpooled:buffer(int), ByteBuf:writeBytes(byte[]-int-int), SpdyHeaderBlockRawDecoder:decode(ByteBuf-SpdyHeadersFrame), ByteBuf:discardReadBytes(), SpdyProtocolException:<init>(String-Throwable)),
		SpdyHeaderBlockZlibDecoder:reset() to listOf(SpdyHeaderBlockRawDecoder:reset()),
		SpdyHeaderBlockZlibDecoder:end() to listOf(SpdyHeaderBlockRawDecoder:end()),
		SpdyHeaderBlockZlibEncoder:<init>(int-int) to listOf(SpdyHeaderBlockRawEncoder:<init>(int)),
		SpdyHeaderBlockZlibEncoder:setInput(ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readBytes(byte[])),
		SpdyHeaderBlockZlibEncoder:encode(ByteBuf) to listOf(ByteBuf:writeBytes(byte[]-int-int)),
		SpdyHeaderBlockZlibEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame) to listOf(SpdyHeaderBlockRawEncoder:encode(ChannelHandlerContext-SpdyHeadersFrame), ByteBuf:readableBytes(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), SpdyHeaderBlockZlibEncoder:setInput(ByteBuf), SpdyHeaderBlockZlibEncoder:encode(ByteBuf)),
		SpdyHeaderBlockZlibEncoder:end() to listOf(SpdyHeaderBlockRawEncoder:end()),
		SpdyHeaders$1:<init>() to listOf(SpdyHeaders:<init>()),
		SpdyHeaders$1:iterator() to listOf(SpdyHeaders$1:entries()),
		SpdyHeaders:getHeader(SpdyHeadersFrame-String) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String)),
		SpdyHeaders:getHeader(SpdyHeadersFrame-String-String) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String)),
		SpdyHeaders:setHeader(SpdyHeadersFrame-String-Object) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:set(String-Object)),
		SpdyHeaders:setHeader(SpdyHeadersFrame-String-Iterable) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:set(String-Iterable)),
		SpdyHeaders:addHeader(SpdyHeadersFrame-String-Object) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:add(String-Object)),
		SpdyHeaders:removeHost(SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:remove(String)),
		SpdyHeaders:getHost(SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String)),
		SpdyHeaders:setHost(SpdyHeadersFrame-String) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:set(String-Object)),
		SpdyHeaders:removeMethod(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:remove(String), SpdyHeadersFrame:headers(), SpdyHeaders:remove(String)),
		SpdyHeaders:getMethod(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String), HttpMethod:valueOf(String), SpdyHeadersFrame:headers(), SpdyHeaders:get(String), HttpMethod:valueOf(String)),
		SpdyHeaders:setMethod(int-SpdyHeadersFrame-HttpMethod) to listOf(SpdyHeadersFrame:headers(), HttpMethod:name(), SpdyHeaders:set(String-Object), SpdyHeadersFrame:headers(), HttpMethod:name(), SpdyHeaders:set(String-Object)),
		SpdyHeaders:removeScheme(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:remove(String), SpdyHeadersFrame:headers(), SpdyHeaders:remove(String)),
		SpdyHeaders:getScheme(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String), SpdyHeadersFrame:headers(), SpdyHeaders:get(String)),
		SpdyHeaders:setScheme(int-SpdyHeadersFrame-String) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:set(String-Object), SpdyHeadersFrame:headers(), SpdyHeaders:set(String-Object)),
		SpdyHeaders:removeStatus(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:remove(String), SpdyHeadersFrame:headers(), SpdyHeaders:remove(String)),
		SpdyHeaders:getStatus(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String), SpdyHeadersFrame:headers(), SpdyHeaders:get(String), HttpResponseStatus:valueOf(int), HttpResponseStatus:valueOf(int), HttpResponseStatus:reasonPhrase(), HttpResponseStatus:<init>(int-String)),
		SpdyHeaders:setStatus(int-SpdyHeadersFrame-HttpResponseStatus) to listOf(SpdyHeadersFrame:headers(), HttpResponseStatus:toString(), SpdyHeaders:set(String-Object), SpdyHeadersFrame:headers(), HttpResponseStatus:toString(), SpdyHeaders:set(String-Object)),
		SpdyHeaders:removeUrl(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:remove(String), SpdyHeadersFrame:headers(), SpdyHeaders:remove(String)),
		SpdyHeaders:getUrl(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String), SpdyHeadersFrame:headers(), SpdyHeaders:get(String)),
		SpdyHeaders:setUrl(int-SpdyHeadersFrame-String) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:set(String-Object), SpdyHeadersFrame:headers(), SpdyHeaders:set(String-Object)),
		SpdyHeaders:removeVersion(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:remove(String), SpdyHeadersFrame:headers(), SpdyHeaders:remove(String)),
		SpdyHeaders:getVersion(int-SpdyHeadersFrame) to listOf(SpdyHeadersFrame:headers(), SpdyHeaders:get(String), HttpVersion:valueOf(String), SpdyHeadersFrame:headers(), SpdyHeaders:get(String), HttpVersion:valueOf(String)),
		SpdyHeaders:setVersion(int-SpdyHeadersFrame-HttpVersion) to listOf(SpdyHeadersFrame:headers(), HttpVersion:text(), SpdyHeaders:set(String-Object), SpdyHeadersFrame:headers(), HttpVersion:text(), SpdyHeaders:set(String-Object)),
		SpdyHeaders:iterator() to listOf(SpdyHeaders:entries()),
		SpdyHeaders:<clinit>() to listOf(SpdyHeaders$1:<init>()),
		SpdyHttpCodec:<init>(int-int) to listOf(SpdyHttpDecoder:<init>(int-int), SpdyHttpEncoder:<init>(int), CombinedChannelDuplexHandler:<init>(ChannelInboundHandler-ChannelOutboundHandler)),
		SpdyHttpDecoder:<init>(int-int) to listOf(SpdyHttpDecoder:<init>(int-int-Map)),
		SpdyHttpDecoder:<init>(int-int-Map) to listOf(MessageToMessageDecoder:<init>()),
		SpdyHttpDecoder:decode(ChannelHandlerContext-SpdyFrame-List) to listOf(SpdySynStreamFrame:getStreamId(), SpdyCodecUtil:isServerId(int), SpdySynStreamFrame:getAssociatedToStreamId(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHeaders:getUrl(int-SpdyHeadersFrame), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdySynStreamFrame:isTruncated(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHttpDecoder:createHttpResponse(int-SpdyHeadersFrame), SpdyHttpHeaders:setStreamId(HttpMessage-int), SpdyHttpHeaders:setAssociatedToStreamId(HttpMessage-int), SpdySynStreamFrame:getPriority(), SpdyHttpHeaders:setPriority(HttpMessage-byte), SpdyHttpHeaders:setUrl(HttpMessage-String), SpdySynStreamFrame:isLast(), HttpHeaders:setContentLength(HttpMessage-long), SpdyHttpDecoder:putMessage(int-FullHttpMessage), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdySynStreamFrame:isTruncated(), DefaultSpdySynReplyFrame:<init>(int), SpdySynReplyFrame:setLast(boolean), SpdyHeaders:setStatus(int-SpdyHeadersFrame-HttpResponseStatus), SpdyHeaders:setVersion(int-SpdyHeadersFrame-HttpVersion), ChannelHandlerContext:writeAndFlush(Object), SpdyHttpDecoder:createHttpRequest(int-SpdyHeadersFrame), SpdyHttpHeaders:setStreamId(HttpMessage-int), SpdySynStreamFrame:isLast(), SpdyHttpDecoder:putMessage(int-FullHttpMessage), DefaultSpdySynReplyFrame:<init>(int), SpdySynReplyFrame:setLast(boolean), SpdyHeaders:setStatus(int-SpdyHeadersFrame-HttpResponseStatus), SpdyHeaders:setVersion(int-SpdyHeadersFrame-HttpVersion), ChannelHandlerContext:writeAndFlush(Object), SpdySynReplyFrame:getStreamId(), SpdySynReplyFrame:isTruncated(), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHttpDecoder:createHttpResponse(int-SpdyHeadersFrame), SpdyHttpHeaders:setStreamId(HttpMessage-int), SpdySynReplyFrame:isLast(), HttpHeaders:setContentLength(HttpMessage-long), SpdyHttpDecoder:putMessage(int-FullHttpMessage), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), SpdyHeadersFrame:getStreamId(), SpdyHttpDecoder:getMessage(int), SpdyHeadersFrame:isTruncated(), SpdyHeadersFrame:headers(), SpdyHeaders:entries(), FullHttpMessage:headers(), HttpHeaders:add(String-Object), SpdyHeadersFrame:isLast(), FullHttpMessage:content(), ByteBuf:readableBytes(), HttpHeaders:setContentLength(HttpMessage-long), SpdyHttpDecoder:removeMessage(int), SpdyDataFrame:getStreamId(), SpdyHttpDecoder:getMessage(int), FullHttpMessage:content(), ByteBuf:readableBytes(), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdyHttpDecoder:removeMessage(int), TooLongFrameException:<init>(String), SpdyDataFrame:content(), ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:writeBytes(ByteBuf-int-int), SpdyDataFrame:isLast(), ByteBuf:readableBytes(), HttpHeaders:setContentLength(HttpMessage-long), SpdyHttpDecoder:removeMessage(int), SpdyRstStreamFrame:getStreamId(), SpdyHttpDecoder:removeMessage(int)),
		SpdyHttpDecoder:createHttpRequest(int-SpdyHeadersFrame) to listOf(SpdyHeaders:getMethod(int-SpdyHeadersFrame), SpdyHeaders:getUrl(int-SpdyHeadersFrame), SpdyHeaders:getVersion(int-SpdyHeadersFrame), SpdyHeaders:removeMethod(int-SpdyHeadersFrame), SpdyHeaders:removeUrl(int-SpdyHeadersFrame), SpdyHeaders:removeVersion(int-SpdyHeadersFrame), DefaultFullHttpRequest:<init>(HttpVersion-HttpMethod-String), SpdyHeaders:removeScheme(int-SpdyHeadersFrame), SpdyHeaders:getHost(SpdyHeadersFrame), SpdyHeaders:removeHost(SpdyHeadersFrame), HttpHeaders:setHost(HttpMessage-String), SpdyHeadersFrame:headers(), SpdyHeaders:entries(), FullHttpRequest:headers(), HttpHeaders:add(String-Object), HttpHeaders:setKeepAlive(HttpMessage-boolean), FullHttpRequest:headers(), HttpHeaders:remove(String)),
		SpdyHttpDecoder:createHttpResponse(int-SpdyHeadersFrame) to listOf(SpdyHeaders:getStatus(int-SpdyHeadersFrame), SpdyHeaders:getVersion(int-SpdyHeadersFrame), SpdyHeaders:removeStatus(int-SpdyHeadersFrame), SpdyHeaders:removeVersion(int-SpdyHeadersFrame), DefaultFullHttpResponse:<init>(HttpVersion-HttpResponseStatus), SpdyHeadersFrame:headers(), SpdyHeaders:entries(), FullHttpResponse:headers(), HttpHeaders:add(String-Object), HttpHeaders:setKeepAlive(HttpMessage-boolean), FullHttpResponse:headers(), HttpHeaders:remove(String), FullHttpResponse:headers(), HttpHeaders:remove(String)),
		SpdyHttpDecoder:decode(ChannelHandlerContext-Object-List) to listOf(SpdyHttpDecoder:decode(ChannelHandlerContext-SpdyFrame-List)),
		SpdyHttpEncoder:<init>(int) to listOf(MessageToMessageEncoder:<init>()),
		SpdyHttpEncoder:encode(ChannelHandlerContext-HttpObject-List) to listOf(SpdyHttpEncoder:createSynStreamFrame(HttpMessage), HttpResponse:headers(), HttpHeaders:contains(String), SpdyHttpEncoder:createSynStreamFrame(HttpMessage), SpdyHttpEncoder:createSynReplyFrame(HttpResponse), HttpContent:content(), ByteBuf:retain(), HttpContent:content(), DefaultSpdyDataFrame:<init>(int-ByteBuf), SpdyDataFrame:setLast(boolean), LastHttpContent:trailingHeaders(), HttpHeaders:entries(), DefaultSpdyHeadersFrame:<init>(int), SpdyHeadersFrame:headers(), SpdyHeaders:add(String-Object), UnsupportedMessageTypeException:<init>(Object-Class[])),
		SpdyHttpEncoder:createSynStreamFrame(HttpMessage) to listOf(SpdyHttpHeaders:getStreamId(HttpMessage), SpdyHttpHeaders:getAssociatedToStreamId(HttpMessage), SpdyHttpHeaders:getPriority(HttpMessage), SpdyHttpHeaders:getUrl(HttpMessage), SpdyHttpHeaders:getScheme(HttpMessage), SpdyHttpHeaders:removeStreamId(HttpMessage), SpdyHttpHeaders:removeAssociatedToStreamId(HttpMessage), SpdyHttpHeaders:removePriority(HttpMessage), SpdyHttpHeaders:removeUrl(HttpMessage), SpdyHttpHeaders:removeScheme(HttpMessage), HttpMessage:headers(), HttpHeaders:remove(String), HttpMessage:headers(), HttpHeaders:remove(String), HttpMessage:headers(), HttpHeaders:remove(String), HttpMessage:headers(), HttpHeaders:remove(String), DefaultSpdySynStreamFrame:<init>(int-int-byte), HttpRequest:getMethod(), SpdyHeaders:setMethod(int-SpdyHeadersFrame-HttpMethod), HttpRequest:getUri(), SpdyHeaders:setUrl(int-SpdyHeadersFrame-String), HttpMessage:getProtocolVersion(), SpdyHeaders:setVersion(int-SpdyHeadersFrame-HttpVersion), HttpResponse:getStatus(), SpdyHeaders:setStatus(int-SpdyHeadersFrame-HttpResponseStatus), SpdyHeaders:setUrl(int-SpdyHeadersFrame-String), HttpMessage:getProtocolVersion(), SpdyHeaders:setVersion(int-SpdyHeadersFrame-HttpVersion), SpdySynStreamFrame:setUnidirectional(boolean), HttpHeaders:getHost(HttpMessage), HttpMessage:headers(), HttpHeaders:remove(String), SpdyHeaders:setHost(SpdyHeadersFrame-String), SpdyHeaders:setScheme(int-SpdyHeadersFrame-String), HttpMessage:headers(), HttpHeaders:iterator(), SpdySynStreamFrame:headers(), SpdyHeaders:add(String-Object), SpdySynStreamFrame:getStreamId()),
		SpdyHttpEncoder:createSynReplyFrame(HttpResponse) to listOf(SpdyHttpHeaders:getStreamId(HttpMessage), SpdyHttpHeaders:removeStreamId(HttpMessage), HttpResponse:headers(), HttpHeaders:remove(String), HttpResponse:headers(), HttpHeaders:remove(String), HttpResponse:headers(), HttpHeaders:remove(String), HttpResponse:headers(), HttpHeaders:remove(String), DefaultSpdySynReplyFrame:<init>(int), HttpResponse:getStatus(), SpdyHeaders:setStatus(int-SpdyHeadersFrame-HttpResponseStatus), HttpResponse:getProtocolVersion(), SpdyHeaders:setVersion(int-SpdyHeadersFrame-HttpVersion), HttpResponse:headers(), HttpHeaders:iterator(), SpdySynReplyFrame:headers(), SpdyHeaders:add(String-Object), SpdySynReplyFrame:setLast(boolean)),
		SpdyHttpEncoder:encode(ChannelHandlerContext-Object-List) to listOf(SpdyHttpEncoder:encode(ChannelHandlerContext-HttpObject-List)),
		SpdyHttpHeaders:removeStreamId(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:remove(String)),
		SpdyHttpHeaders:getStreamId(HttpMessage) to listOf(HttpHeaders:getIntHeader(HttpMessage-String)),
		SpdyHttpHeaders:setStreamId(HttpMessage-int) to listOf(HttpHeaders:setIntHeader(HttpMessage-String-int)),
		SpdyHttpHeaders:removeAssociatedToStreamId(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:remove(String)),
		SpdyHttpHeaders:getAssociatedToStreamId(HttpMessage) to listOf(HttpHeaders:getIntHeader(HttpMessage-String-int)),
		SpdyHttpHeaders:setAssociatedToStreamId(HttpMessage-int) to listOf(HttpHeaders:setIntHeader(HttpMessage-String-int)),
		SpdyHttpHeaders:removePriority(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:remove(String)),
		SpdyHttpHeaders:getPriority(HttpMessage) to listOf(HttpHeaders:getIntHeader(HttpMessage-String-int)),
		SpdyHttpHeaders:setPriority(HttpMessage-byte) to listOf(HttpHeaders:setIntHeader(HttpMessage-String-int)),
		SpdyHttpHeaders:removeUrl(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:remove(String)),
		SpdyHttpHeaders:getUrl(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:get(String)),
		SpdyHttpHeaders:setUrl(HttpMessage-String) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Object)),
		SpdyHttpHeaders:removeScheme(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:remove(String)),
		SpdyHttpHeaders:getScheme(HttpMessage) to listOf(HttpMessage:headers(), HttpHeaders:get(String)),
		SpdyHttpHeaders:setScheme(HttpMessage-String) to listOf(HttpMessage:headers(), HttpHeaders:set(String-Object)),
		SpdyHttpResponseStreamIdHandler:<init>() to listOf(MessageToMessageCodec:<init>()),
		SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-HttpMessage-List) to listOf(HttpMessage:headers(), HttpHeaders:contains(String), SpdyHttpHeaders:setStreamId(HttpMessage-int), ReferenceCountUtil:retain(Object)),
		SpdyHttpResponseStreamIdHandler:decode(ChannelHandlerContext-Object-List) to listOf(HttpMessage:headers(), HttpHeaders:contains(String), SpdyHttpHeaders:getStreamId(HttpMessage), SpdyRstStreamFrame:getStreamId(), ReferenceCountUtil:retain(Object)),
		SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-Object-List) to listOf(SpdyHttpResponseStreamIdHandler:encode(ChannelHandlerContext-HttpMessage-List)),
		SpdyOrHttpChooser$1:<clinit>() to listOf(SpdyOrHttpChooser$SelectedProtocol:values(), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser$SelectedProtocol:ordinal()),
		SpdyOrHttpChooser$SelectedProtocol:values() to listOf(SpdyOrHttpChooser$SelectedProtocol[]:clone()),
		SpdyOrHttpChooser$SelectedProtocol:<clinit>() to listOf(SpdyOrHttpChooser$SelectedProtocol:<init>(String-int), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int), SpdyOrHttpChooser$SelectedProtocol:<init>(String-int)),
		SpdyOrHttpChooser:<init>(int-int) to listOf(ChannelInboundHandlerAdapter:<init>()),
		SpdyOrHttpChooser:channelRead(ChannelHandlerContext-Object) to listOf(SpdyOrHttpChooser:initPipeline(ChannelHandlerContext), ChannelHandlerContext:pipeline(), ChannelPipeline:remove(ChannelHandler), ChannelHandlerContext:fireChannelRead(Object)),
		SpdyOrHttpChooser:initPipeline(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), ChannelPipeline:get(Class), SslHandler:engine(), SpdyOrHttpChooser:getProtocol(SSLEngine), SpdyOrHttpChooser$SelectedProtocol:ordinal(), SpdyOrHttpChooser:addSpdyHandlers(ChannelHandlerContext-int), SpdyOrHttpChooser:addSpdyHandlers(ChannelHandlerContext-int), SpdyOrHttpChooser:addHttpHandlers(ChannelHandlerContext)),
		SpdyOrHttpChooser:addSpdyHandlers(ChannelHandlerContext-int) to listOf(ChannelHandlerContext:pipeline(), SpdyFrameDecoder:<init>(int), ChannelPipeline:addLast(String-ChannelHandler), SpdyFrameEncoder:<init>(int), ChannelPipeline:addLast(String-ChannelHandler), SpdySessionHandler:<init>(int-boolean), ChannelPipeline:addLast(String-ChannelHandler), SpdyHttpEncoder:<init>(int), ChannelPipeline:addLast(String-ChannelHandler), SpdyHttpDecoder:<init>(int-int), ChannelPipeline:addLast(String-ChannelHandler), SpdyHttpResponseStreamIdHandler:<init>(), ChannelPipeline:addLast(String-ChannelHandler), SpdyOrHttpChooser:createHttpRequestHandlerForSpdy(), ChannelPipeline:addLast(String-ChannelHandler)),
		SpdyOrHttpChooser:addHttpHandlers(ChannelHandlerContext) to listOf(ChannelHandlerContext:pipeline(), HttpRequestDecoder:<init>(), ChannelPipeline:addLast(String-ChannelHandler), HttpResponseEncoder:<init>(), ChannelPipeline:addLast(String-ChannelHandler), HttpObjectAggregator:<init>(int), ChannelPipeline:addLast(String-ChannelHandler), SpdyOrHttpChooser:createHttpRequestHandlerForHttp(), ChannelPipeline:addLast(String-ChannelHandler)),
		SpdyOrHttpChooser:createHttpRequestHandlerForSpdy() to listOf(SpdyOrHttpChooser:createHttpRequestHandlerForHttp()),
		SpdySession$PriorityComparator:compare(Integer-Integer) to listOf(SpdySession:access$100(SpdySession), SpdySession:access$100(SpdySession), SpdySession$StreamState:getPriority(), SpdySession$StreamState:getPriority()),
		SpdySession$PriorityComparator:compare(Object-Object) to listOf(SpdySession$PriorityComparator:compare(Integer-Integer)),
		SpdySession$PriorityComparator:<init>(SpdySession-SpdySession$1) to listOf(SpdySession$PriorityComparator:<init>(SpdySession)),
		SpdySession:<init>() to listOf(PlatformDependent:newConcurrentHashMap()),
		SpdySession:getActiveStreams() to listOf(SpdySession$PriorityComparator:<init>(SpdySession-SpdySession$1)),
		SpdySession:acceptStream(int-byte-boolean-boolean-int-int) to listOf(SpdySession$StreamState:<init>(byte-boolean-boolean-int-int)),
		SpdySession:removeStream(int) to listOf(SpdySession$StreamState:clearPendingWrites()),
		SpdySession:isRemoteSideClosed(int) to listOf(SpdySession$StreamState:isRemoteSideClosed()),
		SpdySession:closeRemoteSide(int) to listOf(SpdySession$StreamState:closeRemoteSide(), SpdySession$StreamState:isLocalSideClosed()),
		SpdySession:isLocalSideClosed(int) to listOf(SpdySession$StreamState:isLocalSideClosed()),
		SpdySession:closeLocalSide(int) to listOf(SpdySession$StreamState:closeLocalSide(), SpdySession$StreamState:isRemoteSideClosed()),
		SpdySession:hasReceivedReply(int) to listOf(SpdySession$StreamState:hasReceivedReply()),
		SpdySession:receivedReply(int) to listOf(SpdySession$StreamState:receivedReply()),
		SpdySession:getSendWindowSize(int) to listOf(SpdySession$StreamState:getSendWindowSize()),
		SpdySession:updateSendWindowSize(int-int) to listOf(SpdySession$StreamState:updateSendWindowSize(int)),
		SpdySession:updateReceiveWindowSize(int-int) to listOf(SpdySession$StreamState:setReceiveWindowSizeLowerBound(int), SpdySession$StreamState:updateReceiveWindowSize(int)),
		SpdySession:getReceiveWindowSizeLowerBound(int) to listOf(SpdySession$StreamState:getReceiveWindowSizeLowerBound()),
		SpdySession:updateAllReceiveWindowSizes(int) to listOf(SpdySession$StreamState:updateReceiveWindowSize(int), SpdySession$StreamState:setReceiveWindowSizeLowerBound(int)),
		SpdySession:putPendingWrite(int-Object) to listOf(SpdySession$StreamState:putPendingWrite(Object)),
		SpdySession:getPendingWrite(int) to listOf(SpdySession$StreamState:getPendingWrite()),
		SpdySession:removePendingWrite(int) to listOf(SpdySession$StreamState:removePendingWrite()),
		SpdySessionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:close(ChannelPromise)),
		SpdySessionHandler$ClosingChannelFutureListener:operationComplete(Future) to listOf(SpdySessionHandler$ClosingChannelFutureListener:operationComplete(ChannelFuture)),
		SpdySessionHandler:<init>(int-boolean) to listOf(ChannelDuplexHandler:<init>(), SpdySession:<init>()),
		SpdySessionHandler:channelRead(ChannelHandlerContext-Object) to listOf(SpdyDataFrame:getStreamId(), SpdySession:isActiveStream(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:isRemoteSideClosed(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:isRemoteInitiatedID(int), SpdySession:hasReceivedReply(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdySession:updateReceiveWindowSize(int-int), SpdySession:getReceiveWindowSizeLowerBound(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdyDataFrame:content(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultSpdyDataFrame:<init>(int-ByteBuf), ChannelHandlerContext:writeAndFlush(Object), SpdyDataFrame:isLast(), SpdySession:updateReceiveWindowSize(int-int), DefaultSpdyWindowUpdateFrame:<init>(int-int), ChannelHandlerContext:writeAndFlush(Object), SpdyDataFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean), SpdySynStreamFrame:getStreamId(), SpdySynStreamFrame:isInvalid(), SpdySessionHandler:isRemoteInitiatedID(int), SpdySession:isActiveStream(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), SpdySynStreamFrame:getPriority(), SpdySynStreamFrame:isLast(), SpdySynStreamFrame:isUnidirectional(), SpdySessionHandler:acceptStream(int-byte-boolean-boolean), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySynReplyFrame:getStreamId(), SpdySynReplyFrame:isInvalid(), SpdySessionHandler:isRemoteInitiatedID(int), SpdySession:isRemoteSideClosed(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:hasReceivedReply(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:receivedReply(int), SpdySynReplyFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean), SpdyRstStreamFrame:getStreamId(), SpdySessionHandler:removeStream(ChannelHandlerContext-int), SpdySettingsFrame:getValue(int), SpdySessionHandler:updateConcurrentStreams(int-boolean), SpdySettingsFrame:isPersisted(int), SpdySettingsFrame:removeValue(int), SpdySettingsFrame:setPersistValue(int-boolean), SpdySettingsFrame:getValue(int), SpdySessionHandler:updateInitialSendWindowSize(int), SpdyPingFrame:getId(), SpdySessionHandler:isRemoteInitiatedID(int), ChannelHandlerContext:writeAndFlush(Object), SpdyHeadersFrame:getStreamId(), SpdyHeadersFrame:isInvalid(), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySession:isRemoteSideClosed(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdyHeadersFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean), SpdyWindowUpdateFrame:getStreamId(), SpdyWindowUpdateFrame:getDeltaWindowSize(), SpdySession:isLocalSideClosed(int), SpdySession:getSendWindowSize(int), SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus), SpdySessionHandler:updateSendWindowSize(ChannelHandlerContext-int-int), ChannelHandlerContext:fireChannelRead(Object)),
		SpdySessionHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus), ChannelDuplexHandler:exceptionCaught(ChannelHandlerContext-Throwable)),
		SpdySessionHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-ChannelPromise)),
		SpdySessionHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(SpdySessionHandler:handleOutboundMessage(ChannelHandlerContext-Object-ChannelPromise), ChannelHandlerContext:write(Object-ChannelPromise)),
		SpdySessionHandler:handleOutboundMessage(ChannelHandlerContext-Object-ChannelPromise) to listOf(SpdyDataFrame:getStreamId(), SpdySession:isLocalSideClosed(int), ChannelPromise:setFailure(Throwable), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdySession:getSendWindowSize(int), SpdySession:putPendingWrite(int-Object), SpdySession:updateSendWindowSize(int-int), SpdyDataFrame:content(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultSpdyDataFrame:<init>(int-ByteBuf), SpdySession:putPendingWrite(int-Object), ChannelHandlerContext:write(Object-ChannelPromise), SpdySession:updateSendWindowSize(int-int), SpdyDataFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean), SpdySynStreamFrame:getStreamId(), SpdySessionHandler:isRemoteInitiatedID(int), ChannelPromise:setFailure(Throwable), SpdySynStreamFrame:getPriority(), SpdySynStreamFrame:isUnidirectional(), SpdySynStreamFrame:isLast(), SpdySessionHandler:acceptStream(int-byte-boolean-boolean), ChannelPromise:setFailure(Throwable), SpdySynReplyFrame:getStreamId(), SpdySessionHandler:isRemoteInitiatedID(int), SpdySession:isLocalSideClosed(int), ChannelPromise:setFailure(Throwable), SpdySynReplyFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean), SpdyRstStreamFrame:getStreamId(), SpdySessionHandler:removeStream(ChannelHandlerContext-int), SpdySettingsFrame:getValue(int), SpdySessionHandler:updateConcurrentStreams(int-boolean), SpdySettingsFrame:isPersisted(int), SpdySettingsFrame:removeValue(int), SpdySettingsFrame:setPersistValue(int-boolean), SpdySettingsFrame:getValue(int), SpdySessionHandler:updateInitialReceiveWindowSize(int), SpdyPingFrame:getId(), SpdySessionHandler:isRemoteInitiatedID(int), SpdyPingFrame:getId(), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelPromise:setFailure(Throwable), SpdyHeadersFrame:getStreamId(), SpdySession:isLocalSideClosed(int), ChannelPromise:setFailure(Throwable), SpdyHeadersFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean), ChannelPromise:setFailure(Throwable), ChannelHandlerContext:write(Object-ChannelPromise)),
		SpdySessionHandler:issueSessionError(ChannelHandlerContext-SpdySessionStatus) to listOf(SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus), ChannelFuture:addListener(GenericFutureListener)),
		SpdySessionHandler:issueStreamError(ChannelHandlerContext-int-SpdyStreamStatus) to listOf(SpdySession:isRemoteSideClosed(int), SpdySessionHandler:removeStream(ChannelHandlerContext-int), DefaultSpdyRstStreamFrame:<init>(int-SpdyStreamStatus), ChannelHandlerContext:writeAndFlush(Object), ChannelHandlerContext:fireChannelRead(Object)),
		SpdySessionHandler:isRemoteInitiatedID(int) to listOf(SpdyCodecUtil:isServerId(int)),
		SpdySessionHandler:updateInitialSendWindowSize(int) to listOf(SpdySession:getActiveStreams(), SpdySession:updateSendWindowSize(int-int)),
		SpdySessionHandler:updateInitialReceiveWindowSize(int) to listOf(SpdySession:updateAllReceiveWindowSizes(int)),
		SpdySessionHandler:acceptStream(int-byte-boolean-boolean) to listOf(SpdySession:numActiveStreams(), SpdySession:acceptStream(int-byte-boolean-boolean-int-int), SpdySessionHandler:isRemoteInitiatedID(int)),
		SpdySessionHandler:halfCloseStream(int-boolean) to listOf(SpdySession:closeRemoteSide(int), SpdySession:closeLocalSide(int), SpdySession:noActiveStreams(), ChannelPromise:trySuccess()),
		SpdySessionHandler:removeStream(ChannelHandlerContext-int) to listOf(SpdySession:removeStream(int), ChannelHandlerContext:fireExceptionCaught(Throwable), SpdySession:noActiveStreams(), ChannelPromise:trySuccess()),
		SpdySessionHandler:updateSendWindowSize(ChannelHandlerContext-int-int) to listOf(SpdySession:updateSendWindowSize(int-int), SpdySession:getPendingWrite(int), SpdyDataFrame:content(), ByteBuf:readableBytes(), SpdySession:removePendingWrite(int), SpdySession:updateSendWindowSize(int-int), SpdyDataFrame:isLast(), SpdySessionHandler:halfCloseStream(int-boolean), ChannelHandlerContext:fireChannelRead(Object), SpdySession:updateSendWindowSize(int-int), SpdyDataFrame:content(), ByteBuf:readSlice(int), ByteBuf:retain(), DefaultSpdyDataFrame:<init>(int-ByteBuf), ChannelHandlerContext:fireChannelRead(Object)),
		SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(ChannelPromise), SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus), SpdySession:noActiveStreams(), SpdySessionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener), ChannelHandlerContext:newPromise(), SpdySessionHandler$ClosingChannelFutureListener:<init>(ChannelHandlerContext-ChannelPromise), ChannelPromise:addListener(GenericFutureListener)),
		SpdySessionHandler:sendGoAwayFrame(ChannelHandlerContext-SpdySessionStatus) to listOf(DefaultSpdyGoAwayFrame:<init>(int-SpdySessionStatus), ChannelHandlerContext:writeAndFlush(Object), ChannelHandlerContext:newSucceededFuture()),
		SpdySessionHandler:<clinit>() to listOf(SpdyProtocolException:<init>(), SpdyProtocolException:<init>(String), SpdyProtocolException:setStackTrace(StackTraceElement[]), SpdyProtocolException:setStackTrace(StackTraceElement[])),
		SpdySessionStatus:valueOf(int) to listOf(SpdySessionStatus:<init>(int-String)),
		SpdySessionStatus:hashCode() to listOf(SpdySessionStatus:getCode()),
		SpdySessionStatus:equals(Object) to listOf(SpdySessionStatus:getCode(), SpdySessionStatus:getCode()),
		SpdySessionStatus:toString() to listOf(SpdySessionStatus:getStatusPhrase()),
		SpdySessionStatus:compareTo(SpdySessionStatus) to listOf(SpdySessionStatus:getCode(), SpdySessionStatus:getCode()),
		SpdySessionStatus:compareTo(Object) to listOf(SpdySessionStatus:compareTo(SpdySessionStatus)),
		SpdySessionStatus:<clinit>() to listOf(SpdySessionStatus:<init>(int-String), SpdySessionStatus:<init>(int-String), SpdySessionStatus:<init>(int-String)),
		SpdyStreamStatus:valueOf(int) to listOf(SpdyStreamStatus:<init>(int-String)),
		SpdyStreamStatus:hashCode() to listOf(SpdyStreamStatus:getCode()),
		SpdyStreamStatus:equals(Object) to listOf(SpdyStreamStatus:getCode(), SpdyStreamStatus:getCode()),
		SpdyStreamStatus:toString() to listOf(SpdyStreamStatus:getStatusPhrase()),
		SpdyStreamStatus:compareTo(SpdyStreamStatus) to listOf(SpdyStreamStatus:getCode(), SpdyStreamStatus:getCode()),
		SpdyStreamStatus:compareTo(Object) to listOf(SpdyStreamStatus:compareTo(SpdyStreamStatus)),
		SpdyStreamStatus:<clinit>() to listOf(SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String), SpdyStreamStatus:<init>(int-String)),
		StringDecoder:<init>() to listOf(StringDecoder:<init>(Charset)),
		StringDecoder:<init>(Charset) to listOf(MessageToMessageDecoder:<init>()),
		StringDecoder:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:toString(Charset)),
		StringDecoder:decode(ChannelHandlerContext-Object-List) to listOf(StringDecoder:decode(ChannelHandlerContext-ByteBuf-List)),
		StringEncoder:<init>() to listOf(StringEncoder:<init>(Charset)),
		StringEncoder:<init>(Charset) to listOf(MessageToByteEncoder:<init>()),
		StringEncoder:encode(ChannelHandlerContext-CharSequence-ByteBuf) to listOf(Unpooled:copiedBuffer(CharSequence-Charset), ByteBuf:writeBytes(ByteBuf), ByteBuf:release(), ByteBuf:release()),
		StringEncoder:encode(ChannelHandlerContext-Object-ByteBuf) to listOf(StringEncoder:encode(ChannelHandlerContext-CharSequence-ByteBuf)),
		TooLongFrameException:<init>() to listOf(DecoderException:<init>()),
		TooLongFrameException:<init>(String-Throwable) to listOf(DecoderException:<init>(String-Throwable)),
		TooLongFrameException:<init>(String) to listOf(DecoderException:<init>(String)),
		TooLongFrameException:<init>(Throwable) to listOf(DecoderException:<init>(Throwable)),
		UnsupportedMessageTypeException:<init>(Object-Class[]) to listOf(UnsupportedMessageTypeException:message(String-Class[]), CodecException:<init>(String)),
		UnsupportedMessageTypeException:<init>() to listOf(CodecException:<init>()),
		UnsupportedMessageTypeException:<init>(String-Throwable) to listOf(CodecException:<init>(String-Throwable)),
		UnsupportedMessageTypeException:<init>(String) to listOf(CodecException:<init>(String)),
		UnsupportedMessageTypeException:<init>(Throwable) to listOf(CodecException:<init>(Throwable)),
		LoggingHandler:<init>() to listOf(LoggingHandler:<init>(LogLevel)),
		LoggingHandler:<init>(LogLevel) to listOf(ChannelDuplexHandler:<init>(), InternalLoggerFactory:getInstance(Class), LogLevel:toInternalLevel()),
		LoggingHandler:<init>(Class) to listOf(LoggingHandler:<init>(Class-LogLevel)),
		LoggingHandler:<init>(Class-LogLevel) to listOf(ChannelDuplexHandler:<init>(), InternalLoggerFactory:getInstance(Class), LogLevel:toInternalLevel()),
		LoggingHandler:<init>(String) to listOf(LoggingHandler:<init>(String-LogLevel)),
		LoggingHandler:<init>(String-LogLevel) to listOf(ChannelDuplexHandler:<init>(), InternalLoggerFactory:getInstance(String), LogLevel:toInternalLevel()),
		LoggingHandler:format(ChannelHandlerContext-String) to listOf(ChannelHandlerContext:channel()),
		LoggingHandler:channelRegistered(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:channelRegistered(ChannelHandlerContext)),
		LoggingHandler:channelUnregistered(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:channelUnregistered(ChannelHandlerContext)),
		LoggingHandler:channelActive(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:channelActive(ChannelHandlerContext)),
		LoggingHandler:channelInactive(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:channelInactive(ChannelHandlerContext)),
		LoggingHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String-Throwable), ChannelDuplexHandler:exceptionCaught(ChannelHandlerContext-Throwable)),
		LoggingHandler:userEventTriggered(ChannelHandlerContext-Object) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:userEventTriggered(ChannelHandlerContext-Object)),
		LoggingHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise)),
		LoggingHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise)),
		LoggingHandler:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:disconnect(ChannelHandlerContext-ChannelPromise)),
		LoggingHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:close(ChannelHandlerContext-ChannelPromise)),
		LoggingHandler:deregister(ChannelHandlerContext-ChannelPromise) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelDuplexHandler:deregister(ChannelHandlerContext-ChannelPromise)),
		LoggingHandler:channelRead(ChannelHandlerContext-Object) to listOf(LoggingHandler:logMessage(ChannelHandlerContext-String-Object), ChannelHandlerContext:fireChannelRead(Object)),
		LoggingHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(LoggingHandler:logMessage(ChannelHandlerContext-String-Object), ChannelHandlerContext:write(Object-ChannelPromise)),
		LoggingHandler:flush(ChannelHandlerContext) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String), ChannelHandlerContext:flush()),
		LoggingHandler:logMessage(ChannelHandlerContext-String-Object) to listOf(InternalLogger:isEnabled(InternalLogLevel), LoggingHandler:formatMessage(String-Object), LoggingHandler:format(ChannelHandlerContext-String), InternalLogger:log(InternalLogLevel-String)),
		LoggingHandler:formatMessage(String-Object) to listOf(LoggingHandler:formatByteBuf(String-ByteBuf), LoggingHandler:formatNonByteBuf(String-Object)),
		LoggingHandler:formatByteBuf(String-ByteBuf) to listOf(ByteBuf:readableBytes(), ByteBuf:readerIndex(), ByteBuf:writerIndex(), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int)),
		LogLevel:values() to listOf(LogLevel[]:clone()),
		LogLevel:<clinit>() to listOf(LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel), LogLevel:<init>(String-int-InternalLogLevel)),
		NotSslRecordException:<init>() to listOf(SSLException:<init>(String)),
		NotSslRecordException:<init>(String) to listOf(SSLException:<init>(String)),
		NotSslRecordException:<init>(Throwable) to listOf(SSLException:<init>(Throwable)),
		NotSslRecordException:<init>(String-Throwable) to listOf(SSLException:<init>(String-Throwable)),
		SslHandler$1:run() to listOf(SslHandler:access$200(SslHandler), SSLEngine:closeOutbound(), SslHandler:access$300(SslHandler), ChannelPromise:addListener(GenericFutureListener), SslHandler:write(ChannelHandlerContext-Object-ChannelPromise), SslHandler:flush(ChannelHandlerContext), ChannelPromise:tryFailure(Throwable), SslHandler:access$400(), InternalLogger:warn(String-Throwable)),
		SslHandler$2:run() to listOf(SslHandler:access$500(SslHandler), SslHandler$LazyChannelPromise:isDone(), SslHandler:access$600(), SslHandler:access$700(SslHandler-Throwable)),
		SslHandler$4:operationComplete(Future) to listOf(Future:isSuccess(), Future:cause(), ChannelHandlerContext:close()),
		SslHandler$5:run() to listOf(SslHandler:access$400(), ChannelHandlerContext:channel(), InternalLogger:warn(String), ChannelHandlerContext:close(ChannelPromise)),
		SslHandler$6:operationComplete(ChannelFuture) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(ChannelPromise)),
		SslHandler$6:operationComplete(Future) to listOf(SslHandler$6:operationComplete(ChannelFuture)),
		SslHandler$7:<clinit>() to listOf(SSLEngineResult$Status:values(), SSLEngineResult$Status:ordinal(), SSLEngineResult$Status:ordinal(), SSLEngineResult$Status:ordinal(), SSLEngineResult$HandshakeStatus:values(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal(), SSLEngineResult$HandshakeStatus:ordinal()),
		SslHandler$CloseNotifyListener:operationComplete(ChannelFuture) to listOf(ChannelFuture:isSuccess()),
		SslHandler$CloseNotifyListener:operationComplete(Future) to listOf(SslHandler$CloseNotifyListener:operationComplete(ChannelFuture)),
		SslHandler$CloseNotifyListener:<init>(SslHandler$1) to listOf(SslHandler$CloseNotifyListener:<init>()),
		SslHandler$LazyChannelPromise:<init>(SslHandler) to listOf(DefaultPromise:<init>()),
		SslHandler$LazyChannelPromise:executor() to listOf(SslHandler:access$800(SslHandler), SslHandler:access$800(SslHandler), ChannelHandlerContext:executor()),
		SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1) to listOf(SslHandler$LazyChannelPromise:<init>(SslHandler)),
		SslHandler$PendingWrite:<init>(ByteBuf) to listOf(SslHandler$PendingWrite:<init>(ByteBuf-ChannelPromise)),
		SslHandler$PendingWrite:fail(Throwable) to listOf(ByteBuf:release(), ChannelPromise:setFailure(Throwable)),
		SslHandler:<init>(SSLEngine) to listOf(SslHandler:<init>(SSLEngine-Executor)),
		SslHandler:<init>(SSLEngine-boolean) to listOf(SslHandler:<init>(SSLEngine-boolean-Executor)),
		SslHandler:<init>(SSLEngine-Executor) to listOf(SslHandler:<init>(SSLEngine-boolean-Executor)),
		SslHandler:<init>(SSLEngine-boolean-Executor) to listOf(ByteToMessageDecoder:<init>(), SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1), SslHandler$LazyChannelPromise:<init>(SslHandler-SslHandler$1), SslHandler$CloseNotifyListener:<init>(SslHandler$1)),
		SslHandler:setHandshakeTimeout(long-TimeUnit) to listOf(SslHandler:setHandshakeTimeoutMillis(long)),
		SslHandler:setCloseNotifyTimeout(long-TimeUnit) to listOf(SslHandler:setCloseNotifyTimeoutMillis(long)),
		SslHandler:close() to listOf(ChannelHandlerContext:newPromise(), SslHandler:close(ChannelPromise)),
		SslHandler:close(ChannelPromise) to listOf(ChannelHandlerContext:executor(), SslHandler$1:<init>(SslHandler-ChannelPromise-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		SslHandler:handlerRemoved0(ChannelHandlerContext) to listOf(ByteBuf:release(), ChannelException:<init>(String), SslHandler$PendingWrite:fail(Throwable)),
		SslHandler:bind(ChannelHandlerContext-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:bind(SocketAddress-ChannelPromise)),
		SslHandler:connect(ChannelHandlerContext-SocketAddress-SocketAddress-ChannelPromise) to listOf(ChannelHandlerContext:connect(SocketAddress-SocketAddress-ChannelPromise)),
		SslHandler:deregister(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:deregister(ChannelPromise)),
		SslHandler:disconnect(ChannelHandlerContext-ChannelPromise) to listOf(SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean)),
		SslHandler:close(ChannelHandlerContext-ChannelPromise) to listOf(SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean)),
		SslHandler:read(ChannelHandlerContext) to listOf(ChannelHandlerContext:read()),
		SslHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(SslHandler$PendingWrite:<init>(ByteBuf-ChannelPromise)),
		SslHandler:flush(ChannelHandlerContext) to listOf(ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:flush(), SslHandler$PendingWrite:<init>(ByteBuf-ChannelPromise), SslHandler:flush0(ChannelHandlerContext)),
		SslHandler:flush0(ChannelHandlerContext) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), SslHandler:wrap(SSLEngine-ByteBuf-ByteBuf), ByteBuf:isReadable(), ByteBuf:release(), SSLEngineResult:getStatus(), SslHandler$PendingWrite:fail(Throwable), ByteBuf:isReadable(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), ChannelHandlerContext:writeAndFlush(Object), ChannelPromise:trySuccess(), ByteBuf:release(), SSLEngineResult:getHandshakeStatus(), SSLEngineResult$HandshakeStatus:ordinal(), SslHandler:runDelegatedTasks(), SslHandler:setHandshakeSuccess(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), ChannelHandlerContext:writeAndFlush(Object), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), ByteBuf:isReadable(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), ChannelHandlerContext:writeAndFlush(Object), ChannelPromise:trySuccess(), ByteBuf:release(), SSLEngineResult:getHandshakeStatus(), ByteBuf:isReadable(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), ChannelHandlerContext:writeAndFlush(Object), ChannelPromise:trySuccess(), ByteBuf:release(), SslHandler:setHandshakeFailure(Throwable), ByteBuf:isReadable(), ChannelHandlerContext:writeAndFlush(Object-ChannelPromise), ChannelHandlerContext:writeAndFlush(Object), ChannelPromise:trySuccess(), ByteBuf:release()),
		SslHandler:flushNonAppData0(ChannelHandlerContext-boolean) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), SslHandler:wrap(SSLEngine-ByteBuf-ByteBuf), SSLEngineResult:bytesProduced(), ChannelHandlerContext:writeAndFlush(Object), SSLEngineResult:getHandshakeStatus(), SSLEngineResult$HandshakeStatus:ordinal(), SslHandler:setHandshakeSuccess(), SslHandler:runDelegatedTasks(), SslHandler:unwrap(ChannelHandlerContext), SslHandler:unwrap(ChannelHandlerContext), SSLEngineResult:getHandshakeStatus(), SSLEngineResult:bytesProduced(), ByteBuf:release(), SslHandler:setHandshakeFailure(Throwable), ByteBuf:release()),
		SslHandler:wrap(SSLEngine-ByteBuf-ByteBuf) to listOf(ByteBuf:nioBuffer(), ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBuffer(int-int), SSLEngine:wrap(ByteBuffer-ByteBuffer), SSLEngineResult:bytesConsumed(), ByteBuf:skipBytes(int), ByteBuf:writerIndex(), SSLEngineResult:bytesProduced(), ByteBuf:writerIndex(int), SSLEngineResult:getStatus(), SSLEngine:getSession(), SSLSession:getPacketBufferSize(), ByteBuf:ensureWritable(int)),
		SslHandler:channelInactive(ChannelHandlerContext) to listOf(SslHandler:setHandshakeFailure(Throwable), ByteToMessageDecoder:channelInactive(ChannelHandlerContext)),
		SslHandler:exceptionCaught(ChannelHandlerContext-Throwable) to listOf(SslHandler:ignoreException(Throwable), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Throwable), ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		SslHandler:ignoreException(Throwable) to listOf(SslHandler$LazyChannelPromise:isDone(), PlatformDependent:javaVersion()),
		SslHandler:isEncrypted(ByteBuf) to listOf(ByteBuf:readableBytes(), SslHandler:getEncryptedPacketLength(ByteBuf)),
		SslHandler:getEncryptedPacketLength(ByteBuf) to listOf(ByteBuf:readerIndex(), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedShort(int), ByteBuf:getUnsignedByte(int), ByteBuf:getUnsignedByte(int), ByteBuf:getShort(int), ByteBuf:getShort(int)),
		SslHandler:decode(ChannelHandlerContext-ByteBuf-List) to listOf(ByteBuf:readableBytes(), SslHandler:getEncryptedPacketLength(ByteBuf), ByteBufUtil:hexDump(ByteBuf), NotSslRecordException:<init>(String), ByteBuf:skipBytes(int), ChannelHandlerContext:fireExceptionCaught(Throwable), SslHandler:setHandshakeFailure(Throwable), ByteBuf:readerIndex(), ByteBuf:skipBytes(int), ByteBuf:nioBuffer(int-int), SslHandler:unwrap(ChannelHandlerContext-ByteBuffer-List)),
		SslHandler:unwrap(ChannelHandlerContext) to listOf(RecyclableArrayList:newInstance(), ByteBuf:nioBuffer(), SslHandler:unwrap(ChannelHandlerContext-ByteBuffer-List), RecyclableArrayList:size(), RecyclableArrayList:get(int), ChannelHandlerContext:fireChannelRead(Object), RecyclableArrayList:recycle(), RecyclableArrayList:recycle()),
		SslHandler:unwrap(ChannelHandlerContext-ByteBuffer-List) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(), SslHandler:unwrap(SSLEngine-ByteBuffer-ByteBuf), SSLEngineResult:bytesProduced(), SSLEngineResult:getStatus(), SSLEngineResult$Status:ordinal(), ChannelHandlerContext:channel(), SslHandler$LazyChannelPromise:trySuccess(Object), SSLEngineResult:getHandshakeStatus(), SSLEngineResult$HandshakeStatus:ordinal(), SslHandler:flushNonAppData0(ChannelHandlerContext-boolean), SslHandler:runDelegatedTasks(), SslHandler:setHandshakeSuccess(), SSLEngineResult:getHandshakeStatus(), SSLEngineResult:bytesConsumed(), SSLEngineResult:bytesProduced(), SslHandler:flush0(ChannelHandlerContext), SslHandler:setHandshakeFailure(Throwable)),
		SslHandler:unwrap(SSLEngine-ByteBuffer-ByteBuf) to listOf(ByteBuf:writerIndex(), ByteBuf:writableBytes(), ByteBuf:nioBuffer(int-int), SSLEngine:unwrap(ByteBuffer-ByteBuffer), ByteBuf:writerIndex(), SSLEngineResult:bytesProduced(), ByteBuf:writerIndex(int), SSLEngineResult:getStatus(), SSLEngineResult$Status:ordinal(), SSLEngine:getSession(), SSLSession:getApplicationBufferSize(), ByteBuf:ensureWritable(int)),
		SslHandler:runDelegatedTasks() to listOf(SSLEngine:getDelegatedTask()),
		SslHandler:setHandshakeSuccess() to listOf(ChannelHandlerContext:channel(), SslHandler$LazyChannelPromise:trySuccess(Object), ChannelHandlerContext:fireUserEventTriggered(Object)),
		SslHandler:setHandshakeFailure(Throwable) to listOf(SSLEngine:closeOutbound(), SSLEngine:closeInbound(), InternalLogger:debug(String-Throwable), InternalLogger:debug(String-Throwable), SslHandler:notifyHandshakeFailure(Throwable), SslHandler$PendingWrite:fail(Throwable)),
		SslHandler:notifyHandshakeFailure(Throwable) to listOf(SslHandler$LazyChannelPromise:tryFailure(Throwable), SslHandshakeCompletionEvent:<init>(Throwable), ChannelHandlerContext:fireUserEventTriggered(Object), ChannelHandlerContext:close()),
		SslHandler:closeOutboundAndChannel(ChannelHandlerContext-ChannelPromise-boolean) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:disconnect(ChannelPromise), ChannelHandlerContext:close(ChannelPromise), SSLEngine:closeOutbound(), ChannelHandlerContext:newPromise(), ChannelPromise:addListener(GenericFutureListener), SslHandler:write(ChannelHandlerContext-Object-ChannelPromise), SslHandler:flush(ChannelHandlerContext), SslHandler:safeClose(ChannelHandlerContext-ChannelFuture-ChannelPromise)),
		SslHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), SslHandler:handshake0()),
		SslHandler:handshake0() to listOf(ChannelHandlerContext:executor(), SslHandler$2:<init>(SslHandler), EventExecutor:schedule(Runnable-long-TimeUnit), SslHandler$3:<init>(SslHandler-ScheduledFuture), SslHandler$LazyChannelPromise:addListener(GenericFutureListener), SSLEngine:beginHandshake(), SslHandler:flushNonAppData0(ChannelHandlerContext-boolean), SslHandler:notifyHandshakeFailure(Throwable)),
		SslHandler:channelActive(ChannelHandlerContext) to listOf(SSLEngine:getUseClientMode(), SslHandler:handshake0(), SslHandler$4:<init>(SslHandler-ChannelHandlerContext), Future:addListener(GenericFutureListener), ChannelHandlerContext:fireChannelActive()),
		SslHandler:safeClose(ChannelHandlerContext-ChannelFuture-ChannelPromise) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:close(ChannelPromise), ChannelHandlerContext:executor(), SslHandler$5:<init>(SslHandler-ChannelHandlerContext-ChannelPromise), EventExecutor:schedule(Runnable-long-TimeUnit), SslHandler$6:<init>(SslHandler-ScheduledFuture-ChannelHandlerContext-ChannelPromise), ChannelFuture:addListener(GenericFutureListener)),
		SslHandler:access$700(SslHandler-Throwable) to listOf(SslHandler:notifyHandshakeFailure(Throwable)),
		SslHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SSLException:<init>(String), SSLException:<init>(String), SSLException:setStackTrace(StackTraceElement[]), SSLException:setStackTrace(StackTraceElement[])),
		SslHandshakeCompletionEvent:<clinit>() to listOf(SslHandshakeCompletionEvent:<init>()),
		ChunkedFile:<init>(File) to listOf(ChunkedFile:<init>(File-int)),
		ChunkedFile:<init>(File-int) to listOf(ChunkedFile:<init>(RandomAccessFile-int)),
		ChunkedFile:<init>(RandomAccessFile) to listOf(ChunkedFile:<init>(RandomAccessFile-int)),
		ChunkedFile:<init>(RandomAccessFile-int) to listOf(ChunkedFile:<init>(RandomAccessFile-long-long-int)),
		ChunkedFile:readChunk(ChannelHandlerContext) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:heapBuffer(int), ByteBuf:array(), ByteBuf:arrayOffset(), ByteBuf:writerIndex(int), ByteBuf:release(), ByteBuf:release(), ChunkedFile:readChunk(ChannelHandlerContext)),
		ChunkedNioFile:<init>(File) to listOf(ChunkedNioFile:<init>(FileChannel)),
		ChunkedNioFile:<init>(File-int) to listOf(ChunkedNioFile:<init>(FileChannel-int)),
		ChunkedNioFile:<init>(FileChannel) to listOf(ChunkedNioFile:<init>(FileChannel-int)),
		ChunkedNioFile:<init>(FileChannel-int) to listOf(ChunkedNioFile:<init>(FileChannel-long-long-int)),
		ChunkedNioFile:readChunk(ChannelHandlerContext) to listOf(ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ScatteringByteChannel-int), ByteBuf:release(), ByteBuf:release(), ChunkedNioFile:readChunk(ChannelHandlerContext)),
		ChunkedNioStream:<init>(ReadableByteChannel) to listOf(ChunkedNioStream:<init>(ReadableByteChannel-int)),
		ChunkedNioStream:readChunk(ChannelHandlerContext) to listOf(ChunkedNioStream:isEndOfInput(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(ByteBuffer), ByteBuf:release(), ByteBuf:release(), ChunkedNioStream:readChunk(ChannelHandlerContext)),
		ChunkedStream:<init>(InputStream) to listOf(ChunkedStream:<init>(InputStream-int)),
		ChunkedStream:readChunk(ChannelHandlerContext) to listOf(ChunkedStream:isEndOfInput(), ChannelHandlerContext:alloc(), ByteBufAllocator:buffer(int), ByteBuf:writeBytes(InputStream-int), ByteBuf:release(), ByteBuf:release(), ChunkedStream:readChunk(ChannelHandlerContext)),
		ChunkedWriteHandler$1:run() to listOf(ChunkedWriteHandler:access$000(ChunkedWriteHandler-ChannelHandlerContext), ChunkedWriteHandler:access$100(), InternalLogger:isWarnEnabled(), ChunkedWriteHandler:access$100(), InternalLogger:warn(String-Throwable)),
		ChunkedWriteHandler$2:run() to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable)),
		ChunkedWriteHandler$3:operationComplete(ChannelFuture) to listOf(ChunkedWriteHandler:access$200(ChunkedWriteHandler), ChannelPromise:setSuccess(), ChunkedWriteHandler:closeInput(ChunkedInput)),
		ChunkedWriteHandler$3:operationComplete(Future) to listOf(ChunkedWriteHandler$3:operationComplete(ChannelFuture)),
		ChunkedWriteHandler$4:operationComplete(ChannelFuture) to listOf(ChunkedWriteHandler:access$200(ChunkedWriteHandler), ChannelFuture:isSuccess(), ChunkedWriteHandler:closeInput(ChunkedInput), ChannelFuture:cause(), ChunkedWriteHandler$PendingWrite:fail(Throwable)),
		ChunkedWriteHandler$4:operationComplete(Future) to listOf(ChunkedWriteHandler$4:operationComplete(ChannelFuture)),
		ChunkedWriteHandler$5:operationComplete(ChannelFuture) to listOf(ChunkedWriteHandler:access$200(ChunkedWriteHandler), ChannelFuture:isSuccess(), ChunkedWriteHandler:closeInput(ChunkedInput), ChannelFuture:cause(), ChunkedWriteHandler$PendingWrite:fail(Throwable), ChunkedWriteHandler:access$300(ChunkedWriteHandler), ChunkedWriteHandler:resumeTransfer()),
		ChunkedWriteHandler$5:operationComplete(Future) to listOf(ChunkedWriteHandler$5:operationComplete(ChannelFuture)),
		ChunkedWriteHandler$PendingWrite:fail(Throwable) to listOf(ReferenceCountUtil:release(Object), ChannelPromise:setFailure(Throwable)),
		ChunkedWriteHandler:<init>() to listOf(ChunkedWriteHandler:<init>(int)),
		ChunkedWriteHandler:<init>(int) to listOf(ChannelDuplexHandler:<init>()),
		ChunkedWriteHandler:resumeTransfer() to listOf(ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), ChunkedWriteHandler:doFlush(ChannelHandlerContext), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable), ChannelHandlerContext:executor(), ChunkedWriteHandler$1:<init>(ChunkedWriteHandler-ChannelHandlerContext), EventExecutor:execute(Runnable)),
		ChunkedWriteHandler:read(ChannelHandlerContext) to listOf(ChannelHandlerContext:read()),
		ChunkedWriteHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ChunkedWriteHandler$PendingWrite:<init>(Object-ChannelPromise)),
		ChunkedWriteHandler:flush(ChannelHandlerContext) to listOf(ChunkedWriteHandler:isWritable(), ChannelHandlerContext:channel(), Channel:isActive(), ChunkedWriteHandler:doFlush(ChannelHandlerContext)),
		ChunkedWriteHandler:channelInactive(ChannelHandlerContext) to listOf(ChunkedWriteHandler:doFlush(ChannelHandlerContext), ChannelDuplexHandler:channelInactive(ChannelHandlerContext)),
		ChunkedWriteHandler:discard(Throwable) to listOf(ChunkedInput:isEndOfInput(), ChunkedWriteHandler$PendingWrite:fail(Throwable), ChannelPromise:setSuccess(), ChunkedWriteHandler:closeInput(ChunkedInput), ChunkedWriteHandler$PendingWrite:fail(Throwable), InternalLogger:warn(String-Throwable), ChunkedWriteHandler:closeInput(ChunkedInput), ChunkedWriteHandler$PendingWrite:fail(Throwable)),
		ChunkedWriteHandler:doFlush(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChunkedWriteHandler:discard(Throwable), ChunkedWriteHandler:isWritable(), ChunkedInput:readChunk(ChannelHandlerContext), ChunkedInput:isEndOfInput(), ReferenceCountUtil:release(Object), ChunkedWriteHandler$PendingWrite:fail(Throwable), ChannelHandlerContext:executor(), EventExecutor:inEventLoop(), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), ChunkedWriteHandler$2:<init>(ChunkedWriteHandler-ChannelHandlerContext-Throwable), EventExecutor:execute(Runnable), ChunkedWriteHandler:closeInput(ChunkedInput), ChannelHandlerContext:write(Object), ChunkedWriteHandler$3:<init>(ChunkedWriteHandler-ChunkedWriteHandler$PendingWrite-ChunkedInput), ChannelFuture:addListener(GenericFutureListener), ChunkedWriteHandler:isWritable(), ChunkedWriteHandler$4:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite), ChannelFuture:addListener(GenericFutureListener), ChunkedWriteHandler$5:<init>(ChunkedWriteHandler-Object-ChunkedWriteHandler$PendingWrite), ChannelFuture:addListener(GenericFutureListener), ChannelHandlerContext:write(Object-ChannelPromise), ChannelHandlerContext:flush(), Channel:isActive(), ChunkedWriteHandler:discard(Throwable)),
		ChunkedWriteHandler:closeInput(ChunkedInput) to listOf(ChunkedInput:close(), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		ChunkedWriteHandler:access$000(ChunkedWriteHandler-ChannelHandlerContext) to listOf(ChunkedWriteHandler:doFlush(ChannelHandlerContext)),
		ChunkedWriteHandler:access$300(ChunkedWriteHandler) to listOf(ChunkedWriteHandler:isWritable()),
		ChunkedWriteHandler:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		IdleState:values() to listOf(IdleState[]:clone()),
		IdleState:<clinit>() to listOf(IdleState:<init>(String-int), IdleState:<init>(String-int), IdleState:<init>(String-int)),
		IdleStateEvent:<clinit>() to listOf(IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean), IdleStateEvent:<init>(IdleState-boolean)),
		IdleStateHandler$1:operationComplete(ChannelFuture) to listOf(IdleStateHandler:access$102(IdleStateHandler-boolean), IdleStateHandler:access$002(IdleStateHandler-boolean)),
		IdleStateHandler$1:operationComplete(Future) to listOf(IdleStateHandler$1:operationComplete(ChannelFuture)),
		IdleStateHandler$AllIdleTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), IdleStateHandler:access$500(IdleStateHandler), ChannelHandlerContext:executor(), IdleStateHandler:access$500(IdleStateHandler), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler:access$100(IdleStateHandler), IdleStateHandler:access$102(IdleStateHandler-boolean), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit)),
		IdleStateHandler$ReaderIdleTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), IdleStateHandler:access$200(IdleStateHandler), ChannelHandlerContext:executor(), IdleStateHandler:access$200(IdleStateHandler), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler:access$300(IdleStateHandler), IdleStateHandler:access$302(IdleStateHandler-boolean), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit)),
		IdleStateHandler$WriterIdleTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), IdleStateHandler:access$400(IdleStateHandler), ChannelHandlerContext:executor(), IdleStateHandler:access$400(IdleStateHandler), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler:access$000(IdleStateHandler), IdleStateHandler:access$002(IdleStateHandler-boolean), IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit)),
		IdleStateHandler:<init>(int-int-int) to listOf(IdleStateHandler:<init>(long-long-long-TimeUnit)),
		IdleStateHandler:<init>(long-long-long-TimeUnit) to listOf(ChannelDuplexHandler:<init>()),
		IdleStateHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:channel(), Channel:isRegistered(), IdleStateHandler:initialize(ChannelHandlerContext)),
		IdleStateHandler:handlerRemoved(ChannelHandlerContext) to listOf(IdleStateHandler:destroy()),
		IdleStateHandler:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), IdleStateHandler:initialize(ChannelHandlerContext), ChannelDuplexHandler:channelRegistered(ChannelHandlerContext)),
		IdleStateHandler:channelActive(ChannelHandlerContext) to listOf(IdleStateHandler:initialize(ChannelHandlerContext), ChannelDuplexHandler:channelActive(ChannelHandlerContext)),
		IdleStateHandler:channelInactive(ChannelHandlerContext) to listOf(IdleStateHandler:destroy(), ChannelDuplexHandler:channelInactive(ChannelHandlerContext)),
		IdleStateHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		IdleStateHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(IdleStateHandler$1:<init>(IdleStateHandler), ChannelPromise:addListener(GenericFutureListener), ChannelHandlerContext:write(Object-ChannelPromise)),
		IdleStateHandler:initialize(ChannelHandlerContext) to listOf(ChannelHandlerContext:executor(), IdleStateHandler$ReaderIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler$WriterIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit), IdleStateHandler$AllIdleTimeoutTask:<init>(IdleStateHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit)),
		IdleStateHandler:channelIdle(ChannelHandlerContext-IdleStateEvent) to listOf(ChannelHandlerContext:fireUserEventTriggered(Object)),
		ReadTimeoutException:<init>() to listOf(TimeoutException:<init>()),
		ReadTimeoutException:<clinit>() to listOf(ReadTimeoutException:<init>()),
		ReadTimeoutHandler$ReadTimeoutTask:run() to listOf(ChannelHandlerContext:channel(), Channel:isOpen(), ReadTimeoutHandler:access$000(ReadTimeoutHandler), ReadTimeoutHandler:access$100(ReadTimeoutHandler), ChannelHandlerContext:executor(), ReadTimeoutHandler:access$000(ReadTimeoutHandler), EventExecutor:schedule(Runnable-long-TimeUnit), ReadTimeoutHandler:access$202(ReadTimeoutHandler-ScheduledFuture), ReadTimeoutHandler:readTimedOut(ChannelHandlerContext), ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit), ReadTimeoutHandler:access$202(ReadTimeoutHandler-ScheduledFuture)),
		ReadTimeoutHandler:<init>(int) to listOf(ReadTimeoutHandler:<init>(long-TimeUnit)),
		ReadTimeoutHandler:<init>(long-TimeUnit) to listOf(ChannelInboundHandlerAdapter:<init>()),
		ReadTimeoutHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ChannelHandlerContext:channel(), Channel:isRegistered(), ReadTimeoutHandler:initialize(ChannelHandlerContext)),
		ReadTimeoutHandler:handlerRemoved(ChannelHandlerContext) to listOf(ReadTimeoutHandler:destroy()),
		ReadTimeoutHandler:channelRegistered(ChannelHandlerContext) to listOf(ChannelHandlerContext:channel(), Channel:isActive(), ReadTimeoutHandler:initialize(ChannelHandlerContext), ChannelInboundHandlerAdapter:channelRegistered(ChannelHandlerContext)),
		ReadTimeoutHandler:channelActive(ChannelHandlerContext) to listOf(ReadTimeoutHandler:initialize(ChannelHandlerContext), ChannelInboundHandlerAdapter:channelActive(ChannelHandlerContext)),
		ReadTimeoutHandler:channelInactive(ChannelHandlerContext) to listOf(ReadTimeoutHandler:destroy(), ChannelInboundHandlerAdapter:channelInactive(ChannelHandlerContext)),
		ReadTimeoutHandler:channelRead(ChannelHandlerContext-Object) to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		ReadTimeoutHandler:initialize(ChannelHandlerContext) to listOf(ChannelHandlerContext:executor(), ReadTimeoutHandler$ReadTimeoutTask:<init>(ReadTimeoutHandler-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit)),
		ReadTimeoutHandler:readTimedOut(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:close()),
		TimeoutException:<init>() to listOf(ChannelException:<init>()),
		WriteTimeoutException:<init>() to listOf(TimeoutException:<init>()),
		WriteTimeoutException:<clinit>() to listOf(WriteTimeoutException:<init>()),
		WriteTimeoutHandler$1:run() to listOf(ChannelPromise:tryFailure(Throwable), WriteTimeoutHandler:writeTimedOut(ChannelHandlerContext), ChannelHandlerContext:fireExceptionCaught(Throwable)),
		WriteTimeoutHandler$2:operationComplete(Future) to listOf(WriteTimeoutHandler$2:operationComplete(ChannelFuture)),
		WriteTimeoutHandler:<init>(int) to listOf(WriteTimeoutHandler:<init>(long-TimeUnit)),
		WriteTimeoutHandler:<init>(long-TimeUnit) to listOf(ChannelOutboundHandlerAdapter:<init>()),
		WriteTimeoutHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(WriteTimeoutHandler:scheduleTimeout(ChannelHandlerContext-ChannelPromise), ChannelHandlerContext:write(Object-ChannelPromise)),
		WriteTimeoutHandler:scheduleTimeout(ChannelHandlerContext-ChannelPromise) to listOf(ChannelHandlerContext:executor(), WriteTimeoutHandler$1:<init>(WriteTimeoutHandler-ChannelPromise-ChannelHandlerContext), EventExecutor:schedule(Runnable-long-TimeUnit), WriteTimeoutHandler$2:<init>(WriteTimeoutHandler-ScheduledFuture), ChannelPromise:addListener(GenericFutureListener)),
		WriteTimeoutHandler:writeTimedOut(ChannelHandlerContext) to listOf(ChannelHandlerContext:fireExceptionCaught(Throwable), ChannelHandlerContext:close()),
		AbstractTrafficShapingHandler$1:run() to listOf(ChannelHandlerContext:fireChannelRead(Object)),
		AbstractTrafficShapingHandler$2:run() to listOf(ChannelHandlerContext:write(Object)),
		AbstractTrafficShapingHandler$ReopenReadTimerTask:run() to listOf(AbstractTrafficShapingHandler:access$000(), ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object), ChannelHandlerContext:read()),
		AbstractTrafficShapingHandler:<init>(long-long-long) to listOf(ChannelDuplexHandler:<init>()),
		AbstractTrafficShapingHandler:<init>(long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long)),
		AbstractTrafficShapingHandler:<init>() to listOf(AbstractTrafficShapingHandler:<init>(long-long-long)),
		AbstractTrafficShapingHandler:<init>(long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long)),
		AbstractTrafficShapingHandler:configure(long-long-long) to listOf(AbstractTrafficShapingHandler:configure(long-long), AbstractTrafficShapingHandler:configure(long)),
		AbstractTrafficShapingHandler:configure(long-long) to listOf(TrafficCounter:resetAccounting(long)),
		AbstractTrafficShapingHandler:configure(long) to listOf(TrafficCounter:configure(long)),
		AbstractTrafficShapingHandler:channelRead(ChannelHandlerContext-Object) to listOf(ByteBuf:readableBytes(), TrafficCounter:bytesRecvFlowControl(long), ChannelHandlerContext:fireChannelRead(Object), TrafficCounter:currentReadBytes(), TrafficCounter:lastTime(), AbstractTrafficShapingHandler:getTimeToWait(long-long-long-long), AbstractTrafficShapingHandler:isSuspended(ChannelHandlerContext), ChannelHandlerContext:attr(AttributeKey), Attribute:set(Object), ChannelHandlerContext:attr(AttributeKey), Attribute:get(), AbstractTrafficShapingHandler$ReopenReadTimerTask:<init>(ChannelHandlerContext), Attribute:set(Object), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit), AbstractTrafficShapingHandler$1:<init>(AbstractTrafficShapingHandler-ChannelHandlerContext-Object), ChannelHandlerContext:executor(), EventExecutor:schedule(Runnable-long-TimeUnit), ChannelHandlerContext:fireChannelRead(Object)),
		AbstractTrafficShapingHandler:read(ChannelHandlerContext) to listOf(AbstractTrafficShapingHandler:isSuspended(ChannelHandlerContext), ChannelHandlerContext:read()),
		AbstractTrafficShapingHandler:isSuspended(ChannelHandlerContext) to listOf(ChannelHandlerContext:attr(AttributeKey), Attribute:get()),
		AbstractTrafficShapingHandler:write(ChannelHandlerContext-Object-ChannelPromise) to listOf(ByteBuf:readableBytes(), TrafficCounter:bytesWriteFlowControl(long), ChannelHandlerContext:write(Object), TrafficCounter:currentWrittenBytes(), TrafficCounter:lastTime(), AbstractTrafficShapingHandler:getTimeToWait(long-long-long-long), ChannelHandlerContext:executor(), AbstractTrafficShapingHandler$2:<init>(AbstractTrafficShapingHandler-ChannelHandlerContext-Object), EventExecutor:schedule(Runnable-long-TimeUnit), ChannelHandlerContext:write(Object-ChannelPromise)),
		AbstractTrafficShapingHandler:handlerRemoved(ChannelHandlerContext) to listOf(TrafficCounter:stop()),
		AbstractTrafficShapingHandler:toString() to listOf(TrafficCounter:toString()),
		AbstractTrafficShapingHandler:<clinit>() to listOf(AttributeKey:<init>(String), AttributeKey:<init>(String)),
		ChannelTrafficShapingHandler:<init>(long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long)),
		ChannelTrafficShapingHandler:<init>(long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long)),
		ChannelTrafficShapingHandler:<init>(long) to listOf(AbstractTrafficShapingHandler:<init>(long)),
		ChannelTrafficShapingHandler:handlerAdded(ChannelHandlerContext) to listOf(ChannelHandlerContext:executor(), ChannelHandlerContext:channel(), TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long), ChannelTrafficShapingHandler:setTrafficCounter(TrafficCounter), TrafficCounter:start()),
		GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService) to listOf(TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long), GlobalTrafficShapingHandler:setTrafficCounter(TrafficCounter), TrafficCounter:start()),
		GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long-long), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long-long) to listOf(AbstractTrafficShapingHandler:<init>(long-long), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:<init>(ScheduledExecutorService-long) to listOf(AbstractTrafficShapingHandler:<init>(long), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:<init>(EventExecutor) to listOf(AbstractTrafficShapingHandler:<init>(), GlobalTrafficShapingHandler:createGlobalTrafficCounter(ScheduledExecutorService)),
		GlobalTrafficShapingHandler:release() to listOf(TrafficCounter:stop()),
		TrafficCounter$TrafficMonitoringTask:run() to listOf(TrafficCounter:resetAccounting(long), AbstractTrafficShapingHandler:doAccounting(TrafficCounter), TrafficCounter:access$100(TrafficCounter), TrafficCounter:access$002(TrafficCounter-ScheduledFuture)),
		TrafficCounter:start() to listOf(TrafficCounter$TrafficMonitoringTask:<init>(AbstractTrafficShapingHandler-TrafficCounter)),
		TrafficCounter:stop() to listOf(TrafficCounter:resetAccounting(long), AbstractTrafficShapingHandler:doAccounting(TrafficCounter)),
		TrafficCounter:<init>(AbstractTrafficShapingHandler-ScheduledExecutorService-String-long) to listOf(TrafficCounter:configure(long)),
		TrafficCounter:configure(long) to listOf(TrafficCounter:stop(), TrafficCounter:start()),
		AbstractReferenceCounted:refCnt() to listOf(PlatformDependent:getInt(Object-long)),
		AbstractReferenceCounted:retain() to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int)),
		AbstractReferenceCounted:retain(int) to listOf(IllegalReferenceCountException:<init>(int-int), IllegalReferenceCountException:<init>(int-int)),
		AbstractReferenceCounted:release() to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCounted:deallocate()),
		AbstractReferenceCounted:release(int) to listOf(IllegalReferenceCountException:<init>(int-int), AbstractReferenceCounted:deallocate()),
		AbstractReferenceCounted:<clinit>() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent:objectFieldOffset(Field)),
		AttributeKey:<init>(String) to listOf(UniqueName:<init>(ConcurrentMap-String-Object[])),
		AttributeKey:<clinit>() to listOf(PlatformDependent:newConcurrentHashMap()),
		CharsetUtil$1:initialValue() to listOf(CharsetUtil$1:initialValue()),
		CharsetUtil$2:initialValue() to listOf(CharsetUtil$2:initialValue()),
		CharsetUtil:<clinit>() to listOf(CharsetUtil$1:<init>(), CharsetUtil$2:<init>()),
		AbstractEventExecutor$EventExecutorIterator:next() to listOf(AbstractEventExecutor$EventExecutorIterator:hasNext(), AbstractEventExecutor$EventExecutorIterator:next()),
		AbstractEventExecutor$EventExecutorIterator:<init>(AbstractEventExecutor-AbstractEventExecutor$1) to listOf(AbstractEventExecutor$EventExecutorIterator:<init>(AbstractEventExecutor)),
		AbstractEventExecutor:inEventLoop() to listOf(AbstractEventExecutor:inEventLoop(Thread)),
		AbstractEventExecutor:iterator() to listOf(AbstractEventExecutor$EventExecutorIterator:<init>(AbstractEventExecutor-AbstractEventExecutor$1)),
		AbstractEventExecutor:shutdownGracefully() to listOf(AbstractEventExecutor:shutdownGracefully(long-long-TimeUnit)),
		AbstractEventExecutor:shutdownNow() to listOf(AbstractEventExecutor:shutdown()),
		AbstractEventExecutor:newPromise() to listOf(DefaultPromise:<init>(EventExecutor)),
		AbstractEventExecutor:newProgressivePromise() to listOf(DefaultProgressivePromise:<init>(EventExecutor)),
		AbstractEventExecutor:newSucceededFuture(Object) to listOf(SucceededFuture:<init>(EventExecutor-Object)),
		AbstractEventExecutor:newFailedFuture(Throwable) to listOf(FailedFuture:<init>(EventExecutor-Throwable)),
		AbstractEventExecutor:submit(Runnable) to listOf(AbstractEventExecutor:submit(Runnable)),
		AbstractEventExecutor:submit(Runnable-Object) to listOf(AbstractEventExecutor:submit(Runnable-Object)),
		AbstractEventExecutor:submit(Callable) to listOf(AbstractEventExecutor:submit(Callable)),
		AbstractEventExecutor:newTaskFor(Runnable-Object) to listOf(PromiseTask:<init>(EventExecutor-Runnable-Object)),
		AbstractEventExecutor:newTaskFor(Callable) to listOf(PromiseTask:<init>(EventExecutor-Callable)),
		AbstractEventExecutor:schedule(Runnable-long-TimeUnit) to listOf(AbstractEventExecutor:schedule(Runnable-long-TimeUnit)),
		AbstractEventExecutor:schedule(Callable-long-TimeUnit) to listOf(AbstractEventExecutor:schedule(Callable-long-TimeUnit)),
		AbstractEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		AbstractEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		AbstractEventExecutorGroup:submit(Runnable) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:submit(Runnable), AbstractEventExecutorGroup:submit(Runnable)),
		AbstractEventExecutorGroup:submit(Runnable-Object) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:submit(Runnable-Object), AbstractEventExecutorGroup:submit(Runnable-Object)),
		AbstractEventExecutorGroup:submit(Callable) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:submit(Callable), AbstractEventExecutorGroup:submit(Callable)),
		AbstractEventExecutorGroup:schedule(Runnable-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:schedule(Runnable-long-TimeUnit), AbstractEventExecutorGroup:schedule(Runnable-long-TimeUnit)),
		AbstractEventExecutorGroup:schedule(Callable-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:schedule(Callable-long-TimeUnit), AbstractEventExecutorGroup:schedule(Callable-long-TimeUnit)),
		AbstractEventExecutorGroup:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit), AbstractEventExecutorGroup:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		AbstractEventExecutorGroup:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit), AbstractEventExecutorGroup:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		AbstractEventExecutorGroup:shutdownGracefully() to listOf(AbstractEventExecutorGroup:shutdownGracefully(long-long-TimeUnit)),
		AbstractEventExecutorGroup:shutdownNow() to listOf(AbstractEventExecutorGroup:shutdown()),
		AbstractEventExecutorGroup:invokeAll(Collection) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAll(Collection)),
		AbstractEventExecutorGroup:invokeAll(Collection-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAll(Collection-long-TimeUnit)),
		AbstractEventExecutorGroup:invokeAny(Collection) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAny(Collection)),
		AbstractEventExecutorGroup:invokeAny(Collection-long-TimeUnit) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:invokeAny(Collection-long-TimeUnit)),
		AbstractEventExecutorGroup:execute(Runnable) to listOf(AbstractEventExecutorGroup:next(), EventExecutor:execute(Runnable)),
		AbstractFuture:get() to listOf(AbstractFuture:await(), AbstractFuture:cause(), AbstractFuture:getNow()),
		AbstractFuture:get(long-TimeUnit) to listOf(AbstractFuture:await(long-TimeUnit), AbstractFuture:cause(), AbstractFuture:getNow()),
		CompleteFuture:<init>(EventExecutor) to listOf(AbstractFuture:<init>()),
		CompleteFuture:addListener(GenericFutureListener) to listOf(CompleteFuture:executor(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener)),
		CompleteFuture:addListeners(GenericFutureListener[]) to listOf(CompleteFuture:executor(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener)),
		DefaultEventExecutor:<init>(DefaultEventExecutorGroup-ThreadFactory) to listOf(SingleThreadEventExecutor:<init>(EventExecutorGroup-ThreadFactory-boolean)),
		DefaultEventExecutor:run() to listOf(DefaultEventExecutor:takeTask(), DefaultEventExecutor:updateLastExecutionTime(), DefaultEventExecutor:confirmShutdown()),
		DefaultEventExecutorGroup:<init>(int) to listOf(DefaultEventExecutorGroup:<init>(int-ThreadFactory)),
		DefaultEventExecutorGroup:<init>(int-ThreadFactory) to listOf(MultithreadEventExecutorGroup:<init>(int-ThreadFactory-Object[])),
		DefaultEventExecutorGroup:newChild(ThreadFactory-Object[]) to listOf(DefaultEventExecutor:<init>(DefaultEventExecutorGroup-ThreadFactory)),
		DefaultProgressivePromise:<init>(EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor)),
		DefaultProgressivePromise:<init>() to listOf(DefaultPromise:<init>()),
		DefaultProgressivePromise:setProgress(long-long) to listOf(DefaultProgressivePromise:isDone(), DefaultProgressivePromise:notifyProgressiveListeners(long-long)),
		DefaultProgressivePromise:tryProgress(long-long) to listOf(DefaultProgressivePromise:isDone(), DefaultProgressivePromise:notifyProgressiveListeners(long-long)),
		DefaultProgressivePromise:addListener(GenericFutureListener) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultProgressivePromise:addListener(GenericFutureListener), DefaultProgressivePromise:addListener(GenericFutureListener), DefaultProgressivePromise:addListener(GenericFutureListener)),
		DefaultProgressivePromise:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListeners(GenericFutureListener[]), DefaultProgressivePromise:addListeners(GenericFutureListener[]), DefaultProgressivePromise:addListeners(GenericFutureListener[]), DefaultProgressivePromise:addListeners(GenericFutureListener[])),
		DefaultProgressivePromise:removeListener(GenericFutureListener) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultProgressivePromise:removeListener(GenericFutureListener), DefaultProgressivePromise:removeListener(GenericFutureListener), DefaultProgressivePromise:removeListener(GenericFutureListener)),
		DefaultProgressivePromise:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListeners(GenericFutureListener[]), DefaultProgressivePromise:removeListeners(GenericFutureListener[]), DefaultProgressivePromise:removeListeners(GenericFutureListener[]), DefaultProgressivePromise:removeListeners(GenericFutureListener[])),
		DefaultProgressivePromise:sync() to listOf(DefaultPromise:sync(), DefaultProgressivePromise:sync(), DefaultProgressivePromise:sync(), DefaultProgressivePromise:sync()),
		DefaultProgressivePromise:syncUninterruptibly() to listOf(DefaultPromise:syncUninterruptibly(), DefaultProgressivePromise:syncUninterruptibly(), DefaultProgressivePromise:syncUninterruptibly(), DefaultProgressivePromise:syncUninterruptibly()),
		DefaultProgressivePromise:await() to listOf(DefaultPromise:await(), DefaultProgressivePromise:await(), DefaultProgressivePromise:await(), DefaultProgressivePromise:await()),
		DefaultProgressivePromise:awaitUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultProgressivePromise:awaitUninterruptibly(), DefaultProgressivePromise:awaitUninterruptibly(), DefaultProgressivePromise:awaitUninterruptibly()),
		DefaultProgressivePromise:setSuccess(Object) to listOf(DefaultPromise:setSuccess(Object), DefaultProgressivePromise:setSuccess(Object)),
		DefaultProgressivePromise:setFailure(Throwable) to listOf(DefaultPromise:setFailure(Throwable), DefaultProgressivePromise:setFailure(Throwable)),
		DefaultPromise$1:initialValue() to listOf(DefaultPromise$1:initialValue()),
		DefaultPromise$2:run() to listOf(DefaultPromise:access$100(Future-DefaultFutureListeners)),
		DefaultPromise$3:run() to listOf(DefaultPromise:access$200(Future-GenericFutureListener)),
		DefaultPromise$4:run() to listOf(DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener)),
		DefaultPromise$5:run() to listOf(DefaultPromise:access$300(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long)),
		DefaultPromise$6:run() to listOf(DefaultPromise:access$400(ProgressiveFuture-GenericProgressiveFutureListener-long-long)),
		DefaultPromise$CauseHolder:<init>(Throwable-DefaultPromise$1) to listOf(DefaultPromise$CauseHolder:<init>(Throwable)),
		DefaultPromise:<init>(EventExecutor) to listOf(AbstractFuture:<init>()),
		DefaultPromise:<init>() to listOf(AbstractFuture:<init>()),
		DefaultPromise:isCancelled() to listOf(DefaultPromise:isCancelled0(Object)),
		DefaultPromise:isDone() to listOf(DefaultPromise:isDone0(Object)),
		DefaultPromise:addListener(GenericFutureListener) to listOf(DefaultPromise:isDone(), DefaultPromise:executor(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener), DefaultPromise:isDone(), DefaultFutureListeners:add(GenericFutureListener), DefaultFutureListeners:<init>(GenericFutureListener-GenericFutureListener), DefaultPromise:executor(), DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener), DefaultPromise:addListener(GenericFutureListener)),
		DefaultPromise:addListeners(GenericFutureListener[]) to listOf(DefaultPromise:addListener(GenericFutureListener), DefaultPromise:addListeners(GenericFutureListener[])),
		DefaultPromise:removeListener(GenericFutureListener) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultFutureListeners:remove(GenericFutureListener), DefaultPromise:removeListener(GenericFutureListener)),
		DefaultPromise:removeListeners(GenericFutureListener[]) to listOf(DefaultPromise:removeListener(GenericFutureListener), DefaultPromise:removeListeners(GenericFutureListener[])),
		DefaultPromise:sync() to listOf(DefaultPromise:await(), DefaultPromise:rethrowIfFailed(), DefaultPromise:sync()),
		DefaultPromise:syncUninterruptibly() to listOf(DefaultPromise:awaitUninterruptibly(), DefaultPromise:rethrowIfFailed(), DefaultPromise:syncUninterruptibly()),
		DefaultPromise:rethrowIfFailed() to listOf(DefaultPromise:cause(), PlatformDependent:throwException(Throwable)),
		DefaultPromise:await() to listOf(DefaultPromise:isDone(), DefaultPromise:toString(), DefaultPromise:isDone(), DefaultPromise:checkDeadLock(), DefaultPromise:incWaiters(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters(), DefaultPromise:await()),
		DefaultPromise:await(long-TimeUnit) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:await(long) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:awaitUninterruptibly() to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:checkDeadLock(), DefaultPromise:incWaiters(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters(), DefaultPromise:awaitUninterruptibly()),
		DefaultPromise:awaitUninterruptibly(long-TimeUnit) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:awaitUninterruptibly(long) to listOf(DefaultPromise:await0(long-boolean)),
		DefaultPromise:await0(long-boolean) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:toString(), DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:checkDeadLock(), DefaultPromise:incWaiters(), DefaultPromise:isDone(), DefaultPromise:decWaiters(), DefaultPromise:isDone(), DefaultPromise:decWaiters(), DefaultPromise:decWaiters()),
		DefaultPromise:checkDeadLock() to listOf(DefaultPromise:executor(), EventExecutor:inEventLoop(), DefaultPromise:toString(), BlockingOperationException:<init>(String)),
		DefaultPromise:setSuccess(Object) to listOf(DefaultPromise:setSuccess0(Object), DefaultPromise:notifyListeners()),
		DefaultPromise:trySuccess(Object) to listOf(DefaultPromise:setSuccess0(Object), DefaultPromise:notifyListeners()),
		DefaultPromise:setFailure(Throwable) to listOf(DefaultPromise:setFailure0(Throwable), DefaultPromise:notifyListeners()),
		DefaultPromise:tryFailure(Throwable) to listOf(DefaultPromise:setFailure0(Throwable), DefaultPromise:notifyListeners()),
		DefaultPromise:cancel(boolean) to listOf(DefaultPromise:isDone0(Object), DefaultPromise:isDone0(Object), DefaultPromise$CauseHolder:<init>(Throwable-DefaultPromise$1), DefaultPromise:hasWaiters(), DefaultPromise:notifyListeners()),
		DefaultPromise:setUncancellable() to listOf(DefaultPromise:isDone0(Object), DefaultPromise:isDone0(Object)),
		DefaultPromise:setFailure0(Throwable) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise$CauseHolder:<init>(Throwable-DefaultPromise$1), DefaultPromise:hasWaiters()),
		DefaultPromise:setSuccess0(Object) to listOf(DefaultPromise:isDone(), DefaultPromise:isDone(), DefaultPromise:hasWaiters()),
		DefaultPromise:notifyListeners() to listOf(DefaultPromise:executor(), EventExecutor:inEventLoop(), DefaultPromise:notifyListeners0(Future-DefaultFutureListeners), DefaultPromise:notifyListener0(Future-GenericFutureListener), DefaultPromise$2:<init>(DefaultPromise-DefaultFutureListeners), EventExecutor:execute(Runnable), DefaultPromise$3:<init>(DefaultPromise-GenericFutureListener), EventExecutor:execute(Runnable), InternalLogger:error(String-Throwable)),
		DefaultPromise:notifyListeners0(Future-DefaultFutureListeners) to listOf(DefaultFutureListeners:listeners(), DefaultFutureListeners:size(), DefaultPromise:notifyListener0(Future-GenericFutureListener)),
		DefaultPromise:notifyListener(EventExecutor-Future-GenericFutureListener) to listOf(EventExecutor:inEventLoop(), DefaultPromise:notifyListener0(Future-GenericFutureListener), DefaultPromise$4:<init>(EventExecutor-Future-GenericFutureListener), EventExecutor:execute(Runnable), InternalLogger:error(String-Throwable)),
		DefaultPromise:notifyListener0(Future-GenericFutureListener) to listOf(GenericFutureListener:operationComplete(Future), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		DefaultPromise:progressiveListeners() to listOf(DefaultFutureListeners:progressiveSize(), DefaultFutureListeners:listeners(), DefaultFutureListeners:listeners()),
		DefaultPromise:notifyProgressiveListeners(long-long) to listOf(DefaultPromise:progressiveListeners(), DefaultPromise:executor(), EventExecutor:inEventLoop(), DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long), DefaultPromise$5:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener[]-long-long), EventExecutor:execute(Runnable), DefaultPromise$6:<init>(DefaultPromise-ProgressiveFuture-GenericProgressiveFutureListener-long-long), EventExecutor:execute(Runnable), InternalLogger:error(String-Throwable)),
		DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long) to listOf(DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long)),
		DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long) to listOf(GenericProgressiveFutureListener:operationProgressed(ProgressiveFuture-long-long), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		DefaultPromise:toString() to listOf(DefaultPromise:toStringBuilder()),
		DefaultPromise:toStringBuilder() to listOf(StringUtil:simpleClassName(Object)),
		DefaultPromise:access$100(Future-DefaultFutureListeners) to listOf(DefaultPromise:notifyListeners0(Future-DefaultFutureListeners)),
		DefaultPromise:access$200(Future-GenericFutureListener) to listOf(DefaultPromise:notifyListener0(Future-GenericFutureListener)),
		DefaultPromise:access$300(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long) to listOf(DefaultPromise:notifyProgressiveListeners0(ProgressiveFuture-GenericProgressiveFutureListener[]-long-long)),
		DefaultPromise:access$400(ProgressiveFuture-GenericProgressiveFutureListener-long-long) to listOf(DefaultPromise:notifyProgressiveListener0(ProgressiveFuture-GenericProgressiveFutureListener-long-long)),
		DefaultPromise:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), DefaultPromise$1:<init>(), Signal:<init>(String), Signal:<init>(String)),
		DefaultThreadFactory:<init>(Class) to listOf(DefaultThreadFactory:<init>(Class-boolean-int)),
		DefaultThreadFactory:<init>(String) to listOf(DefaultThreadFactory:<init>(String-boolean-int)),
		DefaultThreadFactory:<init>(Class-boolean) to listOf(DefaultThreadFactory:<init>(Class-boolean-int)),
		DefaultThreadFactory:<init>(String-boolean) to listOf(DefaultThreadFactory:<init>(String-boolean-int)),
		DefaultThreadFactory:<init>(Class-int) to listOf(DefaultThreadFactory:<init>(Class-boolean-int)),
		DefaultThreadFactory:<init>(String-int) to listOf(DefaultThreadFactory:<init>(String-boolean-int)),
		DefaultThreadFactory:<init>(Class-boolean-int) to listOf(DefaultThreadFactory:toPoolName(Class), DefaultThreadFactory:<init>(String-boolean-int)),
		FailedFuture:<init>(EventExecutor-Throwable) to listOf(CompleteFuture:<init>(EventExecutor)),
		FailedFuture:sync() to listOf(PlatformDependent:throwException(Throwable)),
		FailedFuture:syncUninterruptibly() to listOf(PlatformDependent:throwException(Throwable)),
		GlobalEventExecutor$PurgeTask:run() to listOf(ScheduledFutureTask:isCancelled()),
		GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor-GlobalEventExecutor$1) to listOf(GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor)),
		GlobalEventExecutor$TaskRunner:run() to listOf(GlobalEventExecutor:takeTask(), GlobalEventExecutor:access$100(), InternalLogger:warn(String-Throwable), GlobalEventExecutor:access$200(GlobalEventExecutor), GlobalEventExecutor:access$302(GlobalEventExecutor-int)),
		GlobalEventExecutor:<init>() to listOf(AbstractEventExecutor:<init>(), GlobalEventExecutor$PurgeTask:<init>(GlobalEventExecutor-GlobalEventExecutor$1), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long), DefaultThreadFactory:<init>(Class), GlobalEventExecutor$TaskRunner:<init>(GlobalEventExecutor), FailedFuture:<init>(EventExecutor-Throwable)),
		GlobalEventExecutor:takeTask() to listOf(ScheduledFutureTask:delayNanos(), GlobalEventExecutor:fetchFromDelayedQueue()),
		GlobalEventExecutor:fetchFromDelayedQueue() to listOf(ScheduledFutureTask:nanoTime(), ScheduledFutureTask:deadlineNanos()),
		GlobalEventExecutor:shutdownGracefully(long-long-TimeUnit) to listOf(GlobalEventExecutor:terminationFuture()),
		GlobalEventExecutor:execute(Runnable) to listOf(GlobalEventExecutor:inEventLoop(), GlobalEventExecutor:addTask(Runnable), GlobalEventExecutor:startThread(), GlobalEventExecutor:addTask(Runnable)),
		GlobalEventExecutor:schedule(Runnable-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Runnable-Object-long), GlobalEventExecutor:schedule(ScheduledFutureTask), GlobalEventExecutor:schedule(Runnable-long-TimeUnit)),
		GlobalEventExecutor:schedule(Callable-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long), GlobalEventExecutor:schedule(ScheduledFutureTask), GlobalEventExecutor:schedule(Callable-long-TimeUnit)),
		GlobalEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long), GlobalEventExecutor:schedule(ScheduledFutureTask), GlobalEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		GlobalEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long), GlobalEventExecutor:schedule(ScheduledFutureTask), GlobalEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		GlobalEventExecutor:schedule(ScheduledFutureTask) to listOf(GlobalEventExecutor:inEventLoop(), GlobalEventExecutor$1:<init>(GlobalEventExecutor-ScheduledFutureTask), GlobalEventExecutor:execute(Runnable)),
		GlobalEventExecutor:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), GlobalEventExecutor:<init>()),
		ImmediateEventExecutor$ImmediateProgressivePromise:<init>(EventExecutor) to listOf(DefaultProgressivePromise:<init>(EventExecutor)),
		ImmediateEventExecutor$ImmediatePromise:<init>(EventExecutor) to listOf(DefaultPromise:<init>(EventExecutor)),
		ImmediateEventExecutor:<init>() to listOf(AbstractEventExecutor:<init>(), FailedFuture:<init>(EventExecutor-Throwable)),
		ImmediateEventExecutor:shutdownGracefully(long-long-TimeUnit) to listOf(ImmediateEventExecutor:terminationFuture()),
		ImmediateEventExecutor:newPromise() to listOf(ImmediateEventExecutor$ImmediatePromise:<init>(EventExecutor)),
		ImmediateEventExecutor:newProgressivePromise() to listOf(ImmediateEventExecutor$ImmediateProgressivePromise:<init>(EventExecutor)),
		ImmediateEventExecutor:<clinit>() to listOf(ImmediateEventExecutor:<init>()),
		ImmediateExecutor:<clinit>() to listOf(ImmediateExecutor:<init>()),
		MultithreadEventExecutorGroup$1:operationComplete(Future) to listOf(MultithreadEventExecutorGroup:access$000(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$100(MultithreadEventExecutorGroup), MultithreadEventExecutorGroup:access$200(MultithreadEventExecutorGroup), Promise:setSuccess(Object)),
		MultithreadEventExecutorGroup:<init>(int-ThreadFactory-Object[]) to listOf(AbstractEventExecutorGroup:<init>(), DefaultPromise:<init>(EventExecutor), MultithreadEventExecutorGroup:newDefaultThreadFactory(), MultithreadEventExecutorGroup:newChild(ThreadFactory-Object[]), EventExecutor:shutdownGracefully(), EventExecutor:isTerminated(), EventExecutor:awaitTermination(long-TimeUnit), EventExecutor:shutdownGracefully(), EventExecutor:isTerminated(), EventExecutor:awaitTermination(long-TimeUnit), MultithreadEventExecutorGroup$1:<init>(MultithreadEventExecutorGroup), EventExecutor:terminationFuture(), Future:addListener(GenericFutureListener)),
		MultithreadEventExecutorGroup:newDefaultThreadFactory() to listOf(DefaultThreadFactory:<init>(Class)),
		MultithreadEventExecutorGroup:iterator() to listOf(MultithreadEventExecutorGroup:children()),
		MultithreadEventExecutorGroup:shutdownGracefully(long-long-TimeUnit) to listOf(EventExecutor:shutdownGracefully(long-long-TimeUnit), MultithreadEventExecutorGroup:terminationFuture()),
		MultithreadEventExecutorGroup:shutdown() to listOf(EventExecutor:shutdown()),
		MultithreadEventExecutorGroup:isShuttingDown() to listOf(EventExecutor:isShuttingDown()),
		MultithreadEventExecutorGroup:isShutdown() to listOf(EventExecutor:isShutdown()),
		MultithreadEventExecutorGroup:isTerminated() to listOf(EventExecutor:isTerminated()),
		MultithreadEventExecutorGroup:awaitTermination(long-TimeUnit) to listOf(EventExecutor:awaitTermination(long-TimeUnit), MultithreadEventExecutorGroup:isTerminated()),
		PromiseTask:toCallable(Runnable-Object) to listOf(PromiseTask$RunnableAdapter:<init>(Runnable-Object)),
		PromiseTask:<init>(EventExecutor-Runnable-Object) to listOf(PromiseTask:toCallable(Runnable-Object), PromiseTask:<init>(EventExecutor-Callable)),
		PromiseTask:<init>(EventExecutor-Callable) to listOf(DefaultPromise:<init>(EventExecutor)),
		PromiseTask:run() to listOf(PromiseTask:setUncancellableInternal(), PromiseTask:setSuccessInternal(Object), PromiseTask:setFailureInternal(Throwable)),
		PromiseTask:setFailureInternal(Throwable) to listOf(DefaultPromise:setFailure(Throwable)),
		PromiseTask:tryFailureInternal(Throwable) to listOf(DefaultPromise:tryFailure(Throwable)),
		PromiseTask:setSuccessInternal(Object) to listOf(DefaultPromise:setSuccess(Object)),
		PromiseTask:trySuccessInternal(Object) to listOf(DefaultPromise:trySuccess(Object)),
		PromiseTask:setUncancellableInternal() to listOf(DefaultPromise:setUncancellable()),
		PromiseTask:toStringBuilder() to listOf(DefaultPromise:toStringBuilder()),
		ScheduledFutureTask:deadlineNanos(long) to listOf(ScheduledFutureTask:nanoTime()),
		ScheduledFutureTask:<init>(EventExecutor-Queue-Runnable-Object-long) to listOf(ScheduledFutureTask:toCallable(Runnable-Object), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long)),
		ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long) to listOf(PromiseTask:<init>(EventExecutor-Callable)),
		ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long) to listOf(PromiseTask:<init>(EventExecutor-Callable)),
		ScheduledFutureTask:executor() to listOf(PromiseTask:executor()),
		ScheduledFutureTask:delayNanos() to listOf(ScheduledFutureTask:deadlineNanos(), ScheduledFutureTask:nanoTime()),
		ScheduledFutureTask:delayNanos(long) to listOf(ScheduledFutureTask:deadlineNanos()),
		ScheduledFutureTask:getDelay(TimeUnit) to listOf(ScheduledFutureTask:delayNanos()),
		ScheduledFutureTask:compareTo(Delayed) to listOf(ScheduledFutureTask:deadlineNanos(), ScheduledFutureTask:deadlineNanos()),
		ScheduledFutureTask:run() to listOf(ScheduledFutureTask:executor(), EventExecutor:inEventLoop(), ScheduledFutureTask:setUncancellableInternal(), ScheduledFutureTask:setSuccessInternal(Object), ScheduledFutureTask:isCancelled(), ScheduledFutureTask:executor(), EventExecutor:isShutdown(), ScheduledFutureTask:nanoTime(), ScheduledFutureTask:isCancelled(), ScheduledFutureTask:setFailureInternal(Throwable)),
		ScheduledFutureTask:toStringBuilder() to listOf(PromiseTask:toStringBuilder()),
		ScheduledFutureTask:compareTo(Object) to listOf(ScheduledFutureTask:compareTo(Delayed)),
		SingleThreadEventExecutor$2:run() to listOf(SingleThreadEventExecutor:updateLastExecutionTime(), SingleThreadEventExecutor:run(), SingleThreadEventExecutor:access$100(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$200(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), InternalLogger:error(String), SingleThreadEventExecutor:confirmShutdown(), SingleThreadEventExecutor:cleanup(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:cleanup(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$000(), InternalLogger:warn(String-Throwable), SingleThreadEventExecutor:access$100(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$200(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), InternalLogger:error(String), SingleThreadEventExecutor:confirmShutdown(), SingleThreadEventExecutor:cleanup(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:cleanup(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$100(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$200(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), InternalLogger:error(String), SingleThreadEventExecutor:confirmShutdown(), SingleThreadEventExecutor:cleanup(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:cleanup(), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object), SingleThreadEventExecutor:access$300(SingleThreadEventExecutor), SingleThreadEventExecutor:access$102(SingleThreadEventExecutor-int), SingleThreadEventExecutor:access$400(SingleThreadEventExecutor), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), SingleThreadEventExecutor:access$000(), SingleThreadEventExecutor:access$500(SingleThreadEventExecutor), InternalLogger:warn(String), SingleThreadEventExecutor:access$600(SingleThreadEventExecutor), Promise:setSuccess(Object)),
		SingleThreadEventExecutor$3:run() to listOf(SingleThreadEventExecutor:access$700(SingleThreadEventExecutor)),
		SingleThreadEventExecutor$4:run() to listOf(SingleThreadEventExecutor:access$700(SingleThreadEventExecutor)),
		SingleThreadEventExecutor$PurgeTask:run() to listOf(ScheduledFutureTask:isCancelled()),
		SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor-SingleThreadEventExecutor$1) to listOf(SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor)),
		SingleThreadEventExecutor:<init>(EventExecutorGroup-ThreadFactory-boolean) to listOf(AbstractEventExecutor:<init>(), DefaultPromise:<init>(EventExecutor), SingleThreadEventExecutor$2:<init>(SingleThreadEventExecutor), SingleThreadEventExecutor:newTaskQueue()),
		SingleThreadEventExecutor:pollTask() to listOf(SingleThreadEventExecutor:inEventLoop()),
		SingleThreadEventExecutor:takeTask() to listOf(SingleThreadEventExecutor:inEventLoop(), ScheduledFutureTask:delayNanos(), SingleThreadEventExecutor:fetchFromDelayedQueue()),
		SingleThreadEventExecutor:fetchFromDelayedQueue() to listOf(ScheduledFutureTask:nanoTime(), ScheduledFutureTask:deadlineNanos()),
		SingleThreadEventExecutor:peekTask() to listOf(SingleThreadEventExecutor:inEventLoop()),
		SingleThreadEventExecutor:hasTasks() to listOf(SingleThreadEventExecutor:inEventLoop()),
		SingleThreadEventExecutor:addTask(Runnable) to listOf(SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:reject()),
		SingleThreadEventExecutor:runAllTasks() to listOf(SingleThreadEventExecutor:fetchFromDelayedQueue(), SingleThreadEventExecutor:pollTask(), InternalLogger:warn(String-Throwable), SingleThreadEventExecutor:pollTask(), ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:runAllTasks(long) to listOf(SingleThreadEventExecutor:fetchFromDelayedQueue(), SingleThreadEventExecutor:pollTask(), ScheduledFutureTask:nanoTime(), InternalLogger:warn(String-Throwable), ScheduledFutureTask:nanoTime(), SingleThreadEventExecutor:pollTask(), ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:delayNanos(long) to listOf(ScheduledFutureTask:delayNanos(long)),
		SingleThreadEventExecutor:updateLastExecutionTime() to listOf(ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:addShutdownHook(Runnable) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor$3:<init>(SingleThreadEventExecutor-Runnable), SingleThreadEventExecutor:execute(Runnable)),
		SingleThreadEventExecutor:removeShutdownHook(Runnable) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor$4:<init>(SingleThreadEventExecutor-Runnable), SingleThreadEventExecutor:execute(Runnable)),
		SingleThreadEventExecutor:runShutdownHooks() to listOf(InternalLogger:warn(String-Throwable), ScheduledFutureTask:nanoTime()),
		SingleThreadEventExecutor:shutdownGracefully(long-long-TimeUnit) to listOf(SingleThreadEventExecutor:isShuttingDown(), SingleThreadEventExecutor:terminationFuture(), SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:isShuttingDown(), SingleThreadEventExecutor:terminationFuture(), SingleThreadEventExecutor:wakeup(boolean), SingleThreadEventExecutor:terminationFuture()),
		SingleThreadEventExecutor:shutdown() to listOf(SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:wakeup(boolean)),
		SingleThreadEventExecutor:confirmShutdown() to listOf(SingleThreadEventExecutor:isShuttingDown(), SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:cancelDelayedTasks(), ScheduledFutureTask:nanoTime(), SingleThreadEventExecutor:runAllTasks(), SingleThreadEventExecutor:runShutdownHooks(), SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:wakeup(boolean), ScheduledFutureTask:nanoTime(), SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:wakeup(boolean)),
		SingleThreadEventExecutor:cancelDelayedTasks() to listOf(ScheduledFutureTask:cancel(boolean)),
		SingleThreadEventExecutor:awaitTermination(long-TimeUnit) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:isTerminated()),
		SingleThreadEventExecutor:execute(Runnable) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor:addTask(Runnable), SingleThreadEventExecutor:startThread(), SingleThreadEventExecutor:addTask(Runnable), SingleThreadEventExecutor:isShutdown(), SingleThreadEventExecutor:removeTask(Runnable), SingleThreadEventExecutor:reject(), SingleThreadEventExecutor:wakeup(boolean)),
		SingleThreadEventExecutor:schedule(Runnable-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Runnable-Object-long), SingleThreadEventExecutor:schedule(ScheduledFutureTask), SingleThreadEventExecutor:schedule(Runnable-long-TimeUnit)),
		SingleThreadEventExecutor:schedule(Callable-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long), SingleThreadEventExecutor:schedule(ScheduledFutureTask), SingleThreadEventExecutor:schedule(Callable-long-TimeUnit)),
		SingleThreadEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long), SingleThreadEventExecutor:schedule(ScheduledFutureTask), SingleThreadEventExecutor:scheduleAtFixedRate(Runnable-long-long-TimeUnit)),
		SingleThreadEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit) to listOf(ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long), SingleThreadEventExecutor:schedule(ScheduledFutureTask), SingleThreadEventExecutor:scheduleWithFixedDelay(Runnable-long-long-TimeUnit)),
		SingleThreadEventExecutor:schedule(ScheduledFutureTask) to listOf(SingleThreadEventExecutor:inEventLoop(), SingleThreadEventExecutor$5:<init>(SingleThreadEventExecutor-ScheduledFutureTask), SingleThreadEventExecutor:execute(Runnable)),
		SingleThreadEventExecutor:startThread() to listOf(SingleThreadEventExecutor$PurgeTask:<init>(SingleThreadEventExecutor-SingleThreadEventExecutor$1), ScheduledFutureTask:deadlineNanos(long), ScheduledFutureTask:<init>(EventExecutor-Queue-Callable-long-long)),
		SingleThreadEventExecutor:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), SingleThreadEventExecutor$1:<init>()),
		SucceededFuture:<init>(EventExecutor-Object) to listOf(CompleteFuture:<init>(EventExecutor)),
		DefaultAttributeMap$DefaultAttribute:setIfAbsent(Object) to listOf(DefaultAttributeMap$DefaultAttribute:compareAndSet(Object-Object), DefaultAttributeMap$DefaultAttribute:get()),
		DefaultAttributeMap$DefaultAttribute:getAndRemove() to listOf(DefaultAttributeMap$DefaultAttribute:getAndSet(Object), DefaultAttributeMap$DefaultAttribute:remove0()),
		DefaultAttributeMap$DefaultAttribute:remove() to listOf(DefaultAttributeMap$DefaultAttribute:set(Object), DefaultAttributeMap$DefaultAttribute:remove0()),
		DefaultAttributeMap:attr(AttributeKey) to listOf(DefaultAttributeMap$DefaultAttribute:<init>(Map-AttributeKey)),
		HashedWheelTimer$HashedWheelTimeout:expire() to listOf(TimerTask:run(Timeout), InternalLogger:isWarnEnabled(), InternalLogger:warn(String-Throwable)),
		HashedWheelTimer$HashedWheelTimeout:toString() to listOf(HashedWheelTimer$HashedWheelTimeout:isCancelled()),
		HashedWheelTimer$Worker:run() to listOf(HashedWheelTimer$Worker:waitForNextTick(), HashedWheelTimer$Worker:fetchExpiredTimeouts(List-long), HashedWheelTimer$Worker:notifyExpiredTimeouts(List)),
		HashedWheelTimer$Worker:fetchExpiredTimeouts(List-long) to listOf(HashedWheelTimer$Worker:fetchExpiredTimeouts(List-Iterator-long)),
		HashedWheelTimer$Worker:fetchExpiredTimeouts(List-Iterator-long) to listOf(HashedWheelTimer:scheduleTimeout(HashedWheelTimer$HashedWheelTimeout-long)),
		HashedWheelTimer$Worker:notifyExpiredTimeouts(List) to listOf(HashedWheelTimer$HashedWheelTimeout:expire()),
		HashedWheelTimer$Worker:waitForNextTick() to listOf(PlatformDependent:isWindows()),
		HashedWheelTimer:<init>() to listOf(HashedWheelTimer:<init>(ThreadFactory)),
		HashedWheelTimer:<init>(long-TimeUnit) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit)),
		HashedWheelTimer:<init>(long-TimeUnit-int) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int)),
		HashedWheelTimer:<init>(ThreadFactory) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit)),
		HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit) to listOf(HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int)),
		HashedWheelTimer:<init>(ThreadFactory-long-TimeUnit-int) to listOf(HashedWheelTimer$Worker:<init>(HashedWheelTimer), HashedWheelTimer:createWheel(int), ResourceLeakDetector:open(Object)),
		HashedWheelTimer:createWheel(int) to listOf(HashedWheelTimer:normalizeTicksPerWheel(int), PlatformDependent:newConcurrentHashMap()),
		HashedWheelTimer:stop() to listOf(ResourceLeak:close()),
		HashedWheelTimer:newTimeout(TimerTask-long-TimeUnit) to listOf(HashedWheelTimer:start(), HashedWheelTimer$HashedWheelTimeout:<init>(HashedWheelTimer-TimerTask-long), HashedWheelTimer:scheduleTimeout(HashedWheelTimer$HashedWheelTimeout-long)),
		HashedWheelTimer:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ResourceLeakDetector:<init>(Class-int-long)),
		IllegalReferenceCountException:<init>(int) to listOf(IllegalReferenceCountException:<init>(String)),
		IllegalReferenceCountException:<init>(int-int) to listOf(IllegalReferenceCountException:<init>(String)),
		ConcurrentHashMapV8$1:run() to listOf(ConcurrentHashMapV8$1:run()),
		ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$BaseIterator:advance()),
		ConcurrentHashMapV8$BaseIterator:remove() to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]) to listOf(CountedCompleter:<init>(CountedCompleter)),
		ConcurrentHashMapV8$BulkTask:advance() to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int)),
		ConcurrentHashMapV8$CollectionView:clear() to listOf(ConcurrentHashMapV8:clear()),
		ConcurrentHashMapV8$CollectionView:size() to listOf(ConcurrentHashMapV8:size()),
		ConcurrentHashMapV8$CollectionView:isEmpty() to listOf(ConcurrentHashMapV8:isEmpty()),
		ConcurrentHashMapV8$CollectionView:toArray() to listOf(ConcurrentHashMapV8:mappingCount(), ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:toArray(Object[]) to listOf(ConcurrentHashMapV8:mappingCount(), ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:toString() to listOf(ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:containsAll(Collection) to listOf(ConcurrentHashMapV8$CollectionView:contains(Object)),
		ConcurrentHashMapV8$CollectionView:removeAll(Collection) to listOf(ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$CollectionView:retainAll(Collection) to listOf(ConcurrentHashMapV8$CollectionView:iterator()),
		ConcurrentHashMapV8$EntryIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntryIterator:next() to listOf(ConcurrentHashMapV8$EntryIterator:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$EntryIterator:next()),
		ConcurrentHashMapV8$EntrySetView:<init>(ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySetView:contains(Object) to listOf(ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8$EntrySetView:remove(Object) to listOf(ConcurrentHashMapV8:remove(Object-Object)),
		ConcurrentHashMapV8$EntrySetView:iterator() to listOf(ConcurrentHashMapV8$EntryIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySetView:add(Map$Entry) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8$EntrySetView:addAll(Collection) to listOf(ConcurrentHashMapV8$EntrySetView:add(Map$Entry)),
		ConcurrentHashMapV8$EntrySetView:hashCode() to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Node:hashCode()),
		ConcurrentHashMapV8$EntrySetView:equals(Object) to listOf(ConcurrentHashMapV8$EntrySetView:containsAll(Collection)),
		ConcurrentHashMapV8$EntrySetView:spliterator() to listOf(ConcurrentHashMapV8:sumCount(), ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySetView:forEach(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$EntrySetView:add(Object) to listOf(ConcurrentHashMapV8$EntrySetView:add(Map$Entry)),
		ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int)),
		ConcurrentHashMapV8$EntrySpliterator:trySplit() to listOf(ConcurrentHashMapV8$EntrySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$EntrySpliterator:forEachRemaining(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$EntrySpliterator:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$EntrySpliterator:tryAdvance(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$EntrySpliterator:advance(), ConcurrentHashMapV8$MapEntry:<init>(Object-Object-ConcurrentHashMapV8), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachEntryTask:compute() to listOf(ConcurrentHashMapV8$ForEachEntryTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachEntryTask:fork(), ConcurrentHashMapV8$ForEachEntryTask:advance(), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachEntryTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachKeyTask:compute() to listOf(ConcurrentHashMapV8$ForEachKeyTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachKeyTask:fork(), ConcurrentHashMapV8$ForEachKeyTask:advance(), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachKeyTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachMappingTask:compute() to listOf(ConcurrentHashMapV8$ForEachMappingTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction), ConcurrentHashMapV8$ForEachMappingTask:fork(), ConcurrentHashMapV8$ForEachMappingTask:advance(), ConcurrentHashMapV8$BiAction:apply(Object-Object), ConcurrentHashMapV8$ForEachMappingTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedEntryTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedEntryTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedEntryTask:fork(), ConcurrentHashMapV8$ForEachTransformedEntryTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedEntryTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedKeyTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedKeyTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedKeyTask:fork(), ConcurrentHashMapV8$ForEachTransformedKeyTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedKeyTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedMappingTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedMappingTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedMappingTask:fork(), ConcurrentHashMapV8$ForEachTransformedMappingTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedMappingTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachTransformedValueTask:compute() to listOf(ConcurrentHashMapV8$ForEachTransformedValueTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedValueTask:fork(), ConcurrentHashMapV8$ForEachTransformedValueTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachTransformedValueTask:propagateCompletion()),
		ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ForEachValueTask:compute() to listOf(ConcurrentHashMapV8$ForEachValueTask:addToPendingCount(int), ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachValueTask:fork(), ConcurrentHashMapV8$ForEachValueTask:advance(), ConcurrentHashMapV8$Action:apply(Object), ConcurrentHashMapV8$ForEachValueTask:propagateCompletion()),
		ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8$ForwardingNode:find(int-Object) to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:find(int-Object)),
		ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$KeyIterator:next() to listOf(ConcurrentHashMapV8$KeyIterator:advance()),
		ConcurrentHashMapV8$KeyIterator:nextElement() to listOf(ConcurrentHashMapV8$KeyIterator:next()),
		ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object) to listOf(ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8$KeySetView:contains(Object) to listOf(ConcurrentHashMapV8:containsKey(Object)),
		ConcurrentHashMapV8$KeySetView:remove(Object) to listOf(ConcurrentHashMapV8:remove(Object)),
		ConcurrentHashMapV8$KeySetView:iterator() to listOf(ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$KeySetView:add(Object) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8$KeySetView:addAll(Collection) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8$KeySetView:hashCode() to listOf(ConcurrentHashMapV8$KeySetView:iterator()),
		ConcurrentHashMapV8$KeySetView:equals(Object) to listOf(ConcurrentHashMapV8$KeySetView:containsAll(Collection)),
		ConcurrentHashMapV8$KeySetView:spliterator() to listOf(ConcurrentHashMapV8:sumCount(), ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$KeySetView:forEach(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$KeySetView:getMap() to listOf(ConcurrentHashMapV8$CollectionView:getMap()),
		ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int)),
		ConcurrentHashMapV8$KeySpliterator:trySplit() to listOf(ConcurrentHashMapV8$KeySpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$KeySpliterator:forEachRemaining(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$KeySpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$KeySpliterator:tryAdvance(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$KeySpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$MapEntry:setValue(Object) to listOf(ConcurrentHashMapV8:put(Object-Object)),
		ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceEntriesTask:fork(), ConcurrentHashMapV8$MapReduceEntriesTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceEntriesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:advance(), ConcurrentHashMapV8$ObjectToDouble:apply(Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceEntriesToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceEntriesToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceEntriesToIntTask:fork(), ConcurrentHashMapV8$MapReduceEntriesToIntTask:advance(), ConcurrentHashMapV8$ObjectToInt:apply(Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceEntriesToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceEntriesToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceEntriesToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceEntriesToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceEntriesToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceEntriesToLongTask:fork(), ConcurrentHashMapV8$MapReduceEntriesToLongTask:advance(), ConcurrentHashMapV8$ObjectToLong:apply(Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceEntriesToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceKeysTask:fork(), ConcurrentHashMapV8$MapReduceKeysTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceKeysTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceKeysToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceKeysToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:advance(), ConcurrentHashMapV8$ObjectToDouble:apply(Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceKeysToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceKeysToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceKeysToIntTask:fork(), ConcurrentHashMapV8$MapReduceKeysToIntTask:advance(), ConcurrentHashMapV8$ObjectToInt:apply(Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceKeysToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceKeysToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceKeysToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceKeysToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceKeysToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceKeysToLongTask:fork(), ConcurrentHashMapV8$MapReduceKeysToLongTask:advance(), ConcurrentHashMapV8$ObjectToLong:apply(Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceKeysToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceMappingsTask:fork(), ConcurrentHashMapV8$MapReduceMappingsTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceMappingsTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:advance(), ConcurrentHashMapV8$ObjectByObjectToDouble:apply(Object-Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceMappingsToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceMappingsToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceMappingsToIntTask:fork(), ConcurrentHashMapV8$MapReduceMappingsToIntTask:advance(), ConcurrentHashMapV8$ObjectByObjectToInt:apply(Object-Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceMappingsToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceMappingsToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceMappingsToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceMappingsToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceMappingsToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceMappingsToLongTask:fork(), ConcurrentHashMapV8$MapReduceMappingsToLongTask:advance(), ConcurrentHashMapV8$ObjectByObjectToLong:apply(Object-Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceMappingsToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceValuesTask:fork(), ConcurrentHashMapV8$MapReduceValuesTask:advance(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$MapReduceValuesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesToDoubleTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceValuesToDoubleTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceValuesToDoubleTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesToDoubleTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:fork(), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:advance(), ConcurrentHashMapV8$ObjectToDouble:apply(Object), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:firstComplete(), ConcurrentHashMapV8$DoubleByDoubleToDouble:apply(double-double), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesToIntTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceValuesToIntTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceValuesToIntTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesToIntTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceValuesToIntTask:fork(), ConcurrentHashMapV8$MapReduceValuesToIntTask:advance(), ConcurrentHashMapV8$ObjectToInt:apply(Object), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), ConcurrentHashMapV8$MapReduceValuesToIntTask:firstComplete(), ConcurrentHashMapV8$IntByIntToInt:apply(int-int), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$MapReduceValuesToLongTask:getRawResult() to listOf(ConcurrentHashMapV8$MapReduceValuesToLongTask:getRawResult()),
		ConcurrentHashMapV8$MapReduceValuesToLongTask:compute() to listOf(ConcurrentHashMapV8$MapReduceValuesToLongTask:addToPendingCount(int), ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceValuesToLongTask:fork(), ConcurrentHashMapV8$MapReduceValuesToLongTask:advance(), ConcurrentHashMapV8$ObjectToLong:apply(Object), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), ConcurrentHashMapV8$MapReduceValuesToLongTask:firstComplete(), ConcurrentHashMapV8$LongByLongToLong:apply(long-long), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ReduceEntriesTask:compute() to listOf(ConcurrentHashMapV8$ReduceEntriesTask:addToPendingCount(int), ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceEntriesTask:fork(), ConcurrentHashMapV8$ReduceEntriesTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$ReduceEntriesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ReduceEntriesTask:getRawResult() to listOf(ConcurrentHashMapV8$ReduceEntriesTask:getRawResult()),
		ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ReduceKeysTask:compute() to listOf(ConcurrentHashMapV8$ReduceKeysTask:addToPendingCount(int), ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceKeysTask:fork(), ConcurrentHashMapV8$ReduceKeysTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$ReduceKeysTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$ReduceValuesTask:compute() to listOf(ConcurrentHashMapV8$ReduceValuesTask:addToPendingCount(int), ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceValuesTask:fork(), ConcurrentHashMapV8$ReduceValuesTask:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$ReduceValuesTask:firstComplete(), ConcurrentHashMapV8$BiFun:apply(Object-Object), CountedCompleter:nextComplete()),
		ConcurrentHashMapV8$ReservationNode:<init>() to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchEntriesTask:compute() to listOf(ConcurrentHashMapV8$SearchEntriesTask:addToPendingCount(int), ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchEntriesTask:fork(), ConcurrentHashMapV8$SearchEntriesTask:advance(), ConcurrentHashMapV8$SearchEntriesTask:propagateCompletion(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$SearchEntriesTask:quietlyCompleteRoot()),
		ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchKeysTask:compute() to listOf(ConcurrentHashMapV8$SearchKeysTask:addToPendingCount(int), ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchKeysTask:fork(), ConcurrentHashMapV8$SearchKeysTask:advance(), ConcurrentHashMapV8$SearchKeysTask:propagateCompletion(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$SearchKeysTask:quietlyCompleteRoot()),
		ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchMappingsTask:compute() to listOf(ConcurrentHashMapV8$SearchMappingsTask:addToPendingCount(int), ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference), ConcurrentHashMapV8$SearchMappingsTask:fork(), ConcurrentHashMapV8$SearchMappingsTask:advance(), ConcurrentHashMapV8$SearchMappingsTask:propagateCompletion(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$SearchMappingsTask:quietlyCompleteRoot()),
		ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference) to listOf(ConcurrentHashMapV8$BulkTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8$SearchValuesTask:compute() to listOf(ConcurrentHashMapV8$SearchValuesTask:addToPendingCount(int), ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchValuesTask:fork(), ConcurrentHashMapV8$SearchValuesTask:advance(), ConcurrentHashMapV8$SearchValuesTask:propagateCompletion(), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$SearchValuesTask:quietlyCompleteRoot()),
		ConcurrentHashMapV8$Traverser:advance() to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int)),
		ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:comparableClassFor(Object), ConcurrentHashMapV8:compareComparables(Class-Object-Object), ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:lockRoot() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8$TreeBin:contendedLock()),
		ConcurrentHashMapV8$TreeBin:contendedLock() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ConcurrentHashMapV8$TreeBin:find(int-Object) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object) to listOf(ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:comparableClassFor(Object), ConcurrentHashMapV8:compareComparables(Class-Object-Object), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:lockRoot(), ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:lockRoot(), ConcurrentHashMapV8$TreeBin:balanceDeletion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:unlockRoot(), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:balanceInsertion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:balanceDeletion(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateLeft(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:rotateRight(ConcurrentHashMapV8$TreeNode-ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:checkInvariants(ConcurrentHashMapV8$TreeNode)),
		ConcurrentHashMapV8$TreeBin:<clinit>() to listOf(ConcurrentHashMapV8:access$000(), Unsafe:objectFieldOffset(Field)),
		ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8$TreeNode:find(int-Object) to listOf(ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class)),
		ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class) to listOf(ConcurrentHashMapV8:comparableClassFor(Object), ConcurrentHashMapV8:compareComparables(Class-Object-Object), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class)),
		ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$BaseIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$ValueIterator:next() to listOf(ConcurrentHashMapV8$ValueIterator:advance()),
		ConcurrentHashMapV8$ValueIterator:nextElement() to listOf(ConcurrentHashMapV8$ValueIterator:next()),
		ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int)),
		ConcurrentHashMapV8$ValueSpliterator:trySplit() to listOf(ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$ValueSpliterator:forEachRemaining(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$ValueSpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$ValueSpliterator:tryAdvance(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$ValueSpliterator:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8$ValuesView:<init>(ConcurrentHashMapV8) to listOf(ConcurrentHashMapV8$CollectionView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8$ValuesView:contains(Object) to listOf(ConcurrentHashMapV8:containsValue(Object)),
		ConcurrentHashMapV8$ValuesView:remove(Object) to listOf(ConcurrentHashMapV8$ValuesView:iterator()),
		ConcurrentHashMapV8$ValuesView:iterator() to listOf(ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8$ValuesView:spliterator() to listOf(ConcurrentHashMapV8:sumCount(), ConcurrentHashMapV8$ValueSpliterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-long)),
		ConcurrentHashMapV8$ValuesView:forEach(ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Action:apply(Object)),
		ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int) to listOf(Unsafe:getObjectVolatile(Object-long)),
		ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node) to listOf(Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node) to listOf(Unsafe:putObjectVolatile(Object-long-Object)),
		ConcurrentHashMapV8:<init>(int) to listOf(ConcurrentHashMapV8:tableSizeFor(int)),
		ConcurrentHashMapV8:<init>(Map) to listOf(ConcurrentHashMapV8:putAll(Map)),
		ConcurrentHashMapV8:<init>(int-float) to listOf(ConcurrentHashMapV8:<init>(int-float-int)),
		ConcurrentHashMapV8:<init>(int-float-int) to listOf(ConcurrentHashMapV8:tableSizeFor(int)),
		ConcurrentHashMapV8:size() to listOf(ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:isEmpty() to listOf(ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:get(Object) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:find(int-Object)),
		ConcurrentHashMapV8:containsKey(Object) to listOf(ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:containsValue(Object) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:put(Object-Object) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8:putVal(Object-Object-boolean) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:putAll(Map) to listOf(ConcurrentHashMapV8:tryPresize(int), ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8:remove(Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:replaceNode(Object-Object-Object) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:clear() to listOf(ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:keySet() to listOf(ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object), ConcurrentHashMapV8:keySet()),
		ConcurrentHashMapV8:values() to listOf(ConcurrentHashMapV8$ValuesView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8:entrySet() to listOf(ConcurrentHashMapV8$EntrySetView:<init>(ConcurrentHashMapV8)),
		ConcurrentHashMapV8:hashCode() to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:toString() to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:equals(Object) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:writeObject(ObjectOutputStream) to listOf(ConcurrentHashMapV8$Segment:<init>(float), ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance()),
		ConcurrentHashMapV8:readObject(ObjectInputStream) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tableSizeFor(int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:putIfAbsent(Object-Object) to listOf(ConcurrentHashMapV8:putVal(Object-Object-boolean)),
		ConcurrentHashMapV8:remove(Object-Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:replace(Object-Object-Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:replace(Object-Object) to listOf(ConcurrentHashMapV8:replaceNode(Object-Object-Object)),
		ConcurrentHashMapV8:getOrDefault(Object-Object) to listOf(ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:forEach(ConcurrentHashMapV8$BiAction) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$BiAction:apply(Object-Object)),
		ConcurrentHashMapV8:replaceAll(ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8$Traverser:<init>(ConcurrentHashMapV8$Node[]-int-int-int), ConcurrentHashMapV8$Traverser:advance(), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:replaceNode(Object-Object-Object), ConcurrentHashMapV8:get(Object)),
		ConcurrentHashMapV8:computeIfAbsent(Object-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$ReservationNode:<init>(), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$Fun:apply(Object), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:computeIfPresent(Object-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:compute(Object-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$ReservationNode:<init>(), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:merge(Object-Object-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:spread(int), ConcurrentHashMapV8:initTable(), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:findTreeNode(int-Object-Class), ConcurrentHashMapV8$BiFun:apply(Object-Object), ConcurrentHashMapV8$TreeBin:putTreeVal(int-Object-Object), ConcurrentHashMapV8$TreeBin:removeTreeNode(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:addCount(long-int)),
		ConcurrentHashMapV8:contains(Object) to listOf(ConcurrentHashMapV8:containsValue(Object)),
		ConcurrentHashMapV8:keys() to listOf(ConcurrentHashMapV8$KeyIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8:elements() to listOf(ConcurrentHashMapV8$ValueIterator:<init>(ConcurrentHashMapV8$Node[]-int-int-int-ConcurrentHashMapV8)),
		ConcurrentHashMapV8:mappingCount() to listOf(ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:newKeySet() to listOf(ConcurrentHashMapV8:<init>(), ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object)),
		ConcurrentHashMapV8:newKeySet(int) to listOf(ConcurrentHashMapV8:<init>(int), ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object)),
		ConcurrentHashMapV8:keySet(Object) to listOf(ConcurrentHashMapV8$KeySetView:<init>(ConcurrentHashMapV8-Object)),
		ConcurrentHashMapV8:initTable() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ConcurrentHashMapV8:addCount(long-int) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapLong(Object-long-long-long), ConcurrentHashMapV8:fullAddCount(long-ConcurrentHashMapV8$CounterHashCode-boolean), ConcurrentHashMapV8:sumCount(), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), ConcurrentHashMapV8:sumCount()),
		ConcurrentHashMapV8:helpTransfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8:tryPresize(int) to listOf(ConcurrentHashMapV8:tableSizeFor(int), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[])),
		ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]) to listOf(ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]), Unsafe:putOrderedInt(Object-long-int), ConcurrentHashMapV8$ForwardingNode:<init>(ConcurrentHashMapV8$Node[]), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:casTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:treeifyBin(ConcurrentHashMapV8$Node[]-int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8:transfer(ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Node[]), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8:tabAt(ConcurrentHashMapV8$Node[]-int), ConcurrentHashMapV8$TreeNode:<init>(int-Object-Object-ConcurrentHashMapV8$Node-ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8$TreeBin:<init>(ConcurrentHashMapV8$TreeNode), ConcurrentHashMapV8:setTabAt(ConcurrentHashMapV8$Node[]-int-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:untreeify(ConcurrentHashMapV8$Node) to listOf(ConcurrentHashMapV8$Node:<init>(int-Object-Object-ConcurrentHashMapV8$Node)),
		ConcurrentHashMapV8:batchFor(long) to listOf(ConcurrentHashMapV8:sumCount(), ForkJoinPool:getCommonPoolParallelism()),
		ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiAction) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiAction), ConcurrentHashMapV8$ForEachMappingTask:invoke()),
		ConcurrentHashMapV8:forEach(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedMappingTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedMappingTask:invoke()),
		ConcurrentHashMapV8:search(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$BiFun-AtomicReference), ConcurrentHashMapV8$SearchMappingsTask:invoke()),
		ConcurrentHashMapV8:reduce(long-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsTask-ConcurrentHashMapV8$BiFun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceMappingsTask:invoke()),
		ConcurrentHashMapV8:reduceToDouble(long-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToDoubleTask-ConcurrentHashMapV8$ObjectByObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceToLong(long-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToLongTask-ConcurrentHashMapV8$ObjectByObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceMappingsToLongTask:invoke()),
		ConcurrentHashMapV8:reduceToInt(long-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceMappingsToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceMappingsToIntTask-ConcurrentHashMapV8$ObjectByObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceMappingsToIntTask:invoke()),
		ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachKeyTask:invoke()),
		ConcurrentHashMapV8:forEachKey(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedKeyTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedKeyTask:invoke()),
		ConcurrentHashMapV8:searchKeys(long-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchKeysTask:invoke()),
		ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceKeysTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceKeysTask:invoke()),
		ConcurrentHashMapV8:reduceKeys(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceKeysTask:invoke()),
		ConcurrentHashMapV8:reduceKeysToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceKeysToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceKeysToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceKeysToLongTask:invoke()),
		ConcurrentHashMapV8:reduceKeysToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceKeysToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceKeysToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceKeysToIntTask:invoke()),
		ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachValueTask:invoke()),
		ConcurrentHashMapV8:forEachValue(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedValueTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedValueTask:invoke()),
		ConcurrentHashMapV8:searchValues(long-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchValuesTask:invoke()),
		ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceValuesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceValuesTask:invoke()),
		ConcurrentHashMapV8:reduceValues(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceValuesTask:invoke()),
		ConcurrentHashMapV8:reduceValuesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceValuesToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceValuesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceValuesToLongTask:invoke()),
		ConcurrentHashMapV8:reduceValuesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceValuesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceValuesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceValuesToIntTask:invoke()),
		ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachEntryTask:invoke()),
		ConcurrentHashMapV8:forEachEntry(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ForEachTransformedEntryTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$Action), ConcurrentHashMapV8$ForEachTransformedEntryTask:invoke()),
		ConcurrentHashMapV8:searchEntries(long-ConcurrentHashMapV8$Fun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$SearchEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$Fun-AtomicReference), ConcurrentHashMapV8$SearchEntriesTask:invoke()),
		ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$ReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$ReduceEntriesTask-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$ReduceEntriesTask:invoke()),
		ConcurrentHashMapV8:reduceEntries(long-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesTask-ConcurrentHashMapV8$Fun-ConcurrentHashMapV8$BiFun), ConcurrentHashMapV8$MapReduceEntriesTask:invoke()),
		ConcurrentHashMapV8:reduceEntriesToDouble(long-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToDoubleTask-ConcurrentHashMapV8$ObjectToDouble-double-ConcurrentHashMapV8$DoubleByDoubleToDouble), ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:invoke()),
		ConcurrentHashMapV8:reduceEntriesToLong(long-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesToLongTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToLongTask-ConcurrentHashMapV8$ObjectToLong-long-ConcurrentHashMapV8$LongByLongToLong), ConcurrentHashMapV8$MapReduceEntriesToLongTask:invoke()),
		ConcurrentHashMapV8:reduceEntriesToInt(long-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt) to listOf(ConcurrentHashMapV8:batchFor(long), ConcurrentHashMapV8$MapReduceEntriesToIntTask:<init>(ConcurrentHashMapV8$BulkTask-int-int-int-ConcurrentHashMapV8$Node[]-ConcurrentHashMapV8$MapReduceEntriesToIntTask-ConcurrentHashMapV8$ObjectToInt-int-ConcurrentHashMapV8$IntByIntToInt), ConcurrentHashMapV8$MapReduceEntriesToIntTask:invoke()),
		ConcurrentHashMapV8:fullAddCount(long-ConcurrentHashMapV8$CounterHashCode-boolean) to listOf(ConcurrentHashMapV8$CounterHashCode:<init>(), ConcurrentHashMapV8$CounterCell:<init>(long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ConcurrentHashMapV8$CounterCell:<init>(long), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ConcurrentHashMapV8:getUnsafe() to listOf(Unsafe:getUnsafe(), ConcurrentHashMapV8$1:<init>()),
		ConcurrentHashMapV8:access$000() to listOf(ConcurrentHashMapV8:getUnsafe()),
		ConcurrentHashMapV8:<clinit>() to listOf(ConcurrentHashMapV8:getUnsafe(), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:arrayBaseOffset(Class), Unsafe:arrayIndexScale(Class)),
		CountedCompleter$1:run() to listOf(CountedCompleter$1:run()),
		CountedCompleter:<init>(CountedCompleter-int) to listOf(ForkJoinTask:<init>()),
		CountedCompleter:<init>(CountedCompleter) to listOf(ForkJoinTask:<init>()),
		CountedCompleter:<init>() to listOf(ForkJoinTask:<init>()),
		CountedCompleter:addToPendingCount(int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:compareAndSetPendingCount(int-int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:decrementPendingCountUnlessZero() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:tryComplete() to listOf(CountedCompleter:onCompletion(CountedCompleter), CountedCompleter:quietlyComplete(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:propagateCompletion() to listOf(CountedCompleter:quietlyComplete(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:complete(Object) to listOf(CountedCompleter:setRawResult(Object), CountedCompleter:onCompletion(CountedCompleter), CountedCompleter:quietlyComplete(), CountedCompleter:tryComplete()),
		CountedCompleter:firstComplete() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		CountedCompleter:nextComplete() to listOf(CountedCompleter:firstComplete(), CountedCompleter:quietlyComplete()),
		CountedCompleter:quietlyCompleteRoot() to listOf(CountedCompleter:quietlyComplete()),
		CountedCompleter:internalPropagateException(Throwable) to listOf(CountedCompleter:onExceptionalCompletion(Throwable-CountedCompleter), CountedCompleter:recordExceptionalCompletion(Throwable)),
		CountedCompleter:exec() to listOf(CountedCompleter:compute()),
		CountedCompleter:getUnsafe() to listOf(Unsafe:getUnsafe(), CountedCompleter$1:<init>()),
		CountedCompleter:<clinit>() to listOf(CountedCompleter:getUnsafe(), Unsafe:objectFieldOffset(Field)),
		ForkJoinPool$1:run() to listOf(ForkJoinPool:access$100(), ForkJoinPool$1:run()),
		ForkJoinPool$2:run() to listOf(ForkJoinPool$2:run()),
		ForkJoinPool$DefaultForkJoinWorkerThreadFactory:newThread(ForkJoinPool) to listOf(ForkJoinWorkerThread:<init>(ForkJoinPool)),
		ForkJoinPool$EmptyTask:<init>() to listOf(ForkJoinTask:<init>()),
		ForkJoinPool$EmptyTask:setRawResult(Object) to listOf(ForkJoinPool$EmptyTask:setRawResult(Void)),
		ForkJoinPool$EmptyTask:getRawResult() to listOf(ForkJoinPool$EmptyTask:getRawResult()),
		ForkJoinPool$WorkQueue:isEmpty() to listOf(Unsafe:getObject(Object-long)),
		ForkJoinPool$WorkQueue:push(ForkJoinTask) to listOf(Unsafe:putOrderedObject(Object-long-Object), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool$WorkQueue:growArray()),
		ForkJoinPool$WorkQueue:growArray() to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putObjectVolatile(Object-long-Object)),
		ForkJoinPool$WorkQueue:pop() to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ForkJoinPool$WorkQueue:pollAt(int) to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int)),
		ForkJoinPool$WorkQueue:poll() to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int)),
		ForkJoinPool$WorkQueue:nextLocalTask() to listOf(ForkJoinPool$WorkQueue:pop(), ForkJoinPool$WorkQueue:poll()),
		ForkJoinPool$WorkQueue:peek() to listOf(Unsafe:getObjectVolatile(Object-long)),
		ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask) to listOf(Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ForkJoinPool$WorkQueue:cancelAll() to listOf(ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), ForkJoinPool$WorkQueue:poll(), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask)),
		ForkJoinPool$WorkQueue:pollAndExecAll() to listOf(ForkJoinPool$WorkQueue:poll(), ForkJoinTask:doExec()),
		ForkJoinPool$WorkQueue:runTask(ForkJoinTask) to listOf(ForkJoinTask:doExec(), ForkJoinPool$WorkQueue:pollAndExecAll(), Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), ForkJoinTask:doExec()),
		ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), ForkJoinPool$EmptyTask:<init>(), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:compareAndSwapObject(Object-long-Object-Object), ForkJoinTask:doExec()),
		ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter) to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int), CountedCompleter:doExec()),
		ForkJoinPool$WorkQueue:externalPopAndExecCC(CountedCompleter) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapObject(Object-long-Object-Object), CountedCompleter:doExec()),
		ForkJoinPool$WorkQueue:internalPopAndExecCC(CountedCompleter) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), CountedCompleter:doExec()),
		ForkJoinPool$WorkQueue:<clinit>() to listOf(ForkJoinPool:access$000(), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:arrayBaseOffset(Class), Unsafe:arrayIndexScale(Class)),
		ForkJoinPool:acquirePlock() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ThreadLocalRandom:current(), ThreadLocalRandom:nextInt(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinPool:tryAddWorker() to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$ForkJoinWorkerThreadFactory:newThread(ForkJoinPool), ForkJoinWorkerThread:start(), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable)),
		ForkJoinPool:registerWorker(ForkJoinWorkerThread) to listOf(ForkJoinWorkerThread:setDaemon(boolean), ForkJoinWorkerThread:setUncaughtExceptionHandler(Thread$UncaughtExceptionHandler), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool$WorkQueue:<init>(ForkJoinPool-ForkJoinWorkerThread-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), ForkJoinWorkerThread:setName(String)),
		ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool:tryTerminate(boolean-boolean), ForkJoinPool$WorkQueue:cancelAll(), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object), ForkJoinPool:tryAddWorker(), ForkJoinTask:helpExpungeStaleExceptions(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinPool:externalPush(ForkJoinTask) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:putOrderedObject(Object-long-Object), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool:fullExternalPush(ForkJoinTask)),
		ForkJoinPool:fullExternalPush(ForkJoinTask) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool$Submitter:<init>(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool$WorkQueue:growArray(), Unsafe:putOrderedObject(Object-long-Object), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool$WorkQueue:<init>(ForkJoinPool-ForkJoinWorkerThread-int-int), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int)),
		ForkJoinPool:incrementActiveCount() to listOf(Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue) to listOf(ForkJoinPool:tryAddWorker(), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object)),
		ForkJoinPool:runWorker(ForkJoinPool$WorkQueue) to listOf(ForkJoinPool$WorkQueue:growArray(), ForkJoinPool:scan(ForkJoinPool$WorkQueue-int)),
		ForkJoinPool:scan(ForkJoinPool$WorkQueue-int) to listOf(Unsafe:getObjectVolatile(Object-long), ForkJoinPool:helpRelease(long-ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue-ForkJoinPool$WorkQueue-int), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), ForkJoinPool$WorkQueue:runTask(ForkJoinTask), ForkJoinPool:awaitWork(ForkJoinPool$WorkQueue-long-int), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:awaitWork(ForkJoinPool$WorkQueue-long-int) to listOf(ForkJoinPool:tryTerminate(boolean-boolean), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:putObject(Object-long-Object), Unsafe:park(boolean-long), Unsafe:putObject(Object-long-Object), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:helpRelease(long-ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue-ForkJoinPool$WorkQueue-int) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object)),
		ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask) to listOf(Unsafe:getObjectVolatile(Object-long), Unsafe:compareAndSwapObject(Object-long-Object-Object), Unsafe:putOrderedInt(Object-long-int), ForkJoinTask:doExec(), ForkJoinPool$WorkQueue:pop()),
		ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter) to listOf(ForkJoinPool$WorkQueue:internalPopAndExecCC(CountedCompleter), ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter)),
		ForkJoinPool:tryCompensate(long) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$ForkJoinWorkerThreadFactory:newThread(ForkJoinPool), ForkJoinWorkerThread:start(), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable)),
		ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask) to listOf(ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask), ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter), ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinPool:tryCompensate(long), ForkJoinTask:trySetSignal(), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:helpJoinOnce(ForkJoinPool$WorkQueue-ForkJoinTask) to listOf(ForkJoinPool$WorkQueue:tryRemoveAndExec(ForkJoinTask), ForkJoinPool:helpComplete(ForkJoinPool$WorkQueue-CountedCompleter), ForkJoinPool:tryHelpStealer(ForkJoinPool$WorkQueue-ForkJoinTask)),
		ForkJoinPool:findNonEmptyStealQueue() to listOf(ThreadLocalRandom:current(), ThreadLocalRandom:nextInt()),
		ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue) to listOf(ForkJoinPool$WorkQueue:nextLocalTask(), ForkJoinTask:doExec(), ForkJoinPool:findNonEmptyStealQueue(), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$WorkQueue:pollAt(int), ForkJoinTask:doExec(), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:compareAndSwapLong(Object-long-long-long)),
		ForkJoinPool:nextTaskFor(ForkJoinPool$WorkQueue) to listOf(ForkJoinPool$WorkQueue:nextLocalTask(), ForkJoinPool:findNonEmptyStealQueue(), ForkJoinPool$WorkQueue:pollAt(int)),
		ForkJoinPool:tryTerminate(boolean-boolean) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:acquirePlock(), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:releasePlock(int), ForkJoinPool$WorkQueue:isEmpty(), ForkJoinPool:signalWork(ForkJoinPool$WorkQueue[]-ForkJoinPool$WorkQueue), Unsafe:compareAndSwapLong(Object-long-long-long), ForkJoinPool$WorkQueue:cancelAll(), Unsafe:unpark(Object), Unsafe:compareAndSwapLong(Object-long-long-long), Unsafe:unpark(Object)),
		ForkJoinPool:tryExternalUnpush(ForkJoinTask) to listOf(Unsafe:getObject(Object-long), Unsafe:compareAndSwapInt(Object-long-int-int), Unsafe:compareAndSwapObject(Object-long-Object-Object)),
		ForkJoinPool:externalHelpComplete(CountedCompleter) to listOf(ForkJoinPool$WorkQueue:externalPopAndExecCC(CountedCompleter), ForkJoinPool$WorkQueue:pollAndExecCC(CountedCompleter)),
		ForkJoinPool:<init>() to listOf(ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean)),
		ForkJoinPool:<init>(int) to listOf(ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean)),
		ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-boolean) to listOf(ForkJoinPool:checkParallelism(int), ForkJoinPool:checkFactory(ForkJoinPool$ForkJoinWorkerThreadFactory), ForkJoinPool:nextPoolId(), ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-int-String), ForkJoinPool:checkPermission()),
		ForkJoinPool:invoke(ForkJoinTask) to listOf(ForkJoinPool:externalPush(ForkJoinTask), ForkJoinTask:join()),
		ForkJoinPool:execute(ForkJoinTask) to listOf(ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinPool:execute(Runnable) to listOf(ForkJoinTask$RunnableExecuteAction:<init>(Runnable), ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinPool:submit(ForkJoinTask) to listOf(ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinPool:submit(Callable) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinPool:submit(Callable)),
		ForkJoinPool:submit(Runnable-Object) to listOf(ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinPool:submit(Runnable-Object)),
		ForkJoinPool:submit(Runnable) to listOf(ForkJoinTask$AdaptedRunnableAction:<init>(Runnable), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinPool:submit(Runnable)),
		ForkJoinPool:invokeAll(Collection) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable), ForkJoinPool:externalPush(ForkJoinTask), ForkJoinTask:quietlyJoin()),
		ForkJoinPool:getRunningThreadCount() to listOf(ForkJoinPool$WorkQueue:isApparentlyUnblocked()),
		ForkJoinPool:getQueuedTaskCount() to listOf(ForkJoinPool$WorkQueue:queueSize()),
		ForkJoinPool:getQueuedSubmissionCount() to listOf(ForkJoinPool$WorkQueue:queueSize()),
		ForkJoinPool:hasQueuedSubmissions() to listOf(ForkJoinPool$WorkQueue:isEmpty()),
		ForkJoinPool:pollSubmission() to listOf(ForkJoinPool$WorkQueue:poll()),
		ForkJoinPool:drainTasksTo(Collection) to listOf(ForkJoinPool$WorkQueue:poll()),
		ForkJoinPool:toString() to listOf(ForkJoinPool$WorkQueue:queueSize(), ForkJoinPool$WorkQueue:isApparentlyUnblocked()),
		ForkJoinPool:shutdown() to listOf(ForkJoinPool:checkPermission(), ForkJoinPool:tryTerminate(boolean-boolean)),
		ForkJoinPool:shutdownNow() to listOf(ForkJoinPool:checkPermission(), ForkJoinPool:tryTerminate(boolean-boolean)),
		ForkJoinPool:awaitTermination(long-TimeUnit) to listOf(ForkJoinPool:awaitQuiescence(long-TimeUnit), ForkJoinPool:isTerminated(), ForkJoinPool:isTerminated()),
		ForkJoinPool:awaitQuiescence(long-TimeUnit) to listOf(ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue), ForkJoinPool:isQuiescent(), ForkJoinPool$WorkQueue:pollAt(int), ForkJoinTask:doExec()),
		ForkJoinPool:quiesceCommonPool() to listOf(ForkJoinPool:awaitQuiescence(long-TimeUnit)),
		ForkJoinPool:managedBlock(ForkJoinPool$ManagedBlocker) to listOf(ForkJoinPool$ManagedBlocker:isReleasable(), ForkJoinPool:tryCompensate(long), ForkJoinPool$ManagedBlocker:isReleasable(), ForkJoinPool$ManagedBlocker:block(), ForkJoinPool:incrementActiveCount(), ForkJoinPool:incrementActiveCount(), ForkJoinPool$ManagedBlocker:isReleasable(), ForkJoinPool$ManagedBlocker:block()),
		ForkJoinPool:newTaskFor(Runnable-Object) to listOf(ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object)),
		ForkJoinPool:newTaskFor(Callable) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable)),
		ForkJoinPool:makeCommonPool() to listOf(ForkJoinPool:<init>(int-ForkJoinPool$ForkJoinWorkerThreadFactory-Thread$UncaughtExceptionHandler-int-String)),
		ForkJoinPool:getUnsafe() to listOf(Unsafe:getUnsafe(), ForkJoinPool$2:<init>()),
		ForkJoinPool:access$000() to listOf(ForkJoinPool:getUnsafe()),
		ForkJoinPool:access$100() to listOf(ForkJoinPool:makeCommonPool()),
		ForkJoinPool:<clinit>() to listOf(ForkJoinPool:getUnsafe(), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field), Unsafe:arrayBaseOffset(Class), Unsafe:arrayIndexScale(Class), ForkJoinPool$DefaultForkJoinWorkerThreadFactory:<init>(), ForkJoinPool$1:<init>()),
		ForkJoinTask$1:run() to listOf(ForkJoinTask$1:run()),
		ForkJoinTask$AdaptedCallable:<init>(Callable) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$AdaptedCallable:run() to listOf(ForkJoinTask$AdaptedCallable:invoke()),
		ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$AdaptedRunnable:run() to listOf(ForkJoinTask$AdaptedRunnable:invoke()),
		ForkJoinTask$AdaptedRunnableAction:<init>(Runnable) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$AdaptedRunnableAction:run() to listOf(ForkJoinTask$AdaptedRunnableAction:invoke()),
		ForkJoinTask$AdaptedRunnableAction:setRawResult(Object) to listOf(ForkJoinTask$AdaptedRunnableAction:setRawResult(Void)),
		ForkJoinTask$AdaptedRunnableAction:getRawResult() to listOf(ForkJoinTask$AdaptedRunnableAction:getRawResult()),
		ForkJoinTask$ExceptionNode:<init>(ForkJoinTask-Throwable-ForkJoinTask$ExceptionNode) to listOf(ForkJoinTask:access$000()),
		ForkJoinTask$RunnableExecuteAction:<init>(Runnable) to listOf(ForkJoinTask:<init>()),
		ForkJoinTask$RunnableExecuteAction:internalPropagateException(Throwable) to listOf(ForkJoinTask$RunnableExecuteAction:rethrow(Throwable)),
		ForkJoinTask$RunnableExecuteAction:setRawResult(Object) to listOf(ForkJoinTask$RunnableExecuteAction:setRawResult(Void)),
		ForkJoinTask$RunnableExecuteAction:getRawResult() to listOf(ForkJoinTask$RunnableExecuteAction:getRawResult()),
		ForkJoinTask:setCompletion(int) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:doExec() to listOf(ForkJoinTask:exec(), ForkJoinTask:setExceptionalCompletion(Throwable), ForkJoinTask:setCompletion(int)),
		ForkJoinTask:trySetSignal() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:externalAwaitDone() to listOf(ForkJoinPool:externalHelpComplete(CountedCompleter), ForkJoinPool:tryExternalUnpush(ForkJoinTask), ForkJoinTask:doExec(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:externalInterruptibleAwaitDone() to listOf(ForkJoinPool:externalHelpComplete(CountedCompleter), ForkJoinPool:tryExternalUnpush(ForkJoinTask), ForkJoinTask:doExec(), Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:doJoin() to listOf(ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask), ForkJoinTask:doExec(), ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinTask:externalAwaitDone()),
		ForkJoinTask:doInvoke() to listOf(ForkJoinTask:doExec(), ForkJoinPool:awaitJoin(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinTask:externalAwaitDone()),
		ForkJoinTask:recordExceptionalCompletion(Throwable) to listOf(ForkJoinTask:expungeStaleExceptions(), ForkJoinTask$ExceptionNode:<init>(ForkJoinTask-Throwable-ForkJoinTask$ExceptionNode), ForkJoinTask$ExceptionNode:get(), ForkJoinTask:setCompletion(int)),
		ForkJoinTask:setExceptionalCompletion(Throwable) to listOf(ForkJoinTask:recordExceptionalCompletion(Throwable), ForkJoinTask:internalPropagateException(Throwable)),
		ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask) to listOf(ForkJoinTask:cancel(boolean)),
		ForkJoinTask:clearExceptionalCompletion() to listOf(ForkJoinTask$ExceptionNode:get(), ForkJoinTask:expungeStaleExceptions()),
		ForkJoinTask:getThrowableException() to listOf(ForkJoinTask:expungeStaleExceptions(), ForkJoinTask$ExceptionNode:get()),
		ForkJoinTask:expungeStaleExceptions() to listOf(ForkJoinTask$ExceptionNode:get()),
		ForkJoinTask:helpExpungeStaleExceptions() to listOf(ForkJoinTask:expungeStaleExceptions()),
		ForkJoinTask:rethrow(Throwable) to listOf(ForkJoinTask:uncheckedThrow(Throwable)),
		ForkJoinTask:reportException(int) to listOf(ForkJoinTask:getThrowableException(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinTask:fork() to listOf(ForkJoinPool$WorkQueue:push(ForkJoinTask), ForkJoinPool:externalPush(ForkJoinTask)),
		ForkJoinTask:join() to listOf(ForkJoinTask:doJoin(), ForkJoinTask:reportException(int), ForkJoinTask:getRawResult()),
		ForkJoinTask:invoke() to listOf(ForkJoinTask:doInvoke(), ForkJoinTask:reportException(int), ForkJoinTask:getRawResult()),
		ForkJoinTask:invokeAll(ForkJoinTask-ForkJoinTask) to listOf(ForkJoinTask:fork(), ForkJoinTask:doInvoke(), ForkJoinTask:reportException(int), ForkJoinTask:doJoin(), ForkJoinTask:reportException(int)),
		ForkJoinTask:invokeAll(ForkJoinTask[]) to listOf(ForkJoinTask:fork(), ForkJoinTask:doInvoke(), ForkJoinTask:getException(), ForkJoinTask:cancel(boolean), ForkJoinTask:doJoin(), ForkJoinTask:getException(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinTask:invokeAll(Collection) to listOf(ForkJoinTask:invokeAll(ForkJoinTask[]), ForkJoinTask:fork(), ForkJoinTask:doInvoke(), ForkJoinTask:getException(), ForkJoinTask:cancel(boolean), ForkJoinTask:doJoin(), ForkJoinTask:getException(), ForkJoinTask:rethrow(Throwable)),
		ForkJoinTask:cancel(boolean) to listOf(ForkJoinTask:setCompletion(int)),
		ForkJoinTask:getException() to listOf(ForkJoinTask:getThrowableException()),
		ForkJoinTask:completeExceptionally(Throwable) to listOf(ForkJoinTask:setExceptionalCompletion(Throwable)),
		ForkJoinTask:complete(Object) to listOf(ForkJoinTask:setRawResult(Object), ForkJoinTask:setExceptionalCompletion(Throwable), ForkJoinTask:setCompletion(int)),
		ForkJoinTask:quietlyComplete() to listOf(ForkJoinTask:setCompletion(int)),
		ForkJoinTask:get() to listOf(ForkJoinTask:doJoin(), ForkJoinTask:externalInterruptibleAwaitDone(), ForkJoinTask:getThrowableException(), ForkJoinTask:getRawResult()),
		ForkJoinTask:get(long-TimeUnit) to listOf(ForkJoinPool:helpJoinOnce(ForkJoinPool$WorkQueue-ForkJoinTask), ForkJoinPool:externalHelpComplete(CountedCompleter), ForkJoinPool:tryExternalUnpush(ForkJoinTask), ForkJoinTask:doExec(), ForkJoinTask:cancelIgnoringExceptions(ForkJoinTask), ForkJoinPool:tryCompensate(long), Unsafe:compareAndSwapInt(Object-long-int-int), ForkJoinPool:incrementActiveCount(), ForkJoinPool:incrementActiveCount(), ForkJoinTask:getThrowableException(), ForkJoinTask:getRawResult()),
		ForkJoinTask:quietlyJoin() to listOf(ForkJoinTask:doJoin()),
		ForkJoinTask:quietlyInvoke() to listOf(ForkJoinTask:doInvoke()),
		ForkJoinTask:helpQuiesce() to listOf(ForkJoinPool:helpQuiescePool(ForkJoinPool$WorkQueue), ForkJoinPool:quiesceCommonPool()),
		ForkJoinTask:reinitialize() to listOf(ForkJoinTask:clearExceptionalCompletion()),
		ForkJoinTask:tryUnfork() to listOf(ForkJoinPool$WorkQueue:tryUnpush(ForkJoinTask), ForkJoinPool:tryExternalUnpush(ForkJoinTask)),
		ForkJoinTask:getQueuedTaskCount() to listOf(ForkJoinPool:commonSubmitterQueue(), ForkJoinPool$WorkQueue:queueSize()),
		ForkJoinTask:getSurplusQueuedTaskCount() to listOf(ForkJoinPool:getSurplusQueuedTaskCount()),
		ForkJoinTask:peekNextLocalTask() to listOf(ForkJoinPool:commonSubmitterQueue(), ForkJoinPool$WorkQueue:peek()),
		ForkJoinTask:pollNextLocalTask() to listOf(ForkJoinPool$WorkQueue:nextLocalTask()),
		ForkJoinTask:pollTask() to listOf(ForkJoinPool:nextTaskFor(ForkJoinPool$WorkQueue)),
		ForkJoinTask:setForkJoinTaskTag(short) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:compareAndSetForkJoinTaskTag(short-short) to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		ForkJoinTask:adapt(Runnable) to listOf(ForkJoinTask$AdaptedRunnableAction:<init>(Runnable)),
		ForkJoinTask:adapt(Runnable-Object) to listOf(ForkJoinTask$AdaptedRunnable:<init>(Runnable-Object)),
		ForkJoinTask:adapt(Callable) to listOf(ForkJoinTask$AdaptedCallable:<init>(Callable)),
		ForkJoinTask:writeObject(ObjectOutputStream) to listOf(ForkJoinTask:getException()),
		ForkJoinTask:readObject(ObjectInputStream) to listOf(ForkJoinTask:setExceptionalCompletion(Throwable)),
		ForkJoinTask:getUnsafe() to listOf(Unsafe:getUnsafe(), ForkJoinTask$1:<init>()),
		ForkJoinTask:<clinit>() to listOf(ForkJoinTask:getUnsafe(), Unsafe:objectFieldOffset(Field)),
		ForkJoinWorkerThread:<init>(ForkJoinPool) to listOf(ForkJoinPool:registerWorker(ForkJoinWorkerThread)),
		ForkJoinWorkerThread:run() to listOf(ForkJoinWorkerThread:onStart(), ForkJoinPool:runWorker(ForkJoinPool$WorkQueue), ForkJoinWorkerThread:onTermination(Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinWorkerThread:onTermination(Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinWorkerThread:onTermination(Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable), ForkJoinPool:deregisterWorker(ForkJoinWorkerThread-Throwable)),
		LongAdder:<init>() to listOf(Striped64:<init>()),
		LongAdder:add(long) to listOf(LongAdder:casBase(long-long), Striped64$ThreadHashCode:get(), Striped64$Cell:cas(long-long), LongAdder:retryUpdate(long-Striped64$HashCode-boolean)),
		LongAdder:increment() to listOf(LongAdder:add(long)),
		LongAdder:decrement() to listOf(LongAdder:add(long)),
		LongAdder:reset() to listOf(LongAdder:internalReset(long)),
		LongAdder:toString() to listOf(LongAdder:sum()),
		LongAdder:longValue() to listOf(LongAdder:sum()),
		LongAdder:intValue() to listOf(LongAdder:sum()),
		LongAdder:floatValue() to listOf(LongAdder:sum()),
		LongAdder:doubleValue() to listOf(LongAdder:sum()),
		LongAdder:writeObject(ObjectOutputStream) to listOf(LongAdder:sum()),
		Striped64$1:run() to listOf(Striped64$1:run()),
		Striped64$Cell:cas(long-long) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long)),
		Striped64$Cell:<clinit>() to listOf(Striped64:access$000(), Unsafe:objectFieldOffset(Field)),
		Striped64$ThreadHashCode:initialValue() to listOf(Striped64$HashCode:<init>(), Striped64$ThreadHashCode:initialValue()),
		Striped64:casBase(long-long) to listOf(Unsafe:compareAndSwapLong(Object-long-long-long)),
		Striped64:casBusy() to listOf(Unsafe:compareAndSwapInt(Object-long-int-int)),
		Striped64:retryUpdate(long-Striped64$HashCode-boolean) to listOf(Striped64$Cell:<init>(long), Striped64:casBusy(), Striped64:fn(long-long), Striped64$Cell:cas(long-long), Striped64:casBusy(), Striped64:casBusy(), Striped64$Cell:<init>(long), Striped64:fn(long-long), Striped64:casBase(long-long)),
		Striped64:getUnsafe() to listOf(Unsafe:getUnsafe(), Striped64$1:<init>()),
		Striped64:access$000() to listOf(Striped64:getUnsafe()),
		Striped64:<clinit>() to listOf(Striped64$ThreadHashCode:<init>(), Striped64:getUnsafe(), Unsafe:objectFieldOffset(Field), Unsafe:objectFieldOffset(Field)),
		ConcurrentSet:<init>() to listOf(PlatformDependent:newConcurrentHashMap()),
		JavassistTypeParameterMatcherGenerator:appendClassPath(ClassPath) to listOf(ClassPool:appendClassPath(ClassPath)),
		JavassistTypeParameterMatcherGenerator:appendClassPath(String) to listOf(ClassPool:appendClassPath(String)),
		JavassistTypeParameterMatcherGenerator:generate(Class) to listOf(JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader)),
		JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader) to listOf(JavassistTypeParameterMatcherGenerator:typeName(Class), ClassPool:getAndRename(String-String), CtClass:getModifiers(), CtClass:setModifiers(int), CtClass:getDeclaredMethod(String), CtMethod:setBody(String), CtClass:toBytecode(), CtClass:detach(), InternalLogger:debug(String-Object)),
		JavassistTypeParameterMatcherGenerator:typeName(Class) to listOf(JavassistTypeParameterMatcherGenerator:typeName(Class)),
		JavassistTypeParameterMatcherGenerator:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), ClassPool:<init>(boolean), ClassClassPath:<init>(Class), ClassPool:appendClassPath(ClassPath)),
		AbstractInternalLogger$1:<clinit>() to listOf(InternalLogLevel:values(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal(), InternalLogLevel:ordinal()),
		AbstractInternalLogger:isEnabled(InternalLogLevel) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:isTraceEnabled(), AbstractInternalLogger:isDebugEnabled(), AbstractInternalLogger:isInfoEnabled(), AbstractInternalLogger:isWarnEnabled(), AbstractInternalLogger:isErrorEnabled()),
		AbstractInternalLogger:log(InternalLogLevel-String-Throwable) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Throwable), AbstractInternalLogger:debug(String-Throwable), AbstractInternalLogger:info(String-Throwable), AbstractInternalLogger:warn(String-Throwable), AbstractInternalLogger:error(String-Throwable)),
		AbstractInternalLogger:log(InternalLogLevel-String) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String), AbstractInternalLogger:debug(String), AbstractInternalLogger:info(String), AbstractInternalLogger:warn(String), AbstractInternalLogger:error(String)),
		AbstractInternalLogger:log(InternalLogLevel-String-Object) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Object), AbstractInternalLogger:debug(String-Object), AbstractInternalLogger:info(String-Object), AbstractInternalLogger:warn(String-Object), AbstractInternalLogger:error(String-Object)),
		AbstractInternalLogger:log(InternalLogLevel-String-Object-Object) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Object-Object), AbstractInternalLogger:debug(String-Object-Object), AbstractInternalLogger:info(String-Object-Object), AbstractInternalLogger:warn(String-Object-Object), AbstractInternalLogger:error(String-Object-Object)),
		AbstractInternalLogger:log(InternalLogLevel-String-Object[]) to listOf(InternalLogLevel:ordinal(), AbstractInternalLogger:trace(String-Object[]), AbstractInternalLogger:debug(String-Object[]), AbstractInternalLogger:info(String-Object[]), AbstractInternalLogger:warn(String-Object[]), AbstractInternalLogger:error(String-Object[])),
		AbstractInternalLogger:readResolve() to listOf(AbstractInternalLogger:name(), InternalLoggerFactory:getInstance(String)),
		AbstractInternalLogger:toString() to listOf(AbstractInternalLogger:name()),
		CommonsLogger:<init>(Log-String) to listOf(AbstractInternalLogger:<init>(String)),
		CommonsLogger:isTraceEnabled() to listOf(Log:isTraceEnabled()),
		CommonsLogger:trace(String) to listOf(Log:trace(Object)),
		CommonsLogger:trace(String-Object) to listOf(Log:isTraceEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:trace(Object-Throwable)),
		CommonsLogger:trace(String-Object-Object) to listOf(Log:isTraceEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:trace(Object-Throwable)),
		CommonsLogger:trace(String-Object[]) to listOf(Log:isTraceEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:trace(Object-Throwable)),
		CommonsLogger:trace(String-Throwable) to listOf(Log:trace(Object-Throwable)),
		CommonsLogger:isDebugEnabled() to listOf(Log:isDebugEnabled()),
		CommonsLogger:debug(String) to listOf(Log:debug(Object)),
		CommonsLogger:debug(String-Object) to listOf(Log:isDebugEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:debug(Object-Throwable)),
		CommonsLogger:debug(String-Object-Object) to listOf(Log:isDebugEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:debug(Object-Throwable)),
		CommonsLogger:debug(String-Object[]) to listOf(Log:isDebugEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:debug(Object-Throwable)),
		CommonsLogger:debug(String-Throwable) to listOf(Log:debug(Object-Throwable)),
		CommonsLogger:isInfoEnabled() to listOf(Log:isInfoEnabled()),
		CommonsLogger:info(String) to listOf(Log:info(Object)),
		CommonsLogger:info(String-Object) to listOf(Log:isInfoEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:info(Object-Throwable)),
		CommonsLogger:info(String-Object-Object) to listOf(Log:isInfoEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:info(Object-Throwable)),
		CommonsLogger:info(String-Object[]) to listOf(Log:isInfoEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:info(Object-Throwable)),
		CommonsLogger:info(String-Throwable) to listOf(Log:info(Object-Throwable)),
		CommonsLogger:isWarnEnabled() to listOf(Log:isWarnEnabled()),
		CommonsLogger:warn(String) to listOf(Log:warn(Object)),
		CommonsLogger:warn(String-Object) to listOf(Log:isWarnEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:warn(Object-Throwable)),
		CommonsLogger:warn(String-Object-Object) to listOf(Log:isWarnEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:warn(Object-Throwable)),
		CommonsLogger:warn(String-Object[]) to listOf(Log:isWarnEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:warn(Object-Throwable)),
		CommonsLogger:warn(String-Throwable) to listOf(Log:warn(Object-Throwable)),
		CommonsLogger:isErrorEnabled() to listOf(Log:isErrorEnabled()),
		CommonsLogger:error(String) to listOf(Log:error(Object)),
		CommonsLogger:error(String-Object) to listOf(Log:isErrorEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:error(Object-Throwable)),
		CommonsLogger:error(String-Object-Object) to listOf(Log:isErrorEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:error(Object-Throwable)),
		CommonsLogger:error(String-Object[]) to listOf(Log:isErrorEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Log:error(Object-Throwable)),
		CommonsLogger:error(String-Throwable) to listOf(Log:error(Object-Throwable)),
		CommonsLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		CommonsLoggerFactory:newInstance(String) to listOf(LogFactory:getLog(String), CommonsLogger:<init>(Log-String)),
		FormattingTuple:<init>(String) to listOf(FormattingTuple:<init>(String-Object[]-Throwable)),
		FormattingTuple:<init>(String-Object[]-Throwable) to listOf(FormattingTuple:trimmedCopy(Object[])),
		FormattingTuple:<clinit>() to listOf(FormattingTuple:<init>(String)),
		InternalLoggerFactory:getInstance(Class) to listOf(InternalLoggerFactory:getInstance(String)),
		InternalLoggerFactory:getInstance(String) to listOf(InternalLoggerFactory:getDefaultFactory(), InternalLoggerFactory:newInstance(String)),
		InternalLoggerFactory:<clinit>() to listOf(Slf4JLoggerFactory:<init>(boolean), InternalLoggerFactory:newInstance(String), InternalLogger:debug(String), Log4JLoggerFactory:<init>(), InternalLoggerFactory:newInstance(String), InternalLogger:debug(String), JdkLoggerFactory:<init>(), InternalLoggerFactory:newInstance(String), InternalLogger:debug(String)),
		InternalLogLevel:values() to listOf(InternalLogLevel[]:clone()),
		InternalLogLevel:<clinit>() to listOf(InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int), InternalLogLevel:<init>(String-int)),
		JdkLogger:<init>(Logger) to listOf(AbstractInternalLogger:<init>(String)),
		JdkLogger:trace(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:trace(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:debug(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:info(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:warn(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Object) to listOf(MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Object-Object) to listOf(MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Object[]) to listOf(MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:error(String-Throwable) to listOf(JdkLogger:log(String-Level-String-Throwable)),
		JdkLogger:log(String-Level-String-Throwable) to listOf(JdkLogger:name(), JdkLogger:fillCallerData(String-LogRecord)),
		JdkLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		JdkLoggerFactory:newInstance(String) to listOf(JdkLogger:<init>(Logger)),
		Log4JLogger:<init>(Logger) to listOf(Logger:getName(), AbstractInternalLogger:<init>(String), Log4JLogger:isTraceCapable()),
		Log4JLogger:isTraceCapable() to listOf(Logger:isTraceEnabled()),
		Log4JLogger:isTraceEnabled() to listOf(Logger:isTraceEnabled(), Logger:isDebugEnabled()),
		Log4JLogger:trace(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Object) to listOf(Log4JLogger:isTraceEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Object-Object) to listOf(Log4JLogger:isTraceEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Object[]) to listOf(Log4JLogger:isTraceEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:trace(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isDebugEnabled() to listOf(Logger:isDebugEnabled()),
		Log4JLogger:debug(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Object) to listOf(Logger:isDebugEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Object-Object) to listOf(Logger:isDebugEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Object[]) to listOf(Logger:isDebugEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:debug(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isInfoEnabled() to listOf(Logger:isInfoEnabled()),
		Log4JLogger:info(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Object) to listOf(Logger:isInfoEnabled(), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Object-Object) to listOf(Logger:isInfoEnabled(), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Object[]) to listOf(Logger:isInfoEnabled(), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:info(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isWarnEnabled() to listOf(Logger:isEnabledFor(Priority)),
		Log4JLogger:warn(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Object-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Object[]) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:warn(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:isErrorEnabled() to listOf(Logger:isEnabledFor(Priority)),
		Log4JLogger:error(String) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Object-Object) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:format(String-Object-Object), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Object[]) to listOf(Logger:isEnabledFor(Priority), MessageFormatter:arrayFormat(String-Object[]), FormattingTuple:getMessage(), FormattingTuple:getThrowable(), Logger:log(String-Priority-Object-Throwable)),
		Log4JLogger:error(String-Throwable) to listOf(Logger:log(String-Priority-Object-Throwable)),
		Log4JLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		Log4JLoggerFactory:newInstance(String) to listOf(Logger:getLogger(String), Log4JLogger:<init>(Logger)),
		MessageFormatter:format(String-Object) to listOf(MessageFormatter:arrayFormat(String-Object[])),
		MessageFormatter:format(String-Object-Object) to listOf(MessageFormatter:arrayFormat(String-Object[])),
		MessageFormatter:arrayFormat(String-Object[]) to listOf(MessageFormatter:getThrowableCandidate(Object[]), FormattingTuple:<init>(String-Object[]-Throwable), FormattingTuple:<init>(String), FormattingTuple:<init>(String-Object[]-Throwable), FormattingTuple:<init>(String-Object[]-Throwable), MessageFormatter:isEscapedDelimeter(String-int), MessageFormatter:isDoubleEscaped(String-int), MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map), MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map), FormattingTuple:<init>(String-Object[]-Throwable), FormattingTuple:<init>(String-Object[]-Throwable)),
		MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map) to listOf(MessageFormatter:safeObjectAppend(StringBuffer-Object), MessageFormatter:booleanArrayAppend(StringBuffer-boolean[]), MessageFormatter:byteArrayAppend(StringBuffer-byte[]), MessageFormatter:charArrayAppend(StringBuffer-char[]), MessageFormatter:shortArrayAppend(StringBuffer-short[]), MessageFormatter:intArrayAppend(StringBuffer-int[]), MessageFormatter:longArrayAppend(StringBuffer-long[]), MessageFormatter:floatArrayAppend(StringBuffer-float[]), MessageFormatter:doubleArrayAppend(StringBuffer-double[]), MessageFormatter:objectArrayAppend(StringBuffer-Object[]-Map)),
		MessageFormatter:objectArrayAppend(StringBuffer-Object[]-Map) to listOf(MessageFormatter:deeplyAppendParameter(StringBuffer-Object-Map)),
		Slf4JLogger:<init>(Logger) to listOf(Logger:getName(), AbstractInternalLogger:<init>(String)),
		Slf4JLogger:isTraceEnabled() to listOf(Logger:isTraceEnabled()),
		Slf4JLogger:trace(String) to listOf(Logger:trace(String)),
		Slf4JLogger:trace(String-Object) to listOf(Logger:trace(String-Object)),
		Slf4JLogger:trace(String-Object-Object) to listOf(Logger:trace(String-Object-Object)),
		Slf4JLogger:trace(String-Object[]) to listOf(Logger:trace(String-Object[])),
		Slf4JLogger:trace(String-Throwable) to listOf(Logger:trace(String-Throwable)),
		Slf4JLogger:isDebugEnabled() to listOf(Logger:isDebugEnabled()),
		Slf4JLogger:debug(String) to listOf(Logger:debug(String)),
		Slf4JLogger:debug(String-Object) to listOf(Logger:debug(String-Object)),
		Slf4JLogger:debug(String-Object-Object) to listOf(Logger:debug(String-Object-Object)),
		Slf4JLogger:debug(String-Object[]) to listOf(Logger:debug(String-Object[])),
		Slf4JLogger:debug(String-Throwable) to listOf(Logger:debug(String-Throwable)),
		Slf4JLogger:isInfoEnabled() to listOf(Logger:isInfoEnabled()),
		Slf4JLogger:info(String) to listOf(Logger:info(String)),
		Slf4JLogger:info(String-Object) to listOf(Logger:info(String-Object)),
		Slf4JLogger:info(String-Object-Object) to listOf(Logger:info(String-Object-Object)),
		Slf4JLogger:info(String-Object[]) to listOf(Logger:info(String-Object[])),
		Slf4JLogger:info(String-Throwable) to listOf(Logger:info(String-Throwable)),
		Slf4JLogger:isWarnEnabled() to listOf(Logger:isWarnEnabled()),
		Slf4JLogger:warn(String) to listOf(Logger:warn(String)),
		Slf4JLogger:warn(String-Object) to listOf(Logger:warn(String-Object)),
		Slf4JLogger:warn(String-Object[]) to listOf(Logger:warn(String-Object[])),
		Slf4JLogger:warn(String-Object-Object) to listOf(Logger:warn(String-Object-Object)),
		Slf4JLogger:warn(String-Throwable) to listOf(Logger:warn(String-Throwable)),
		Slf4JLogger:isErrorEnabled() to listOf(Logger:isErrorEnabled()),
		Slf4JLogger:error(String) to listOf(Logger:error(String)),
		Slf4JLogger:error(String-Object) to listOf(Logger:error(String-Object)),
		Slf4JLogger:error(String-Object-Object) to listOf(Logger:error(String-Object-Object)),
		Slf4JLogger:error(String-Object[]) to listOf(Logger:error(String-Object[])),
		Slf4JLogger:error(String-Throwable) to listOf(Logger:error(String-Throwable)),
		Slf4JLoggerFactory:<init>() to listOf(InternalLoggerFactory:<init>()),
		Slf4JLoggerFactory:<init>(boolean) to listOf(InternalLoggerFactory:<init>(), Slf4JLoggerFactory$1:<init>(Slf4JLoggerFactory-StringBuffer), LoggerFactory:getILoggerFactory()),
		Slf4JLoggerFactory:newInstance(String) to listOf(LoggerFactory:getLogger(String), Slf4JLogger:<init>(Logger)),
		NoOpTypeParameterMatcher:<init>() to listOf(TypeParameterMatcher:<init>()),
		PlatformDependent:throwException(Throwable) to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:throwException(Throwable), PlatformDependent:throwException0(Throwable)),
		PlatformDependent:newConcurrentHashMap() to listOf(ConcurrentHashMapV8:<init>()),
		PlatformDependent:newConcurrentHashMap(int) to listOf(ConcurrentHashMapV8:<init>(int)),
		PlatformDependent:newConcurrentHashMap(int-float) to listOf(ConcurrentHashMapV8:<init>(int-float)),
		PlatformDependent:newConcurrentHashMap(int-float-int) to listOf(ConcurrentHashMapV8:<init>(int-float-int)),
		PlatformDependent:newConcurrentHashMap(Map) to listOf(ConcurrentHashMapV8:<init>(Map)),
		PlatformDependent:freeDirectBuffer(ByteBuffer) to listOf(PlatformDependent0:freeDirectBuffer(ByteBuffer)),
		PlatformDependent:directBufferAddress(ByteBuffer) to listOf(PlatformDependent0:directBufferAddress(ByteBuffer)),
		PlatformDependent:getObject(Object-long) to listOf(PlatformDependent0:getObject(Object-long)),
		PlatformDependent:getInt(Object-long) to listOf(PlatformDependent0:getInt(Object-long)),
		PlatformDependent:objectFieldOffset(Field) to listOf(PlatformDependent0:objectFieldOffset(Field)),
		PlatformDependent:getByte(long) to listOf(PlatformDependent0:getByte(long)),
		PlatformDependent:getShort(long) to listOf(PlatformDependent0:getShort(long)),
		PlatformDependent:getInt(long) to listOf(PlatformDependent0:getInt(long)),
		PlatformDependent:getLong(long) to listOf(PlatformDependent0:getLong(long)),
		PlatformDependent:putByte(long-byte) to listOf(PlatformDependent0:putByte(long-byte)),
		PlatformDependent:putShort(long-short) to listOf(PlatformDependent0:putShort(long-short)),
		PlatformDependent:putInt(long-int) to listOf(PlatformDependent0:putInt(long-int)),
		PlatformDependent:putLong(long-long) to listOf(PlatformDependent0:putLong(long-long)),
		PlatformDependent:copyMemory(long-long-long) to listOf(PlatformDependent0:copyMemory(long-long-long)),
		PlatformDependent:copyMemory(byte[]-int-long-long) to listOf(PlatformDependent0:copyMemory(Object-long-Object-long-long)),
		PlatformDependent:copyMemory(long-byte[]-int-long) to listOf(PlatformDependent0:copyMemory(Object-long-Object-long-long)),
		PlatformDependent:isAndroid0() to listOf(InternalLogger:debug(String)),
		PlatformDependent:isWindows0() to listOf(SystemPropertyUtil:get(String-String), InternalLogger:debug(String)),
		PlatformDependent:isRoot0() to listOf(PlatformDependent:isWindows(), InternalLogger:debug(String-Object), InternalLogger:debug(String), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), InternalLogger:debug(String)),
		PlatformDependent:javaVersion0() to listOf(PlatformDependent:isAndroid(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object)),
		PlatformDependent:hasUnsafe0() to listOf(SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String-Object), PlatformDependent:isAndroid(), InternalLogger:debug(String), InternalLogger:debug(String), SystemPropertyUtil:contains(String), SystemPropertyUtil:getBoolean(String-boolean), SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String), PlatformDependent0:hasUnsafe(), InternalLogger:debug(String-Object)),
		PlatformDependent:arrayBaseOffset0() to listOf(PlatformDependent:hasUnsafe(), PlatformDependent0:arrayBaseOffset()),
		PlatformDependent:maxDirectMemory0() to listOf(InternalLogger:debug(String-Object), InternalLogger:debug(String-Object)),
		PlatformDependent:hasJavassist0() to listOf(SystemPropertyUtil:getBoolean(String-boolean), InternalLogger:debug(String-Object), InternalLogger:debug(String), JavassistTypeParameterMatcherGenerator:generate(Class-ClassLoader), InternalLogger:debug(String), InternalLogger:debug(String), InternalLogger:debug(String)),
		PlatformDependent:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), PlatformDependent:isAndroid0(), PlatformDependent:isWindows0(), PlatformDependent:isRoot0(), PlatformDependent:javaVersion0(), PlatformDependent:isAndroid(), PlatformDependent:hasUnsafe0(), SystemPropertyUtil:getBoolean(String-boolean), PlatformDependent:maxDirectMemory0(), PlatformDependent:arrayBaseOffset0(), PlatformDependent:hasJavassist0(), InternalLogger:isDebugEnabled(), InternalLogger:debug(String-Object), PlatformDependent:hasUnsafe(), InternalLogger:info(String)),
		PlatformDependent0:throwException(Throwable) to listOf(Unsafe:throwException(Throwable)),
		PlatformDependent0:freeDirectBuffer(ByteBuffer) to listOf(PlatformDependent0:getObject(Object-long), Cleaner:clean()),
		PlatformDependent0:directBufferAddress(ByteBuffer) to listOf(PlatformDependent0:getLong(Object-long)),
		PlatformDependent0:arrayBaseOffset() to listOf(Unsafe:arrayBaseOffset(Class)),
		PlatformDependent0:getObject(Object-long) to listOf(Unsafe:getObject(Object-long)),
		PlatformDependent0:getInt(Object-long) to listOf(Unsafe:getInt(Object-long)),
		PlatformDependent0:getLong(Object-long) to listOf(Unsafe:getLong(Object-long)),
		PlatformDependent0:objectFieldOffset(Field) to listOf(Unsafe:objectFieldOffset(Field)),
		PlatformDependent0:getByte(long) to listOf(Unsafe:getByte(long)),
		PlatformDependent0:getShort(long) to listOf(Unsafe:getShort(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long)),
		PlatformDependent0:getInt(long) to listOf(Unsafe:getInt(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long)),
		PlatformDependent0:getLong(long) to listOf(Unsafe:getLong(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long), PlatformDependent0:getByte(long)),
		PlatformDependent0:putByte(long-byte) to listOf(Unsafe:putByte(long-byte)),
		PlatformDependent0:putShort(long-short) to listOf(Unsafe:putShort(long-short), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte)),
		PlatformDependent0:putInt(long-int) to listOf(Unsafe:putInt(long-int), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte)),
		PlatformDependent0:putLong(long-long) to listOf(Unsafe:putLong(long-long), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte), PlatformDependent0:putByte(long-byte)),
		PlatformDependent0:copyMemory(long-long-long) to listOf(Unsafe:copyMemory(long-long-long)),
		PlatformDependent0:copyMemory(Object-long-Object-long-long) to listOf(Unsafe:copyMemory(Object-long-Object-long-long)),
		PlatformDependent0:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), Cleaner:clean(), InternalLogger:debug(String-Object), Cleaner:clean(), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String), InternalLogger:debug(String), PlatformDependent0:objectFieldOffset(Field), PlatformDependent0:objectFieldOffset(Field), SystemPropertyUtil:get(String-String), InternalLogger:debug(String-Object)),
		RecyclableArrayList$1:<init>() to listOf(Recycler:<init>()),
		RecyclableArrayList$1:newObject(Recycler$Handle) to listOf(RecyclableArrayList:<init>(Recycler$Handle-RecyclableArrayList$1), RecyclableArrayList$1:newObject(Recycler$Handle)),
		RecyclableArrayList:newInstance() to listOf(RecyclableArrayList:newInstance(int)),
		RecyclableArrayList:newInstance(int) to listOf(Recycler:get(), RecyclableArrayList:ensureCapacity(int)),
		RecyclableArrayList:<init>(Recycler$Handle) to listOf(RecyclableArrayList:<init>(Recycler$Handle-int)),
		RecyclableArrayList:addAll(Collection) to listOf(RecyclableArrayList:checkNullElements(Collection)),
		RecyclableArrayList:addAll(int-Collection) to listOf(RecyclableArrayList:checkNullElements(Collection)),
		RecyclableArrayList:recycle() to listOf(RecyclableArrayList:clear(), Recycler:recycle(Object-Recycler$Handle)),
		RecyclableArrayList:<init>(Recycler$Handle-RecyclableArrayList$1) to listOf(RecyclableArrayList:<init>(Recycler$Handle)),
		RecyclableArrayList:<clinit>() to listOf(RecyclableArrayList$1:<init>()),
		StringUtil:simpleClassName(Object) to listOf(StringUtil:simpleClassName(Class)),
		SystemPropertyUtil:contains(String) to listOf(SystemPropertyUtil:get(String)),
		SystemPropertyUtil:get(String) to listOf(SystemPropertyUtil:get(String-String)),
		SystemPropertyUtil:get(String-String) to listOf(SystemPropertyUtil:log(String-Exception)),
		SystemPropertyUtil:getBoolean(String-boolean) to listOf(SystemPropertyUtil:get(String), SystemPropertyUtil:log(String)),
		SystemPropertyUtil:getInt(String-int) to listOf(SystemPropertyUtil:get(String), SystemPropertyUtil:log(String)),
		SystemPropertyUtil:getLong(String-long) to listOf(SystemPropertyUtil:get(String), SystemPropertyUtil:log(String)),
		SystemPropertyUtil:log(String) to listOf(InternalLogger:warn(String)),
		SystemPropertyUtil:log(String-Exception) to listOf(InternalLogger:warn(String-Throwable)),
		SystemPropertyUtil:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class)),
		ThreadLocalRandom$1:initialValue() to listOf(ThreadLocalRandom:<init>(), ThreadLocalRandom$1:initialValue()),
		ThreadLocalRandom:nextInt(int-int) to listOf(ThreadLocalRandom:nextInt(int)),
		ThreadLocalRandom:nextLong(long) to listOf(ThreadLocalRandom:next(int), ThreadLocalRandom:nextInt(int)),
		ThreadLocalRandom:nextLong(long-long) to listOf(ThreadLocalRandom:nextLong(long)),
		ThreadLocalRandom:nextDouble(double) to listOf(ThreadLocalRandom:nextDouble()),
		ThreadLocalRandom:nextDouble(double-double) to listOf(ThreadLocalRandom:nextDouble()),
		ThreadLocalRandom:<clinit>() to listOf(ThreadLocalRandom$1:<init>()),
		TypeParameterMatcher$1:initialValue() to listOf(TypeParameterMatcher$1:initialValue()),
		TypeParameterMatcher$2:initialValue() to listOf(TypeParameterMatcher$2:initialValue()),
		TypeParameterMatcher$ReflectiveMatcher:<init>(Class) to listOf(TypeParameterMatcher:<init>()),
		TypeParameterMatcher:get(Class) to listOf(PlatformDependent:hasJavassist(), JavassistTypeParameterMatcherGenerator:generate(Class), TypeParameterMatcher:match(Object), TypeParameterMatcher$ReflectiveMatcher:<init>(Class)),
		TypeParameterMatcher:find(Object-Class-String) to listOf(TypeParameterMatcher:find0(Object-Class-String), TypeParameterMatcher:get(Class)),
		TypeParameterMatcher:find0(Object-Class-String) to listOf(TypeParameterMatcher:fail(Class-String), TypeParameterMatcher:fail(Class-String)),
		TypeParameterMatcher:<clinit>() to listOf(NoOpTypeParameterMatcher:<init>(), TypeParameterMatcher$1:<init>(), TypeParameterMatcher$2:<init>()),
		NetUtil:createByteArrayFromIpAddressString(String) to listOf(NetUtil:isValidIpV4Address(String), NetUtil:isValidIpV6Address(String), NetUtil:convertToBytes(String-byte[]-int)),
		NetUtil:convertToBytes(String-byte[]-int) to listOf(NetUtil:getIntValue(char), NetUtil:getIntValue(char), NetUtil:getIntValue(char), NetUtil:getIntValue(char)),
		NetUtil:isValidIpV6Address(String) to listOf(NetUtil:isValidIp4Word(String), NetUtil:isValidHexChar(char), NetUtil:isValidIp4Word(String)),
		NetUtil:<clinit>() to listOf(InternalLoggerFactory:getInstance(Class), InternalLogger:warn(String), InternalLogger:warn(String-Throwable), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), PlatformDependent:throwException(Throwable), PlatformDependent:throwException(Throwable), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object), InternalLogger:debug(String-Object)),
		Recycler$1:initialValue() to listOf(Recycler$Stack:<init>(Recycler-Thread), Recycler$1:initialValue()),
		Recycler$Stack:<init>(Recycler-Thread) to listOf(Recycler$Stack:newArray(int)),
		Recycler$Stack:push(Object) to listOf(Recycler$Stack:newArray(int)),
		Recycler:<init>() to listOf(Recycler$1:<init>(Recycler)),
		Recycler:get() to listOf(Recycler$Stack:pop(), Recycler:newObject(Recycler$Handle)),
		Recycler:recycle(Object-Recycler$Handle) to listOf(Recycler$Stack:push(Object)),
		ReferenceCountUtil:retain(Object) to listOf(ReferenceCounted:retain()),
		ReferenceCountUtil:retain(Object-int) to listOf(ReferenceCounted:retain(int)),
		ReferenceCountUtil:release(Object) to listOf(ReferenceCounted:release()),
		ReferenceCountUtil:release(Object-int) to listOf(ReferenceCounted:release(int)),
		ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object) to listOf(ResourceLeakDetector:access$300(ResourceLeakDetector), ResourceLeakException:<init>(String), ResourceLeakDetector:access$400(ResourceLeakDetector), ResourceLeakDetector:access$400(ResourceLeakDetector), ResourceLeakDetector:access$400(ResourceLeakDetector), ResourceLeakDetector:access$400(ResourceLeakDetector), ResourceLeakDetector:access$400(ResourceLeakDetector), ResourceLeakDetector:access$508(ResourceLeakDetector)),
		ResourceLeakDetector$DefaultResourceLeak:close() to listOf(ResourceLeakDetector:access$400(ResourceLeakDetector), ResourceLeakDetector:access$510(ResourceLeakDetector)),
		ResourceLeakDetector:<init>(Class) to listOf(ResourceLeakDetector:<init>(String)),
		ResourceLeakDetector:<init>(String) to listOf(ResourceLeakDetector:<init>(String-int-long)),
		ResourceLeakDetector:<init>(Class-int-long) to listOf(ResourceLeakDetector:<init>(String-int-long)),
		ResourceLeakDetector:<init>(String-int-long) to listOf(ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object), ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object), PlatformDependent:newConcurrentHashMap(), ResourceLeakDetector$DefaultResourceLeak:access$002(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak), ResourceLeakDetector$DefaultResourceLeak:access$102(ResourceLeakDetector$DefaultResourceLeak-ResourceLeakDetector$DefaultResourceLeak)),
		ResourceLeakDetector:open(Object) to listOf(ResourceLeakDetector:reportLeak(), ResourceLeakDetector$DefaultResourceLeak:<init>(ResourceLeakDetector-Object)),
		ResourceLeakDetector:reportLeak() to listOf(InternalLogger:isWarnEnabled(), ResourceLeakDetector$DefaultResourceLeak:close(), InternalLogger:warn(String), ResourceLeakDetector$DefaultResourceLeak:clear(), ResourceLeakDetector$DefaultResourceLeak:close(), ResourceLeakDetector$DefaultResourceLeak:access$200(ResourceLeakDetector$DefaultResourceLeak), ResourceLeakDetector$DefaultResourceLeak:access$200(ResourceLeakDetector$DefaultResourceLeak), InternalLogger:warn(String-Throwable)),
		ResourceLeakDetector:<clinit>() to listOf(SystemPropertyUtil:getBoolean(String-boolean), InternalLoggerFactory:getInstance(Class), InternalLogger:debug(String-Object), ResourceLeakDetector$1:<init>()),
		ResourceLeakException:<init>() to listOf(ResourceLeakException:getStackTrace()),
		ResourceLeakException:<init>(String) to listOf(ResourceLeakException:getStackTrace()),
		ResourceLeakException:<init>(String-Throwable) to listOf(ResourceLeakException:getStackTrace()),
		ResourceLeakException:<init>(Throwable) to listOf(ResourceLeakException:getStackTrace()),
		Signal:<init>(String) to listOf(UniqueName:<init>(ConcurrentMap-String-Object[])),
		Signal:toString() to listOf(UniqueName:name()),
		Signal:<clinit>() to listOf(PlatformDependent:newConcurrentHashMap()),
		UniqueName:<init>(ConcurrentMap-String-Object[]) to listOf(UniqueName:validateArgs(Object[])),
		UniqueName:toString() to listOf(UniqueName:name()),
		UniqueName:compareTo(Object) to listOf(UniqueName:compareTo(UniqueName)),
	)
)